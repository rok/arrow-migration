{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13339614",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614",
    "key": "ARROW-10531",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12602836",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12602836",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13322795",
                    "key": "ARROW-9746",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322795",
                    "fields": {
                        "summary": "[Rust][DataFusion] Add FORMAT to explain plan and an easy to visualize format",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10531/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614/worklog/509403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb opened a new pull request #8619:\nURL: https://github.com/apache/arrow/pull/8619\n\n\n   # Rationale:\r\n   I have been tracking down potential issues DataFusion for my work project, and I have found myself wanting to print out the state of the logical_plan several times. The existing debug formatting is ok, but it was missing a few key items:\r\n   \r\n   1. Schema information (as in when did columns appear / disappear in the plan)\r\n   2. A visual representation (graphviz)\r\n   \r\n   \r\n   # Open questions:\r\n   1. Would it be better to split the visitor into `visitor.rs` and display code into `display.rs`? I am torn -- this is all logically part of logical_plan, but the module is getting kind of big.\r\n   \r\n   # Changes:\r\n   \r\n   This PR adds several additional formatting options to logical plans in addition to the existing indent. Examples are included below\r\n   \r\n   To do so it also provides a generalized \"Visitor\" pattern for walking logical plan nodes, as well as a general pattern to display logical plan nodes with multiple potential formats.\r\n   \r\n   Note it should be straight forward to get this wired up into EXPALIN as well: https://issues.apache.org/jira/browse/ARROW-9746\r\n   \r\n   \r\n   ## Existing Formatting\r\n   Here is what master currently allows:\r\n   \r\n   ```\r\n   Projection: #id\r\n      Filter: #state Eq Utf8(\\\"CO\\\")\\\r\n          CsvScan: employee.csv projection=Some([0, 3])\r\n   ```\r\n   \r\n   ## With Schema Information.\r\n   This PR adds a dump with schema information:\r\n   \r\n   ```\r\n    Projection: #id [id:Int32]\\\r\n       Filter: #state Eq Utf8(\\\"CO\\\") [id:Int32, state:Utf8]\\\r\n         TableScan: employee.csv projection=Some([0, 3]) [id:Int32, state:Utf8]\";\r\n   ```\r\n   \r\n   ## As Graphviz\r\n   \r\n   This PR adds the ability to display plans using [Graphviz](http://www.graphviz.org)\r\n   \r\n   Here is an example GraphViz plan that comes out:\r\n   ```\r\n   // Begin DataFusion GraphViz Plan (see https://graphviz.org)\r\n   digraph {\r\n     subgraph cluster_1\r\n     {\r\n       graph[label=\"LogicalPlan\"]\r\n       2[label=\"Projection: #id\"]\r\n       3[label=\"Filter: #state Eq Utf8(_CO_)\"]\r\n       2 -> 3 [arrowhead=none, arrowtail=normal, dir=back]\r\n       4[label=\"TableScan: employee.csv projection=Some([0, 3])\"]\r\n       3 -> 4 [arrowhead=none, arrowtail=normal, dir=back]\r\n     }\r\n     subgraph cluster_5\r\n     {\r\n       graph[label=\"Detailed LogicalPlan\"]\r\n       6[label=\"Projection: #id\\nSchema: [id:Int32]\"]\r\n       7[label=\"Filter: #state Eq Utf8(_CO_)\\nSchema: [id:Int32, state:Utf8]\"]\r\n       6 -> 7 [arrowhead=none, arrowtail=normal, dir=back]\r\n       8[label=\"TableScan: employee.csv projection=Some([0, 3])\\nSchema: [id:Int32, state:Utf8]\"]\r\n       7 -> 8 [arrowhead=none, arrowtail=normal, dir=back]\r\n     }\r\n   }\r\n   // End DataFusion GraphViz Plan\r\n   ```\r\n   \r\n   Here is what that looks like rendered:\r\n   <img width=\"1679\" alt=\"Screen Shot 2020-11-09 at 2 30 07 PM\" src=\"https://user-images.githubusercontent.com/490673/98606322-0f891880-22b5-11eb-8e1c-669ce85f0f52.png\">\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-09T22:57:56.372+0000",
                    "updated": "2020-11-09T22:57:56.372+0000",
                    "started": "2020-11-09T22:57:56.372+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509403",
                    "issueId": "13339614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614/worklog/509404",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8619:\nURL: https://github.com/apache/arrow/pull/8619#issuecomment-724330317\n\n\n   I am sorry for the PR size -- but it is mostly comments and tests\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-09T22:59:59.858+0000",
                    "updated": "2020-11-09T22:59:59.858+0000",
                    "started": "2020-11-09T22:59:59.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509404",
                    "issueId": "13339614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614/worklog/509405",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8619:\nURL: https://github.com/apache/arrow/pull/8619#discussion_r520176174\n\n\n\n##########\nFile path: rust/datafusion/src/logical_plan/mod.rs\n##########\n@@ -956,117 +956,570 @@ impl LogicalPlan {\n     }\n }\n \n+/// Trait that implements the [Visitor\n+/// pattern](https://en.wikipedia.org/wiki/Visitor_pattern) for a\n+/// depth first walk of `LogicalPlan` nodes. `pre_visit` is called\n+/// before any children are visited, and then `post_visit` is called\n+/// after all children have been visited.\n+////\n+/// To use, define a struct that implements this trait and then invoke\n+/// \"LogicalPlan::accept\".\n+///\n+/// For example, for a logical plan like:\n+///\n+/// Projection: #id\n+///    Filter: #state Eq Utf8(\\\"CO\\\")\\\n+///       CsvScan: employee.csv projection=Some([0, 3])\";\n+///\n+/// The sequence of visit operations would be:\n+/// ```text\n+/// visitor.pre_visit(Projection)\n+/// visitor.pre_visit(Filter)\n+/// visitor.pre_visit(CsvScan)\n+/// visitor.post_visit(CsvScan)\n+/// visitor.post_visit(Filter)\n+/// visitor.post_visit(Projection)\n+/// ```\n+///\n+/// Example use: TODO\n+pub trait PlanVisitor {\n\nReview comment:\n       I actually think this introduction is the most important thing about this PR -- I would like to move most of the recursive walks of `LogicalPlans` to be in terms of such a structure. \n\n##########\nFile path: rust/datafusion/src/logical_plan/mod.rs\n##########\n@@ -956,117 +956,570 @@ impl LogicalPlan {\n     }\n }\n \n+/// Trait that implements the [Visitor\n+/// pattern](https://en.wikipedia.org/wiki/Visitor_pattern) for a\n+/// depth first walk of `LogicalPlan` nodes. `pre_visit` is called\n+/// before any children are visited, and then `post_visit` is called\n+/// after all children have been visited.\n+////\n+/// To use, define a struct that implements this trait and then invoke\n+/// \"LogicalPlan::accept\".\n+///\n+/// For example, for a logical plan like:\n+///\n+/// Projection: #id\n+///    Filter: #state Eq Utf8(\\\"CO\\\")\\\n+///       CsvScan: employee.csv projection=Some([0, 3])\";\n+///\n+/// The sequence of visit operations would be:\n+/// ```text\n+/// visitor.pre_visit(Projection)\n+/// visitor.pre_visit(Filter)\n+/// visitor.pre_visit(CsvScan)\n+/// visitor.post_visit(CsvScan)\n+/// visitor.post_visit(Filter)\n+/// visitor.post_visit(Projection)\n+/// ```\n+///\n+/// Example use: TODO\n+pub trait PlanVisitor {\n+    /// The type of error returned by this visitor\n+    type Error;\n+\n+    /// Invoked on a logical plan before any of its child inputs have been\n+    /// visited. If Ok(true) is returned, the recursion continues. If\n+    /// Err(..) or Ok(false) are returned, the recursion stops\n+    /// immedately and the error, if any, is returned to `accept`\n+    fn pre_visit(&mut self, plan: &LogicalPlan)\n+        -> std::result::Result<bool, Self::Error>;\n+\n+    /// Invoked on a logical plan after all of its child inputs have\n+    /// been visited. The return value is handled the same as the\n+    /// return value of `pre_visit`. The provided default implementation\n+    /// returns `Ok(true)`.\n+    fn post_visit(\n+        &mut self,\n+        _plan: &LogicalPlan,\n+    ) -> std::result::Result<bool, Self::Error> {\n+        Ok(true)\n+    }\n+}\n+\n impl LogicalPlan {\n-    fn fmt_with_indent(&self, f: &mut fmt::Formatter, indent: usize) -> fmt::Result {\n-        if indent > 0 {\n-            writeln!(f)?;\n-            for _ in 0..indent {\n-                write!(f, \"  \")?;\n-            }\n+    /// returns all inputs in the logical plan. Returns Ok(true) if\n+    /// all nodes were visited, and Ok(false) if any call to\n+    /// `pre_visit` or `post_visit` returned Ok(false) and may have\n+    /// cut short the recursion\n+    pub fn accept<V>(&self, visitor: &mut V) -> std::result::Result<bool, V::Error>\n+    where\n+        V: PlanVisitor,\n+    {\n+        if !visitor.pre_visit(self)? {\n+            return Ok(false);\n         }\n-        match *self {\n-            LogicalPlan::EmptyRelation { .. } => write!(f, \"EmptyRelation\"),\n-            LogicalPlan::TableScan {\n-                ref source,\n-                ref projection,\n-                ..\n-            } => match source {\n-                TableSource::FromContext(table_name) => {\n-                    write!(f, \"TableScan: {} projection={:?}\", table_name, projection)\n-                }\n-                TableSource::FromProvider(_) => {\n-                    write!(f, \"TableScan: projection={:?}\", projection)\n-                }\n-            },\n-            LogicalPlan::InMemoryScan { ref projection, .. } => {\n-                write!(f, \"InMemoryScan: projection={:?}\", projection)\n-            }\n-            LogicalPlan::CsvScan {\n-                ref path,\n-                ref projection,\n-                ..\n-            } => write!(f, \"CsvScan: {} projection={:?}\", path, projection),\n-            LogicalPlan::ParquetScan {\n-                ref path,\n-                ref projection,\n-                ..\n-            } => write!(f, \"ParquetScan: {} projection={:?}\", path, projection),\n-            LogicalPlan::Projection {\n-                ref expr,\n-                ref input,\n-                ..\n-            } => {\n-                write!(f, \"Projection: \")?;\n-                for i in 0..expr.len() {\n-                    if i > 0 {\n-                        write!(f, \", \")?;\n+\n+        // recurse\n+        let recurse = match self {\n+            LogicalPlan::Projection { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Filter { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Aggregate { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Sort { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Limit { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Extension { node } => {\n+                for input in node.inputs() {\n+                    if !input.accept(visitor)? {\n+                        return Ok(false);\n                     }\n-                    write!(f, \"{:?}\", expr[i])?;\n                 }\n-                input.fmt_with_indent(f, indent + 1)\n+                true\n             }\n-            LogicalPlan::Filter {\n-                predicate: ref expr,\n-                ref input,\n-                ..\n-            } => {\n-                write!(f, \"Filter: {:?}\", expr)?;\n-                input.fmt_with_indent(f, indent + 1)\n-            }\n-            LogicalPlan::Aggregate {\n-                ref input,\n-                ref group_expr,\n-                ref aggr_expr,\n-                ..\n-            } => {\n+            // plans without inputs\n+            LogicalPlan::TableScan { .. }\n+            | LogicalPlan::InMemoryScan { .. }\n+            | LogicalPlan::ParquetScan { .. }\n+            | LogicalPlan::CsvScan { .. }\n+            | LogicalPlan::EmptyRelation { .. }\n+            | LogicalPlan::CreateExternalTable { .. }\n+            | LogicalPlan::Explain { .. } => true,\n+        };\n+        if !recurse {\n+            return Ok(false);\n+        }\n+\n+        if !visitor.post_visit(self)? {\n+            return Ok(false);\n+        }\n+\n+        Ok(true)\n+    }\n+}\n+\n+/// Formats plans with a single line per node. For example:\n+///\n+/// Projection: #id\n+///    Filter: #state Eq Utf8(\\\"CO\\\")\\\n+///       CsvScan: employee.csv projection=Some([0, 3])\";\n+struct IndentVisitor<'a, 'b> {\n+    f: &'a mut fmt::Formatter<'b>,\n+    /// If true, includes summarized schema information\n+    with_schema: bool,\n+    indent: u32,\n+}\n+\n+impl<'a, 'b> IndentVisitor<'a, 'b> {\n+    fn write_indent(&mut self) -> fmt::Result {\n+        for _ in 0..self.indent {\n+            write!(self.f, \"  \")?;\n+        }\n+        Ok(())\n+    }\n+}\n+\n+impl<'a, 'b> PlanVisitor for IndentVisitor<'a, 'b> {\n+    type Error = fmt::Error;\n+\n+    fn pre_visit(&mut self, plan: &LogicalPlan) -> std::result::Result<bool, fmt::Error> {\n+        if self.indent > 0 {\n+            writeln!(self.f)?;\n+        }\n+        self.write_indent()?;\n+\n+        write!(self.f, \"{}\", plan.display())?;\n+        if self.with_schema {\n+            write!(self.f, \" {}\", display_schema(plan.schema()))?;\n+        }\n+\n+        self.indent += 1;\n+        Ok(true)\n+    }\n+\n+    fn post_visit(\n+        &mut self,\n+        _plan: &LogicalPlan,\n+    ) -> std::result::Result<bool, fmt::Error> {\n+        self.indent -= 1;\n+        Ok(true)\n+    }\n+}\n+\n+/// Print the schema in a compact representation to `buf`\n+///\n+/// For example: `foo:Utf8` if `foo` can not be null, and\n+/// `foo:Utf8;N` if `foo` is nullable.\n+///\n+/// ```\n+/// use arrow::datatypes::{Field, Schema, DataType};\n+/// # use datafusion::logical_plan::display_schema;\n+/// let schema = Schema::new(vec![\n+///     Field::new(\"id\", DataType::Int32, false),\n+///     Field::new(\"first_name\", DataType::Utf8, true),\n+///  ]);\n+///\n+///  assert_eq!(\n+///      \"[id:Int32, first_name:Utf8;N]\",\n+///      format!(\"{}\", display_schema(&schema))\n+///  );\n+/// ```\n+pub fn display_schema<'a>(schema: &'a Schema) -> impl fmt::Display + 'a {\n\nReview comment:\n       I wonder if this belongs in arrow rather than DataFusion? I could go either way\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-09T23:02:03.306+0000",
                    "updated": "2020-11-09T23:02:03.306+0000",
                    "started": "2020-11-09T23:02:03.305+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509405",
                    "issueId": "13339614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614/worklog/509410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8619:\nURL: https://github.com/apache/arrow/pull/8619#issuecomment-724333176\n\n\n   https://issues.apache.org/jira/browse/ARROW-10531\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-09T23:05:35.960+0000",
                    "updated": "2020-11-09T23:05:35.960+0000",
                    "started": "2020-11-09T23:05:35.960+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509410",
                    "issueId": "13339614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614/worklog/509763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8619:\nURL: https://github.com/apache/arrow/pull/8619#discussion_r520655856\n\n\n\n##########\nFile path: rust/datafusion/src/logical_plan/mod.rs\n##########\n@@ -956,117 +956,567 @@ impl LogicalPlan {\n     }\n }\n \n+/// Trait that implements the [Visitor\n+/// pattern](https://en.wikipedia.org/wiki/Visitor_pattern) for a\n+/// depth first walk of `LogicalPlan` nodes. `pre_visit` is called\n+/// before any children are visited, and then `post_visit` is called\n+/// after all children have been visited.\n+////\n+/// To use, define a struct that implements this trait and then invoke\n+/// \"LogicalPlan::accept\".\n+///\n+/// For example, for a logical plan like:\n+///\n+/// Projection: #id\n+///    Filter: #state Eq Utf8(\\\"CO\\\")\\\n+///       CsvScan: employee.csv projection=Some([0, 3])\";\n+///\n+/// The sequence of visit operations would be:\n+/// ```text\n+/// visitor.pre_visit(Projection)\n+/// visitor.pre_visit(Filter)\n+/// visitor.pre_visit(CsvScan)\n+/// visitor.post_visit(CsvScan)\n+/// visitor.post_visit(Filter)\n+/// visitor.post_visit(Projection)\n+/// ```\n+pub trait PlanVisitor {\n+    /// The type of error returned by this visitor\n+    type Error;\n+\n+    /// Invoked on a logical plan before any of its child inputs have been\n+    /// visited. If Ok(true) is returned, the recursion continues. If\n+    /// Err(..) or Ok(false) are returned, the recursion stops\n+    /// immedately and the error, if any, is returned to `accept`\n+    fn pre_visit(&mut self, plan: &LogicalPlan)\n+        -> std::result::Result<bool, Self::Error>;\n+\n+    /// Invoked on a logical plan after all of its child inputs have\n+    /// been visited. The return value is handled the same as the\n+    /// return value of `pre_visit`. The provided default implementation\n+    /// returns `Ok(true)`.\n+    fn post_visit(\n+        &mut self,\n+        _plan: &LogicalPlan,\n+    ) -> std::result::Result<bool, Self::Error> {\n+        Ok(true)\n+    }\n+}\n+\n impl LogicalPlan {\n-    fn fmt_with_indent(&self, f: &mut fmt::Formatter, indent: usize) -> fmt::Result {\n-        if indent > 0 {\n-            writeln!(f)?;\n-            for _ in 0..indent {\n-                write!(f, \"  \")?;\n-            }\n+    /// returns all inputs in the logical plan. Returns Ok(true) if\n+    /// all nodes were visited, and Ok(false) if any call to\n+    /// `pre_visit` or `post_visit` returned Ok(false) and may have\n+    /// cut short the recursion\n+    pub fn accept<V>(&self, visitor: &mut V) -> std::result::Result<bool, V::Error>\n+    where\n+        V: PlanVisitor,\n+    {\n+        if !visitor.pre_visit(self)? {\n+            return Ok(false);\n         }\n-        match *self {\n-            LogicalPlan::EmptyRelation { .. } => write!(f, \"EmptyRelation\"),\n-            LogicalPlan::TableScan {\n-                ref source,\n-                ref projection,\n-                ..\n-            } => match source {\n-                TableSource::FromContext(table_name) => {\n-                    write!(f, \"TableScan: {} projection={:?}\", table_name, projection)\n-                }\n-                TableSource::FromProvider(_) => {\n-                    write!(f, \"TableScan: projection={:?}\", projection)\n-                }\n-            },\n-            LogicalPlan::InMemoryScan { ref projection, .. } => {\n-                write!(f, \"InMemoryScan: projection={:?}\", projection)\n-            }\n-            LogicalPlan::CsvScan {\n-                ref path,\n-                ref projection,\n-                ..\n-            } => write!(f, \"CsvScan: {} projection={:?}\", path, projection),\n-            LogicalPlan::ParquetScan {\n-                ref path,\n-                ref projection,\n-                ..\n-            } => write!(f, \"ParquetScan: {} projection={:?}\", path, projection),\n-            LogicalPlan::Projection {\n-                ref expr,\n-                ref input,\n-                ..\n-            } => {\n-                write!(f, \"Projection: \")?;\n-                for i in 0..expr.len() {\n-                    if i > 0 {\n-                        write!(f, \", \")?;\n+\n+        let recurse = match self {\n+            LogicalPlan::Projection { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Filter { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Aggregate { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Sort { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Limit { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Extension { node } => {\n+                for input in node.inputs() {\n+                    if !input.accept(visitor)? {\n+                        return Ok(false);\n                     }\n-                    write!(f, \"{:?}\", expr[i])?;\n                 }\n-                input.fmt_with_indent(f, indent + 1)\n+                true\n             }\n-            LogicalPlan::Filter {\n-                predicate: ref expr,\n-                ref input,\n-                ..\n-            } => {\n-                write!(f, \"Filter: {:?}\", expr)?;\n-                input.fmt_with_indent(f, indent + 1)\n-            }\n-            LogicalPlan::Aggregate {\n-                ref input,\n-                ref group_expr,\n-                ref aggr_expr,\n-                ..\n-            } => {\n+            // plans without inputs\n+            LogicalPlan::TableScan { .. }\n+            | LogicalPlan::InMemoryScan { .. }\n+            | LogicalPlan::ParquetScan { .. }\n+            | LogicalPlan::CsvScan { .. }\n+            | LogicalPlan::EmptyRelation { .. }\n+            | LogicalPlan::CreateExternalTable { .. }\n+            | LogicalPlan::Explain { .. } => true,\n+        };\n+        if !recurse {\n+            return Ok(false);\n+        }\n+\n+        if !visitor.post_visit(self)? {\n+            return Ok(false);\n+        }\n+\n+        Ok(true)\n+    }\n+}\n+\n+/// Formats plans with a single line per node. For example:\n+///\n+/// Projection: #id\n+///    Filter: #state Eq Utf8(\\\"CO\\\")\\\n+///       CsvScan: employee.csv projection=Some([0, 3])\";\n+struct IndentVisitor<'a, 'b> {\n+    f: &'a mut fmt::Formatter<'b>,\n+    /// If true, includes summarized schema information\n+    with_schema: bool,\n+    indent: u32,\n+}\n+\n+impl<'a, 'b> IndentVisitor<'a, 'b> {\n+    fn write_indent(&mut self) -> fmt::Result {\n+        for _ in 0..self.indent {\n+            write!(self.f, \"  \")?;\n+        }\n+        Ok(())\n+    }\n+}\n+\n+impl<'a, 'b> PlanVisitor for IndentVisitor<'a, 'b> {\n+    type Error = fmt::Error;\n+\n+    fn pre_visit(&mut self, plan: &LogicalPlan) -> std::result::Result<bool, fmt::Error> {\n+        if self.indent > 0 {\n+            writeln!(self.f)?;\n+        }\n+        self.write_indent()?;\n+\n+        write!(self.f, \"{}\", plan.display())?;\n+        if self.with_schema {\n+            write!(self.f, \" {}\", display_schema(plan.schema()))?;\n+        }\n+\n+        self.indent += 1;\n+        Ok(true)\n+    }\n+\n+    fn post_visit(\n+        &mut self,\n+        _plan: &LogicalPlan,\n+    ) -> std::result::Result<bool, fmt::Error> {\n+        self.indent -= 1;\n+        Ok(true)\n+    }\n+}\n+\n+/// Print the schema in a compact representation to `buf`\n+///\n+/// For example: `foo:Utf8` if `foo` can not be null, and\n+/// `foo:Utf8;N` if `foo` is nullable.\n+///\n+/// ```\n+/// use arrow::datatypes::{Field, Schema, DataType};\n+/// # use datafusion::logical_plan::display_schema;\n+/// let schema = Schema::new(vec![\n+///     Field::new(\"id\", DataType::Int32, false),\n+///     Field::new(\"first_name\", DataType::Utf8, true),\n+///  ]);\n+///\n+///  assert_eq!(\n+///      \"[id:Int32, first_name:Utf8;N]\",\n+///      format!(\"{}\", display_schema(&schema))\n+///  );\n+/// ```\n+pub fn display_schema<'a>(schema: &'a Schema) -> impl fmt::Display + 'a {\n+    struct Wrapper<'a>(&'a Schema);\n+\n+    impl<'a> fmt::Display for Wrapper<'a> {\n+        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            write!(f, \"[\")?;\n+            for (idx, field) in self.0.fields().iter().enumerate() {\n+                if idx > 0 {\n+                    write!(f, \", \")?;\n+                }\n+                let nullable_str = if field.is_nullable() { \";N\" } else { \"\" };\n                 write!(\n                     f,\n-                    \"Aggregate: groupBy=[{:?}], aggr=[{:?}]\",\n-                    group_expr, aggr_expr\n+                    \"{}:{:?}{}\",\n+                    field.name(),\n+                    field.data_type(),\n+                    nullable_str\n                 )?;\n-                input.fmt_with_indent(f, indent + 1)\n-            }\n-            LogicalPlan::Sort {\n-                ref input,\n-                ref expr,\n-                ..\n-            } => {\n-                write!(f, \"Sort: \")?;\n-                for i in 0..expr.len() {\n-                    if i > 0 {\n-                        write!(f, \", \")?;\n-                    }\n-                    write!(f, \"{:?}\", expr[i])?;\n-                }\n-                input.fmt_with_indent(f, indent + 1)\n             }\n-            LogicalPlan::Limit {\n-                ref input, ref n, ..\n-            } => {\n-                write!(f, \"Limit: {}\", n)?;\n-                input.fmt_with_indent(f, indent + 1)\n+            write!(f, \"]\")\n+        }\n+    }\n+    Wrapper(schema)\n+}\n+\n+/// Logic related to creating DOT language graphs.\n+#[derive(Default)]\n+struct GraphvizBuilder {\n+    id_gen: usize,\n+}\n+\n+impl GraphvizBuilder {\n+    fn next_id(&mut self) -> usize {\n+        self.id_gen += 1;\n+        self.id_gen\n+    }\n+\n+    // write out the start of the subgraph cluster\n+    fn start_cluster(&mut self, f: &mut fmt::Formatter, title: &str) -> fmt::Result {\n+        writeln!(f, \"  subgraph cluster_{}\", self.next_id())?;\n+        writeln!(f, \"  {{\")?;\n+        writeln!(f, \"    graph[label={}]\", Self::quoted(title))\n+    }\n+\n+    // write out the end of the subgraph cluster\n+    fn end_cluster(&mut self, f: &mut fmt::Formatter) -> fmt::Result {\n+        writeln!(f, \"  }}\")\n+    }\n+\n+    /// makes a quoted string suitable for inclusion in a graphviz chart\n+    fn quoted(label: &str) -> String {\n+        let label = label.replace('\"', \"_\");\n+        format!(\"\\\"{}\\\"\", label)\n+    }\n+}\n+\n+/// Formats plans for graphical display using the `DOT` language. This\n+/// format can be visualized using software from\n+/// [`graphviz`](https://graphviz.org/)\n+struct GraphvizVisitor<'a, 'b> {\n+    f: &'a mut fmt::Formatter<'b>,\n+    graphviz_builder: GraphvizBuilder,\n+    /// If true, includes summarized schema information\n+    with_schema: bool,\n+\n+    /// Holds the ids (as generated from `graphviz_builder` of all\n+    /// parent nodes\n+    parent_ids: Vec<usize>,\n+}\n+\n+impl<'a, 'b> GraphvizVisitor<'a, 'b> {\n+    fn new(f: &'a mut fmt::Formatter<'b>) -> Self {\n+        Self {\n+            f,\n+            graphviz_builder: GraphvizBuilder::default(),\n+            with_schema: false,\n+            parent_ids: Vec::new(),\n+        }\n+    }\n+\n+    /// Sets a flag which controls if the output schema is displayed\n+    fn set_with_schema(&mut self, with_schema: bool) {\n+        self.with_schema = with_schema;\n+    }\n+\n+    fn pre_visit_plan(&mut self, label: &str) -> fmt::Result {\n+        self.graphviz_builder.start_cluster(self.f, label)\n+    }\n+\n+    fn post_visit_plan(&mut self) -> fmt::Result {\n+        self.graphviz_builder.end_cluster(self.f)\n+    }\n+}\n+\n+impl<'a, 'b> PlanVisitor for GraphvizVisitor<'a, 'b> {\n+    type Error = fmt::Error;\n+\n+    fn pre_visit(&mut self, plan: &LogicalPlan) -> std::result::Result<bool, fmt::Error> {\n+        let id = self.graphviz_builder.next_id();\n+\n+        // Create a new graph node for `plan` such as\n+        // id [label=\"foo\"]\n+        let label = if self.with_schema {\n+            format!(\n+                \"{}\\\\nSchema: {}\",\n+                plan.display(),\n+                display_schema(plan.schema())\n+            )\n+        } else {\n+            format!(\"{}\", plan.display())\n+        };\n+\n+        writeln!(\n+            self.f,\n+            \"    {}[label={}]\",\n\nReview comment:\n       I think the plans would look better and use less space if we added `shape=box` here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-10T15:34:18.898+0000",
                    "updated": "2020-11-10T15:34:18.898+0000",
                    "started": "2020-11-10T15:34:18.897+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509763",
                    "issueId": "13339614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614/worklog/509767",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8619:\nURL: https://github.com/apache/arrow/pull/8619#issuecomment-724781932\n\n\n   Thanks @alamb. I am also a fan of using GraphViz to render query plans so this gets a :+1: from me. I will try and find time to review fully later today.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-10T15:37:52.589+0000",
                    "updated": "2020-11-10T15:37:52.589+0000",
                    "started": "2020-11-10T15:37:52.588+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509767",
                    "issueId": "13339614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614/worklog/509996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8619:\nURL: https://github.com/apache/arrow/pull/8619#discussion_r520929989\n\n\n\n##########\nFile path: rust/datafusion/src/logical_plan/mod.rs\n##########\n@@ -956,117 +956,567 @@ impl LogicalPlan {\n     }\n }\n \n+/// Trait that implements the [Visitor\n+/// pattern](https://en.wikipedia.org/wiki/Visitor_pattern) for a\n+/// depth first walk of `LogicalPlan` nodes. `pre_visit` is called\n+/// before any children are visited, and then `post_visit` is called\n+/// after all children have been visited.\n+////\n+/// To use, define a struct that implements this trait and then invoke\n+/// \"LogicalPlan::accept\".\n+///\n+/// For example, for a logical plan like:\n+///\n+/// Projection: #id\n+///    Filter: #state Eq Utf8(\\\"CO\\\")\\\n+///       CsvScan: employee.csv projection=Some([0, 3])\";\n+///\n+/// The sequence of visit operations would be:\n+/// ```text\n+/// visitor.pre_visit(Projection)\n+/// visitor.pre_visit(Filter)\n+/// visitor.pre_visit(CsvScan)\n+/// visitor.post_visit(CsvScan)\n+/// visitor.post_visit(Filter)\n+/// visitor.post_visit(Projection)\n+/// ```\n+pub trait PlanVisitor {\n+    /// The type of error returned by this visitor\n+    type Error;\n+\n+    /// Invoked on a logical plan before any of its child inputs have been\n+    /// visited. If Ok(true) is returned, the recursion continues. If\n+    /// Err(..) or Ok(false) are returned, the recursion stops\n+    /// immedately and the error, if any, is returned to `accept`\n+    fn pre_visit(&mut self, plan: &LogicalPlan)\n+        -> std::result::Result<bool, Self::Error>;\n+\n+    /// Invoked on a logical plan after all of its child inputs have\n+    /// been visited. The return value is handled the same as the\n+    /// return value of `pre_visit`. The provided default implementation\n+    /// returns `Ok(true)`.\n+    fn post_visit(\n+        &mut self,\n+        _plan: &LogicalPlan,\n+    ) -> std::result::Result<bool, Self::Error> {\n+        Ok(true)\n+    }\n+}\n+\n impl LogicalPlan {\n-    fn fmt_with_indent(&self, f: &mut fmt::Formatter, indent: usize) -> fmt::Result {\n-        if indent > 0 {\n-            writeln!(f)?;\n-            for _ in 0..indent {\n-                write!(f, \"  \")?;\n-            }\n+    /// returns all inputs in the logical plan. Returns Ok(true) if\n+    /// all nodes were visited, and Ok(false) if any call to\n+    /// `pre_visit` or `post_visit` returned Ok(false) and may have\n+    /// cut short the recursion\n+    pub fn accept<V>(&self, visitor: &mut V) -> std::result::Result<bool, V::Error>\n+    where\n+        V: PlanVisitor,\n+    {\n+        if !visitor.pre_visit(self)? {\n+            return Ok(false);\n         }\n-        match *self {\n-            LogicalPlan::EmptyRelation { .. } => write!(f, \"EmptyRelation\"),\n-            LogicalPlan::TableScan {\n-                ref source,\n-                ref projection,\n-                ..\n-            } => match source {\n-                TableSource::FromContext(table_name) => {\n-                    write!(f, \"TableScan: {} projection={:?}\", table_name, projection)\n-                }\n-                TableSource::FromProvider(_) => {\n-                    write!(f, \"TableScan: projection={:?}\", projection)\n-                }\n-            },\n-            LogicalPlan::InMemoryScan { ref projection, .. } => {\n-                write!(f, \"InMemoryScan: projection={:?}\", projection)\n-            }\n-            LogicalPlan::CsvScan {\n-                ref path,\n-                ref projection,\n-                ..\n-            } => write!(f, \"CsvScan: {} projection={:?}\", path, projection),\n-            LogicalPlan::ParquetScan {\n-                ref path,\n-                ref projection,\n-                ..\n-            } => write!(f, \"ParquetScan: {} projection={:?}\", path, projection),\n-            LogicalPlan::Projection {\n-                ref expr,\n-                ref input,\n-                ..\n-            } => {\n-                write!(f, \"Projection: \")?;\n-                for i in 0..expr.len() {\n-                    if i > 0 {\n-                        write!(f, \", \")?;\n+\n+        let recurse = match self {\n+            LogicalPlan::Projection { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Filter { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Aggregate { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Sort { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Limit { input, .. } => input.accept(visitor)?,\n+            LogicalPlan::Extension { node } => {\n+                for input in node.inputs() {\n+                    if !input.accept(visitor)? {\n+                        return Ok(false);\n                     }\n-                    write!(f, \"{:?}\", expr[i])?;\n                 }\n-                input.fmt_with_indent(f, indent + 1)\n+                true\n             }\n-            LogicalPlan::Filter {\n-                predicate: ref expr,\n-                ref input,\n-                ..\n-            } => {\n-                write!(f, \"Filter: {:?}\", expr)?;\n-                input.fmt_with_indent(f, indent + 1)\n-            }\n-            LogicalPlan::Aggregate {\n-                ref input,\n-                ref group_expr,\n-                ref aggr_expr,\n-                ..\n-            } => {\n+            // plans without inputs\n+            LogicalPlan::TableScan { .. }\n+            | LogicalPlan::InMemoryScan { .. }\n+            | LogicalPlan::ParquetScan { .. }\n+            | LogicalPlan::CsvScan { .. }\n+            | LogicalPlan::EmptyRelation { .. }\n+            | LogicalPlan::CreateExternalTable { .. }\n+            | LogicalPlan::Explain { .. } => true,\n+        };\n+        if !recurse {\n+            return Ok(false);\n+        }\n+\n+        if !visitor.post_visit(self)? {\n+            return Ok(false);\n+        }\n+\n+        Ok(true)\n+    }\n+}\n+\n+/// Formats plans with a single line per node. For example:\n+///\n+/// Projection: #id\n+///    Filter: #state Eq Utf8(\\\"CO\\\")\\\n+///       CsvScan: employee.csv projection=Some([0, 3])\";\n+struct IndentVisitor<'a, 'b> {\n+    f: &'a mut fmt::Formatter<'b>,\n+    /// If true, includes summarized schema information\n+    with_schema: bool,\n+    indent: u32,\n+}\n+\n+impl<'a, 'b> IndentVisitor<'a, 'b> {\n+    fn write_indent(&mut self) -> fmt::Result {\n+        for _ in 0..self.indent {\n+            write!(self.f, \"  \")?;\n+        }\n+        Ok(())\n+    }\n+}\n+\n+impl<'a, 'b> PlanVisitor for IndentVisitor<'a, 'b> {\n+    type Error = fmt::Error;\n+\n+    fn pre_visit(&mut self, plan: &LogicalPlan) -> std::result::Result<bool, fmt::Error> {\n+        if self.indent > 0 {\n+            writeln!(self.f)?;\n+        }\n+        self.write_indent()?;\n+\n+        write!(self.f, \"{}\", plan.display())?;\n+        if self.with_schema {\n+            write!(self.f, \" {}\", display_schema(plan.schema()))?;\n+        }\n+\n+        self.indent += 1;\n+        Ok(true)\n+    }\n+\n+    fn post_visit(\n+        &mut self,\n+        _plan: &LogicalPlan,\n+    ) -> std::result::Result<bool, fmt::Error> {\n+        self.indent -= 1;\n+        Ok(true)\n+    }\n+}\n+\n+/// Print the schema in a compact representation to `buf`\n+///\n+/// For example: `foo:Utf8` if `foo` can not be null, and\n+/// `foo:Utf8;N` if `foo` is nullable.\n+///\n+/// ```\n+/// use arrow::datatypes::{Field, Schema, DataType};\n+/// # use datafusion::logical_plan::display_schema;\n+/// let schema = Schema::new(vec![\n+///     Field::new(\"id\", DataType::Int32, false),\n+///     Field::new(\"first_name\", DataType::Utf8, true),\n+///  ]);\n+///\n+///  assert_eq!(\n+///      \"[id:Int32, first_name:Utf8;N]\",\n+///      format!(\"{}\", display_schema(&schema))\n+///  );\n+/// ```\n+pub fn display_schema<'a>(schema: &'a Schema) -> impl fmt::Display + 'a {\n+    struct Wrapper<'a>(&'a Schema);\n+\n+    impl<'a> fmt::Display for Wrapper<'a> {\n+        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            write!(f, \"[\")?;\n+            for (idx, field) in self.0.fields().iter().enumerate() {\n+                if idx > 0 {\n+                    write!(f, \", \")?;\n+                }\n+                let nullable_str = if field.is_nullable() { \";N\" } else { \"\" };\n                 write!(\n                     f,\n-                    \"Aggregate: groupBy=[{:?}], aggr=[{:?}]\",\n-                    group_expr, aggr_expr\n+                    \"{}:{:?}{}\",\n+                    field.name(),\n+                    field.data_type(),\n+                    nullable_str\n                 )?;\n-                input.fmt_with_indent(f, indent + 1)\n-            }\n-            LogicalPlan::Sort {\n-                ref input,\n-                ref expr,\n-                ..\n-            } => {\n-                write!(f, \"Sort: \")?;\n-                for i in 0..expr.len() {\n-                    if i > 0 {\n-                        write!(f, \", \")?;\n-                    }\n-                    write!(f, \"{:?}\", expr[i])?;\n-                }\n-                input.fmt_with_indent(f, indent + 1)\n             }\n-            LogicalPlan::Limit {\n-                ref input, ref n, ..\n-            } => {\n-                write!(f, \"Limit: {}\", n)?;\n-                input.fmt_with_indent(f, indent + 1)\n+            write!(f, \"]\")\n+        }\n+    }\n+    Wrapper(schema)\n+}\n+\n+/// Logic related to creating DOT language graphs.\n+#[derive(Default)]\n+struct GraphvizBuilder {\n+    id_gen: usize,\n+}\n+\n+impl GraphvizBuilder {\n+    fn next_id(&mut self) -> usize {\n+        self.id_gen += 1;\n+        self.id_gen\n+    }\n+\n+    // write out the start of the subgraph cluster\n+    fn start_cluster(&mut self, f: &mut fmt::Formatter, title: &str) -> fmt::Result {\n+        writeln!(f, \"  subgraph cluster_{}\", self.next_id())?;\n+        writeln!(f, \"  {{\")?;\n+        writeln!(f, \"    graph[label={}]\", Self::quoted(title))\n+    }\n+\n+    // write out the end of the subgraph cluster\n+    fn end_cluster(&mut self, f: &mut fmt::Formatter) -> fmt::Result {\n+        writeln!(f, \"  }}\")\n+    }\n+\n+    /// makes a quoted string suitable for inclusion in a graphviz chart\n+    fn quoted(label: &str) -> String {\n+        let label = label.replace('\"', \"_\");\n+        format!(\"\\\"{}\\\"\", label)\n+    }\n+}\n+\n+/// Formats plans for graphical display using the `DOT` language. This\n+/// format can be visualized using software from\n+/// [`graphviz`](https://graphviz.org/)\n+struct GraphvizVisitor<'a, 'b> {\n+    f: &'a mut fmt::Formatter<'b>,\n+    graphviz_builder: GraphvizBuilder,\n+    /// If true, includes summarized schema information\n+    with_schema: bool,\n+\n+    /// Holds the ids (as generated from `graphviz_builder` of all\n+    /// parent nodes\n+    parent_ids: Vec<usize>,\n+}\n+\n+impl<'a, 'b> GraphvizVisitor<'a, 'b> {\n+    fn new(f: &'a mut fmt::Formatter<'b>) -> Self {\n+        Self {\n+            f,\n+            graphviz_builder: GraphvizBuilder::default(),\n+            with_schema: false,\n+            parent_ids: Vec::new(),\n+        }\n+    }\n+\n+    /// Sets a flag which controls if the output schema is displayed\n+    fn set_with_schema(&mut self, with_schema: bool) {\n+        self.with_schema = with_schema;\n+    }\n+\n+    fn pre_visit_plan(&mut self, label: &str) -> fmt::Result {\n+        self.graphviz_builder.start_cluster(self.f, label)\n+    }\n+\n+    fn post_visit_plan(&mut self) -> fmt::Result {\n+        self.graphviz_builder.end_cluster(self.f)\n+    }\n+}\n+\n+impl<'a, 'b> PlanVisitor for GraphvizVisitor<'a, 'b> {\n+    type Error = fmt::Error;\n+\n+    fn pre_visit(&mut self, plan: &LogicalPlan) -> std::result::Result<bool, fmt::Error> {\n+        let id = self.graphviz_builder.next_id();\n+\n+        // Create a new graph node for `plan` such as\n+        // id [label=\"foo\"]\n+        let label = if self.with_schema {\n+            format!(\n+                \"{}\\\\nSchema: {}\",\n+                plan.display(),\n+                display_schema(plan.schema())\n+            )\n+        } else {\n+            format!(\"{}\", plan.display())\n+        };\n+\n+        writeln!(\n+            self.f,\n+            \"    {}[label={}]\",\n\nReview comment:\n       Agreed -- updated. The plans now look like this:\r\n   \r\n   ![Screen Shot 2020-11-10 at 6 01 10 PM](https://user-images.githubusercontent.com/490673/98744052-0ebcb900-237f-11eb-98bf-f238c1cc7dcd.png)\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-10T23:03:55.289+0000",
                    "updated": "2020-11-10T23:03:55.289+0000",
                    "started": "2020-11-10T23:03:55.289+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509996",
                    "issueId": "13339614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614/worklog/510000",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8619:\nURL: https://github.com/apache/arrow/pull/8619#issuecomment-725023738\n\n\n   @jorgecarleitao  \r\n   \r\n   > What do you think of adding instructions on how to create the graphs in the README, or as an example?\r\n   \r\n   Great idea. I have added some instructions in https://github.com/apache/arrow/pull/8619/commits/b1965fae167ac46ff399752c55a8728b78de2bca\r\n   \r\n   > A minor concern is the file size: I would be supportive of moving the visitor to a different file, to avoid exploding this one even further. A later PR is also fine, though :P\r\n   \r\n   I will do so as a follow on PR after this is merged\r\n   \r\n   @andygrove  --  I will wait for your review / feedback before doing anything more with this PR.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-10T23:13:24.991+0000",
                    "updated": "2020-11-10T23:13:24.991+0000",
                    "started": "2020-11-10T23:13:24.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510000",
                    "issueId": "13339614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614/worklog/510252",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8619:\nURL: https://github.com/apache/arrow/pull/8619#issuecomment-725433229\n\n\n   Thanks @andygrove  and @jorgecarleitao  -- I plan to merge this PR and then make a new one to break the code into smaller modules\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-11T13:48:51.973+0000",
                    "updated": "2020-11-11T13:48:51.973+0000",
                    "started": "2020-11-11T13:48:51.972+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510252",
                    "issueId": "13339614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614/worklog/510253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8619:\nURL: https://github.com/apache/arrow/pull/8619#issuecomment-725433951\n\n\n   Rebased and will merge when it passes CI\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-11T13:50:20.365+0000",
                    "updated": "2020-11-11T13:50:20.365+0000",
                    "started": "2020-11-11T13:50:20.364+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510253",
                    "issueId": "13339614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614/worklog/510273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb closed pull request #8619:\nURL: https://github.com/apache/arrow/pull/8619\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-11T14:49:59.817+0000",
                    "updated": "2020-11-11T14:49:59.817+0000",
                    "started": "2020-11-11T14:49:59.817+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510273",
                    "issueId": "13339614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614/worklog/510310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8619:\nURL: https://github.com/apache/arrow/pull/8619#issuecomment-725513681\n\n\n   https://github.com/apache/arrow/pull/8639 is the PR for breaking up the logical_plan module\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-11T16:13:42.192+0000",
                    "updated": "2020-11-11T16:13:42.192+0000",
                    "started": "2020-11-11T16:13:42.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510310",
                    "issueId": "13339614"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@25a5cfff[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4fde96f4[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@319b761c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@ac92fed[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@62a604b3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@c66c20e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66a76e08[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@25529376[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@770388f3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4dcf52af[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1045a230[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@213d4a6d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Nov 11 14:49:55 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-11T14:49:55.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10531/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-11-09T22:50:32.000+0000",
        "updated": "2020-11-11T16:13:43.000+0000",
        "timeoriginalestimate": null,
        "description": "  I have been tracking down issues in our use of DataFusion for my work project, and I have found myself wanting to print out the state of the logical_plan several times. The existing debug formatting is ok, but it is missing a few key items:\r\n\r\n# schema information (as in when did columns appear / disappear in the plan)\r\n# A visual representation (graphviz)\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Better display for logical plans: Graphviz and Schema information",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339614/comment/17230000",
                    "id": "17230000",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 8619\n[https://github.com/apache/arrow/pull/8619]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-11-11T14:49:55.257+0000",
                    "updated": "2020-11-11T14:49:55.257+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0kf14:",
        "customfield_12314139": null
    }
}