{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13392418",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418",
    "key": "ARROW-13482",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12620427",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12620427",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13376404",
                    "key": "ARROW-12633",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13376404",
                    "fields": {
                        "summary": "[C++] Query engine umbrella issue",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13482/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/worklog/630784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10793:\nURL: https://github.com/apache/arrow/pull/10793#issuecomment-888619430\n\n\n   https://issues.apache.org/jira/browse/ARROW-13482\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T21:03:31.641+0000",
                    "updated": "2021-07-28T21:03:31.641+0000",
                    "started": "2021-07-28T21:03:31.641+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630784",
                    "issueId": "13392418"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/worklog/631687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #10793:\nURL: https://github.com/apache/arrow/pull/10793#issuecomment-889947752\n\n\n   Will do, thanks!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T14:55:13.973+0000",
                    "updated": "2021-07-30T14:55:13.973+0000",
                    "started": "2021-07-30T14:55:13.973+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631687",
                    "issueId": "13392418"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/worklog/633750",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on pull request #10793:\nURL: https://github.com/apache/arrow/pull/10793#issuecomment-892887318\n\n\n   Is there any plan for documenting these ExecNode factories in a standard way? Does this registry give us opportunities to achieve ARROW-13227 in a modular way?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-04T18:44:27.405+0000",
                    "updated": "2021-08-04T18:44:27.405+0000",
                    "started": "2021-08-04T18:44:27.405+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "633750",
                    "issueId": "13392418"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/worklog/633754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook edited a comment on pull request #10793:\nURL: https://github.com/apache/arrow/pull/10793#issuecomment-892887318\n\n\n   Is there any plan for documenting these ExecNode factories in a standard way? Does this registry give us opportunities to achieve ARROW-13227 in a modular way? Apologies if this is a silly question; I don't fully understand all the mechanics here.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-04T18:45:29.184+0000",
                    "updated": "2021-08-04T18:45:29.184+0000",
                    "started": "2021-08-04T18:45:29.184+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "633754",
                    "issueId": "13392418"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/worklog/633775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #10793:\nURL: https://github.com/apache/arrow/pull/10793#issuecomment-892912115\n\n\n   @ianmcook I'll add a note to ARROW-13227 describing the impact of this PR. In short, ARROW-13227 should now document these factories instead of specific subclasses of ExecNode (and will look a lot like `compute.rst`).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-04T19:22:49.928+0000",
                    "updated": "2021-08-04T19:22:49.928+0000",
                    "started": "2021-08-04T19:22:49.928+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "633775",
                    "issueId": "13392418"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/worklog/634340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook edited a comment on pull request #10793:\nURL: https://github.com/apache/arrow/pull/10793#issuecomment-892887318\n\n\n   Is there any plan for documenting these ExecNode factories in a standard way? Does this registry give us opportunities to achieve ARROW-13227 in a modular way? Apologies if this is a silly question; I don't fully understand all the mechanics here.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-05T11:40:18.625+0000",
                    "updated": "2021-08-05T11:40:18.625+0000",
                    "started": "2021-08-05T11:40:18.625+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "634340",
                    "issueId": "13392418"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/worklog/634380",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on pull request #10793:\nURL: https://github.com/apache/arrow/pull/10793#issuecomment-892887318\n\n\n   Is there any plan for documenting these ExecNode factories in a standard way? Does this registry give us opportunities to achieve ARROW-13227 in a modular way?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-05T11:44:12.524+0000",
                    "updated": "2021-08-05T11:44:12.524+0000",
                    "started": "2021-08-05T11:44:12.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "634380",
                    "issueId": "13392418"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/worklog/634417",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #10793:\nURL: https://github.com/apache/arrow/pull/10793#issuecomment-892912115\n\n\n   @ianmcook I'll add a note to ARROW-13227 describing the impact of this PR. In short, ARROW-13227 should now document these factories instead of specific subclasses of ExecNode (and will look a lot like `compute.rst`).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-05T11:48:15.556+0000",
                    "updated": "2021-08-05T11:48:15.556+0000",
                    "started": "2021-08-05T11:48:15.556+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "634417",
                    "issueId": "13392418"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/worklog/635950",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10793:\nURL: https://github.com/apache/arrow/pull/10793#discussion_r685358176\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/aggregate_node.cc\n##########\n@@ -0,0 +1,626 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/exec_plan.h\"\n+\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/compute/exec_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/datum.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/thread_pool.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace compute {\n+\n+namespace internal {\n+\n+Result<std::vector<const HashAggregateKernel*>> GetKernels(\n+    ExecContext* ctx, const std::vector<internal::Aggregate>& aggregates,\n+    const std::vector<ValueDescr>& in_descrs);\n+\n+Result<std::vector<std::unique_ptr<KernelState>>> InitKernels(\n+    const std::vector<const HashAggregateKernel*>& kernels, ExecContext* ctx,\n+    const std::vector<internal::Aggregate>& aggregates,\n+    const std::vector<ValueDescr>& in_descrs);\n+\n+Result<FieldVector> ResolveKernels(\n+    const std::vector<internal::Aggregate>& aggregates,\n+    const std::vector<const HashAggregateKernel*>& kernels,\n+    const std::vector<std::unique_ptr<KernelState>>& states, ExecContext* ctx,\n+    const std::vector<ValueDescr>& descrs);\n+\n+}  // namespace internal\n\nReview comment:\n       Is it worth moving these to an actual _internal header?\n\n##########\nFile path: cpp/src/arrow/compute/exec/aggregate_node.cc\n##########\n@@ -0,0 +1,626 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/exec_plan.h\"\n+\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/compute/exec_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/datum.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/thread_pool.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace compute {\n+\n+namespace internal {\n+\n+Result<std::vector<const HashAggregateKernel*>> GetKernels(\n+    ExecContext* ctx, const std::vector<internal::Aggregate>& aggregates,\n+    const std::vector<ValueDescr>& in_descrs);\n+\n+Result<std::vector<std::unique_ptr<KernelState>>> InitKernels(\n+    const std::vector<const HashAggregateKernel*>& kernels, ExecContext* ctx,\n+    const std::vector<internal::Aggregate>& aggregates,\n+    const std::vector<ValueDescr>& in_descrs);\n+\n+Result<FieldVector> ResolveKernels(\n+    const std::vector<internal::Aggregate>& aggregates,\n+    const std::vector<const HashAggregateKernel*>& kernels,\n+    const std::vector<std::unique_ptr<KernelState>>& states, ExecContext* ctx,\n+    const std::vector<ValueDescr>& descrs);\n+\n+}  // namespace internal\n+\n+namespace {\n+\n+class ThreadIndexer {\n+ public:\n+  size_t operator()() {\n+    auto id = std::this_thread::get_id();\n+\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    const auto& id_index = *id_to_index_.emplace(id, id_to_index_.size()).first;\n+\n+    return Check(id_index.second);\n+  }\n+\n+  static size_t Capacity() {\n+    static size_t max_size = arrow::internal::ThreadPool::DefaultCapacity();\n+    return max_size;\n+  }\n+\n+ private:\n+  size_t Check(size_t thread_index) {\n+    DCHECK_LT(thread_index, Capacity()) << \"thread index \" << thread_index\n+                                        << \" is out of range [0, \" << Capacity() << \")\";\n+\n+    return thread_index;\n+  }\n+\n+  std::mutex mutex_;\n+  std::unordered_map<std::thread::id, size_t> id_to_index_;\n+};\n+\n+struct ScalarAggregateNode : ExecNode {\n+  ScalarAggregateNode(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                      std::shared_ptr<Schema> output_schema,\n+                      std::vector<int> target_field_ids,\n+                      std::vector<const ScalarAggregateKernel*> kernels,\n+                      std::vector<std::vector<std::unique_ptr<KernelState>>> states)\n+      : ExecNode(plan, std::move(inputs), {\"target\"},\n+                 /*output_schema=*/std::move(output_schema),\n+                 /*num_outputs=*/1),\n+        target_field_ids_(std::move(target_field_ids)),\n+        kernels_(std::move(kernels)),\n+        states_(std::move(states)) {}\n+\n+  static Result<ExecNode*> Make(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                                const ExecNodeOptions& options) {\n+    RETURN_NOT_OK(ValidateExecNodeInputs(plan, inputs, 1, \"ScalarAggregateNode\"));\n+\n+    const auto& aggregate_options = checked_cast<const AggregateNodeOptions&>(options);\n+    auto aggregates = aggregate_options.aggregates;\n+\n+    const auto& input_schema = *inputs[0]->output_schema();\n+    auto exec_ctx = plan->exec_context();\n+\n+    std::vector<const ScalarAggregateKernel*> kernels(aggregates.size());\n+    std::vector<std::vector<std::unique_ptr<KernelState>>> states(kernels.size());\n+    FieldVector fields(kernels.size());\n+    const auto& field_names = aggregate_options.names;\n+    std::vector<int> target_field_ids(kernels.size());\n+\n+    for (size_t i = 0; i < kernels.size(); ++i) {\n+      ARROW_ASSIGN_OR_RAISE(auto match,\n+                            FieldRef(aggregate_options.targets[i]).FindOne(input_schema));\n+      target_field_ids[i] = match[0];\n+\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto function, exec_ctx->func_registry()->GetFunction(aggregates[i].function));\n+\n+      if (function->kind() != Function::SCALAR_AGGREGATE) {\n+        return Status::Invalid(\"Provided non ScalarAggregateFunction \",\n+                               aggregates[i].function);\n+      }\n+\n+      auto in_type = ValueDescr::Array(input_schema.field(target_field_ids[i])->type());\n+\n+      ARROW_ASSIGN_OR_RAISE(const Kernel* kernel, function->DispatchExact({in_type}));\n+      kernels[i] = static_cast<const ScalarAggregateKernel*>(kernel);\n+\n+      if (aggregates[i].options == nullptr) {\n+        aggregates[i].options = function->default_options();\n+      }\n+\n+      KernelContext kernel_ctx{exec_ctx};\n+      states[i].resize(ThreadIndexer::Capacity());\n+      RETURN_NOT_OK(Kernel::InitAll(&kernel_ctx,\n+                                    KernelInitArgs{kernels[i],\n+                                                   {\n+                                                       in_type,\n+                                                   },\n+                                                   aggregates[i].options},\n+                                    &states[i]));\n+\n+      // pick one to resolve the kernel signature\n+      kernel_ctx.SetState(states[i][0].get());\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto descr, kernels[i]->signature->out_type().Resolve(&kernel_ctx, {in_type}));\n+\n+      fields[i] = field(field_names[i], std::move(descr.type));\n+    }\n+\n+    return plan->EmplaceNode<ScalarAggregateNode>(\n+        plan, std::move(inputs), schema(std::move(fields)), std::move(target_field_ids),\n+        std::move(kernels), std::move(states));\n+  }\n+\n+  const char* kind_name() override { return \"ScalarAggregateNode\"; }\n+\n+  Status DoConsume(const ExecBatch& batch, size_t thread_index) {\n+    for (size_t i = 0; i < kernels_.size(); ++i) {\n+      KernelContext batch_ctx{plan()->exec_context()};\n+      batch_ctx.SetState(states_[i][thread_index].get());\n+\n+      ExecBatch single_column_batch{{batch.values[target_field_ids_[i]]}, batch.length};\n+      RETURN_NOT_OK(kernels_[i]->consume(&batch_ctx, single_column_batch));\n+    }\n+    return Status::OK();\n+  }\n+\n+  void InputReceived(ExecNode* input, int seq, ExecBatch batch) override {\n+    DCHECK_EQ(input, inputs_[0]);\n+\n+    auto thread_index = get_thread_index_();\n+\n+    if (ErrorIfNotOk(DoConsume(std::move(batch), thread_index))) return;\n+\n+    if (input_counter_.Increment()) {\n+      ErrorIfNotOk(Finish());\n+    }\n+  }\n+\n+  void ErrorReceived(ExecNode* input, Status error) override {\n+    DCHECK_EQ(input, inputs_[0]);\n+    outputs_[0]->ErrorReceived(this, std::move(error));\n+  }\n+\n+  void InputFinished(ExecNode* input, int num_total) override {\n+    DCHECK_EQ(input, inputs_[0]);\n+\n+    if (input_counter_.SetTotal(num_total)) {\n+      ErrorIfNotOk(Finish());\n+    }\n+  }\n+\n+  Status StartProducing() override {\n+    finished_ = Future<>::Make();\n+    // Scalar aggregates will only output a single batch\n+    outputs_[0]->InputFinished(this, 1);\n+    return Status::OK();\n+  }\n+\n+  void PauseProducing(ExecNode* output) override {}\n+\n+  void ResumeProducing(ExecNode* output) override {}\n+\n+  void StopProducing(ExecNode* output) override {\n+    DCHECK_EQ(output, outputs_[0]);\n+    StopProducing();\n+  }\n+\n+  void StopProducing() override {\n+    if (input_counter_.Cancel()) {\n+      finished_.MarkFinished();\n+    }\n+    inputs_[0]->StopProducing(this);\n+  }\n+\n+  Future<> finished() override { return finished_; }\n+\n+ private:\n+  Status Finish() {\n+    ExecBatch batch{{}, 1};\n+    batch.values.resize(kernels_.size());\n+\n+    for (size_t i = 0; i < kernels_.size(); ++i) {\n+      KernelContext ctx{plan()->exec_context()};\n+      ARROW_ASSIGN_OR_RAISE(auto merged, ScalarAggregateKernel::MergeAll(\n+                                             kernels_[i], &ctx, std::move(states_[i])));\n+      RETURN_NOT_OK(kernels_[i]->finalize(&ctx, &batch.values[i]));\n+    }\n+\n+    outputs_[0]->InputReceived(this, 0, std::move(batch));\n+    finished_.MarkFinished();\n+    return Status::OK();\n+  }\n+\n+  Future<> finished_ = Future<>::MakeFinished();\n+  const std::vector<int> target_field_ids_;\n+  const std::vector<const ScalarAggregateKernel*> kernels_;\n+\n+  std::vector<std::vector<std::unique_ptr<KernelState>>> states_;\n+\n+  ThreadIndexer get_thread_index_;\n+  AtomicCounter input_counter_;\n+};\n+\n+struct GroupByNode : ExecNode {\n+  GroupByNode(ExecNode* input, std::shared_ptr<Schema> output_schema, ExecContext* ctx,\n+              const std::vector<int>&& key_field_ids,\n+              const std::vector<int>&& agg_src_field_ids,\n+              const std::vector<internal::Aggregate>&& aggs,\n+              const std::vector<const HashAggregateKernel*>&& agg_kernels)\n+      : ExecNode(input->plan(), {input}, {\"groupby\"}, std::move(output_schema),\n+                 /*num_outputs=*/1),\n+        ctx_(ctx),\n+        key_field_ids_(std::move(key_field_ids)),\n+        agg_src_field_ids_(std::move(agg_src_field_ids)),\n+        aggs_(std::move(aggs)),\n+        agg_kernels_(std::move(agg_kernels)) {}\n+\n+  static Result<ExecNode*> Make(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                                const ExecNodeOptions& options) {\n+    RETURN_NOT_OK(ValidateExecNodeInputs(plan, inputs, 1, \"GroupByNode\"));\n+\n+    auto input = inputs[0];\n+    const auto& aggregate_options = checked_cast<const AggregateNodeOptions&>(options);\n+    const auto& keys = aggregate_options.keys;\n+    const auto& aggs = aggregate_options.aggregates;\n+    const auto& field_names = aggregate_options.names;\n+\n+    // Get input schema\n+    auto input_schema = input->output_schema();\n+\n+    // Find input field indices for key fields\n+    std::vector<int> key_field_ids(keys.size());\n+    for (size_t i = 0; i < keys.size(); ++i) {\n+      ARROW_ASSIGN_OR_RAISE(auto match, keys[i].FindOne(*input_schema));\n+      key_field_ids[i] = match[0];\n+    }\n+\n+    // Find input field indices for aggregates\n+    std::vector<int> agg_src_field_ids(aggs.size());\n+    for (size_t i = 0; i < aggs.size(); ++i) {\n+      ARROW_ASSIGN_OR_RAISE(auto match,\n+                            aggregate_options.targets[i].FindOne(*input_schema));\n+      agg_src_field_ids[i] = match[0];\n+    }\n+\n+    // Build vector of aggregate source field data types\n+    DCHECK_EQ(aggregate_options.targets.size(), aggs.size());\n+    std::vector<ValueDescr> agg_src_descrs(aggs.size());\n+    for (size_t i = 0; i < aggs.size(); ++i) {\n+      auto agg_src_field_id = agg_src_field_ids[i];\n+      agg_src_descrs[i] =\n+          ValueDescr(input_schema->field(agg_src_field_id)->type(), ValueDescr::ARRAY);\n+    }\n+\n+    auto ctx = input->plan()->exec_context();\n+\n+    // Construct aggregates\n+    ARROW_ASSIGN_OR_RAISE(auto agg_kernels,\n+                          internal::GetKernels(ctx, aggs, agg_src_descrs));\n+\n+    ARROW_ASSIGN_OR_RAISE(auto agg_states,\n+                          internal::InitKernels(agg_kernels, ctx, aggs, agg_src_descrs));\n+\n+    ARROW_ASSIGN_OR_RAISE(\n+        FieldVector agg_result_fields,\n+        internal::ResolveKernels(aggs, agg_kernels, agg_states, ctx, agg_src_descrs));\n+\n+    // Build field vector for output schema\n+    FieldVector output_fields{keys.size() + aggs.size()};\n+\n+    // Aggregate fields come before key fields to match the behavior of GroupBy function\n+    for (size_t i = 0; i < aggs.size(); ++i) {\n+      output_fields[i] = agg_result_fields[i]->WithName(field_names[i]);\n+    }\n+    size_t base = aggs.size();\n+    for (size_t i = 0; i < keys.size(); ++i) {\n+      int key_field_id = key_field_ids[i];\n+      output_fields[base + i] = input_schema->field(key_field_id);\n+    }\n+\n+    auto aggs_copy = aggs;\n+\n+    return input->plan()->EmplaceNode<GroupByNode>(\n+        input, schema(std::move(output_fields)), ctx, std::move(key_field_ids),\n+        std::move(agg_src_field_ids), std::move(aggs), std::move(agg_kernels));\n+  }\n+\n+  const char* kind_name() override { return \"GroupByNode\"; }\n+\n+  Status Consume(ExecBatch batch) {\n+    size_t thread_index = get_thread_index_();\n+    if (thread_index >= local_states_.size()) {\n+      return Status::IndexError(\"thread index \", thread_index, \" is out of range [0, \",\n+                                local_states_.size(), \")\");\n+    }\n+\n+    auto state = &local_states_[thread_index];\n+    RETURN_NOT_OK(InitLocalStateIfNeeded(state));\n+\n+    // Create a batch with key columns\n+    std::vector<Datum> keys(key_field_ids_.size());\n+    for (size_t i = 0; i < key_field_ids_.size(); ++i) {\n+      keys[i] = batch.values[key_field_ids_[i]];\n+    }\n+    ARROW_ASSIGN_OR_RAISE(ExecBatch key_batch, ExecBatch::Make(keys));\n+\n+    // Create a batch with group ids\n+    ARROW_ASSIGN_OR_RAISE(Datum id_batch, state->grouper->Consume(key_batch));\n+\n+    // Execute aggregate kernels\n+    for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+      KernelContext kernel_ctx{ctx_};\n+      kernel_ctx.SetState(state->agg_states[i].get());\n+\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto agg_batch,\n+          ExecBatch::Make({batch.values[agg_src_field_ids_[i]], id_batch}));\n+\n+      RETURN_NOT_OK(agg_kernels_[i]->resize(&kernel_ctx, state->grouper->num_groups()));\n+      RETURN_NOT_OK(agg_kernels_[i]->consume(&kernel_ctx, agg_batch));\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge() {\n+    ThreadLocalState* state0 = &local_states_[0];\n+    for (size_t i = 1; i < local_states_.size(); ++i) {\n+      ThreadLocalState* state = &local_states_[i];\n+      if (!state->grouper) {\n+        continue;\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(ExecBatch other_keys, state->grouper->GetUniques());\n+      ARROW_ASSIGN_OR_RAISE(Datum transposition, state0->grouper->Consume(other_keys));\n+      state->grouper.reset();\n+\n+      for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+        KernelContext batch_ctx{ctx_};\n+        DCHECK(state0->agg_states[i]);\n+        batch_ctx.SetState(state0->agg_states[i].get());\n+\n+        RETURN_NOT_OK(agg_kernels_[i]->resize(&batch_ctx, state0->grouper->num_groups()));\n+        RETURN_NOT_OK(agg_kernels_[i]->merge(&batch_ctx, std::move(*state->agg_states[i]),\n+                                             *transposition.array()));\n+        state->agg_states[i].reset();\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Result<ExecBatch> Finalize() {\n+    ThreadLocalState* state = &local_states_[0];\n+\n+    ExecBatch out_data{{}, state->grouper->num_groups()};\n+    out_data.values.resize(agg_kernels_.size() + key_field_ids_.size());\n+\n+    // Aggregate fields come before key fields to match the behavior of GroupBy function\n+    for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+      KernelContext batch_ctx{ctx_};\n+      batch_ctx.SetState(state->agg_states[i].get());\n+      RETURN_NOT_OK(agg_kernels_[i]->finalize(&batch_ctx, &out_data.values[i]));\n+      state->agg_states[i].reset();\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(ExecBatch out_keys, state->grouper->GetUniques());\n+    std::move(out_keys.values.begin(), out_keys.values.end(),\n+              out_data.values.begin() + agg_kernels_.size());\n+    state->grouper.reset();\n+\n+    if (output_counter_.SetTotal(\n+            static_cast<int>(BitUtil::CeilDiv(out_data.length, output_batch_size())))) {\n+      // this will be hit if out_data.length == 0\n+      finished_.MarkFinished();\n+    }\n+    return out_data;\n+  }\n+\n+  void OutputNthBatch(int n) {\n+    // bail if StopProducing was called\n+    if (finished_.is_finished()) return;\n+\n+    int64_t batch_size = output_batch_size();\n+    outputs_[0]->InputReceived(this, n, out_data_.Slice(batch_size * n, batch_size));\n+\n+    if (output_counter_.Increment()) {\n+      finished_.MarkFinished();\n+    }\n+  }\n+\n+  Status OutputResult() {\n+    RETURN_NOT_OK(Merge());\n+    ARROW_ASSIGN_OR_RAISE(out_data_, Finalize());\n+\n+    int num_output_batches = *output_counter_.total();\n+    outputs_[0]->InputFinished(this, num_output_batches);\n+\n+    auto executor = ctx_->executor();\n+    for (int i = 0; i < num_output_batches; ++i) {\n+      if (executor) {\n+        // bail if StopProducing was called\n+        if (finished_.is_finished()) break;\n+\n+        RETURN_NOT_OK(executor->Spawn([this, i] { OutputNthBatch(i); }));\n+      } else {\n+        OutputNthBatch(i);\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  void InputReceived(ExecNode* input, int seq, ExecBatch batch) override {\n+    // bail if StopProducing was called\n+    if (finished_.is_finished()) return;\n+\n+    DCHECK_EQ(input, inputs_[0]);\n+\n+    if (ErrorIfNotOk(Consume(std::move(batch)))) return;\n+\n+    if (input_counter_.Increment()) {\n+      ErrorIfNotOk(OutputResult());\n+    }\n+  }\n+\n+  void ErrorReceived(ExecNode* input, Status error) override {\n+    DCHECK_EQ(input, inputs_[0]);\n+\n+    outputs_[0]->ErrorReceived(this, std::move(error));\n+  }\n+\n+  void InputFinished(ExecNode* input, int num_total) override {\n+    // bail if StopProducing was called\n+    if (finished_.is_finished()) return;\n+\n+    DCHECK_EQ(input, inputs_[0]);\n+\n+    if (input_counter_.SetTotal(num_total)) {\n+      ErrorIfNotOk(OutputResult());\n+    }\n+  }\n+\n+  Status StartProducing() override {\n+    finished_ = Future<>::Make();\n+\n+    local_states_.resize(ThreadIndexer::Capacity());\n+    return Status::OK();\n+  }\n+\n+  void PauseProducing(ExecNode* output) override {}\n+\n+  void ResumeProducing(ExecNode* output) override {}\n+\n+  void StopProducing(ExecNode* output) override {\n+    DCHECK_EQ(output, outputs_[0]);\n+\n+    if (input_counter_.Cancel()) {\n+      finished_.MarkFinished();\n+    } else if (output_counter_.Cancel()) {\n+      finished_.MarkFinished();\n+    }\n+    inputs_[0]->StopProducing(this);\n+  }\n+\n+  void StopProducing() override { StopProducing(outputs_[0]); }\n+\n+  Future<> finished() override { return finished_; }\n+\n+ private:\n+  struct ThreadLocalState {\n+    std::unique_ptr<internal::Grouper> grouper;\n+    std::vector<std::unique_ptr<KernelState>> agg_states;\n+  };\n+\n+  ThreadLocalState* GetLocalState() {\n+    size_t thread_index = get_thread_index_();\n+    return &local_states_[thread_index];\n+  }\n+\n+  Status InitLocalStateIfNeeded(ThreadLocalState* state) {\n+    // Get input schema\n+    auto input_schema = inputs_[0]->output_schema();\n+\n+    if (state->grouper != nullptr) return Status::OK();\n+\n+    // Build vector of key field data types\n+    std::vector<ValueDescr> key_descrs(key_field_ids_.size());\n+    for (size_t i = 0; i < key_field_ids_.size(); ++i) {\n+      auto key_field_id = key_field_ids_[i];\n+      key_descrs[i] = ValueDescr(input_schema->field(key_field_id)->type());\n+    }\n+\n+    // Construct grouper\n+    ARROW_ASSIGN_OR_RAISE(state->grouper, internal::Grouper::Make(key_descrs, ctx_));\n+\n+    // Build vector of aggregate source field data types\n+    std::vector<ValueDescr> agg_src_descrs(agg_kernels_.size());\n+    for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+      auto agg_src_field_id = agg_src_field_ids_[i];\n+      agg_src_descrs[i] =\n+          ValueDescr(input_schema->field(agg_src_field_id)->type(), ValueDescr::ARRAY);\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(\n+        state->agg_states,\n+        internal::InitKernels(agg_kernels_, ctx_, aggs_, agg_src_descrs));\n+\n+    return Status::OK();\n+  }\n+\n+  int output_batch_size() const {\n+    int result = static_cast<int>(ctx_->exec_chunksize());\n+    if (result < 0) {\n+      result = 32 * 1024;\n+    }\n+    return result;\n+  }\n+\n+  ExecContext* ctx_;\n+  Future<> finished_ = Future<>::MakeFinished();\n+\n+  const std::vector<int> key_field_ids_;\n+  const std::vector<int> agg_src_field_ids_;\n+  const std::vector<internal::Aggregate> aggs_;\n+  const std::vector<const HashAggregateKernel*> agg_kernels_;\n+\n+  ThreadIndexer get_thread_index_;\n+  AtomicCounter input_counter_, output_counter_;\n+\n+  std::vector<ThreadLocalState> local_states_;\n+  ExecBatch out_data_;\n+};\n+\n+class DefaultExecFactoryRegistry : public ExecFactoryRegistry {\n\nReview comment:\n       aggregate_node.cc feels like an odd place for this, maybe exec_plan.cc?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T17:05:32.590+0000",
                    "updated": "2021-08-09T17:05:32.590+0000",
                    "started": "2021-08-09T17:05:32.589+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635950",
                    "issueId": "13392418"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/worklog/635953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10793:\nURL: https://github.com/apache/arrow/pull/10793#discussion_r685374149\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/aggregate_node.cc\n##########\n@@ -0,0 +1,626 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/exec_plan.h\"\n+\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/compute/exec_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/datum.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/thread_pool.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace compute {\n+\n+namespace internal {\n+\n+Result<std::vector<const HashAggregateKernel*>> GetKernels(\n+    ExecContext* ctx, const std::vector<internal::Aggregate>& aggregates,\n+    const std::vector<ValueDescr>& in_descrs);\n+\n+Result<std::vector<std::unique_ptr<KernelState>>> InitKernels(\n+    const std::vector<const HashAggregateKernel*>& kernels, ExecContext* ctx,\n+    const std::vector<internal::Aggregate>& aggregates,\n+    const std::vector<ValueDescr>& in_descrs);\n+\n+Result<FieldVector> ResolveKernels(\n+    const std::vector<internal::Aggregate>& aggregates,\n+    const std::vector<const HashAggregateKernel*>& kernels,\n+    const std::vector<std::unique_ptr<KernelState>>& states, ExecContext* ctx,\n+    const std::vector<ValueDescr>& descrs);\n+\n+}  // namespace internal\n\nReview comment:\n       I was thinking I'd replace these with usage of `Kernel::InitAll` or other public & tested utilities in https://issues.apache.org/jira/browse/ARROW-13451. I've added a note to this effect to that JIRA\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T17:10:55.887+0000",
                    "updated": "2021-08-09T17:10:55.887+0000",
                    "started": "2021-08-09T17:10:55.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635953",
                    "issueId": "13392418"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/worklog/635955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10793:\nURL: https://github.com/apache/arrow/pull/10793#discussion_r685374409\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/aggregate_node.cc\n##########\n@@ -0,0 +1,626 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/exec_plan.h\"\n+\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/compute/exec_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/datum.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/thread_pool.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace compute {\n+\n+namespace internal {\n+\n+Result<std::vector<const HashAggregateKernel*>> GetKernels(\n+    ExecContext* ctx, const std::vector<internal::Aggregate>& aggregates,\n+    const std::vector<ValueDescr>& in_descrs);\n+\n+Result<std::vector<std::unique_ptr<KernelState>>> InitKernels(\n+    const std::vector<const HashAggregateKernel*>& kernels, ExecContext* ctx,\n+    const std::vector<internal::Aggregate>& aggregates,\n+    const std::vector<ValueDescr>& in_descrs);\n+\n+Result<FieldVector> ResolveKernels(\n+    const std::vector<internal::Aggregate>& aggregates,\n+    const std::vector<const HashAggregateKernel*>& kernels,\n+    const std::vector<std::unique_ptr<KernelState>>& states, ExecContext* ctx,\n+    const std::vector<ValueDescr>& descrs);\n+\n+}  // namespace internal\n+\n+namespace {\n+\n+class ThreadIndexer {\n+ public:\n+  size_t operator()() {\n+    auto id = std::this_thread::get_id();\n+\n+    std::unique_lock<std::mutex> lock(mutex_);\n+    const auto& id_index = *id_to_index_.emplace(id, id_to_index_.size()).first;\n+\n+    return Check(id_index.second);\n+  }\n+\n+  static size_t Capacity() {\n+    static size_t max_size = arrow::internal::ThreadPool::DefaultCapacity();\n+    return max_size;\n+  }\n+\n+ private:\n+  size_t Check(size_t thread_index) {\n+    DCHECK_LT(thread_index, Capacity()) << \"thread index \" << thread_index\n+                                        << \" is out of range [0, \" << Capacity() << \")\";\n+\n+    return thread_index;\n+  }\n+\n+  std::mutex mutex_;\n+  std::unordered_map<std::thread::id, size_t> id_to_index_;\n+};\n+\n+struct ScalarAggregateNode : ExecNode {\n+  ScalarAggregateNode(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                      std::shared_ptr<Schema> output_schema,\n+                      std::vector<int> target_field_ids,\n+                      std::vector<const ScalarAggregateKernel*> kernels,\n+                      std::vector<std::vector<std::unique_ptr<KernelState>>> states)\n+      : ExecNode(plan, std::move(inputs), {\"target\"},\n+                 /*output_schema=*/std::move(output_schema),\n+                 /*num_outputs=*/1),\n+        target_field_ids_(std::move(target_field_ids)),\n+        kernels_(std::move(kernels)),\n+        states_(std::move(states)) {}\n+\n+  static Result<ExecNode*> Make(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                                const ExecNodeOptions& options) {\n+    RETURN_NOT_OK(ValidateExecNodeInputs(plan, inputs, 1, \"ScalarAggregateNode\"));\n+\n+    const auto& aggregate_options = checked_cast<const AggregateNodeOptions&>(options);\n+    auto aggregates = aggregate_options.aggregates;\n+\n+    const auto& input_schema = *inputs[0]->output_schema();\n+    auto exec_ctx = plan->exec_context();\n+\n+    std::vector<const ScalarAggregateKernel*> kernels(aggregates.size());\n+    std::vector<std::vector<std::unique_ptr<KernelState>>> states(kernels.size());\n+    FieldVector fields(kernels.size());\n+    const auto& field_names = aggregate_options.names;\n+    std::vector<int> target_field_ids(kernels.size());\n+\n+    for (size_t i = 0; i < kernels.size(); ++i) {\n+      ARROW_ASSIGN_OR_RAISE(auto match,\n+                            FieldRef(aggregate_options.targets[i]).FindOne(input_schema));\n+      target_field_ids[i] = match[0];\n+\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto function, exec_ctx->func_registry()->GetFunction(aggregates[i].function));\n+\n+      if (function->kind() != Function::SCALAR_AGGREGATE) {\n+        return Status::Invalid(\"Provided non ScalarAggregateFunction \",\n+                               aggregates[i].function);\n+      }\n+\n+      auto in_type = ValueDescr::Array(input_schema.field(target_field_ids[i])->type());\n+\n+      ARROW_ASSIGN_OR_RAISE(const Kernel* kernel, function->DispatchExact({in_type}));\n+      kernels[i] = static_cast<const ScalarAggregateKernel*>(kernel);\n+\n+      if (aggregates[i].options == nullptr) {\n+        aggregates[i].options = function->default_options();\n+      }\n+\n+      KernelContext kernel_ctx{exec_ctx};\n+      states[i].resize(ThreadIndexer::Capacity());\n+      RETURN_NOT_OK(Kernel::InitAll(&kernel_ctx,\n+                                    KernelInitArgs{kernels[i],\n+                                                   {\n+                                                       in_type,\n+                                                   },\n+                                                   aggregates[i].options},\n+                                    &states[i]));\n+\n+      // pick one to resolve the kernel signature\n+      kernel_ctx.SetState(states[i][0].get());\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto descr, kernels[i]->signature->out_type().Resolve(&kernel_ctx, {in_type}));\n+\n+      fields[i] = field(field_names[i], std::move(descr.type));\n+    }\n+\n+    return plan->EmplaceNode<ScalarAggregateNode>(\n+        plan, std::move(inputs), schema(std::move(fields)), std::move(target_field_ids),\n+        std::move(kernels), std::move(states));\n+  }\n+\n+  const char* kind_name() override { return \"ScalarAggregateNode\"; }\n+\n+  Status DoConsume(const ExecBatch& batch, size_t thread_index) {\n+    for (size_t i = 0; i < kernels_.size(); ++i) {\n+      KernelContext batch_ctx{plan()->exec_context()};\n+      batch_ctx.SetState(states_[i][thread_index].get());\n+\n+      ExecBatch single_column_batch{{batch.values[target_field_ids_[i]]}, batch.length};\n+      RETURN_NOT_OK(kernels_[i]->consume(&batch_ctx, single_column_batch));\n+    }\n+    return Status::OK();\n+  }\n+\n+  void InputReceived(ExecNode* input, int seq, ExecBatch batch) override {\n+    DCHECK_EQ(input, inputs_[0]);\n+\n+    auto thread_index = get_thread_index_();\n+\n+    if (ErrorIfNotOk(DoConsume(std::move(batch), thread_index))) return;\n+\n+    if (input_counter_.Increment()) {\n+      ErrorIfNotOk(Finish());\n+    }\n+  }\n+\n+  void ErrorReceived(ExecNode* input, Status error) override {\n+    DCHECK_EQ(input, inputs_[0]);\n+    outputs_[0]->ErrorReceived(this, std::move(error));\n+  }\n+\n+  void InputFinished(ExecNode* input, int num_total) override {\n+    DCHECK_EQ(input, inputs_[0]);\n+\n+    if (input_counter_.SetTotal(num_total)) {\n+      ErrorIfNotOk(Finish());\n+    }\n+  }\n+\n+  Status StartProducing() override {\n+    finished_ = Future<>::Make();\n+    // Scalar aggregates will only output a single batch\n+    outputs_[0]->InputFinished(this, 1);\n+    return Status::OK();\n+  }\n+\n+  void PauseProducing(ExecNode* output) override {}\n+\n+  void ResumeProducing(ExecNode* output) override {}\n+\n+  void StopProducing(ExecNode* output) override {\n+    DCHECK_EQ(output, outputs_[0]);\n+    StopProducing();\n+  }\n+\n+  void StopProducing() override {\n+    if (input_counter_.Cancel()) {\n+      finished_.MarkFinished();\n+    }\n+    inputs_[0]->StopProducing(this);\n+  }\n+\n+  Future<> finished() override { return finished_; }\n+\n+ private:\n+  Status Finish() {\n+    ExecBatch batch{{}, 1};\n+    batch.values.resize(kernels_.size());\n+\n+    for (size_t i = 0; i < kernels_.size(); ++i) {\n+      KernelContext ctx{plan()->exec_context()};\n+      ARROW_ASSIGN_OR_RAISE(auto merged, ScalarAggregateKernel::MergeAll(\n+                                             kernels_[i], &ctx, std::move(states_[i])));\n+      RETURN_NOT_OK(kernels_[i]->finalize(&ctx, &batch.values[i]));\n+    }\n+\n+    outputs_[0]->InputReceived(this, 0, std::move(batch));\n+    finished_.MarkFinished();\n+    return Status::OK();\n+  }\n+\n+  Future<> finished_ = Future<>::MakeFinished();\n+  const std::vector<int> target_field_ids_;\n+  const std::vector<const ScalarAggregateKernel*> kernels_;\n+\n+  std::vector<std::vector<std::unique_ptr<KernelState>>> states_;\n+\n+  ThreadIndexer get_thread_index_;\n+  AtomicCounter input_counter_;\n+};\n+\n+struct GroupByNode : ExecNode {\n+  GroupByNode(ExecNode* input, std::shared_ptr<Schema> output_schema, ExecContext* ctx,\n+              const std::vector<int>&& key_field_ids,\n+              const std::vector<int>&& agg_src_field_ids,\n+              const std::vector<internal::Aggregate>&& aggs,\n+              const std::vector<const HashAggregateKernel*>&& agg_kernels)\n+      : ExecNode(input->plan(), {input}, {\"groupby\"}, std::move(output_schema),\n+                 /*num_outputs=*/1),\n+        ctx_(ctx),\n+        key_field_ids_(std::move(key_field_ids)),\n+        agg_src_field_ids_(std::move(agg_src_field_ids)),\n+        aggs_(std::move(aggs)),\n+        agg_kernels_(std::move(agg_kernels)) {}\n+\n+  static Result<ExecNode*> Make(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                                const ExecNodeOptions& options) {\n+    RETURN_NOT_OK(ValidateExecNodeInputs(plan, inputs, 1, \"GroupByNode\"));\n+\n+    auto input = inputs[0];\n+    const auto& aggregate_options = checked_cast<const AggregateNodeOptions&>(options);\n+    const auto& keys = aggregate_options.keys;\n+    const auto& aggs = aggregate_options.aggregates;\n+    const auto& field_names = aggregate_options.names;\n+\n+    // Get input schema\n+    auto input_schema = input->output_schema();\n+\n+    // Find input field indices for key fields\n+    std::vector<int> key_field_ids(keys.size());\n+    for (size_t i = 0; i < keys.size(); ++i) {\n+      ARROW_ASSIGN_OR_RAISE(auto match, keys[i].FindOne(*input_schema));\n+      key_field_ids[i] = match[0];\n+    }\n+\n+    // Find input field indices for aggregates\n+    std::vector<int> agg_src_field_ids(aggs.size());\n+    for (size_t i = 0; i < aggs.size(); ++i) {\n+      ARROW_ASSIGN_OR_RAISE(auto match,\n+                            aggregate_options.targets[i].FindOne(*input_schema));\n+      agg_src_field_ids[i] = match[0];\n+    }\n+\n+    // Build vector of aggregate source field data types\n+    DCHECK_EQ(aggregate_options.targets.size(), aggs.size());\n+    std::vector<ValueDescr> agg_src_descrs(aggs.size());\n+    for (size_t i = 0; i < aggs.size(); ++i) {\n+      auto agg_src_field_id = agg_src_field_ids[i];\n+      agg_src_descrs[i] =\n+          ValueDescr(input_schema->field(agg_src_field_id)->type(), ValueDescr::ARRAY);\n+    }\n+\n+    auto ctx = input->plan()->exec_context();\n+\n+    // Construct aggregates\n+    ARROW_ASSIGN_OR_RAISE(auto agg_kernels,\n+                          internal::GetKernels(ctx, aggs, agg_src_descrs));\n+\n+    ARROW_ASSIGN_OR_RAISE(auto agg_states,\n+                          internal::InitKernels(agg_kernels, ctx, aggs, agg_src_descrs));\n+\n+    ARROW_ASSIGN_OR_RAISE(\n+        FieldVector agg_result_fields,\n+        internal::ResolveKernels(aggs, agg_kernels, agg_states, ctx, agg_src_descrs));\n+\n+    // Build field vector for output schema\n+    FieldVector output_fields{keys.size() + aggs.size()};\n+\n+    // Aggregate fields come before key fields to match the behavior of GroupBy function\n+    for (size_t i = 0; i < aggs.size(); ++i) {\n+      output_fields[i] = agg_result_fields[i]->WithName(field_names[i]);\n+    }\n+    size_t base = aggs.size();\n+    for (size_t i = 0; i < keys.size(); ++i) {\n+      int key_field_id = key_field_ids[i];\n+      output_fields[base + i] = input_schema->field(key_field_id);\n+    }\n+\n+    auto aggs_copy = aggs;\n+\n+    return input->plan()->EmplaceNode<GroupByNode>(\n+        input, schema(std::move(output_fields)), ctx, std::move(key_field_ids),\n+        std::move(agg_src_field_ids), std::move(aggs), std::move(agg_kernels));\n+  }\n+\n+  const char* kind_name() override { return \"GroupByNode\"; }\n+\n+  Status Consume(ExecBatch batch) {\n+    size_t thread_index = get_thread_index_();\n+    if (thread_index >= local_states_.size()) {\n+      return Status::IndexError(\"thread index \", thread_index, \" is out of range [0, \",\n+                                local_states_.size(), \")\");\n+    }\n+\n+    auto state = &local_states_[thread_index];\n+    RETURN_NOT_OK(InitLocalStateIfNeeded(state));\n+\n+    // Create a batch with key columns\n+    std::vector<Datum> keys(key_field_ids_.size());\n+    for (size_t i = 0; i < key_field_ids_.size(); ++i) {\n+      keys[i] = batch.values[key_field_ids_[i]];\n+    }\n+    ARROW_ASSIGN_OR_RAISE(ExecBatch key_batch, ExecBatch::Make(keys));\n+\n+    // Create a batch with group ids\n+    ARROW_ASSIGN_OR_RAISE(Datum id_batch, state->grouper->Consume(key_batch));\n+\n+    // Execute aggregate kernels\n+    for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+      KernelContext kernel_ctx{ctx_};\n+      kernel_ctx.SetState(state->agg_states[i].get());\n+\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto agg_batch,\n+          ExecBatch::Make({batch.values[agg_src_field_ids_[i]], id_batch}));\n+\n+      RETURN_NOT_OK(agg_kernels_[i]->resize(&kernel_ctx, state->grouper->num_groups()));\n+      RETURN_NOT_OK(agg_kernels_[i]->consume(&kernel_ctx, agg_batch));\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge() {\n+    ThreadLocalState* state0 = &local_states_[0];\n+    for (size_t i = 1; i < local_states_.size(); ++i) {\n+      ThreadLocalState* state = &local_states_[i];\n+      if (!state->grouper) {\n+        continue;\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(ExecBatch other_keys, state->grouper->GetUniques());\n+      ARROW_ASSIGN_OR_RAISE(Datum transposition, state0->grouper->Consume(other_keys));\n+      state->grouper.reset();\n+\n+      for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+        KernelContext batch_ctx{ctx_};\n+        DCHECK(state0->agg_states[i]);\n+        batch_ctx.SetState(state0->agg_states[i].get());\n+\n+        RETURN_NOT_OK(agg_kernels_[i]->resize(&batch_ctx, state0->grouper->num_groups()));\n+        RETURN_NOT_OK(agg_kernels_[i]->merge(&batch_ctx, std::move(*state->agg_states[i]),\n+                                             *transposition.array()));\n+        state->agg_states[i].reset();\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Result<ExecBatch> Finalize() {\n+    ThreadLocalState* state = &local_states_[0];\n+\n+    ExecBatch out_data{{}, state->grouper->num_groups()};\n+    out_data.values.resize(agg_kernels_.size() + key_field_ids_.size());\n+\n+    // Aggregate fields come before key fields to match the behavior of GroupBy function\n+    for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+      KernelContext batch_ctx{ctx_};\n+      batch_ctx.SetState(state->agg_states[i].get());\n+      RETURN_NOT_OK(agg_kernels_[i]->finalize(&batch_ctx, &out_data.values[i]));\n+      state->agg_states[i].reset();\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(ExecBatch out_keys, state->grouper->GetUniques());\n+    std::move(out_keys.values.begin(), out_keys.values.end(),\n+              out_data.values.begin() + agg_kernels_.size());\n+    state->grouper.reset();\n+\n+    if (output_counter_.SetTotal(\n+            static_cast<int>(BitUtil::CeilDiv(out_data.length, output_batch_size())))) {\n+      // this will be hit if out_data.length == 0\n+      finished_.MarkFinished();\n+    }\n+    return out_data;\n+  }\n+\n+  void OutputNthBatch(int n) {\n+    // bail if StopProducing was called\n+    if (finished_.is_finished()) return;\n+\n+    int64_t batch_size = output_batch_size();\n+    outputs_[0]->InputReceived(this, n, out_data_.Slice(batch_size * n, batch_size));\n+\n+    if (output_counter_.Increment()) {\n+      finished_.MarkFinished();\n+    }\n+  }\n+\n+  Status OutputResult() {\n+    RETURN_NOT_OK(Merge());\n+    ARROW_ASSIGN_OR_RAISE(out_data_, Finalize());\n+\n+    int num_output_batches = *output_counter_.total();\n+    outputs_[0]->InputFinished(this, num_output_batches);\n+\n+    auto executor = ctx_->executor();\n+    for (int i = 0; i < num_output_batches; ++i) {\n+      if (executor) {\n+        // bail if StopProducing was called\n+        if (finished_.is_finished()) break;\n+\n+        RETURN_NOT_OK(executor->Spawn([this, i] { OutputNthBatch(i); }));\n+      } else {\n+        OutputNthBatch(i);\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  void InputReceived(ExecNode* input, int seq, ExecBatch batch) override {\n+    // bail if StopProducing was called\n+    if (finished_.is_finished()) return;\n+\n+    DCHECK_EQ(input, inputs_[0]);\n+\n+    if (ErrorIfNotOk(Consume(std::move(batch)))) return;\n+\n+    if (input_counter_.Increment()) {\n+      ErrorIfNotOk(OutputResult());\n+    }\n+  }\n+\n+  void ErrorReceived(ExecNode* input, Status error) override {\n+    DCHECK_EQ(input, inputs_[0]);\n+\n+    outputs_[0]->ErrorReceived(this, std::move(error));\n+  }\n+\n+  void InputFinished(ExecNode* input, int num_total) override {\n+    // bail if StopProducing was called\n+    if (finished_.is_finished()) return;\n+\n+    DCHECK_EQ(input, inputs_[0]);\n+\n+    if (input_counter_.SetTotal(num_total)) {\n+      ErrorIfNotOk(OutputResult());\n+    }\n+  }\n+\n+  Status StartProducing() override {\n+    finished_ = Future<>::Make();\n+\n+    local_states_.resize(ThreadIndexer::Capacity());\n+    return Status::OK();\n+  }\n+\n+  void PauseProducing(ExecNode* output) override {}\n+\n+  void ResumeProducing(ExecNode* output) override {}\n+\n+  void StopProducing(ExecNode* output) override {\n+    DCHECK_EQ(output, outputs_[0]);\n+\n+    if (input_counter_.Cancel()) {\n+      finished_.MarkFinished();\n+    } else if (output_counter_.Cancel()) {\n+      finished_.MarkFinished();\n+    }\n+    inputs_[0]->StopProducing(this);\n+  }\n+\n+  void StopProducing() override { StopProducing(outputs_[0]); }\n+\n+  Future<> finished() override { return finished_; }\n+\n+ private:\n+  struct ThreadLocalState {\n+    std::unique_ptr<internal::Grouper> grouper;\n+    std::vector<std::unique_ptr<KernelState>> agg_states;\n+  };\n+\n+  ThreadLocalState* GetLocalState() {\n+    size_t thread_index = get_thread_index_();\n+    return &local_states_[thread_index];\n+  }\n+\n+  Status InitLocalStateIfNeeded(ThreadLocalState* state) {\n+    // Get input schema\n+    auto input_schema = inputs_[0]->output_schema();\n+\n+    if (state->grouper != nullptr) return Status::OK();\n+\n+    // Build vector of key field data types\n+    std::vector<ValueDescr> key_descrs(key_field_ids_.size());\n+    for (size_t i = 0; i < key_field_ids_.size(); ++i) {\n+      auto key_field_id = key_field_ids_[i];\n+      key_descrs[i] = ValueDescr(input_schema->field(key_field_id)->type());\n+    }\n+\n+    // Construct grouper\n+    ARROW_ASSIGN_OR_RAISE(state->grouper, internal::Grouper::Make(key_descrs, ctx_));\n+\n+    // Build vector of aggregate source field data types\n+    std::vector<ValueDescr> agg_src_descrs(agg_kernels_.size());\n+    for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+      auto agg_src_field_id = agg_src_field_ids_[i];\n+      agg_src_descrs[i] =\n+          ValueDescr(input_schema->field(agg_src_field_id)->type(), ValueDescr::ARRAY);\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(\n+        state->agg_states,\n+        internal::InitKernels(agg_kernels_, ctx_, aggs_, agg_src_descrs));\n+\n+    return Status::OK();\n+  }\n+\n+  int output_batch_size() const {\n+    int result = static_cast<int>(ctx_->exec_chunksize());\n+    if (result < 0) {\n+      result = 32 * 1024;\n+    }\n+    return result;\n+  }\n+\n+  ExecContext* ctx_;\n+  Future<> finished_ = Future<>::MakeFinished();\n+\n+  const std::vector<int> key_field_ids_;\n+  const std::vector<int> agg_src_field_ids_;\n+  const std::vector<internal::Aggregate> aggs_;\n+  const std::vector<const HashAggregateKernel*> agg_kernels_;\n+\n+  ThreadIndexer get_thread_index_;\n+  AtomicCounter input_counter_, output_counter_;\n+\n+  std::vector<ThreadLocalState> local_states_;\n+  ExecBatch out_data_;\n+};\n+\n+class DefaultExecFactoryRegistry : public ExecFactoryRegistry {\n\nReview comment:\n       whoops, didn't intend to leave this here\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T17:11:12.520+0000",
                    "updated": "2021-08-09T17:11:12.520+0000",
                    "started": "2021-08-09T17:11:12.519+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635955",
                    "issueId": "13392418"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/worklog/635958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #10793:\nURL: https://github.com/apache/arrow/pull/10793#issuecomment-895395304\n\n\n   +1, merging\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T17:14:06.758+0000",
                    "updated": "2021-08-09T17:14:06.758+0000",
                    "started": "2021-08-09T17:14:06.758+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635958",
                    "issueId": "13392418"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/worklog/635961",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz closed pull request #10793:\nURL: https://github.com/apache/arrow/pull/10793\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T17:15:38.399+0000",
                    "updated": "2021-08-09T17:15:38.399+0000",
                    "started": "2021-08-09T17:15:38.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635961",
                    "issueId": "13392418"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@70c06992[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d4789a0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5890ca14[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@195b522f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2558b811[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@73313912[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2daf8d0a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6ea678ba[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e5edd4f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@74dd8c3f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@25cb9873[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@78f547d8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 09 17:15:33 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-08-09T17:15:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13482/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-07-28T21:02:29.000+0000",
        "updated": "2021-08-09T17:15:39.000+0000",
        "timeoriginalestimate": null,
        "description": "ExecNodes' factory functions are confusingly non-uniform, which means a lot of boilerplate when composing them into even a simple ExecPlan. Providing a standard factory interface for these and a registry in which to store them by name will simplify declaration of ExecPlans.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Provide a registry for ExecNode implementations",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392418/comment/17396172",
                    "id": "17396172",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10793\n[https://github.com/apache/arrow/pull/10793]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-08-09T17:15:33.696+0000",
                    "updated": "2021-08-09T17:15:33.696+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0tf80:",
        "customfield_12314139": null
    }
}