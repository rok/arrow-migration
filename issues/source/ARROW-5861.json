{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13243334",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334",
    "key": "ARROW-5861",
    "fields": {
        "parent": {
            "id": "13243176",
            "key": "ARROW-5845",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13243176",
            "fields": {
                "summary": "[Java] Implement converter between Arrow record batches and Avro records",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/4",
                    "description": "This issue was once resolved, but the resolution was deemed incorrect. From here issues are either marked assigned or resolved.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/reopened.png",
                    "name": "Reopened",
                    "id": "4",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
            "name": "tianchen92",
            "key": "tianchen92",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
            },
            "displayName": "Ji Liu",
            "active": true,
            "timeZone": "Asia/Gaza"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
            "name": "tianchen92",
            "key": "tianchen92",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
            },
            "displayName": "Ji Liu",
            "active": true,
            "timeZone": "Asia/Gaza"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
            "name": "tianchen92",
            "key": "tianchen92",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
            },
            "displayName": "Ji Liu",
            "active": true,
            "timeZone": "Asia/Gaza"
        },
        "aggregateprogress": {
            "progress": 36600,
            "total": 36600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 36600,
            "total": 36600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5861/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 62,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/272532",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812\n \n \n   Related to [ARROW-5861](https://issues.apache.org/jira/browse/ARROW-5861).\r\n   Initial implement to support convert Avro record with primitive types to Arrow objects.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T10:48:26.453+0000",
                    "updated": "2019-07-05T10:48:26.453+0000",
                    "started": "2019-07-05T10:48:26.452+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272532",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/272699",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r300759965\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,296 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableBitHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableFloat8Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.holders.NullableVarBinaryHolder;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n+\n+  private static final int DEFAULT_BUFFER_SIZE = 256;\n+\n+  /**\n+   * Creates an {@link org.apache.arrow.vector.types.pojo.ArrowType} from the {@link Schema.Field}\n+   *\n+   <p>This method currently performs following type mapping for Avro data types to corresponding Arrow data types.\n+   *\n+   * <ul>\n+   *   <li>STRING --> ArrowType.Utf8</li>\n+   *   <li>INT --> ArrowType.Int(32, signed)</li>\n+   *   <li>LONG --> ArrowType.Int(64, signed)</li>\n+   *   <li>FLOAT --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)</li>\n+   *   <li>DOUBLE --> ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)</li>\n+   *   <li>BOOLEAN --> ArrowType.Bool</li>\n+   *   <li>BYTES --> ArrowType.Binary</li>\n+   * </ul>\n+   */\n+  private static ArrowType getArrowTypeForAvroField(Schema.Field field) {\n+\n+    Preconditions.checkNotNull(field, \"Avro Field object can't be null\");\n+\n+    Type avroType = field.schema().getType();\n+    final ArrowType arrowType;\n+\n+    switch (avroType) {\n+      case STRING:\n+        arrowType = new ArrowType.Utf8();\n+        break;\n+      case INT:\n+        arrowType = new ArrowType.Int(32, true);\n \n Review comment:\n   ```suggestion\r\n           arrowType = new ArrowType.Int(32, /*signed=*/true);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T17:51:18.673+0000",
                    "updated": "2019-07-05T17:51:18.673+0000",
                    "started": "2019-07-05T17:51:18.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272699",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/272702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r300760213\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,296 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableBitHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableFloat8Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.holders.NullableVarBinaryHolder;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n+\n+  private static final int DEFAULT_BUFFER_SIZE = 256;\n+\n+  /**\n+   * Creates an {@link org.apache.arrow.vector.types.pojo.ArrowType} from the {@link Schema.Field}\n+   *\n+   <p>This method currently performs following type mapping for Avro data types to corresponding Arrow data types.\n+   *\n+   * <ul>\n+   *   <li>STRING --> ArrowType.Utf8</li>\n+   *   <li>INT --> ArrowType.Int(32, signed)</li>\n+   *   <li>LONG --> ArrowType.Int(64, signed)</li>\n+   *   <li>FLOAT --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)</li>\n+   *   <li>DOUBLE --> ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)</li>\n+   *   <li>BOOLEAN --> ArrowType.Bool</li>\n+   *   <li>BYTES --> ArrowType.Binary</li>\n+   * </ul>\n+   */\n+  private static ArrowType getArrowTypeForAvroField(Schema.Field field) {\n+\n+    Preconditions.checkNotNull(field, \"Avro Field object can't be null\");\n+\n+    Type avroType = field.schema().getType();\n+    final ArrowType arrowType;\n+\n+    switch (avroType) {\n+      case STRING:\n+        arrowType = new ArrowType.Utf8();\n+        break;\n+      case INT:\n+        arrowType = new ArrowType.Int(32, true);\n+        break;\n+      case BOOLEAN:\n+        arrowType = new ArrowType.Bool();\n+        break;\n+      case LONG:\n+        arrowType = new ArrowType.Int(64, true);\n+        break;\n+      case FLOAT:\n+        arrowType = new ArrowType.FloatingPoint(SINGLE);\n+        break;\n+      case DOUBLE:\n+        arrowType = new ArrowType.FloatingPoint(DOUBLE);\n+        break;\n+      case BYTES:\n+        arrowType = new ArrowType.Binary();\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        arrowType = null;\n \n Review comment:\n   should we throw instead?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T18:00:32.245+0000",
                    "updated": "2019-07-05T18:00:32.245+0000",
                    "started": "2019-07-05T18:00:32.244+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272702",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/272703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r300761982\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,296 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableBitHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableFloat8Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.holders.NullableVarBinaryHolder;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n+\n+  private static final int DEFAULT_BUFFER_SIZE = 256;\n+\n+  /**\n+   * Creates an {@link org.apache.arrow.vector.types.pojo.ArrowType} from the {@link Schema.Field}\n+   *\n+   <p>This method currently performs following type mapping for Avro data types to corresponding Arrow data types.\n+   *\n+   * <ul>\n+   *   <li>STRING --> ArrowType.Utf8</li>\n+   *   <li>INT --> ArrowType.Int(32, signed)</li>\n+   *   <li>LONG --> ArrowType.Int(64, signed)</li>\n+   *   <li>FLOAT --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)</li>\n+   *   <li>DOUBLE --> ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)</li>\n+   *   <li>BOOLEAN --> ArrowType.Bool</li>\n+   *   <li>BYTES --> ArrowType.Binary</li>\n+   * </ul>\n+   */\n+  private static ArrowType getArrowTypeForAvroField(Schema.Field field) {\n+\n+    Preconditions.checkNotNull(field, \"Avro Field object can't be null\");\n+\n+    Type avroType = field.schema().getType();\n+    final ArrowType arrowType;\n+\n+    switch (avroType) {\n+      case STRING:\n+        arrowType = new ArrowType.Utf8();\n+        break;\n+      case INT:\n+        arrowType = new ArrowType.Int(32, true);\n+        break;\n+      case BOOLEAN:\n+        arrowType = new ArrowType.Bool();\n+        break;\n+      case LONG:\n+        arrowType = new ArrowType.Int(64, true);\n+        break;\n+      case FLOAT:\n+        arrowType = new ArrowType.FloatingPoint(SINGLE);\n+        break;\n+      case DOUBLE:\n+        arrowType = new ArrowType.FloatingPoint(DOUBLE);\n+        break;\n+      case BYTES:\n+        arrowType = new ArrowType.Binary();\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        arrowType = null;\n+        break;\n+    }\n+\n+    return arrowType;\n+  }\n+\n+  /**\n+   * Create Arrow {@link org.apache.arrow.vector.types.pojo.Schema} object for the given Avro {@link Schema}.\n+   */\n+  public static org.apache.arrow.vector.types.pojo.Schema avroToArrowSchema(Schema schema) {\n+    Preconditions.checkNotNull(schema, \"Avro Schema object can't be null\");\n+\n+    List<Field> arrowFields = new ArrayList<>();\n+    for (Schema.Field field : schema.getFields()) {\n+      final ArrowType arrowType = getArrowTypeForAvroField(field);\n+      if (arrowType != null) {\n+        final FieldType fieldType = new FieldType(true, arrowType, /* dictionary encoding */ null, null);\n+        List<Field> children = null;\n+        //TODO handle complex type children fields\n+        arrowFields.add(new Field(field.name(), fieldType, children));\n+      }\n+    }\n+    return new org.apache.arrow.vector.types.pojo.Schema(arrowFields, null);\n+  }\n+\n+  /**\n+   * Iterate the given Avro {@link DataFileReader} object to fetch the data and transpose it to populate\n+   * the given Arrow Vector objects.\n+   * @param reader avro reader to read data.\n+   * @param root Arrow {@link VectorSchemaRoot} object to populate\n+   */\n+  public static void avroToArrowVectors(DataFileReader<GenericRecord> reader, VectorSchemaRoot root) {\n+\n+    Preconditions.checkNotNull(reader, \"Avro DataFileReader object can't be null\");\n+    Preconditions.checkNotNull(root, \"VectorSchemaRoot object can't be null\");\n+\n+    allocateVectors(root, DEFAULT_BUFFER_SIZE);\n+\n+    int rowCount = 0;\n+    while (reader.hasNext()) {\n+      GenericRecord record = reader.next();\n+      for (Schema.Field field : reader.getSchema().getFields()) {\n+        Object value = record.get(field.name());\n+        avroToFieldVector(\n+            value,\n+            field.schema().getType(),\n+            rowCount,\n+            root.getVector(field.name()));\n+      }\n+      rowCount++;\n+    }\n+    root.setRowCount(rowCount);\n+  }\n+\n+  /**\n+   * Put the value into the vector at specific position.\n+   */\n+  public static void avroToFieldVector(Object value, Type avroType, int rowCount, FieldVector vector) {\n+    switch (avroType) {\n+      case STRING:\n+        updateVector((VarCharVector) vector, value, rowCount);\n+        break;\n+      case INT:\n+        updateVector((IntVector) vector, value, rowCount);\n+        break;\n+      case BOOLEAN:\n+        updateVector((BitVector)vector, value, rowCount);\n+        break;\n+      case LONG:\n+        updateVector((BigIntVector) vector, value, rowCount);\n+        break;\n+      case FLOAT:\n+        updateVector((Float4Vector) vector, value, rowCount);\n+        break;\n+      case DOUBLE:\n+        updateVector((Float8Vector) vector, value, rowCount);\n+        break;\n+      case BYTES:\n+        updateVector((VarBinaryVector) vector, value, rowCount);\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        break;\n+    }\n+  }\n+\n+  private static void updateVector(VarBinaryVector varBinaryVector, Object value, int rowCount) {\n+    NullableVarBinaryHolder holder = new NullableVarBinaryHolder();\n+    boolean isNonNull = value != null;\n+    holder.isSet = isNonNull ? 1 : 0;\n+\n+    if (isNonNull) {\n+      byte[] bytes = ((ByteBuffer) value).array();\n+      holder.buffer = varBinaryVector.getAllocator().buffer(bytes.length);\n+      holder.buffer.setBytes(0, bytes, 0, bytes.length);\n+      holder.start = 0;\n+      holder.end = bytes.length;\n+    } else {\n+      holder.buffer = varBinaryVector.getAllocator().buffer(0);\n+    }\n+    varBinaryVector.setSafe(rowCount, holder);\n \n Review comment:\n   can you use Writer classes instead?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T18:00:32.281+0000",
                    "updated": "2019-07-05T18:00:32.281+0000",
                    "started": "2019-07-05T18:00:32.280+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272703",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/272704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r300761543\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,296 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableBitHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableFloat8Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.holders.NullableVarBinaryHolder;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n+\n+  private static final int DEFAULT_BUFFER_SIZE = 256;\n+\n+  /**\n+   * Creates an {@link org.apache.arrow.vector.types.pojo.ArrowType} from the {@link Schema.Field}\n+   *\n+   <p>This method currently performs following type mapping for Avro data types to corresponding Arrow data types.\n+   *\n+   * <ul>\n+   *   <li>STRING --> ArrowType.Utf8</li>\n+   *   <li>INT --> ArrowType.Int(32, signed)</li>\n+   *   <li>LONG --> ArrowType.Int(64, signed)</li>\n+   *   <li>FLOAT --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)</li>\n+   *   <li>DOUBLE --> ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)</li>\n+   *   <li>BOOLEAN --> ArrowType.Bool</li>\n+   *   <li>BYTES --> ArrowType.Binary</li>\n+   * </ul>\n+   */\n+  private static ArrowType getArrowTypeForAvroField(Schema.Field field) {\n+\n+    Preconditions.checkNotNull(field, \"Avro Field object can't be null\");\n+\n+    Type avroType = field.schema().getType();\n+    final ArrowType arrowType;\n+\n+    switch (avroType) {\n+      case STRING:\n+        arrowType = new ArrowType.Utf8();\n+        break;\n+      case INT:\n+        arrowType = new ArrowType.Int(32, true);\n+        break;\n+      case BOOLEAN:\n+        arrowType = new ArrowType.Bool();\n+        break;\n+      case LONG:\n+        arrowType = new ArrowType.Int(64, true);\n+        break;\n+      case FLOAT:\n+        arrowType = new ArrowType.FloatingPoint(SINGLE);\n+        break;\n+      case DOUBLE:\n+        arrowType = new ArrowType.FloatingPoint(DOUBLE);\n+        break;\n+      case BYTES:\n+        arrowType = new ArrowType.Binary();\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        arrowType = null;\n+        break;\n+    }\n+\n+    return arrowType;\n+  }\n+\n+  /**\n+   * Create Arrow {@link org.apache.arrow.vector.types.pojo.Schema} object for the given Avro {@link Schema}.\n+   */\n+  public static org.apache.arrow.vector.types.pojo.Schema avroToArrowSchema(Schema schema) {\n+    Preconditions.checkNotNull(schema, \"Avro Schema object can't be null\");\n+\n+    List<Field> arrowFields = new ArrayList<>();\n+    for (Schema.Field field : schema.getFields()) {\n+      final ArrowType arrowType = getArrowTypeForAvroField(field);\n+      if (arrowType != null) {\n+        final FieldType fieldType = new FieldType(true, arrowType, /* dictionary encoding */ null, null);\n+        List<Field> children = null;\n+        //TODO handle complex type children fields\n+        arrowFields.add(new Field(field.name(), fieldType, children));\n+      }\n+    }\n+    return new org.apache.arrow.vector.types.pojo.Schema(arrowFields, null);\n+  }\n+\n+  /**\n+   * Iterate the given Avro {@link DataFileReader} object to fetch the data and transpose it to populate\n+   * the given Arrow Vector objects.\n+   * @param reader avro reader to read data.\n+   * @param root Arrow {@link VectorSchemaRoot} object to populate\n+   */\n+  public static void avroToArrowVectors(DataFileReader<GenericRecord> reader, VectorSchemaRoot root) {\n+\n+    Preconditions.checkNotNull(reader, \"Avro DataFileReader object can't be null\");\n+    Preconditions.checkNotNull(root, \"VectorSchemaRoot object can't be null\");\n+\n+    allocateVectors(root, DEFAULT_BUFFER_SIZE);\n+\n+    int rowCount = 0;\n+    while (reader.hasNext()) {\n+      GenericRecord record = reader.next();\n+      for (Schema.Field field : reader.getSchema().getFields()) {\n+        Object value = record.get(field.name());\n+        avroToFieldVector(\n+            value,\n+            field.schema().getType(),\n+            rowCount,\n+            root.getVector(field.name()));\n+      }\n+      rowCount++;\n+    }\n+    root.setRowCount(rowCount);\n+  }\n+\n+  /**\n+   * Put the value into the vector at specific position.\n+   */\n+  public static void avroToFieldVector(Object value, Type avroType, int rowCount, FieldVector vector) {\n+    switch (avroType) {\n+      case STRING:\n+        updateVector((VarCharVector) vector, value, rowCount);\n+        break;\n+      case INT:\n+        updateVector((IntVector) vector, value, rowCount);\n+        break;\n+      case BOOLEAN:\n+        updateVector((BitVector)vector, value, rowCount);\n+        break;\n+      case LONG:\n+        updateVector((BigIntVector) vector, value, rowCount);\n+        break;\n+      case FLOAT:\n+        updateVector((Float4Vector) vector, value, rowCount);\n+        break;\n+      case DOUBLE:\n+        updateVector((Float8Vector) vector, value, rowCount);\n+        break;\n+      case BYTES:\n+        updateVector((VarBinaryVector) vector, value, rowCount);\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        break;\n+    }\n+  }\n+\n+  private static void updateVector(VarBinaryVector varBinaryVector, Object value, int rowCount) {\n+    NullableVarBinaryHolder holder = new NullableVarBinaryHolder();\n+    boolean isNonNull = value != null;\n \n Review comment:\n   can the value be null in these cases.  I thought a union with a null type was needed to express a null value?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T18:00:36.644+0000",
                    "updated": "2019-07-05T18:00:36.644+0000",
                    "started": "2019-07-05T18:00:36.643+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272704",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/272858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#issuecomment-508935087\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=h1) Report\n   > Merging [#4812](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/9ffb9cdd46c498a2f46a8d030613e7c046b6e843?src=pr&el=desc) will **increase** coverage by `17.33%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4812/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #4812       +/-   ##\n   ==========================================\n   + Coverage   72.26%   89.6%   +17.33%     \n   ==========================================\n     Files         822     662      -160     \n     Lines      107713   96351    -11362     \n     Branches     1418       0     -1418     \n   ==========================================\n   + Hits        77844   86331     +8487     \n   + Misses      29507   10020    -19487     \n   + Partials      362       0      -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/testing/gtest\\_util.h](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0aW5nL2d0ZXN0X3V0aWwuaA==) | `97.36% <0%> (-2.64%)` | :arrow_down: |\n   | [cpp/src/arrow/compute/kernel.h](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbC5o) | `61.16% <0%> (-1.53%)` | :arrow_down: |\n   | [cpp/src/arrow/result.h](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9yZXN1bHQuaA==) | `91.3% <0%> (-0.37%)` | :arrow_down: |\n   | [python/pyarrow/tests/test\\_plasma.py](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wbGFzbWEucHk=) | `96.06% <0%> (-0.16%)` | :arrow_down: |\n   | [cpp/src/arrow/flight/server.h](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9mbGlnaHQvc2VydmVyLmg=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/gandiva/expression\\_registry.h](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2V4cHJlc3Npb25fcmVnaXN0cnkuaA==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/csv/column-builder.h](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY29sdW1uLWJ1aWxkZXIuaA==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/table\\_builder.h](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90YWJsZV9idWlsZGVyLmg=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/plasma/plasma.h](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvcGxhc21hLmg=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/gandiva/configuration.h](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2NvbmZpZ3VyYXRpb24uaA==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | ... and [748 more](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=footer). Last update [9ffb9cd...8bb68a5](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-06T15:38:43.797+0000",
                    "updated": "2019-07-06T15:38:43.797+0000",
                    "started": "2019-07-06T15:38:43.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272858",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/273025",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r300918021\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,296 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableBitHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableFloat8Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.holders.NullableVarBinaryHolder;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n+\n+  private static final int DEFAULT_BUFFER_SIZE = 256;\n+\n+  /**\n+   * Creates an {@link org.apache.arrow.vector.types.pojo.ArrowType} from the {@link Schema.Field}\n+   *\n+   <p>This method currently performs following type mapping for Avro data types to corresponding Arrow data types.\n+   *\n+   * <ul>\n+   *   <li>STRING --> ArrowType.Utf8</li>\n+   *   <li>INT --> ArrowType.Int(32, signed)</li>\n+   *   <li>LONG --> ArrowType.Int(64, signed)</li>\n+   *   <li>FLOAT --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)</li>\n+   *   <li>DOUBLE --> ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)</li>\n+   *   <li>BOOLEAN --> ArrowType.Bool</li>\n+   *   <li>BYTES --> ArrowType.Binary</li>\n+   * </ul>\n+   */\n+  private static ArrowType getArrowTypeForAvroField(Schema.Field field) {\n+\n+    Preconditions.checkNotNull(field, \"Avro Field object can't be null\");\n+\n+    Type avroType = field.schema().getType();\n+    final ArrowType arrowType;\n+\n+    switch (avroType) {\n+      case STRING:\n+        arrowType = new ArrowType.Utf8();\n+        break;\n+      case INT:\n+        arrowType = new ArrowType.Int(32, true);\n \n Review comment:\n   Thanks, fixed now.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-08T04:26:19.216+0000",
                    "updated": "2019-07-08T04:26:19.216+0000",
                    "started": "2019-07-08T04:26:19.216+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273025",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/273026",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r300918041\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,296 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableBitHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableFloat8Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.holders.NullableVarBinaryHolder;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n+\n+  private static final int DEFAULT_BUFFER_SIZE = 256;\n+\n+  /**\n+   * Creates an {@link org.apache.arrow.vector.types.pojo.ArrowType} from the {@link Schema.Field}\n+   *\n+   <p>This method currently performs following type mapping for Avro data types to corresponding Arrow data types.\n+   *\n+   * <ul>\n+   *   <li>STRING --> ArrowType.Utf8</li>\n+   *   <li>INT --> ArrowType.Int(32, signed)</li>\n+   *   <li>LONG --> ArrowType.Int(64, signed)</li>\n+   *   <li>FLOAT --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)</li>\n+   *   <li>DOUBLE --> ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)</li>\n+   *   <li>BOOLEAN --> ArrowType.Bool</li>\n+   *   <li>BYTES --> ArrowType.Binary</li>\n+   * </ul>\n+   */\n+  private static ArrowType getArrowTypeForAvroField(Schema.Field field) {\n+\n+    Preconditions.checkNotNull(field, \"Avro Field object can't be null\");\n+\n+    Type avroType = field.schema().getType();\n+    final ArrowType arrowType;\n+\n+    switch (avroType) {\n+      case STRING:\n+        arrowType = new ArrowType.Utf8();\n+        break;\n+      case INT:\n+        arrowType = new ArrowType.Int(32, true);\n+        break;\n+      case BOOLEAN:\n+        arrowType = new ArrowType.Bool();\n+        break;\n+      case LONG:\n+        arrowType = new ArrowType.Int(64, true);\n+        break;\n+      case FLOAT:\n+        arrowType = new ArrowType.FloatingPoint(SINGLE);\n+        break;\n+      case DOUBLE:\n+        arrowType = new ArrowType.FloatingPoint(DOUBLE);\n+        break;\n+      case BYTES:\n+        arrowType = new ArrowType.Binary();\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        arrowType = null;\n \n Review comment:\n   Sure, fixed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-08T04:26:33.074+0000",
                    "updated": "2019-07-08T04:26:33.074+0000",
                    "started": "2019-07-08T04:26:33.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273026",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/273027",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r300918339\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,296 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableBitHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableFloat8Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.holders.NullableVarBinaryHolder;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n+\n+  private static final int DEFAULT_BUFFER_SIZE = 256;\n+\n+  /**\n+   * Creates an {@link org.apache.arrow.vector.types.pojo.ArrowType} from the {@link Schema.Field}\n+   *\n+   <p>This method currently performs following type mapping for Avro data types to corresponding Arrow data types.\n+   *\n+   * <ul>\n+   *   <li>STRING --> ArrowType.Utf8</li>\n+   *   <li>INT --> ArrowType.Int(32, signed)</li>\n+   *   <li>LONG --> ArrowType.Int(64, signed)</li>\n+   *   <li>FLOAT --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)</li>\n+   *   <li>DOUBLE --> ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)</li>\n+   *   <li>BOOLEAN --> ArrowType.Bool</li>\n+   *   <li>BYTES --> ArrowType.Binary</li>\n+   * </ul>\n+   */\n+  private static ArrowType getArrowTypeForAvroField(Schema.Field field) {\n+\n+    Preconditions.checkNotNull(field, \"Avro Field object can't be null\");\n+\n+    Type avroType = field.schema().getType();\n+    final ArrowType arrowType;\n+\n+    switch (avroType) {\n+      case STRING:\n+        arrowType = new ArrowType.Utf8();\n+        break;\n+      case INT:\n+        arrowType = new ArrowType.Int(32, true);\n+        break;\n+      case BOOLEAN:\n+        arrowType = new ArrowType.Bool();\n+        break;\n+      case LONG:\n+        arrowType = new ArrowType.Int(64, true);\n+        break;\n+      case FLOAT:\n+        arrowType = new ArrowType.FloatingPoint(SINGLE);\n+        break;\n+      case DOUBLE:\n+        arrowType = new ArrowType.FloatingPoint(DOUBLE);\n+        break;\n+      case BYTES:\n+        arrowType = new ArrowType.Binary();\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        arrowType = null;\n+        break;\n+    }\n+\n+    return arrowType;\n+  }\n+\n+  /**\n+   * Create Arrow {@link org.apache.arrow.vector.types.pojo.Schema} object for the given Avro {@link Schema}.\n+   */\n+  public static org.apache.arrow.vector.types.pojo.Schema avroToArrowSchema(Schema schema) {\n+    Preconditions.checkNotNull(schema, \"Avro Schema object can't be null\");\n+\n+    List<Field> arrowFields = new ArrayList<>();\n+    for (Schema.Field field : schema.getFields()) {\n+      final ArrowType arrowType = getArrowTypeForAvroField(field);\n+      if (arrowType != null) {\n+        final FieldType fieldType = new FieldType(true, arrowType, /* dictionary encoding */ null, null);\n+        List<Field> children = null;\n+        //TODO handle complex type children fields\n+        arrowFields.add(new Field(field.name(), fieldType, children));\n+      }\n+    }\n+    return new org.apache.arrow.vector.types.pojo.Schema(arrowFields, null);\n+  }\n+\n+  /**\n+   * Iterate the given Avro {@link DataFileReader} object to fetch the data and transpose it to populate\n+   * the given Arrow Vector objects.\n+   * @param reader avro reader to read data.\n+   * @param root Arrow {@link VectorSchemaRoot} object to populate\n+   */\n+  public static void avroToArrowVectors(DataFileReader<GenericRecord> reader, VectorSchemaRoot root) {\n+\n+    Preconditions.checkNotNull(reader, \"Avro DataFileReader object can't be null\");\n+    Preconditions.checkNotNull(root, \"VectorSchemaRoot object can't be null\");\n+\n+    allocateVectors(root, DEFAULT_BUFFER_SIZE);\n+\n+    int rowCount = 0;\n+    while (reader.hasNext()) {\n+      GenericRecord record = reader.next();\n+      for (Schema.Field field : reader.getSchema().getFields()) {\n+        Object value = record.get(field.name());\n+        avroToFieldVector(\n+            value,\n+            field.schema().getType(),\n+            rowCount,\n+            root.getVector(field.name()));\n+      }\n+      rowCount++;\n+    }\n+    root.setRowCount(rowCount);\n+  }\n+\n+  /**\n+   * Put the value into the vector at specific position.\n+   */\n+  public static void avroToFieldVector(Object value, Type avroType, int rowCount, FieldVector vector) {\n+    switch (avroType) {\n+      case STRING:\n+        updateVector((VarCharVector) vector, value, rowCount);\n+        break;\n+      case INT:\n+        updateVector((IntVector) vector, value, rowCount);\n+        break;\n+      case BOOLEAN:\n+        updateVector((BitVector)vector, value, rowCount);\n+        break;\n+      case LONG:\n+        updateVector((BigIntVector) vector, value, rowCount);\n+        break;\n+      case FLOAT:\n+        updateVector((Float4Vector) vector, value, rowCount);\n+        break;\n+      case DOUBLE:\n+        updateVector((Float8Vector) vector, value, rowCount);\n+        break;\n+      case BYTES:\n+        updateVector((VarBinaryVector) vector, value, rowCount);\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        break;\n+    }\n+  }\n+\n+  private static void updateVector(VarBinaryVector varBinaryVector, Object value, int rowCount) {\n+    NullableVarBinaryHolder holder = new NullableVarBinaryHolder();\n+    boolean isNonNull = value != null;\n \n Review comment:\n   Thanks Micah, good observation, sure avro primitive type could not be set with null value. Remove null related logic in this PR and will do union type in follow-up PRs.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-08T04:29:26.686+0000",
                    "updated": "2019-07-08T04:29:26.686+0000",
                    "started": "2019-07-08T04:29:26.685+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273027",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/273028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r300918361\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,296 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableBitHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableFloat8Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.holders.NullableVarBinaryHolder;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n+\n+  private static final int DEFAULT_BUFFER_SIZE = 256;\n+\n+  /**\n+   * Creates an {@link org.apache.arrow.vector.types.pojo.ArrowType} from the {@link Schema.Field}\n+   *\n+   <p>This method currently performs following type mapping for Avro data types to corresponding Arrow data types.\n+   *\n+   * <ul>\n+   *   <li>STRING --> ArrowType.Utf8</li>\n+   *   <li>INT --> ArrowType.Int(32, signed)</li>\n+   *   <li>LONG --> ArrowType.Int(64, signed)</li>\n+   *   <li>FLOAT --> ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)</li>\n+   *   <li>DOUBLE --> ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)</li>\n+   *   <li>BOOLEAN --> ArrowType.Bool</li>\n+   *   <li>BYTES --> ArrowType.Binary</li>\n+   * </ul>\n+   */\n+  private static ArrowType getArrowTypeForAvroField(Schema.Field field) {\n+\n+    Preconditions.checkNotNull(field, \"Avro Field object can't be null\");\n+\n+    Type avroType = field.schema().getType();\n+    final ArrowType arrowType;\n+\n+    switch (avroType) {\n+      case STRING:\n+        arrowType = new ArrowType.Utf8();\n+        break;\n+      case INT:\n+        arrowType = new ArrowType.Int(32, true);\n+        break;\n+      case BOOLEAN:\n+        arrowType = new ArrowType.Bool();\n+        break;\n+      case LONG:\n+        arrowType = new ArrowType.Int(64, true);\n+        break;\n+      case FLOAT:\n+        arrowType = new ArrowType.FloatingPoint(SINGLE);\n+        break;\n+      case DOUBLE:\n+        arrowType = new ArrowType.FloatingPoint(DOUBLE);\n+        break;\n+      case BYTES:\n+        arrowType = new ArrowType.Binary();\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        arrowType = null;\n+        break;\n+    }\n+\n+    return arrowType;\n+  }\n+\n+  /**\n+   * Create Arrow {@link org.apache.arrow.vector.types.pojo.Schema} object for the given Avro {@link Schema}.\n+   */\n+  public static org.apache.arrow.vector.types.pojo.Schema avroToArrowSchema(Schema schema) {\n+    Preconditions.checkNotNull(schema, \"Avro Schema object can't be null\");\n+\n+    List<Field> arrowFields = new ArrayList<>();\n+    for (Schema.Field field : schema.getFields()) {\n+      final ArrowType arrowType = getArrowTypeForAvroField(field);\n+      if (arrowType != null) {\n+        final FieldType fieldType = new FieldType(true, arrowType, /* dictionary encoding */ null, null);\n+        List<Field> children = null;\n+        //TODO handle complex type children fields\n+        arrowFields.add(new Field(field.name(), fieldType, children));\n+      }\n+    }\n+    return new org.apache.arrow.vector.types.pojo.Schema(arrowFields, null);\n+  }\n+\n+  /**\n+   * Iterate the given Avro {@link DataFileReader} object to fetch the data and transpose it to populate\n+   * the given Arrow Vector objects.\n+   * @param reader avro reader to read data.\n+   * @param root Arrow {@link VectorSchemaRoot} object to populate\n+   */\n+  public static void avroToArrowVectors(DataFileReader<GenericRecord> reader, VectorSchemaRoot root) {\n+\n+    Preconditions.checkNotNull(reader, \"Avro DataFileReader object can't be null\");\n+    Preconditions.checkNotNull(root, \"VectorSchemaRoot object can't be null\");\n+\n+    allocateVectors(root, DEFAULT_BUFFER_SIZE);\n+\n+    int rowCount = 0;\n+    while (reader.hasNext()) {\n+      GenericRecord record = reader.next();\n+      for (Schema.Field field : reader.getSchema().getFields()) {\n+        Object value = record.get(field.name());\n+        avroToFieldVector(\n+            value,\n+            field.schema().getType(),\n+            rowCount,\n+            root.getVector(field.name()));\n+      }\n+      rowCount++;\n+    }\n+    root.setRowCount(rowCount);\n+  }\n+\n+  /**\n+   * Put the value into the vector at specific position.\n+   */\n+  public static void avroToFieldVector(Object value, Type avroType, int rowCount, FieldVector vector) {\n+    switch (avroType) {\n+      case STRING:\n+        updateVector((VarCharVector) vector, value, rowCount);\n+        break;\n+      case INT:\n+        updateVector((IntVector) vector, value, rowCount);\n+        break;\n+      case BOOLEAN:\n+        updateVector((BitVector)vector, value, rowCount);\n+        break;\n+      case LONG:\n+        updateVector((BigIntVector) vector, value, rowCount);\n+        break;\n+      case FLOAT:\n+        updateVector((Float4Vector) vector, value, rowCount);\n+        break;\n+      case DOUBLE:\n+        updateVector((Float8Vector) vector, value, rowCount);\n+        break;\n+      case BYTES:\n+        updateVector((VarBinaryVector) vector, value, rowCount);\n+        break;\n+      default:\n+        // no-op, shouldn't get here\n+        break;\n+    }\n+  }\n+\n+  private static void updateVector(VarBinaryVector varBinaryVector, Object value, int rowCount) {\n+    NullableVarBinaryHolder holder = new NullableVarBinaryHolder();\n+    boolean isNonNull = value != null;\n+    holder.isSet = isNonNull ? 1 : 0;\n+\n+    if (isNonNull) {\n+      byte[] bytes = ((ByteBuffer) value).array();\n+      holder.buffer = varBinaryVector.getAllocator().buffer(bytes.length);\n+      holder.buffer.setBytes(0, bytes, 0, bytes.length);\n+      holder.start = 0;\n+      holder.end = bytes.length;\n+    } else {\n+      holder.buffer = varBinaryVector.getAllocator().buffer(0);\n+    }\n+    varBinaryVector.setSafe(rowCount, holder);\n \n Review comment:\n   Fixed now.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-08T04:29:39.575+0000",
                    "updated": "2019-07-08T04:29:39.575+0000",
                    "started": "2019-07-08T04:29:39.574+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273028",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/273051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#issuecomment-508935087\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=h1) Report\n   > Merging [#4812](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/c2c9e99140363545521f957219e3eba71a98c804?src=pr&el=desc) will **increase** coverage by `2.16%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4812/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master   #4812      +/-   ##\n   =========================================\n   + Coverage   87.44%   89.6%   +2.16%     \n   =========================================\n     Files         997     662     -335     \n     Lines      139728   96351   -43377     \n     Branches     1418       0    -1418     \n   =========================================\n   - Hits       122181   86334   -35847     \n   + Misses      17185   10017    -7168     \n   + Partials      362       0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/plasma/thirdparty/ae/ae.c](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGhpcmRwYXJ0eS9hZS9hZS5j) | `70.75% <0%> (-1.89%)` | :arrow_down: |\n   | [cpp/src/arrow/csv/column-builder.cc](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY29sdW1uLWJ1aWxkZXIuY2M=) | `95.29% <0%> (-1.77%)` | :arrow_down: |\n   | [cpp/src/arrow/io/readahead.cc](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9yZWFkYWhlYWQuY2M=) | `95.91% <0%> (-1.03%)` | :arrow_down: |\n   | [cpp/src/arrow/util/thread-pool-test.cc](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLXRlc3QuY2M=) | `97.66% <0%> (-0.94%)` | :arrow_down: |\n   | [cpp/src/plasma/store.cc](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvc3RvcmUuY2M=) | `91.13% <0%> (-0.33%)` | :arrow_down: |\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [r/R/Table.R](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-ci9SL1RhYmxlLlI=) | | |\n   | [js/src/util/fn.ts](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-anMvc3JjL3V0aWwvZm4udHM=) | | |\n   | [go/arrow/array/bufferbuilder.go](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVmZmVyYnVpbGRlci5nbw==) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | ... and [332 more](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=footer). Last update [c2c9e99...54479c8](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-08T05:27:31.174+0000",
                    "updated": "2019-07-08T05:27:31.174+0000",
                    "started": "2019-07-08T05:27:31.173+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273051",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/273719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r301405467\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,273 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.complex.impl.VarBinaryWriterImpl;\n+import org.apache.arrow.vector.holders.BigIntHolder;\n+import org.apache.arrow.vector.holders.BitHolder;\n+import org.apache.arrow.vector.holders.Float4Holder;\n+import org.apache.arrow.vector.holders.Float8Holder;\n+import org.apache.arrow.vector.holders.IntHolder;\n+import org.apache.arrow.vector.holders.VarBinaryHolder;\n+import org.apache.arrow.vector.holders.VarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n \n Review comment:\n   I'm not familiar with the avro APIs but I think the write approach here is to implement a [DatumReader](https://github.com/apache/avro/blob/2d3b1fe7efd865639663ba785877182e7e038c45/lang/java/avro/src/main/java/org/apache/avro/io/DatumReader.java), I'm not sure if this should be an extension of GenericDatumReader or a new class either (would need to read the code for it).  I'm not sure it generic D should actually be a VectorSchemaRoot or a wrapper around it either (again would have to prototype something) but doing it at that level makes the decoding generic across any sort of transport and parallelization schemes.\r\n   \r\n   I would also see if there is a more OO approach that caches individual FieldWriters to populate them directly from the decoded primitives, rather then a switch statement/static method.  \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-09T05:50:43.193+0000",
                    "updated": "2019-07-09T05:50:43.193+0000",
                    "started": "2019-07-09T05:50:43.193+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273719",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/273720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r301397197\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrow.java\n ##########\n @@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.arrow.memory.BaseAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.avro.Schema;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.DatumReader;\n+\n+/**\n+ * Utility class to convert Avro objects to columnar Arrow format objects.\n+ */\n+public class AvroToArrow {\n+\n+  /**\n+   * Fetch the data from {@link DataFileReader} and convert it to Arrow objects.\n+   * @param reader avro data file reader.\n+   * @param allocator Memory allocator to use.\n+   * @return Arrow Data Objects {@link VectorSchemaRoot}\n+   */\n+  public static VectorSchemaRoot readToArrow(DataFileReader<GenericRecord> reader, BaseAllocator allocator) {\n+    Preconditions.checkNotNull(reader, \"Avro DataFileReader object can not be null\");\n+\n+    VectorSchemaRoot root = VectorSchemaRoot.create(\n+        AvroToArrowUtils.avroToArrowSchema(reader.getSchema()), allocator);\n+    AvroToArrowUtils.avroToArrowVectors(reader, root);\n+    return root;\n+  }\n+\n+  /**\n+   * Fetch the data with given avro schema file and dataFile, convert it to Arrow objects.\n+   * @param schemaFile avro schema file.\n+   * @param dataFile avro data file.\n+   * @param allocator Memory allocator to use.\n+   * @return Arrow Data Objects {@link VectorSchemaRoot}\n+   */\n+  public static VectorSchemaRoot readToArrow(File schemaFile, File dataFile, BaseAllocator allocator)\n+      throws IOException {\n+\n+    Schema schema = new Schema.Parser().parse(schemaFile);\n+    DatumReader<GenericRecord> datumReader = new GenericDatumReader<GenericRecord>(schema);\n+    DataFileReader<GenericRecord> dataFileReader = new DataFileReader<GenericRecord>(dataFile, datumReader);\n+\n+    return readToArrow(dataFileReader, allocator);\n+  }\n+\n+}\n+\n \n Review comment:\n   nit extra whitespace?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-09T05:50:43.226+0000",
                    "updated": "2019-07-09T05:50:43.226+0000",
                    "started": "2019-07-09T05:50:43.225+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273720",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/273851",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r301416011\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,273 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.complex.impl.VarBinaryWriterImpl;\n+import org.apache.arrow.vector.holders.BigIntHolder;\n+import org.apache.arrow.vector.holders.BitHolder;\n+import org.apache.arrow.vector.holders.Float4Holder;\n+import org.apache.arrow.vector.holders.Float8Holder;\n+import org.apache.arrow.vector.holders.IntHolder;\n+import org.apache.arrow.vector.holders.VarBinaryHolder;\n+import org.apache.arrow.vector.holders.VarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n \n Review comment:\n   Thanks for comments. Now this class accept DataFileReader to read avro data(which already holds DatumReader), do you mean we should accept param like DatumReader<VectorSchemaRoot> to read and covert data?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-09T06:34:16.938+0000",
                    "updated": "2019-07-09T06:34:16.938+0000",
                    "started": "2019-07-09T06:34:16.937+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273851",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/273852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r301416011\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,273 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.complex.impl.VarBinaryWriterImpl;\n+import org.apache.arrow.vector.holders.BigIntHolder;\n+import org.apache.arrow.vector.holders.BitHolder;\n+import org.apache.arrow.vector.holders.Float4Holder;\n+import org.apache.arrow.vector.holders.Float8Holder;\n+import org.apache.arrow.vector.holders.IntHolder;\n+import org.apache.arrow.vector.holders.VarBinaryHolder;\n+import org.apache.arrow.vector.holders.VarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n \n Review comment:\n   Thanks for comments. Now this class accept DataFileReader to read avro data(which already holds DatumReader), do you mean we should accept param like DatumReader\\<VectorSchemaRoot\\> to read and covert data?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-09T06:35:23.019+0000",
                    "updated": "2019-07-09T06:35:23.019+0000",
                    "started": "2019-07-09T06:35:23.018+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273852",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/273856",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r301418486\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,273 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.complex.impl.VarBinaryWriterImpl;\n+import org.apache.arrow.vector.holders.BigIntHolder;\n+import org.apache.arrow.vector.holders.BitHolder;\n+import org.apache.arrow.vector.holders.Float4Holder;\n+import org.apache.arrow.vector.holders.Float8Holder;\n+import org.apache.arrow.vector.holders.IntHolder;\n+import org.apache.arrow.vector.holders.VarBinaryHolder;\n+import org.apache.arrow.vector.holders.VarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n \n Review comment:\n   And it generic D seems should be a avro type like Record, Enum, Int etc and seems impossible to make something like \\<VectorSchemaRoot\\>.\r\n   \r\n   >'I would also see if there is a more OO approach that caches individual FieldWriters to populate them directly from the decoded primitives, rather then a switch statement/static method.'\r\n   IMO, can you give some suggestion with current implementation? thanks\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-09T06:43:22.411+0000",
                    "updated": "2019-07-09T06:43:22.411+0000",
                    "started": "2019-07-09T06:43:22.407+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273856",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/273857",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r301418486\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,273 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.complex.impl.VarBinaryWriterImpl;\n+import org.apache.arrow.vector.holders.BigIntHolder;\n+import org.apache.arrow.vector.holders.BitHolder;\n+import org.apache.arrow.vector.holders.Float4Holder;\n+import org.apache.arrow.vector.holders.Float8Holder;\n+import org.apache.arrow.vector.holders.IntHolder;\n+import org.apache.arrow.vector.holders.VarBinaryHolder;\n+import org.apache.arrow.vector.holders.VarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n \n Review comment:\n   And it generic D seems should be a avro type like Record, Enum, Int etc and seems impossible to make something like \\<VectorSchemaRoot\\>.\r\n   \r\n   >\"I would also see if there is a more OO approach that caches individual FieldWriters to populate them directly from the decoded primitives, rather then a switch statement/static method.\"\r\n   \r\n   IMO, can you give some suggestion with current implementation? thanks\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-09T06:44:09.911+0000",
                    "updated": "2019-07-09T06:44:09.911+0000",
                    "started": "2019-07-09T06:44:09.911+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273857",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/274611",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r301869683\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrow.java\n ##########\n @@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.arrow.memory.BaseAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.avro.Schema;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.DatumReader;\n+\n+/**\n+ * Utility class to convert Avro objects to columnar Arrow format objects.\n+ */\n+public class AvroToArrow {\n+\n+  /**\n+   * Fetch the data from {@link DataFileReader} and convert it to Arrow objects.\n+   * @param reader avro data file reader.\n+   * @param allocator Memory allocator to use.\n+   * @return Arrow Data Objects {@link VectorSchemaRoot}\n+   */\n+  public static VectorSchemaRoot readToArrow(DataFileReader<GenericRecord> reader, BaseAllocator allocator) {\n+    Preconditions.checkNotNull(reader, \"Avro DataFileReader object can not be null\");\n+\n+    VectorSchemaRoot root = VectorSchemaRoot.create(\n+        AvroToArrowUtils.avroToArrowSchema(reader.getSchema()), allocator);\n+    AvroToArrowUtils.avroToArrowVectors(reader, root);\n+    return root;\n+  }\n+\n+  /**\n+   * Fetch the data with given avro schema file and dataFile, convert it to Arrow objects.\n+   * @param schemaFile avro schema file.\n+   * @param dataFile avro data file.\n+   * @param allocator Memory allocator to use.\n+   * @return Arrow Data Objects {@link VectorSchemaRoot}\n+   */\n+  public static VectorSchemaRoot readToArrow(File schemaFile, File dataFile, BaseAllocator allocator)\n+      throws IOException {\n+\n+    Schema schema = new Schema.Parser().parse(schemaFile);\n+    DatumReader<GenericRecord> datumReader = new GenericDatumReader<GenericRecord>(schema);\n+    DataFileReader<GenericRecord> dataFileReader = new DataFileReader<GenericRecord>(dataFile, datumReader);\n+\n+    return readToArrow(dataFileReader, allocator);\n+  }\n+\n+}\n+\n \n Review comment:\n   Thanks, fixed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-10T03:05:18.910+0000",
                    "updated": "2019-07-10T03:05:18.910+0000",
                    "started": "2019-07-10T03:05:18.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "274611",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/274637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#issuecomment-508935087\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=h1) Report\n   > Merging [#4812](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/c2c9e99140363545521f957219e3eba71a98c804?src=pr&el=desc) will **increase** coverage by `2.15%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4812/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master   #4812      +/-   ##\n   =========================================\n   + Coverage   87.44%   89.6%   +2.15%     \n   =========================================\n     Files         997     662     -335     \n     Lines      139728   96427   -43301     \n     Branches     1418       0    -1418     \n   =========================================\n   - Hits       122181   86399   -35782     \n   + Misses      17185   10028    -7157     \n   + Partials      362       0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/gandiva/decimal\\_ir.cc](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2RlY2ltYWxfaXIuY2M=) | `69.81% <0%> (-7.78%)` | :arrow_down: |\n   | [cpp/src/plasma/thirdparty/ae/ae.c](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGhpcmRwYXJ0eS9hZS9hZS5j) | `70.75% <0%> (-1.89%)` | :arrow_down: |\n   | [cpp/src/arrow/io/readahead.cc](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9yZWFkYWhlYWQuY2M=) | `95.91% <0%> (-1.03%)` | :arrow_down: |\n   | [cpp/src/arrow/util/thread-pool-test.cc](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLXRlc3QuY2M=) | `97.66% <0%> (-0.94%)` | :arrow_down: |\n   | [cpp/src/gandiva/gdv\\_function\\_stubs.cc](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2dkdl9mdW5jdGlvbl9zdHVicy5jYw==) | `93.91% <0%> (-0.9%)` | :arrow_down: |\n   | [python/pyarrow/types.pxi](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdHlwZXMucHhp) | `69% <0%> (-0.45%)` | :arrow_down: |\n   | [cpp/src/plasma/store.cc](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvc3RvcmUuY2M=) | `91.13% <0%> (-0.33%)` | :arrow_down: |\n   | [cpp/src/gandiva/function\\_registry\\_arithmetic.cc](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Z1bmN0aW9uX3JlZ2lzdHJ5X2FyaXRobWV0aWMuY2M=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/gandiva/decimal\\_ir.h](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2RlY2ltYWxfaXIuaA==) | `73.33% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/gandiva/function\\_registry\\_string.cc](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Z1bmN0aW9uX3JlZ2lzdHJ5X3N0cmluZy5jYw==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | ... and [337 more](https://codecov.io/gh/apache/arrow/pull/4812/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=footer). Last update [c2c9e99...61d2dac](https://codecov.io/gh/apache/arrow/pull/4812?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-10T04:45:48.458+0000",
                    "updated": "2019-07-10T04:45:48.458+0000",
                    "started": "2019-07-10T04:45:48.457+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "274637",
                    "issueId": "13243334"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/worklog/275691",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4812: ARROW-5861: [Java] Initial implement to convert Avro record with primitive types\nURL: https://github.com/apache/arrow/pull/4812#discussion_r302856927\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowUtils.java\n ##########\n @@ -0,0 +1,273 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.DOUBLE;\n+import static org.apache.arrow.vector.types.FloatingPointPrecision.SINGLE;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.complex.impl.VarBinaryWriterImpl;\n+import org.apache.arrow.vector.holders.BigIntHolder;\n+import org.apache.arrow.vector.holders.BitHolder;\n+import org.apache.arrow.vector.holders.Float4Holder;\n+import org.apache.arrow.vector.holders.Float8Holder;\n+import org.apache.arrow.vector.holders.IntHolder;\n+import org.apache.arrow.vector.holders.VarBinaryHolder;\n+import org.apache.arrow.vector.holders.VarCharHolder;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.avro.Schema;\n+import org.apache.avro.Schema.Type;\n+import org.apache.avro.file.DataFileReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.util.Utf8;\n+\n+/**\n+ * Class that does most of the work to convert Avro data into Arrow columnar format Vector objects.\n+ */\n+public class AvroToArrowUtils {\n \n Review comment:\n   I think the goals for this library should be:\r\n   * Make it is as fast as possible.  I think this probably comes in two rounds:\r\n        1.  Integrate with the Avro library at the decoder level to avoid boxing/unboxing.\r\n        2.  At some point use bytebuddy or another generator library to avoid schema interpretation (this should come after we have something working first)\r\n   * Widely applicable.  Right now the code seems file specific, it would also be nice if it could work on arbitrary avro blocks sitting in memory   .  Is seemed like creating\r\n   \r\n   After a quick look it seemed to me that implementing a the DatumReader would be the best way to make it happen but if that isn't possible I would need to take a closer look.\r\n   \r\n   I thought an OO approach might be cleaner because it would allow you to have a something like:\r\n   ```\r\n   interface Consumer {\r\n      \r\n      void consume(Decoder decoder);\r\n   }\r\n   class AvroIntConsumer implements Consumer {\r\n   \r\n      IntWriter writer;\r\n      void consume(Decoder decoder) {\r\n            writer.writer(decoder.getInt())\r\n      }\r\n   }\r\n   ```\r\n   but its possible that this is overkill/less efficient then a switch statement.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-12T07:22:31.772+0000",
                    "updated": "2019-07-12T07:22:31.772+0000",
                    "started": "2019-07-12T07:22:31.772+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "275691",
                    "issueId": "13243334"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 36600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7e8c2803[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46a14f5a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1dc7af49[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5150e834[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ddfab77[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2df2a467[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d6ffb77[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5ba8a3a6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b5c2fb7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@13357727[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61f38275[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7fd8a87e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 36600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jul 19 03:12:55 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-07-19T03:12:55.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5861/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-07-05T10:43:10.000+0000",
        "updated": "2019-08-01T22:39:37.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 36600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Initial implement to convert Avro record with primitive types",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243334/comment/16888471",
                    "id": "16888471",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 4812\n[https://github.com/apache/arrow/pull/4812]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-07-19T03:12:55.972+0000",
                    "updated": "2019-07-19T03:12:55.972+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z04eeg:",
        "customfield_12314139": null
    }
}