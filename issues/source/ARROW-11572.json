{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13357736",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736",
    "key": "ARROW-11572",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=abreis",
            "name": "abreis",
            "key": "abreis",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=abreis&avatarId=45617",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=abreis&avatarId=45617",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=abreis&avatarId=45617",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=abreis&avatarId=45617"
            },
            "displayName": "Andre Braga Reis",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=abreis",
            "name": "abreis",
            "key": "abreis",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=abreis&avatarId=45617",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=abreis&avatarId=45617",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=abreis&avatarId=45617",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=abreis&avatarId=45617"
            },
            "displayName": "Andre Braga Reis",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11572/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 33,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/550187",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abreis opened a new pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454\n\n\n   This PR proposes a `divide_scalar` kernel that divides numeric arrays by a single scalar. \r\n   \r\n   Benchmarks show ~40-50% gains:\r\n   ```\r\n   # features = []\r\n   divide 512              time:   [2.3210 us 2.3345 us 2.3490 us]\r\n   divide_scalar 512       time:   [1.4374 us 1.4425 us 1.4485 us] (-38%)\r\n   divide_nulls 512        time:   [2.1718 us 2.1799 us 2.1894 us]\r\n   divide_scalar_nulls 512 time:   [1.3888 us 1.3959 us 1.4036 us] (-36%)\r\n   \r\n   # features = [\"simd\"]\r\n   divide 512              time:   [1.0221 us 1.0348 us 1.0481 us] \r\n   divide_scalar 512       time:   [468.04 ns 471.36 ns 475.19 ns] (-54%)\r\n   divide_nulls 512        time:   [960.20 ns 964.30 ns 969.15 ns]\r\n   divide_scalar_nulls 512 time:   [471.33 ns 476.41 ns 482.09 ns] (-51%)\r\n   ```\r\n   \r\n   The speedups are due to:\r\n   - only checking for `DivideByZero` once;\r\n   - not having to combine two null bitmaps;\r\n   - using `Simd::splat()` to fill the divisor lane.\r\n   \r\n   Tests are pretty bare right now, if you think this is worth merging I'll write a few more. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-09T11:36:05.534+0000",
                    "updated": "2021-02-09T11:36:05.534+0000",
                    "started": "2021-02-09T11:36:05.534+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "550187",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/550188",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-775875546\n\n\n   https://issues.apache.org/jira/browse/ARROW-11572\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-09T11:36:29.027+0000",
                    "updated": "2021-02-09T11:36:29.027+0000",
                    "started": "2021-02-09T11:36:29.027+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "550188",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/550193",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-775884768\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=h1) Report\n   > Merging [#9454](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=desc) (ac4e214) into [master](https://codecov.io/gh/apache/arrow/commit/599a63ed25cfc2ff59415ec4d04e9ee90c022e7e?el=desc) (599a63e) will **decrease** coverage by `0.01%`.\n   > The diff coverage is `57.50%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9454/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9454      +/-   ##\n   ==========================================\n   - Coverage   82.09%   82.07%   -0.02%     \n   ==========================================\n     Files         233      233              \n     Lines       54375    54415      +40     \n   ==========================================\n   + Hits        44639    44662      +23     \n   - Misses       9736     9753      +17     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/arrow/src/buffer.rs](https://codecov.io/gh/apache/arrow/pull/9454/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYnVmZmVyLnJz) | `95.27% <\u00f8> (\u00f8)` | |\n   | [rust/arrow/src/compute/kernels/arithmetic.rs](https://codecov.io/gh/apache/arrow/pull/9454/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY29tcHV0ZS9rZXJuZWxzL2FyaXRobWV0aWMucnM=) | `85.22% <57.50%> (-4.42%)` | :arrow_down: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=footer). Last update [599a63e...ac4e214](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-09T11:55:06.195+0000",
                    "updated": "2021-02-09T11:55:06.195+0000",
                    "started": "2021-02-09T11:55:06.195+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "550193",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/551493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#discussion_r574796751\n\n\n\n##########\nFile path: rust/arrow/benches/arithmetic_kernels.rs\n##########\n@@ -58,13 +58,19 @@ fn bench_divide(arr_a: &ArrayRef, arr_b: &ArrayRef) {\n     criterion::black_box(divide(&arr_a, &arr_b).unwrap());\n }\n \n+fn bench_divide_scalar(array: &ArrayRef, divisor: f32) {\n+    let array = array.as_any().downcast_ref::<Float32Array>().unwrap();\n+    criterion::black_box(divide_scalar(&array, divisor).unwrap());\n+}\n+\n fn bench_limit(arr_a: &ArrayRef, max: usize) {\n     criterion::black_box(limit(arr_a, max));\n }\n \n fn add_benchmark(c: &mut Criterion) {\n     let arr_a = create_array(512, false);\n     let arr_b = create_array(512, false);\n+    let scalar = 1.12358;\n\nReview comment:\n       Can we generate a random scalar (with seed) at runtime?\r\n   This to avoid optimizing more than most scenario's when the scalar is a variable.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-11T20:13:39.370+0000",
                    "updated": "2021-02-11T20:13:39.370+0000",
                    "started": "2021-02-11T20:13:39.370+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551493",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/551507",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abreis commented on a change in pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#discussion_r574809828\n\n\n\n##########\nFile path: rust/arrow/benches/arithmetic_kernels.rs\n##########\n@@ -58,13 +58,19 @@ fn bench_divide(arr_a: &ArrayRef, arr_b: &ArrayRef) {\n     criterion::black_box(divide(&arr_a, &arr_b).unwrap());\n }\n \n+fn bench_divide_scalar(array: &ArrayRef, divisor: f32) {\n+    let array = array.as_any().downcast_ref::<Float32Array>().unwrap();\n+    criterion::black_box(divide_scalar(&array, divisor).unwrap());\n+}\n+\n fn bench_limit(arr_a: &ArrayRef, max: usize) {\n     criterion::black_box(limit(arr_a, max));\n }\n \n fn add_benchmark(c: &mut Criterion) {\n     let arr_a = create_array(512, false);\n     let arr_b = create_array(512, false);\n+    let scalar = 1.12358;\n\nReview comment:\n       We certainly can. I just pushed a fix.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-11T20:36:38.576+0000",
                    "updated": "2021-02-11T20:36:38.576+0000",
                    "started": "2021-02-11T20:36:38.576+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551507",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/551513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-777779826\n\n\n   This is a good change, thanks @abreis.\r\n   \r\n   I think adding scalar equivalents to functions where we've previously converted scalars to arrays, ties us up in the future.\r\n   \r\n   The C++ implementation solves this issue by using a `Datum` that's loosely:\r\n   \r\n   ```rust\r\n   enum Datum {\r\n     Array(ArrayRef),\r\n     Scalar(ScalarRef)\r\n   }\r\n   ```\r\n   \r\n   This would allow us to avoid `{kernel}_scalar` for all our kernels where 2 or more arrays are currently taken as inputs.\r\n   \r\n   What are your thoughts @jorgecarleitao @alamb @andygrove @ritchie46?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-11T20:48:59.250+0000",
                    "updated": "2021-02-11T20:48:59.250+0000",
                    "started": "2021-02-11T20:48:59.250+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551513",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/551521",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-775884768\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=h1) Report\n   > Merging [#9454](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=desc) (2eb0195) into [master](https://codecov.io/gh/apache/arrow/commit/8a968eacfe2596f9aeeed79bd7a3723be7c096f1?el=desc) (8a968ea) will **decrease** coverage by `0.01%`.\n   > The diff coverage is `57.50%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9454/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9454      +/-   ##\n   ==========================================\n   - Coverage   82.32%   82.30%   -0.02%     \n   ==========================================\n     Files         233      233              \n     Lines       54446    54486      +40     \n   ==========================================\n   + Hits        44823    44846      +23     \n   - Misses       9623     9640      +17     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/arrow/src/buffer.rs](https://codecov.io/gh/apache/arrow/pull/9454/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYnVmZmVyLnJz) | `95.27% <\u00f8> (\u00f8)` | |\n   | [rust/arrow/src/compute/kernels/arithmetic.rs](https://codecov.io/gh/apache/arrow/pull/9454/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY29tcHV0ZS9rZXJuZWxzL2FyaXRobWV0aWMucnM=) | `85.22% <57.50%> (-4.42%)` | :arrow_down: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=footer). Last update [8a968ea...2eb0195](https://codecov.io/gh/apache/arrow/pull/9454?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-11T20:59:59.781+0000",
                    "updated": "2021-02-11T20:59:59.781+0000",
                    "started": "2021-02-11T20:59:59.781+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551521",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/551535",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abreis commented on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-777809399\n\n\n   IMO, that would be the superior approach (though it's a much larger rewrite).\r\n   \r\n   I tried to mock what it could look like for the numeric kernels:\r\n   ```rust\r\n   // Datum with concrete types for the arithmetic module\r\n   enum DatumNumeric<'a, T>\r\n   where\r\n       T: ArrowNumericType,\r\n   {\r\n       Array(&'a PrimitiveArray<T>),\r\n       Scalar(T::Native),\r\n   }\r\n   \r\n   // lets the user pass arrays without interacting with Datum\r\n   impl<'a, T> From<&'a PrimitiveArray<T>> for DatumNumeric<'a, T>\r\n   where\r\n       T: ArrowNumericType,\r\n   {\r\n       fn from(array: &'a PrimitiveArray<T>) -> Self {\r\n           DatumNumeric::Array(array)\r\n       }\r\n   }\r\n   \r\n   // can match and run separate code for array/array, array/scalar, etcetera\r\n   fn new_math_divide<'a, T, DN>(left: DN, right: DN) -> Result<PrimitiveArray<T>>\r\n   where\r\n       T: ArrowNumericType,\r\n       T::Native: Div<Output = T::Native> + Zero,\r\n       DN: Into<DatumNumeric<'a, T>>,\r\n   {\r\n       match (left.into(), right.into()) {\r\n           (DatumNumeric::Array(left), DatumNumeric::Array(right)) => todo!(\"array/array\"),\r\n           (DatumNumeric::Array(array), DatumNumeric::Scalar(divisor)) => todo!(\"array/scalar\"),\r\n           _ => todo!(),\r\n       }\r\n   }\r\n   \r\n   fn test_datum_divide() {\r\n       let a = Int32Array::from(vec![15, 15, 8, 1, 9]);\r\n       let b = Int32Array::from(vec![5, 6, 8, 9, 1]);\r\n       let c = new_math_divide(&a, &b).unwrap(); // Works, same interface as before\r\n   }\r\n   ```\r\n   \r\n   However, Rust doesn't like the impl From for scalars (I tried ` impl<'a, T> From<T::Native> for DatumNumeric<'a, T> where T: ArrowNumericType`). Perhaps there's a better way to accomplish this.\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-11T21:39:26.795+0000",
                    "updated": "2021-02-11T21:39:26.795+0000",
                    "started": "2021-02-11T21:39:26.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551535",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/551536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abreis edited a comment on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-777809399\n\n\n   IMO, that would be the superior approach (though it's a much larger rewrite).\r\n   \r\n   I tried to mock what it could look like for the numeric kernels:\r\n   ```rust\r\n   // Datum with concrete types for the arithmetic module\r\n   enum DatumNumeric<'a, T>\r\n   where\r\n       T: ArrowNumericType,\r\n   {\r\n       Array(&'a PrimitiveArray<T>),\r\n       Scalar(T::Native),\r\n   }\r\n   \r\n   // lets the user pass arrays without interacting with Datum\r\n   impl<'a, T> From<&'a PrimitiveArray<T>> for DatumNumeric<'a, T>\r\n   where\r\n       T: ArrowNumericType,\r\n   {\r\n       fn from(array: &'a PrimitiveArray<T>) -> Self {\r\n           DatumNumeric::Array(array)\r\n       }\r\n   }\r\n   \r\n   // can match and run specialized code for array/array, array/scalar, etcetera\r\n   fn new_math_divide<'a, T, DN>(left: DN, right: DN) -> Result<PrimitiveArray<T>>\r\n   where\r\n       T: ArrowNumericType,\r\n       T::Native: Div<Output = T::Native> + Zero,\r\n       DN: Into<DatumNumeric<'a, T>>,\r\n   {\r\n       match (left.into(), right.into()) {\r\n           (DatumNumeric::Array(left), DatumNumeric::Array(right)) => todo!(\"array/array\"),\r\n           (DatumNumeric::Array(array), DatumNumeric::Scalar(divisor)) => todo!(\"array/scalar\"),\r\n           _ => todo!(),\r\n       }\r\n   }\r\n   \r\n   fn test_datum_divide() {\r\n       let a = Int32Array::from(vec![15, 15, 8, 1, 9]);\r\n       let b = Int32Array::from(vec![5, 6, 8, 9, 1]);\r\n       let c = new_math_divide(&a, &b).unwrap(); // Works, same interface as before\r\n   }\r\n   ```\r\n   \r\n   However, Rust doesn't like the impl From for scalars (I tried ` impl<'a, T> From<T::Native> for DatumNumeric<'a, T> where T: ArrowNumericType`). Perhaps there's a better way to accomplish this.\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-11T21:40:19.879+0000",
                    "updated": "2021-02-11T21:40:19.879+0000",
                    "started": "2021-02-11T21:40:19.879+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551536",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/551537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abreis edited a comment on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-777809399\n\n\n   IMO, that would be the superior approach (though it's a much larger rewrite).\r\n   \r\n   I tried to mock what it could look like for the numeric kernels:\r\n   ```rust\r\n   // Datum with concrete types for the arithmetic module\r\n   enum DatumNumeric<'a, T>\r\n   where\r\n       T: ArrowNumericType,\r\n   {\r\n       Array(&'a PrimitiveArray<T>),\r\n       Scalar(T::Native),\r\n   }\r\n   \r\n   // lets the user pass arrays without interacting with Datum\r\n   impl<'a, T> From<&'a PrimitiveArray<T>> for DatumNumeric<'a, T>\r\n   where\r\n       T: ArrowNumericType,\r\n   {\r\n       fn from(array: &'a PrimitiveArray<T>) -> Self {\r\n           DatumNumeric::Array(array)\r\n       }\r\n   }\r\n   \r\n   // can match and run specialized code for array/array, array/scalar, etcetera\r\n   fn datum_math_divide<'a, T, DN>(left: DN, right: DN) -> Result<PrimitiveArray<T>>\r\n   where\r\n       T: ArrowNumericType,\r\n       T::Native: Div<Output = T::Native> + Zero,\r\n       DN: Into<DatumNumeric<'a, T>>,\r\n   {\r\n       match (left.into(), right.into()) {\r\n           (DatumNumeric::Array(left), DatumNumeric::Array(right)) => todo!(\"array/array\"),\r\n           (DatumNumeric::Array(array), DatumNumeric::Scalar(divisor)) => todo!(\"array/scalar\"),\r\n           _ => todo!(),\r\n       }\r\n   }\r\n   \r\n   fn test_datum_divide() {\r\n       let a = Int32Array::from(vec![15, 15, 8, 1, 9]);\r\n       let b = Int32Array::from(vec![5, 6, 8, 9, 1]);\r\n       let c = datum_math_divide(&a, &b).unwrap(); // Works, same interface as before\r\n   }\r\n   ```\r\n   \r\n   However, Rust doesn't like the impl From for scalars (I tried ` impl<'a, T> From<T::Native> for DatumNumeric<'a, T> where T: ArrowNumericType`). Perhaps there's a better way to accomplish this.\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-11T21:41:12.849+0000",
                    "updated": "2021-02-11T21:41:12.849+0000",
                    "started": "2021-02-11T21:41:12.848+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551537",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/551539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abreis edited a comment on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-777809399\n\n\n   IMO, that would be the superior approach (though it's a much larger rewrite).\r\n   \r\n   I tried to mock what it could look like for the numeric kernels:\r\n   ```rust\r\n   // Datum with concrete types for the arithmetic module\r\n   enum DatumNumeric<'a, T>\r\n   where\r\n       T: ArrowNumericType,\r\n   {\r\n       Array(&'a PrimitiveArray<T>),\r\n       Scalar(T::Native),\r\n   }\r\n   \r\n   // lets the user pass arrays without interacting with Datum\r\n   impl<'a, T> From<&'a PrimitiveArray<T>> for DatumNumeric<'a, T>\r\n   where\r\n       T: ArrowNumericType,\r\n   {\r\n       fn from(array: &'a PrimitiveArray<T>) -> Self {\r\n           DatumNumeric::Array(array)\r\n       }\r\n   }\r\n   \r\n   // can match and run specialized code for array/array, array/scalar, etcetera\r\n   fn datum_math_divide<'a, T, DN>(left: DN, right: DN) -> Result<PrimitiveArray<T>>\r\n   where\r\n       T: ArrowNumericType,\r\n       T::Native: Div<Output = T::Native> + Zero,\r\n       DN: Into<DatumNumeric<'a, T>>,\r\n   {\r\n       use DatumNumeric::*;\r\n       match (left.into(), right.into()) {\r\n           (Array(left), Array(right)) => todo!(\"array/array\"),\r\n           (Array(array), Scalar(divisor)) => todo!(\"array/scalar\"),\r\n           _ => todo!(),\r\n       }\r\n   }\r\n   \r\n   fn test_datum_divide() {\r\n       let a = Int32Array::from(vec![15, 15, 8, 1, 9]);\r\n       let b = Int32Array::from(vec![5, 6, 8, 9, 1]);\r\n       let c = datum_math_divide(&a, &b).unwrap(); // Works, same interface as before\r\n   }\r\n   ```\r\n   \r\n   However, Rust doesn't like the impl From for scalars (I tried ` impl<'a, T> From<T::Native> for DatumNumeric<'a, T> where T: ArrowNumericType`). Perhaps there's a better way to accomplish this.\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-11T21:44:22.946+0000",
                    "updated": "2021-02-11T21:44:22.946+0000",
                    "started": "2021-02-11T21:44:22.945+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551539",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/551544",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-777821096\n\n\n   I think @jorgecarleitao  was doing something similar to the `Datum` approach in DataFusion (https://github.com/apache/arrow/pull/9376) -- I realize it is not the same exact thing, but the `ColumnarValue` of that PR is very close I think to the `Datum` described by @nevi-me \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-11T22:01:04.479+0000",
                    "updated": "2021-02-11T22:01:04.479+0000",
                    "started": "2021-02-11T22:01:04.478+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551544",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/551698",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ritchie46 commented on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-778020689\n\n\n   As @abreis' mock-up shows it can be an elegant way to reduce the public API surface.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-12T07:08:44.228+0000",
                    "updated": "2021-02-12T07:08:44.228+0000",
                    "started": "2021-02-12T07:08:44.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551698",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/551708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-778036785\n\n\n   @abreis , I am not convinced that that is sufficient, unfortunately, because it excludes all types that are not Numeric (i.e. all dates and times for primitives, as well as all other logical types).\r\n   \r\n   We could of course offer a `DatumTemporal` and a `DatumList` and so one and so forth, but IMO that is introducing more complexity, as we now start having `struct`s for all kinds of logical types.\r\n   \r\n   Generally, the logical operation performed on the data depends on its `DataType`. Thus, the scalar needs to contain that logical data type information.\r\n   \r\n   In my opinion, the data structure should be something like what DataFusion has, but instead of having one enum variant per logical type, we should have one enum variant per physical type, i.e.\r\n   \r\n   ```rust\r\n   enum ScalarValue {\r\n       Int32(Option<i32>, DataType),  // int32, date32, time32\r\n       Int64(Option<i64>, DataType), // int64, date64, time64, timestamp\r\n       List(Option<Vec<ScalarValue>>, DataType),\r\n   }\r\n   ```\r\n   The `Option` indicates validity of the type, `DataType` represents the logical type.\r\n   \r\n   This corresponds to the notion that each variant needs to be treated fundamentally different because its physical layout (i.e. at the machine level) is different. This is how Rust handles these things with generics, because it relies on type information to compile the instructions.\r\n   \r\n   This would allow us to write our numerical operations neatly using a generic over `ArrowNativeType`, as `T::Native` would have a one-to-one correspondence to the physical type in the enum.\r\n   \r\n   We still have a problem over which a `PrimitiveArray` currently needs to be downcasted to its logical - not physical - representation, and thus we still have a lot of useless downcastings. Specifically, `PrimitiveArray<Int32Type>` and `PrimitiveArray<Date32Type>` have the same in-memory representation, their only difference is a constant value at `ArrayData::DataType`; there is no reason to have 2 variants here: we just need one variant and two values (the datatypes). [Point 10](https://github.com/jorgecarleitao/arrow2/tree/proposal#10-make-primitivearrayt-nativetype-instead-of-primitivetype) of my proposal addresses this by splitting the logical and physical. I.e. make it `PrimitiveArray<i32>`. Regardless, this is just to explain why imo we should aim at one variant per physical, not logical type.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-12T07:48:43.679+0000",
                    "updated": "2021-02-12T07:48:43.679+0000",
                    "started": "2021-02-12T07:48:43.679+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551708",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/551818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abreis commented on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-778208765\n\n\n   > @abreis , I am not convinced that that is sufficient, unfortunately, because it excludes all types that are not Numeric (i.e. all dates and times for primitives, as well as all other logical types).\r\n   > \r\n   > We could of course offer a `DatumTemporal` and a `DatumList` and so one and so forth, but IMO that is introducing more complexity, as we now start having `struct`s for all kinds of logical types.\r\n   \r\n   I agree. I just realized that `ArrowPrimitiveType` exists though, so Datum can be generic over that instead.\r\n   \r\n   Here is a more fleshed-out mock of a Datum type. The signature of `datum_math_divide` enforces a consistent `T` over array/array and array/scalar combinations, and the method's output.\r\n   \r\n   Base type:\r\n   ```rust\r\n   #[derive(Debug)]\r\n   pub enum Datum<'a, T>\r\n   where\r\n       T: ArrowPrimitiveType,\r\n   {\r\n       Array(&'a PrimitiveArray<T>),\r\n       Scalar(Option<T::Native>),\r\n   }\r\n   ```\r\n   \r\n   `From` impls for both arrays and nullable scalars:\r\n   ```rust\r\n   impl<'a, T> From<&'a PrimitiveArray<T>> for Datum<'a, T>\r\n   where\r\n       T: ArrowPrimitiveType,\r\n   {\r\n       fn from(array: &'a PrimitiveArray<T>) -> Self {\r\n           Datum::Array(array)\r\n       }\r\n   }\r\n   \r\n   impl<'a, T> From<Option<T::Native>> for Datum<'a, T>\r\n   where\r\n       T: ArrowPrimitiveType,\r\n   {\r\n       fn from(scalar: Option<T::Native>) -> Self {\r\n           Datum::Scalar(scalar)\r\n       }\r\n   }\r\n   ```\r\n   \r\n   A (user-facing) method for math division:\r\n   ```rust\r\n   pub fn math_divide<'a1, 'a2, T, DL, DR>(\r\n       left: DL,\r\n       right: DR,\r\n   ) -> Result<PrimitiveArray<T>>\r\n   where\r\n       T: ArrowNumericType,\r\n       T::Native: Div<Output = T::Native> + Zero,\r\n       DL: Into<Datum<'a1, T>>, // left and right may have different lifetimes\r\n       DR: Into<Datum<'a2, T>>, // but `T` must be the same\r\n   {\r\n       use Datum::*;\r\n       match (left.into(), right.into()) {\r\n           (Array(left), Array(right)) => todo!(), // array/array\r\n           (Array(array), Scalar(divisor)) => todo!(), // array/scalar\r\n           _ => todo!(),\r\n       }\r\n   }\r\n   ```\r\n   \r\n   Test code:\r\n   ```rust\r\n   fn test_datum_divide() {\r\n       let array1 = Int32Array::from(vec![15, 15, 8, 1, 9]);\r\n       let array2 = Int32Array::from(vec![5, 6, 8, 9, 1]);\r\n       let scalar = Some(8i32);\r\n   \r\n       let a_over_a = math_divide(&array1, &array2).unwrap(); // works\r\n       let a_over_s = math_divide(&array1, scalar).unwrap(); // also works\r\n   }\r\n   ```\r\n   \r\n   @jorgecarleitao I'm aware this doesn't address the second half of your comment. I'm just exploring this idea for the current version of arrow.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-12T13:54:07.522+0000",
                    "updated": "2021-02-12T13:54:07.522+0000",
                    "started": "2021-02-12T13:54:07.522+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551818",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/551819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abreis edited a comment on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-778208765\n\n\n   > @abreis , I am not convinced that that is sufficient, unfortunately, because it excludes all types that are not Numeric (i.e. all dates and times for primitives, as well as all other logical types).\r\n   > \r\n   > We could of course offer a `DatumTemporal` and a `DatumList` and so one and so forth, but IMO that is introducing more complexity, as we now start having `struct`s for all kinds of logical types.\r\n   \r\n   I agree. I just realized that `ArrowPrimitiveType` exists though, so Datum can be generic over that instead.\r\n   \r\n   Here is a more fleshed-out mock of a Datum type. The signature of `math_divide` enforces a consistent `T` over array/array and array/scalar combinations, and the method's output.\r\n   \r\n   Base type:\r\n   ```rust\r\n   #[derive(Debug)]\r\n   pub enum Datum<'a, T>\r\n   where\r\n       T: ArrowPrimitiveType,\r\n   {\r\n       Array(&'a PrimitiveArray<T>),\r\n       Scalar(Option<T::Native>),\r\n   }\r\n   ```\r\n   \r\n   `From` impls for both arrays and nullable scalars:\r\n   ```rust\r\n   impl<'a, T> From<&'a PrimitiveArray<T>> for Datum<'a, T>\r\n   where\r\n       T: ArrowPrimitiveType,\r\n   {\r\n       fn from(array: &'a PrimitiveArray<T>) -> Self {\r\n           Datum::Array(array)\r\n       }\r\n   }\r\n   \r\n   impl<'a, T> From<Option<T::Native>> for Datum<'a, T>\r\n   where\r\n       T: ArrowPrimitiveType,\r\n   {\r\n       fn from(scalar: Option<T::Native>) -> Self {\r\n           Datum::Scalar(scalar)\r\n       }\r\n   }\r\n   ```\r\n   \r\n   A (user-facing) method for math division:\r\n   ```rust\r\n   pub fn math_divide<'a1, 'a2, T, DL, DR>(\r\n       left: DL,\r\n       right: DR,\r\n   ) -> Result<PrimitiveArray<T>>\r\n   where\r\n       T: ArrowNumericType,\r\n       T::Native: Div<Output = T::Native> + Zero,\r\n       DL: Into<Datum<'a1, T>>, // left and right may have different lifetimes\r\n       DR: Into<Datum<'a2, T>>, // but `T` must be the same\r\n   {\r\n       use Datum::*;\r\n       match (left.into(), right.into()) {\r\n           (Array(left), Array(right)) => todo!(), // array/array\r\n           (Array(array), Scalar(divisor)) => todo!(), // array/scalar\r\n           _ => todo!(),\r\n       }\r\n   }\r\n   ```\r\n   \r\n   Test code:\r\n   ```rust\r\n   fn test_datum_divide() {\r\n       let array1 = Int32Array::from(vec![15, 15, 8, 1, 9]);\r\n       let array2 = Int32Array::from(vec![5, 6, 8, 9, 1]);\r\n       let scalar = Some(8i32);\r\n   \r\n       let a_over_a = math_divide(&array1, &array2).unwrap(); // works\r\n       let a_over_s = math_divide(&array1, scalar).unwrap(); // also works\r\n   }\r\n   ```\r\n   \r\n   @jorgecarleitao I'm aware this doesn't address the second half of your comment. I'm just exploring this idea for the current version of arrow.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-12T13:54:51.392+0000",
                    "updated": "2021-02-12T13:54:51.392+0000",
                    "started": "2021-02-12T13:54:51.392+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551819",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/552657",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abreis commented on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-779404775\n\n\n   Given that `compute::kernels::comparison` already makes use liberal use of `<op>_scalar` methods, I'd like to propose the following as a way forward for this PR:\r\n   \r\n   1. Merge `divide_scalar` as-is, and other eventual PRs for arithmetic scalar ops (`add_scalar`, etcetera).\r\n   2. Propose the use of `Datum` in a separate PR as a way to generalize kernel inputs for arrays and scalars.\r\n   3. If accepted, make every `<op>_scalar` method in the codebase simply delegate to its (now `Datum`-using) base method.\r\n   4. Mark the `_scalar` methods with `#[deprecated]`. Remove them altogether in future major release.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-15T19:10:45.436+0000",
                    "updated": "2021-02-15T19:10:45.436+0000",
                    "started": "2021-02-15T19:10:45.436+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "552657",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/552811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#discussion_r576544330\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/arithmetic.rs\n##########\n@@ -709,6 +906,18 @@ mod tests {\n         assert_eq!(9, c.value(4));\n     }\n \n+    #[test]\n+    fn test_primitive_array_divide_scalar() {\n+        let a = Int32Array::from(vec![15, 14, 9, 8, 1]);\n+        let b = 3;\n+        let c = divide_scalar(&a, b).unwrap();\n+        assert_eq!(5, c.value(0));\n+        assert_eq!(4, c.value(1));\n+        assert_eq!(3, c.value(2));\n+        assert_eq!(2, c.value(3));\n+        assert_eq!(0, c.value(4));\n+    }\n+\n\nReview comment:\n       What do you think about adding a test with nulls? E.g.\r\n   \r\n   ```\r\n   let a = Int32Array::from(vec![Some(15), None, Some(9), 2, None]);\r\n   ```\n\n##########\nFile path: rust/arrow/src/compute/kernels/arithmetic.rs\n##########\n@@ -709,6 +906,18 @@ mod tests {\n         assert_eq!(9, c.value(4));\n     }\n \n+    #[test]\n+    fn test_primitive_array_divide_scalar() {\n+        let a = Int32Array::from(vec![15, 14, 9, 8, 1]);\n+        let b = 3;\n+        let c = divide_scalar(&a, b).unwrap();\n+        assert_eq!(5, c.value(0));\n+        assert_eq!(4, c.value(1));\n+        assert_eq!(3, c.value(2));\n+        assert_eq!(2, c.value(3));\n+        assert_eq!(0, c.value(4));\n\nReview comment:\n       ```\r\n   let expected = Int32Array::from(vec![5, 4, 3, 2, 1]);\r\n   assert_eq!(c, expected);\r\n   ```\r\n   so that we check all parts of `ArrayData`?\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-16T04:40:58.198+0000",
                    "updated": "2021-02-16T04:40:58.198+0000",
                    "started": "2021-02-16T04:40:58.198+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "552811",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/552918",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "abreis commented on pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#issuecomment-779802841\n\n\n   > I left two small suggestions. This looks really good :)\r\n   > \r\n   > Also, note that there is a potential optimization for all SIMD here where we create an un-initialized buffer and write to it directly from SIMD (instead of creating a zeroed buffer and writing to it)\r\n   \r\n   Thanks!\r\n   \r\n   I went to try and implement this, but it looks like it's already optimized as you suggest. `simd_` methods do:\r\n   ```rust\r\n   let mut result = MutableBuffer::new(buffer_size).with_bitset(buffer_size, false);\r\n   ```\r\n   to prepare the return buffer, which uses `memory::allocate_aligned` internally, which does not initialize the newly-allocated memory region.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-16T12:22:54.402+0000",
                    "updated": "2021-02-16T12:22:54.402+0000",
                    "started": "2021-02-16T12:22:54.402+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "552918",
                    "issueId": "13357736"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/worklog/553364",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9454:\nURL: https://github.com/apache/arrow/pull/9454#discussion_r577309425\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/arithmetic.rs\n##########\n@@ -256,6 +256,49 @@ where\n     Ok(PrimitiveArray::<T>::from(Arc::new(data)))\n }\n \n+/// Scalar-divisor version of `math_divide`.\n+fn math_divide_scalar<T>(\n+    array: &PrimitiveArray<T>,\n+    divisor: T::Native,\n+) -> Result<PrimitiveArray<T>>\n+where\n+    T: ArrowNumericType,\n+    T::Native: Div<Output = T::Native> + Zero,\n+{\n+    if divisor.is_zero() {\n+        return Err(ArrowError::DivideByZero);\n+    }\n+\n+    let null_bit_buffer = array.data_ref().null_buffer().cloned();\n+\n+    let buffer = if let Some(b) = &null_bit_buffer {\n+        let values = array.values().iter().enumerate().map(|(i, value)| {\n+            let is_valid = unsafe { bit_util::get_bit_raw(b.as_ptr(), i) };\n+            if is_valid {\n+                *value / divisor\n+            } else {\n+                T::default_value()\n+            }\n+        });\n+        unsafe { Buffer::from_trusted_len_iter(values) }\n+    } else {\n+        // no value is null\n+        let values = array.values().iter().map(|value| *value / divisor);\n+        unsafe { Buffer::from_trusted_len_iter(values) }\n+    };\n\nReview comment:\n       fwiw, I think that this can be simplified to \r\n   \r\n   ```rust\r\n           let values = array.values().iter().map(|value| *value / divisor);\r\n           unsafe { Buffer::from_trusted_len_iter(values) }\r\n   ```\r\n   \r\n   This is because since `x / y` is infalible for `y != 0`, even with nulls the operation can proceed without caring about then, and the null bitmap handles them. This should further improve performance on arrays with nulls, as there is no branching and the compiler will likely make it as performant as the non-nulls case.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-17T04:02:08.177+0000",
                    "updated": "2021-02-17T04:02:08.177+0000",
                    "started": "2021-02-17T04:02:08.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553364",
                    "issueId": "13357736"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 19800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@22157b49[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f27e912[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c3d1c6b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4c421187[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3274cb20[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3850694a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@cbaf46f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@50a81256[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4411eea8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7fb0c559[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24724f4c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@34d8d336[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19800,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Feb 21 10:59:54 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-02-21T10:59:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11572/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-02-09T11:13:22.000+0000",
        "updated": "2021-02-21T10:59:54.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Add a kernel for division by single scalar",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357736/comment/17287916",
                    "id": "17287916",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9454\n[https://github.com/apache/arrow/pull/9454]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-02-21T10:59:54.949+0000",
                    "updated": "2021-02-21T10:59:54.949+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0niy0:",
        "customfield_12314139": null
    }
}