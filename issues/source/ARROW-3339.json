{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13187813",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187813",
    "key": "ARROW-3339",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3339/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187813/worklog/149195",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois opened a new pull request #2654: ARROW-3339: [R] Support for character vectors\nURL: https://github.com/apache/arrow/pull/2654\n \n \n   More tests, but here is the gist: \r\n   \r\n   ```r\r\n   > a <- array(c(\"itsy\", \"bitsy\", \"spider\"))\r\n   > a\r\n   arrow::Array <0x11447cbc0> \r\n   [\r\n     \"itsy\",\r\n     \"bitsy\",\r\n     \"spider\"\r\n   ] \r\n   > a$as_vector()\r\n   [1] \"itsy\"   \"bitsy\"  \"spider\"\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-28T15:07:18.292+0000",
                    "updated": "2018-09-28T15:07:18.292+0000",
                    "started": "2018-09-28T15:07:18.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149195",
                    "issueId": "13187813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187813/worklog/149593",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #2654: ARROW-3339: [R] Support for character vectors\nURL: https://github.com/apache/arrow/pull/2654\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/r/src/array.cpp b/r/src/array.cpp\nindex 0de2d80c36..e11e1f7d56 100644\n--- a/r/src/array.cpp\n+++ b/r/src/array.cpp\n@@ -24,7 +24,7 @@ namespace arrow {\n namespace r {\n \n template <int RTYPE, typename Vec = Rcpp::Vector<RTYPE>>\n-class SimpleRBuffer : public arrow::Buffer {\n+class SimpleRBuffer : public Buffer {\n  public:\n   SimpleRBuffer(Vec vec)\n       : Buffer(reinterpret_cast<const uint8_t*>(vec.begin()),\n@@ -36,22 +36,21 @@ class SimpleRBuffer : public arrow::Buffer {\n   Vec vec_;\n };\n \n-template <int RTYPE, typename Type, typename ArrayType>\n-std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n+template <int RTYPE, typename Type>\n+std::shared_ptr<Array> SimpleArray(SEXP x) {\n   Rcpp::Vector<RTYPE> vec(x);\n-  std::vector<std::shared_ptr<arrow::Buffer>> buffers{\n+  auto n = vec.size();\n+  std::vector<std::shared_ptr<Buffer>> buffers{\n       nullptr, std::make_shared<SimpleRBuffer<RTYPE>>(vec)};\n \n   int null_count = 0;\n   if (RTYPE != RAWSXP) {\n-    std::shared_ptr<arrow::Buffer> null_bitmap;\n+    std::shared_ptr<Buffer> null_bitmap;\n \n     auto first_na = std::find_if(vec.begin(), vec.end(), Rcpp::Vector<RTYPE>::is_na);\n     if (first_na < vec.end()) {\n-      R_ERROR_NOT_OK(arrow::AllocateBuffer(vec.size(), &null_bitmap));\n-      auto null_bitmap_data = null_bitmap->mutable_data();\n-      arrow::internal::FirstTimeBitmapWriter bitmap_writer(null_bitmap_data, 0,\n-                                                           vec.size());\n+      R_ERROR_NOT_OK(AllocateBuffer(ceil((double)n / 8), &null_bitmap));\n+      internal::FirstTimeBitmapWriter bitmap_writer(null_bitmap->mutable_data(), 0, n);\n \n       // first loop to clear all the bits before the first NA\n       auto j = std::distance(vec.begin(), first_na);\n@@ -61,7 +60,7 @@ std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n       }\n \n       // then finish\n-      for (; i < vec.size(); i++, bitmap_writer.Next()) {\n+      for (; i < n; i++, bitmap_writer.Next()) {\n         if (Rcpp::Vector<RTYPE>::is_na(vec[i])) {\n           bitmap_writer.Clear();\n           null_count++;\n@@ -80,18 +79,17 @@ std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n   );\n \n   // return the right Array class\n-  return std::make_shared<ArrayType>(data);\n+  return std::make_shared<typename TypeTraits<Type>::ArrayType>(data);\n }\n \n-std::shared_ptr<arrow::Array> MakeBooleanArray(\n-    Rcpp::Vector<LGLSXP, Rcpp::NoProtectStorage> vec) {\n+std::shared_ptr<arrow::Array> MakeBooleanArray(LogicalVector_ vec) {\n   R_xlen_t n = vec.size();\n \n   // allocate a buffer for the data\n-  std::shared_ptr<arrow::Buffer> data_bitmap;\n-  R_ERROR_NOT_OK(arrow::AllocateBuffer(ceil(n / 8), &data_bitmap));\n+  std::shared_ptr<Buffer> data_bitmap;\n+  R_ERROR_NOT_OK(AllocateBuffer(ceil((double)n / 8), &data_bitmap));\n   auto data_bitmap_data = data_bitmap->mutable_data();\n-  arrow::internal::FirstTimeBitmapWriter bitmap_writer(data_bitmap_data, 0, n);\n+  internal::FirstTimeBitmapWriter bitmap_writer(data_bitmap_data, 0, n);\n   R_xlen_t null_count = 0;\n \n   // loop until the first no null\n@@ -110,9 +108,9 @@ std::shared_ptr<arrow::Array> MakeBooleanArray(\n   if (i < n) {\n     // there has been a null before the end, so we need\n     // to collect that information in a null bitmap\n-    R_ERROR_NOT_OK(arrow::AllocateBuffer(ceil(n / 8), &null_bitmap));\n+    R_ERROR_NOT_OK(AllocateBuffer(ceil((double)n / 8), &null_bitmap));\n     auto null_bitmap_data = null_bitmap->mutable_data();\n-    arrow::internal::FirstTimeBitmapWriter null_bitmap_writer(null_bitmap_data, 0, n);\n+    internal::FirstTimeBitmapWriter null_bitmap_writer(null_bitmap_data, 0, n);\n \n     // catch up on the initial `i` bits\n     for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n@@ -136,13 +134,80 @@ std::shared_ptr<arrow::Array> MakeBooleanArray(\n   }\n   bitmap_writer.Finish();\n \n-  auto data = ArrayData::Make(std::make_shared<BooleanType>(), n,\n-                              {std::move(null_bitmap), std::move(data_bitmap)},\n-                              null_count, 0 /*offset*/\n-  );\n+  auto data =\n+      ArrayData::Make(boolean(), n, {std::move(null_bitmap), std::move(data_bitmap)},\n+                      null_count, 0 /*offset*/\n+      );\n \n   // return the right Array class\n-  return std::make_shared<BooleanArray>(data);\n+  return MakeArray(data);\n+}\n+\n+std::shared_ptr<Array> MakeStringArray(StringVector_ vec) {\n+  R_xlen_t n = vec.size();\n+\n+  std::shared_ptr<Buffer> null_buffer(nullptr);\n+  std::shared_ptr<Buffer> offset_buffer;\n+  R_ERROR_NOT_OK(AllocateBuffer((n + 1) * sizeof(int32_t), &offset_buffer));\n+\n+  R_xlen_t i = 0;\n+  int current_offset = 0;\n+  int64_t null_count = 0;\n+  auto p_offset = reinterpret_cast<int32_t*>(offset_buffer->mutable_data());\n+  *p_offset = 0;\n+  for (++p_offset; i < n; i++, ++p_offset) {\n+    SEXP s = STRING_ELT(vec, i);\n+    if (s == NA_STRING) {\n+      // break as we are going to need a null_bitmap buffer\n+      break;\n+    }\n+\n+    *p_offset = current_offset += LENGTH(s);\n+  }\n+\n+  if (i < n) {\n+    R_ERROR_NOT_OK(AllocateBuffer(ceil((double)n / 8), &null_buffer));\n+    internal::FirstTimeBitmapWriter null_bitmap_writer(null_buffer->mutable_data(), 0, n);\n+\n+    // catch up\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n+\n+    // resume offset filling\n+    for (; i < n; i++, ++p_offset, null_bitmap_writer.Next()) {\n+      SEXP s = STRING_ELT(vec, i);\n+      if (s == NA_STRING) {\n+        null_bitmap_writer.Clear();\n+        *p_offset = current_offset;\n+        null_count++;\n+      } else {\n+        null_bitmap_writer.Set();\n+        *p_offset = current_offset += LENGTH(s);\n+      }\n+    }\n+\n+    null_bitmap_writer.Finish();\n+  }\n+\n+  // ----- data buffer\n+  std::shared_ptr<Buffer> value_buffer;\n+  R_ERROR_NOT_OK(AllocateBuffer(current_offset, &value_buffer));\n+  p_offset = reinterpret_cast<int32_t*>(offset_buffer->mutable_data());\n+  auto p_data = reinterpret_cast<char*>(value_buffer->mutable_data());\n+\n+  for (R_xlen_t i = 0; i < n; i++) {\n+    SEXP s = STRING_ELT(vec, i);\n+    if (s != NA_STRING) {\n+      auto ni = LENGTH(s);\n+      std::copy_n(CHAR(s), ni, p_data);\n+      p_data += ni;\n+    }\n+  }\n+\n+  auto data = ArrayData::Make(arrow::utf8(), n,\n+                              {null_buffer, offset_buffer, value_buffer}, null_count, 0);\n+  return MakeArray(data);\n }\n \n }  // namespace r\n@@ -157,15 +222,14 @@ std::shared_ptr<arrow::Array> Array__from_vector(SEXP x) {\n       if (Rf_isFactor(x)) {\n         break;\n       }\n-      return arrow::r::SimpleArray<INTSXP, arrow::Int32Type,\n-                                   arrow::NumericArray<arrow::Int32Type>>(x);\n+      return arrow::r::SimpleArray<INTSXP, arrow::Int32Type>(x);\n     case REALSXP:\n       // TODO: Dates, ...\n-      return arrow::r::SimpleArray<REALSXP, arrow::DoubleType,\n-                                   arrow::NumericArray<arrow::DoubleType>>(x);\n+      return arrow::r::SimpleArray<REALSXP, arrow::DoubleType>(x);\n     case RAWSXP:\n-      return arrow::r::SimpleArray<RAWSXP, arrow::Int8Type,\n-                                   arrow::NumericArray<arrow::Int8Type>>(x);\n+      return arrow::r::SimpleArray<RAWSXP, arrow::Int8Type>(x);\n+    case STRSXP:\n+      return arrow::r::MakeStringArray(x);\n     default:\n       break;\n   }\n@@ -223,6 +287,42 @@ inline SEXP BooleanArray_to_Vector(const std::shared_ptr<arrow::Array>& array) {\n   return vec;\n }\n \n+inline SEXP StringArray_to_Vector(const std::shared_ptr<arrow::Array>& array) {\n+  auto n = array->length();\n+  Rcpp::CharacterVector res(n);\n+\n+  const auto& buffers = array->data()->buffers;\n+\n+  auto p_offset = reinterpret_cast<const int32_t*>(buffers[1]->data()) + array->offset();\n+  auto p_data = reinterpret_cast<const char*>(buffers[2]->data()) + *p_offset;\n+\n+  if (array->null_count()) {\n+    // need to watch for nulls\n+    arrow::internal::BitmapReader null_reader(array->null_bitmap_data(), array->offset(),\n+                                              n);\n+    for (int i = 0; i < n; i++, null_reader.Next()) {\n+      if (null_reader.IsSet()) {\n+        auto diff = p_offset[i + 1] - p_offset[i];\n+        SET_STRING_ELT(res, i, Rf_mkCharLenCE(p_data, diff, CE_UTF8));\n+        p_data += diff;\n+      } else {\n+        SET_STRING_ELT(res, i, NA_STRING);\n+      }\n+    }\n+\n+  } else {\n+    // no need to check for nulls\n+    // TODO: altrep mark this as no na\n+    for (int i = 0; i < n; i++) {\n+      auto diff = p_offset[i + 1] - p_offset[i];\n+      SET_STRING_ELT(res, i, Rf_mkCharLenCE(p_data, diff, CE_UTF8));\n+      p_data += diff;\n+    }\n+  }\n+\n+  return res;\n+}\n+\n // [[Rcpp::export]]\n SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array) {\n   switch (array->type_id()) {\n@@ -234,6 +334,8 @@ SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array) {\n       return simple_Array_to_Vector<INTSXP>(array);\n     case Type::DOUBLE:\n       return simple_Array_to_Vector<REALSXP>(array);\n+    case Type::STRING:\n+      return StringArray_to_Vector(array);\n     default:\n       break;\n   }\ndiff --git a/r/src/arrow_types.h b/r/src/arrow_types.h\nindex ad49c90a5f..e208d0e98d 100644\n--- a/r/src/arrow_types.h\n+++ b/r/src/arrow_types.h\n@@ -100,6 +100,11 @@ inline SEXP wrap_dispatch(const T& x, Rcpp::traits::wrap_type_shared_ptr_tag) {\n \n }  // namespace Rcpp\n \n+namespace Rcpp {\n+using LogicalVector_ = Rcpp::Vector<LGLSXP, Rcpp::NoProtectStorage>;\n+using StringVector_ = Rcpp::Vector<STRSXP, Rcpp::NoProtectStorage>;\n+}  // namespace Rcpp\n+\n SEXP ChunkedArray__as_vector(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);\n SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array);\n std::shared_ptr<arrow::Array> Array__from_vector(SEXP x);\ndiff --git a/r/tests/testthat/test-Array.R b/r/tests/testthat/test-Array.R\nindex 78b641ad08..c063a07ce9 100644\n--- a/r/tests/testthat/test-Array.R\n+++ b/r/tests/testthat/test-Array.R\n@@ -77,3 +77,22 @@ test_that(\"Array supports logical vectors (ARROW-3341)\", {\n   expect_identical(x, arr_lgl$as_vector())\n })\n \n+test_that(\"Array supports character vectors (ARROW-3339)\", {\n+  # with NA\n+  x <- c(\"itsy\", NA, \"spider\")\n+  arr_chr <- array(x)\n+  expect_equal(arr_chr$length(), 3L)\n+  expect_identical(arr_chr$as_vector(), x)\n+  expect_true(arr_chr$IsValid(0))\n+  expect_true(arr_chr$IsNull(1))\n+  expect_true(arr_chr$IsValid(2))\n+\n+  sl <- arr_chr$Slice(1)\n+  expect_equal(sl$as_vector(), x[2:3])\n+\n+  # without NA\n+  x <- c(\"itsy\", \"bitsy\", \"spider\")\n+  arr_chr <- array(x)\n+  expect_equal(arr_chr$length(), 3L)\n+  expect_identical(arr_chr$as_vector(), x)\n+})\ndiff --git a/r/tests/testthat/test-RecordBatch.R b/r/tests/testthat/test-RecordBatch.R\nindex 67c010cbf7..75c59aabb3 100644\n--- a/r/tests/testthat/test-RecordBatch.R\n+++ b/r/tests/testthat/test-RecordBatch.R\n@@ -20,20 +20,23 @@ context(\"arrow::RecordBatch\")\n test_that(\"RecordBatch\", {\n   tbl <- tibble::tibble(\n     int = 1:10, dbl = as.numeric(1:10),\n-    lgl = sample(c(TRUE, FALSE, NA), 10, replace = TRUE)\n+    lgl = sample(c(TRUE, FALSE, NA), 10, replace = TRUE),\n+    chr = letters[1:10]\n   )\n   batch <- record_batch(tbl)\n \n   expect_true(batch == batch)\n   expect_equal(\n     batch$schema(),\n-    schema(int = int32(), dbl = float64(), lgl = boolean())\n+    schema(int = int32(), dbl = float64(), lgl = boolean(), chr = utf8())\n   )\n-  expect_equal(batch$num_columns(), 3L)\n+  expect_equal(batch$num_columns(), 4L)\n   expect_equal(batch$num_rows(), 10L)\n   expect_equal(batch$column_name(0), \"int\")\n   expect_equal(batch$column_name(1), \"dbl\")\n-  expect_equal(names(batch), c(\"int\", \"dbl\", \"lgl\"))\n+  expect_equal(batch$column_name(2), \"lgl\")\n+  expect_equal(batch$column_name(3), \"chr\")\n+  expect_equal(names(batch), c(\"int\", \"dbl\", \"lgl\", \"chr\"))\n \n   col_int <- batch$column(0)\n   expect_true(inherits(col_int, 'arrow::Array'))\n@@ -50,18 +53,22 @@ test_that(\"RecordBatch\", {\n   expect_equal(col_lgl$as_vector(), tbl$lgl)\n   expect_equal(col_lgl$type(), boolean())\n \n+  col_chr <- batch$column(3)\n+  expect_true(inherits(col_chr, 'arrow::Array'))\n+  expect_equal(col_chr$as_vector(), tbl$chr)\n+  expect_equal(col_chr$type(), utf8())\n+\n   batch2 <- batch$RemoveColumn(0)\n   expect_equal(\n     batch2$schema(),\n-    schema(dbl = float64(), lgl = boolean())\n+    schema(dbl = float64(), lgl = boolean(), chr = utf8())\n   )\n   expect_equal(batch2$column(0), batch$column(1))\n+  expect_identical(as_tibble(batch2), tbl[,-1])\n \n   batch3 <- batch$Slice(5)\n-  expect_equal(batch3$num_rows(), 5)\n-  expect_equal(batch3$column(0)$as_vector(), 6:10)\n+  expect_identical(as_tibble(batch3), tbl[6:10,])\n \n   batch4 <- batch$Slice(5, 2)\n-  expect_equal(batch4$num_rows(), 2)\n-  expect_equal(batch4$column(0)$as_vector(), 6:7)\n+  expect_identical(as_tibble(batch4), tbl[6:7,])\n })\ndiff --git a/r/tests/testthat/test-chunkedarray.R b/r/tests/testthat/test-chunkedarray.R\nindex 0addfb2054..b9a5c18d39 100644\n--- a/r/tests/testthat/test-chunkedarray.R\n+++ b/r/tests/testthat/test-chunkedarray.R\n@@ -100,3 +100,18 @@ test_that(\"ChunkedArray supports logical vectors (ARROW-3341)\", {\n   expect_identical(data[[3]], chunks[[3]]$as_vector())\n })\n \n+test_that(\"ChunkedArray supports character vectors (ARROW-3339)\", {\n+  data <- list(\n+    c(\"itsy\", NA, \"spider\"),\n+    c(\"Climbed\", \"up\", \"the\", \"water\", \"spout\"),\n+    c(\"Down\", \"came\", \"the\", \"rain\"),\n+    \"And washed the spider out. \"\n+  )\n+  arr_chr <- chunked_array(!!!data)\n+  expect_equal(arr_chr$length(), length(unlist(data)))\n+  expect_equal(arr_chr$null_count(), 1L)\n+\n+  chunks <- arr_chr$chunks()\n+  expect_equal(data, purrr::map(chunks, ~.$as_vector()))\n+})\n+\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-29T09:18:09.405+0000",
                    "updated": "2018-09-29T09:18:09.405+0000",
                    "started": "2018-09-29T09:18:09.404+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149593",
                    "issueId": "13187813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187813/worklog/149594",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2654: ARROW-3339: [R] Support for character vectors\nURL: https://github.com/apache/arrow/pull/2654#discussion_r221422244\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -80,18 +79,17 @@ std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n   );\n \n   // return the right Array class\n-  return std::make_shared<ArrayType>(data);\n+  return std::make_shared<typename TypeTraits<Type>::ArrayType>(data);\n }\n \n-std::shared_ptr<arrow::Array> MakeBooleanArray(\n-    Rcpp::Vector<LGLSXP, Rcpp::NoProtectStorage> vec) {\n+std::shared_ptr<arrow::Array> MakeBooleanArray(LogicalVector_ vec) {\n   R_xlen_t n = vec.size();\n \n   // allocate a buffer for the data\n-  std::shared_ptr<arrow::Buffer> data_bitmap;\n-  R_ERROR_NOT_OK(arrow::AllocateBuffer(ceil(n / 8), &data_bitmap));\n+  std::shared_ptr<Buffer> data_bitmap;\n+  R_ERROR_NOT_OK(AllocateBuffer(ceil((double)n / 8), &data_bitmap));\n \n Review comment:\n   C-style cast. We should also run cpplint on these files\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-29T09:22:14.417+0000",
                    "updated": "2018-09-29T09:22:14.417+0000",
                    "started": "2018-09-29T09:22:14.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149594",
                    "issueId": "13187813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187813/worklog/149595",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2654: ARROW-3339: [R] Support for character vectors\nURL: https://github.com/apache/arrow/pull/2654#discussion_r221422273\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -223,6 +287,42 @@ inline SEXP BooleanArray_to_Vector(const std::shared_ptr<arrow::Array>& array) {\n   return vec;\n }\n \n+inline SEXP StringArray_to_Vector(const std::shared_ptr<arrow::Array>& array) {\n+  auto n = array->length();\n+  Rcpp::CharacterVector res(n);\n+\n+  const auto& buffers = array->data()->buffers;\n+\n+  auto p_offset = reinterpret_cast<const int32_t*>(buffers[1]->data()) + array->offset();\n+  auto p_data = reinterpret_cast<const char*>(buffers[2]->data()) + *p_offset;\n \n Review comment:\n   I think it is valid for `buffers[2]` to be null here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-29T09:22:14.550+0000",
                    "updated": "2018-09-29T09:22:14.550+0000",
                    "started": "2018-09-29T09:22:14.549+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149595",
                    "issueId": "13187813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187813/worklog/149599",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2654: ARROW-3339: [R] Support for character vectors\nURL: https://github.com/apache/arrow/pull/2654#issuecomment-425630901\n \n \n   See \r\n   \r\n   * https://issues.apache.org/jira/browse/ARROW-3361\r\n   * https://issues.apache.org/jira/browse/ARROW-3362\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-29T09:25:18.218+0000",
                    "updated": "2018-09-29T09:25:18.218+0000",
                    "started": "2018-09-29T09:25:18.217+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149599",
                    "issueId": "13187813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187813/worklog/149602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #2654: ARROW-3339: [R] Support for character vectors\nURL: https://github.com/apache/arrow/pull/2654#discussion_r221422515\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -80,18 +79,17 @@ std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n   );\n \n   // return the right Array class\n-  return std::make_shared<ArrayType>(data);\n+  return std::make_shared<typename TypeTraits<Type>::ArrayType>(data);\n }\n \n-std::shared_ptr<arrow::Array> MakeBooleanArray(\n-    Rcpp::Vector<LGLSXP, Rcpp::NoProtectStorage> vec) {\n+std::shared_ptr<arrow::Array> MakeBooleanArray(LogicalVector_ vec) {\n   R_xlen_t n = vec.size();\n \n   // allocate a buffer for the data\n-  std::shared_ptr<arrow::Buffer> data_bitmap;\n-  R_ERROR_NOT_OK(arrow::AllocateBuffer(ceil(n / 8), &data_bitmap));\n+  std::shared_ptr<Buffer> data_bitmap;\n+  R_ERROR_NOT_OK(AllocateBuffer(ceil((double)n / 8), &data_bitmap));\n \n Review comment:\n   Is there some utility to get the number of bytes are needed for n bits ?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-29T09:33:12.745+0000",
                    "updated": "2018-09-29T09:33:12.745+0000",
                    "started": "2018-09-29T09:33:12.743+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149602",
                    "issueId": "13187813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187813/worklog/149603",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2654: ARROW-3339: [R] Support for character vectors\nURL: https://github.com/apache/arrow/pull/2654#discussion_r221422540\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -80,18 +79,17 @@ std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n   );\n \n   // return the right Array class\n-  return std::make_shared<ArrayType>(data);\n+  return std::make_shared<typename TypeTraits<Type>::ArrayType>(data);\n }\n \n-std::shared_ptr<arrow::Array> MakeBooleanArray(\n-    Rcpp::Vector<LGLSXP, Rcpp::NoProtectStorage> vec) {\n+std::shared_ptr<arrow::Array> MakeBooleanArray(LogicalVector_ vec) {\n   R_xlen_t n = vec.size();\n \n   // allocate a buffer for the data\n-  std::shared_ptr<arrow::Buffer> data_bitmap;\n-  R_ERROR_NOT_OK(arrow::AllocateBuffer(ceil(n / 8), &data_bitmap));\n+  std::shared_ptr<Buffer> data_bitmap;\n+  R_ERROR_NOT_OK(AllocateBuffer(ceil((double)n / 8), &data_bitmap));\n \n Review comment:\n   `arrow::BitUtil::BytesForBits`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-29T09:34:43.480+0000",
                    "updated": "2018-09-29T09:34:43.480+0000",
                    "started": "2018-09-29T09:34:43.479+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149603",
                    "issueId": "13187813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187813/worklog/149604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #2654: ARROW-3339: [R] Support for character vectors\nURL: https://github.com/apache/arrow/pull/2654#discussion_r221422544\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -223,6 +287,42 @@ inline SEXP BooleanArray_to_Vector(const std::shared_ptr<arrow::Array>& array) {\n   return vec;\n }\n \n+inline SEXP StringArray_to_Vector(const std::shared_ptr<arrow::Array>& array) {\n+  auto n = array->length();\n+  Rcpp::CharacterVector res(n);\n+\n+  const auto& buffers = array->data()->buffers;\n+\n+  auto p_offset = reinterpret_cast<const int32_t*>(buffers[1]->data()) + array->offset();\n+  auto p_data = reinterpret_cast<const char*>(buffers[2]->data()) + *p_offset;\n \n Review comment:\n   Is this only happening when length() == 0 ? Are there any examples (tests perhaps) of what to do then ? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-29T09:35:00.312+0000",
                    "updated": "2018-09-29T09:35:00.312+0000",
                    "started": "2018-09-29T09:35:00.312+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149604",
                    "issueId": "13187813"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187813/worklog/149608",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2654: ARROW-3339: [R] Support for character vectors\nURL: https://github.com/apache/arrow/pull/2654#discussion_r221422824\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -223,6 +287,42 @@ inline SEXP BooleanArray_to_Vector(const std::shared_ptr<arrow::Array>& array) {\n   return vec;\n }\n \n+inline SEXP StringArray_to_Vector(const std::shared_ptr<arrow::Array>& array) {\n+  auto n = array->length();\n+  Rcpp::CharacterVector res(n);\n+\n+  const auto& buffers = array->data()->buffers;\n+\n+  auto p_offset = reinterpret_cast<const int32_t*>(buffers[1]->data()) + array->offset();\n+  auto p_data = reinterpret_cast<const char*>(buffers[2]->data()) + *p_offset;\n \n Review comment:\n   It really depends. What you want is:\r\n   \r\n   ```\r\n   auto p_data = GetValues<const char*>(buffers[2], *p_offset);\r\n   ```\r\n   \r\n   We already have such a function https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/util-internal.h#L34. This needs to have a null check (so that is `buffer[i]` is null then it returns nullptr rather than invoking `->data()`)\r\n   \r\n   Whether this happens depends on the input data\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-29T09:45:20.940+0000",
                    "updated": "2018-09-29T09:45:20.940+0000",
                    "started": "2018-09-29T09:45:20.940+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149608",
                    "issueId": "13187813"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4dc2d8da[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79cc22e3[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2bd10c6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1a7ee148[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7601a6ba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3f93b495[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55c2b881[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@38db77d0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@43142207[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@610101ec[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21c7bbfd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@42c13de2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Sep 29 09:36:45 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-29T09:36:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3339/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-09-27T06:50:22.000+0000",
        "updated": "2018-09-29T09:45:20.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Support for character vectors",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187813/comment/16632911",
                    "id": "16632911",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 2654\n[https://github.com/apache/arrow/pull/2654]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-09-29T09:36:45.317+0000",
                    "updated": "2018-09-29T09:36:45.317+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yk07:",
        "customfield_12314139": null
    }
}