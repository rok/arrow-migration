{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13156878",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878",
    "key": "ARROW-2537",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334104",
                "id": "12334104",
                "name": "Ruby"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2537/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 22,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/97903",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990\n \n \n   Imported from:\r\n   \r\n   * https://github.com/red-data-tools/red-arrow\r\n   * https://github.com/red-data-tools/red-arrow-gpu\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-03T14:04:59.994+0000",
                    "updated": "2018-05-03T14:04:59.994+0000",
                    "started": "2018-05-03T14:04:59.994+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97903",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/97910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#discussion_r185823011\n \n \n\n ##########\n File path: ci/travis_detect_changes.py\n ##########\n @@ -127,7 +127,10 @@ def get_affected_topics(affected_files):\n         elif p in ('java', 'js'):\n             affected[p] = True\n             affected['integration'] = True\n-        elif p in ('c_glib', 'integration', 'python', 'site', 'rust'):\n+        elif p in ('c_glib'):\n+            affected[p] = True\n+            affected['ruby'] = True\n \n Review comment:\n   The Ruby wrapper binds to the C/Glib binaries?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-03T14:43:22.019+0000",
                    "updated": "2018-05-03T14:43:22.019+0000",
                    "started": "2018-05-03T14:43:22.019+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97910",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/98081",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#issuecomment-386469349\n \n \n   @kou, this is great, thank you! Since this is a large code import, we will want to go through the IP clearance process like with Go recently http://incubator.apache.org/ip-clearance/. This should not be too painful but will require a vote on the mailing list and then a lazy consensus clearance vote on general@incubator\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-03T23:45:03.221+0000",
                    "updated": "2018-05-03T23:45:03.221+0000",
                    "started": "2018-05-03T23:45:03.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "98081",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/98590",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#discussion_r186226180\n \n \n\n ##########\n File path: ci/travis_detect_changes.py\n ##########\n @@ -127,7 +127,10 @@ def get_affected_topics(affected_files):\n         elif p in ('java', 'js'):\n             affected[p] = True\n             affected['integration'] = True\n-        elif p in ('c_glib', 'integration', 'python', 'site', 'rust'):\n+        elif p in ('c_glib'):\n+            affected[p] = True\n+            affected['ruby'] = True\n \n Review comment:\n   Yes.\r\n   It uses Apache Arrow C++ through Apache Arrow GLib.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-04T21:29:15.148+0000",
                    "updated": "2018-05-04T21:29:15.148+0000",
                    "started": "2018-05-04T21:29:15.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "98590",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/98593",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#issuecomment-386741652\n \n \n   @wesm OK. I'll read the document.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-04T21:36:48.708+0000",
                    "updated": "2018-05-04T21:36:48.708+0000",
                    "started": "2018-05-04T21:36:48.707+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "98593",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/100862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#issuecomment-388199184\n \n \n   @wesm I read the document. I think that I don't have \"incubator karma\". Can you help me to process this?\r\n   \r\n   > 1. IP Clearance processing must be executed either by an Officer or a Member of the ASF. If you are not an Officer or a Member, please contact your project chair who will find an appropriate volunteer. Incubator karma is also required. Please request karma from the incubator pmc if you do not have it. \r\n   \r\n   I filled some fields:\r\n   \r\n   Title:\r\n   \r\n   Arrow Ruby Library Intellectual Property (IP) Clearance Status\r\n   \r\n   Description:\r\n   \r\n   The Arrow Ruby Library is a Ruby language bindings of the Apache Arrow columnar format\r\n   \r\n   Project info:\r\n   \r\n   he Apache Arrow PMC will be responsible for the code.\r\n   \r\n   It will be integrated into the Apache Arrow project, into a new Ruby area of the main Arrow source tree and build system.\r\n   \r\n   The following people will be managing this contribution:\r\n   \r\n     * TBD\r\n     * ...\r\n   \r\n   Completed tasks are shown by the completion date (YYYY-MM-dd).\r\n   \r\n   Identify the codebase:\r\n   \r\n   * Origin: https://github.com/red-data-tools/red-arrow as at commit ID abb0d3c0349c94189a700c25ab7ca97b17b09a6f and https://github.com/red-data-tools/red-arrow-gpu as at commit ID 29025cfdc92135fd81b42fbdc29497466a7454aa.\r\n   * Submitted to Apache Arrow as GitHub pull request https://github.com/apache/arrow/pull/1990\r\n   \r\n   Copyright:\r\n   \r\n   Identify name recorded for software grant: Ruby Bindings of Apache Arrow\r\n   \r\n   Verify distribution rights:\r\n   \r\n   Corporations and individuals holding existing distribution rights:\r\n   \r\n     * Kouhei Sutou\r\n   \r\n   DISCUSS: https://github.com/red-data-tools/red-arrow/commit/701386c16eec1aa72d3c349ae58a8ff94945862f is only a commit made by me. It just fix a URL. Is there a copyright of mikisou? If there is a copyright of him, I'll contact to him.\r\n   \r\n   Generally, the result of checking off these items will be a Software Grant, CLA, and Corporate CLA for ASF licensed code, which must have no dependencies upon items whose licenses that are incompatible with the Apache License.\r\n   \r\n   Organizational acceptance of responsibility for the project:\r\n   \r\n   Related votes:\r\n   \r\n     * TBD\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-10T22:00:19.194+0000",
                    "updated": "2018-05-10T22:00:19.194+0000",
                    "started": "2018-05-10T22:00:19.194+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "100862",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/101336",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#issuecomment-388503374\n \n \n   hi @kou -- yes, I will help you with the IP clearance. I'm an ASF Member now so I believe I have enough karma to make changes to the IP clearance files.\r\n   \r\n   First, we need to have a PMC vote to accept the Ruby bindings. I'm going to start this now on the mailing list. We can get the IP clearance page set up while that is running, so we can have the Incubator clearance vote next week and then merge the PR. \r\n   \r\n   Sorry for the delay; I have been traveling the last week and not available much on e-mail or GitHub\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-11T22:44:14.576+0000",
                    "updated": "2018-05-11T22:44:14.576+0000",
                    "started": "2018-05-11T22:44:14.576+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "101336",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/101406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#issuecomment-388535270\n \n \n   Thanks! I understand the schedule.\r\n   \r\n   > Sorry for the delay; I have been traveling the last week and not available much on e-mail or GitHub\r\n   \r\n   No problem. Thanks for your help.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-12T06:56:34.960+0000",
                    "updated": "2018-05-12T06:56:34.960+0000",
                    "started": "2018-05-12T06:56:34.959+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "101406",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/105768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#issuecomment-391889367\n \n \n   The IP clearance vote has passed. I'm going to rebase this and review, and merge on a green build if there are no problems\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-24T22:48:35.547+0000",
                    "updated": "2018-05-24T22:48:35.547+0000",
                    "started": "2018-05-24T22:48:35.547+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "105768",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/105780",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#issuecomment-391896521\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/1990?src=pr&el=h1) Report\n   > Merging [#1990](https://codecov.io/gh/apache/arrow/pull/1990?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/5c5e95a2d5c84487dff0c9ecbcf5b1ee6da5b929?src=pr&el=desc) will **not change** coverage.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/1990/graphs/tree.svg?src=pr&width=650&token=LpTCFbqVT1&height=150)](https://codecov.io/gh/apache/arrow/pull/1990?src=pr&el=tree)\n   \n   ```diff\n   @@           Coverage Diff           @@\n   ##           master    #1990   +/-   ##\n   =======================================\n     Coverage   86.33%   86.33%           \n   =======================================\n     Files         242      242           \n     Lines       41103    41103           \n   =======================================\n     Hits        35487    35487           \n     Misses       5616     5616\n   ```\n   \n   \n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/1990?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/1990?src=pr&el=footer). Last update [5c5e95a...cb41c7a](https://codecov.io/gh/apache/arrow/pull/1990?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-24T23:29:41.450+0000",
                    "updated": "2018-05-24T23:29:41.450+0000",
                    "started": "2018-05-24T23:29:41.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "105780",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/105792",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#discussion_r190752634\n \n \n\n ##########\n File path: ruby/red-arrow-gpu/LICENSE.txt\n ##########\n @@ -0,0 +1,585 @@\n+\n \n Review comment:\n   Does the Apache license need to be reproduced here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-25T01:12:29.639+0000",
                    "updated": "2018-05-25T01:12:29.639+0000",
                    "started": "2018-05-25T01:12:29.638+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "105792",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/105793",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#discussion_r190752889\n \n \n\n ##########\n File path: ruby/red-arrow-gpu/README.md\n ##########\n @@ -0,0 +1,60 @@\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+\n+# Red Arrow GPU - Apache Arrow GPU Ruby\n+\n+Red Arrow GPU is the Ruby bindings of Apache Arrow GPU. Red Arrow GPU is based on GObject Introspection.\n+\n+[Apache Arrow GPU](https://arrow.apache.org/) is an in-memory columnar data store on GPU.\n+\n+[GObject Introspection](https://wiki.gnome.org/action/show/Projects/GObjectIntrospection) is a middleware for language bindings of C library. GObject Introspection can generate language bindings automatically at runtime.\n+\n+Red Arrow GPU uses [Apache Arrow GPU GLib](https://github.com/apache/arrow/tree/master/c_glib) and [gobject-introspection gem](https://rubygems.org/gems/gobject-introspection) to generate Ruby bindings of Apache Arrow GPU.\n+\n+Apache Arrow GPU GLib is a C wrapper for [Apache Arrow GPU C++](https://github.com/apache/arrow/tree/master/cpp). GObject Introspection can't use Apache Arrow GPU C++ directly. Apache Arrow GPU GLib is a bridge between Apache Arrow GPU C++ and GObject Introspection.\n+\n+gobject-introspection gem is a Ruby bindings of GObject Introspection. Red Arrow GPU uses GObject Introspection via gobject-introspection gem.\n+\n+## Install\n+\n+Install Apache Arrow GPU GLib before install Red Arrow GPU. Use [packages.red-data-tools.org](https://github.com/red-data-tools/packages.red-data-tools.org) for installing Apache Arrow GPU GLib.\n \n Review comment:\n   It should be noted here that these binaries are not official; I hope we are able to produce official GPU-enabled binaries as part of release votes in the future\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-25T01:12:29.947+0000",
                    "updated": "2018-05-25T01:12:29.947+0000",
                    "started": "2018-05-25T01:12:29.946+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "105793",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/105794",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#discussion_r190754739\n \n \n\n ##########\n File path: ruby/red-arrow/README.md\n ##########\n @@ -0,0 +1,52 @@\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+\n+# Red Arrow - Apache Arrow Ruby\n+\n+Red Arrow is the Ruby bindings of Apache Arrow. Red Arrow is based on GObject Introspection.\n+\n+[Apache Arrow](https://arrow.apache.org/) is an in-memory columnar data store. It's used by many products for data analytics.\n+\n+[GObject Introspection](https://wiki.gnome.org/action/show/Projects/GObjectIntrospection) is a middleware for language bindings of C library. GObject Introspection can generate language bindings automatically at runtime.\n+\n+Red Arrow uses [Apache Arrow GLib](https://github.com/apache/arrow/tree/master/c_glib) and [gobject-introspection gem](https://rubygems.org/gems/gobject-introspection) to generate Ruby bindings of Apache Arrow.\n+\n+Apache Arrow GLib is a C wrapper for [Apache Arrow C++](https://github.com/apache/arrow/tree/master/cpp). GObject Introspection can't use Apache Arrow C++ directly. Apache Arrow GLib is a bridge between Apache Arrow C++ and GObject Introspection.\n+\n+gobject-introspection gem is a Ruby bindings of GObject Introspection. Red Arrow uses GObject Introspection via gobject-introspection gem.\n+\n+## Install\n+\n+Install Apache Arrow GLib before install Red Arrow. Use [packages.red-data-tools.org](https://github.com/red-data-tools/packages.red-data-tools.org) for installing Apache Arrow GLib.\n \n Review comment:\n   Similar comment as above\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-25T01:12:30.261+0000",
                    "updated": "2018-05-25T01:12:30.261+0000",
                    "started": "2018-05-25T01:12:30.261+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "105794",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/105795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#discussion_r190760790\n \n \n\n ##########\n File path: ruby/red-arrow/lib/arrow/group.rb\n ##########\n @@ -0,0 +1,175 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  # Experimental\n+  #\n+  # TODO: Almost codes should be implemented in Apache Arrow C++.\n \n Review comment:\n   Definitely intend to build this functionality in Arrow C++ eventually\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-25T01:12:30.272+0000",
                    "updated": "2018-05-25T01:12:30.272+0000",
                    "started": "2018-05-25T01:12:30.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "105795",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/105796",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#discussion_r190753141\n \n \n\n ##########\n File path: ruby/red-arrow-gpu/lib/arrow-gpu/cuda-device-manager.rb\n ##########\n @@ -0,0 +1,25 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module ArrowGPU\n+  class CUDADeviceManager\n+    # Experimental.\n+    #\n+    # Can we think device manager is a container of contexts?\n \n Review comment:\n   Yes, most likely -- it would be useful to have some design review of the interface between the CUDA driver API and Apache Arrow. What I did was experimental to help get things started\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-25T01:12:30.280+0000",
                    "updated": "2018-05-25T01:12:30.280+0000",
                    "started": "2018-05-25T01:12:30.280+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "105796",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/105797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#discussion_r190761936\n \n \n\n ##########\n File path: ruby/red-arrow/lib/arrow/slicer.rb\n ##########\n @@ -0,0 +1,454 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  # Experimental\n+  #\n+  # TODO: Almost codes should be implemented in Apache Arrow C++.\n \n Review comment:\n   Definitely\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-25T01:12:30.292+0000",
                    "updated": "2018-05-25T01:12:30.292+0000",
                    "started": "2018-05-25T01:12:30.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "105797",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/105798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#discussion_r190762148\n \n \n\n ##########\n File path: ruby/red-arrow/lib/arrow/table-formatter.rb\n ##########\n @@ -0,0 +1,66 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  # TODO: Almost codes should be implemented in Apache Arrow C++.\n \n Review comment:\n   I agree\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-25T01:12:30.353+0000",
                    "updated": "2018-05-25T01:12:30.353+0000",
                    "started": "2018-05-25T01:12:30.353+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "105798",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/105799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#issuecomment-391911785\n \n \n   +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-25T01:12:37.540+0000",
                    "updated": "2018-05-25T01:12:37.540+0000",
                    "started": "2018-05-25T01:12:37.540+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "105799",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/105800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/.travis.yml b/.travis.yml\nindex 34ab5c18dc..7918eb8a6c 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -151,7 +151,7 @@ matrix:\n     - $TRAVIS_BUILD_DIR/ci/travis_before_script_js.sh\n     script:\n     - $TRAVIS_BUILD_DIR/ci/travis_script_js.sh\n-  # C++ & glib w/ gcc 4.9\n+  # C++ & GLib & Ruby w/ gcc 4.9\n   - compiler: gcc\n     language: cpp\n     os: linux\n@@ -160,13 +160,15 @@ matrix:\n     - CC=\"gcc-4.9\"\n     - CXX=\"g++-4.9\"\n     before_script:\n-    - if [ $ARROW_CI_C_GLIB_AFFECTED != \"1\" ]; then exit; fi\n+    - if [ $ARROW_CI_RUBY_AFFECTED != \"1\" ]; then exit; fi\n     - $TRAVIS_BUILD_DIR/ci/travis_install_linux.sh\n     - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh --only-library\n     - $TRAVIS_BUILD_DIR/ci/travis_before_script_c_glib.sh\n+    - $TRAVIS_BUILD_DIR/ci/travis_before_script_ruby.sh\n     script:\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_c_glib.sh\n-  # [OS X] C++ & glib w/ XCode 8.3 & homebrew\n+    - if [ $ARROW_CI_C_GLIB_AFFECTED = \"1\" ]; then $TRAVIS_BUILD_DIR/ci/travis_script_c_glib.sh; fi\n+    - $TRAVIS_BUILD_DIR/ci/travis_script_ruby.sh\n+  # [OS X] C++ & GLib & Ruby w/ XCode 8.3 & homebrew\n   - compiler: clang\n     osx_image: xcode8.3\n     os: osx\n@@ -174,12 +176,14 @@ matrix:\n     addons:\n     rvm: 2.2\n     before_script:\n-    - if [ $ARROW_CI_C_GLIB_AFFECTED != \"1\" ]; then exit; fi\n+    - if [ $ARROW_CI_RUBY_AFFECTED != \"1\" ]; then exit; fi\n     - $TRAVIS_BUILD_DIR/ci/travis_install_osx.sh\n     - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh --only-library --homebrew\n     - $TRAVIS_BUILD_DIR/ci/travis_before_script_c_glib.sh\n+    - $TRAVIS_BUILD_DIR/ci/travis_before_script_ruby.sh\n     script:\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_c_glib.sh\n+    - if [ $ARROW_CI_C_GLIB_AFFECTED = \"1\" ]; then $TRAVIS_BUILD_DIR/ci/travis_script_c_glib.sh; fi\n+    - $TRAVIS_BUILD_DIR/ci/travis_script_ruby.sh\n   # Rust\n   - language: rust\n     cache: cargo\ndiff --git a/ci/detect-changes.py b/ci/detect-changes.py\nindex fce2ba5d94..b2b87204a2 100644\n--- a/ci/detect-changes.py\n+++ b/ci/detect-changes.py\n@@ -26,7 +26,7 @@\n \n perr = functools.partial(print, file=sys.stderr)\n \n-LANGUAGE_TOPICS = ['c_glib', 'cpp', 'java', 'js', 'python', 'rust']\n+LANGUAGE_TOPICS = ['c_glib', 'cpp', 'java', 'js', 'python', 'ruby', 'rust']\n \n ALL_TOPICS = LANGUAGE_TOPICS + ['integration', 'site']\n \n@@ -141,7 +141,10 @@ def get_affected_topics(affected_files):\n         elif p in ('java', 'js'):\n             affected[p] = True\n             affected['integration'] = True\n-        elif p in ('c_glib', 'integration', 'python', 'site', 'rust'):\n+        elif p in ('c_glib'):\n+            affected[p] = True\n+            affected['ruby'] = True\n+        elif p in ('integration', 'python', 'site', 'ruby', 'rust'):\n             affected[p] = True\n \n     return affected\ndiff --git a/ci/travis_before_script_ruby.sh b/ci/travis_before_script_ruby.sh\nnew file mode 100755\nindex 0000000000..c70168715c\n--- /dev/null\n+++ b/ci/travis_before_script_ruby.sh\n@@ -0,0 +1,31 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+set -e\n+\n+source $TRAVIS_BUILD_DIR/ci/travis_env_common.sh\n+\n+pushd $ARROW_RUBY_DIR/red-arrow\n+bundle install\n+popd\n+\n+# TODO: GPU required\n+# pushd $ARROW_RUBY_DIR/red-arrow-gpu\n+# bundle install\n+# popd\ndiff --git a/ci/travis_env_common.sh b/ci/travis_env_common.sh\nindex 42a3bbc4b5..8704bd4660 100755\n--- a/ci/travis_env_common.sh\n+++ b/ci/travis_env_common.sh\n@@ -29,6 +29,7 @@ export ARROW_C_GLIB_DIR=$TRAVIS_BUILD_DIR/c_glib\n export ARROW_JAVA_DIR=${TRAVIS_BUILD_DIR}/java\n export ARROW_JS_DIR=${TRAVIS_BUILD_DIR}/js\n export ARROW_INTEGRATION_DIR=$TRAVIS_BUILD_DIR/integration\n+export ARROW_RUBY_DIR=$TRAVIS_BUILD_DIR/ruby\n export ARROW_RUST_DIR=${TRAVIS_BUILD_DIR}/rust\n \n if [ $ARROW_TRAVIS_COVERAGE == \"1\" ]; then\ndiff --git a/ci/travis_script_ruby.sh b/ci/travis_script_ruby.sh\nnew file mode 100755\nindex 0000000000..57ca652588\n--- /dev/null\n+++ b/ci/travis_script_ruby.sh\n@@ -0,0 +1,53 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+set -e\n+\n+source $TRAVIS_BUILD_DIR/ci/travis_env_common.sh\n+\n+arrow_ruby_run_test()\n+{\n+  local arrow_c_glib_lib_dir=$1\n+\n+  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$arrow_c_glib_lib_dir\n+  export GI_TYPELIB_PATH=$arrow_c_glib_lib_dir/girepository-1.0\n+  test/run-test.rb\n+}\n+\n+export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ARROW_CPP_INSTALL/lib\n+export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$ARROW_CPP_INSTALL/lib/pkgconfig\n+\n+pushd $ARROW_RUBY_DIR/red-arrow\n+(arrow_ruby_run_test $ARROW_C_GLIB_INSTALL_AUTOTOOLS/lib)\n+if [ -d $ARROW_C_GLIB_INSTALL_MESON/lib/$(arch)-linux-gnu ]; then\n+  (arrow_ruby_run_test $ARROW_C_GLIB_INSTALL_MESON/lib/$(arch)-linux-gnu)\n+# else # TODO: Enable this\n+#   (arrow_ruby_run_test $ARROW_C_GLIB_INSTALL_MESON/lib)\n+fi\n+popd\n+\n+# TODO: GPU required\n+# pushd $ARROW_RUBY_DIR/red-arrow-gpu\n+# (arrow_ruby_run_test $ARROW_C_GLIB_INSTALL_AUTOTOOLS/lib)\n+# if [ -d $ARROW_C_GLIB_INSTALL_MESON/lib/$(arch)-linux-gnu ]; then\n+#   (arrow_ruby_run_test $ARROW_C_GLIB_INSTALL_MESON/lib/$(arch)-linux-gnu)\n+# # else # TODO: Enable this\n+# #   (arrow_ruby_run_test $ARROW_C_GLIB_INSTALL_MESON/lib)\n+# fi\n+# popd\ndiff --git a/ruby/README.md b/ruby/README.md\nnew file mode 100644\nindex 0000000000..aac714e537\n--- /dev/null\n+++ b/ruby/README.md\n@@ -0,0 +1,26 @@\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+\n+# Apache Arrow Ruby\n+\n+There are the official Ruby bindings for Apache Arrow.\n+\n+[Red Arrow](https://github.com/apache/arrow/tree/master/ruby/red-arrow) is the base Apache Arrow bindings.\n+\n+[Red Arrow GPU](https://github.com/apache/arrow/tree/master/ruby/red-arrow-gpu) is the Apache Arrow bindings of GPU part.\ndiff --git a/ruby/red-arrow-gpu/.gitignore b/ruby/red-arrow-gpu/.gitignore\nnew file mode 100644\nindex 0000000000..161ac05535\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/.gitignore\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+/lib/arrow-gpu/version.rb\n+\n+/pkg/\ndiff --git a/ruby/red-arrow-gpu/Gemfile b/ruby/red-arrow-gpu/Gemfile\nnew file mode 100644\nindex 0000000000..3907918c88\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/Gemfile\n@@ -0,0 +1,22 @@\n+# -*- ruby -*-\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+source \"https://rubygems.org/\"\n+\n+gemspec\ndiff --git a/ruby/red-arrow-gpu/LICENSE.txt b/ruby/red-arrow-gpu/LICENSE.txt\nnew file mode 100644\nindex 0000000000..30966d36f3\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/LICENSE.txt\n@@ -0,0 +1,585 @@\n+\n+                                 Apache License\n+                           Version 2.0, January 2004\n+                        http://www.apache.org/licenses/\n+\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n+\n+   1. Definitions.\n+\n+      \"License\" shall mean the terms and conditions for use, reproduction,\n+      and distribution as defined by Sections 1 through 9 of this document.\n+\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\n+      the copyright owner that is granting the License.\n+\n+      \"Legal Entity\" shall mean the union of the acting entity and all\n+      other entities that control, are controlled by, or are under common\n+      control with that entity. For the purposes of this definition,\n+      \"control\" means (i) the power, direct or indirect, to cause the\n+      direction or management of such entity, whether by contract or\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n+      outstanding shares, or (iii) beneficial ownership of such entity.\n+\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n+      exercising permissions granted by this License.\n+\n+      \"Source\" form shall mean the preferred form for making modifications,\n+      including but not limited to software source code, documentation\n+      source, and configuration files.\n+\n+      \"Object\" form shall mean any form resulting from mechanical\n+      transformation or translation of a Source form, including but\n+      not limited to compiled object code, generated documentation,\n+      and conversions to other media types.\n+\n+      \"Work\" shall mean the work of authorship, whether in Source or\n+      Object form, made available under the License, as indicated by a\n+      copyright notice that is included in or attached to the work\n+      (an example is provided in the Appendix below).\n+\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\n+      form, that is based on (or derived from) the Work and for which the\n+      editorial revisions, annotations, elaborations, or other modifications\n+      represent, as a whole, an original work of authorship. For the purposes\n+      of this License, Derivative Works shall not include works that remain\n+      separable from, or merely link (or bind by name) to the interfaces of,\n+      the Work and Derivative Works thereof.\n+\n+      \"Contribution\" shall mean any work of authorship, including\n+      the original version of the Work and any modifications or additions\n+      to that Work or Derivative Works thereof, that is intentionally\n+      submitted to Licensor for inclusion in the Work by the copyright owner\n+      or by an individual or Legal Entity authorized to submit on behalf of\n+      the copyright owner. For the purposes of this definition, \"submitted\"\n+      means any form of electronic, verbal, or written communication sent\n+      to the Licensor or its representatives, including but not limited to\n+      communication on electronic mailing lists, source code control systems,\n+      and issue tracking systems that are managed by, or on behalf of, the\n+      Licensor for the purpose of discussing and improving the Work, but\n+      excluding communication that is conspicuously marked or otherwise\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\n+\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n+      on behalf of whom a Contribution has been received by Licensor and\n+      subsequently incorporated within the Work.\n+\n+   2. Grant of Copyright License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      copyright license to reproduce, prepare Derivative Works of,\n+      publicly display, publicly perform, sublicense, and distribute the\n+      Work and such Derivative Works in Source or Object form.\n+\n+   3. Grant of Patent License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      (except as stated in this section) patent license to make, have made,\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\n+      where such license applies only to those patent claims licensable\n+      by such Contributor that are necessarily infringed by their\n+      Contribution(s) alone or by combination of their Contribution(s)\n+      with the Work to which such Contribution(s) was submitted. If You\n+      institute patent litigation against any entity (including a\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\n+      or a Contribution incorporated within the Work constitutes direct\n+      or contributory patent infringement, then any patent licenses\n+      granted to You under this License for that Work shall terminate\n+      as of the date such litigation is filed.\n+\n+   4. Redistribution. You may reproduce and distribute copies of the\n+      Work or Derivative Works thereof in any medium, with or without\n+      modifications, and in Source or Object form, provided that You\n+      meet the following conditions:\n+\n+      (a) You must give any other recipients of the Work or\n+          Derivative Works a copy of this License; and\n+\n+      (b) You must cause any modified files to carry prominent notices\n+          stating that You changed the files; and\n+\n+      (c) You must retain, in the Source form of any Derivative Works\n+          that You distribute, all copyright, patent, trademark, and\n+          attribution notices from the Source form of the Work,\n+          excluding those notices that do not pertain to any part of\n+          the Derivative Works; and\n+\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\n+          distribution, then any Derivative Works that You distribute must\n+          include a readable copy of the attribution notices contained\n+          within such NOTICE file, excluding those notices that do not\n+          pertain to any part of the Derivative Works, in at least one\n+          of the following places: within a NOTICE text file distributed\n+          as part of the Derivative Works; within the Source form or\n+          documentation, if provided along with the Derivative Works; or,\n+          within a display generated by the Derivative Works, if and\n+          wherever such third-party notices normally appear. The contents\n+          of the NOTICE file are for informational purposes only and\n+          do not modify the License. You may add Your own attribution\n+          notices within Derivative Works that You distribute, alongside\n+          or as an addendum to the NOTICE text from the Work, provided\n+          that such additional attribution notices cannot be construed\n+          as modifying the License.\n+\n+      You may add Your own copyright statement to Your modifications and\n+      may provide additional or different license terms and conditions\n+      for use, reproduction, or distribution of Your modifications, or\n+      for any such Derivative Works as a whole, provided Your use,\n+      reproduction, and distribution of the Work otherwise complies with\n+      the conditions stated in this License.\n+\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\n+      any Contribution intentionally submitted for inclusion in the Work\n+      by You to the Licensor shall be under the terms and conditions of\n+      this License, without any additional terms or conditions.\n+      Notwithstanding the above, nothing herein shall supersede or modify\n+      the terms of any separate license agreement you may have executed\n+      with Licensor regarding such Contributions.\n+\n+   6. Trademarks. This License does not grant permission to use the trade\n+      names, trademarks, service marks, or product names of the Licensor,\n+      except as required for reasonable and customary use in describing the\n+      origin of the Work and reproducing the content of the NOTICE file.\n+\n+   7. Disclaimer of Warranty. Unless required by applicable law or\n+      agreed to in writing, Licensor provides the Work (and each\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+      implied, including, without limitation, any warranties or conditions\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\n+      appropriateness of using or redistributing the Work and assume any\n+      risks associated with Your exercise of permissions under this License.\n+\n+   8. Limitation of Liability. In no event and under no legal theory,\n+      whether in tort (including negligence), contract, or otherwise,\n+      unless required by applicable law (such as deliberate and grossly\n+      negligent acts) or agreed to in writing, shall any Contributor be\n+      liable to You for damages, including any direct, indirect, special,\n+      incidental, or consequential damages of any character arising as a\n+      result of this License or out of the use or inability to use the\n+      Work (including but not limited to damages for loss of goodwill,\n+      work stoppage, computer failure or malfunction, or any and all\n+      other commercial damages or losses), even if such Contributor\n+      has been advised of the possibility of such damages.\n+\n+   9. Accepting Warranty or Additional Liability. While redistributing\n+      the Work or Derivative Works thereof, You may choose to offer,\n+      and charge a fee for, acceptance of support, warranty, indemnity,\n+      or other liability obligations and/or rights consistent with this\n+      License. However, in accepting such obligations, You may act only\n+      on Your own behalf and on Your sole responsibility, not on behalf\n+      of any other Contributor, and only if You agree to indemnify,\n+      defend, and hold each Contributor harmless for any liability\n+      incurred by, or claims asserted against, such Contributor by reason\n+      of your accepting any such warranty or additional liability.\n+\n+   END OF TERMS AND CONDITIONS\n+\n+   APPENDIX: How to apply the Apache License to your work.\n+\n+      To apply the Apache License to your work, attach the following\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\n+      replaced with your own identifying information. (Don't include\n+      the brackets!)  The text should be enclosed in the appropriate\n+      comment syntax for the file format. We also recommend that a\n+      file or class name and description of purpose be included on the\n+      same \"printed page\" as the copyright notice for easier\n+      identification within third-party archives.\n+\n+   Copyright [yyyy] [name of copyright owner]\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+--------------------------------------------------------------------------------\n+\n+src/plasma/fling.cc and src/plasma/fling.h: Apache 2.0\n+\n+Copyright 2013 Sharvil Nanavati\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+\n+--------------------------------------------------------------------------------\n+\n+src/plasma/thirdparty/ae: Modified / 3-Clause BSD\n+\n+Copyright (c) 2006-2010, Salvatore Sanfilippo <antirez at gmail dot com>\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+\n+ * Redistributions of source code must retain the above copyright notice,\n+   this list of conditions and the following disclaimer.\n+ * Redistributions in binary form must reproduce the above copyright\n+   notice, this list of conditions and the following disclaimer in the\n+   documentation and/or other materials provided with the distribution.\n+ * Neither the name of Redis nor the names of its contributors may be used\n+   to endorse or promote products derived from this software without\n+   specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n+LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+POSSIBILITY OF SUCH DAMAGE.\n+\n+--------------------------------------------------------------------------------\n+\n+src/plasma/thirdparty/dlmalloc.c: CC0\n+\n+This is a version (aka dlmalloc) of malloc/free/realloc written by\n+Doug Lea and released to the public domain, as explained at\n+http://creativecommons.org/publicdomain/zero/1.0/ Send questions,\n+comments, complaints, performance data, etc to dl@cs.oswego.edu\n+\n+--------------------------------------------------------------------------------\n+\n+src/plasma/thirdparty/xxhash: BSD 2-Clause License\n+\n+xxHash - Fast Hash algorithm\n+Copyright (C) 2012-2016, Yann Collet\n+\n+BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+* Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+* Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+You can contact the author at :\n+- xxHash homepage: http://www.xxhash.com\n+- xxHash source repository : https://github.com/Cyan4973/xxHash\n+\n+--------------------------------------------------------------------------------\n+\n+src/arrow/util (some portions): Apache 2.0, and 3-clause BSD\n+\n+Some portions of this module are derived from code in the Chromium project,\n+copyright (c) Google inc and (c) The Chromium Authors and licensed under the\n+Apache 2.0 License or the under the 3-clause BSD license:\n+\n+  Copyright (c) 2013 The Chromium Authors. All rights reserved.\n+\n+  Redistribution and use in source and binary forms, with or without\n+  modification, are permitted provided that the following conditions are\n+  met:\n+\n+     * Redistributions of source code must retain the above copyright\n+  notice, this list of conditions and the following disclaimer.\n+     * Redistributions in binary form must reproduce the above\n+  copyright notice, this list of conditions and the following disclaimer\n+  in the documentation and/or other materials provided with the\n+  distribution.\n+     * Neither the name of Google Inc. nor the names of its\n+  contributors may be used to endorse or promote products derived from\n+  this software without specific prior written permission.\n+\n+  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from Daniel Lemire's FrameOfReference project.\n+\n+https://github.com/lemire/FrameOfReference/blob/6ccaf9e97160f9a3b299e23a8ef739e711ef0c71/src/bpacking.cpp\n+\n+Copyright: 2013 Daniel Lemire\n+Home page: http://lemire.me/en/\n+Project page: https://github.com/lemire/FrameOfReference\n+License: Apache License Version 2.0 http://www.apache.org/licenses/LICENSE-2.0\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the TensorFlow project\n+\n+Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the NumPy project.\n+\n+https://github.com/numpy/numpy/blob/e1f191c46f2eebd6cb892a4bfe14d9dd43a06c4e/numpy/core/src/multiarray/multiarraymodule.c#L2910\n+\n+https://github.com/numpy/numpy/blob/68fd82271b9ea5a9e50d4e761061dfcca851382a/numpy/core/src/multiarray/datetime.c\n+\n+Copyright (c) 2005-2017, NumPy Developers.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+       notice, this list of conditions and the following disclaimer.\n+\n+    * Redistributions in binary form must reproduce the above\n+       copyright notice, this list of conditions and the following\n+       disclaimer in the documentation and/or other materials provided\n+       with the distribution.\n+\n+    * Neither the name of the NumPy Developers nor the names of any\n+       contributors may be used to endorse or promote products derived\n+       from this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the Boost project\n+\n+Boost Software License - Version 1.0 - August 17th, 2003\n+\n+Permission is hereby granted, free of charge, to any person or organization\n+obtaining a copy of the software and accompanying documentation covered by\n+this license (the \"Software\") to use, reproduce, display, distribute,\n+execute, and transmit the Software, and to prepare derivative works of the\n+Software, and to permit third-parties to whom the Software is furnished to\n+do so, all subject to the following:\n+\n+The copyright notices in the Software and this entire statement, including\n+the above license grant, this restriction and the following disclaimer,\n+must be included in all copies of the Software, in whole or in part, and\n+all derivative works of the Software, unless such copies or derivative\n+works are solely in the form of machine-executable object code generated by\n+a source language processor.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n+SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n+FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n+ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n+DEALINGS IN THE SOFTWARE.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the mapbox/variant project, BSD 3-clause\n+license\n+\n+Copyright (c) MapBox\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without modification,\n+are permitted provided that the following conditions are met:\n+\n+- Redistributions of source code must retain the above copyright notice, this\n+  list of conditions and the following disclaimer.\n+- Redistributions in binary form must reproduce the above copyright notice, this\n+  list of conditions and the following disclaimer in the documentation and/or\n+  other materials provided with the distribution.\n+- Neither the name \"MapBox\" nor the names of its contributors may be\n+  used to endorse or promote products derived from this software without\n+  specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the Boost project\n+\n+Boost Software License - Version 1.0 - August 17th, 2003\n+\n+Permission is hereby granted, free of charge, to any person or organization\n+obtaining a copy of the software and accompanying documentation covered by\n+this license (the \"Software\") to use, reproduce, display, distribute,\n+execute, and transmit the Software, and to prepare derivative works of the\n+Software, and to permit third-parties to whom the Software is furnished to\n+do so, all subject to the following:\n+\n+The copyright notices in the Software and this entire statement, including\n+the above license grant, this restriction and the following disclaimer,\n+must be included in all copies of the Software, in whole or in part, and\n+all derivative works of the Software, unless such copies or derivative\n+works are solely in the form of machine-executable object code generated by\n+a source language processor.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n+SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n+FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n+ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n+DEALINGS IN THE SOFTWARE.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the mapbox/variant project, BSD 3-clause\n+license\n+\n+Copyright (c) MapBox\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without modification,\n+are permitted provided that the following conditions are met:\n+\n+- Redistributions of source code must retain the above copyright notice, this\n+  list of conditions and the following disclaimer.\n+- Redistributions in binary form must reproduce the above copyright notice, this\n+  list of conditions and the following disclaimer in the documentation and/or\n+  other materials provided with the distribution.\n+- Neither the name \"MapBox\" nor the names of its contributors may be\n+  used to endorse or promote products derived from this software without\n+  specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the FlatBuffers project\n+\n+Copyright 2014 Google Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the tslib project\n+\n+Copyright 2015 Microsoft Corporation. All rights reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the jemalloc project\n+\n+https://github.com/jemalloc/jemalloc\n+\n+Copyright (C) 2002-2017 Jason Evans <jasone@canonware.com>.\n+All rights reserved.\n+Copyright (C) 2007-2012 Mozilla Foundation.  All rights reserved.\n+Copyright (C) 2009-2017 Facebook, Inc.  All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+1. Redistributions of source code must retain the above copyright notice(s),\n+   this list of conditions and the following disclaimer.\n+2. Redistributions in binary form must reproduce the above copyright notice(s),\n+   this list of conditions and the following disclaimer in the documentation\n+   and/or other materials provided with the distribution.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) ``AS IS'' AND ANY EXPRESS\n+OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n+EVENT SHALL THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY DIRECT, INDIRECT,\n+INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n+OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n+ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+--------------------------------------------------------------------------------\ndiff --git a/ruby/red-arrow-gpu/README.md b/ruby/red-arrow-gpu/README.md\nnew file mode 100644\nindex 0000000000..236cf78129\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/README.md\n@@ -0,0 +1,60 @@\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+\n+# Red Arrow GPU - Apache Arrow GPU Ruby\n+\n+Red Arrow GPU is the Ruby bindings of Apache Arrow GPU. Red Arrow GPU is based on GObject Introspection.\n+\n+[Apache Arrow GPU](https://arrow.apache.org/) is an in-memory columnar data store on GPU.\n+\n+[GObject Introspection](https://wiki.gnome.org/action/show/Projects/GObjectIntrospection) is a middleware for language bindings of C library. GObject Introspection can generate language bindings automatically at runtime.\n+\n+Red Arrow GPU uses [Apache Arrow GPU GLib](https://github.com/apache/arrow/tree/master/c_glib) and [gobject-introspection gem](https://rubygems.org/gems/gobject-introspection) to generate Ruby bindings of Apache Arrow GPU.\n+\n+Apache Arrow GPU GLib is a C wrapper for [Apache Arrow GPU C++](https://github.com/apache/arrow/tree/master/cpp). GObject Introspection can't use Apache Arrow GPU C++ directly. Apache Arrow GPU GLib is a bridge between Apache Arrow GPU C++ and GObject Introspection.\n+\n+gobject-introspection gem is a Ruby bindings of GObject Introspection. Red Arrow GPU uses GObject Introspection via gobject-introspection gem.\n+\n+## Install\n+\n+Install Apache Arrow GPU GLib before install Red Arrow GPU. Use [packages.red-data-tools.org](https://github.com/red-data-tools/packages.red-data-tools.org) for installing Apache Arrow GPU GLib.\n+\n+Install Red Arrow GPU after you install Apache Arrow GPU GLib:\n+\n+```text\n+% gem install red-arrow-gpu\n+```\n+\n+## Usage\n+\n+```ruby\n+require \"arrow-gpu\"\n+\n+manager = ArrowGPU::CUDADeviceManager.new\n+if manager.n_devices.zero?\n+  raise \"No GPU is found\"\n+end\n+\n+context = manager[0]\n+buffer = ArrowGPU::CUDABuffer.new(context, 128)\n+ArrowGPU::CUDABufferOutputStream.open(buffer) do |stream|\n+  stream.write(\"Hello World\")\n+end\n+puts buffer.copy_to_host(0, 11) # => \"Hello World\"\n+```\ndiff --git a/ruby/red-arrow-gpu/Rakefile b/ruby/red-arrow-gpu/Rakefile\nnew file mode 100644\nindex 0000000000..0c7321cc80\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/Rakefile\n@@ -0,0 +1,41 @@\n+# -*- ruby -*-\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"rubygems\"\n+require \"bundler/gem_helper\"\n+\n+base_dir = File.join(File.dirname(__FILE__))\n+\n+helper = Bundler::GemHelper.new(base_dir)\n+def helper.version_tag\n+  version\n+end\n+\n+helper.install\n+spec = helper.gemspec\n+\n+desc \"Run tests\"\n+task :test do\n+  cd(\"dependency-check\") do\n+    ruby(\"-S\", \"rake\")\n+  end\n+  ruby(\"test/run-test.rb\")\n+end\n+\n+task default: :test\ndiff --git a/ruby/red-arrow-gpu/dependency-check/Rakefile b/ruby/red-arrow-gpu/dependency-check/Rakefile\nnew file mode 100644\nindex 0000000000..0c2284811d\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/dependency-check/Rakefile\n@@ -0,0 +1,43 @@\n+# -*- ruby -*-\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"pkg-config\"\n+require \"native-package-installer\"\n+\n+case RUBY_PLATFORM\n+when /mingw|mswin/\n+  task :default => \"nothing\"\n+else\n+  task :default => \"dependency:check\"\n+end\n+\n+task :nothing do\n+end\n+\n+namespace :dependency do\n+  desc \"Check dependency\"\n+  task :check do\n+    unless PKGConfig.check_version?(\"arrow-gpu-glib\")\n+      unless NativePackageInstaller.install(:debian => \"libarrow-gpu-glib-dev\",\n+                                            :redhat => \"arrow-gpu-glib-devel\")\n+        exit(false)\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow-gpu/lib/arrow-gpu.rb b/ruby/red-arrow-gpu/lib/arrow-gpu.rb\nnew file mode 100644\nindex 0000000000..10fdcc3c6c\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/lib/arrow-gpu.rb\n@@ -0,0 +1,29 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"arrow\"\n+\n+require \"arrow-gpu/version\"\n+\n+require \"arrow-gpu/loader\"\n+\n+module ArrowGPU\n+  class Error < StandardError\n+  end\n+\n+  Loader.load\n+end\ndiff --git a/ruby/red-arrow-gpu/lib/arrow-gpu/cuda-device-manager.rb b/ruby/red-arrow-gpu/lib/arrow-gpu/cuda-device-manager.rb\nnew file mode 100644\nindex 0000000000..163128b208\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/lib/arrow-gpu/cuda-device-manager.rb\n@@ -0,0 +1,25 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module ArrowGPU\n+  class CUDADeviceManager\n+    # Experimental.\n+    #\n+    # Can we think device manager is a container of contexts?\n+    alias_method :[], :get_context\n+  end\n+end\ndiff --git a/ruby/red-arrow-gpu/lib/arrow-gpu/loader.rb b/ruby/red-arrow-gpu/lib/arrow-gpu/loader.rb\nnew file mode 100644\nindex 0000000000..b9dc57cc81\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/lib/arrow-gpu/loader.rb\n@@ -0,0 +1,35 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module ArrowGPU\n+  class Loader < GObjectIntrospection::Loader\n+    class << self\n+      def load\n+        super(\"ArrowGPU\", ArrowGPU)\n+      end\n+    end\n+\n+    private\n+    def post_load(repository, namespace)\n+      require_libraries\n+    end\n+\n+    def require_libraries\n+      require \"arrow-gpu/cuda-device-manager\"\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow-gpu/red-arrow-gpu.gemspec b/ruby/red-arrow-gpu/red-arrow-gpu.gemspec\nnew file mode 100644\nindex 0000000000..d50641bf19\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/red-arrow-gpu.gemspec\n@@ -0,0 +1,50 @@\n+# -*- ruby -*-\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require_relative \"version\"\n+\n+Gem::Specification.new do |spec|\n+  spec.name = \"red-arrow-gpu\"\n+  version_components = [\n+    ArrowGPU::Version::MAJOR.to_s,\n+    ArrowGPU::Version::MINOR.to_s,\n+    ArrowGPU::Version::MICRO.to_s,\n+    # \"beta1\",\n+  ]\n+  spec.version = version_components.join(\".\")\n+  spec.homepage = \"https://arrow.apache.org/\"\n+  spec.authors = [\"Apache Arrow Developers\"]\n+  spec.email = [\"dev@arrow.apache.org\"]\n+\n+  spec.summary = \"Red Arrow GPU is the Ruby bindings of Apache Arrow GPU\"\n+  spec.description =\n+    \"Apache Arrow GPU is a common in-memory columnar data store on GPU. \" +\n+    \"It's useful to share and process large data.\"\n+  spec.license = \"Apache-2.0\"\n+  spec.files = [\"README.md\", \"Rakefile\", \"Gemfile\", \"#{spec.name}.gemspec\"]\n+  spec.files += Dir.glob(\"lib/**/*.rb\")\n+  spec.test_files += Dir.glob(\"test/**/*\")\n+  spec.extensions = [\"dependency-check/Rakefile\"]\n+\n+  spec.add_runtime_dependency(\"red-arrow\")\n+\n+  spec.add_development_dependency(\"bundler\")\n+  spec.add_development_dependency(\"rake\")\n+  spec.add_development_dependency(\"test-unit\")\n+end\ndiff --git a/ruby/red-arrow-gpu/test/helper.rb b/ruby/red-arrow-gpu/test/helper.rb\nnew file mode 100644\nindex 0000000000..6bed605abb\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/test/helper.rb\n@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require_relative \"../version\"\n+\n+require \"arrow-gpu\"\n+\n+require \"test-unit\"\ndiff --git a/ruby/red-arrow-gpu/test/run-test.rb b/ruby/red-arrow-gpu/test/run-test.rb\nnew file mode 100755\nindex 0000000000..b826f3e80e\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/test/run-test.rb\n@@ -0,0 +1,37 @@\n+#!/usr/bin/env ruby\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+$VERBOSE = true\n+\n+require \"pathname\"\n+\n+base_dir = Pathname.new(__dir__).parent.expand_path\n+arrow_base_dir = base_dir.parent + \"red-arrow\"\n+\n+lib_dir = base_dir + \"lib\"\n+test_dir = base_dir + \"test\"\n+\n+arrow_lib_dir = arrow_base_dir + \"lib\"\n+\n+$LOAD_PATH.unshift(arrow_lib_dir.to_s)\n+$LOAD_PATH.unshift(lib_dir.to_s)\n+\n+require_relative \"helper\"\n+\n+exit(Test::Unit::AutoRunner.run(true, test_dir.to_s))\ndiff --git a/ruby/red-arrow-gpu/test/test-cuda.rb b/ruby/red-arrow-gpu/test/test-cuda.rb\nnew file mode 100644\nindex 0000000000..05fd6cc155\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/test/test-cuda.rb\n@@ -0,0 +1,38 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestCUDA < Test::Unit::TestCase\n+  def setup\n+    @manager = ArrowGPU::CUDADeviceManager.new\n+    omit(\"At least one GPU is required\") if @manager.n_devices.zero?\n+    @context = @manager[0]\n+  end\n+\n+  sub_test_case(\"BufferOutputStream\") do\n+    def setup\n+      super\n+      @buffer = ArrowGPU::CUDABuffer.new(@context, 128)\n+    end\n+\n+    def test_new\n+      ArrowGPU::CUDABufferOutputStream.open(@buffer) do |stream|\n+        stream.write(\"Hello World\")\n+      end\n+      assert_equal(\"Hello World\", @buffer.copy_to_host(0, 11).to_s)\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow-gpu/version.rb b/ruby/red-arrow-gpu/version.rb\nnew file mode 100644\nindex 0000000000..fc0d37e6ba\n--- /dev/null\n+++ b/ruby/red-arrow-gpu/version.rb\n@@ -0,0 +1,71 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"pathname\"\n+\n+version_rb_path = Pathname.new(__FILE__)\n+base_dir = version_rb_path.dirname\n+pom_xml_path = base_dir.join(\"..\", \"..\", \"java\", \"pom.xml\")\n+lib_version_rb_path = base_dir.join(\"lib\", \"arrow-gpu\", \"version.rb\")\n+\n+need_update = false\n+if not lib_version_rb_path.exist?\n+  need_update = true\n+elsif version_rb_path.mtime > lib_version_rb_path.mtime\n+  need_update = true\n+elsif pom_xml_path.exist? and pom_xml_path.mtime > lib_version_rb_path.mtime\n+  need_update = true\n+end\n+\n+if need_update\n+  version = pom_xml_path.read.scan(/^  <version>(.+?)<\\/version>/)[0][0]\n+  major, minor, micro, tag = version.split(/[.-]/)\n+  lib_version_rb_path.open(\"w\") do |lib_version_rb|\n+    lib_version_rb.puts(<<-RUBY)\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module ArrowGPU\n+  module Version\n+    MAJOR = #{major}\n+    MINOR = #{minor}\n+    MICRO = #{micro}\n+    TAG = #{tag ? tag.dump : nil}\n+    STRING = #{version.dump}\n+  end\n+\n+  VERSION = Version::STRING\n+end\n+    RUBY\n+  end\n+end\n+\n+require_relative \"lib/arrow-gpu/version\"\ndiff --git a/ruby/red-arrow/.gitignore b/ruby/red-arrow/.gitignore\nnew file mode 100644\nindex 0000000000..9fcc9cdc16\n--- /dev/null\n+++ b/ruby/red-arrow/.gitignore\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+/lib/arrow/version.rb\n+\n+/pkg/\ndiff --git a/ruby/red-arrow/Gemfile b/ruby/red-arrow/Gemfile\nnew file mode 100644\nindex 0000000000..3907918c88\n--- /dev/null\n+++ b/ruby/red-arrow/Gemfile\n@@ -0,0 +1,22 @@\n+# -*- ruby -*-\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+source \"https://rubygems.org/\"\n+\n+gemspec\ndiff --git a/ruby/red-arrow/LICENSE.txt b/ruby/red-arrow/LICENSE.txt\nnew file mode 100644\nindex 0000000000..30966d36f3\n--- /dev/null\n+++ b/ruby/red-arrow/LICENSE.txt\n@@ -0,0 +1,585 @@\n+\n+                                 Apache License\n+                           Version 2.0, January 2004\n+                        http://www.apache.org/licenses/\n+\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n+\n+   1. Definitions.\n+\n+      \"License\" shall mean the terms and conditions for use, reproduction,\n+      and distribution as defined by Sections 1 through 9 of this document.\n+\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\n+      the copyright owner that is granting the License.\n+\n+      \"Legal Entity\" shall mean the union of the acting entity and all\n+      other entities that control, are controlled by, or are under common\n+      control with that entity. For the purposes of this definition,\n+      \"control\" means (i) the power, direct or indirect, to cause the\n+      direction or management of such entity, whether by contract or\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n+      outstanding shares, or (iii) beneficial ownership of such entity.\n+\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n+      exercising permissions granted by this License.\n+\n+      \"Source\" form shall mean the preferred form for making modifications,\n+      including but not limited to software source code, documentation\n+      source, and configuration files.\n+\n+      \"Object\" form shall mean any form resulting from mechanical\n+      transformation or translation of a Source form, including but\n+      not limited to compiled object code, generated documentation,\n+      and conversions to other media types.\n+\n+      \"Work\" shall mean the work of authorship, whether in Source or\n+      Object form, made available under the License, as indicated by a\n+      copyright notice that is included in or attached to the work\n+      (an example is provided in the Appendix below).\n+\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\n+      form, that is based on (or derived from) the Work and for which the\n+      editorial revisions, annotations, elaborations, or other modifications\n+      represent, as a whole, an original work of authorship. For the purposes\n+      of this License, Derivative Works shall not include works that remain\n+      separable from, or merely link (or bind by name) to the interfaces of,\n+      the Work and Derivative Works thereof.\n+\n+      \"Contribution\" shall mean any work of authorship, including\n+      the original version of the Work and any modifications or additions\n+      to that Work or Derivative Works thereof, that is intentionally\n+      submitted to Licensor for inclusion in the Work by the copyright owner\n+      or by an individual or Legal Entity authorized to submit on behalf of\n+      the copyright owner. For the purposes of this definition, \"submitted\"\n+      means any form of electronic, verbal, or written communication sent\n+      to the Licensor or its representatives, including but not limited to\n+      communication on electronic mailing lists, source code control systems,\n+      and issue tracking systems that are managed by, or on behalf of, the\n+      Licensor for the purpose of discussing and improving the Work, but\n+      excluding communication that is conspicuously marked or otherwise\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\n+\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n+      on behalf of whom a Contribution has been received by Licensor and\n+      subsequently incorporated within the Work.\n+\n+   2. Grant of Copyright License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      copyright license to reproduce, prepare Derivative Works of,\n+      publicly display, publicly perform, sublicense, and distribute the\n+      Work and such Derivative Works in Source or Object form.\n+\n+   3. Grant of Patent License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      (except as stated in this section) patent license to make, have made,\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\n+      where such license applies only to those patent claims licensable\n+      by such Contributor that are necessarily infringed by their\n+      Contribution(s) alone or by combination of their Contribution(s)\n+      with the Work to which such Contribution(s) was submitted. If You\n+      institute patent litigation against any entity (including a\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\n+      or a Contribution incorporated within the Work constitutes direct\n+      or contributory patent infringement, then any patent licenses\n+      granted to You under this License for that Work shall terminate\n+      as of the date such litigation is filed.\n+\n+   4. Redistribution. You may reproduce and distribute copies of the\n+      Work or Derivative Works thereof in any medium, with or without\n+      modifications, and in Source or Object form, provided that You\n+      meet the following conditions:\n+\n+      (a) You must give any other recipients of the Work or\n+          Derivative Works a copy of this License; and\n+\n+      (b) You must cause any modified files to carry prominent notices\n+          stating that You changed the files; and\n+\n+      (c) You must retain, in the Source form of any Derivative Works\n+          that You distribute, all copyright, patent, trademark, and\n+          attribution notices from the Source form of the Work,\n+          excluding those notices that do not pertain to any part of\n+          the Derivative Works; and\n+\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\n+          distribution, then any Derivative Works that You distribute must\n+          include a readable copy of the attribution notices contained\n+          within such NOTICE file, excluding those notices that do not\n+          pertain to any part of the Derivative Works, in at least one\n+          of the following places: within a NOTICE text file distributed\n+          as part of the Derivative Works; within the Source form or\n+          documentation, if provided along with the Derivative Works; or,\n+          within a display generated by the Derivative Works, if and\n+          wherever such third-party notices normally appear. The contents\n+          of the NOTICE file are for informational purposes only and\n+          do not modify the License. You may add Your own attribution\n+          notices within Derivative Works that You distribute, alongside\n+          or as an addendum to the NOTICE text from the Work, provided\n+          that such additional attribution notices cannot be construed\n+          as modifying the License.\n+\n+      You may add Your own copyright statement to Your modifications and\n+      may provide additional or different license terms and conditions\n+      for use, reproduction, or distribution of Your modifications, or\n+      for any such Derivative Works as a whole, provided Your use,\n+      reproduction, and distribution of the Work otherwise complies with\n+      the conditions stated in this License.\n+\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\n+      any Contribution intentionally submitted for inclusion in the Work\n+      by You to the Licensor shall be under the terms and conditions of\n+      this License, without any additional terms or conditions.\n+      Notwithstanding the above, nothing herein shall supersede or modify\n+      the terms of any separate license agreement you may have executed\n+      with Licensor regarding such Contributions.\n+\n+   6. Trademarks. This License does not grant permission to use the trade\n+      names, trademarks, service marks, or product names of the Licensor,\n+      except as required for reasonable and customary use in describing the\n+      origin of the Work and reproducing the content of the NOTICE file.\n+\n+   7. Disclaimer of Warranty. Unless required by applicable law or\n+      agreed to in writing, Licensor provides the Work (and each\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+      implied, including, without limitation, any warranties or conditions\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\n+      appropriateness of using or redistributing the Work and assume any\n+      risks associated with Your exercise of permissions under this License.\n+\n+   8. Limitation of Liability. In no event and under no legal theory,\n+      whether in tort (including negligence), contract, or otherwise,\n+      unless required by applicable law (such as deliberate and grossly\n+      negligent acts) or agreed to in writing, shall any Contributor be\n+      liable to You for damages, including any direct, indirect, special,\n+      incidental, or consequential damages of any character arising as a\n+      result of this License or out of the use or inability to use the\n+      Work (including but not limited to damages for loss of goodwill,\n+      work stoppage, computer failure or malfunction, or any and all\n+      other commercial damages or losses), even if such Contributor\n+      has been advised of the possibility of such damages.\n+\n+   9. Accepting Warranty or Additional Liability. While redistributing\n+      the Work or Derivative Works thereof, You may choose to offer,\n+      and charge a fee for, acceptance of support, warranty, indemnity,\n+      or other liability obligations and/or rights consistent with this\n+      License. However, in accepting such obligations, You may act only\n+      on Your own behalf and on Your sole responsibility, not on behalf\n+      of any other Contributor, and only if You agree to indemnify,\n+      defend, and hold each Contributor harmless for any liability\n+      incurred by, or claims asserted against, such Contributor by reason\n+      of your accepting any such warranty or additional liability.\n+\n+   END OF TERMS AND CONDITIONS\n+\n+   APPENDIX: How to apply the Apache License to your work.\n+\n+      To apply the Apache License to your work, attach the following\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\n+      replaced with your own identifying information. (Don't include\n+      the brackets!)  The text should be enclosed in the appropriate\n+      comment syntax for the file format. We also recommend that a\n+      file or class name and description of purpose be included on the\n+      same \"printed page\" as the copyright notice for easier\n+      identification within third-party archives.\n+\n+   Copyright [yyyy] [name of copyright owner]\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+--------------------------------------------------------------------------------\n+\n+src/plasma/fling.cc and src/plasma/fling.h: Apache 2.0\n+\n+Copyright 2013 Sharvil Nanavati\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+\n+--------------------------------------------------------------------------------\n+\n+src/plasma/thirdparty/ae: Modified / 3-Clause BSD\n+\n+Copyright (c) 2006-2010, Salvatore Sanfilippo <antirez at gmail dot com>\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+\n+ * Redistributions of source code must retain the above copyright notice,\n+   this list of conditions and the following disclaimer.\n+ * Redistributions in binary form must reproduce the above copyright\n+   notice, this list of conditions and the following disclaimer in the\n+   documentation and/or other materials provided with the distribution.\n+ * Neither the name of Redis nor the names of its contributors may be used\n+   to endorse or promote products derived from this software without\n+   specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n+LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+POSSIBILITY OF SUCH DAMAGE.\n+\n+--------------------------------------------------------------------------------\n+\n+src/plasma/thirdparty/dlmalloc.c: CC0\n+\n+This is a version (aka dlmalloc) of malloc/free/realloc written by\n+Doug Lea and released to the public domain, as explained at\n+http://creativecommons.org/publicdomain/zero/1.0/ Send questions,\n+comments, complaints, performance data, etc to dl@cs.oswego.edu\n+\n+--------------------------------------------------------------------------------\n+\n+src/plasma/thirdparty/xxhash: BSD 2-Clause License\n+\n+xxHash - Fast Hash algorithm\n+Copyright (C) 2012-2016, Yann Collet\n+\n+BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+* Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+* Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+You can contact the author at :\n+- xxHash homepage: http://www.xxhash.com\n+- xxHash source repository : https://github.com/Cyan4973/xxHash\n+\n+--------------------------------------------------------------------------------\n+\n+src/arrow/util (some portions): Apache 2.0, and 3-clause BSD\n+\n+Some portions of this module are derived from code in the Chromium project,\n+copyright (c) Google inc and (c) The Chromium Authors and licensed under the\n+Apache 2.0 License or the under the 3-clause BSD license:\n+\n+  Copyright (c) 2013 The Chromium Authors. All rights reserved.\n+\n+  Redistribution and use in source and binary forms, with or without\n+  modification, are permitted provided that the following conditions are\n+  met:\n+\n+     * Redistributions of source code must retain the above copyright\n+  notice, this list of conditions and the following disclaimer.\n+     * Redistributions in binary form must reproduce the above\n+  copyright notice, this list of conditions and the following disclaimer\n+  in the documentation and/or other materials provided with the\n+  distribution.\n+     * Neither the name of Google Inc. nor the names of its\n+  contributors may be used to endorse or promote products derived from\n+  this software without specific prior written permission.\n+\n+  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from Daniel Lemire's FrameOfReference project.\n+\n+https://github.com/lemire/FrameOfReference/blob/6ccaf9e97160f9a3b299e23a8ef739e711ef0c71/src/bpacking.cpp\n+\n+Copyright: 2013 Daniel Lemire\n+Home page: http://lemire.me/en/\n+Project page: https://github.com/lemire/FrameOfReference\n+License: Apache License Version 2.0 http://www.apache.org/licenses/LICENSE-2.0\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the TensorFlow project\n+\n+Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the NumPy project.\n+\n+https://github.com/numpy/numpy/blob/e1f191c46f2eebd6cb892a4bfe14d9dd43a06c4e/numpy/core/src/multiarray/multiarraymodule.c#L2910\n+\n+https://github.com/numpy/numpy/blob/68fd82271b9ea5a9e50d4e761061dfcca851382a/numpy/core/src/multiarray/datetime.c\n+\n+Copyright (c) 2005-2017, NumPy Developers.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    * Redistributions of source code must retain the above copyright\n+       notice, this list of conditions and the following disclaimer.\n+\n+    * Redistributions in binary form must reproduce the above\n+       copyright notice, this list of conditions and the following\n+       disclaimer in the documentation and/or other materials provided\n+       with the distribution.\n+\n+    * Neither the name of the NumPy Developers nor the names of any\n+       contributors may be used to endorse or promote products derived\n+       from this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the Boost project\n+\n+Boost Software License - Version 1.0 - August 17th, 2003\n+\n+Permission is hereby granted, free of charge, to any person or organization\n+obtaining a copy of the software and accompanying documentation covered by\n+this license (the \"Software\") to use, reproduce, display, distribute,\n+execute, and transmit the Software, and to prepare derivative works of the\n+Software, and to permit third-parties to whom the Software is furnished to\n+do so, all subject to the following:\n+\n+The copyright notices in the Software and this entire statement, including\n+the above license grant, this restriction and the following disclaimer,\n+must be included in all copies of the Software, in whole or in part, and\n+all derivative works of the Software, unless such copies or derivative\n+works are solely in the form of machine-executable object code generated by\n+a source language processor.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n+SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n+FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n+ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n+DEALINGS IN THE SOFTWARE.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the mapbox/variant project, BSD 3-clause\n+license\n+\n+Copyright (c) MapBox\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without modification,\n+are permitted provided that the following conditions are met:\n+\n+- Redistributions of source code must retain the above copyright notice, this\n+  list of conditions and the following disclaimer.\n+- Redistributions in binary form must reproduce the above copyright notice, this\n+  list of conditions and the following disclaimer in the documentation and/or\n+  other materials provided with the distribution.\n+- Neither the name \"MapBox\" nor the names of its contributors may be\n+  used to endorse or promote products derived from this software without\n+  specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the Boost project\n+\n+Boost Software License - Version 1.0 - August 17th, 2003\n+\n+Permission is hereby granted, free of charge, to any person or organization\n+obtaining a copy of the software and accompanying documentation covered by\n+this license (the \"Software\") to use, reproduce, display, distribute,\n+execute, and transmit the Software, and to prepare derivative works of the\n+Software, and to permit third-parties to whom the Software is furnished to\n+do so, all subject to the following:\n+\n+The copyright notices in the Software and this entire statement, including\n+the above license grant, this restriction and the following disclaimer,\n+must be included in all copies of the Software, in whole or in part, and\n+all derivative works of the Software, unless such copies or derivative\n+works are solely in the form of machine-executable object code generated by\n+a source language processor.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n+SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n+FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n+ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n+DEALINGS IN THE SOFTWARE.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the mapbox/variant project, BSD 3-clause\n+license\n+\n+Copyright (c) MapBox\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without modification,\n+are permitted provided that the following conditions are met:\n+\n+- Redistributions of source code must retain the above copyright notice, this\n+  list of conditions and the following disclaimer.\n+- Redistributions in binary form must reproduce the above copyright notice, this\n+  list of conditions and the following disclaimer in the documentation and/or\n+  other materials provided with the distribution.\n+- Neither the name \"MapBox\" nor the names of its contributors may be\n+  used to endorse or promote products derived from this software without\n+  specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the FlatBuffers project\n+\n+Copyright 2014 Google Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the tslib project\n+\n+Copyright 2015 Microsoft Corporation. All rights reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+\n+--------------------------------------------------------------------------------\n+\n+This project includes code from the jemalloc project\n+\n+https://github.com/jemalloc/jemalloc\n+\n+Copyright (C) 2002-2017 Jason Evans <jasone@canonware.com>.\n+All rights reserved.\n+Copyright (C) 2007-2012 Mozilla Foundation.  All rights reserved.\n+Copyright (C) 2009-2017 Facebook, Inc.  All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+1. Redistributions of source code must retain the above copyright notice(s),\n+   this list of conditions and the following disclaimer.\n+2. Redistributions in binary form must reproduce the above copyright notice(s),\n+   this list of conditions and the following disclaimer in the documentation\n+   and/or other materials provided with the distribution.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) ``AS IS'' AND ANY EXPRESS\n+OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n+EVENT SHALL THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY DIRECT, INDIRECT,\n+INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n+OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n+ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+--------------------------------------------------------------------------------\ndiff --git a/ruby/red-arrow/README.md b/ruby/red-arrow/README.md\nnew file mode 100644\nindex 0000000000..9b47662b27\n--- /dev/null\n+++ b/ruby/red-arrow/README.md\n@@ -0,0 +1,52 @@\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+\n+# Red Arrow - Apache Arrow Ruby\n+\n+Red Arrow is the Ruby bindings of Apache Arrow. Red Arrow is based on GObject Introspection.\n+\n+[Apache Arrow](https://arrow.apache.org/) is an in-memory columnar data store. It's used by many products for data analytics.\n+\n+[GObject Introspection](https://wiki.gnome.org/action/show/Projects/GObjectIntrospection) is a middleware for language bindings of C library. GObject Introspection can generate language bindings automatically at runtime.\n+\n+Red Arrow uses [Apache Arrow GLib](https://github.com/apache/arrow/tree/master/c_glib) and [gobject-introspection gem](https://rubygems.org/gems/gobject-introspection) to generate Ruby bindings of Apache Arrow.\n+\n+Apache Arrow GLib is a C wrapper for [Apache Arrow C++](https://github.com/apache/arrow/tree/master/cpp). GObject Introspection can't use Apache Arrow C++ directly. Apache Arrow GLib is a bridge between Apache Arrow C++ and GObject Introspection.\n+\n+gobject-introspection gem is a Ruby bindings of GObject Introspection. Red Arrow uses GObject Introspection via gobject-introspection gem.\n+\n+## Install\n+\n+Install Apache Arrow GLib before install Red Arrow. Use [packages.red-data-tools.org](https://github.com/red-data-tools/packages.red-data-tools.org) for installing Apache Arrow GLib.\n+\n+Install Red Arrow after you install Apache Arrow GLib:\n+\n+```text\n+% gem install red-arrow\n+```\n+\n+## Usage\n+\n+```ruby\n+require \"arrow\"\n+\n+table = Arrow::Table.load(\"/dev/shm/data.arrow\")\n+# Process data in table\n+table.save(\"/dev/shm/data-processed.arrow\")\n+```\ndiff --git a/ruby/red-arrow/Rakefile b/ruby/red-arrow/Rakefile\nnew file mode 100644\nindex 0000000000..4380ba5f95\n--- /dev/null\n+++ b/ruby/red-arrow/Rakefile\n@@ -0,0 +1,41 @@\n+# -*- ruby -*-\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"rubygems\"\n+require \"bundler/gem_helper\"\n+\n+base_dir = File.join(__dir__)\n+\n+helper = Bundler::GemHelper.new(base_dir)\n+def helper.version_tag\n+  version\n+end\n+\n+helper.install\n+spec = helper.gemspec\n+\n+desc \"Run tests\"\n+task :test do\n+  cd(\"dependency-check\") do\n+    ruby(\"-S\", \"rake\")\n+  end\n+  ruby(\"test/run-test.rb\")\n+end\n+\n+task default: :test\ndiff --git a/ruby/red-arrow/dependency-check/Rakefile b/ruby/red-arrow/dependency-check/Rakefile\nnew file mode 100644\nindex 0000000000..e80e732501\n--- /dev/null\n+++ b/ruby/red-arrow/dependency-check/Rakefile\n@@ -0,0 +1,43 @@\n+# -*- ruby -*-\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"pkg-config\"\n+require \"native-package-installer\"\n+\n+case RUBY_PLATFORM\n+when /mingw|mswin/\n+  task :default => \"nothing\"\n+else\n+  task :default => \"dependency:check\"\n+end\n+\n+task :nothing do\n+end\n+\n+namespace :dependency do\n+  desc \"Check dependency\"\n+  task :check do\n+    unless PKGConfig.check_version?(\"arrow-glib\", 0, 9, 0)\n+      unless NativePackageInstaller.install(:debian => \"libarrow-glib-dev\",\n+                                            :redhat => \"arrow-glib-devel\")\n+        exit(false)\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/doc/text/development.md b/ruby/red-arrow/doc/text/development.md\nnew file mode 100644\nindex 0000000000..cc86de35f8\n--- /dev/null\n+++ b/ruby/red-arrow/doc/text/development.md\n@@ -0,0 +1,34 @@\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+\n+# Development\n+\n+## Naming convention\n+\n+### Reader and Writer\n+\n+Reader and Writer require an opened IO stream.\n+\n+### Loader and Saver\n+\n+Loader and Saver require a path. They are convenient classes.\n+\n+Loader opens the path and reads data by Reader.\n+\n+Writer opens the path and writes data by Writer.\ndiff --git a/ruby/red-arrow/example/read-file.rb b/ruby/red-arrow/example/read-file.rb\nnew file mode 100755\nindex 0000000000..9a99d3377b\n--- /dev/null\n+++ b/ruby/red-arrow/example/read-file.rb\n@@ -0,0 +1,36 @@\n+#!/usr/bin/env ruby\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"arrow\"\n+\n+Arrow::MemoryMappedInputStream.open(\"/tmp/file.arrow\") do |input|\n+  reader = Arrow::RecordBatchFileReader.new(input)\n+  fields = reader.schema.fields\n+  reader.each_with_index do |record_batch, i|\n+    puts(\"=\" * 40)\n+    puts(\"record-batch[#{i}]:\")\n+    fields.each do |field|\n+      field_name = field.name\n+      values = record_batch.collect do |record|\n+        record[field_name]\n+      end\n+      puts(\"  #{field_name}: #{values.inspect}\")\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/example/read-stream.rb b/ruby/red-arrow/example/read-stream.rb\nnew file mode 100755\nindex 0000000000..c7197120c6\n--- /dev/null\n+++ b/ruby/red-arrow/example/read-stream.rb\n@@ -0,0 +1,36 @@\n+#!/usr/bin/env ruby\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"arrow\"\n+\n+Arrow::MemoryMappedInputStream.open(\"/tmp/stream.arrow\") do |input|\n+  reader = Arrow::RecordBatchStreamReader.new(input)\n+  fields = reader.schema.fields\n+  reader.each_with_index do |record_batch, i|\n+    puts(\"=\" * 40)\n+    puts(\"record-batch[#{i}]:\")\n+    fields.each do |field|\n+      field_name = field.name\n+      values = record_batch.collect do |record|\n+        record[field_name]\n+      end\n+      puts(\"  #{field_name}: #{values.inspect}\")\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/example/write-file.rb b/ruby/red-arrow/example/write-file.rb\nnew file mode 100755\nindex 0000000000..c55ab2ef25\n--- /dev/null\n+++ b/ruby/red-arrow/example/write-file.rb\n@@ -0,0 +1,63 @@\n+#!/usr/bin/env ruby\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"arrow\"\n+\n+fields = [\n+  Arrow::Field.new(\"uint8\",  :uint8),\n+  Arrow::Field.new(\"uint16\", :uint16),\n+  Arrow::Field.new(\"uint32\", :uint32),\n+  Arrow::Field.new(\"uint64\", :uint64),\n+  Arrow::Field.new(\"int8\",   :int8),\n+  Arrow::Field.new(\"int16\",  :int16),\n+  Arrow::Field.new(\"int32\",  :int32),\n+  Arrow::Field.new(\"int64\",  :int64),\n+  Arrow::Field.new(\"float\",  :float),\n+  Arrow::Field.new(\"double\", :double),\n+]\n+schema = Arrow::Schema.new(fields)\n+\n+Arrow::FileOutputStream.open(\"/tmp/file.arrow\", false) do |output|\n+  Arrow::RecordBatchFileWriter.open(output, schema) do |writer|\n+    uints = [1, 2, 4, 8]\n+    ints = [1, -2, 4, -8]\n+    floats = [1.1, -2.2, 4.4, -8.8]\n+    columns = [\n+      Arrow::UInt8Array.new(uints),\n+      Arrow::UInt16Array.new(uints),\n+      Arrow::UInt32Array.new(uints),\n+      Arrow::UInt64Array.new(uints),\n+      Arrow::Int8Array.new(ints),\n+      Arrow::Int16Array.new(ints),\n+      Arrow::Int32Array.new(ints),\n+      Arrow::Int64Array.new(ints),\n+      Arrow::FloatArray.new(floats),\n+      Arrow::DoubleArray.new(floats),\n+    ]\n+\n+    record_batch = Arrow::RecordBatch.new(schema, 4, columns)\n+    writer.write_record_batch(record_batch)\n+\n+    sliced_columns = columns.collect do |column|\n+      column.slice(1, 3)\n+    end\n+    record_batch = Arrow::RecordBatch.new(schema, 3, sliced_columns)\n+    writer.write_record_batch(record_batch)\n+  end\n+end\ndiff --git a/ruby/red-arrow/example/write-stream.rb b/ruby/red-arrow/example/write-stream.rb\nnew file mode 100755\nindex 0000000000..fde4862062\n--- /dev/null\n+++ b/ruby/red-arrow/example/write-stream.rb\n@@ -0,0 +1,63 @@\n+#!/usr/bin/env ruby\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"arrow\"\n+\n+fields = [\n+  Arrow::Field.new(\"uint8\",  :uint8),\n+  Arrow::Field.new(\"uint16\", :uint16),\n+  Arrow::Field.new(\"uint32\", :uint32),\n+  Arrow::Field.new(\"uint64\", :uint64),\n+  Arrow::Field.new(\"int8\",   :int8),\n+  Arrow::Field.new(\"int16\",  :int16),\n+  Arrow::Field.new(\"int32\",  :int32),\n+  Arrow::Field.new(\"int64\",  :int64),\n+  Arrow::Field.new(\"float\",  :float),\n+  Arrow::Field.new(\"double\", :double),\n+]\n+schema = Arrow::Schema.new(fields)\n+\n+Arrow::FileOutputStream.open(\"/tmp/stream.arrow\", false) do |output|\n+  Arrow::RecordBatchStreamWriter.open(output, schema) do |writer|\n+    uints = [1, 2, 4, 8]\n+    ints = [1, -2, 4, -8]\n+    floats = [1.1, -2.2, 4.4, -8.8]\n+    columns = [\n+      Arrow::UInt8Array.new(uints),\n+      Arrow::UInt16Array.new(uints),\n+      Arrow::UInt32Array.new(uints),\n+      Arrow::UInt64Array.new(uints),\n+      Arrow::Int8Array.new(ints),\n+      Arrow::Int16Array.new(ints),\n+      Arrow::Int32Array.new(ints),\n+      Arrow::Int64Array.new(ints),\n+      Arrow::FloatArray.new(floats),\n+      Arrow::DoubleArray.new(floats),\n+    ]\n+\n+    record_batch = Arrow::RecordBatch.new(schema, 4, columns)\n+    writer.write_record_batch(record_batch)\n+\n+    sliced_columns = columns.collect do |column|\n+      column.slice(1, 3)\n+    end\n+    record_batch = Arrow::RecordBatch.new(schema, 3, sliced_columns)\n+    writer.write_record_batch(record_batch)\n+  end\n+end\ndiff --git a/ruby/red-arrow/image/red-arrow.png b/ruby/red-arrow/image/red-arrow.png\nnew file mode 100644\nindex 0000000000..6db9b4b7a6\nBinary files /dev/null and b/ruby/red-arrow/image/red-arrow.png differ\ndiff --git a/ruby/red-arrow/lib/arrow.rb b/ruby/red-arrow/lib/arrow.rb\nnew file mode 100644\nindex 0000000000..95dabee198\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow.rb\n@@ -0,0 +1,29 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"gobject-introspection\"\n+\n+require \"arrow/version\"\n+\n+require \"arrow/loader\"\n+\n+module Arrow\n+  class Error < StandardError\n+  end\n+\n+  Loader.load\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/array-builder.rb b/ruby/red-arrow/lib/arrow/array-builder.rb\nnew file mode 100644\nindex 0000000000..8edb3c4bfb\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/array-builder.rb\n@@ -0,0 +1,124 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"date\"\n+\n+module Arrow\n+  class ArrayBuilder\n+    class << self\n+      def build(values)\n+        if self != ArrayBuilder\n+          builder = new\n+          return builder.build(values)\n+        end\n+\n+        builder_class = nil\n+        values.each do |value|\n+          case value\n+          when nil\n+            # Ignore\n+          when true, false\n+            return BooleanArray.new(values)\n+          when String\n+            return StringArray.new(values)\n+          when Float\n+            return DoubleArray.new(values)\n+          when Integer\n+            if value < 0\n+              builder = IntArrayBuilder.new\n+              return builder.build(values)\n+            else\n+              builder_class = UIntArrayBuilder\n+            end\n+          when Time\n+            data_type = TimestampDataType.new(:nano)\n+            builder = TimestampArrayBuilder.new(data_type)\n+            return builder.build(values)\n+          when DateTime\n+            return Date64Array.new(values)\n+          when Date\n+            return Date32Array.new(values)\n+          else\n+            return StringArray.new(values)\n+          end\n+        end\n+        if builder_class\n+          builder_class.new.build(values)\n+        else\n+          Arrow::StringArray.new(values)\n+        end\n+      end\n+    end\n+\n+    def build(values)\n+      value_convertable = respond_to?(:convert_to_arrow_value, true)\n+      start_index = 0\n+      current_index = 0\n+      status = :value\n+\n+      values.each do |value|\n+        if value.nil?\n+          if status == :value\n+            if start_index != current_index\n+              target_values = values[start_index...current_index]\n+              if value_convertable\n+                target_values = target_values.collect do |v|\n+                  convert_to_arrow_value(v)\n+                end\n+              end\n+              append_values(target_values, nil)\n+              start_index = current_index\n+            end\n+            status = :null\n+          end\n+        else\n+          if status == :null\n+            append_nulls(current_index - start_index)\n+            start_index = current_index\n+            status = :value\n+          end\n+        end\n+        current_index += 1\n+      end\n+      if start_index != current_index\n+        if status == :value\n+          if start_index == 0 and current_index == values.size\n+            target_values = values\n+          else\n+            target_values = values[start_index...current_index]\n+          end\n+          if value_convertable\n+            target_values = target_values.collect do |v|\n+              convert_to_arrow_value(v)\n+            end\n+          end\n+          append_values(target_values, nil)\n+        else\n+          append_nulls(current_index - start_index)\n+        end\n+      end\n+\n+      finish\n+    end\n+\n+    def append_nulls(n)\n+      n.times do\n+        append_null\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/array.rb b/ruby/red-arrow/lib/arrow/array.rb\nnew file mode 100644\nindex 0000000000..7a0d053901\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/array.rb\n@@ -0,0 +1,63 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class Array\n+    include Enumerable\n+\n+    class << self\n+      def new(values)\n+        builder_class_name = \"#{name}Builder\"\n+        if const_defined?(builder_class_name)\n+          builder_class = const_get(builder_class_name)\n+          builder_class.build(values)\n+        else\n+          super\n+        end\n+      end\n+    end\n+\n+    def [](i)\n+      i += length if i < 0\n+      if null?(i)\n+        nil\n+      else\n+        get_value(i)\n+      end\n+    end\n+\n+    def each\n+      return to_enum(__method__) unless block_given?\n+\n+      length.times do |i|\n+        yield(self[i])\n+      end\n+    end\n+\n+    def reverse_each\n+      return to_enum(__method__) unless block_given?\n+\n+      (length - 1).downto(0) do |i|\n+        yield(self[i])\n+      end\n+    end\n+\n+    def to_arrow\n+      self\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/block-closable.rb b/ruby/red-arrow/lib/arrow/block-closable.rb\nnew file mode 100644\nindex 0000000000..473ee14144\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/block-closable.rb\n@@ -0,0 +1,31 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  module BlockClosable\n+    def open(*args, &block)\n+      io = new(*args)\n+      return io unless block\n+\n+      begin\n+        yield(io)\n+      ensure\n+        io.close\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/chunked-array.rb b/ruby/red-arrow/lib/arrow/chunked-array.rb\nnew file mode 100644\nindex 0000000000..c720d229c3\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/chunked-array.rb\n@@ -0,0 +1,84 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class ChunkedArray\n+    include Enumerable\n+\n+    alias_method :chunks_raw, :chunks\n+    def chunks\n+      @chunks ||= chunks_raw\n+    end\n+\n+    def null?(i)\n+      chunks.each do |array|\n+        return array.null?(i) if i < array.length\n+        i -= array.length\n+      end\n+      nil\n+    end\n+\n+    def valid?(i)\n+      chunks.each do |array|\n+        return array.valid?(i) if i < array.length\n+        i -= array.length\n+      end\n+      nil\n+    end\n+\n+    def [](i)\n+      i += length if i < 0\n+      chunks.each do |array|\n+        return array[i] if i < array.length\n+        i -= array.length\n+      end\n+      nil\n+    end\n+\n+    def each(&block)\n+      return to_enum(__method__) unless block_given?\n+\n+      chunks.each do |array|\n+        array.each(&block)\n+      end\n+    end\n+\n+    def reverse_each(&block)\n+      return to_enum(__method__) unless block_given?\n+\n+      chunks.reverse_each do |array|\n+        array.reverse_each(&block)\n+      end\n+    end\n+\n+    def each_chunk(&block)\n+      chunks.each(&block)\n+    end\n+\n+    def pack\n+      first_chunk = chunks.first\n+      data_type = first_chunk.value_data_type\n+      case data_type\n+      when TimestampDataType\n+        builder = TimestampArrayBuilder.new(data_type)\n+        builder.build(to_a)\n+      else\n+        first_chunk.class.new(to_a)\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/column.rb b/ruby/red-arrow/lib/arrow/column.rb\nnew file mode 100644\nindex 0000000000..de385c0462\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/column.rb\n@@ -0,0 +1,50 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class Column\n+    include Enumerable\n+\n+    def null?(i)\n+      data.null?(i)\n+    end\n+\n+    def valid?(i)\n+      data.valid?(i)\n+    end\n+\n+    def [](i)\n+      data[i]\n+    end\n+\n+    def each(&block)\n+      return to_enum(__method__) unless block_given?\n+\n+      data.each(&block)\n+    end\n+\n+    def reverse_each(&block)\n+      return to_enum(__method__) unless block_given?\n+\n+      data.reverse_each(&block)\n+    end\n+\n+    def pack\n+      self.class.new(field, data.pack)\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/csv-loader.rb b/ruby/red-arrow/lib/arrow/csv-loader.rb\nnew file mode 100644\nindex 0000000000..f3ad6cee9b\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/csv-loader.rb\n@@ -0,0 +1,250 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"csv\"\n+require \"pathname\"\n+require \"time\"\n+\n+module Arrow\n+  class CSVLoader\n+    class << self\n+      def load(path_or_data, **options)\n+        new(path_or_data, **options).load\n+      end\n+    end\n+\n+    def initialize(path_or_data, **options)\n+      @path_or_data = path_or_data\n+      @options = options\n+    end\n+\n+    def load\n+      case @path_or_data\n+      when Pathname\n+        load_from_path(@path_or_data.to_path)\n+      when /\\A.+\\.csv\\z/i\n+        load_from_path(@path_or_data)\n+      else\n+        load_data(@path_or_data)\n+      end\n+    end\n+\n+    private\n+    def open_csv(path, **options)\n+      CSV.open(path, **options) do |csv|\n+        yield(csv)\n+      end\n+    end\n+\n+    def parse_csv_data(data, **options)\n+      csv = CSV.new(data, **options)\n+      begin\n+        yield(csv)\n+      ensure\n+        csv.close\n+      end\n+    end\n+\n+    def read_csv(csv)\n+      reader = CSVReader.new(csv)\n+      reader.read\n+    end\n+\n+    def load_from_path(path)\n+      options = update_csv_parse_options(@options, :open_csv, path)\n+      open_csv(path, **options) do |csv|\n+        read_csv(csv)\n+      end\n+    end\n+\n+    def load_data(data)\n+      options = update_csv_parse_options(@options, :parse_csv_data, data)\n+      parse_csv_data(data, **options) do |csv|\n+        read_csv(csv)\n+      end\n+    end\n+\n+    def selective_converter(target_index)\n+      lambda do |field, field_info|\n+        if target_index.nil? or field_info.index == target_index\n+          yield(field)\n+        else\n+          field\n+        end\n+      end\n+    end\n+\n+    BOOLEAN_CONVERTER = lambda do |field|\n+      begin\n+        encoded_field = field.encode(CSV::ConverterEncoding)\n+      rescue EncodingError\n+        field\n+      else\n+        case encoded_field\n+        when \"true\"\n+          true\n+        when \"false\"\n+          false\n+        else\n+          field\n+        end\n+      end\n+    end\n+\n+    ISO8601_CONVERTER = lambda do |field|\n+      begin\n+        encoded_field = field.encode(CSV::ConverterEncoding)\n+      rescue EncodingError\n+        field\n+      else\n+        begin\n+          Time.iso8601(encoded_field)\n+        rescue ArgumentError\n+          field\n+        end\n+      end\n+    end\n+\n+    def update_csv_parse_options(options, create_csv, *args)\n+      if options.key?(:converters)\n+        new_options = options.dup\n+      else\n+        converters = [:all, BOOLEAN_CONVERTER, ISO8601_CONVERTER]\n+        new_options = options.merge(converters: converters)\n+      end\n+\n+      unless options.key?(:headers)\n+        __send__(create_csv, *args, **new_options) do |csv|\n+          new_options[:headers] = have_header?(csv)\n+        end\n+      end\n+      unless options.key?(:converters)\n+        __send__(create_csv, *args, **new_options) do |csv|\n+          new_options[:converters] = detect_robust_converters(csv)\n+        end\n+      end\n+\n+      new_options\n+    end\n+\n+    def have_header?(csv)\n+      if @options.key?(:headers)\n+        return @options[:headers]\n+      end\n+\n+      row1 = csv.shift\n+      return false if row1.nil?\n+      return false if row1.any?(&:nil?)\n+\n+      row2 = csv.shift\n+      return nil if row2.nil?\n+      return true if row2.any?(&:nil?)\n+\n+      return false if row1.any? {|value| not value.is_a?(String)}\n+\n+      if row1.collect(&:class) != row2.collect(&:class)\n+        return true\n+      end\n+\n+      nil\n+    end\n+\n+    def detect_robust_converters(csv)\n+      column_types = []\n+      csv.each do |row|\n+        if row.is_a?(CSV::Row)\n+          each_value = Enumerator.new do |yielder|\n+            row.each do |_name, value|\n+              yielder << value\n+            end\n+          end\n+        else\n+          each_value = row.each\n+        end\n+        each_value.with_index do |value, i|\n+          current_column_type = column_types[i]\n+          next if current_column_type == :string\n+\n+          candidate_type = nil\n+          case value\n+          when nil\n+            next\n+          when \"true\", \"false\", true, false\n+            candidate_type = :boolean\n+          when Integer\n+            candidate_type = :integer\n+            if current_column_type == :float\n+              candidate_type = :float\n+            end\n+          when Float\n+            candidate_type = :float\n+            if current_column_type == :integer\n+              column_types[i] = candidate_type\n+            end\n+          when Time\n+            candidate_type = :time\n+          when DateTime\n+            candidate_type = :date_time\n+          when Date\n+            candidate_type = :date\n+          when String\n+            next if value.empty?\n+            candidate_type = :string\n+          else\n+            candidate_type = :string\n+          end\n+\n+          column_types[i] ||= candidate_type\n+          if column_types[i] != candidate_type\n+            column_types[i] = :string\n+          end\n+        end\n+      end\n+\n+      converters = []\n+      column_types.each_with_index do |type, i|\n+        case type\n+        when :boolean\n+          converters << selective_converter(i, &BOOLEAN_CONVERTER)\n+        when :integer\n+          converters << selective_converter(i) do |field|\n+            if field.nil? or field.empty?\n+              nil\n+            else\n+              CSV::Converters[:integer].call(field)\n+            end\n+          end\n+        when :float\n+          converters << selective_converter(i) do |field|\n+            if field.nil? or field.empty?\n+              nil\n+            else\n+              CSV::Converters[:float].call(field)\n+            end\n+          end\n+        when :time\n+          converters << selective_converter(i, &ISO8601_CONVERTER)\n+        when :date_time\n+          converters << selective_converter(i, &CSV::Converters[:date_time])\n+        when :date\n+          converters << selective_converter(i, &CSV::Converters[:date])\n+        end\n+      end\n+      converters\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/csv-reader.rb b/ruby/red-arrow/lib/arrow/csv-reader.rb\nnew file mode 100644\nindex 0000000000..4a596f0810\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/csv-reader.rb\n@@ -0,0 +1,54 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"csv\"\n+\n+module Arrow\n+  class CSVReader\n+    def initialize(csv)\n+      @csv = csv\n+    end\n+\n+    def read\n+      values_set = []\n+      @csv.each do |row|\n+        if row.is_a?(CSV::Row)\n+          row = row.collect(&:last)\n+        end\n+        row.each_with_index do |value, i|\n+          values = (values_set[i] ||= [])\n+          values << value\n+        end\n+      end\n+      return nil if values_set.empty?\n+\n+      arrays = values_set.collect.with_index do |values, i|\n+        ArrayBuilder.build(values)\n+      end\n+      if @csv.headers\n+        names = @csv.headers\n+      else\n+        names = arrays.size.times.collect(&:to_s)\n+      end\n+      raw_table = {}\n+      names.each_with_index do |name, i|\n+        raw_table[name] = arrays[i]\n+      end\n+      Table.new(raw_table)\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/date32-array-builder.rb b/ruby/red-arrow/lib/arrow/date32-array-builder.rb\nnew file mode 100644\nindex 0000000000..dedbba85e8\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/date32-array-builder.rb\n@@ -0,0 +1,32 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class Date32ArrayBuilder\n+    private\n+    UNIX_EPOCH = Date.new(1970, 1, 1)\n+    def convert_to_arrow_value(value)\n+      value = value.to_date if value.respond_to?(:to_date)\n+\n+      if value.is_a?(Date)\n+        (value - UNIX_EPOCH).to_i\n+      else\n+        value\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/date32-array.rb b/ruby/red-arrow/lib/arrow/date32-array.rb\nnew file mode 100644\nindex 0000000000..121dbcb553\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/date32-array.rb\n@@ -0,0 +1,30 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class Date32Array\n+    def get_value(i)\n+      to_date(get_raw_value(i))\n+    end\n+\n+    private\n+    UNIX_EPOCH = 2440588\n+    def to_date(raw_value)\n+      Date.jd(UNIX_EPOCH + raw_value)\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/date64-array-builder.rb b/ruby/red-arrow/lib/arrow/date64-array-builder.rb\nnew file mode 100644\nindex 0000000000..d9ab30ff7f\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/date64-array-builder.rb\n@@ -0,0 +1,33 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class Date64ArrayBuilder\n+    private\n+    def convert_to_arrow_value(value)\n+      if value.respond_to?(:to_time) and not value.is_a?(Time)\n+        value = value.to_time\n+      end\n+\n+      if value.is_a?(Time)\n+        value.to_i * 1_000 + value.usec / 1_000\n+      else\n+        value\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/date64-array.rb b/ruby/red-arrow/lib/arrow/date64-array.rb\nnew file mode 100644\nindex 0000000000..8feae42aef\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/date64-array.rb\n@@ -0,0 +1,29 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class Date64Array\n+    def get_value(i)\n+      to_datetime(get_raw_value(i))\n+    end\n+\n+    private\n+    def to_datetime(raw_value)\n+      Time.at(*raw_value.divmod(1_000)).to_datetime\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/field.rb b/ruby/red-arrow/lib/arrow/field.rb\nnew file mode 100644\nindex 0000000000..b1ed1149de\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/field.rb\n@@ -0,0 +1,34 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class Field\n+    alias_method :initialize_raw, :initialize\n+    def initialize(name, data_type)\n+      case data_type\n+      when String, Symbol\n+        data_type_name = data_type.to_s.capitalize.gsub(/\\AUint/, \"UInt\")\n+        data_type_class_name = \"#{data_type_name}DataType\"\n+        if Arrow.const_defined?(data_type_class_name)\n+          data_type_class = Arrow.const_get(data_type_class_name)\n+          data_type = data_type_class.new\n+        end\n+      end\n+      initialize_raw(name, data_type)\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/group.rb b/ruby/red-arrow/lib/arrow/group.rb\nnew file mode 100644\nindex 0000000000..7ef8dc3d74\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/group.rb\n@@ -0,0 +1,175 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  # Experimental\n+  #\n+  # TODO: Almost codes should be implemented in Apache Arrow C++.\n+  class Group\n+    def initialize(table, keys)\n+      @table = table\n+      @keys = keys\n+    end\n+\n+    def count\n+      key_names = @keys.collect(&:to_s)\n+      target_columns = @table.columns.reject do |column|\n+        key_names.include?(column.name)\n+      end\n+      aggregate(target_columns) do |column, indexes|\n+        n = 0\n+        indexes.each do |index|\n+          n += 1 unless column.null?(index)\n+        end\n+        n\n+      end\n+    end\n+\n+    def sum\n+      key_names = @keys.collect(&:to_s)\n+      target_columns = @table.columns.reject do |column|\n+        key_names.include?(column.name) or\n+          not column.data_type.is_a?(NumericDataType)\n+      end\n+      aggregate(target_columns) do |column, indexes|\n+        n = 0\n+        indexes.each do |index|\n+          value = column[index]\n+          n += value unless value.nil?\n+        end\n+        n\n+      end\n+    end\n+\n+    def average\n+      key_names = @keys.collect(&:to_s)\n+      target_columns = @table.columns.reject do |column|\n+        key_names.include?(column.name) or\n+          not column.data_type.is_a?(NumericDataType)\n+      end\n+      aggregate(target_columns) do |column, indexes|\n+        average = 0.0\n+        n = 0\n+        indexes.each do |index|\n+          value = column[index]\n+          unless value.nil?\n+            n += 1\n+            average += (value - average) / n\n+          end\n+        end\n+        average\n+      end\n+    end\n+\n+    def min\n+      key_names = @keys.collect(&:to_s)\n+      target_columns = @table.columns.reject do |column|\n+        key_names.include?(column.name) or\n+          not column.data_type.is_a?(NumericDataType)\n+      end\n+      aggregate(target_columns) do |column, indexes|\n+        n = nil\n+        indexes.each do |index|\n+          value = column[index]\n+          next if value.nil?\n+          n ||= value\n+          n = value if value < n\n+        end\n+        n\n+      end\n+    end\n+\n+    def max\n+      key_names = @keys.collect(&:to_s)\n+      target_columns = @table.columns.reject do |column|\n+        key_names.include?(column.name) or\n+          not column.data_type.is_a?(NumericDataType)\n+      end\n+      aggregate(target_columns) do |column, indexes|\n+        n = nil\n+        indexes.each do |index|\n+          value = column[index]\n+          next if value.nil?\n+          n ||= value\n+          n = value if value > n\n+        end\n+        n\n+      end\n+    end\n+\n+    private\n+    def aggregate(target_columns)\n+      sort_values = @table.n_rows.times.collect do |i|\n+        key_values = @keys.collect do |key|\n+          @table[key][i]\n+        end\n+        [key_values, i]\n+      end\n+      sorted = sort_values.sort_by do |key_values, i|\n+        key_values\n+      end\n+\n+      grouped_keys = []\n+      aggregated_arrays_raw = []\n+      target_columns.size.times do\n+        aggregated_arrays_raw << []\n+      end\n+      indexes = []\n+      sorted.each do |key_values, i|\n+        if grouped_keys.empty?\n+          grouped_keys << key_values\n+          indexes.clear\n+          indexes << i\n+        else\n+          if key_values == grouped_keys.last\n+            indexes << i\n+          else\n+            grouped_keys << key_values\n+            target_columns.each_with_index do |column, j|\n+              aggregated_arrays_raw[j] << yield(column, indexes)\n+            end\n+            indexes.clear\n+            indexes << i\n+          end\n+        end\n+      end\n+      target_columns.each_with_index do |column, j|\n+        aggregated_arrays_raw[j] << yield(column, indexes)\n+      end\n+\n+      grouped_key_arrays_raw = grouped_keys.transpose\n+      columns = @keys.collect.with_index do |key, i|\n+        key_column = @table[key]\n+        key_column_array_class = key_column.data.chunks.first.class\n+        if key_column_array_class == TimestampArray\n+          builder = TimestampArrayBuilder.new(key_column.data_type)\n+          key_column_array = builder.build(grouped_key_arrays_raw[i])\n+        else\n+          key_column_array =\n+            key_column_array_class.new(grouped_key_arrays_raw[i])\n+        end\n+        Column.new(key_column.field, key_column_array)\n+      end\n+      target_columns.each_with_index do |column, i|\n+        array = ArrayBuilder.build(aggregated_arrays_raw[i])\n+        field = Field.new(column.name, array.value_data_type)\n+        columns << Column.new(field, array)\n+      end\n+      Table.new(columns)\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/loader.rb b/ruby/red-arrow/lib/arrow/loader.rb\nnew file mode 100644\nindex 0000000000..2366393e8a\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/loader.rb\n@@ -0,0 +1,93 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"arrow/block-closable\"\n+\n+module Arrow\n+  class Loader < GObjectIntrospection::Loader\n+    class << self\n+      def load\n+        super(\"Arrow\", Arrow)\n+      end\n+    end\n+\n+    private\n+    def post_load(repository, namespace)\n+      require_libraries\n+    end\n+\n+    def require_libraries\n+      require \"arrow/array\"\n+      require \"arrow/array-builder\"\n+      require \"arrow/chunked-array\"\n+      require \"arrow/column\"\n+      require \"arrow/csv-loader\"\n+      require \"arrow/csv-reader\"\n+      require \"arrow/date32-array\"\n+      require \"arrow/date32-array-builder\"\n+      require \"arrow/date64-array\"\n+      require \"arrow/date64-array-builder\"\n+      require \"arrow/field\"\n+      require \"arrow/record\"\n+      require \"arrow/record-batch\"\n+      require \"arrow/rolling-window\"\n+      require \"arrow/slicer\"\n+      require \"arrow/table\"\n+      require \"arrow/table-formatter\"\n+      require \"arrow/table-list-formatter\"\n+      require \"arrow/table-table-formatter\"\n+      require \"arrow/table-loader\"\n+      require \"arrow/table-saver\"\n+      require \"arrow/tensor\"\n+      require \"arrow/timestamp-array\"\n+      require \"arrow/timestamp-array-builder\"\n+\n+      require \"arrow/record-batch-file-reader\"\n+      require \"arrow/record-batch-stream-reader\"\n+    end\n+\n+    def load_object_info(info)\n+      super\n+\n+      klass = @base_module.const_get(rubyish_class_name(info))\n+      if klass.method_defined?(:close)\n+        klass.extend(BlockClosable)\n+      end\n+    end\n+\n+    def load_method_info(info, klass, method_name)\n+      case klass.name\n+      when \"Arrow::StringArray\"\n+        case method_name\n+        when \"get_value\"\n+          method_name = \"get_raw_value\"\n+        when \"get_string\"\n+          method_name = \"get_value\"\n+        end\n+        super(info, klass, method_name)\n+      when \"Arrow::TimestampArray\", \"Arrow::Date32Array\", \"Arrow::Date64Array\"\n+        case method_name\n+        when \"get_value\"\n+          method_name = \"get_raw_value\"\n+        end\n+        super(info, klass, method_name)\n+      else\n+       super\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/record-batch-file-reader.rb b/ruby/red-arrow/lib/arrow/record-batch-file-reader.rb\nnew file mode 100644\nindex 0000000000..86a757e320\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/record-batch-file-reader.rb\n@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class RecordBatchFileReader\n+    include Enumerable\n+\n+    def each\n+      n_record_batches.times do |i|\n+        yield(get_record_batch(i))\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/record-batch-stream-reader.rb b/ruby/red-arrow/lib/arrow/record-batch-stream-reader.rb\nnew file mode 100644\nindex 0000000000..fa15c80009\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/record-batch-stream-reader.rb\n@@ -0,0 +1,30 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class RecordBatchStreamReader\n+    include Enumerable\n+\n+    def each\n+      loop do\n+        record_batch = next_record_batch\n+        break if record_batch.nil?\n+        yield(record_batch)\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/record-batch.rb b/ruby/red-arrow/lib/arrow/record-batch.rb\nnew file mode 100644\nindex 0000000000..f5f8ea2e77\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/record-batch.rb\n@@ -0,0 +1,45 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"arrow/record-containable\"\n+\n+module Arrow\n+  class RecordBatch\n+    include RecordContainable\n+    include Enumerable\n+\n+    alias_method :each, :each_record\n+\n+    alias_method :columns_raw, :columns\n+    def columns\n+      @columns ||= columns_raw\n+    end\n+\n+    def respond_to_missing?(name, include_private)\n+      return true if find_column(name)\n+      super\n+    end\n+\n+    def method_missing(name, *args, &block)\n+      if args.empty?\n+        column = find_column(name)\n+        return column if column\n+      end\n+      super\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/record-containable.rb b/ruby/red-arrow/lib/arrow/record-containable.rb\nnew file mode 100644\nindex 0000000000..f73d1a8c12\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/record-containable.rb\n@@ -0,0 +1,73 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  module RecordContainable\n+    def each_column(&block)\n+      return to_enum(__method__) unless block_given?\n+\n+      columns.each(&block)\n+    end\n+\n+    def each_record(reuse_record: false)\n+      unless block_given?\n+        return to_enum(__method__, reuse_record: reuse_record)\n+      end\n+\n+      if reuse_record\n+        record = Record.new(self, nil)\n+        n_rows.times do |i|\n+          record.index = i\n+          yield(record)\n+        end\n+      else\n+        n_rows.times do |i|\n+          yield(Record.new(self, i))\n+        end\n+      end\n+    end\n+\n+    def find_column(name_or_index)\n+      case name_or_index\n+      when String, Symbol\n+        name = name_or_index.to_s\n+        index = resolve_column_name(name)\n+        return nil if index.nil?\n+        columns[index]\n+      when Integer\n+        index = name_or_index\n+        columns[index]\n+      else\n+        message = \"column name or index must be String, Symbol or Integer\"\n+        raise ArgumentError, message\n+      end\n+    end\n+\n+    private\n+    def resolve_column_name(name)\n+      (@column_name_to_index ||= build_column_name_resolve_table)[name]\n+    end\n+\n+    def build_column_name_resolve_table\n+      table = {}\n+      schema.fields.each_with_index do |field, i|\n+        table[field.name] = i\n+      end\n+      table\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/record.rb b/ruby/red-arrow/lib/arrow/record.rb\nnew file mode 100644\nindex 0000000000..70bd215033\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/record.rb\n@@ -0,0 +1,57 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class Record\n+    attr_accessor :index\n+    def initialize(record_container, index)\n+      @record_container = record_container\n+      @index = index\n+    end\n+\n+    def [](column_name_or_column_index)\n+      column = @record_container.find_column(column_name_or_column_index)\n+      return nil if column.nil?\n+      column[@index]\n+    end\n+\n+    def columns\n+      @record_container.columns\n+    end\n+\n+    def to_h\n+      attributes = {}\n+      @record_container.schema.fields.each_with_index do |field, i|\n+        attributes[field.name] = self[i]\n+      end\n+      attributes\n+    end\n+\n+    def respond_to_missing?(name, include_private)\n+      return true if @record_container.find_column(name)\n+      super\n+    end\n+\n+    def method_missing(name, *args, &block)\n+      if args.empty?\n+        column = @record_container.find_column(name)\n+        return column[@index] if column\n+      end\n+      super\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/rolling-window.rb b/ruby/red-arrow/lib/arrow/rolling-window.rb\nnew file mode 100644\nindex 0000000000..1db03bb23e\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/rolling-window.rb\n@@ -0,0 +1,48 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  # Experimental\n+  #\n+  # TODO: Almost codes should be implemented in Apache Arrow C++.\n+  class RollingWindow\n+    def initialize(table, size)\n+      @table = table\n+      @size = size\n+    end\n+\n+    def lag(key, diff: 1)\n+      column = @table[key]\n+      if @size\n+        windows = column.each_slice(@size)\n+      else\n+        windows = column\n+      end\n+      lag_values = [nil] * diff\n+      windows.each_cons(diff + 1) do |values|\n+        target = values[0]\n+        current = values[1]\n+        if target.nil? or current.nil?\n+          lag_values << nil\n+        else\n+          lag_values << current - target\n+        end\n+      end\n+      ArrayBuilder.build(lag_values)\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/slicer.rb b/ruby/red-arrow/lib/arrow/slicer.rb\nnew file mode 100644\nindex 0000000000..fd2033d37c\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/slicer.rb\n@@ -0,0 +1,454 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  # Experimental\n+  #\n+  # TODO: Almost codes should be implemented in Apache Arrow C++.\n+  class Slicer\n+    def initialize(table)\n+      @table = table\n+    end\n+\n+    def [](column_name)\n+      column = @table[column_name]\n+      return nil if column.nil?\n+      ColumnCondition.new(column)\n+    end\n+\n+    def respond_to_missing?(name, include_private)\n+      return true if self[name]\n+      super\n+    end\n+\n+    def method_missing(name, *args, &block)\n+      if args.empty?\n+        column_condition = self[name]\n+        return column_condition if column_condition\n+      end\n+      super\n+    end\n+\n+    class Condition\n+      def evaluate\n+        message = \"Slicer::Condition must define \\#evaluate: #{inspect}\"\n+        raise NotImplementedError.new(message)\n+      end\n+\n+      def &(condition)\n+        AndCondition.new(self, condition)\n+      end\n+\n+      def |(condition)\n+        OrCondition.new(self, condition)\n+      end\n+\n+      def ^(condition)\n+        XorCondition.new(self, condition)\n+      end\n+    end\n+\n+    class LogicalCondition < Condition\n+      def initialize(condition1, condition2)\n+        @condition1 = condition1\n+        @condition2 = condition2\n+      end\n+\n+      def evaluate\n+        values1 = @condition1.evaluate.each\n+        values2 = @condition2.evaluate.each\n+        raw_array = []\n+        begin\n+          loop do\n+            value1 = values1.next\n+            value2 = values2.next\n+            if value1.nil? or value2.nil?\n+              raw_array << nil\n+            else\n+              raw_array << evaluate_value(value1, value2)\n+            end\n+          end\n+        rescue StopIteration\n+        end\n+        BooleanArray.new(raw_array)\n+      end\n+    end\n+\n+    class AndCondition < LogicalCondition\n+      private\n+      def evaluate_value(value1, value2)\n+        value1 and value2\n+      end\n+    end\n+\n+    class OrCondition < LogicalCondition\n+      private\n+      def evaluate_value(value1, value2)\n+        value1 or value2\n+      end\n+    end\n+\n+    class XorCondition < LogicalCondition\n+      private\n+      def evaluate_value(value1, value2)\n+        value1 ^ value2\n+      end\n+    end\n+\n+    class ColumnCondition < Condition\n+      def initialize(column)\n+        @column = column\n+      end\n+\n+      def evaluate\n+        data = @column.data\n+\n+        case @column.data_type\n+        when BooleanDataType\n+          data\n+        else\n+          if data.n_chunks == 1\n+            data.get_chunk(0).cast(BooleanDataType.new, nil)\n+          else\n+            arrays = data.each_chunk.collect do |chunk|\n+              chunk.cast(BooleanDataType.new, nil)\n+            end\n+            ChunkedArray.new(arrays)\n+          end\n+        end\n+      end\n+\n+      def !@\n+        NotColumnCondition.new(@column)\n+      end\n+\n+      def null?\n+        self == nil\n+      end\n+\n+      def valid?\n+        self != nil\n+      end\n+\n+      def ==(value)\n+        EqualCondition.new(@column, value)\n+      end\n+\n+      def !=(value)\n+        NotEqualCondition.new(@column, value)\n+      end\n+\n+      def <(value)\n+        LessCondition.new(@column, value)\n+      end\n+\n+      def <=(value)\n+        LessEqualCondition.new(@column, value)\n+      end\n+\n+      def >(value)\n+        GreaterCondition.new(@column, value)\n+      end\n+\n+      def >=(value)\n+        GreaterEqualCondition.new(@column, value)\n+      end\n+\n+      def in?(values)\n+        InCondition.new(@column, values)\n+      end\n+\n+      def select(&block)\n+        SelectCondition.new(@column, block)\n+      end\n+\n+      def reject(&block)\n+        RejectCondition.new(@column, block)\n+      end\n+    end\n+\n+    class NotColumnCondition < Condition\n+      def initialize(column)\n+        @column = column\n+      end\n+\n+      def evaluate\n+        data = @column.data\n+        raw_array = []\n+        data.each_chunk do |chunk|\n+          if chunk.is_a?(BooleanArray)\n+            boolean_array = chunk\n+          else\n+            boolean_array = chunk.cast(BooleanDataType.new, nil)\n+          end\n+          boolean_array.each do |value|\n+            if value.nil?\n+              raw_array << value\n+            else\n+              raw_array << !value\n+            end\n+          end\n+        end\n+        BooleanArray.new(raw_array)\n+      end\n+\n+      def !@\n+        ColumnCondition.new(@column)\n+      end\n+    end\n+\n+    class EqualCondition < Condition\n+      def initialize(column, value)\n+        @column = column\n+        @value = value\n+      end\n+\n+      def !@\n+        NotEqualCondition.new(@column, @value)\n+      end\n+\n+      def evaluate\n+        case @value\n+        when nil\n+          raw_array = @column.collect(&:nil?)\n+          BooleanArray.new(raw_array)\n+        else\n+          raw_array = @column.collect do |value|\n+            if value.nil?\n+              nil\n+            else\n+              @value == value\n+            end\n+          end\n+          BooleanArray.new(raw_array)\n+        end\n+      end\n+    end\n+\n+    class NotEqualCondition < Condition\n+      def initialize(column, value)\n+        @column = column\n+        @value = value\n+      end\n+\n+      def !@\n+        EqualCondition.new(@column, @value)\n+      end\n+\n+      def evaluate\n+        case @value\n+        when nil\n+          if @column.n_nulls.zero?\n+            raw_array = [true] * @column.length\n+          else\n+            raw_array = @column.length.times.collect do |i|\n+              @column.valid?(i)\n+            end\n+          end\n+          BooleanArray.new(raw_array)\n+        else\n+          raw_array = @column.collect do |value|\n+            if value.nil?\n+              nil\n+            else\n+              @value != value\n+            end\n+          end\n+          BooleanArray.new(raw_array)\n+        end\n+      end\n+    end\n+\n+    class LessCondition < Condition\n+      def initialize(column, value)\n+        @column = column\n+        @value = value\n+      end\n+\n+      def !@\n+        GreaterEqualCondition.new(@column, @value)\n+      end\n+\n+      def evaluate\n+        raw_array = @column.collect do |value|\n+          if value.nil?\n+            nil\n+          else\n+            @value > value\n+          end\n+        end\n+        BooleanArray.new(raw_array)\n+      end\n+    end\n+\n+    class LessEqualCondition < Condition\n+      def initialize(column, value)\n+        @column = column\n+        @value = value\n+      end\n+\n+      def !@\n+        GreaterCondition.new(@column, @value)\n+      end\n+\n+      def evaluate\n+        raw_array = @column.collect do |value|\n+          if value.nil?\n+            nil\n+          else\n+            @value >= value\n+          end\n+        end\n+        BooleanArray.new(raw_array)\n+      end\n+    end\n+\n+    class GreaterCondition < Condition\n+      def initialize(column, value)\n+        @column = column\n+        @value = value\n+      end\n+\n+      def !@\n+        LessEqualCondition.new(@column, @value)\n+      end\n+\n+      def evaluate\n+        raw_array = @column.collect do |value|\n+          if value.nil?\n+            nil\n+          else\n+            @value < value\n+          end\n+        end\n+        BooleanArray.new(raw_array)\n+      end\n+    end\n+\n+    class GreaterEqualCondition < Condition\n+      def initialize(column, value)\n+        @column = column\n+        @value = value\n+      end\n+\n+      def !@\n+        LessCondition.new(@column, @value)\n+      end\n+\n+      def evaluate\n+        raw_array = @column.collect do |value|\n+          if value.nil?\n+            nil\n+          else\n+            @value <= value\n+          end\n+        end\n+        BooleanArray.new(raw_array)\n+      end\n+    end\n+\n+    class InCondition < Condition\n+      def initialize(column, values)\n+        @column = column\n+        @values = values\n+      end\n+\n+      def !@\n+        NotInCondition.new(@column, @values)\n+      end\n+\n+      def evaluate\n+        values_index = {}\n+        @values.each do |value|\n+          values_index[value] = true\n+        end\n+        raw_array = @column.collect do |value|\n+          if value.nil?\n+            nil\n+          else\n+            values_index.key?(value)\n+          end\n+        end\n+        BooleanArray.new(raw_array)\n+      end\n+    end\n+\n+    class NotInCondition < Condition\n+      def initialize(column, values)\n+        @column = column\n+        @values = values\n+      end\n+\n+      def !@\n+        InCondition.new(@column, @values)\n+      end\n+\n+      def evaluate\n+        values_index = {}\n+        @values.each do |value|\n+          values_index[value] = true\n+        end\n+        raw_array = @column.collect do |value|\n+          if value.nil?\n+            nil\n+          else\n+            not values_index.key?(value)\n+          end\n+        end\n+        BooleanArray.new(raw_array)\n+      end\n+    end\n+\n+    class SelectCondition < Condition\n+      def initialize(column, block)\n+        @column = column\n+        @block = block\n+      end\n+\n+      def !@\n+        RejectCondition.new(@column, @block)\n+      end\n+\n+      def evaluate\n+        BooleanArray.new(@column.collect(&@block))\n+      end\n+    end\n+\n+    class RejectCondition < Condition\n+      def initialize(column, block)\n+        @column = column\n+        @block = block\n+      end\n+\n+      def !@\n+        SelectCondition.new(@column, @block)\n+      end\n+\n+      def evaluate\n+        raw_array = @column.collect do |value|\n+          evaluated_value = @block.call(value)\n+          if evaluated_value.nil?\n+            nil\n+          else\n+            not evaluated_value\n+          end\n+        end\n+        BooleanArray.new(raw_array)\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/table-formatter.rb b/ruby/red-arrow/lib/arrow/table-formatter.rb\nnew file mode 100644\nindex 0000000000..280f189086\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/table-formatter.rb\n@@ -0,0 +1,66 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  # TODO: Almost codes should be implemented in Apache Arrow C++.\n+  class TableFormatter\n+    def initialize(table, options={})\n+      @table = table\n+      @options = options\n+    end\n+\n+    def format\n+      text = \"\"\n+      columns = @table.columns\n+      format_header(text, columns)\n+\n+      n_rows = @table.n_rows\n+      return text if n_rows.zero?\n+\n+      border = @options[:border] || 10\n+      n_digits = (Math.log10(n_rows) + 1).truncate\n+      head_limit = [border, n_rows].min\n+      head_column_values = columns.collect do |column|\n+        column.each.take(head_limit)\n+      end\n+      format_rows(text,\n+                  columns,\n+                  head_column_values.transpose,\n+                  n_digits,\n+                  0)\n+      return text if n_rows <= border\n+\n+      tail_start = [border, n_rows - border].max\n+      tail_limit = n_rows - tail_start\n+      tail_column_values = columns.collect do |column|\n+        column.reverse_each.take(tail_limit).reverse\n+      end\n+\n+      if head_limit != tail_start\n+        format_ellipsis(text)\n+      end\n+\n+      format_rows(text,\n+                  columns,\n+                  tail_column_values.transpose,\n+                  n_digits,\n+                  tail_start)\n+\n+      text\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/table-list-formatter.rb b/ruby/red-arrow/lib/arrow/table-list-formatter.rb\nnew file mode 100644\nindex 0000000000..8a41b1bea4\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/table-list-formatter.rb\n@@ -0,0 +1,39 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  # TODO: Almost codes should be implemented in Apache Arrow C++.\n+  class TableListFormatter < TableFormatter\n+    private\n+    def format_header(text, columns)\n+    end\n+\n+    def format_rows(text, columns, rows, n_digits, start_offset)\n+      rows.each_with_index do |row, nth_row|\n+        text << (\"=\" * 20 + \" #{start_offset + nth_row} \" + \"=\" * 20 + \"\\n\")\n+        row.each_with_index do |column_value, nth_column|\n+          column = columns[nth_column]\n+          text << \"#{column.name}: #{column_value}\\n\"\n+        end\n+      end\n+    end\n+\n+    def format_ellipsis(text)\n+      text << \"...\\n\"\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/table-loader.rb b/ruby/red-arrow/lib/arrow/table-loader.rb\nnew file mode 100644\nindex 0000000000..985999eaf3\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/table-loader.rb\n@@ -0,0 +1,120 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class TableLoader\n+    class << self\n+      def load(path, options={})\n+        new(path, options).load\n+      end\n+    end\n+\n+    def initialize(path, options={})\n+      @path = path\n+      @options = options\n+    end\n+\n+    def load\n+      path = @path\n+      path = path.to_path if path.respond_to?(:to_path)\n+      format = @options[:format] || guess_format(path) || :arrow\n+\n+      custom_load_method = \"load_as_#{format}\"\n+      unless respond_to?(custom_load_method, true)\n+        available_formats = []\n+        (methods(true) | private_methods(true)).each do |name|\n+          match_data = /\\Aload_as_/.match(name.to_s)\n+          if match_data\n+            available_formats << match_data.post_match\n+          end\n+        end\n+        message = \"Arrow::Table load format must be one of [\"\n+        message << available_formats.join(\", \")\n+        message << \"]: #{format.inspect}\"\n+        raise ArgumentError, message\n+      end\n+      __send__(custom_load_method, path)\n+    end\n+\n+    private\n+    def guess_format(path)\n+      extension = ::File.extname(path).gsub(/\\A\\./, \"\").downcase\n+      return nil if extension.empty?\n+\n+      return extension if respond_to?(\"load_as_#{extension}\", true)\n+\n+      nil\n+    end\n+\n+    def load_raw(input, reader)\n+      schema = reader.schema\n+      chunked_arrays = []\n+      reader.each do |record_batch|\n+        record_batch.columns.each_with_index do |array, i|\n+          chunked_array = (chunked_arrays[i] ||= [])\n+          chunked_array << array\n+        end\n+      end\n+      columns = schema.fields.collect.with_index do |field, i|\n+        Column.new(field, ChunkedArray.new(chunked_arrays[i]))\n+      end\n+      table = Table.new(schema, columns)\n+      table.instance_variable_set(:@input, input)\n+      table\n+    end\n+\n+    def load_as_arrow(path)\n+      input = nil\n+      reader = nil\n+      error = nil\n+      reader_class_candidates = [\n+        RecordBatchFileReader,\n+        RecordBatchStreamReader,\n+      ]\n+      reader_class_candidates.each do |reader_class_candidate|\n+        input = MemoryMappedInputStream.new(path)\n+        begin\n+          reader = reader_class_candidate.new(input)\n+        rescue Arrow::Error\n+          error = $!\n+        else\n+          break\n+        end\n+      end\n+      raise error if reader.nil?\n+      load_raw(input, reader)\n+    end\n+\n+    def load_as_batch(path)\n+      input = MemoryMappedInputStream.new(path)\n+      reader = RecordBatchFileReader.new(input)\n+      load_raw(input, reader)\n+    end\n+\n+    def load_as_stream(path)\n+      input = MemoryMappedInputStream.new(path)\n+      reader = RecordBatchStreamReader.new(input)\n+      load_raw(input, reader)\n+    end\n+\n+    def load_as_csv(path)\n+      options = @options.dup\n+      options.delete(:format)\n+      CSVLoader.load(Pathname.new(path), options)\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/table-saver.rb b/ruby/red-arrow/lib/arrow/table-saver.rb\nnew file mode 100644\nindex 0000000000..d3887024c0\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/table-saver.rb\n@@ -0,0 +1,96 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class TableSaver\n+    class << self\n+      def save(table, path, options={})\n+        new(table, path, options).save\n+      end\n+    end\n+\n+    def initialize(table, path, options={})\n+      @table = table\n+      @path = path\n+      @options = options\n+    end\n+\n+    def save\n+      path = @path\n+      path = path.to_path if path.respond_to?(:to_path)\n+      format = @options[:format] || guess_format(path) || :arrow\n+\n+      custom_save_method = \"save_as_#{format}\"\n+      unless respond_to?(custom_save_method, true)\n+        available_formats = []\n+        (methods(true) | private_methods(true)).each do |name|\n+          match_data = /\\Asave_as_/.match(name.to_s)\n+          if match_data\n+            available_formats << match_data.post_match\n+          end\n+        end\n+        message = \"Arrow::Table save format must be one of [\"\n+        message << available_formats.join(\", \")\n+        message << \"]: #{format.inspect}\"\n+        raise ArgumentError, message\n+      end\n+      __send__(custom_save_method, path)\n+    end\n+\n+    private\n+    def guess_format(path)\n+      extension = ::File.extname(path).gsub(/\\A\\./, \"\").downcase\n+      return nil if extension.empty?\n+\n+      return extension if respond_to?(\"save_as_#{extension}\", true)\n+\n+      nil\n+    end\n+\n+    def save_raw(writer_class, path)\n+      FileOutputStream.open(path, false) do |output|\n+        writer_class.open(output, @table.schema) do |writer|\n+          writer.write_table(@table)\n+        end\n+      end\n+    end\n+\n+    def save_as_arrow(path)\n+      save_as_batch(path)\n+    end\n+\n+    def save_as_batch(path)\n+      save_raw(RecordBatchFileWriter, path)\n+    end\n+\n+    def save_as_stream(path)\n+      save_raw(RecordBatchStreamWriter, path)\n+    end\n+\n+    def save_as_csv(path)\n+      CSV.open(path, \"w\") do |csv|\n+        names = @table.schema.fields.collect(&:name)\n+        csv << names\n+        @table.each_record(reuse_record: true) do |record|\n+          csv << names.collect do |name|\n+            record[name]\n+          end\n+        end\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/table-table-formatter.rb b/ruby/red-arrow/lib/arrow/table-table-formatter.rb\nnew file mode 100644\nindex 0000000000..07d78b7860\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/table-table-formatter.rb\n@@ -0,0 +1,73 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"time\"\n+\n+module Arrow\n+  # TODO: Almost codes should be implemented in Apache Arrow C++.\n+  class TableTableFormatter < TableFormatter\n+    private\n+    def format_header(text, columns)\n+      columns.each do |column|\n+        text << \"\\t\"\n+        text << format_column_name(column)\n+      end\n+      text << \"\\n\"\n+    end\n+\n+    FLOAT_N_DIGITS = 10\n+    def format_column_name(column)\n+      case column.data_type\n+      when TimestampDataType\n+        \"%*s\" % [Time.now.iso8601.size, column.name]\n+      when FloatDataType, DoubleDataType\n+        \"%*s\" % [FLOAT_N_DIGITS, column.name]\n+      else\n+        column.name\n+      end\n+    end\n+\n+    def format_rows(text, columns, rows, n_digits, start_offset)\n+      rows.each_with_index do |row, nth_row|\n+        text << (\"%*d\" % [n_digits, start_offset + nth_row])\n+        row.each_with_index do |column_value, nth_column|\n+          text << \"\\t\"\n+          column = columns[nth_column]\n+          text << format_column_value(column, column_value)\n+        end\n+        text << \"\\n\"\n+      end\n+    end\n+\n+    def format_column_value(column, value)\n+      case value\n+      when Time\n+        value.iso8601\n+      when Float\n+        \"%*f\" % [[column.name.size, FLOAT_N_DIGITS].max, value]\n+      when Integer\n+        \"%*d\" % [column.name.size, value]\n+      else\n+        \"%-*s\" % [column.name.size, value.to_s]\n+      end\n+    end\n+\n+    def format_ellipsis(text)\n+      text << \"...\\n\"\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/table.rb b/ruby/red-arrow/lib/arrow/table.rb\nnew file mode 100644\nindex 0000000000..8cc3e3c592\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/table.rb\n@@ -0,0 +1,381 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"arrow/group\"\n+require \"arrow/record-containable\"\n+\n+module Arrow\n+  class Table\n+    include RecordContainable\n+\n+    class << self\n+      def load(path, options={})\n+        TableLoader.load(path, options)\n+      end\n+    end\n+\n+    alias_method :initialize_raw, :initialize\n+    def initialize(schema_or_raw_table_or_columns, columns=nil)\n+      if columns.nil?\n+        if schema_or_raw_table_or_columns[0].is_a?(Column)\n+          columns = schema_or_raw_table_or_columns\n+          fields = columns.collect(&:field)\n+          schema = Schema.new(fields)\n+        else\n+          raw_table = schema_or_raw_table_or_columns\n+          fields = []\n+          columns = []\n+          raw_table.each do |name, array|\n+            field = Field.new(name.to_s, array.value_data_type)\n+            fields << field\n+            columns << Column.new(field, array)\n+          end\n+          schema = Schema.new(fields)\n+        end\n+      else\n+        schema = schema_or_raw_table_or_columns\n+      end\n+      initialize_raw(schema, columns)\n+    end\n+\n+    def columns\n+      @columns ||= n_columns.times.collect {|i| get_column(i)}\n+    end\n+\n+    def each_record_batch\n+      return to_enum(__method__) unless block_given?\n+\n+      reader = TableBatchReader.new(self)\n+      while record_batch = reader.read_next\n+        yield(record_batch)\n+      end\n+    end\n+\n+    alias_method :size, :n_rows\n+    alias_method :length, :n_rows\n+\n+    alias_method :[], :find_column\n+\n+    # TODO\n+    #\n+    # @return [Arrow::Table]\n+    def slice(*args)\n+      slicers = []\n+      expected_n_args = nil\n+      case args.size\n+      when 0\n+        expected_n_args = \"1..2\" unless block_given?\n+      when 1\n+        slicers << args[0]\n+      when 2\n+        from, to = args\n+        slicers << (from...(from + to))\n+      else\n+        if block_given?\n+          expected_n_args = \"0..2\"\n+        else\n+          expected_n_args = \"1..2\"\n+        end\n+      end\n+      if expected_n_args\n+        message = \"wrong number of arguments \" +\n+          \"(given #{args.size}, expected #{expected_n_args})\"\n+        raise ArgumentError, message\n+      end\n+\n+      if block_given?\n+        block_slicer = yield(Slicer.new(self))\n+        case block_slicer\n+        when nil\n+          # Ignore\n+        when ::Array\n+          slicers.concat(block_slicer)\n+        else\n+          slicers << block_slicer\n+        end\n+      end\n+\n+      ranges = []\n+      slicers.each do |slicer|\n+        slicer = slicer.evaluate if slicer.respond_to?(:evaluate)\n+        case slicer\n+        when Integer\n+          slicer += n_rows if slicer < 0\n+          ranges << [slicer, slicer]\n+        when Range\n+          from = slicer.first\n+          to = slicer.last\n+          to -= 1 if slicer.exclude_end?\n+          from += n_rows if from < 0\n+          to += n_rows if to < 0\n+          ranges << [from, to]\n+        when ::Array\n+          boolean_array_to_slice_ranges(slicer, 0, ranges)\n+        when ChunkedArray\n+          offset = 0\n+          slicer.each_chunk do |array|\n+            boolean_array_to_slice_ranges(array, offset, ranges)\n+            offset += array.length\n+          end\n+        when BooleanArray\n+          boolean_array_to_slice_ranges(slicer, 0, ranges)\n+        else\n+          message = \"slicer must be Integer, Range, (from, to), \" +\n+            \"Arrow::ChunkedArray of Arrow::BooleanArray, \" +\n+            \"Arrow::BooleanArray or Arrow::Slicer::Condition: #{slicer.inspect}\"\n+          raise ArgumentError, message\n+        end\n+      end\n+      slice_by_ranges(ranges)\n+    end\n+\n+    # TODO\n+    #\n+    # @return [Arrow::Table]\n+    def merge(other)\n+      added_columns = {}\n+      removed_columns = {}\n+\n+      case other\n+      when Hash\n+        other.each do |name, value|\n+          name = name.to_s\n+          if value\n+            added_columns[name] = ensure_column(name, value)\n+          else\n+            removed_columns[name] = true\n+          end\n+        end\n+      when Table\n+        added_columns = {}\n+        other.columns.each do |column|\n+          added_columns[column.name] = column\n+        end\n+      else\n+        message = \"merge target must be Hash or Arrow::Table: \" +\n+          \"<#{other.inspect}>: #{inspect}\"\n+        raise ArgumentError, message\n+      end\n+\n+      new_columns = []\n+      columns.each do |column|\n+        column_name = column.name\n+        new_column = added_columns.delete(column_name)\n+        if new_column\n+          new_columns << new_column\n+          next\n+        end\n+        next if removed_columns.key?(column_name)\n+        new_columns << column\n+      end\n+      added_columns.each do |name, new_column|\n+        new_columns << new_column\n+      end\n+      new_fields = new_columns.collect do |new_column|\n+        new_column.field\n+      end\n+      self.class.new(Schema.new(new_fields), new_columns)\n+    end\n+\n+    alias_method :remove_column_raw, :remove_column\n+    def remove_column(name_or_index)\n+      case name_or_index\n+      when String, Symbol\n+        name = name_or_index.to_s\n+        index = columns.index {|column| column.name == name}\n+        if index.nil?\n+          message = \"unknown column: #{name_or_index.inspect}: #{inspect}\"\n+          raise KeyError.new(message)\n+        end\n+      else\n+        index = name_or_index\n+        index += n_columns if index < 0\n+        if index < 0 or index >= n_columns\n+          message = \"out of index (0..#{n_columns - 1}): \" +\n+            \"#{name_or_index.inspect}: #{inspect}\"\n+          raise IndexError.new(message)\n+        end\n+      end\n+      remove_column_raw(index)\n+    end\n+\n+    # TODO\n+    #\n+    # @return [Arrow::Table]\n+    def select_columns(*selectors, &block)\n+      if selectors.empty?\n+        return to_enum(__method__) unless block_given?\n+        selected_columns = columns.select(&block)\n+      else\n+        selected_columns = []\n+        selectors.each do |selector|\n+          case selector\n+          when String, Symbol\n+            column = find_column(selector)\n+            if column.nil?\n+              message = \"unknown column: #{selector.inspect}: #{inspect}\"\n+              raise KeyError.new(message)\n+            end\n+            selected_columns << column\n+          when Range\n+            selected_columns.concat(columns[selector])\n+          else\n+            column = columns[selector]\n+            if column.nil?\n+              message = \"out of index (0..#{n_columns - 1}): \" +\n+              \"#{selector.inspect}: #{inspect}\"\n+              raise IndexError.new(message)\n+            end\n+            selected_columns << column\n+          end\n+        end\n+        selected_columns = selected_columns.select(&block) if block_given?\n+      end\n+      self.class.new(selected_columns)\n+    end\n+\n+    # Experimental\n+    def group(*keys)\n+      Group.new(self, keys)\n+    end\n+\n+    # Experimental\n+    def window(size: nil)\n+      RollingWindow.new(self, size)\n+    end\n+\n+    def save(path, options={})\n+      saver = TableSaver.new(self, path, options)\n+      saver.save\n+    end\n+\n+    def pack\n+      packed_columns = columns.collect do |column|\n+        column.pack\n+      end\n+      self.class.new(schema, packed_columns)\n+    end\n+\n+    def to_s(options={})\n+      case options[:format]\n+      when :list\n+        formatter_class = TableListFormatter\n+      else\n+        formatter_class = TableTableFormatter\n+      end\n+      formatter = formatter_class.new(self, options)\n+      formatter.format\n+    end\n+\n+    def inspect\n+      \"#{super}\\n#{to_s}\"\n+    end\n+\n+    def respond_to_missing?(name, include_private)\n+      return true if find_column(name)\n+      super\n+    end\n+\n+    def method_missing(name, *args, &block)\n+      if args.empty?\n+        column = find_column(name)\n+        return column if column\n+      end\n+      super\n+    end\n+\n+    private\n+    def boolean_array_to_slice_ranges(array, offset, ranges)\n+      in_target = false\n+      target_start = nil\n+      array.each_with_index do |is_target, i|\n+        if is_target\n+          unless in_target\n+            target_start = offset + i\n+            in_target = true\n+          end\n+        else\n+          if in_target\n+            ranges << [target_start, offset + i - 1]\n+            target_start = nil\n+            in_target = false\n+          end\n+        end\n+      end\n+      if in_target\n+        ranges << [target_start, offset + array.length - 1]\n+      end\n+    end\n+\n+    # TODO: Almost codes should be implemented in Apache Arrow C++.\n+    def slice_by_ranges(ranges)\n+      sliced_columns = columns.collect do |column|\n+        chunks = []\n+        arrays = column.data.each_chunk.to_a\n+        offset = 0\n+        offset_in_array = 0\n+        ranges.each do |from, to|\n+          range_size = to - from + 1\n+          while range_size > 0\n+            while offset + arrays.first.length - offset_in_array < from\n+              offset += arrays.first.length - offset_in_array\n+              arrays.shift\n+              offset_in_array = 0\n+            end\n+            if offset < from\n+              skipped_size = from - offset\n+              offset += skipped_size\n+              offset_in_array += skipped_size\n+            end\n+            array = arrays.first\n+            array_length = array.length\n+            rest_length = array_length - offset_in_array\n+            if rest_length <= range_size\n+              chunks << array.slice(offset_in_array, array_length)\n+              offset += rest_length\n+              range_size -= rest_length\n+              offset_in_array = 0\n+              arrays.shift\n+            else\n+              chunks << array.slice(offset_in_array, range_size)\n+              offset += range_size\n+              offset_in_array += range_size\n+              range_size = 0\n+            end\n+          end\n+        end\n+        Column.new(column.field, ChunkedArray.new(chunks))\n+      end\n+\n+      self.class.new(schema, sliced_columns)\n+    end\n+\n+    def ensure_column(name, data)\n+      case data\n+      when Array\n+        field = Field.new(name, data.value_data_type)\n+        Column.new(field, data)\n+      when Column\n+        data\n+      else\n+        message = \"column must be Arrow::Array or Arrow::Column: \" +\n+          \"<#{name}>: <#{data.inspect}>: #{inspect}\"\n+        raise ArgumentError, message\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/tensor.rb b/ruby/red-arrow/lib/arrow/tensor.rb\nnew file mode 100644\nindex 0000000000..fdcc6c1aef\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/tensor.rb\n@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class Tensor\n+    def to_arrow\n+      self\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/timestamp-array-builder.rb b/ruby/red-arrow/lib/arrow/timestamp-array-builder.rb\nnew file mode 100644\nindex 0000000000..4b22682efc\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/timestamp-array-builder.rb\n@@ -0,0 +1,46 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class TimestampArrayBuilder\n+    private\n+    def unit_id\n+      @unit_id ||= value_data_type.unit.nick.to_sym\n+    end\n+\n+    def convert_to_arrow_value(value)\n+      if value.respond_to?(:to_time) and not value.is_a?(Time)\n+        value = value.to_time\n+      end\n+\n+      if value.is_a?(Time)\n+        case unit_id\n+        when :second\n+          value.to_i\n+        when :milli\n+          value.to_i * 1_000 + value.usec / 1_000\n+        when :micro\n+          value.to_i * 1_000_000 + value.usec\n+        else\n+          value.to_i * 1_000_000_000 + value.nsec\n+        end\n+      else\n+        value\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/timestamp-array.rb b/ruby/red-arrow/lib/arrow/timestamp-array.rb\nnew file mode 100644\nindex 0000000000..6cffb8c261\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/timestamp-array.rb\n@@ -0,0 +1,54 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class TimestampArray\n+    class << self\n+      def new(unit, values)\n+        data_type = TimestampDataType.new(unit)\n+        builder = TimestampArrayBuilder.new(data_type)\n+        builder.build(values)\n+      end\n+    end\n+\n+    def get_value(i)\n+      to_time(get_raw_value(i))\n+    end\n+\n+    def unit\n+      @unit ||= value_data_type.unit\n+    end\n+\n+    private\n+    def unit_id\n+      @unit_id ||= unit.nick.to_sym\n+    end\n+\n+    def to_time(raw_value)\n+      case unit_id\n+      when :second\n+        Time.at(raw_value)\n+      when :milli\n+        Time.at(*raw_value.divmod(1_000))\n+      when :micro\n+        Time.at(*raw_value.divmod(1_000_000))\n+      else\n+        Time.at(raw_value / 1_000_000_000.0)\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/red-arrow.gemspec b/ruby/red-arrow/red-arrow.gemspec\nnew file mode 100644\nindex 0000000000..1bfaf9c028\n--- /dev/null\n+++ b/ruby/red-arrow/red-arrow.gemspec\n@@ -0,0 +1,54 @@\n+# -*- ruby -*-\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require_relative \"version\"\n+\n+Gem::Specification.new do |spec|\n+  spec.name = \"red-arrow\"\n+  version_components = [\n+    Arrow::Version::MAJOR.to_s,\n+    Arrow::Version::MINOR.to_s,\n+    Arrow::Version::MICRO.to_s,\n+    # \"beta1\",\n+  ]\n+  spec.version = version_components.join(\".\")\n+  spec.homepage = \"https://arrow.apache.org/\"\n+  spec.authors = [\"Apache Arrow Developers\"]\n+  spec.email = [\"dev@arrow.apache.org\"]\n+\n+  spec.summary = \"Red Arrow is the Ruby bindings of Apache Arrow\"\n+  spec.description =\n+    \"Apache Arrow is a common in-memory columnar data store. \" +\n+    \"It's useful to share and process large data.\"\n+  spec.license = \"Apache-2.0\"\n+  spec.files = [\"README.md\", \"Rakefile\", \"Gemfile\", \"#{spec.name}.gemspec\"]\n+  spec.files += Dir.glob(\"lib/**/*.rb\")\n+  spec.files += Dir.glob(\"image/*.*\")\n+  spec.files += Dir.glob(\"doc/text/*\")\n+  spec.test_files += Dir.glob(\"test/**/*\")\n+  spec.extensions = [\"dependency-check/Rakefile\"]\n+\n+  spec.add_runtime_dependency(\"gobject-introspection\", \">= 3.1.1\")\n+  spec.add_runtime_dependency(\"pkg-config\")\n+  spec.add_runtime_dependency(\"native-package-installer\")\n+\n+  spec.add_development_dependency(\"bundler\")\n+  spec.add_development_dependency(\"rake\")\n+  spec.add_development_dependency(\"test-unit\")\n+end\ndiff --git a/ruby/red-arrow/test/fixture/float-integer.csv b/ruby/red-arrow/test/fixture/float-integer.csv\nnew file mode 100644\nindex 0000000000..5eae562bc5\n--- /dev/null\n+++ b/ruby/red-arrow/test/fixture/float-integer.csv\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+score\n+2.9\n+10\n+-1.1\ndiff --git a/ruby/red-arrow/test/fixture/integer-float.csv b/ruby/red-arrow/test/fixture/integer-float.csv\nnew file mode 100644\nindex 0000000000..da76141998\n--- /dev/null\n+++ b/ruby/red-arrow/test/fixture/integer-float.csv\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+score\n+10\n+2.9\n+-1.1\ndiff --git a/ruby/red-arrow/test/fixture/null-with-double-quote.csv b/ruby/red-arrow/test/fixture/null-with-double-quote.csv\nnew file mode 100644\nindex 0000000000..d845459287\n--- /dev/null\n+++ b/ruby/red-arrow/test/fixture/null-with-double-quote.csv\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name,score\n+alice,10\n+bob,\"\"\n+chris,-1\ndiff --git a/ruby/red-arrow/test/fixture/null-without-double-quote.csv b/ruby/red-arrow/test/fixture/null-without-double-quote.csv\nnew file mode 100644\nindex 0000000000..c91c8880a1\n--- /dev/null\n+++ b/ruby/red-arrow/test/fixture/null-without-double-quote.csv\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name,score\n+alice,10\n+bob,\n+chris,-1\ndiff --git a/ruby/red-arrow/test/fixture/with-header-float.csv b/ruby/red-arrow/test/fixture/with-header-float.csv\nnew file mode 100644\nindex 0000000000..f62fc00b6e\n--- /dev/null\n+++ b/ruby/red-arrow/test/fixture/with-header-float.csv\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name,score\n+alice,10.1\n+bob,29.2\n+chris,-1.3\ndiff --git a/ruby/red-arrow/test/fixture/with-header.csv b/ruby/red-arrow/test/fixture/with-header.csv\nnew file mode 100644\nindex 0000000000..a93fc5aec4\n--- /dev/null\n+++ b/ruby/red-arrow/test/fixture/with-header.csv\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name,score\n+alice,10\n+bob,29\n+chris,-1\ndiff --git a/ruby/red-arrow/test/fixture/without-header-float.csv b/ruby/red-arrow/test/fixture/without-header-float.csv\nnew file mode 100644\nindex 0000000000..584a20996c\n--- /dev/null\n+++ b/ruby/red-arrow/test/fixture/without-header-float.csv\n@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+alice,10.1\n+bob,29.2\n+chris,-1.3\ndiff --git a/ruby/red-arrow/test/fixture/without-header.csv b/ruby/red-arrow/test/fixture/without-header.csv\nnew file mode 100644\nindex 0000000000..1f775eae43\n--- /dev/null\n+++ b/ruby/red-arrow/test/fixture/without-header.csv\n@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+alice,10\n+bob,29\n+chris,-1\ndiff --git a/ruby/red-arrow/test/helper.rb b/ruby/red-arrow/test/helper.rb\nnew file mode 100644\nindex 0000000000..c51f8bab4c\n--- /dev/null\n+++ b/ruby/red-arrow/test/helper.rb\n@@ -0,0 +1,27 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require_relative \"../version\"\n+\n+require \"arrow\"\n+\n+require \"pathname\"\n+require \"tempfile\"\n+\n+require \"test-unit\"\n+\n+require_relative \"helper/fixture\"\ndiff --git a/ruby/red-arrow/test/helper/fixture.rb b/ruby/red-arrow/test/helper/fixture.rb\nnew file mode 100644\nindex 0000000000..24445a7e47\n--- /dev/null\n+++ b/ruby/red-arrow/test/helper/fixture.rb\n@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Helper\n+  module Fixture\n+    def fixture_dir\n+      Pathname.new(__dir__).join(\"..\", \"fixture\").expand_path\n+    end\n+\n+    def fixture_path(*components)\n+      fixture_dir.join(*components)\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/run-test.rb b/ruby/red-arrow/test/run-test.rb\nnew file mode 100755\nindex 0000000000..957bb3ac12\n--- /dev/null\n+++ b/ruby/red-arrow/test/run-test.rb\n@@ -0,0 +1,35 @@\n+#!/usr/bin/env ruby\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+ENV[\"TZ\"] = \"Asia/Tokyo\"\n+\n+$VERBOSE = true\n+\n+require \"pathname\"\n+\n+base_dir = Pathname.new(__dir__).parent.expand_path\n+\n+lib_dir = base_dir + \"lib\"\n+test_dir = base_dir + \"test\"\n+\n+$LOAD_PATH.unshift(lib_dir.to_s)\n+\n+require_relative \"helper\"\n+\n+exit(Test::Unit::AutoRunner.run(true, test_dir.to_s))\ndiff --git a/ruby/red-arrow/test/test-array-builder.rb b/ruby/red-arrow/test/test-array-builder.rb\nnew file mode 100644\nindex 0000000000..97badd1eac\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-array-builder.rb\n@@ -0,0 +1,112 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class ArrayBuilderTest < Test::Unit::TestCase\n+  sub_test_case(\".build\") do\n+    def assert_build(builder_class, raw_array)\n+      array = builder_class.build(raw_array)\n+      assert_equal(raw_array, array.to_a)\n+    end\n+\n+    sub_test_case(\"generic builder\") do\n+      test(\"strings\") do\n+        assert_build(Arrow::ArrayBuilder,\n+                     [\"Hello\", nil, \"World\"])\n+      end\n+\n+      test(\"boolean\") do\n+        assert_build(Arrow::ArrayBuilder,\n+                     [true, nil, false])\n+      end\n+\n+      test(\"positive integers\") do\n+        assert_build(Arrow::ArrayBuilder,\n+                     [1, nil, 2, nil, 3])\n+      end\n+\n+      test(\"negative integers\") do\n+        assert_build(Arrow::ArrayBuilder,\n+                     [nil, -1, nil, -2, nil, -3])\n+      end\n+\n+      test(\"times\") do\n+        assert_build(Arrow::ArrayBuilder,\n+                     [Time.at(0), Time.at(1), Time.at(2)])\n+      end\n+\n+      test(\"dates\") do\n+        assert_build(Arrow::ArrayBuilder,\n+                     [Date.new(2018, 1, 4), Date.new(2018, 1, 5)])\n+      end\n+\n+      test(\"datetimes\") do\n+        assert_build(Arrow::ArrayBuilder,\n+                     [\n+                       DateTime.new(2018, 1, 4, 23, 18, 23),\n+                       DateTime.new(2018, 1, 5, 0, 23, 21),\n+                     ])\n+      end\n+    end\n+\n+    sub_test_case(\"specific builder\") do\n+      test(\"empty\") do\n+        assert_build(Arrow::Int32ArrayBuilder,\n+                     [])\n+      end\n+\n+      test(\"values\") do\n+        assert_build(Arrow::Int32ArrayBuilder,\n+                     [1, -2])\n+      end\n+\n+      test(\"values, nils\") do\n+        assert_build(Arrow::Int32ArrayBuilder,\n+                     [1, -2, nil, nil])\n+      end\n+\n+      test(\"values, nils, values\") do\n+        assert_build(Arrow::Int32ArrayBuilder,\n+                     [1, -2, nil, nil, 3, -4])\n+      end\n+\n+      test(\"values, nils, values, nils\") do\n+        assert_build(Arrow::Int32ArrayBuilder,\n+                     [1, -2, nil, nil, 3, -4, nil, nil])\n+      end\n+\n+      test(\"nils\") do\n+        assert_build(Arrow::Int32ArrayBuilder,\n+                     [nil, nil])\n+      end\n+\n+      test(\"nils, values\") do\n+        assert_build(Arrow::Int32ArrayBuilder,\n+                     [nil, nil, 3, -4])\n+      end\n+\n+      test(\"nils, values, nil\") do\n+        assert_build(Arrow::Int32ArrayBuilder,\n+                     [nil, nil, 3, -4, nil, nil])\n+      end\n+\n+      test(\"nils, values, nil, values\") do\n+        assert_build(Arrow::Int32ArrayBuilder,\n+                     [nil, nil, 3, -4, nil, nil, 5, -6])\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-array.rb b/ruby/red-arrow/test/test-array.rb\nnew file mode 100644\nindex 0000000000..31e6eafe00\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-array.rb\n@@ -0,0 +1,38 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class ArrayTest < Test::Unit::TestCase\n+  sub_test_case(\".new\") do\n+    test(\"Boolean\") do\n+      array = Arrow::BooleanArray.new([true, false, true])\n+      assert_equal([true, false, true],\n+                   array.to_a)\n+    end\n+  end\n+\n+  test(\"#each\") do\n+    array = Arrow::BooleanArray.new([true, false, nil, true])\n+    assert_equal([true, false, nil, true],\n+                 array.to_a)\n+  end\n+\n+  test(\"#[]\") do\n+    array = Arrow::BooleanArray.new([true, false, nil, true])\n+    assert_equal([true, false, nil, true],\n+                 [array[0], array[1], array[2], array[3]])\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-chunked-array.rb b/ruby/red-arrow/test/test-chunked-array.rb\nnew file mode 100644\nindex 0000000000..2344d80458\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-chunked-array.rb\n@@ -0,0 +1,65 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class ChunkedArrayTest < Test::Unit::TestCase\n+  test(\"#each\") do\n+    arrays = [\n+      Arrow::BooleanArray.new([true, false]),\n+      Arrow::BooleanArray.new([nil, true]),\n+    ]\n+    chunked_array = Arrow::ChunkedArray.new(arrays)\n+    assert_equal([true, false, nil, true],\n+                 chunked_array.to_a)\n+  end\n+\n+  sub_test_case(\"#pack\") do\n+    test(\"basic array\") do\n+      arrays = [\n+        Arrow::BooleanArray.new([true, false]),\n+        Arrow::BooleanArray.new([nil, true]),\n+      ]\n+      chunked_array = Arrow::ChunkedArray.new(arrays)\n+      packed_chunked_array = chunked_array.pack\n+      assert_equal([\n+                     Arrow::BooleanArray,\n+                     [true, false, nil, true],\n+                   ],\n+                   [\n+                     packed_chunked_array.class,\n+                     packed_chunked_array.to_a,\n+                   ])\n+    end\n+\n+    test(\"TimestampArray\") do\n+      type = Arrow::TimestampDataType.new(:nano)\n+      arrays = [\n+        Arrow::TimestampArrayBuilder.new(type).build([Time.at(0)]),\n+        Arrow::TimestampArrayBuilder.new(type).build([Time.at(1)]),\n+      ]\n+      chunked_array = Arrow::ChunkedArray.new(arrays)\n+      packed_chunked_array = chunked_array.pack\n+      assert_equal([\n+                     Arrow::TimestampArray,\n+                     [Time.at(0), Time.at(1)],\n+                   ],\n+                   [\n+                     packed_chunked_array.class,\n+                     packed_chunked_array.to_a,\n+                   ])\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-column.rb b/ruby/red-arrow/test/test-column.rb\nnew file mode 100644\nindex 0000000000..c6bf82728d\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-column.rb\n@@ -0,0 +1,43 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class ColumnTest < Test::Unit::TestCase\n+  test(\"#each\") do\n+    arrays = [\n+      Arrow::BooleanArray.new([true, false]),\n+      Arrow::BooleanArray.new([nil, true]),\n+    ]\n+    chunked_array = Arrow::ChunkedArray.new(arrays)\n+    column = Arrow::Column.new(Arrow::Field.new(\"visible\", :boolean),\n+                               chunked_array)\n+    assert_equal([true, false, nil, true],\n+                 column.to_a)\n+  end\n+\n+  test(\"#pack\") do\n+    arrays = [\n+      Arrow::BooleanArray.new([true, false]),\n+      Arrow::BooleanArray.new([nil, true]),\n+    ]\n+    chunked_array = Arrow::ChunkedArray.new(arrays)\n+    column = Arrow::Column.new(Arrow::Field.new(\"visible\", :boolean),\n+                               chunked_array)\n+    packed_column = column.pack\n+    assert_equal([1, [true, false, nil, true]],\n+                 [packed_column.data.n_chunks, packed_column.to_a])\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-csv-loader.rb b/ruby/red-arrow/test/test-csv-loader.rb\nnew file mode 100644\nindex 0000000000..26ea497c98\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-csv-loader.rb\n@@ -0,0 +1,118 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class CSVLoaderTest < Test::Unit::TestCase\n+  include Helper::Fixture\n+\n+  def load_csv(input)\n+    Arrow::CSVLoader.load(input, skip_lines: /^#/)\n+  end\n+\n+  sub_test_case(\".load\") do\n+    test(\"String: data: with header\") do\n+      data = fixture_path(\"with-header-float.csv\").read\n+      assert_equal(<<-TABLE, load_csv(data).to_s)\n+\tname\t     score\n+0\talice\t 10.100000\n+1\tbob \t 29.200000\n+2\tchris\t -1.300000\n+      TABLE\n+    end\n+\n+    test(\"String: data: without header\") do\n+      data = fixture_path(\"without-header-float.csv\").read\n+      assert_equal(<<-TABLE, load_csv(data).to_s)\n+\t0\t         1\n+0\talice\t 10.100000\n+1\tbob\t 29.200000\n+2\tchris\t -1.300000\n+      TABLE\n+    end\n+\n+    test(\"String: path: with header\") do\n+      path = fixture_path(\"with-header-float.csv\").to_s\n+      assert_equal(<<-TABLE, load_csv(path).to_s)\n+\tname\t     score\n+0\talice\t 10.100000\n+1\tbob \t 29.200000\n+2\tchris\t -1.300000\n+      TABLE\n+    end\n+\n+    test(\"String: path: without header\") do\n+      path = fixture_path(\"without-header-float.csv\").to_s\n+      assert_equal(<<-TABLE, load_csv(path).to_s)\n+\t0\t         1\n+0\talice\t 10.100000\n+1\tbob\t 29.200000\n+2\tchris\t -1.300000\n+      TABLE\n+    end\n+\n+    test(\"Pathname: with header\") do\n+      path = fixture_path(\"with-header-float.csv\")\n+      assert_equal(<<-TABLE, load_csv(path).to_s)\n+\tname\t     score\n+0\talice\t 10.100000\n+1\tbob \t 29.200000\n+2\tchris\t -1.300000\n+      TABLE\n+    end\n+\n+    test(\"Pathname: without header\") do\n+      path = fixture_path(\"without-header-float.csv\")\n+      assert_equal(<<-TABLE, load_csv(path).to_s)\n+\t0\t         1\n+0\talice\t 10.100000\n+1\tbob\t 29.200000\n+2\tchris\t -1.300000\n+      TABLE\n+    end\n+\n+    test(\"null: with double quote\") do\n+      path = fixture_path(\"null-with-double-quote.csv\").to_s\n+      assert_equal(<<-TABLE, load_csv(path).to_s)\n+\tname\tscore\n+0\talice\t   10\n+1\tbob \t     \n+2\tchris\t   -1\n+      TABLE\n+    end\n+\n+    test(\"null: without double quote\") do\n+      path = fixture_path(\"null-without-double-quote.csv\").to_s\n+      assert_equal(<<-TABLE, load_csv(path).to_s)\n+\tname\tscore\n+0\talice\t   10\n+1\tbob \t     \n+2\tchris\t   -1\n+      TABLE\n+    end\n+\n+    test(\"number: float, integer\") do\n+      path = fixture_path(\"float-integer.csv\").to_s\n+      assert_equal([2.9, 10, -1.1],\n+                   load_csv(path)[:score].to_a)\n+    end\n+\n+    test(\"number: integer, float\") do\n+      path = fixture_path(\"integer-float.csv\").to_s\n+      assert_equal([10.0, 2.9, -1.1],\n+                   load_csv(path)[:score].to_a)\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-csv-reader.rb b/ruby/red-arrow/test/test-csv-reader.rb\nnew file mode 100644\nindex 0000000000..765a178568\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-csv-reader.rb\n@@ -0,0 +1,34 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class CSVReaderTest < Test::Unit::TestCase\n+  include Helper::Fixture\n+\n+  test(\"#read\") do\n+    CSV.open(fixture_path(\"with-header.csv\").to_s,\n+             headers: true,\n+             skip_lines: /^#/) do |csv|\n+      reader = Arrow::CSVReader.new(csv)\n+      assert_equal(<<-TABLE, reader.read.to_s)\n+\tname\tscore\n+0\talice\t10   \n+1\tbob \t29   \n+2\tchris\t-1   \n+      TABLE\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-date32-array.rb b/ruby/red-arrow/test/test-date32-array.rb\nnew file mode 100644\nindex 0000000000..6918b48db4\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-date32-array.rb\n@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class Date32ArrayTest < Test::Unit::TestCase\n+  test(\"#[]\") do\n+    n_days_since_epoch = 17406 # 2017-08-28\n+    array = Arrow::Date32Array.new([n_days_since_epoch])\n+    assert_equal(Date.new(2017, 8, 28), array[0])\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-date64-array.rb b/ruby/red-arrow/test/test-date64-array.rb\nnew file mode 100644\nindex 0000000000..ec1c6db7cb\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-date64-array.rb\n@@ -0,0 +1,25 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class Date64ArrayTest < Test::Unit::TestCase\n+  test(\"#[]\") do\n+    n_msecs_since_epoch = 1503878400000 # 2017-08-28T00:00:00Z\n+    array = Arrow::Date64Array.new([n_msecs_since_epoch])\n+    assert_equal(DateTime.new(2017, 8, 28, 0, 0, 0),\n+                 array[0])\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-group.rb b/ruby/red-arrow/test/test-group.rb\nnew file mode 100644\nindex 0000000000..5e7aabfbf7\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-group.rb\n@@ -0,0 +1,156 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class GroupTest < Test::Unit::TestCase\n+  include Helper::Fixture\n+\n+  def setup\n+    raw_table = {\n+      :group_key1 => Arrow::UInt8Array.new([1, 1, 2, 3, 3, 3]),\n+      :group_key2 => Arrow::UInt8Array.new([1, 1, 1, 1, 2, 2]),\n+      :int => Arrow::Int32Array.new([-1, -2, nil, -4, -5, -6]),\n+      :uint => Arrow::UInt32Array.new([1, nil, 3, 4, 5, 6]),\n+      :float => Arrow::FloatArray.new([nil, 2.2, 3.3, 4.4, 5.5, 6.6]),\n+      :string => Arrow::StringArray.new([\"a\", \"b\", \"c\", nil, \"e\", \"f\"]),\n+    }\n+    @table = Arrow::Table.new(raw_table)\n+  end\n+\n+  sub_test_case(\"key\") do\n+    test(\"Time\") do\n+      time_values = [\n+        Time.parse(\"2018-01-29\"),\n+        Time.parse(\"2018-01-30\"),\n+      ]\n+      raw_table = {\n+        :time => Arrow::ArrayBuilder.build(time_values),\n+        :int => Arrow::Int32Array.new([-1, -2]),\n+      }\n+      table = Arrow::Table.new(raw_table)\n+      assert_equal(<<-TABLE, table.group(:time).count.to_s)\n+\t                     time\tint\n+0\t2018-01-29T00:00:00+09:00\t  1\n+1\t2018-01-30T00:00:00+09:00\t  1\n+      TABLE\n+    end\n+  end\n+\n+  sub_test_case(\"#count\") do\n+    test(\"single\") do\n+      assert_equal(<<-TABLE, @table.group(:group_key1).count.to_s)\n+\tgroup_key1\tgroup_key2\tint\tuint\tfloat\tstring\n+0\t         1\t         2\t  2\t   1\t    1\t     2\n+1\t         2\t         1\t  0\t   1\t    1\t     1\n+2\t         3\t         3\t  3\t   3\t    3\t     2\n+      TABLE\n+    end\n+\n+    test(\"multiple\") do\n+      assert_equal(<<-TABLE, @table.group(:group_key1, :group_key2).count.to_s)\n+\tgroup_key1\tgroup_key2\tint\tuint\tfloat\tstring\n+0\t         1\t         1\t  2\t   1\t    1\t     2\n+1\t         2\t         1\t  0\t   1\t    1\t     1\n+2\t         3\t         1\t  1\t   1\t    1\t     0\n+3\t         3\t         2\t  2\t   2\t    2\t     2\n+      TABLE\n+    end\n+  end\n+\n+  sub_test_case(\"#sum\") do\n+    test(\"single\") do\n+      assert_equal(<<-TABLE, @table.group(:group_key1).sum.to_s)\n+\tgroup_key1\tgroup_key2\tint\tuint\t     float\n+0\t         1\t         2\t -3\t   1\t  2.200000\n+1\t         2\t         1\t  0\t   3\t  3.300000\n+2\t         3\t         5\t-15\t  15\t 16.500000\n+      TABLE\n+    end\n+\n+    test(\"multiple\") do\n+      assert_equal(<<-TABLE, @table.group(:group_key1, :group_key2).sum.to_s)\n+\tgroup_key1\tgroup_key2\tint\tuint\t     float\n+0\t         1\t         1\t -3\t   1\t  2.200000\n+1\t         2\t         1\t  0\t   3\t  3.300000\n+2\t         3\t         1\t -4\t   4\t  4.400000\n+3\t         3\t         2\t-11\t  11\t 12.100000\n+      TABLE\n+    end\n+  end\n+\n+  sub_test_case(\"#average\") do\n+    test(\"single\") do\n+      assert_equal(<<-TABLE, @table.group(:group_key1).average.to_s)\n+\tgroup_key1\tgroup_key2\t       int\t      uint\t     float\n+0\t         1\t  1.000000\t -1.500000\t  1.000000\t  2.200000\n+1\t         2\t  1.000000\t  0.000000\t  3.000000\t  3.300000\n+2\t         3\t  1.666667\t -5.000000\t  5.000000\t  5.500000\n+      TABLE\n+    end\n+\n+    test(\"multiple\") do\n+      assert_equal(<<-TABLE, @table.group(:group_key1, :group_key2).average.to_s)\n+\tgroup_key1\tgroup_key2\t       int\t      uint\t     float\n+0\t         1\t         1\t -1.500000\t  1.000000\t  2.200000\n+1\t         2\t         1\t  0.000000\t  3.000000\t  3.300000\n+2\t         3\t         1\t -4.000000\t  4.000000\t  4.400000\n+3\t         3\t         2\t -5.500000\t  5.500000\t  6.050000\n+      TABLE\n+    end\n+  end\n+\n+  sub_test_case(\"#min\") do\n+    test(\"single\") do\n+      assert_equal(<<-TABLE, @table.group(:group_key1).min.to_s)\n+\tgroup_key1\tgroup_key2\tint\tuint\t     float\n+0\t         1\t         1\t -2\t   1\t  2.200000\n+1\t         2\t         1\t   \t   3\t  3.300000\n+2\t         3\t         1\t -6\t   4\t  4.400000\n+      TABLE\n+    end\n+\n+    test(\"multiple\") do\n+      assert_equal(<<-TABLE, @table.group(:group_key1, :group_key2).min.to_s)\n+\tgroup_key1\tgroup_key2\tint\tuint\t     float\n+0\t         1\t         1\t -2\t   1\t  2.200000\n+1\t         2\t         1\t   \t   3\t  3.300000\n+2\t         3\t         1\t -4\t   4\t  4.400000\n+3\t         3\t         2\t -6\t   5\t  5.500000\n+      TABLE\n+    end\n+  end\n+\n+  sub_test_case(\"#max\") do\n+    test(\"single\") do\n+      assert_equal(<<-TABLE, @table.group(:group_key1).max.to_s)\n+\tgroup_key1\tgroup_key2\tint\tuint\t     float\n+0\t         1\t         1\t -1\t   1\t  2.200000\n+1\t         2\t         1\t   \t   3\t  3.300000\n+2\t         3\t         2\t -4\t   6\t  6.600000\n+      TABLE\n+    end\n+\n+    test(\"multiple\") do\n+      assert_equal(<<-TABLE, @table.group(:group_key1, :group_key2).max.to_s)\n+\tgroup_key1\tgroup_key2\tint\tuint\t     float\n+0\t         1\t         1\t -1\t   1\t  2.200000\n+1\t         2\t         1\t   \t   3\t  3.300000\n+2\t         3\t         1\t -4\t   4\t  4.400000\n+3\t         3\t         2\t -5\t   6\t  6.600000\n+      TABLE\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-record-batch-file-reader.rb b/ruby/red-arrow/test/test-record-batch-file-reader.rb\nnew file mode 100644\nindex 0000000000..57b02abf9c\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-record-batch-file-reader.rb\n@@ -0,0 +1,115 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class RecordBatchFileReaderTest < Test::Unit::TestCase\n+  test(\"write/read\") do\n+    fields = [\n+      Arrow::Field.new(\"uint8\",  :uint8),\n+      Arrow::Field.new(\"uint16\", :uint16),\n+      Arrow::Field.new(\"uint32\", :uint32),\n+      Arrow::Field.new(\"uint64\", :uint64),\n+      Arrow::Field.new(\"int8\",   :int8),\n+      Arrow::Field.new(\"int16\",  :int16),\n+      Arrow::Field.new(\"int32\",  :int32),\n+      Arrow::Field.new(\"int64\",  :int64),\n+      Arrow::Field.new(\"float\",  :float),\n+      Arrow::Field.new(\"double\", :double),\n+    ]\n+    schema = Arrow::Schema.new(fields)\n+\n+    tempfile = Tempfile.new([\"batch\", \".arrow\"])\n+    Arrow::FileOutputStream.open(tempfile.path, false) do |output|\n+      Arrow::RecordBatchFileWriter.open(output, schema) do |writer|\n+        uints = [1, 2, 4, 8]\n+        ints = [1, -2, 4, -8]\n+        floats = [1.1, -2.2, 4.4, -8.8]\n+        columns = [\n+          Arrow::UInt8Array.new(uints),\n+          Arrow::UInt16Array.new(uints),\n+          Arrow::UInt32Array.new(uints),\n+          Arrow::UInt64Array.new(uints),\n+          Arrow::Int8Array.new(ints),\n+          Arrow::Int16Array.new(ints),\n+          Arrow::Int32Array.new(ints),\n+          Arrow::Int64Array.new(ints),\n+          Arrow::FloatArray.new(floats),\n+          Arrow::DoubleArray.new(floats),\n+        ]\n+\n+        record_batch = Arrow::RecordBatch.new(schema, 4, columns)\n+        writer.write_record_batch(record_batch)\n+      end\n+    end\n+\n+    Arrow::MemoryMappedInputStream.open(tempfile.path) do |input|\n+      reader = Arrow::RecordBatchFileReader.new(input)\n+      reader.each do |record_batch|\n+        assert_equal([\n+                       {\n+                         \"uint8\"  => 1,\n+                         \"uint16\" => 1,\n+                         \"uint32\" => 1,\n+                         \"uint64\" => 1,\n+                         \"int8\"   => 1,\n+                         \"int16\"  => 1,\n+                         \"int32\"  => 1,\n+                         \"int64\"  => 1,\n+                         \"float\"  => 1.100000023841858,\n+                         \"double\" => 1.1,\n+                       },\n+                       {\n+                         \"uint8\"  => 2,\n+                         \"uint16\" => 2,\n+                         \"uint32\" => 2,\n+                         \"uint64\" => 2,\n+                         \"int8\"   => -2,\n+                         \"int16\"  => -2,\n+                         \"int32\"  => -2,\n+                         \"int64\"  => -2,\n+                         \"float\"  => -2.200000047683716,\n+                         \"double\" => -2.2,\n+                       },\n+                       {\n+                         \"uint8\"  => 4,\n+                         \"uint16\" => 4,\n+                         \"uint32\" => 4,\n+                         \"uint64\" => 4,\n+                         \"int8\"   => 4,\n+                         \"int16\"  => 4,\n+                         \"int32\"  => 4,\n+                         \"int64\"  => 4,\n+                         \"float\"  => 4.400000095367432,\n+                         \"double\" => 4.4,\n+                       },\n+                       {\n+                         \"uint8\"  => 8,\n+                         \"uint16\" => 8,\n+                         \"uint32\" => 8,\n+                         \"uint64\" => 8,\n+                         \"int8\"   => -8,\n+                         \"int16\"  => -8,\n+                         \"int32\"  => -8,\n+                         \"int64\"  => -8,\n+                         \"float\"  => -8.800000190734863,\n+                         \"double\" => -8.8,\n+                       },\n+                     ],\n+                     record_batch.collect(&:to_h))\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-record-batch.rb b/ruby/red-arrow/test/test-record-batch.rb\nnew file mode 100644\nindex 0000000000..994b16de99\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-record-batch.rb\n@@ -0,0 +1,57 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class RecordBatchTest < Test::Unit::TestCase\n+  sub_test_case(\".each\") do\n+    setup do\n+      fields = [\n+        Arrow::Field.new(\"count\", :uint32),\n+      ]\n+      @schema = Arrow::Schema.new(fields)\n+      @counts = Arrow::UInt32Array.new([1, 2, 4, 8])\n+      @record_batch = Arrow::RecordBatch.new(@schema, @counts.length, [@counts])\n+    end\n+\n+    test(\"default\") do\n+      records = []\n+      @record_batch.each do |record|\n+        records << [record, record.index]\n+      end\n+      assert_equal([\n+                     [0, 0],\n+                     [1, 1],\n+                     [2, 2],\n+                     [3, 3],\n+                   ],\n+                   records.collect {|record, i| [record.index, i]})\n+    end\n+\n+    test(\"reuse_record: true\") do\n+      records = []\n+      @record_batch.each(reuse_record: true) do |record|\n+        records << [record, record.index]\n+      end\n+      assert_equal([\n+                     [3, 0],\n+                     [3, 1],\n+                     [3, 2],\n+                     [3, 3],\n+                   ],\n+                   records.collect {|record, i| [record.index, i]})\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-rolling-window.rb b/ruby/red-arrow/test/test-rolling-window.rb\nnew file mode 100644\nindex 0000000000..497a0834f8\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-rolling-window.rb\n@@ -0,0 +1,33 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class RollingWindowTest < Test::Unit::TestCase\n+  include Helper::Fixture\n+\n+  def setup\n+    raw_table = {\n+      :number => Arrow::Int32Array.new([1, -2, nil, 4, 6, 3]),\n+    }\n+    @table = Arrow::Table.new(raw_table)\n+  end\n+\n+  test(\"#lag\") do\n+    assert_equal(<<-ARRAY.chomp, @table.window.lag(:number).to_s)\n+[null, -3, null, null, 2, -3]\n+    ARRAY\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-slicer.rb b/ruby/red-arrow/test/test-slicer.rb\nnew file mode 100644\nindex 0000000000..ba035b604a\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-slicer.rb\n@@ -0,0 +1,446 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class SlicerTest < Test::Unit::TestCase\n+  def setup\n+    @count_field = Arrow::Field.new(\"count\", :uint32)\n+    @visible_field = Arrow::Field.new(\"visible\", :boolean)\n+    schema = Arrow::Schema.new([@count_field, @visible_field])\n+    count_arrays = [\n+      Arrow::UInt32Array.new([0, 1, 2]),\n+      Arrow::UInt32Array.new([4, 8, 16]),\n+      Arrow::UInt32Array.new([32, 64, nil]),\n+      Arrow::UInt32Array.new([256]),\n+    ]\n+    visible_arrays = [\n+      Arrow::BooleanArray.new([nil, true, false, nil]),\n+      Arrow::BooleanArray.new([true]),\n+      Arrow::BooleanArray.new([true, false]),\n+      Arrow::BooleanArray.new([nil]),\n+      Arrow::BooleanArray.new([nil]),\n+      Arrow::BooleanArray.new([true]),\n+    ]\n+    @count_array = Arrow::ChunkedArray.new(count_arrays)\n+    @visible_array = Arrow::ChunkedArray.new(visible_arrays)\n+    @count_column = Arrow::Column.new(@count_field, @count_array)\n+    @visible_column = Arrow::Column.new(@visible_field, @visible_array)\n+    @table = Arrow::Table.new(schema, [@count_column, @visible_column])\n+  end\n+\n+  sub_test_case(\"column\") do\n+    test(\"BooleanArray\") do\n+      sliced_table = @table.slice do |slicer|\n+        slicer.visible\n+      end\n+      assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    1\ttrue   \n+1\t    8\ttrue   \n+2\t   16\ttrue   \n+3\t  256\ttrue   \n+      TABLE\n+    end\n+\n+    test(\"not BooleanArray\") do\n+      sliced_table = @table.slice do |slicer|\n+        slicer.count\n+      end\n+      assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    1\ttrue   \n+1\t    2\tfalse  \n+2\t    4\t       \n+3\t    8\ttrue   \n+4\t   16\ttrue   \n+5\t   32\tfalse  \n+6\t   64\t       \n+7\t  256\ttrue   \n+      TABLE\n+    end\n+  end\n+\n+  sub_test_case(\"!column\") do\n+    test(\"BooleanArray\") do\n+      sliced_table = @table.slice do |slicer|\n+        !slicer.visible\n+      end\n+      assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    2\tfalse  \n+1\t   32\tfalse  \n+      TABLE\n+    end\n+\n+    test(\"not BooleanArray\") do\n+      sliced_table = @table.slice do |slicer|\n+        !slicer.count\n+      end\n+      assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    0\t       \n+      TABLE\n+    end\n+  end\n+\n+  test(\"column.null?\") do\n+    sliced_table = @table.slice do |slicer|\n+      slicer.visible.null?\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    0\t       \n+1\t    4\t       \n+2\t   64\t       \n+3\t     \t       \n+    TABLE\n+  end\n+\n+  test(\"column.valid?\") do\n+    sliced_table = @table.slice do |slicer|\n+      slicer.visible.valid?\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    1\ttrue   \n+1\t    2\tfalse  \n+2\t    8\ttrue   \n+3\t   16\ttrue   \n+4\t   32\tfalse  \n+5\t  256\ttrue   \n+    TABLE\n+  end\n+\n+  sub_test_case(\"column ==\") do\n+    test(\"nil\") do\n+      sliced_table = @table.slice do |slicer|\n+        slicer.visible == nil\n+      end\n+      assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    0\t       \n+1\t    4\t       \n+2\t   64\t       \n+3\t     \t       \n+      TABLE\n+    end\n+\n+    test(\"value\") do\n+      sliced_table = @table.slice do |slicer|\n+        slicer.visible == true\n+      end\n+      assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    1\ttrue   \n+1\t    8\ttrue   \n+2\t   16\ttrue   \n+3\t  256\ttrue   \n+      TABLE\n+    end\n+  end\n+\n+  sub_test_case(\"!(column ==)\") do\n+    test(\"nil\") do\n+      sliced_table = @table.slice do |slicer|\n+        !(slicer.visible == nil)\n+      end\n+      assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    1\ttrue   \n+1\t    2\tfalse  \n+2\t    8\ttrue   \n+3\t   16\ttrue   \n+4\t   32\tfalse  \n+5\t  256\ttrue   \n+      TABLE\n+    end\n+\n+    test(\"value\") do\n+      sliced_table = @table.slice do |slicer|\n+        !(slicer.visible == true)\n+      end\n+      assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    2\tfalse  \n+1\t   32\tfalse  \n+      TABLE\n+    end\n+  end\n+\n+  sub_test_case(\"column !=\") do\n+    test(\"nil\") do\n+      sliced_table = @table.slice do |slicer|\n+        slicer.visible != nil\n+      end\n+      assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    1\ttrue   \n+1\t    2\tfalse  \n+2\t    8\ttrue   \n+3\t   16\ttrue   \n+4\t   32\tfalse  \n+5\t  256\ttrue   \n+      TABLE\n+    end\n+\n+    test(\"value\") do\n+      sliced_table = @table.slice do |slicer|\n+        slicer.visible != true\n+      end\n+      assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    2\tfalse  \n+1\t   32\tfalse  \n+      TABLE\n+    end\n+  end\n+\n+  test(\"column < value\") do\n+    sliced_table = @table.slice do |slicer|\n+      slicer.count < 16\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    0\t       \n+1\t    1\ttrue   \n+2\t    2\tfalse  \n+3\t    4\t       \n+4\t    8\ttrue   \n+    TABLE\n+  end\n+\n+  test(\"!(column < value)\") do\n+    sliced_table = @table.slice do |slicer|\n+      !(slicer.count < 16)\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t   16\ttrue   \n+1\t   32\tfalse  \n+2\t   64\t       \n+3\t  256\ttrue   \n+    TABLE\n+  end\n+\n+  test(\"column <= value\") do\n+    sliced_table = @table.slice do |slicer|\n+      slicer.count <= 16\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    0\t       \n+1\t    1\ttrue   \n+2\t    2\tfalse  \n+3\t    4\t       \n+4\t    8\ttrue   \n+5\t   16\ttrue   \n+    TABLE\n+  end\n+\n+  test(\"!(column <= value)\") do\n+    sliced_table = @table.slice do |slicer|\n+      !(slicer.count <= 16)\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t   32\tfalse  \n+1\t   64\t       \n+2\t  256\ttrue   \n+    TABLE\n+  end\n+\n+  test(\"column > value\") do\n+    sliced_table = @table.slice do |slicer|\n+      slicer.count > 16\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t   32\tfalse  \n+1\t   64\t       \n+2\t  256\ttrue   \n+    TABLE\n+  end\n+\n+  test(\"!(column > value)\") do\n+    sliced_table = @table.slice do |slicer|\n+      !(slicer.count > 16)\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    0\t       \n+1\t    1\ttrue   \n+2\t    2\tfalse  \n+3\t    4\t       \n+4\t    8\ttrue   \n+5\t   16\ttrue   \n+    TABLE\n+  end\n+\n+  test(\"column >= value\") do\n+    sliced_table = @table.slice do |slicer|\n+      slicer.count >= 16\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t   16\ttrue   \n+1\t   32\tfalse  \n+2\t   64\t       \n+3\t  256\ttrue   \n+    TABLE\n+  end\n+\n+  test(\"!(column >= value)\") do\n+    sliced_table = @table.slice do |slicer|\n+      !(slicer.count >= 16)\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    0\t       \n+1\t    1\ttrue   \n+2\t    2\tfalse  \n+3\t    4\t       \n+4\t    8\ttrue   \n+    TABLE\n+  end\n+\n+  test(\"column.in\") do\n+    sliced_table = @table.slice do |slicer|\n+      slicer.count.in?([1, 4, 16, 64])\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    1\ttrue   \n+1\t    4\t       \n+2\t   16\ttrue   \n+3\t   64\t       \n+    TABLE\n+  end\n+\n+  test(\"!column.in\") do\n+    sliced_table = @table.slice do |slicer|\n+      !slicer.count.in?([1, 4, 16, 64])\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    0\t       \n+1\t    2\tfalse  \n+2\t    8\ttrue   \n+3\t   32\tfalse  \n+4\t  256\ttrue   \n+    TABLE\n+  end\n+\n+  test(\"condition & condition\") do\n+    sliced_table = @table.slice do |slicer|\n+      slicer.visible & (slicer.count >= 16)\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t   16\ttrue   \n+1\t  256\ttrue   \n+    TABLE\n+  end\n+\n+  test(\"condition | condition\") do\n+    sliced_table = @table.slice do |slicer|\n+      slicer.visible | (slicer.count >= 16)\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    1\ttrue   \n+1\t    8\ttrue   \n+2\t   16\ttrue   \n+3\t   32\tfalse  \n+4\t  256\ttrue   \n+    TABLE\n+  end\n+\n+  test(\"condition ^ condition\") do\n+    sliced_table = @table.slice do |slicer|\n+      slicer.visible ^ (slicer.count >= 16)\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    1\ttrue   \n+1\t    8\ttrue   \n+2\t   32\tfalse  \n+    TABLE\n+  end\n+\n+  test(\"select\") do\n+    sliced_table = @table.slice do |slicer|\n+      slicer.visible.select do |value|\n+        value.nil? or value\n+      end\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    0\t       \n+1\t    1\ttrue   \n+2\t    4\t       \n+3\t    8\ttrue   \n+4\t   16\ttrue   \n+5\t   64\t       \n+6\t     \t       \n+7\t  256\ttrue   \n+    TABLE\n+  end\n+\n+  test(\"!select\") do\n+    sliced_table = @table.slice do |slicer|\n+      !slicer.visible.select do |value|\n+        value.nil? or value\n+      end\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    2\tfalse  \n+1\t   32\tfalse  \n+    TABLE\n+  end\n+\n+  test(\"reject\") do\n+    sliced_table = @table.slice do |slicer|\n+      slicer.visible.reject do |value|\n+        value.nil? or value\n+      end\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    2\tfalse  \n+1\t   32\tfalse  \n+    TABLE\n+  end\n+\n+  test(\"!reject\") do\n+    sliced_table = @table.slice do |slicer|\n+      !slicer.visible.reject do |value|\n+        value.nil? or value\n+      end\n+    end\n+    assert_equal(<<-TABLE, sliced_table.to_s)\n+\tcount\tvisible\n+0\t    0\t       \n+1\t    1\ttrue   \n+2\t    4\t       \n+3\t    8\ttrue   \n+4\t   16\ttrue   \n+5\t   64\t       \n+6\t     \t       \n+7\t  256\ttrue   \n+    TABLE\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-table.rb b/ruby/red-arrow/test/test-table.rb\nnew file mode 100644\nindex 0000000000..65cc2a16c4\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-table.rb\n@@ -0,0 +1,464 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TableTest < Test::Unit::TestCase\n+  include Helper::Fixture\n+\n+  def setup\n+    @count_field = Arrow::Field.new(\"count\", :uint8)\n+    @visible_field = Arrow::Field.new(\"visible\", :boolean)\n+    schema = Arrow::Schema.new([@count_field, @visible_field])\n+    count_arrays = [\n+      Arrow::UInt8Array.new([1, 2]),\n+      Arrow::UInt8Array.new([4, 8, 16]),\n+      Arrow::UInt8Array.new([32, 64]),\n+      Arrow::UInt8Array.new([128]),\n+    ]\n+    visible_arrays = [\n+      Arrow::BooleanArray.new([true, false, nil]),\n+      Arrow::BooleanArray.new([true]),\n+      Arrow::BooleanArray.new([true, false]),\n+      Arrow::BooleanArray.new([nil]),\n+      Arrow::BooleanArray.new([nil]),\n+    ]\n+    @count_array = Arrow::ChunkedArray.new(count_arrays)\n+    @visible_array = Arrow::ChunkedArray.new(visible_arrays)\n+    @count_column = Arrow::Column.new(@count_field, @count_array)\n+    @visible_column = Arrow::Column.new(@visible_field, @visible_array)\n+    @table = Arrow::Table.new(schema, [@count_column, @visible_column])\n+  end\n+\n+  test(\"#columns\") do\n+    assert_equal([\"count\", \"visible\"],\n+                 @table.columns.collect(&:name))\n+  end\n+\n+  sub_test_case(\"#slice\") do\n+    test(\"Arrow::BooleanArray\") do\n+      target_rows_raw = [nil, true, true, false, true, false, true, true]\n+      target_rows = Arrow::BooleanArray.new(target_rows_raw)\n+      assert_equal(<<-TABLE, @table.slice(target_rows).to_s)\n+\tcount\tvisible\n+0\t    2\tfalse  \n+1\t    4\t       \n+2\t   16\ttrue   \n+3\t   64\t       \n+4\t  128\t       \n+      TABLE\n+    end\n+\n+    test(\"Array: boolean\") do\n+      target_rows_raw = [nil, true, true, false, true, false, true, true]\n+      assert_equal(<<-TABLE, @table.slice(target_rows_raw).to_s)\n+\tcount\tvisible\n+0\t    2\tfalse  \n+1\t    4\t       \n+2\t   16\ttrue   \n+3\t   64\t       \n+4\t  128\t       \n+      TABLE\n+    end\n+\n+    test(\"Integer: positive\") do\n+      assert_equal(<<-TABLE, @table.slice(2).to_s)\n+\tcount\tvisible\n+0\t    4\t       \n+      TABLE\n+    end\n+\n+    test(\"Integer: negative\") do\n+      assert_equal(<<-TABLE, @table.slice(-1).to_s)\n+\tcount\tvisible\n+0\t  128\t       \n+      TABLE\n+    end\n+\n+    test(\"Range: positive: include end\") do\n+      assert_equal(<<-TABLE, @table.slice(2..4).to_s)\n+\tcount\tvisible\n+0\t    4\t       \n+1\t    8\ttrue   \n+2\t   16\ttrue   \n+      TABLE\n+    end\n+\n+    test(\"Range: positive: exclude end\") do\n+      assert_equal(<<-TABLE, @table.slice(2...4).to_s)\n+\tcount\tvisible\n+0\t    4\t       \n+1\t    8\ttrue   \n+      TABLE\n+    end\n+\n+    test(\"Range: negative: include end\") do\n+      assert_equal(<<-TABLE, @table.slice(-4..-2).to_s)\n+\tcount\tvisible\n+0\t   16\ttrue   \n+1\t   32\tfalse  \n+2\t   64\t       \n+      TABLE\n+    end\n+\n+    test(\"Range: negative: exclude end\") do\n+      assert_equal(<<-TABLE, @table.slice(-4...-2).to_s)\n+\tcount\tvisible\n+0\t   16\ttrue   \n+1\t   32\tfalse  \n+      TABLE\n+    end\n+\n+    test(\"[from, to]: positive\") do\n+      assert_equal(<<-TABLE, @table.slice(0, 2).to_s)\n+\tcount\tvisible\n+0\t    1\ttrue   \n+1\t    2\tfalse  \n+      TABLE\n+    end\n+\n+    test(\"[from, to]: negative\") do\n+      assert_equal(<<-TABLE, @table.slice(-4, 2).to_s)\n+\tcount\tvisible\n+0\t   16\ttrue   \n+1\t   32\tfalse  \n+      TABLE\n+    end\n+\n+    sub_test_case(\"wrong argument\") do\n+      test(\"no arguments\") do\n+        message = \"wrong number of arguments (given 0, expected 1..2)\"\n+        assert_raise(ArgumentError.new(message)) do\n+          @table.slice\n+        end\n+      end\n+\n+      test(\"too many arguments: with block\") do\n+        message = \"wrong number of arguments (given 3, expected 1..2)\"\n+        assert_raise(ArgumentError.new(message)) do\n+          @table.slice(1, 2, 3)\n+        end\n+      end\n+\n+      test(\"too many arguments: without block\") do\n+        message = \"wrong number of arguments (given 3, expected 0..2)\"\n+        assert_raise(ArgumentError.new(message)) do\n+          @table.slice(1, 2, 3) {}\n+        end\n+      end\n+    end\n+  end\n+\n+  sub_test_case(\"#[]\") do\n+    test(\"[String]\") do\n+      assert_equal(@count_column, @table[\"count\"])\n+    end\n+\n+    test(\"[Symbol]\") do\n+      assert_equal(@visible_column, @table[:visible])\n+    end\n+  end\n+\n+  sub_test_case(\"#merge\") do\n+    sub_test_case(\"Hash\") do\n+      test(\"add\") do\n+        name_array = Arrow::StringArray.new([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n+        assert_equal(<<-TABLE, @table.merge(:name => name_array).to_s)\n+\tcount\tvisible\tname\n+0\t    1\ttrue   \ta   \n+1\t    2\tfalse  \tb   \n+2\t    4\t       \tc   \n+3\t    8\ttrue   \td   \n+4\t   16\ttrue   \te   \n+5\t   32\tfalse  \tf   \n+6\t   64\t       \tg   \n+7\t  128\t       \th   \n+        TABLE\n+      end\n+\n+      test(\"remove\") do\n+        assert_equal(<<-TABLE, @table.merge(:visible => nil).to_s)\n+\tcount\n+0\t    1\n+1\t    2\n+2\t    4\n+3\t    8\n+4\t   16\n+5\t   32\n+6\t   64\n+7\t  128\n+        TABLE\n+      end\n+\n+      test(\"replace\") do\n+        visible_array = Arrow::Int32Array.new([1] * @visible_array.length)\n+        assert_equal(<<-TABLE, @table.merge(:visible => visible_array).to_s)\n+\tcount\tvisible\n+0\t    1\t      1\n+1\t    2\t      1\n+2\t    4\t      1\n+3\t    8\t      1\n+4\t   16\t      1\n+5\t   32\t      1\n+6\t   64\t      1\n+7\t  128\t      1\n+        TABLE\n+      end\n+    end\n+\n+    sub_test_case(\"Arrow::Table\") do\n+      test(\"add\") do\n+        name_array = Arrow::StringArray.new([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n+        table = Arrow::Table.new(\"name\" => name_array)\n+        assert_equal(<<-TABLE, @table.merge(table).to_s)\n+\tcount\tvisible\tname\n+0\t    1\ttrue   \ta   \n+1\t    2\tfalse  \tb   \n+2\t    4\t       \tc   \n+3\t    8\ttrue   \td   \n+4\t   16\ttrue   \te   \n+5\t   32\tfalse  \tf   \n+6\t   64\t       \tg   \n+7\t  128\t       \th   \n+        TABLE\n+      end\n+\n+      test(\"replace\") do\n+        visible_array = Arrow::Int32Array.new([1] * @visible_array.length)\n+        table = Arrow::Table.new(\"visible\" => visible_array)\n+        assert_equal(<<-TABLE, @table.merge(table).to_s)\n+\tcount\tvisible\n+0\t    1\t      1\n+1\t    2\t      1\n+2\t    4\t      1\n+3\t    8\t      1\n+4\t   16\t      1\n+5\t   32\t      1\n+6\t   64\t      1\n+7\t  128\t      1\n+        TABLE\n+      end\n+    end\n+  end\n+\n+  test(\"column name getter\") do\n+    assert_equal(@visible_column, @table.visible)\n+  end\n+\n+  sub_test_case(\"#remove_column\") do\n+    test(\"String\") do\n+      assert_equal(<<-TABLE, @table.remove_column(\"visible\").to_s)\n+\tcount\n+0\t    1\n+1\t    2\n+2\t    4\n+3\t    8\n+4\t   16\n+5\t   32\n+6\t   64\n+7\t  128\n+      TABLE\n+    end\n+\n+    test(\"Symbol\") do\n+      assert_equal(<<-TABLE, @table.remove_column(:visible).to_s)\n+\tcount\n+0\t    1\n+1\t    2\n+2\t    4\n+3\t    8\n+4\t   16\n+5\t   32\n+6\t   64\n+7\t  128\n+      TABLE\n+    end\n+\n+    test(\"unknown column name\") do\n+      assert_raise(KeyError) do\n+        @table.remove_column(:nonexistent)\n+      end\n+    end\n+\n+    test(\"Integer\") do\n+      assert_equal(<<-TABLE, @table.remove_column(1).to_s)\n+\tcount\n+0\t    1\n+1\t    2\n+2\t    4\n+3\t    8\n+4\t   16\n+5\t   32\n+6\t   64\n+7\t  128\n+      TABLE\n+    end\n+\n+    test(\"negative integer\") do\n+      assert_equal(<<-TABLE, @table.remove_column(-1).to_s)\n+\tcount\n+0\t    1\n+1\t    2\n+2\t    4\n+3\t    8\n+4\t   16\n+5\t   32\n+6\t   64\n+7\t  128\n+      TABLE\n+    end\n+\n+    test(\"too small index\") do\n+      assert_raise(IndexError) do\n+        @table.remove_column(-3)\n+      end\n+    end\n+\n+    test(\"too large index\") do\n+      assert_raise(IndexError) do\n+        @table.remove_column(2)\n+      end\n+    end\n+  end\n+\n+  sub_test_case(\"#select_columns\") do\n+    def setup\n+      raw_table = {\n+        :a => Arrow::UInt8Array.new([1]),\n+        :b => Arrow::UInt8Array.new([1]),\n+        :c => Arrow::UInt8Array.new([1]),\n+        :d => Arrow::UInt8Array.new([1]),\n+        :e => Arrow::UInt8Array.new([1]),\n+      }\n+      @table = Arrow::Table.new(raw_table)\n+    end\n+\n+    test(\"names\") do\n+      assert_equal(<<-TABLE, @table.select_columns(:c, :a).to_s)\n+\tc\ta\n+0\t1\t1\n+      TABLE\n+    end\n+\n+    test(\"range\") do\n+      assert_equal(<<-TABLE, @table.select_columns(2...4).to_s)\n+\tc\td\n+0\t1\t1\n+      TABLE\n+    end\n+\n+    test(\"indexes\") do\n+      assert_equal(<<-TABLE, @table.select_columns(0, -1, 2).to_s)\n+\ta\te\tc\n+0\t1\t1\t1\n+      TABLE\n+    end\n+\n+    test(\"mixed\") do\n+      assert_equal(<<-TABLE, @table.select_columns(:a, -1, 2..3).to_s)\n+\ta\te\tc\td\n+0\t1\t1\t1\t1\n+      TABLE\n+    end\n+\n+    test(\"block\") do\n+      selected_table = @table.select_columns.with_index do |column, i|\n+        column.name == \"a\" or i.odd?\n+      end\n+      assert_equal(<<-TABLE, selected_table.to_s)\n+\ta\tb\td\n+0\t1\t1\t1\n+      TABLE\n+    end\n+\n+    test(\"names, indexes and block\") do\n+      selected_table = @table.select_columns(:a, -1) do |column|\n+        column.name == \"a\"\n+      end\n+      assert_equal(<<-TABLE, selected_table.to_s)\n+\ta\n+0\t1\n+      TABLE\n+    end\n+  end\n+\n+  sub_test_case(\"#save and .load\") do\n+    sub_test_case(\":format\") do\n+      test(\"default\") do\n+        file = Tempfile.new([\"red-arrow\", \".arrow\"])\n+        @table.save(file.path)\n+        assert_equal(@table, Arrow::Table.load(file.path))\n+      end\n+\n+      test(\":batch\") do\n+        file = Tempfile.new([\"red-arrow\", \".arrow\"])\n+        @table.save(file.path, :format => :batch)\n+        assert_equal(@table, Arrow::Table.load(file.path, :format => :batch))\n+      end\n+\n+      test(\":stream\") do\n+        file = Tempfile.new([\"red-arrow\", \".arrow\"])\n+        @table.save(file.path, :format => :stream)\n+        assert_equal(@table, Arrow::Table.load(file.path, :format => :stream))\n+      end\n+\n+      test(\":csv\") do\n+        file = Tempfile.new([\"red-arrow\", \".csv\"])\n+        @table.save(file.path, :format => :csv)\n+        assert_equal(@table, Arrow::Table.load(file.path, :format => :csv))\n+      end\n+\n+      sub_test_case(\"load: auto detect\") do\n+        test(\":batch\") do\n+          file = Tempfile.new([\"red-arrow\", \".arrow\"])\n+          @table.save(file.path, :format => :batch)\n+          assert_equal(@table, Arrow::Table.load(file.path))\n+        end\n+\n+        test(\":stream\") do\n+          file = Tempfile.new([\"red-arrow\", \".arrow\"])\n+          @table.save(file.path, :format => :stream)\n+          assert_equal(@table, Arrow::Table.load(file.path))\n+        end\n+\n+        test(\":csv\") do\n+          path = fixture_path(\"with-header.csv\")\n+          assert_equal(<<-TABLE, Arrow::Table.load(path, skip_lines: /^#/).to_s)\n+\tname\tscore\n+0\talice\t   10\n+1\tbob \t   29\n+2\tchris\t   -1\n+          TABLE\n+        end\n+      end\n+    end\n+  end\n+\n+  test(\"#pack\") do\n+    packed_table = @table.pack\n+    column_n_chunks = packed_table.columns.collect {|c| c.data.n_chunks}\n+    assert_equal([[1, 1], <<-TABLE], [column_n_chunks, packed_table.to_s])\n+\tcount\tvisible\n+0\t    1\ttrue   \n+1\t    2\tfalse  \n+2\t    4\t       \n+3\t    8\ttrue   \n+4\t   16\ttrue   \n+5\t   32\tfalse  \n+6\t   64\t       \n+7\t  128\t       \n+    TABLE\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/test-timestamp-array.rb b/ruby/red-arrow/test/test-timestamp-array.rb\nnew file mode 100644\nindex 0000000000..b24f8d40d1\n--- /dev/null\n+++ b/ruby/red-arrow/test/test-timestamp-array.rb\n@@ -0,0 +1,26 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TimestampArrayTest < Test::Unit::TestCase\n+  test(\"#[]\") do\n+    sec = 1513267750\n+    usec = 914509\n+    array = Arrow::TimestampArray.new(:micro, [sec * (10 ** 6) + usec])\n+    time = Time.at(sec, usec)\n+    assert_equal(time, array[0])\n+  end\n+end\ndiff --git a/ruby/red-arrow/version.rb b/ruby/red-arrow/version.rb\nnew file mode 100644\nindex 0000000000..e8f043f897\n--- /dev/null\n+++ b/ruby/red-arrow/version.rb\n@@ -0,0 +1,71 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+require \"pathname\"\n+\n+version_rb_path = Pathname.new(__FILE__)\n+base_dir = version_rb_path.dirname\n+pom_xml_path = base_dir.join(\"..\", \"..\", \"java\", \"pom.xml\")\n+lib_version_rb_path = base_dir.join(\"lib\", \"arrow\", \"version.rb\")\n+\n+need_update = false\n+if not lib_version_rb_path.exist?\n+  need_update = true\n+elsif version_rb_path.mtime > lib_version_rb_path.mtime\n+  need_update = true\n+elsif pom_xml_path.exist? and pom_xml_path.mtime > lib_version_rb_path.mtime\n+  need_update = true\n+end\n+\n+if need_update\n+  version = pom_xml_path.read.scan(/^  <version>(.+?)<\\/version>/)[0][0]\n+  major, minor, micro, tag = version.split(/[.-]/)\n+  lib_version_rb_path.open(\"w\") do |lib_version_rb|\n+    lib_version_rb.puts(<<-RUBY)\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  module Version\n+    MAJOR = #{major}\n+    MINOR = #{minor}\n+    MICRO = #{micro}\n+    TAG = #{tag ? tag.dump : nil}\n+    STRING = #{version.dump}\n+  end\n+\n+  VERSION = Version::STRING\n+end\n+    RUBY\n+  end\n+end\n+\n+require_relative \"lib/arrow/version\"\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-25T01:13:54.711+0000",
                    "updated": "2018-05-25T01:13:54.711+0000",
                    "started": "2018-05-25T01:13:54.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "105800",
                    "issueId": "13156878"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/worklog/105803",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #1990: ARROW-2537: [Ruby] Import\nURL: https://github.com/apache/arrow/pull/1990#issuecomment-391913602\n \n \n   Thanks!!!\r\n   I'll send some follow-up pull requests to resolve your comments.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-25T01:25:43.790+0000",
                    "updated": "2018-05-25T01:25:43.790+0000",
                    "started": "2018-05-25T01:25:43.790+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "105803",
                    "issueId": "13156878"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2b7e994d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21d7fda0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7afcdae5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@645802e7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64d38468[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7d0203da[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6135c56d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@45deac96[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3dd69081[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@50274832[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f76f1f6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2f7c5492[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri May 25 01:13:46 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-05-25T01:13:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2537/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-05-03T14:03:50.000+0000",
        "updated": "2018-07-27T15:24:36.000+0000",
        "timeoriginalestimate": null,
        "description": "I'm developing Ruby bindings of Apache Arrow at https://github.com/red-data-tools/red-arrow and https://github.com/red-data-tools/red-arrow-gpu .\r\nThey should be imported to the Apache Arrow project.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Ruby] Import",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13156878/comment/16490073",
                    "id": "16490073",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1990\n[https://github.com/apache/arrow/pull/1990]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-05-25T01:13:46.915+0000",
                    "updated": "2018-05-25T01:13:46.915+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3tb1j:",
        "customfield_12314139": null
    }
}