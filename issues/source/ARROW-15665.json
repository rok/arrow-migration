{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13428056",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056",
    "key": "ARROW-15665",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12633384",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12633384",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13428017",
                    "key": "ARROW-15659",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428017",
                    "fields": {
                        "summary": "[R] strptime should return NA (not error) with format mismatch ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12635290",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12635290",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13432931",
                    "key": "ARROW-15894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13432931",
                    "fields": {
                        "summary": "[C++] Strptime issues umbrella",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12635735",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12635735",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13434089",
                    "key": "ARROW-15948",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434089",
                    "fields": {
                        "summary": "[C++] strptime rolls-over dates not in range for current month ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                            "name": "Critical",
                            "id": "2"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12636267",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12636267",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13431206",
                    "key": "ARROW-15813",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431206",
                    "fields": {
                        "summary": "[R] [C++] Should strptime support a partial format?",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
            "name": "rokm",
            "key": "rokm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Rok Mihevc",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
            "name": "rokm",
            "key": "rokm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Rok Mihevc",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
            "name": "rokm",
            "key": "rokm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Rok Mihevc",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "aggregateprogress": {
            "progress": 34200,
            "total": 34200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 34200,
            "total": 34200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15665/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 57,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/729720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok opened a new pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464\n\n\n   This is to resolve [ARROW-15665](https://issues.apache.org/jira/browse/ARROW-15665).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-18T15:42:02.717+0000",
                    "updated": "2022-02-18T15:42:02.717+0000",
                    "started": "2022-02-18T15:42:02.716+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "729720",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/729721",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#issuecomment-1044722371\n\n\n   https://issues.apache.org/jira/browse/ARROW-15665\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-18T15:42:27.277+0000",
                    "updated": "2022-02-18T15:42:27.277+0000",
                    "started": "2022-02-18T15:42:27.277+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "729721",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/731519",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#issuecomment-1048734513\n\n\n   @pitrou I'm not sure what's causing [this](https://github.com/apache/arrow/runs/5298052199?check_suite_focus=true#step:6:5655) (`Check failed: out.array()->buffers[0] Null bitmap deleted by kernel but can_write_into_slices = true`). Any insight?\r\n   Would kernel preallocation settings help this or am I missing something else?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-23T12:30:48.836+0000",
                    "updated": "2022-02-23T12:30:48.836+0000",
                    "started": "2022-02-23T12:30:48.835+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "731519",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/734025",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#issuecomment-1054492780\n\n\n   `can_write_into_slices` means the kernel exec machinery won't let you redefine buffer addresses: you can write into the buffers given to you by the machinery but you are not allowed to point them elsewhere.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-28T17:29:56.678+0000",
                    "updated": "2022-02-28T17:29:56.678+0000",
                    "started": "2022-02-28T17:29:56.677+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "734025",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/742953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#issuecomment-1070303629\n\n\n   @pitrou I think this is ready for review. I'm not sure why `can_write_into_slices=true` is required here, please check that I'm not doing something ill advised.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T04:06:27.672+0000",
                    "updated": "2022-03-17T04:06:27.672+0000",
                    "started": "2022-03-17T04:06:27.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "742953",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/742955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok edited a comment on pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#issuecomment-1070303629\n\n\n   @pitrou I think this is ready for review. I'm not sure why `can_write_into_slices=true` is required here, could you please check that I'm not doing something ill advised.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T04:07:55.561+0000",
                    "updated": "2022-03-17T04:07:55.561+0000",
                    "started": "2022-03-17T04:07:55.561+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "742955",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/742957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#issuecomment-1070311352\n\n\n   @lidavidm I moved `Strptime` to `scalar_temporal_unary.cc`. Do you think that makes sense or better keep it in `scalar_string_ascii.cc`?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T04:22:44.548+0000",
                    "updated": "2022-03-17T04:22:44.548+0000",
                    "started": "2022-03-17T04:22:44.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "742957",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/743108",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#discussion_r829048674\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1590,7 +1705,13 @@ const FunctionDoc strftime_doc{\n      \"does not exist on this system.\"),\n     {\"timestamps\"},\n     \"StrftimeOptions\"};\n-\n+const FunctionDoc strptime_doc(\n+    \"Parse timestamps\",\n+    (\"For each string in `strings`, parse it as a timestamp.\\n\"\n+     \"The timestamp unit and the expected string pattern must be given\\n\"\n+     \"in StrptimeOptions.  Null inputs emit null.  If a non-null string\\n\"\n+     \"fails parsing, an error is returned by default.\"),\n\nReview comment:\n       Ditto here - what is the behavior if we don't raise errors and we get an invalid timestamp?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1143,6 +1145,117 @@ struct Strftime {\n };\n #endif\n \n+// ----------------------------------------------------------------------\n+// Convert string representations of timestamps in arbitrary format to timestamps\n+\n+static std::string GetZone(std::string format) {\n+  // Check for use of %z or %Z\n+  size_t cur = 0;\n+  std::string zone = \"\";\n+  while (cur < format.size() - 1) {\n+    if (format[cur] == '%') {\n+      if (format[cur + 1] == 'z') {\n+        zone = \"UTC\";\n+        break;\n+      }\n+      cur++;\n+    }\n+    cur++;\n+  }\n+  return zone;\n+}\n+\n+template <typename Duration, typename InType>\n+struct Strptime {\n+  const std::shared_ptr<TimestampParser> parser;\n+  const TimeUnit::type unit;\n+  const std::string zone;\n+  const bool raise_errors;\n+\n+  static Result<Strptime> Make(KernelContext* ctx, const DataType& type) {\n+    const StrptimeOptions& options = StrptimeState::Get(ctx);\n+\n+    return Strptime{TimestampParser::MakeStrptime(options.format),\n+                    std::move(options.unit), GetZone(options.format),\n+                    options.raise_errors};\n+  }\n+\n+  static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    ARROW_ASSIGN_OR_RAISE(auto self, Make(ctx, *in.type));\n+\n+    if (in.is_valid) {\n+      auto s = internal::UnboxScalar<InType>::Unbox(in);\n+      int64_t result;\n+      if ((*self.parser)(s.data(), s.size(), self.unit, &result)) {\n+        *checked_cast<TimestampScalar*>(out) =\n+            TimestampScalar(result, timestamp(self.unit, self.zone));\n+      } else {\n+        if (self.raise_errors) {\n+          return Status::Invalid(\"Failed to parse string: '\", s.data(),\n+                                 \"' as a scalar of type \",\n+                                 TimestampType(self.unit).ToString());\n+        } else {\n+          out->is_valid = false;\n+        }\n+      }\n+    } else {\n+      out->is_valid = false;\n+    }\n+    return Status::OK();\n+  }\n+\n+  static Status Call(KernelContext* ctx, const ArrayData& in, ArrayData* out) {\n+    ARROW_ASSIGN_OR_RAISE(auto self, Make(ctx, *in.type));\n+\n+    std::unique_ptr<ArrayBuilder> array_builder;\n\nReview comment:\n       Using a builder is probably the reason for why we can't `can_write_into_slices`? Since the builder allocates its own buffer. Presumably the kernel has preallocation enabled so you should instead be able to write directly into `out->array()->GetValues<int64_t>(1)`.\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -1458,10 +1458,12 @@ class StrptimeOptions(_StrptimeOptions):\n     unit : str\n         Timestamp unit of the output.\n         Accepted values are \"s\", \"ms\", \"us\", \"ns\".\n+    raise_errors : boolean, default True\n+        Raise on parsing errors.\n\nReview comment:\n       Same here - what's the behavior otherwise?\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -267,12 +267,17 @@ class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n \n class ARROW_EXPORT StrptimeOptions : public FunctionOptions {\n  public:\n-  explicit StrptimeOptions(std::string format, TimeUnit::type unit);\n+  explicit StrptimeOptions(std::string format, TimeUnit::type unit,\n+                           bool raise_errors = true);\n   StrptimeOptions();\n   static constexpr char const kTypeName[] = \"StrptimeOptions\";\n \n+  /// The desired format string.\n   std::string format;\n+  /// The desired time resolution\n   TimeUnit::type unit;\n+  /// Raise on parsing errors\n\nReview comment:\n       What is the behavior if we don't raise parse errors?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -27,6 +27,7 @@\n #include <utf8proc.h>\n #endif\n \n+#include \"arrow/compute/api.h\"\n\nReview comment:\n       nit: is there a more precise header we can include\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1143,6 +1145,117 @@ struct Strftime {\n };\n #endif\n \n+// ----------------------------------------------------------------------\n+// Convert string representations of timestamps in arbitrary format to timestamps\n+\n+static std::string GetZone(std::string format) {\n\nReview comment:\n       `const std::string&`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -1842,12 +1843,24 @@ TYPED_TEST(TestBaseBinaryKernels, ExtractRegexInvalid) {\n TYPED_TEST(TestStringKernels, Strptime) {\n   std::string input1 = R\"([\"5/1/2020\", null, \"12/11/1900\"])\";\n   std::string output1 = R\"([\"2020-05-01\", null, \"1900-12-11\"])\";\n-  StrptimeOptions options(\"%m/%d/%Y\", TimeUnit::MICRO);\n+  auto input_array = ArrayFromJSON(utf8(), input1);\n+  StrptimeOptions options(\"%m/%d/%Y\", TimeUnit::MICRO, false);\n   this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output1, &options);\n \n   input1 = R\"([\"5/1/2020 %z\", null, \"12/11/1900 %z\"])\";\n   options.format = \"%m/%d/%Y %%z\";\n   this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output1, &options);\n+\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"strptime\", {input_array}, &options));\n+\n+  options.format = \"%Y-%m-%d\";\n+  options.raise_errors = true;\n+  ASSERT_RAISES(Invalid, CallFunction(\"strptime\", {input_array}, &options));\n+\n+  EXPECT_RAISES_WITH_MESSAGE_THAT(\n+      Invalid,\n+      testing::HasSubstr(\"Invalid: Failed to parse string: '5/1/202012/11/1900'\"),\n+      Strptime(input_array, options));\n\nReview comment:\n       Can we have a test of the behavior with raise_errors = false and an invalid string?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -1842,12 +1843,24 @@ TYPED_TEST(TestBaseBinaryKernels, ExtractRegexInvalid) {\n TYPED_TEST(TestStringKernels, Strptime) {\n   std::string input1 = R\"([\"5/1/2020\", null, \"12/11/1900\"])\";\n   std::string output1 = R\"([\"2020-05-01\", null, \"1900-12-11\"])\";\n-  StrptimeOptions options(\"%m/%d/%Y\", TimeUnit::MICRO);\n+  auto input_array = ArrayFromJSON(utf8(), input1);\n+  StrptimeOptions options(\"%m/%d/%Y\", TimeUnit::MICRO, false);\n   this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output1, &options);\n \n   input1 = R\"([\"5/1/2020 %z\", null, \"12/11/1900 %z\"])\";\n   options.format = \"%m/%d/%Y %%z\";\n   this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output1, &options);\n+\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"strptime\", {input_array}, &options));\n+\n+  options.format = \"%Y-%m-%d\";\n+  options.raise_errors = true;\n+  ASSERT_RAISES(Invalid, CallFunction(\"strptime\", {input_array}, &options));\n+\n+  EXPECT_RAISES_WITH_MESSAGE_THAT(\n+      Invalid,\n+      testing::HasSubstr(\"Invalid: Failed to parse string: '5/1/202012/11/1900'\"),\n\nReview comment:\n       This error message seems suspect, why are both rows in the error message?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1143,6 +1145,117 @@ struct Strftime {\n };\n #endif\n \n+// ----------------------------------------------------------------------\n+// Convert string representations of timestamps in arbitrary format to timestamps\n+\n+static std::string GetZone(std::string format) {\n+  // Check for use of %z or %Z\n+  size_t cur = 0;\n+  std::string zone = \"\";\n+  while (cur < format.size() - 1) {\n+    if (format[cur] == '%') {\n\nReview comment:\n       Do we want to respect `%%` for escaping?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T12:15:38.136+0000",
                    "updated": "2022-03-17T12:15:38.136+0000",
                    "started": "2022-03-17T12:15:38.136+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743108",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/743170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#discussion_r829168784\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -267,12 +267,17 @@ class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n \n class ARROW_EXPORT StrptimeOptions : public FunctionOptions {\n  public:\n-  explicit StrptimeOptions(std::string format, TimeUnit::type unit);\n+  explicit StrptimeOptions(std::string format, TimeUnit::type unit,\n+                           bool raise_errors = true);\n   StrptimeOptions();\n   static constexpr char const kTypeName[] = \"StrptimeOptions\";\n \n+  /// The desired format string.\n   std::string format;\n+  /// The desired time resolution\n   TimeUnit::type unit;\n+  /// Raise on parsing errors\n\nReview comment:\n       Indeed, we may want to make this more descriptive, e.g. `bool error_is_null` or something. Opinions?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T14:38:23.496+0000",
                    "updated": "2022-03-17T14:38:23.496+0000",
                    "started": "2022-03-17T14:38:23.496+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743170",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/743171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#discussion_r829169634\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1143,6 +1145,117 @@ struct Strftime {\n };\n #endif\n \n+// ----------------------------------------------------------------------\n+// Convert string representations of timestamps in arbitrary format to timestamps\n+\n+static std::string GetZone(std::string format) {\n+  // Check for use of %z or %Z\n+  size_t cur = 0;\n+  std::string zone = \"\";\n+  while (cur < format.size() - 1) {\n+    if (format[cur] == '%') {\n+      if (format[cur + 1] == 'z') {\n+        zone = \"UTC\";\n+        break;\n+      }\n+      cur++;\n+    }\n+    cur++;\n+  }\n+  return zone;\n+}\n+\n+template <typename Duration, typename InType>\n+struct Strptime {\n+  const std::shared_ptr<TimestampParser> parser;\n+  const TimeUnit::type unit;\n+  const std::string zone;\n+  const bool raise_errors;\n+\n+  static Result<Strptime> Make(KernelContext* ctx, const DataType& type) {\n+    const StrptimeOptions& options = StrptimeState::Get(ctx);\n+\n+    return Strptime{TimestampParser::MakeStrptime(options.format),\n+                    std::move(options.unit), GetZone(options.format),\n+                    options.raise_errors};\n+  }\n+\n+  static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    ARROW_ASSIGN_OR_RAISE(auto self, Make(ctx, *in.type));\n+\n+    if (in.is_valid) {\n+      auto s = internal::UnboxScalar<InType>::Unbox(in);\n+      int64_t result;\n+      if ((*self.parser)(s.data(), s.size(), self.unit, &result)) {\n+        *checked_cast<TimestampScalar*>(out) =\n+            TimestampScalar(result, timestamp(self.unit, self.zone));\n+      } else {\n+        if (self.raise_errors) {\n+          return Status::Invalid(\"Failed to parse string: '\", s.data(),\n+                                 \"' as a scalar of type \",\n+                                 TimestampType(self.unit).ToString());\n+        } else {\n+          out->is_valid = false;\n+        }\n+      }\n+    } else {\n+      out->is_valid = false;\n+    }\n+    return Status::OK();\n+  }\n+\n+  static Status Call(KernelContext* ctx, const ArrayData& in, ArrayData* out) {\n+    ARROW_ASSIGN_OR_RAISE(auto self, Make(ctx, *in.type));\n+\n+    std::unique_ptr<ArrayBuilder> array_builder;\n\nReview comment:\n       (probably `GetMutableValues`, but yes)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T14:41:17.759+0000",
                    "updated": "2022-03-17T14:41:17.759+0000",
                    "started": "2022-03-17T14:41:17.759+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743171",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/743407",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#discussion_r829467326\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -1458,10 +1458,12 @@ class StrptimeOptions(_StrptimeOptions):\n     unit : str\n         Timestamp unit of the output.\n         Accepted values are \"s\", \"ms\", \"us\", \"ns\".\n+    raise_errors : boolean, default True\n+        Raise on parsing errors.\n\nReview comment:\n       Done.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T20:20:38.475+0000",
                    "updated": "2022-03-17T20:20:38.475+0000",
                    "started": "2022-03-17T20:20:38.475+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743407",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/743408",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#discussion_r829467612\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1143,6 +1145,117 @@ struct Strftime {\n };\n #endif\n \n+// ----------------------------------------------------------------------\n+// Convert string representations of timestamps in arbitrary format to timestamps\n+\n+static std::string GetZone(std::string format) {\n\nReview comment:\n       Done as parameter.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T20:21:01.031+0000",
                    "updated": "2022-03-17T20:21:01.031+0000",
                    "started": "2022-03-17T20:21:01.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743408",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/743409",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#discussion_r829468217\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1590,7 +1705,13 @@ const FunctionDoc strftime_doc{\n      \"does not exist on this system.\"),\n     {\"timestamps\"},\n     \"StrftimeOptions\"};\n-\n+const FunctionDoc strptime_doc(\n+    \"Parse timestamps\",\n+    (\"For each string in `strings`, parse it as a timestamp.\\n\"\n+     \"The timestamp unit and the expected string pattern must be given\\n\"\n+     \"in StrptimeOptions.  Null inputs emit null.  If a non-null string\\n\"\n+     \"fails parsing, an error is returned by default.\"),\n\nReview comment:\n       Done. Please check.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T20:22:03.701+0000",
                    "updated": "2022-03-17T20:22:03.701+0000",
                    "started": "2022-03-17T20:22:03.701+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743409",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/743411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#discussion_r829469636\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -267,12 +267,17 @@ class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n \n class ARROW_EXPORT StrptimeOptions : public FunctionOptions {\n  public:\n-  explicit StrptimeOptions(std::string format, TimeUnit::type unit);\n+  explicit StrptimeOptions(std::string format, TimeUnit::type unit,\n+                           bool raise_errors = true);\n   StrptimeOptions();\n   static constexpr char const kTypeName[] = \"StrptimeOptions\";\n \n+  /// The desired format string.\n   std::string format;\n+  /// The desired time resolution\n   TimeUnit::type unit;\n+  /// Raise on parsing errors\n\nReview comment:\n       Changed to `error_is_null`. How about `error_returns_null`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T20:23:18.588+0000",
                    "updated": "2022-03-17T20:23:18.588+0000",
                    "started": "2022-03-17T20:23:18.588+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743411",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/743412",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#discussion_r829469936\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -27,6 +27,7 @@\n #include <utf8proc.h>\n #endif\n \n+#include \"arrow/compute/api.h\"\n\nReview comment:\n       Removed.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T20:23:41.854+0000",
                    "updated": "2022-03-17T20:23:41.854+0000",
                    "started": "2022-03-17T20:23:41.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743412",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/743716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#discussion_r829966381\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1143,6 +1145,119 @@ struct Strftime {\n };\n #endif\n \n+// ----------------------------------------------------------------------\n+// Convert string representations of timestamps in arbitrary format to timestamps\n+\n+const std::string GetZone(const std::string& format) {\n+  // Check for use of %z or %Z\n+  size_t cur = 0;\n+  std::string zone = \"\";\n+  while (cur < format.size() - 1) {\n+    if (format[cur] == '%') {\n+      if (format[cur + 1] == 'z') {\n+        zone = \"UTC\";\n+        break;\n+      }\n+      cur++;\n+    }\n+    cur++;\n+  }\n+  return zone;\n+}\n+\n+template <typename Duration, typename InType>\n+struct Strptime {\n+  const std::shared_ptr<TimestampParser> parser;\n+  const TimeUnit::type unit;\n+  const std::string zone;\n+  const bool error_is_null;\n+\n+  static Result<Strptime> Make(KernelContext* ctx, const DataType& type) {\n+    const StrptimeOptions& options = StrptimeState::Get(ctx);\n+\n+    return Strptime{TimestampParser::MakeStrptime(options.format),\n+                    std::move(options.unit), GetZone(options.format),\n+                    options.error_is_null};\n+  }\n+\n+  static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    ARROW_ASSIGN_OR_RAISE(auto self, Make(ctx, *in.type));\n+\n+    if (in.is_valid) {\n+      auto s = internal::UnboxScalar<InType>::Unbox(in);\n+      int64_t result;\n+      if ((*self.parser)(s.data(), s.size(), self.unit, &result)) {\n+        *checked_cast<TimestampScalar*>(out) =\n+            TimestampScalar(result, timestamp(self.unit, self.zone));\n+      } else {\n+        if (self.error_is_null) {\n+          out->is_valid = false;\n+        } else {\n+          return Status::Invalid(\"Failed to parse string: '\", s.data(),\n\nReview comment:\n       ah, this is probably why all the string data shows up in the test above - `s` isn't null terminated because it's a string_view and this is getting treated as a `char*`. That's probably undefined behavior, does the constructor not take `s` by itself?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -1840,14 +1840,26 @@ TYPED_TEST(TestBaseBinaryKernels, ExtractRegexInvalid) {\n #endif\n \n TYPED_TEST(TestStringKernels, Strptime) {\n-  std::string input1 = R\"([\"5/1/2020\", null, \"12/11/1900\"])\";\n-  std::string output1 = R\"([\"2020-05-01\", null, \"1900-12-11\"])\";\n-  StrptimeOptions options(\"%m/%d/%Y\", TimeUnit::MICRO);\n+  std::string input1 = R\"([\"5/1/2020\", null, \"12/13/1900\"])\";\n+  std::string output1 = R\"([\"2020-05-01\", null, \"1900-12-13\"])\";\n+  std::string output2 = R\"([\"2020-01-05\", null, null])\";\n+  auto input = ArrayFromJSON(this->type(), input1);\n+\n+  StrptimeOptions options(\"%m/%d/%Y\", TimeUnit::MICRO, /*error_is_null=*/true);\n   this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output1, &options);\n \n-  input1 = R\"([\"5/1/2020 %z\", null, \"12/11/1900 %z\"])\";\n+  options.format = \"%d/%m/%Y\";\n+  this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output2, &options);\n+\n+  input1 = R\"([\"5/1/2020 %z\", null, \"12/13/1900 %z\"])\";\n   options.format = \"%m/%d/%Y %%z\";\n   this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output1, &options);\n+\n+  options.error_is_null = false;\n+  EXPECT_RAISES_WITH_MESSAGE_THAT(\n+      Invalid,\n+      testing::HasSubstr(\"Invalid: Failed to parse string: '5/1/202012/13/1900'\"),\n\nReview comment:\n       I'm still curious why both rows get put into the string when it's invalid.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T12:47:05.492+0000",
                    "updated": "2022-03-18T12:47:05.492+0000",
                    "started": "2022-03-18T12:47:05.492+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743716",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/743991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#discussion_r829467326\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -1458,10 +1458,12 @@ class StrptimeOptions(_StrptimeOptions):\n     unit : str\n         Timestamp unit of the output.\n         Accepted values are \"s\", \"ms\", \"us\", \"ns\".\n+    raise_errors : boolean, default True\n+        Raise on parsing errors.\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1143,6 +1145,117 @@ struct Strftime {\n };\n #endif\n \n+// ----------------------------------------------------------------------\n+// Convert string representations of timestamps in arbitrary format to timestamps\n+\n+static std::string GetZone(std::string format) {\n\nReview comment:\n       Done as parameter.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1590,7 +1705,13 @@ const FunctionDoc strftime_doc{\n      \"does not exist on this system.\"),\n     {\"timestamps\"},\n     \"StrftimeOptions\"};\n-\n+const FunctionDoc strptime_doc(\n+    \"Parse timestamps\",\n+    (\"For each string in `strings`, parse it as a timestamp.\\n\"\n+     \"The timestamp unit and the expected string pattern must be given\\n\"\n+     \"in StrptimeOptions.  Null inputs emit null.  If a non-null string\\n\"\n+     \"fails parsing, an error is returned by default.\"),\n\nReview comment:\n       Done. Please check.\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -267,12 +267,17 @@ class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n \n class ARROW_EXPORT StrptimeOptions : public FunctionOptions {\n  public:\n-  explicit StrptimeOptions(std::string format, TimeUnit::type unit);\n+  explicit StrptimeOptions(std::string format, TimeUnit::type unit,\n+                           bool raise_errors = true);\n   StrptimeOptions();\n   static constexpr char const kTypeName[] = \"StrptimeOptions\";\n \n+  /// The desired format string.\n   std::string format;\n+  /// The desired time resolution\n   TimeUnit::type unit;\n+  /// Raise on parsing errors\n\nReview comment:\n       Changed to `error_is_null`. How about `error_returns_null`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -27,6 +27,7 @@\n #include <utf8proc.h>\n #endif\n \n+#include \"arrow/compute/api.h\"\n\nReview comment:\n       Removed.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T14:55:27.470+0000",
                    "updated": "2022-03-18T14:55:27.470+0000",
                    "started": "2022-03-18T14:55:27.470+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743991",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/744057",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#discussion_r829168784\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -267,12 +267,17 @@ class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n \n class ARROW_EXPORT StrptimeOptions : public FunctionOptions {\n  public:\n-  explicit StrptimeOptions(std::string format, TimeUnit::type unit);\n+  explicit StrptimeOptions(std::string format, TimeUnit::type unit,\n+                           bool raise_errors = true);\n   StrptimeOptions();\n   static constexpr char const kTypeName[] = \"StrptimeOptions\";\n \n+  /// The desired format string.\n   std::string format;\n+  /// The desired time resolution\n   TimeUnit::type unit;\n+  /// Raise on parsing errors\n\nReview comment:\n       Indeed, we may want to make this more descriptive, e.g. `bool error_is_null` or something. Opinions?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1143,6 +1145,117 @@ struct Strftime {\n };\n #endif\n \n+// ----------------------------------------------------------------------\n+// Convert string representations of timestamps in arbitrary format to timestamps\n+\n+static std::string GetZone(std::string format) {\n+  // Check for use of %z or %Z\n+  size_t cur = 0;\n+  std::string zone = \"\";\n+  while (cur < format.size() - 1) {\n+    if (format[cur] == '%') {\n+      if (format[cur + 1] == 'z') {\n+        zone = \"UTC\";\n+        break;\n+      }\n+      cur++;\n+    }\n+    cur++;\n+  }\n+  return zone;\n+}\n+\n+template <typename Duration, typename InType>\n+struct Strptime {\n+  const std::shared_ptr<TimestampParser> parser;\n+  const TimeUnit::type unit;\n+  const std::string zone;\n+  const bool raise_errors;\n+\n+  static Result<Strptime> Make(KernelContext* ctx, const DataType& type) {\n+    const StrptimeOptions& options = StrptimeState::Get(ctx);\n+\n+    return Strptime{TimestampParser::MakeStrptime(options.format),\n+                    std::move(options.unit), GetZone(options.format),\n+                    options.raise_errors};\n+  }\n+\n+  static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    ARROW_ASSIGN_OR_RAISE(auto self, Make(ctx, *in.type));\n+\n+    if (in.is_valid) {\n+      auto s = internal::UnboxScalar<InType>::Unbox(in);\n+      int64_t result;\n+      if ((*self.parser)(s.data(), s.size(), self.unit, &result)) {\n+        *checked_cast<TimestampScalar*>(out) =\n+            TimestampScalar(result, timestamp(self.unit, self.zone));\n+      } else {\n+        if (self.raise_errors) {\n+          return Status::Invalid(\"Failed to parse string: '\", s.data(),\n+                                 \"' as a scalar of type \",\n+                                 TimestampType(self.unit).ToString());\n+        } else {\n+          out->is_valid = false;\n+        }\n+      }\n+    } else {\n+      out->is_valid = false;\n+    }\n+    return Status::OK();\n+  }\n+\n+  static Status Call(KernelContext* ctx, const ArrayData& in, ArrayData* out) {\n+    ARROW_ASSIGN_OR_RAISE(auto self, Make(ctx, *in.type));\n+\n+    std::unique_ptr<ArrayBuilder> array_builder;\n\nReview comment:\n       (probably `GetMutableValues`, but yes)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T15:01:21.757+0000",
                    "updated": "2022-03-18T15:01:21.757+0000",
                    "started": "2022-03-18T15:01:21.756+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744057",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/744066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#discussion_r829048674\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1590,7 +1705,13 @@ const FunctionDoc strftime_doc{\n      \"does not exist on this system.\"),\n     {\"timestamps\"},\n     \"StrftimeOptions\"};\n-\n+const FunctionDoc strptime_doc(\n+    \"Parse timestamps\",\n+    (\"For each string in `strings`, parse it as a timestamp.\\n\"\n+     \"The timestamp unit and the expected string pattern must be given\\n\"\n+     \"in StrptimeOptions.  Null inputs emit null.  If a non-null string\\n\"\n+     \"fails parsing, an error is returned by default.\"),\n\nReview comment:\n       Ditto here - what is the behavior if we don't raise errors and we get an invalid timestamp?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1143,6 +1145,117 @@ struct Strftime {\n };\n #endif\n \n+// ----------------------------------------------------------------------\n+// Convert string representations of timestamps in arbitrary format to timestamps\n+\n+static std::string GetZone(std::string format) {\n+  // Check for use of %z or %Z\n+  size_t cur = 0;\n+  std::string zone = \"\";\n+  while (cur < format.size() - 1) {\n+    if (format[cur] == '%') {\n+      if (format[cur + 1] == 'z') {\n+        zone = \"UTC\";\n+        break;\n+      }\n+      cur++;\n+    }\n+    cur++;\n+  }\n+  return zone;\n+}\n+\n+template <typename Duration, typename InType>\n+struct Strptime {\n+  const std::shared_ptr<TimestampParser> parser;\n+  const TimeUnit::type unit;\n+  const std::string zone;\n+  const bool raise_errors;\n+\n+  static Result<Strptime> Make(KernelContext* ctx, const DataType& type) {\n+    const StrptimeOptions& options = StrptimeState::Get(ctx);\n+\n+    return Strptime{TimestampParser::MakeStrptime(options.format),\n+                    std::move(options.unit), GetZone(options.format),\n+                    options.raise_errors};\n+  }\n+\n+  static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    ARROW_ASSIGN_OR_RAISE(auto self, Make(ctx, *in.type));\n+\n+    if (in.is_valid) {\n+      auto s = internal::UnboxScalar<InType>::Unbox(in);\n+      int64_t result;\n+      if ((*self.parser)(s.data(), s.size(), self.unit, &result)) {\n+        *checked_cast<TimestampScalar*>(out) =\n+            TimestampScalar(result, timestamp(self.unit, self.zone));\n+      } else {\n+        if (self.raise_errors) {\n+          return Status::Invalid(\"Failed to parse string: '\", s.data(),\n+                                 \"' as a scalar of type \",\n+                                 TimestampType(self.unit).ToString());\n+        } else {\n+          out->is_valid = false;\n+        }\n+      }\n+    } else {\n+      out->is_valid = false;\n+    }\n+    return Status::OK();\n+  }\n+\n+  static Status Call(KernelContext* ctx, const ArrayData& in, ArrayData* out) {\n+    ARROW_ASSIGN_OR_RAISE(auto self, Make(ctx, *in.type));\n+\n+    std::unique_ptr<ArrayBuilder> array_builder;\n\nReview comment:\n       Using a builder is probably the reason for why we can't `can_write_into_slices`? Since the builder allocates its own buffer. Presumably the kernel has preallocation enabled so you should instead be able to write directly into `out->array()->GetValues<int64_t>(1)`.\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -1458,10 +1458,12 @@ class StrptimeOptions(_StrptimeOptions):\n     unit : str\n         Timestamp unit of the output.\n         Accepted values are \"s\", \"ms\", \"us\", \"ns\".\n+    raise_errors : boolean, default True\n+        Raise on parsing errors.\n\nReview comment:\n       Same here - what's the behavior otherwise?\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -267,12 +267,17 @@ class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n \n class ARROW_EXPORT StrptimeOptions : public FunctionOptions {\n  public:\n-  explicit StrptimeOptions(std::string format, TimeUnit::type unit);\n+  explicit StrptimeOptions(std::string format, TimeUnit::type unit,\n+                           bool raise_errors = true);\n   StrptimeOptions();\n   static constexpr char const kTypeName[] = \"StrptimeOptions\";\n \n+  /// The desired format string.\n   std::string format;\n+  /// The desired time resolution\n   TimeUnit::type unit;\n+  /// Raise on parsing errors\n\nReview comment:\n       What is the behavior if we don't raise parse errors?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -27,6 +27,7 @@\n #include <utf8proc.h>\n #endif\n \n+#include \"arrow/compute/api.h\"\n\nReview comment:\n       nit: is there a more precise header we can include\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1143,6 +1145,117 @@ struct Strftime {\n };\n #endif\n \n+// ----------------------------------------------------------------------\n+// Convert string representations of timestamps in arbitrary format to timestamps\n+\n+static std::string GetZone(std::string format) {\n\nReview comment:\n       `const std::string&`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -1842,12 +1843,24 @@ TYPED_TEST(TestBaseBinaryKernels, ExtractRegexInvalid) {\n TYPED_TEST(TestStringKernels, Strptime) {\n   std::string input1 = R\"([\"5/1/2020\", null, \"12/11/1900\"])\";\n   std::string output1 = R\"([\"2020-05-01\", null, \"1900-12-11\"])\";\n-  StrptimeOptions options(\"%m/%d/%Y\", TimeUnit::MICRO);\n+  auto input_array = ArrayFromJSON(utf8(), input1);\n+  StrptimeOptions options(\"%m/%d/%Y\", TimeUnit::MICRO, false);\n   this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output1, &options);\n \n   input1 = R\"([\"5/1/2020 %z\", null, \"12/11/1900 %z\"])\";\n   options.format = \"%m/%d/%Y %%z\";\n   this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output1, &options);\n+\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"strptime\", {input_array}, &options));\n+\n+  options.format = \"%Y-%m-%d\";\n+  options.raise_errors = true;\n+  ASSERT_RAISES(Invalid, CallFunction(\"strptime\", {input_array}, &options));\n+\n+  EXPECT_RAISES_WITH_MESSAGE_THAT(\n+      Invalid,\n+      testing::HasSubstr(\"Invalid: Failed to parse string: '5/1/202012/11/1900'\"),\n+      Strptime(input_array, options));\n\nReview comment:\n       Can we have a test of the behavior with raise_errors = false and an invalid string?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -1842,12 +1843,24 @@ TYPED_TEST(TestBaseBinaryKernels, ExtractRegexInvalid) {\n TYPED_TEST(TestStringKernels, Strptime) {\n   std::string input1 = R\"([\"5/1/2020\", null, \"12/11/1900\"])\";\n   std::string output1 = R\"([\"2020-05-01\", null, \"1900-12-11\"])\";\n-  StrptimeOptions options(\"%m/%d/%Y\", TimeUnit::MICRO);\n+  auto input_array = ArrayFromJSON(utf8(), input1);\n+  StrptimeOptions options(\"%m/%d/%Y\", TimeUnit::MICRO, false);\n   this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output1, &options);\n \n   input1 = R\"([\"5/1/2020 %z\", null, \"12/11/1900 %z\"])\";\n   options.format = \"%m/%d/%Y %%z\";\n   this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output1, &options);\n+\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"strptime\", {input_array}, &options));\n+\n+  options.format = \"%Y-%m-%d\";\n+  options.raise_errors = true;\n+  ASSERT_RAISES(Invalid, CallFunction(\"strptime\", {input_array}, &options));\n+\n+  EXPECT_RAISES_WITH_MESSAGE_THAT(\n+      Invalid,\n+      testing::HasSubstr(\"Invalid: Failed to parse string: '5/1/202012/11/1900'\"),\n\nReview comment:\n       This error message seems suspect, why are both rows in the error message?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1143,6 +1145,117 @@ struct Strftime {\n };\n #endif\n \n+// ----------------------------------------------------------------------\n+// Convert string representations of timestamps in arbitrary format to timestamps\n+\n+static std::string GetZone(std::string format) {\n+  // Check for use of %z or %Z\n+  size_t cur = 0;\n+  std::string zone = \"\";\n+  while (cur < format.size() - 1) {\n+    if (format[cur] == '%') {\n\nReview comment:\n       Do we want to respect `%%` for escaping?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1143,6 +1145,119 @@ struct Strftime {\n };\n #endif\n \n+// ----------------------------------------------------------------------\n+// Convert string representations of timestamps in arbitrary format to timestamps\n+\n+const std::string GetZone(const std::string& format) {\n+  // Check for use of %z or %Z\n+  size_t cur = 0;\n+  std::string zone = \"\";\n+  while (cur < format.size() - 1) {\n+    if (format[cur] == '%') {\n+      if (format[cur + 1] == 'z') {\n+        zone = \"UTC\";\n+        break;\n+      }\n+      cur++;\n+    }\n+    cur++;\n+  }\n+  return zone;\n+}\n+\n+template <typename Duration, typename InType>\n+struct Strptime {\n+  const std::shared_ptr<TimestampParser> parser;\n+  const TimeUnit::type unit;\n+  const std::string zone;\n+  const bool error_is_null;\n+\n+  static Result<Strptime> Make(KernelContext* ctx, const DataType& type) {\n+    const StrptimeOptions& options = StrptimeState::Get(ctx);\n+\n+    return Strptime{TimestampParser::MakeStrptime(options.format),\n+                    std::move(options.unit), GetZone(options.format),\n+                    options.error_is_null};\n+  }\n+\n+  static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    ARROW_ASSIGN_OR_RAISE(auto self, Make(ctx, *in.type));\n+\n+    if (in.is_valid) {\n+      auto s = internal::UnboxScalar<InType>::Unbox(in);\n+      int64_t result;\n+      if ((*self.parser)(s.data(), s.size(), self.unit, &result)) {\n+        *checked_cast<TimestampScalar*>(out) =\n+            TimestampScalar(result, timestamp(self.unit, self.zone));\n+      } else {\n+        if (self.error_is_null) {\n+          out->is_valid = false;\n+        } else {\n+          return Status::Invalid(\"Failed to parse string: '\", s.data(),\n\nReview comment:\n       ah, this is probably why all the string data shows up in the test above - `s` isn't null terminated because it's a string_view and this is getting treated as a `char*`. That's probably undefined behavior, does the constructor not take `s` by itself?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -1840,14 +1840,26 @@ TYPED_TEST(TestBaseBinaryKernels, ExtractRegexInvalid) {\n #endif\n \n TYPED_TEST(TestStringKernels, Strptime) {\n-  std::string input1 = R\"([\"5/1/2020\", null, \"12/11/1900\"])\";\n-  std::string output1 = R\"([\"2020-05-01\", null, \"1900-12-11\"])\";\n-  StrptimeOptions options(\"%m/%d/%Y\", TimeUnit::MICRO);\n+  std::string input1 = R\"([\"5/1/2020\", null, \"12/13/1900\"])\";\n+  std::string output1 = R\"([\"2020-05-01\", null, \"1900-12-13\"])\";\n+  std::string output2 = R\"([\"2020-01-05\", null, null])\";\n+  auto input = ArrayFromJSON(this->type(), input1);\n+\n+  StrptimeOptions options(\"%m/%d/%Y\", TimeUnit::MICRO, /*error_is_null=*/true);\n   this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output1, &options);\n \n-  input1 = R\"([\"5/1/2020 %z\", null, \"12/11/1900 %z\"])\";\n+  options.format = \"%d/%m/%Y\";\n+  this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output2, &options);\n+\n+  input1 = R\"([\"5/1/2020 %z\", null, \"12/13/1900 %z\"])\";\n   options.format = \"%m/%d/%Y %%z\";\n   this->CheckUnary(\"strptime\", input1, timestamp(TimeUnit::MICRO), output1, &options);\n+\n+  options.error_is_null = false;\n+  EXPECT_RAISES_WITH_MESSAGE_THAT(\n+      Invalid,\n+      testing::HasSubstr(\"Invalid: Failed to parse string: '5/1/202012/13/1900'\"),\n\nReview comment:\n       I'm still curious why both rows get put into the string when it's invalid.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T15:02:26.281+0000",
                    "updated": "2022-03-18T15:02:26.281+0000",
                    "started": "2022-03-18T15:02:26.281+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744066",
                    "issueId": "13428056"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/worklog/744171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #12464:\nURL: https://github.com/apache/arrow/pull/12464#discussion_r830104333\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc\n##########\n@@ -1143,6 +1145,110 @@ struct Strftime {\n };\n #endif\n \n+// ----------------------------------------------------------------------\n+// Convert string representations of timestamps in arbitrary format to timestamps\n+\n+const std::string GetZone(const std::string& format) {\n+  // Check for use of %z or %Z\n+  size_t cur = 0;\n+  std::string zone = \"\";\n+  while (cur < format.size() - 1) {\n+    if (format[cur] == '%') {\n+      if (format[cur + 1] == 'z') {\n+        zone = \"UTC\";\n+        break;\n+      }\n+      cur++;\n+    }\n+    cur++;\n+  }\n+  return zone;\n+}\n+\n+template <typename Duration, typename InType>\n+struct Strptime {\n+  const std::shared_ptr<TimestampParser> parser;\n+  const TimeUnit::type unit;\n+  const std::string zone;\n+  const bool error_is_null;\n+\n+  static Result<Strptime> Make(KernelContext* ctx, const DataType& type) {\n+    const StrptimeOptions& options = StrptimeState::Get(ctx);\n+\n+    return Strptime{TimestampParser::MakeStrptime(options.format),\n+                    std::move(options.unit), GetZone(options.format),\n+                    options.error_is_null};\n+  }\n+\n+  static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    ARROW_ASSIGN_OR_RAISE(auto self, Make(ctx, *in.type));\n+\n+    if (in.is_valid) {\n+      auto s = internal::UnboxScalar<InType>::Unbox(in);\n+      int64_t result;\n+      if ((*self.parser)(s.data(), s.size(), self.unit, &result)) {\n+        *checked_cast<TimestampScalar*>(out) =\n+            TimestampScalar(result, timestamp(self.unit, self.zone));\n+      } else {\n+        if (self.error_is_null) {\n+          out->is_valid = false;\n+        } else {\n+          return Status::Invalid(\"Failed to parse string: '\", s.data(),\n+                                 \"' as a scalar of type \",\n+                                 TimestampType(self.unit).ToString());\n+        }\n+      }\n+    } else {\n+      out->is_valid = false;\n+    }\n+    return Status::OK();\n+  }\n+\n+  static Status Call(KernelContext* ctx, const ArrayData& in, ArrayData* out) {\n+    ARROW_ASSIGN_OR_RAISE(auto self, Make(ctx, *in.type));\n+    int64_t* out_data = out->GetMutableValues<int64_t>(1);\n+\n+    if (self.error_is_null) {\n+      auto visit_null = [&]() { out_data++; };\n+      auto visit_value = [&](util::string_view s) {\n+        int64_t result;\n+        if ((*self.parser)(s.data(), s.size(), self.unit, &result)) {\n+          *out_data++ = result;\n+        }\n+      };\n+      VisitArrayDataInline<InType>(in, visit_value, visit_null);\n+    } else {\n+      auto visit_null = [&]() {\n+        out_data++;\n+        return Status::OK();\n+      };\n+      auto visit_value = [&](util::string_view s) {\n+        int64_t result;\n+        if ((*self.parser)(s.data(), s.size(), self.unit, &result)) {\n+          *out_data++ = result;\n+          return Status::OK();\n+        } else {\n+          return Status::Invalid(\"Failed to parse string: '\", s.data(),\n+                                 \"' as a scalar of type \",\n+                                 TimestampType(self.unit).ToString());\n+        }\n+      };\n+      RETURN_NOT_OK(VisitArrayDataInline<InType>(in, visit_value, visit_null));\n+    }\n\nReview comment:\n       Does this look right @lidavidm @pitrou? This test is still failing:\r\n   ```\r\n   StrptimeOptions options(\"%d/%m/%Y\", TimeUnit::MICRO, /*error_is_null=*/true);\r\n   std::string input2 = R\"([\"5/1/2020\", \"AA/BB/CCCC\", \"AA/BB/CCCC\", \"AA/BB/CCCC\", null])\";\r\n   std::string output2 = R\"([\"2020-01-05\", null, null, null, null])\";\r\n   this->CheckUnary(\"strptime\", input2, timestamp(TimeUnit::MICRO), output2, &options);\r\n   ```\r\n   With:\r\n   ```\r\n   Got:\r\n     [\r\n       [\r\n         2020-01-05 00:00:00.000000,\r\n         1970-01-01 00:00:00.000000,\r\n         1970-01-01 00:00:00.000000,\r\n         1970-01-01 00:00:00.000000,\r\n         null\r\n       ]\r\n     ]\r\n   Expected:\r\n     [\r\n       [\r\n         2020-01-05 00:00:00.000000\r\n       ],\r\n       [\r\n         null,\r\n         null,\r\n         null,\r\n         null\r\n       ]\r\n     ]\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T15:21:39.665+0000",
                    "updated": "2022-03-18T15:21:39.665+0000",
                    "started": "2022-03-18T15:21:39.665+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744171",
                    "issueId": "13428056"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 34200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@467c89c7[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d0b82a5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2076cbc0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@31797bc1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@786afbf9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@487b5d96[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ec5a792[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@249878f8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b82eaa1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@190791aa[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a8d5c2f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@db5b63e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 34200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 24 15:26:08 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-03-24T15:26:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15665/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2022-02-11T15:06:05.000+0000",
        "updated": "2022-03-30T03:32:18.000+0000",
        "timeoriginalestimate": null,
        "description": "We want to have an option to either raise, ignore or return NA in case of format mismatch.\r\n\r\nSee [pandas.to_datetime|https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html] and lubridate [parse_date_time|https://lubridate.tidyverse.org/reference/parse_date_time.html] for examples.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 34200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add error handling option to StrptimeOptions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17492773",
                    "id": "17492773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "An option to have it return Null (for the failing string(s)) instead of raising an error sounds good!\r\n\r\nI am not sure about an \"ignore\" option. I know that pandas has it, but I find it a bit a strange option especially in context of an arrow kernel. In that case, it doesn't return a timestamp typed array, but the original string array (so which means that the kernel has no predictable output type).  \r\nSuch logic to \"try the conversion and if it errors keep the original array\" could also be handled on a higher level than the C++ kernel? ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-02-15T18:17:43.351+0000",
                    "updated": "2022-02-15T18:17:43.351+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17492846",
                    "id": "17492846",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "Thanks for the feedback Joris! Yeah, ignore would not play well with Arrow and should be solved elsewhere. Removing from description.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-02-15T19:30:25.457+0000",
                    "updated": "2022-02-15T19:30:25.457+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17504388",
                    "id": "17504388",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
                        "name": "dragosmg",
                        "key": "dragosmg",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
                        },
                        "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~rokm]\u00a0how far do you think we are from solving this ticket? It would be a massive help for us since it would enable the {{coalesce()}} route into solving many of the date-time parsing bindings tickets.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
                        "name": "dragosmg",
                        "key": "dragosmg",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
                        },
                        "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-03-10T16:08:51.156+0000",
                    "updated": "2022-03-10T16:08:51.156+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17504414",
                    "id": "17504414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "[~dragosmg] I am not sure what the issue I'm seeing is so don't want to estimate. But I will prioritise it over other tickets.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-03-10T16:50:09.857+0000",
                    "updated": "2022-03-10T16:50:09.857+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17504429",
                    "id": "17504429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
                        "name": "dragosmg",
                        "key": "dragosmg",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
                        },
                        "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Many thanks.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
                        "name": "dragosmg",
                        "key": "dragosmg",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
                        },
                        "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-03-10T16:59:55.602+0000",
                    "updated": "2022-03-10T16:59:55.602+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17506955",
                    "id": "17506955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
                        "name": "dragosmg",
                        "key": "dragosmg",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
                        },
                        "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~rokm], [~jorisvandenbossche] & [~jonkeane]\r\nI will ask the question here and move it if it is the wrong place / follow-up Jira required. In R {{strptime}} returns NA / NULL in the following circumstances:\r\n# {{format}} doesn't match {{string}} - e.g. {{\"1999-12-31\" and \"%Y-%d-%M\"}} \r\n# {{string}} doesn't make sense, given the format - e.g. {{string}} is {{\"this is a string that doesn't make sense\"}}\r\n# the {{string}} can be parsed with the given {{format}}, but implicitly relies on rollover - {{string}} is {{\"1999-02-30\"}} and is parsed as the {{\"1999-03-02\"}} Date.\r\n\r\n\r\nnot sure 1 and 2 are actually distinct, but the 3rd part is different from the current Arrow behaviour\r\n\r\n{code:r}\r\nlibrary(arrow, warn.conflicts = FALSE)\r\nlibrary(lubridate, warn.conflicts = FALSE)\r\nlibrary(dplyr, warn.conflicts = FALSE)\r\n\r\ndf <- tibble::tibble(string_date = \"1999-02-30\")\r\n\r\ndf %>% \r\n  mutate(date = strptime(string_date, format = \"%Y-%m-%d\"))\r\n#> # A tibble: 1 \u00d7 2\r\n#>   string_date date  \r\n#>   <chr>       <dttm>\r\n#> 1 1999-02-30  NA\r\n\r\ndf %>% \r\n  arrow_table() %>% \r\n  mutate(date = strptime(string_date, format = \"%Y-%m-%d\")) %>% \r\n  collect()\r\n#> # A tibble: 1 \u00d7 2\r\n#>   string_date date               \r\n#>   <chr>       <dttm>             \r\n#> 1 1999-02-30  1999-03-02 00:00:00\r\n{code} \r\n\r\nHow are things done in Python? Does the R behaviour align with your expectations / Is it breaking any ISO Standard?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
                        "name": "dragosmg",
                        "key": "dragosmg",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
                        },
                        "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-03-15T15:01:39.160+0000",
                    "updated": "2022-03-16T09:28:12.156+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17507175",
                    "id": "17507175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "I think 1. and 2. would both cause parsing error. 3. is getting into inference territory (see ARROW-15666).\r\n\r\nPython stdlib strptime just throws errors AFAIK and pandas has it's own [pd.to_datetime|https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html] that has tons of options and you can play with this [example here|https://trinket.io/python3/05e3976295].\r\n\r\nStrptime format is notoriously non-standardized so we probably just want to adopt c++ stdlib behaviour.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-03-15T19:07:06.650+0000",
                    "updated": "2022-03-15T19:07:06.650+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17507179",
                    "id": "17507179",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "(3) sounds wrong, but like I said before: you ([~dragosmg]) should look at what happens in python or if there is some standard where that is the indeed the right thing.\r\n\r\n(1) + (2) both sound like they could be implemented as \"if strptime fails to parse, (optionally) return null\". No reason for us to go to far into why it didn't parse.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-03-15T19:16:58.991+0000",
                    "updated": "2022-03-15T19:16:58.991+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17507187",
                    "id": "17507187",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "I think in Python we'll probably try to get as close as possible to to_datetime so you can just focus on that.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-03-15T19:31:49.357+0000",
                    "updated": "2022-03-15T19:31:49.357+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17507479",
                    "id": "17507479",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "For case 3, in pandas we don't \"rollover\" for a day that is too large for the given month, but rather raise an error:\r\n\r\n{code}\r\n>>> pd.to_datetime(\"1999-02-30\", format=\"%Y-%m-%d\")\r\n...\r\nValueError: time data 1999-02-30 doesn't match format specified\r\n{code}\r\n\r\nAnd Python's stdlib seems to do that:\r\n\r\n{code}\r\n>>> datetime.datetime.strptime(\"1999-02-30\", \"%Y-%m-%d\")\r\n...\r\nValueError: day is out of range for month\r\n{code}\r\n\r\nArrow indeed does roll-over:\r\n\r\n{code}\r\n>>> import pyarrow.compute as pc\r\n>>> print(pc.strptime(\"1999-02-30\", format=\"%Y-%m-%d\", unit=\"s\"))\r\n1999-03-02 00:00:00\r\n{code}\r\n\r\nPersonally, I don't like that behaviour, but I suppose we get this from the system {{strptime}}? (so that might even depend on your OS?) \r\nIt might be interesting to check what date.h's version of strptime does.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-03-16T10:42:56.517+0000",
                    "updated": "2022-03-16T10:42:56.517+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17507483",
                    "id": "17507483",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
                        "name": "dragosmg",
                        "key": "dragosmg",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
                        },
                        "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks all. I was about to comment with a pandas example (so thanks Joris for providing one and Rok for pointing me to Trinket). In conclusion, it's fair to say the rolling over is unexpected for Python too. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
                        "name": "dragosmg",
                        "key": "dragosmg",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
                        },
                        "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-03-16T10:46:05.639+0000",
                    "updated": "2022-03-16T10:47:19.920+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17507488",
                    "id": "17507488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "For cases 1 and 2, I agree that both are cases that should error (which already is what Arrow does now)\r\n\r\n---\r\n\r\nOnly, for case 1, you might have a typo in your example (\"M\" vs \"m\"), because we are parsing minutes (and the missing month gets filled with 1):\r\n\r\n{code}\r\n>>> print(datetime.datetime.strptime(\"1999-12-31\", \"%Y-%d-%M\"))\r\n1999-01-12 00:31:00\r\n{code}\r\n\r\n(pandas does the same, and Arrow as well)\r\n\r\nIf I change that to use {{\"%Y-%d-%m\"}} (lower case m), Python and pandas give an error for this:\r\n\r\n{code}\r\n>>> print(datetime.datetime.strptime(\"1999-12-31\", \"%Y-%d-%m\"))\r\n...\r\nValueError: unconverted data remains: 1\r\n{code}\r\n\r\nand so does Arrow (\"Failed to parse string: '1999-12-31' ..\")\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-03-16T10:49:42.462+0000",
                    "updated": "2022-03-16T10:49:42.462+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17507491",
                    "id": "17507491",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "It's maybe worth opening a separate JIRA for the undesired \"roll-over\" behaviour, in case we end up closing this issue for the general \"return null if it errors\" feature",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-03-16T10:51:47.408+0000",
                    "updated": "2022-03-16T10:51:47.408+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17507502",
                    "id": "17507502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "I didn't realise 3. was actual arrow behaviour (I see it on mac). Very much agreed with removing it.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-03-16T11:06:48.116+0000",
                    "updated": "2022-03-16T11:06:48.116+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17507511",
                    "id": "17507511",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
                        "name": "dragosmg",
                        "key": "dragosmg",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
                        },
                        "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I created [ARROW-15948|https://issues.apache.org/jira/browse/ARROW-15948]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
                        "name": "dragosmg",
                        "key": "dragosmg",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
                        },
                        "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-03-16T11:15:50.169+0000",
                    "updated": "2022-03-16T11:15:50.169+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13428056/comment/17511913",
                    "id": "17511913",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 12464\n[https://github.com/apache/arrow/pull/12464]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-03-24T15:26:08.517+0000",
                    "updated": "2022-03-24T15:26:08.517+0000"
                }
            ],
            "maxResults": 16,
            "total": 16,
            "startAt": 0
        },
        "customfield_12311820": "0|z0zi68:",
        "customfield_12314139": null
    }
}