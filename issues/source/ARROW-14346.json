{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13406820",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820",
    "key": "ARROW-14346",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12624647",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12624647",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13087660",
                    "key": "ARROW-1231",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13087660",
                    "fields": {
                        "summary": "[C++] Add filesystem / IO implementation for Google Cloud Storage",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=coryan",
            "name": "coryan",
            "key": "coryan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Carlos O'Ryan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=coryan",
            "name": "coryan",
            "key": "coryan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Carlos O'Ryan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=coryan",
            "name": "coryan",
            "key": "coryan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Carlos O'Ryan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14346/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/670357",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#issuecomment-952330024\n\n\n   https://issues.apache.org/jira/browse/ARROW-14346\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-26T21:11:10.388+0000",
                    "updated": "2021-10-26T21:11:10.388+0000",
                    "started": "2021-10-26T21:11:10.388+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "670357",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/671940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "coryan commented on pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#issuecomment-954710027\n\n\n   Rebased to resolve conflicts.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-29T12:39:57.368+0000",
                    "updated": "2021-10-29T12:39:57.368+0000",
                    "started": "2021-10-29T12:39:57.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "671940",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/672696",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#discussion_r740259034\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n\nReview comment:\n       Nit: can write `Result<gcs::EncryptionKey>`\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n\nReview comment:\n       Is there a particular reason for using this casing? The S3 implementation uses \"Cache-Control\", \"Content-Type\", etc., so I'd rather keep the same exact naming rather than reinvent another.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_test.cc\n##########\n@@ -259,6 +352,55 @@ TEST_F(GcsIntegrationTest, ReadObjectInfoInvalid) {\n   EXPECT_EQ(result.status().code(), StatusCode::IOError);\n }\n \n+TEST_F(GcsIntegrationTest, WriteObjectSmall) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto expected = std::string(kLoremIpsum);\n+  ASSERT_OK(output->Write(expected.data(), expected.size()));\n+  ASSERT_OK(output->Close());\n+\n+  // Verify we can read the object back.\n+  std::shared_ptr<io::InputStream> input;\n+  ASSERT_OK_AND_ASSIGN(input, fs->OpenInputStream(path));\n+\n+  std::array<char, 1024> inbuf{};\n+  std::int64_t size;\n+  ASSERT_OK_AND_ASSIGN(size, input->Read(inbuf.size(), inbuf.data()));\n+\n+  EXPECT_EQ(std::string(inbuf.data(), size), expected);\n+}\n+\n+TEST_F(GcsIntegrationTest, WriteObjectLarge) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto b0 = std::string(512 * 1024, 'A');\n+  const auto b1 = std::string(768 * 1024, 'B');\n+  const auto b2 = std::string(1024 * 1024, 'C');\n\nReview comment:\n       Perhaps choose those string sizes so that they are not multiples of the underlying buffer size?\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_test.cc\n##########\n@@ -259,6 +352,55 @@ TEST_F(GcsIntegrationTest, ReadObjectInfoInvalid) {\n   EXPECT_EQ(result.status().code(), StatusCode::IOError);\n }\n \n+TEST_F(GcsIntegrationTest, WriteObjectSmall) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto expected = std::string(kLoremIpsum);\n+  ASSERT_OK(output->Write(expected.data(), expected.size()));\n+  ASSERT_OK(output->Close());\n+\n+  // Verify we can read the object back.\n+  std::shared_ptr<io::InputStream> input;\n+  ASSERT_OK_AND_ASSIGN(input, fs->OpenInputStream(path));\n+\n+  std::array<char, 1024> inbuf{};\n+  std::int64_t size;\n+  ASSERT_OK_AND_ASSIGN(size, input->Read(inbuf.size(), inbuf.data()));\n+\n+  EXPECT_EQ(std::string(inbuf.data(), size), expected);\n+}\n+\n+TEST_F(GcsIntegrationTest, WriteObjectLarge) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto b0 = std::string(512 * 1024, 'A');\n+  const auto b1 = std::string(768 * 1024, 'B');\n+  const auto b2 = std::string(1024 * 1024, 'C');\n+  ASSERT_OK(output->Write(b0.data(), b0.size()));\n+  ASSERT_OK(output->Write(b1.data(), b1.size()));\n+  ASSERT_OK(output->Write(b2.data(), b2.size()));\n+  ASSERT_OK(output->Close());\n+\n+  // Verify we can read the object back.\n+  std::shared_ptr<io::InputStream> input;\n+  ASSERT_OK_AND_ASSIGN(input, fs->OpenInputStream(path));\n+\n+  std::string contents;\n+  std::shared_ptr<Buffer> buffer;\n+  do {\n+    ASSERT_OK_AND_ASSIGN(buffer, input->Read(128 * 1024));\n+    contents.append(buffer->ToString());\n+  } while (buffer && buffer->size() != 0);\n\nReview comment:\n       Nit: `buffer` should never be null in this context. If it is, it's a bug in `Read`.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_cache_control(v);\n+           return Status::OK();\n+         }},\n+        {\"contentDisposition\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_disposition(v);\n+           return Status::OK();\n+         }},\n+        {\"contentEncoding\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_encoding(v);\n+           return Status::OK();\n+         }},\n+        {\"contentLanguage\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_language(v);\n+           return Status::OK();\n+         }},\n+        {\"contentType\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_type(v);\n+           return Status::OK();\n+         }},\n+        {\"customTime\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           std::string err;\n+           absl::Time t;\n+           if (!absl::ParseTime(absl::RFC3339_full, v, &t, &err)) {\n\nReview comment:\n       Is absl already an include-time dependency of GCS?\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs.cc\n##########\n@@ -102,6 +109,42 @@ class GcsInputStream : public arrow::io::InputStream {\n   mutable gcs::ObjectReadStream stream_;\n };\n \n+class GcsOutputStream : public arrow::io::OutputStream {\n+ public:\n+  explicit GcsOutputStream(gcs::ObjectWriteStream stream) : stream_(std::move(stream)) {}\n+  ~GcsOutputStream() override = default;\n+\n+  Status Close() override {\n+    stream_.Close();\n+    return internal::ToArrowStatus(stream_.last_status());\n\nReview comment:\n       Does `last_status` also clear the error status or is it sticky? If it's sticky, then a failed `Write` would also return an error when calling `Close`?\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n\nReview comment:\n       Nit, but why not `std::unordered_map`?\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs.cc\n##########\n@@ -145,6 +189,25 @@ class GcsFileSystem::Impl {\n     return std::make_shared<GcsInputStream>(std::move(stream));\n   }\n \n+  Result<std::shared_ptr<io::OutputStream>> OpenOutputStream(\n+      const GcsPath& path, const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+    gcs::EncryptionKey encryption_key;\n+    ARROW_ASSIGN_OR_RAISE(encryption_key, internal::ToEncryptionKey(metadata));\n+    gcs::PredefinedAcl predefined_acl;\n+    ARROW_ASSIGN_OR_RAISE(predefined_acl, internal::ToPredefinedAcl(metadata));\n+    gcs::KmsKeyName kms_key_name;\n+    ARROW_ASSIGN_OR_RAISE(kms_key_name, internal::ToKmsKeyName(metadata));\n+    gcs::WithObjectMetadata with_object_metadata;\n+    ARROW_ASSIGN_OR_RAISE(with_object_metadata, internal::ToObjectMetadata(metadata));\n+\n+    auto stream = client_.WriteObject(path.bucket, path.object, encryption_key,\n+                                      predefined_acl, kms_key_name, with_object_metadata);\n+    if (!stream.last_status().ok()) {\n+      return internal::ToArrowStatus(stream.last_status());\n+    }\n\nReview comment:\n       You might want to define a macro that would allow you to write:\r\n   ```c++\r\n   ARROW_GCS_RETURN_NOT_OK(stream.last_status());\r\n   ```\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs.cc\n##########\n@@ -102,6 +109,42 @@ class GcsInputStream : public arrow::io::InputStream {\n   mutable gcs::ObjectReadStream stream_;\n };\n \n+class GcsOutputStream : public arrow::io::OutputStream {\n+ public:\n+  explicit GcsOutputStream(gcs::ObjectWriteStream stream) : stream_(std::move(stream)) {}\n+  ~GcsOutputStream() override = default;\n+\n+  Status Close() override {\n+    stream_.Close();\n+    return internal::ToArrowStatus(stream_.last_status());\n+  }\n+\n+  Result<int64_t> Tell() const override {\n+    if (!stream_) {\n+      return Status::IOError(\"invalid stream\");\n+    }\n+    return tell_;\n+  }\n+\n+  bool closed() const override { return !stream_.IsOpen(); }\n+\n+  Status Write(const void* data, int64_t nbytes) override {\n+    if (stream_.write(reinterpret_cast<const char*>(data), nbytes)) {\n+      return Status::OK();\n+    }\n+    return internal::ToArrowStatus(stream_.last_status());\n+  }\n+\n+  Status Flush() override {\n+    stream_.flush();\n+    return Status::OK();\n+  }\n+\n+ private:\n+  gcs::ObjectWriteStream stream_;\n+  int64_t tell_ = 0;\n\nReview comment:\n       It appears `tell_` is never updated anywhere. Should you do it in `Write` perhaps?\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_cache_control(v);\n+           return Status::OK();\n+         }},\n+        {\"contentDisposition\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_disposition(v);\n+           return Status::OK();\n+         }},\n+        {\"contentEncoding\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_encoding(v);\n+           return Status::OK();\n+         }},\n+        {\"contentLanguage\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_language(v);\n+           return Status::OK();\n+         }},\n+        {\"contentType\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_type(v);\n+           return Status::OK();\n+         }},\n+        {\"customTime\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           std::string err;\n+           absl::Time t;\n+           if (!absl::ParseTime(absl::RFC3339_full, v, &t, &err)) {\n+             return Status::Invalid(\"Error parsing RFC-3339 timestamp: '\", v, \"': \", err);\n+           }\n+           m.set_custom_time(absl::ToChronoTime(t));\n+           return Status::OK();\n+         }},\n+        {\"storageClass\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_storage_class(v);\n+           return Status::OK();\n+         }},\n+        {\"predefinedAcl\",\n+         [](gcs::ObjectMetadata&, const std::string&) { return Status::OK(); }},\n+        {\"encryptionKeyBase64\",\n+         [](gcs::ObjectMetadata&, const std::string&) { return Status::OK(); }},\n+        {\"kmsKeyName\",\n+         [](gcs::ObjectMetadata&, const std::string&) { return Status::OK(); }},\n+    };\n+  }();\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  gcs::ObjectMetadata object_metadata;\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    auto it = setters.find(keys[i]);\n+    if (it != setters.end()) {\n+      auto status = it->second(object_metadata, values[i]);\n+      if (!status.ok()) return status;\n+    } else {\n+      object_metadata.upsert_metadata(keys[i], values[i]);\n\nReview comment:\n       This is meant to allow inserting arbitrary metadata strings? Will GCS balk if the user throws some unrecognized metadata keys here?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-01T14:47:01.146+0000",
                    "updated": "2021-11-01T14:47:01.146+0000",
                    "started": "2021-11-01T14:47:01.145+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "672696",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/676639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "coryan commented on a change in pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#discussion_r743104899\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs.cc\n##########\n@@ -102,6 +109,42 @@ class GcsInputStream : public arrow::io::InputStream {\n   mutable gcs::ObjectReadStream stream_;\n };\n \n+class GcsOutputStream : public arrow::io::OutputStream {\n+ public:\n+  explicit GcsOutputStream(gcs::ObjectWriteStream stream) : stream_(std::move(stream)) {}\n+  ~GcsOutputStream() override = default;\n+\n+  Status Close() override {\n+    stream_.Close();\n+    return internal::ToArrowStatus(stream_.last_status());\n+  }\n+\n+  Result<int64_t> Tell() const override {\n+    if (!stream_) {\n+      return Status::IOError(\"invalid stream\");\n+    }\n+    return tell_;\n+  }\n+\n+  bool closed() const override { return !stream_.IsOpen(); }\n+\n+  Status Write(const void* data, int64_t nbytes) override {\n+    if (stream_.write(reinterpret_cast<const char*>(data), nbytes)) {\n+      return Status::OK();\n+    }\n+    return internal::ToArrowStatus(stream_.last_status());\n+  }\n+\n+  Status Flush() override {\n+    stream_.flush();\n+    return Status::OK();\n+  }\n+\n+ private:\n+  gcs::ObjectWriteStream stream_;\n+  int64_t tell_ = 0;\n\nReview comment:\n       Fixed. Thanks.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T18:32:35.352+0000",
                    "updated": "2021-11-04T18:32:35.352+0000",
                    "started": "2021-11-04T18:32:35.351+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676639",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/676641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "coryan commented on a change in pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#discussion_r743105131\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs.cc\n##########\n@@ -102,6 +109,42 @@ class GcsInputStream : public arrow::io::InputStream {\n   mutable gcs::ObjectReadStream stream_;\n };\n \n+class GcsOutputStream : public arrow::io::OutputStream {\n+ public:\n+  explicit GcsOutputStream(gcs::ObjectWriteStream stream) : stream_(std::move(stream)) {}\n+  ~GcsOutputStream() override = default;\n+\n+  Status Close() override {\n+    stream_.Close();\n+    return internal::ToArrowStatus(stream_.last_status());\n\nReview comment:\n       It is sticky.  And yes, a failed `Write()` will make subsequent `Close()` fail.  It is unadvisable to finalize a stream that failed, you don't know what is its state.\r\n   \n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs.cc\n##########\n@@ -145,6 +189,25 @@ class GcsFileSystem::Impl {\n     return std::make_shared<GcsInputStream>(std::move(stream));\n   }\n \n+  Result<std::shared_ptr<io::OutputStream>> OpenOutputStream(\n+      const GcsPath& path, const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+    gcs::EncryptionKey encryption_key;\n+    ARROW_ASSIGN_OR_RAISE(encryption_key, internal::ToEncryptionKey(metadata));\n+    gcs::PredefinedAcl predefined_acl;\n+    ARROW_ASSIGN_OR_RAISE(predefined_acl, internal::ToPredefinedAcl(metadata));\n+    gcs::KmsKeyName kms_key_name;\n+    ARROW_ASSIGN_OR_RAISE(kms_key_name, internal::ToKmsKeyName(metadata));\n+    gcs::WithObjectMetadata with_object_metadata;\n+    ARROW_ASSIGN_OR_RAISE(with_object_metadata, internal::ToObjectMetadata(metadata));\n+\n+    auto stream = client_.WriteObject(path.bucket, path.object, encryption_key,\n+                                      predefined_acl, kms_key_name, with_object_metadata);\n+    if (!stream.last_status().ok()) {\n+      return internal::ToArrowStatus(stream.last_status());\n+    }\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_cache_control(v);\n+           return Status::OK();\n+         }},\n+        {\"contentDisposition\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_disposition(v);\n+           return Status::OK();\n+         }},\n+        {\"contentEncoding\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_encoding(v);\n+           return Status::OK();\n+         }},\n+        {\"contentLanguage\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_language(v);\n+           return Status::OK();\n+         }},\n+        {\"contentType\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_type(v);\n+           return Status::OK();\n+         }},\n+        {\"customTime\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           std::string err;\n+           absl::Time t;\n+           if (!absl::ParseTime(absl::RFC3339_full, v, &t, &err)) {\n\nReview comment:\n       Yes.  Some Abseil types are exposed in the public API for `google-cloud-cpp`.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n\nReview comment:\n       These are the names of the fields in the GCS metadata:\r\n   \r\n   https://cloud.google.com/storage/docs/json_api/v1/objects\r\n   \r\n   It seems odd to make them match the protocol headers over HTTP (and the S3 API at that), :shrug:\r\n   \r\n   I have changed them, I can change them back.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n\nReview comment:\n       Sure, done.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_cache_control(v);\n+           return Status::OK();\n+         }},\n+        {\"contentDisposition\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_disposition(v);\n+           return Status::OK();\n+         }},\n+        {\"contentEncoding\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_encoding(v);\n+           return Status::OK();\n+         }},\n+        {\"contentLanguage\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_language(v);\n+           return Status::OK();\n+         }},\n+        {\"contentType\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_type(v);\n+           return Status::OK();\n+         }},\n+        {\"customTime\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           std::string err;\n+           absl::Time t;\n+           if (!absl::ParseTime(absl::RFC3339_full, v, &t, &err)) {\n+             return Status::Invalid(\"Error parsing RFC-3339 timestamp: '\", v, \"': \", err);\n+           }\n+           m.set_custom_time(absl::ToChronoTime(t));\n+           return Status::OK();\n+         }},\n+        {\"storageClass\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_storage_class(v);\n+           return Status::OK();\n+         }},\n+        {\"predefinedAcl\",\n+         [](gcs::ObjectMetadata&, const std::string&) { return Status::OK(); }},\n+        {\"encryptionKeyBase64\",\n+         [](gcs::ObjectMetadata&, const std::string&) { return Status::OK(); }},\n+        {\"kmsKeyName\",\n+         [](gcs::ObjectMetadata&, const std::string&) { return Status::OK(); }},\n+    };\n+  }();\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  gcs::ObjectMetadata object_metadata;\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    auto it = setters.find(keys[i]);\n+    if (it != setters.end()) {\n+      auto status = it->second(object_metadata, values[i]);\n+      if (!status.ok()) return status;\n+    } else {\n+      object_metadata.upsert_metadata(keys[i], values[i]);\n\nReview comment:\n       GCS accepts (mostly) arbitrary metadata keys:\r\n   \r\n   https://cloud.google.com/storage/docs/metadata#custom-metadata\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_test.cc\n##########\n@@ -259,6 +352,55 @@ TEST_F(GcsIntegrationTest, ReadObjectInfoInvalid) {\n   EXPECT_EQ(result.status().code(), StatusCode::IOError);\n }\n \n+TEST_F(GcsIntegrationTest, WriteObjectSmall) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto expected = std::string(kLoremIpsum);\n+  ASSERT_OK(output->Write(expected.data(), expected.size()));\n+  ASSERT_OK(output->Close());\n+\n+  // Verify we can read the object back.\n+  std::shared_ptr<io::InputStream> input;\n+  ASSERT_OK_AND_ASSIGN(input, fs->OpenInputStream(path));\n+\n+  std::array<char, 1024> inbuf{};\n+  std::int64_t size;\n+  ASSERT_OK_AND_ASSIGN(size, input->Read(inbuf.size(), inbuf.data()));\n+\n+  EXPECT_EQ(std::string(inbuf.data(), size), expected);\n+}\n+\n+TEST_F(GcsIntegrationTest, WriteObjectLarge) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto b0 = std::string(512 * 1024, 'A');\n+  const auto b1 = std::string(768 * 1024, 'B');\n+  const auto b2 = std::string(1024 * 1024, 'C');\n\nReview comment:\n       Done.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T18:33:52.171+0000",
                    "updated": "2021-11-04T18:33:52.171+0000",
                    "started": "2021-11-04T18:33:52.171+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676641",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/676642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "coryan commented on a change in pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#discussion_r743105900\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_test.cc\n##########\n@@ -259,6 +352,55 @@ TEST_F(GcsIntegrationTest, ReadObjectInfoInvalid) {\n   EXPECT_EQ(result.status().code(), StatusCode::IOError);\n }\n \n+TEST_F(GcsIntegrationTest, WriteObjectSmall) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto expected = std::string(kLoremIpsum);\n+  ASSERT_OK(output->Write(expected.data(), expected.size()));\n+  ASSERT_OK(output->Close());\n+\n+  // Verify we can read the object back.\n+  std::shared_ptr<io::InputStream> input;\n+  ASSERT_OK_AND_ASSIGN(input, fs->OpenInputStream(path));\n+\n+  std::array<char, 1024> inbuf{};\n+  std::int64_t size;\n+  ASSERT_OK_AND_ASSIGN(size, input->Read(inbuf.size(), inbuf.data()));\n+\n+  EXPECT_EQ(std::string(inbuf.data(), size), expected);\n+}\n+\n+TEST_F(GcsIntegrationTest, WriteObjectLarge) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto b0 = std::string(512 * 1024, 'A');\n+  const auto b1 = std::string(768 * 1024, 'B');\n+  const auto b2 = std::string(1024 * 1024, 'C');\n+  ASSERT_OK(output->Write(b0.data(), b0.size()));\n+  ASSERT_OK(output->Write(b1.data(), b1.size()));\n+  ASSERT_OK(output->Write(b2.data(), b2.size()));\n+  ASSERT_OK(output->Close());\n+\n+  // Verify we can read the object back.\n+  std::shared_ptr<io::InputStream> input;\n+  ASSERT_OK_AND_ASSIGN(input, fs->OpenInputStream(path));\n+\n+  std::string contents;\n+  std::shared_ptr<Buffer> buffer;\n+  do {\n+    ASSERT_OK_AND_ASSIGN(buffer, input->Read(128 * 1024));\n+    contents.append(buffer->ToString());\n+  } while (buffer && buffer->size() != 0);\n\nReview comment:\n       Fixed.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T18:34:07.719+0000",
                    "updated": "2021-11-04T18:34:07.719+0000",
                    "started": "2021-11-04T18:34:07.719+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676642",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/676645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#discussion_r743108272\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n\nReview comment:\n       Well, the concern here is to have a common vocabulary where possible. If the user can spell `{\"Content-Type\": \"text/html\"}` regardless of the filesystem type, it's better than having to special-case the metadata key name.\r\n   \r\n   As for the exact spelling, well, S3 has the precedence here since it was implemented first :-) The fact that the names may also match HTTP header names actually makes them well-known to users, so that's not a problem  IMHO.\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T18:37:28.727+0000",
                    "updated": "2021-11-04T18:37:28.727+0000",
                    "started": "2021-11-04T18:37:28.727+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676645",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/676799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "coryan commented on a change in pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#discussion_r743275566\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n\nReview comment:\n       SGTM.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T23:39:13.757+0000",
                    "updated": "2021-11-04T23:39:13.757+0000",
                    "started": "2021-11-04T23:39:13.756+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676799",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/676801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "coryan commented on pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#issuecomment-961511812\n\n\n   PTAL\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T23:39:20.059+0000",
                    "updated": "2021-11-04T23:39:20.059+0000",
                    "started": "2021-11-04T23:39:20.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676801",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/677193",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "coryan commented on a change in pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#discussion_r743104899\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs.cc\n##########\n@@ -102,6 +109,42 @@ class GcsInputStream : public arrow::io::InputStream {\n   mutable gcs::ObjectReadStream stream_;\n };\n \n+class GcsOutputStream : public arrow::io::OutputStream {\n+ public:\n+  explicit GcsOutputStream(gcs::ObjectWriteStream stream) : stream_(std::move(stream)) {}\n+  ~GcsOutputStream() override = default;\n+\n+  Status Close() override {\n+    stream_.Close();\n+    return internal::ToArrowStatus(stream_.last_status());\n+  }\n+\n+  Result<int64_t> Tell() const override {\n+    if (!stream_) {\n+      return Status::IOError(\"invalid stream\");\n+    }\n+    return tell_;\n+  }\n+\n+  bool closed() const override { return !stream_.IsOpen(); }\n+\n+  Status Write(const void* data, int64_t nbytes) override {\n+    if (stream_.write(reinterpret_cast<const char*>(data), nbytes)) {\n+      return Status::OK();\n+    }\n+    return internal::ToArrowStatus(stream_.last_status());\n+  }\n+\n+  Status Flush() override {\n+    stream_.flush();\n+    return Status::OK();\n+  }\n+\n+ private:\n+  gcs::ObjectWriteStream stream_;\n+  int64_t tell_ = 0;\n\nReview comment:\n       Fixed. Thanks.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs.cc\n##########\n@@ -102,6 +109,42 @@ class GcsInputStream : public arrow::io::InputStream {\n   mutable gcs::ObjectReadStream stream_;\n };\n \n+class GcsOutputStream : public arrow::io::OutputStream {\n+ public:\n+  explicit GcsOutputStream(gcs::ObjectWriteStream stream) : stream_(std::move(stream)) {}\n+  ~GcsOutputStream() override = default;\n+\n+  Status Close() override {\n+    stream_.Close();\n+    return internal::ToArrowStatus(stream_.last_status());\n\nReview comment:\n       It is sticky.  And yes, a failed `Write()` will make subsequent `Close()` fail.  It is unadvisable to finalize a stream that failed, you don't know what is its state.\r\n   \n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs.cc\n##########\n@@ -145,6 +189,25 @@ class GcsFileSystem::Impl {\n     return std::make_shared<GcsInputStream>(std::move(stream));\n   }\n \n+  Result<std::shared_ptr<io::OutputStream>> OpenOutputStream(\n+      const GcsPath& path, const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+    gcs::EncryptionKey encryption_key;\n+    ARROW_ASSIGN_OR_RAISE(encryption_key, internal::ToEncryptionKey(metadata));\n+    gcs::PredefinedAcl predefined_acl;\n+    ARROW_ASSIGN_OR_RAISE(predefined_acl, internal::ToPredefinedAcl(metadata));\n+    gcs::KmsKeyName kms_key_name;\n+    ARROW_ASSIGN_OR_RAISE(kms_key_name, internal::ToKmsKeyName(metadata));\n+    gcs::WithObjectMetadata with_object_metadata;\n+    ARROW_ASSIGN_OR_RAISE(with_object_metadata, internal::ToObjectMetadata(metadata));\n+\n+    auto stream = client_.WriteObject(path.bucket, path.object, encryption_key,\n+                                      predefined_acl, kms_key_name, with_object_metadata);\n+    if (!stream.last_status().ok()) {\n+      return internal::ToArrowStatus(stream.last_status());\n+    }\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_cache_control(v);\n+           return Status::OK();\n+         }},\n+        {\"contentDisposition\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_disposition(v);\n+           return Status::OK();\n+         }},\n+        {\"contentEncoding\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_encoding(v);\n+           return Status::OK();\n+         }},\n+        {\"contentLanguage\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_language(v);\n+           return Status::OK();\n+         }},\n+        {\"contentType\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_type(v);\n+           return Status::OK();\n+         }},\n+        {\"customTime\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           std::string err;\n+           absl::Time t;\n+           if (!absl::ParseTime(absl::RFC3339_full, v, &t, &err)) {\n\nReview comment:\n       Yes.  Some Abseil types are exposed in the public API for `google-cloud-cpp`.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n\nReview comment:\n       These are the names of the fields in the GCS metadata:\r\n   \r\n   https://cloud.google.com/storage/docs/json_api/v1/objects\r\n   \r\n   It seems odd to make them match the protocol headers over HTTP (and the S3 API at that), :shrug:\r\n   \r\n   I have changed them, I can change them back.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n\nReview comment:\n       Sure, done.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_cache_control(v);\n+           return Status::OK();\n+         }},\n+        {\"contentDisposition\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_disposition(v);\n+           return Status::OK();\n+         }},\n+        {\"contentEncoding\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_encoding(v);\n+           return Status::OK();\n+         }},\n+        {\"contentLanguage\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_language(v);\n+           return Status::OK();\n+         }},\n+        {\"contentType\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_type(v);\n+           return Status::OK();\n+         }},\n+        {\"customTime\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           std::string err;\n+           absl::Time t;\n+           if (!absl::ParseTime(absl::RFC3339_full, v, &t, &err)) {\n+             return Status::Invalid(\"Error parsing RFC-3339 timestamp: '\", v, \"': \", err);\n+           }\n+           m.set_custom_time(absl::ToChronoTime(t));\n+           return Status::OK();\n+         }},\n+        {\"storageClass\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_storage_class(v);\n+           return Status::OK();\n+         }},\n+        {\"predefinedAcl\",\n+         [](gcs::ObjectMetadata&, const std::string&) { return Status::OK(); }},\n+        {\"encryptionKeyBase64\",\n+         [](gcs::ObjectMetadata&, const std::string&) { return Status::OK(); }},\n+        {\"kmsKeyName\",\n+         [](gcs::ObjectMetadata&, const std::string&) { return Status::OK(); }},\n+    };\n+  }();\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  gcs::ObjectMetadata object_metadata;\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    auto it = setters.find(keys[i]);\n+    if (it != setters.end()) {\n+      auto status = it->second(object_metadata, values[i]);\n+      if (!status.ok()) return status;\n+    } else {\n+      object_metadata.upsert_metadata(keys[i], values[i]);\n\nReview comment:\n       GCS accepts (mostly) arbitrary metadata keys:\r\n   \r\n   https://cloud.google.com/storage/docs/metadata#custom-metadata\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_test.cc\n##########\n@@ -259,6 +352,55 @@ TEST_F(GcsIntegrationTest, ReadObjectInfoInvalid) {\n   EXPECT_EQ(result.status().code(), StatusCode::IOError);\n }\n \n+TEST_F(GcsIntegrationTest, WriteObjectSmall) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto expected = std::string(kLoremIpsum);\n+  ASSERT_OK(output->Write(expected.data(), expected.size()));\n+  ASSERT_OK(output->Close());\n+\n+  // Verify we can read the object back.\n+  std::shared_ptr<io::InputStream> input;\n+  ASSERT_OK_AND_ASSIGN(input, fs->OpenInputStream(path));\n+\n+  std::array<char, 1024> inbuf{};\n+  std::int64_t size;\n+  ASSERT_OK_AND_ASSIGN(size, input->Read(inbuf.size(), inbuf.data()));\n+\n+  EXPECT_EQ(std::string(inbuf.data(), size), expected);\n+}\n+\n+TEST_F(GcsIntegrationTest, WriteObjectLarge) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto b0 = std::string(512 * 1024, 'A');\n+  const auto b1 = std::string(768 * 1024, 'B');\n+  const auto b2 = std::string(1024 * 1024, 'C');\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_test.cc\n##########\n@@ -259,6 +352,55 @@ TEST_F(GcsIntegrationTest, ReadObjectInfoInvalid) {\n   EXPECT_EQ(result.status().code(), StatusCode::IOError);\n }\n \n+TEST_F(GcsIntegrationTest, WriteObjectSmall) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto expected = std::string(kLoremIpsum);\n+  ASSERT_OK(output->Write(expected.data(), expected.size()));\n+  ASSERT_OK(output->Close());\n+\n+  // Verify we can read the object back.\n+  std::shared_ptr<io::InputStream> input;\n+  ASSERT_OK_AND_ASSIGN(input, fs->OpenInputStream(path));\n+\n+  std::array<char, 1024> inbuf{};\n+  std::int64_t size;\n+  ASSERT_OK_AND_ASSIGN(size, input->Read(inbuf.size(), inbuf.data()));\n+\n+  EXPECT_EQ(std::string(inbuf.data(), size), expected);\n+}\n+\n+TEST_F(GcsIntegrationTest, WriteObjectLarge) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto b0 = std::string(512 * 1024, 'A');\n+  const auto b1 = std::string(768 * 1024, 'B');\n+  const auto b2 = std::string(1024 * 1024, 'C');\n+  ASSERT_OK(output->Write(b0.data(), b0.size()));\n+  ASSERT_OK(output->Write(b1.data(), b1.size()));\n+  ASSERT_OK(output->Write(b2.data(), b2.size()));\n+  ASSERT_OK(output->Close());\n+\n+  // Verify we can read the object back.\n+  std::shared_ptr<io::InputStream> input;\n+  ASSERT_OK_AND_ASSIGN(input, fs->OpenInputStream(path));\n+\n+  std::string contents;\n+  std::shared_ptr<Buffer> buffer;\n+  do {\n+    ASSERT_OK_AND_ASSIGN(buffer, input->Read(128 * 1024));\n+    contents.append(buffer->ToString());\n+  } while (buffer && buffer->size() != 0);\n\nReview comment:\n       Fixed.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n\nReview comment:\n       SGTM.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T19:21:14.320+0000",
                    "updated": "2021-11-05T19:21:14.320+0000",
                    "started": "2021-11-05T19:21:14.320+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677193",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/677408",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#discussion_r743108272\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n\nReview comment:\n       Well, the concern here is to have a common vocabulary where possible. If the user can spell `{\"Content-Type\": \"text/html\"}` regardless of the filesystem type, it's better than having to special-case the metadata key name.\r\n   \r\n   As for the exact spelling, well, S3 has the precedence here since it was implemented first :-) The fact that the names may also match HTTP header names actually makes them well-known to users, so that's not a problem  IMHO.\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T19:49:01.310+0000",
                    "updated": "2021-11-05T19:49:01.310+0000",
                    "started": "2021-11-05T19:49:01.310+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677408",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/677411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "coryan commented on pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#issuecomment-961511812\n\n\n   PTAL\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T19:49:10.932+0000",
                    "updated": "2021-11-05T19:49:10.932+0000",
                    "started": "2021-11-05T19:49:10.931+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677411",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/677598",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "coryan commented on a change in pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#discussion_r743104899\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs.cc\n##########\n@@ -102,6 +109,42 @@ class GcsInputStream : public arrow::io::InputStream {\n   mutable gcs::ObjectReadStream stream_;\n };\n \n+class GcsOutputStream : public arrow::io::OutputStream {\n+ public:\n+  explicit GcsOutputStream(gcs::ObjectWriteStream stream) : stream_(std::move(stream)) {}\n+  ~GcsOutputStream() override = default;\n+\n+  Status Close() override {\n+    stream_.Close();\n+    return internal::ToArrowStatus(stream_.last_status());\n+  }\n+\n+  Result<int64_t> Tell() const override {\n+    if (!stream_) {\n+      return Status::IOError(\"invalid stream\");\n+    }\n+    return tell_;\n+  }\n+\n+  bool closed() const override { return !stream_.IsOpen(); }\n+\n+  Status Write(const void* data, int64_t nbytes) override {\n+    if (stream_.write(reinterpret_cast<const char*>(data), nbytes)) {\n+      return Status::OK();\n+    }\n+    return internal::ToArrowStatus(stream_.last_status());\n+  }\n+\n+  Status Flush() override {\n+    stream_.flush();\n+    return Status::OK();\n+  }\n+\n+ private:\n+  gcs::ObjectWriteStream stream_;\n+  int64_t tell_ = 0;\n\nReview comment:\n       Fixed. Thanks.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs.cc\n##########\n@@ -102,6 +109,42 @@ class GcsInputStream : public arrow::io::InputStream {\n   mutable gcs::ObjectReadStream stream_;\n };\n \n+class GcsOutputStream : public arrow::io::OutputStream {\n+ public:\n+  explicit GcsOutputStream(gcs::ObjectWriteStream stream) : stream_(std::move(stream)) {}\n+  ~GcsOutputStream() override = default;\n+\n+  Status Close() override {\n+    stream_.Close();\n+    return internal::ToArrowStatus(stream_.last_status());\n\nReview comment:\n       It is sticky.  And yes, a failed `Write()` will make subsequent `Close()` fail.  It is unadvisable to finalize a stream that failed, you don't know what is its state.\r\n   \n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs.cc\n##########\n@@ -145,6 +189,25 @@ class GcsFileSystem::Impl {\n     return std::make_shared<GcsInputStream>(std::move(stream));\n   }\n \n+  Result<std::shared_ptr<io::OutputStream>> OpenOutputStream(\n+      const GcsPath& path, const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+    gcs::EncryptionKey encryption_key;\n+    ARROW_ASSIGN_OR_RAISE(encryption_key, internal::ToEncryptionKey(metadata));\n+    gcs::PredefinedAcl predefined_acl;\n+    ARROW_ASSIGN_OR_RAISE(predefined_acl, internal::ToPredefinedAcl(metadata));\n+    gcs::KmsKeyName kms_key_name;\n+    ARROW_ASSIGN_OR_RAISE(kms_key_name, internal::ToKmsKeyName(metadata));\n+    gcs::WithObjectMetadata with_object_metadata;\n+    ARROW_ASSIGN_OR_RAISE(with_object_metadata, internal::ToObjectMetadata(metadata));\n+\n+    auto stream = client_.WriteObject(path.bucket, path.object, encryption_key,\n+                                      predefined_acl, kms_key_name, with_object_metadata);\n+    if (!stream.last_status().ok()) {\n+      return internal::ToArrowStatus(stream.last_status());\n+    }\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_cache_control(v);\n+           return Status::OK();\n+         }},\n+        {\"contentDisposition\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_disposition(v);\n+           return Status::OK();\n+         }},\n+        {\"contentEncoding\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_encoding(v);\n+           return Status::OK();\n+         }},\n+        {\"contentLanguage\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_language(v);\n+           return Status::OK();\n+         }},\n+        {\"contentType\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_type(v);\n+           return Status::OK();\n+         }},\n+        {\"customTime\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           std::string err;\n+           absl::Time t;\n+           if (!absl::ParseTime(absl::RFC3339_full, v, &t, &err)) {\n\nReview comment:\n       Yes.  Some Abseil types are exposed in the public API for `google-cloud-cpp`.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n\nReview comment:\n       These are the names of the fields in the GCS metadata:\r\n   \r\n   https://cloud.google.com/storage/docs/json_api/v1/objects\r\n   \r\n   It seems odd to make them match the protocol headers over HTTP (and the S3 API at that), :shrug:\r\n   \r\n   I have changed them, I can change them back.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n\nReview comment:\n       Sure, done.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_cache_control(v);\n+           return Status::OK();\n+         }},\n+        {\"contentDisposition\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_disposition(v);\n+           return Status::OK();\n+         }},\n+        {\"contentEncoding\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_encoding(v);\n+           return Status::OK();\n+         }},\n+        {\"contentLanguage\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_language(v);\n+           return Status::OK();\n+         }},\n+        {\"contentType\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_content_type(v);\n+           return Status::OK();\n+         }},\n+        {\"customTime\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           std::string err;\n+           absl::Time t;\n+           if (!absl::ParseTime(absl::RFC3339_full, v, &t, &err)) {\n+             return Status::Invalid(\"Error parsing RFC-3339 timestamp: '\", v, \"': \", err);\n+           }\n+           m.set_custom_time(absl::ToChronoTime(t));\n+           return Status::OK();\n+         }},\n+        {\"storageClass\",\n+         [](gcs::ObjectMetadata& m, const std::string& v) {\n+           m.set_storage_class(v);\n+           return Status::OK();\n+         }},\n+        {\"predefinedAcl\",\n+         [](gcs::ObjectMetadata&, const std::string&) { return Status::OK(); }},\n+        {\"encryptionKeyBase64\",\n+         [](gcs::ObjectMetadata&, const std::string&) { return Status::OK(); }},\n+        {\"kmsKeyName\",\n+         [](gcs::ObjectMetadata&, const std::string&) { return Status::OK(); }},\n+    };\n+  }();\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  gcs::ObjectMetadata object_metadata;\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    auto it = setters.find(keys[i]);\n+    if (it != setters.end()) {\n+      auto status = it->second(object_metadata, values[i]);\n+      if (!status.ok()) return status;\n+    } else {\n+      object_metadata.upsert_metadata(keys[i], values[i]);\n\nReview comment:\n       GCS accepts (mostly) arbitrary metadata keys:\r\n   \r\n   https://cloud.google.com/storage/docs/metadata#custom-metadata\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_test.cc\n##########\n@@ -259,6 +352,55 @@ TEST_F(GcsIntegrationTest, ReadObjectInfoInvalid) {\n   EXPECT_EQ(result.status().code(), StatusCode::IOError);\n }\n \n+TEST_F(GcsIntegrationTest, WriteObjectSmall) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto expected = std::string(kLoremIpsum);\n+  ASSERT_OK(output->Write(expected.data(), expected.size()));\n+  ASSERT_OK(output->Close());\n+\n+  // Verify we can read the object back.\n+  std::shared_ptr<io::InputStream> input;\n+  ASSERT_OK_AND_ASSIGN(input, fs->OpenInputStream(path));\n+\n+  std::array<char, 1024> inbuf{};\n+  std::int64_t size;\n+  ASSERT_OK_AND_ASSIGN(size, input->Read(inbuf.size(), inbuf.data()));\n+\n+  EXPECT_EQ(std::string(inbuf.data(), size), expected);\n+}\n+\n+TEST_F(GcsIntegrationTest, WriteObjectLarge) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto b0 = std::string(512 * 1024, 'A');\n+  const auto b1 = std::string(768 * 1024, 'B');\n+  const auto b2 = std::string(1024 * 1024, 'C');\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_test.cc\n##########\n@@ -259,6 +352,55 @@ TEST_F(GcsIntegrationTest, ReadObjectInfoInvalid) {\n   EXPECT_EQ(result.status().code(), StatusCode::IOError);\n }\n \n+TEST_F(GcsIntegrationTest, WriteObjectSmall) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto expected = std::string(kLoremIpsum);\n+  ASSERT_OK(output->Write(expected.data(), expected.size()));\n+  ASSERT_OK(output->Close());\n+\n+  // Verify we can read the object back.\n+  std::shared_ptr<io::InputStream> input;\n+  ASSERT_OK_AND_ASSIGN(input, fs->OpenInputStream(path));\n+\n+  std::array<char, 1024> inbuf{};\n+  std::int64_t size;\n+  ASSERT_OK_AND_ASSIGN(size, input->Read(inbuf.size(), inbuf.data()));\n+\n+  EXPECT_EQ(std::string(inbuf.data(), size), expected);\n+}\n+\n+TEST_F(GcsIntegrationTest, WriteObjectLarge) {\n+  auto fs = internal::MakeGcsFileSystemForTest(TestGcsOptions());\n+\n+  const auto path = kPreexistingBucket + std::string(\"/test-write-object\");\n+  std::shared_ptr<io::OutputStream> output;\n+  ASSERT_OK_AND_ASSIGN(output, fs->OpenOutputStream(path, {}));\n+  const auto b0 = std::string(512 * 1024, 'A');\n+  const auto b1 = std::string(768 * 1024, 'B');\n+  const auto b2 = std::string(1024 * 1024, 'C');\n+  ASSERT_OK(output->Write(b0.data(), b0.size()));\n+  ASSERT_OK(output->Write(b1.data(), b1.size()));\n+  ASSERT_OK(output->Write(b2.data(), b2.size()));\n+  ASSERT_OK(output->Close());\n+\n+  // Verify we can read the object back.\n+  std::shared_ptr<io::InputStream> input;\n+  ASSERT_OK_AND_ASSIGN(input, fs->OpenInputStream(path));\n+\n+  std::string contents;\n+  std::shared_ptr<Buffer> buffer;\n+  do {\n+    ASSERT_OK_AND_ASSIGN(buffer, input->Read(128 * 1024));\n+    contents.append(buffer->ToString());\n+  } while (buffer && buffer->size() != 0);\n\nReview comment:\n       Fixed.\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n\nReview comment:\n       SGTM.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T20:14:04.611+0000",
                    "updated": "2021-11-05T20:14:04.611+0000",
                    "started": "2021-11-05T20:14:04.610+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677598",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/677783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#discussion_r743108272\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/gcsfs_internal.cc\n##########\n@@ -62,6 +65,133 @@ Status ToArrowStatus(const google::cloud::Status& s) {\n   return Status::OK();\n }\n \n+namespace gcs = ::google::cloud::storage;\n+\n+Result<google::cloud::storage::EncryptionKey> ToEncryptionKey(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::EncryptionKey{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"encryptionKeyBase64\") {\n+      return gcs::EncryptionKey::FromBase64Key(values[i]);\n+    }\n+  }\n+  return gcs::EncryptionKey{};\n+}\n+\n+Result<gcs::KmsKeyName> ToKmsKeyName(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::KmsKeyName{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"kmsKeyName\") {\n+      return gcs::KmsKeyName(values[i]);\n+    }\n+  }\n+  return gcs::KmsKeyName{};\n+}\n+\n+Result<gcs::PredefinedAcl> ToPredefinedAcl(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::PredefinedAcl{};\n+  }\n+\n+  const auto& keys = metadata->keys();\n+  const auto& values = metadata->values();\n+\n+  for (std::size_t i = 0; i < keys.size(); ++i) {\n+    if (keys[i] == \"predefinedAcl\") {\n+      return gcs::PredefinedAcl(values[i]);\n+    }\n+  }\n+  return gcs::PredefinedAcl{};\n+}\n+\n+Result<gcs::WithObjectMetadata> ToObjectMetadata(\n+    const std::shared_ptr<const KeyValueMetadata>& metadata) {\n+  if (!metadata) {\n+    return gcs::WithObjectMetadata{};\n+  }\n+\n+  static auto const setters = [] {\n+    using setter = std::function<Status(gcs::ObjectMetadata&, const std::string&)>;\n+    return std::map<std::string, setter>{\n+        {\"cacheControl\",\n\nReview comment:\n       Well, the concern here is to have a common vocabulary where possible. If the user can spell `{\"Content-Type\": \"text/html\"}` regardless of the filesystem type, it's better than having to special-case the metadata key name.\r\n   \r\n   As for the exact spelling, well, S3 has the precedence here since it was implemented first :-) The fact that the names may also match HTTP header names actually makes them well-known to users, so that's not a problem  IMHO.\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T20:37:31.483+0000",
                    "updated": "2021-11-05T20:37:31.483+0000",
                    "started": "2021-11-05T20:37:31.483+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677783",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/677785",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "coryan commented on pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#issuecomment-961511812\n\n\n   PTAL\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T20:37:38.886+0000",
                    "updated": "2021-11-05T20:37:38.886+0000",
                    "started": "2021-11-05T20:37:38.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677785",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/678545",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-08T15:22:34.828+0000",
                    "updated": "2021-11-08T15:22:34.828+0000",
                    "started": "2021-11-08T15:22:34.828+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678545",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/678547",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#issuecomment-963267016\n\n\n   Benchmark runs are scheduled for baseline = 1420544e5bc9082415f0167fd98a647ce04849be and contender = 2eafc600baa9cc75935a77e490099d9193db5d12. 2eafc600baa9cc75935a77e490099d9193db5d12 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/53fec9d82c654bd99b787bbad66ee756...477079aa794f40edba9e15b0338d522f/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/bc575813c4da4153922c7b8bbd90430a...fd40b2cede5c4e45b9b7ecdd63ecbdfe/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/3d7acb8b65e64b6598ddff86083257b4...0cec6839ea744b7b8e4a1bd62dccb260/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-08T15:23:42.611+0000",
                    "updated": "2021-11-08T15:23:42.611+0000",
                    "started": "2021-11-08T15:23:42.611+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678547",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/678554",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#issuecomment-963267016\n\n\n   Benchmark runs are scheduled for baseline = 1420544e5bc9082415f0167fd98a647ce04849be and contender = 2eafc600baa9cc75935a77e490099d9193db5d12. 2eafc600baa9cc75935a77e490099d9193db5d12 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/53fec9d82c654bd99b787bbad66ee756...477079aa794f40edba9e15b0338d522f/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/bc575813c4da4153922c7b8bbd90430a...fd40b2cede5c4e45b9b7ecdd63ecbdfe/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/3d7acb8b65e64b6598ddff86083257b4...0cec6839ea744b7b8e4a1bd62dccb260/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-08T15:33:26.267+0000",
                    "updated": "2021-11-08T15:33:26.267+0000",
                    "started": "2021-11-08T15:33:26.267+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678554",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/678766",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#issuecomment-963267016\n\n\n   Benchmark runs are scheduled for baseline = 1420544e5bc9082415f0167fd98a647ce04849be and contender = 2eafc600baa9cc75935a77e490099d9193db5d12. 2eafc600baa9cc75935a77e490099d9193db5d12 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/53fec9d82c654bd99b787bbad66ee756...477079aa794f40edba9e15b0338d522f/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/bc575813c4da4153922c7b8bbd90430a...fd40b2cede5c4e45b9b7ecdd63ecbdfe/)\n   [Finished :arrow_down:0.67% :arrow_up:0.04%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/3d7acb8b65e64b6598ddff86083257b4...0cec6839ea744b7b8e4a1bd62dccb260/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-08T21:52:34.612+0000",
                    "updated": "2021-11-08T21:52:34.612+0000",
                    "started": "2021-11-08T21:52:34.612+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678766",
                    "issueId": "13406820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/worklog/678830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11550:\nURL: https://github.com/apache/arrow/pull/11550#issuecomment-963267016\n\n\n   Benchmark runs are scheduled for baseline = 1420544e5bc9082415f0167fd98a647ce04849be and contender = 2eafc600baa9cc75935a77e490099d9193db5d12. 2eafc600baa9cc75935a77e490099d9193db5d12 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/53fec9d82c654bd99b787bbad66ee756...477079aa794f40edba9e15b0338d522f/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/bc575813c4da4153922c7b8bbd90430a...fd40b2cede5c4e45b9b7ecdd63ecbdfe/)\n   [Finished :arrow_down:0.67% :arrow_up:0.04%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/3d7acb8b65e64b6598ddff86083257b4...0cec6839ea744b7b8e4a1bd62dccb260/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-09T00:36:37.086+0000",
                    "updated": "2021-11-09T00:36:37.086+0000",
                    "started": "2021-11-09T00:36:37.085+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678830",
                    "issueId": "13406820"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@21ce96ca[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27650d40[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4dfe236f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@427e389d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b70e7bc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3fd406ed[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30dbf23[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3004d50f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@cf589b4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@138905a9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d13445c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6b295a5c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Nov 08 15:22:23 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-11-08T15:22:23.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14346/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-10-15T14:42:51.000+0000",
        "updated": "2021-11-09T00:36:37.000+0000",
        "timeoriginalestimate": null,
        "description": "Implement the {{GcsFileSystem::OpenOutputStream}} function and tests for it.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement streaming writes for GCS FileSystem",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13406820/comment/17440544",
                    "id": "17440544",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 11550\n[https://github.com/apache/arrow/pull/11550]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-11-08T15:22:23.829+0000",
                    "updated": "2021-11-08T15:22:23.829+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0vw1c:",
        "customfield_12314139": null
    }
}