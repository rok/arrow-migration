{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13188307",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188307",
    "key": "ARROW-3360",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3360/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 4,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188307/worklog/149781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2622: ARROW-3360: [GLib] Import Parquet GLib\nURL: https://github.com/apache/arrow/pull/2622#issuecomment-425714639\n \n \n   @wesm Thanks for creating a JIRA ticket.\r\n   Is it OK to use ARROW ticket instead of PARQUET ticket for Parquet GLib bindings?\r\n   \r\n   If it's OK, I'll also use ARROW ticket for new features.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-30T11:39:58.937+0000",
                    "updated": "2018-09-30T11:39:58.937+0000",
                    "started": "2018-09-30T11:39:58.937+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149781",
                    "issueId": "13188307"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188307/worklog/149827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2622: ARROW-3360: [GLib] Import Parquet GLib\nURL: https://github.com/apache/arrow/pull/2622#issuecomment-425740605\n \n \n   I think it's OK to use ARROW project\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-30T18:22:35.773+0000",
                    "updated": "2018-09-30T18:22:35.773+0000",
                    "started": "2018-09-30T18:22:35.772+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149827",
                    "issueId": "13188307"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188307/worklog/149875",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2622: ARROW-3360: [GLib] Import Parquet GLib\nURL: https://github.com/apache/arrow/pull/2622#issuecomment-425764963\n \n \n   OK. I'll also use ARROW project.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-01T00:47:34.435+0000",
                    "updated": "2018-10-01T00:47:34.435+0000",
                    "started": "2018-10-01T00:47:34.434+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "149875",
                    "issueId": "13188307"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188307/worklog/150181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2622: ARROW-3360: [GLib] Import Parquet GLib\nURL: https://github.com/apache/arrow/pull/2622\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/.travis.yml b/.travis.yml\nindex e37c926557..a75890f35b 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -179,6 +179,7 @@ matrix:\n     os: linux\n     env:\n     - ARROW_TRAVIS_ORC=1\n+    - ARROW_TRAVIS_PARQUET=1\n     - BUILD_TORCH_EXAMPLE=no\n     - CC=\"gcc-4.9\"\n     - CXX=\"g++-4.9\"\ndiff --git a/c_glib/Makefile.am b/c_glib/Makefile.am\nindex 92190e4a6a..5fb65f0409 100644\n--- a/c_glib/Makefile.am\n+++ b/c_glib/Makefile.am\n@@ -20,6 +20,7 @@ ACLOCAL_AMFLAGS = -I m4 ${ACLOCAL_FLAGS}\n SUBDIRS =\t\t\t\t\t\\\n \tarrow-glib\t\t\t\t\\\n \tarrow-gpu-glib\t\t\t\t\\\n+\tparquet-glib\t\t\t\t\\\n \tdoc\t\t\t\t\t\\\n \texample\t\t\t\t\t\\\n \ttool\ndiff --git a/c_glib/configure.ac b/c_glib/configure.ac\nindex 1384e9b38e..7f1ee6abc1 100644\n--- a/c_glib/configure.ac\n+++ b/c_glib/configure.ac\n@@ -134,6 +134,10 @@ if test \"x$GARROW_ARROW_CPP_BUILD_DIR\" = \"x\"; then\n                     [arrow-gpu],\n                     [HAVE_ARROW_GPU=yes],\n                     [HAVE_ARROW_GPU=no])\n+  PKG_CHECK_MODULES([PARQUET],\n+                    [parquet],\n+                    [HAVE_PARQUET=yes],\n+                    [HAVE_PARQUET=no])\n else\n   USE_ARROW_BUILD_DIR=yes\n \n@@ -166,6 +170,17 @@ else\n   fi\n   AC_SUBST(ARROW_GPU_CFLAGS)\n   AC_SUBST(ARROW_GPU_LIBS)\n+\n+  PARQUET_CFLAGS=\"\"\n+  if test -f \"${GARROW_ARROW_CPP_BUILD_DIR}/src/parquet/parquet.pc\"; then\n+    HAVE_PARQUET=yes\n+    PARQUET_LIBS=\"-lparquet\"\n+  else\n+    HAVE_PARQUET=no\n+    PARQUET_LIBS=\"\"\n+  fi\n+  AC_SUBST(PARQUET_CFLAGS)\n+  AC_SUBST(PARQUET_LIBS)\n fi\n \n AM_CONDITIONAL([USE_ARROW_BUILD_DIR],\n@@ -181,6 +196,11 @@ if test \"$HAVE_ARROW_GPU\" = \"yes\"; then\n   AC_DEFINE(HAVE_ARROW_GPU, [1], [Define to 1 if Apache Arrow supports GPU.])\n fi\n \n+AM_CONDITIONAL([HAVE_PARQUET], [test \"$HAVE_PARQUET\" = \"yes\"])\n+if test \"$HAVE_PARQUET\" = \"yes\"; then\n+  AC_DEFINE(HAVE_PARQUET, [1], [Define to 1 if Apache Parquet exists.])\n+fi\n+\n exampledir=\"\\$(datadir)/arrow-glib/example\"\n AC_SUBST(exampledir)\n \n@@ -192,9 +212,13 @@ AC_CONFIG_FILES([\n   arrow-glib/version.h\n   arrow-gpu-glib/Makefile\n   arrow-gpu-glib/arrow-gpu-glib.pc\n+  parquet-glib/Makefile\n+  parquet-glib/parquet-glib.pc\n   doc/Makefile\n-  doc/reference/Makefile\n-  doc/reference/entities.xml\n+  doc/arrow-glib/Makefile\n+  doc/arrow-glib/entities.xml\n+  doc/parquet-glib/Makefile\n+  doc/parquet-glib/entities.xml\n   example/Makefile\n   example/lua/Makefile\n   tool/Makefile\ndiff --git a/c_glib/doc/Makefile.am b/c_glib/doc/Makefile.am\nindex 1d491ab091..549823b5e6 100644\n--- a/c_glib/doc/Makefile.am\n+++ b/c_glib/doc/Makefile.am\n@@ -15,5 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-SUBDIRS =                                       \\\n-\treference\n+SUBDIRS =\t\t\t\t\t\\\n+\tarrow-glib\t\t\t\t\\\n+\tparquet-glib\ndiff --git a/c_glib/doc/reference/Makefile.am b/c_glib/doc/arrow-glib/Makefile.am\nsimilarity index 100%\nrename from c_glib/doc/reference/Makefile.am\nrename to c_glib/doc/arrow-glib/Makefile.am\ndiff --git a/c_glib/doc/reference/arrow-glib-docs.xml b/c_glib/doc/arrow-glib/arrow-glib-docs.xml\nsimilarity index 100%\nrename from c_glib/doc/reference/arrow-glib-docs.xml\nrename to c_glib/doc/arrow-glib/arrow-glib-docs.xml\ndiff --git a/c_glib/doc/reference/entities.xml.in b/c_glib/doc/arrow-glib/entities.xml.in\nsimilarity index 100%\nrename from c_glib/doc/reference/entities.xml.in\nrename to c_glib/doc/arrow-glib/entities.xml.in\ndiff --git a/c_glib/doc/reference/meson.build b/c_glib/doc/arrow-glib/meson.build\nsimilarity index 100%\nrename from c_glib/doc/reference/meson.build\nrename to c_glib/doc/arrow-glib/meson.build\ndiff --git a/c_glib/doc/parquet-glib/Makefile.am b/c_glib/doc/parquet-glib/Makefile.am\nnew file mode 100644\nindex 0000000000..71459a8aef\n--- /dev/null\n+++ b/c_glib/doc/parquet-glib/Makefile.am\n@@ -0,0 +1,69 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+if HAVE_PARQUET\n+DOC_MODULE = parquet-glib\n+\n+DOC_MAIN_SGML_FILE = $(DOC_MODULE)-docs.xml\n+\n+DOC_SOURCE_DIR =\t\t\t\t\\\n+\t$(top_srcdir)/parquet-glib\t\t\\\n+\t$(top_builddir)/parquet-glib\n+\n+SCAN_OPTIONS =\t\t\t\t\t\t\\\n+\t--deprecated-guards=\"GPARQUET_DISABLE_DEPRECATED\"\n+\n+MKDB_OPTIONS =\t\t\t\t\t\\\n+\t--name-space=gparquet\t\t\t\\\n+\t--source-suffixes=\"c,cpp,h\"\n+\n+HFILE_GLOB =\t\t\t\t\t\\\n+\t$(top_srcdir)/parquet-glib/*.h\n+\n+IGNORE_HFILES =\n+\n+CFILE_GLOB =\t\t\t\t\t\\\n+\t$(top_srcdir)/parquet-glib/*.cpp\n+\n+AM_CPPFLAGS =\t\t\t\t\t\\\n+\t-I$(top_builddir)\t\t\t\\\n+\t-I$(top_srcdir)\n+\n+AM_CFLAGS =\t\t\t\t\t\\\n+\t$(GLIB_CFLAGS)\t\t\t\t\\\n+\t$(ARROW_CFLAGS)\t\t\t\t\\\n+\t$(PARQUET_CFLAGS)\n+\n+GTKDOC_LIBS =\t\t\t\t\t\t\\\n+\t$(top_builddir)/arrow-glib/libarrow-glib.la\t\\\n+\t$(top_builddir)/parquet-glib/libparquet-glib.la\n+\n+include $(top_srcdir)/gtk-doc.make\n+\n+CLEANFILES +=\t\t\t\t\t\\\n+\t$(DOC_MODULE)-decl-list.txt\t\t\\\n+\t$(DOC_MODULE)-decl.txt\t\t\t\\\n+\t$(DOC_MODULE)-overrides.txt\t\t\\\n+\t$(DOC_MODULE)-sections.txt\t\t\\\n+\t$(DOC_MODULE).types\n+else\n+EXTRA_DIST =\n+endif\n+\n+EXTRA_DIST +=\t\t\t\t\t\\\n+\tentities.xml.in\t\t\t\t\\\n+\tmeson.build\ndiff --git a/c_glib/doc/parquet-glib/entities.xml.in b/c_glib/doc/parquet-glib/entities.xml.in\nnew file mode 100644\nindex 0000000000..aa5addb4e8\n--- /dev/null\n+++ b/c_glib/doc/parquet-glib/entities.xml.in\n@@ -0,0 +1,24 @@\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+<!ENTITY package \"@PACKAGE@\">\n+<!ENTITY package_bugreport \"@PACKAGE_BUGREPORT@\">\n+<!ENTITY package_name \"@PACKAGE_NAME@\">\n+<!ENTITY package_string \"@PACKAGE_STRING@\">\n+<!ENTITY package_url \"@PACKAGE_URL@\">\n+<!ENTITY package_version \"@PACKAGE_VERSION@\">\ndiff --git a/c_glib/doc/parquet-glib/meson.build b/c_glib/doc/parquet-glib/meson.build\nnew file mode 100644\nindex 0000000000..7f6f8ab63c\n--- /dev/null\n+++ b/c_glib/doc/parquet-glib/meson.build\n@@ -0,0 +1,81 @@\n+# -*- indent-tabs-mode: nil -*-\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+project_name = 'parquet-glib'\n+entities_conf = configuration_data()\n+entities_conf.set('PACKAGE', project_name)\n+entities_conf.set('PACKAGE_BUGREPORT',\n+                  'https://issues.apache.org/jira/browse/PARQUET')\n+entities_conf.set('PACKAGE_NAME', project_name)\n+entities_conf.set('PACKAGE_STRING',\n+                  ' '.join([project_name, version]))\n+entities_conf.set('PACKAGE_URL', 'https://arrow.apache.org/')\n+entities_conf.set('PACKAGE_VERSION', version)\n+configure_file(input: 'entities.xml.in',\n+               output: 'entities.xml',\n+               configuration: entities_conf)\n+\n+private_headers = [\n+]\n+\n+content_files = [\n+]\n+\n+html_images = [\n+]\n+\n+glib_prefix = dependency('glib-2.0').get_pkgconfig_variable('prefix')\n+glib_doc_path = join_paths(glib_prefix, 'share', 'gtk-doc', 'html')\n+arrow_glib_doc_path = join_paths(data_dir,\n+                                 'gtk-doc',\n+                                 'html',\n+                                 meson.project_name())\n+doc_path = join_paths(data_dir, project_name, 'gtk-doc', 'html')\n+\n+source_directories = [\n+  join_paths(meson.source_root(), 'parquet-glib'),\n+  join_paths(meson.build_root(), 'parquet-glib'),\n+]\n+dependencies = [\n+  parquet_glib,\n+]\n+ignore_headers = []\n+gnome.gtkdoc(project_name,\n+             main_xml: project_name + '-docs.xml',\n+             src_dir: source_directories,\n+             dependencies: dependencies,\n+             ignore_headers: ignore_headers,\n+             gobject_typesfile: project_name + '.types',\n+             scan_args: [\n+               '--rebuild-types',\n+               '--deprecated-guards=GPARQUET_DISABLE_DEPRECATED',\n+             ],\n+             mkdb_args: [\n+               '--output-format=xml',\n+               '--name-space=gparquet',\n+               '--source-suffixes=c,cpp,h',\n+             ],\n+             fixxref_args: [\n+               '--html-dir=' + doc_path,\n+               '--extra-dir=' + join_paths(glib_doc_path, 'glib'),\n+               '--extra-dir=' + join_paths(glib_doc_path, 'gobject'),\n+               '--extra-dir=' + arrow_glib_doc_path,\n+             ],\n+             html_assets: html_images,\n+             install: true)\ndiff --git a/c_glib/doc/parquet-glib/parquet-glib-docs.xml b/c_glib/doc/parquet-glib/parquet-glib-docs.xml\nnew file mode 100644\nindex 0000000000..0f2c30ba78\n--- /dev/null\n+++ b/c_glib/doc/parquet-glib/parquet-glib-docs.xml\n@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+<!DOCTYPE book PUBLIC \"-//OASIS//DTD DocBook XML V4.3//EN\"\n+               \"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd\"\n+[\n+  <!ENTITY % local.common.attrib \"xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'\">\n+  <!ENTITY % gtkdocentities SYSTEM \"entities.xml\">\n+  %gtkdocentities;\n+]>\n+<book id=\"index\" xmlns:xi=\"http://www.w3.org/2003/XInclude\">\n+  <bookinfo>\n+    <title>&package_name; Reference Manual</title>\n+    <releaseinfo>\n+      for &package_string;.\n+      <!--\n+      The latest version of this documentation can be found on-line at\n+      <ulink role=\"online-location\" url=\"http://[SERVER]/&package_name;/\">http://[SERVER]/&package_name;/</ulink>.\n+      -->\n+    </releaseinfo>\n+  </bookinfo>\n+\n+  <part id=\"arrow\">\n+    <title>Arrow</title>\n+    <chapter id=\"io\">\n+      <title>IO</title>\n+      <xi:include href=\"xml/arrow-file-reader.xml\"/>\n+      <xi:include href=\"xml/arrow-file-writer.xml\"/>\n+    </chapter>\n+  </part>\n+\n+  <chapter id=\"object-tree\">\n+    <title>Object Hierarchy</title>\n+    <xi:include href=\"xml/tree_index.sgml\"/>\n+  </chapter>\n+  <index id=\"api-index-full\">\n+    <title>API Index</title>\n+    <xi:include href=\"xml/api-index-full.xml\"><xi:fallback /></xi:include>\n+  </index>\n+  <index id=\"deprecated-api-index\" role=\"deprecated\">\n+    <title>Index of deprecated API</title>\n+    <xi:include href=\"xml/api-index-deprecated.xml\"><xi:fallback /></xi:include>\n+  </index>\n+  <index id=\"api-index-0-11-0\" role=\"0.11.0\">\n+    <title>Index of new symbols in 0.11.0</title>\n+    <xi:include href=\"xml/api-index-0.11.0.xml\"><xi:fallback /></xi:include>\n+  </index>\n+  <xi:include href=\"xml/annotation-glossary.xml\"><xi:fallback /></xi:include>\n+</book>\ndiff --git a/c_glib/meson.build b/c_glib/meson.build\nindex a83ab9c6ee..066405e3b3 100644\n--- a/c_glib/meson.build\n+++ b/c_glib/meson.build\n@@ -64,6 +64,7 @@ if arrow_cpp_build_lib_dir == ''\n   arrow = dependency('arrow')\n   have_arrow_orc = dependency('arrow-orc', required: false).found()\n   arrow_gpu = dependency('arrow-gpu', required: false)\n+  parquet = dependency('parquet', required: false)\n else\n   base_include_directories += [\n     include_directories(join_paths(arrow_cpp_build_dir, 'src')),\n@@ -88,16 +89,25 @@ main(void)\n   arrow_gpu = cpp_compiler.find_library('arrow_gpu',\n                                         dirs: [arrow_cpp_build_lib_dir],\n                                         required: false)\n+  parquet = cpp_compiler.find_library('parquet',\n+                                      dirs: [arrow_cpp_build_lib_dir],\n+                                      required: false)\n endif\n \n subdir('arrow-glib')\n if arrow_gpu.found()\n   subdir('arrow-gpu-glib')\n endif\n+if parquet.found()\n+  subdir('parquet-glib')\n+endif\n subdir('example')\n \n if get_option('gtk_doc')\n-  subdir('doc/reference')\n+  subdir('doc/arrow-glib')\n+  if parquet.found()\n+    subdir('doc/parquet-glib')\n+  endif\n endif\n \n run_test = find_program('test/run-test.sh')\n@@ -106,4 +116,5 @@ test('unit test',\n      env: [\n        'ARROW_GLIB_TYPELIB_DIR=@0@/arrow-glib'.format(meson.build_root()),\n        'ARROW_GPU_GLIB_TYPELIB_DIR=@0@/arrow-gpu-glib'.format(meson.build_root()),\n+       'PARQUET_GLIB_TYPELIB_DIR=@0@/parquet-glib'.format(meson.build_root()),\n      ])\ndiff --git a/c_glib/parquet-glib/Makefile.am b/c_glib/parquet-glib/Makefile.am\nnew file mode 100644\nindex 0000000000..7ade780534\n--- /dev/null\n+++ b/c_glib/parquet-glib/Makefile.am\n@@ -0,0 +1,140 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+CLEANFILES =\n+DISTCLEANFILES =\n+\n+EXTRA_DIST =\t\t\t\t\t\\\n+\tmeson.build\n+\n+AM_CPPFLAGS =\t\t\t\t\t\\\n+\t-I$(top_builddir)\t\t\t\\\n+\t-I$(top_srcdir)\n+\n+AM_CFLAGS =\t\t\t\t\t\\\n+\t$(GLIB_CFLAGS)\t\t\t\t\\\n+\t$(GARROW_CFLAGS)\t\t\t\\\n+\t$(GPARQUET_CFLAGS)\n+\n+if HAVE_PARQUET\n+lib_LTLIBRARIES =\t\t\t\t\\\n+\tlibparquet-glib.la\n+\n+libparquet_glib_la_CXXFLAGS =\t\t\t\\\n+\t$(GLIB_CFLAGS)\t\t\t\t\\\n+\t$(ARROW_CFLAGS)\t\t\t\t\\\n+\t$(PARQUET_CFLAGS)\t\t\t\\\n+\t$(GARROW_CFLAGS)\t\t\t\\\n+\t$(GPARQUET_CXXFLAGS)\n+\n+libparquet_glib_la_LDFLAGS =\t\t\t\\\n+\t-version-info $(LT_VERSION_INFO)\t\\\n+\t-no-undefined\n+\n+libparquet_glib_la_LIBADD =\t\t\t\\\n+\t$(GLIB_LIBS)\t\t\t\t\\\n+\t$(ARROW_LIBS)\t\t\t\t\\\n+\t$(PARQUET_LIBS)\t\t\t\t\\\n+\t$(GARROW_LIBS)\n+\n+libparquet_glib_la_headers =\t\t\t\\\n+\tarrow-file-reader.h\t\t\t\\\n+\tarrow-file-writer.h\t\t\t\\\n+\tparquet-glib.h\n+\n+libparquet_glib_la_sources =\t\t\t\\\n+\tarrow-file-reader.cpp\t\t\t\\\n+\tarrow-file-writer.cpp\t\t\t\\\n+\t$(libparquet_glib_la_headers)\n+\n+libparquet_glib_la_cpp_headers =\t\t\\\n+\tarrow-file-reader.hpp\t\t\t\\\n+\tarrow-file-writer.hpp\t\t\t\\\n+\tparquet-glib.hpp\n+\n+libparquet_glib_la_SOURCES =\t\t\t\\\n+\t$(libparquet_glib_la_sources)\t\t\\\n+\t$(libparquet_glib_la_cpp_headers)\n+\n+parquet_glib_includedir = $(includedir)/parquet-glib\n+parquet_glib_include_HEADERS =\t\t\t\\\n+\t$(libparquet_glib_la_headers)\t\t\\\n+\t$(libparquet_glib_la_cpp_headers)\n+\n+pkgconfigdir = $(libdir)/pkgconfig\n+pkgconfig_DATA =\t\t\t\t\\\n+\tparquet-glib.pc\n+\n+# GObject Introspection\n+if HAVE_INTROSPECTION\n+-include $(INTROSPECTION_MAKEFILE)\n+INTROSPECTION_GIRS =\n+INTROSPECTION_SCANNER_ARGS =\n+INTROSPECTION_SCANNER_ENV =\n+if USE_ARROW_BUILD_DIR\n+INTROSPECTION_SCANNER_ENV +=\t\t\t\\\n+\tPKG_CONFIG_PATH=${abs_top_builddir}/arrow-glib:$(ARROW_BUILD_DIR)/src/arrow:$${PKG_CONFIG_PATH}\n+else\n+INTROSPECTION_SCANNER_ENV +=\t\t\t\\\n+\tPKG_CONFIG_PATH=${abs_top_builddir}/arrow-glib:$${PKG_CONFIG_PATH}\n+endif\n+INTROSPECTION_COMPILER_ARGS =\t\t\t\t\\\n+\t--includedir=$(abs_top_builddir)/arrow-glib\n+\n+Parquet-1.0.gir: libparquet-glib.la\n+Parquet_1_0_gir_PACKAGES =\t\t\t\\\n+\tarrow-glib\n+Parquet_1_0_gir_EXPORT_PACKAGES =\t\t\\\n+\tparquet-glib\n+Parquet_1_0_gir_INCLUDES =\t\t\t\\\n+\tArrow-1.0\n+Parquet_1_0_gir_CFLAGS =\t\t\t\\\n+\t$(AM_CPPFLAGS)\n+Parquet_1_0_gir_LIBS =\n+Parquet_1_0_gir_FILES = $(libparquet_glib_la_sources)\n+Parquet_1_0_gir_SCANNERFLAGS =\t\t\t\t\t\\\n+\t--add-include-path=$(abs_top_builddir)/arrow-glib\t\\\n+\t--library-path=$(ARROW_LIB_DIR)\t\t\t\t\\\n+\t--warn-all\t\t\t\t\t\t\\\n+\t--identifier-prefix=GParquet\t\t\t\t\\\n+\t--symbol-prefix=gparquet\n+if OS_MACOS\n+Parquet_1_0_gir_LIBS +=\t\t\t\t\\\n+\tarrow-glib\t\t\t\t\\\n+\tparquet-glib\n+Parquet_1_0_gir_SCANNERFLAGS +=\t\t\t\t\t\\\n+\t--no-libtool\t\t\t\t\t\t\\\n+\t--library-path=$(abs_top_builddir)/arrow-glib/.libs\t\\\n+\t--library-path=$(abs_builddir)/.libs\n+else\n+Parquet_1_0_gir_LIBS +=\t\t\t\t\t\\\n+\t$(abs_top_builddir)/arrow-glib/libarrow-glib.la\t\\\n+\tlibparquet-glib.la\n+endif\n+INTROSPECTION_GIRS += Parquet-1.0.gir\n+\n+girdir = $(datadir)/gir-1.0\n+gir_DATA = $(INTROSPECTION_GIRS)\n+\n+typelibdir = $(libdir)/girepository-1.0\n+typelib_DATA = $(INTROSPECTION_GIRS:.gir=.typelib)\n+\n+CLEANFILES +=\t\t\t\t\t\\\n+\t$(gir_DATA)\t\t\t\t\\\n+\t$(typelib_DATA)\n+endif\n+endif\ndiff --git a/c_glib/parquet-glib/arrow-file-reader.cpp b/c_glib/parquet-glib/arrow-file-reader.cpp\nnew file mode 100644\nindex 0000000000..07aa8295d0\n--- /dev/null\n+++ b/c_glib/parquet-glib/arrow-file-reader.cpp\n@@ -0,0 +1,263 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#ifdef HAVE_CONFIG_H\n+#  include <config.h>\n+#endif\n+\n+#include <arrow-glib/arrow-glib.hpp>\n+\n+#include <parquet-glib/arrow-file-reader.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: arrow-file-reader\n+ * @short_description: Arrow file reader class\n+ * @include: parquet-glib/parquet-glib.h\n+ *\n+ * #GParquetArrowFileReader is a class for reading Apache Parquet data\n+ * from file and returns them as Apache Arrow data.\n+ */\n+\n+typedef struct GParquetArrowFileReaderPrivate_ {\n+  parquet::arrow::FileReader *arrow_file_reader;\n+} GParquetArrowFileReaderPrivate;\n+\n+enum {\n+  PROP_0,\n+  PROP_ARROW_FILE_READER\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GParquetArrowFileReader,\n+                           gparquet_arrow_file_reader,\n+                           G_TYPE_OBJECT)\n+\n+#define GPARQUET_ARROW_FILE_READER_GET_PRIVATE(obj)     \\\n+  static_cast<GParquetArrowFileReaderPrivate *>(        \\\n+     gparquet_arrow_file_reader_get_instance_private(   \\\n+       GPARQUET_ARROW_FILE_READER(obj)))\n+\n+static void\n+gparquet_arrow_file_reader_finalize(GObject *object)\n+{\n+  auto priv = GPARQUET_ARROW_FILE_READER_GET_PRIVATE(object);\n+\n+  delete priv->arrow_file_reader;\n+\n+  G_OBJECT_CLASS(gparquet_arrow_file_reader_parent_class)->finalize(object);\n+}\n+\n+static void\n+gparquet_arrow_file_reader_set_property(GObject *object,\n+                                        guint prop_id,\n+                                        const GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  auto priv = GPARQUET_ARROW_FILE_READER_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ARROW_FILE_READER:\n+    priv->arrow_file_reader =\n+      static_cast<parquet::arrow::FileReader *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+gparquet_arrow_file_reader_get_property(GObject *object,\n+                                        guint prop_id,\n+                                        GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+gparquet_arrow_file_reader_init(GParquetArrowFileReader *object)\n+{\n+}\n+\n+static void\n+gparquet_arrow_file_reader_class_init(GParquetArrowFileReaderClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = gparquet_arrow_file_reader_finalize;\n+  gobject_class->set_property = gparquet_arrow_file_reader_set_property;\n+  gobject_class->get_property = gparquet_arrow_file_reader_get_property;\n+\n+  spec = g_param_spec_pointer(\"arrow-file-reader\",\n+                              \"ArrowFileReader\",\n+                              \"The raw std::shared<parquet::arrow::FileReader> *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ARROW_FILE_READER, spec);\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_new_arrow:\n+ * @source: Arrow source to be read.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (nullable): A newly created #GParquetArrowFileReader.\n+ *\n+ * Since: 0.11.0\n+ */\n+GParquetArrowFileReader *\n+gparquet_arrow_file_reader_new_arrow(GArrowSeekableInputStream *source,\n+                                     GError **error)\n+{\n+  auto arrow_random_access_file =\n+    garrow_seekable_input_stream_get_raw(source);\n+  auto arrow_memory_pool = arrow::default_memory_pool();\n+  std::unique_ptr<parquet::arrow::FileReader> parquet_arrow_file_reader;\n+  auto status = parquet::arrow::OpenFile(arrow_random_access_file,\n+                                         arrow_memory_pool,\n+                                         &parquet_arrow_file_reader);\n+  if (garrow_error_check(error,\n+                         status,\n+                         \"[parquet][arrow][file-reader][new-arrow]\")) {\n+    return gparquet_arrow_file_reader_new_raw(parquet_arrow_file_reader.release());\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_new_path:\n+ * @path: Path to be read.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (nullable): A newly created #GParquetArrowFileReader.\n+ *\n+ * Since: 0.11.0\n+ */\n+GParquetArrowFileReader *\n+gparquet_arrow_file_reader_new_path(const gchar *path,\n+                                    GError **error)\n+{\n+  std::shared_ptr<arrow::io::MemoryMappedFile> arrow_memory_mapped_file;\n+  auto status = arrow::io::MemoryMappedFile::Open(path,\n+                                                  ::arrow::io::FileMode::READ,\n+                                                  &arrow_memory_mapped_file);\n+  if (!garrow_error_check(error,\n+                          status,\n+                          \"[parquet][arrow][file-reader][new-path]\")) {\n+    return NULL;\n+  }\n+\n+  std::shared_ptr<arrow::io::RandomAccessFile> arrow_random_access_file =\n+    arrow_memory_mapped_file;\n+  auto arrow_memory_pool = arrow::default_memory_pool();\n+  std::unique_ptr<parquet::arrow::FileReader> parquet_arrow_file_reader;\n+  status = parquet::arrow::OpenFile(arrow_random_access_file,\n+                                    arrow_memory_pool,\n+                                    &parquet_arrow_file_reader);\n+  if (garrow_error_check(error,\n+                         status,\n+                         \"[parquet][arrow][file-reader][new-path]\")) {\n+    return gparquet_arrow_file_reader_new_raw(parquet_arrow_file_reader.release());\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_read_table:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full) (nullable): A read #GArrowTable.\n+ *\n+ * Since: 0.11.0\n+ */\n+GArrowTable *\n+gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n+                                      GError **error)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Table> arrow_table;\n+  auto status = parquet_arrow_file_reader->ReadTable(&arrow_table);\n+  if (garrow_error_check(error,\n+                         status,\n+                         \"[parquet][arrow][file-reader][read-table]\")) {\n+    return garrow_table_new_raw(&arrow_table);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_get_n_row_groups:\n+ * @reader: A #GParquetArrowFileReader.\n+ *\n+ * Returns: The number of row groups.\n+ *\n+ * Since: 0.11.0\n+ */\n+gint\n+gparquet_arrow_file_reader_get_n_row_groups(GParquetArrowFileReader *reader)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  return parquet_arrow_file_reader->num_row_groups();\n+}\n+\n+/**\n+ * gparquet_arrow_file_reader_use_threads:\n+ * @reader: A #GParquetArrowFileReader.\n+ * @use_threads: Whether use threads or not.\n+ *\n+ * Since: 0.11.0\n+ */\n+void\n+gparquet_arrow_file_reader_set_use_threads(GParquetArrowFileReader *reader,\n+                                           gboolean use_threads)\n+{\n+  auto parquet_arrow_file_reader = gparquet_arrow_file_reader_get_raw(reader);\n+  parquet_arrow_file_reader->set_use_threads(use_threads);\n+}\n+\n+G_END_DECLS\n+\n+GParquetArrowFileReader *\n+gparquet_arrow_file_reader_new_raw(parquet::arrow::FileReader *parquet_arrow_file_reader)\n+{\n+  auto arrow_file_reader =\n+    GPARQUET_ARROW_FILE_READER(g_object_new(GPARQUET_TYPE_ARROW_FILE_READER,\n+                                            \"arrow-file-reader\", parquet_arrow_file_reader,\n+                                            NULL));\n+  return arrow_file_reader;\n+}\n+\n+parquet::arrow::FileReader *\n+gparquet_arrow_file_reader_get_raw(GParquetArrowFileReader *arrow_file_reader)\n+{\n+  auto priv = GPARQUET_ARROW_FILE_READER_GET_PRIVATE(arrow_file_reader);\n+  return priv->arrow_file_reader;\n+}\ndiff --git a/c_glib/parquet-glib/arrow-file-reader.h b/c_glib/parquet-glib/arrow-file-reader.h\nnew file mode 100644\nindex 0000000000..5aa2aa62ab\n--- /dev/null\n+++ b/c_glib/parquet-glib/arrow-file-reader.h\n@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <arrow-glib/arrow-glib.h>\n+\n+G_BEGIN_DECLS\n+\n+#define GPARQUET_TYPE_ARROW_FILE_READER (gparquet_arrow_file_reader_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GParquetArrowFileReader,\n+                         gparquet_arrow_file_reader,\n+                         GPARQUET,\n+                         ARROW_FILE_READER,\n+                         GObject)\n+struct _GParquetArrowFileReaderClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+GParquetArrowFileReader *\n+gparquet_arrow_file_reader_new_arrow(GArrowSeekableInputStream *source,\n+                                     GError **error);\n+GParquetArrowFileReader *\n+gparquet_arrow_file_reader_new_path(const gchar *path,\n+                                    GError **error);\n+\n+GArrowTable *\n+gparquet_arrow_file_reader_read_table(GParquetArrowFileReader *reader,\n+                                      GError **error);\n+\n+gint\n+gparquet_arrow_file_reader_get_n_row_groups(GParquetArrowFileReader *reader);\n+\n+void\n+gparquet_arrow_file_reader_set_use_threads(GParquetArrowFileReader *reader,\n+                                           gboolean use_threads);\n+\n+G_END_DECLS\ndiff --git a/c_glib/parquet-glib/arrow-file-reader.hpp b/c_glib/parquet-glib/arrow-file-reader.hpp\nnew file mode 100644\nindex 0000000000..172dcccb0d\n--- /dev/null\n+++ b/c_glib/parquet-glib/arrow-file-reader.hpp\n@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <parquet/arrow/reader.h>\n+\n+#include <parquet-glib/arrow-file-reader.h>\n+\n+GParquetArrowFileReader *\n+gparquet_arrow_file_reader_new_raw(parquet::arrow::FileReader *parquet_arrow_file_reader);\n+parquet::arrow::FileReader *\n+gparquet_arrow_file_reader_get_raw(GParquetArrowFileReader *arrow_file_reader);\ndiff --git a/c_glib/parquet-glib/arrow-file-writer.cpp b/c_glib/parquet-glib/arrow-file-writer.cpp\nnew file mode 100644\nindex 0000000000..61567aa82d\n--- /dev/null\n+++ b/c_glib/parquet-glib/arrow-file-writer.cpp\n@@ -0,0 +1,265 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#ifdef HAVE_CONFIG_H\n+#  include <config.h>\n+#endif\n+\n+#include <arrow-glib/arrow-glib.hpp>\n+\n+#include <parquet-glib/arrow-file-writer.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: arrow-file-writer\n+ * @short_description: Arrow file writer class\n+ * @include: parquet-glib/parquet-glib.h\n+ *\n+ * #GParquetArrowFileWriter is a class for writer Apache Arrow data to\n+ * file as Apache Parquet format.\n+ */\n+\n+typedef struct GParquetArrowFileWriterPrivate_ {\n+  parquet::arrow::FileWriter *arrow_file_writer;\n+} GParquetArrowFileWriterPrivate;\n+\n+enum {\n+  PROP_0,\n+  PROP_ARROW_FILE_WRITER\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GParquetArrowFileWriter,\n+                           gparquet_arrow_file_writer,\n+                           G_TYPE_OBJECT)\n+\n+#define GPARQUET_ARROW_FILE_WRITER_GET_PRIVATE(obj)     \\\n+  static_cast<GParquetArrowFileWriterPrivate *>(        \\\n+     gparquet_arrow_file_writer_get_instance_private(   \\\n+       GPARQUET_ARROW_FILE_WRITER(obj)))\n+\n+static void\n+gparquet_arrow_file_writer_finalize(GObject *object)\n+{\n+  auto priv = GPARQUET_ARROW_FILE_WRITER_GET_PRIVATE(object);\n+\n+  delete priv->arrow_file_writer;\n+\n+  G_OBJECT_CLASS(gparquet_arrow_file_writer_parent_class)->finalize(object);\n+}\n+\n+static void\n+gparquet_arrow_file_writer_set_property(GObject *object,\n+                                        guint prop_id,\n+                                        const GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  auto priv = GPARQUET_ARROW_FILE_WRITER_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_ARROW_FILE_WRITER:\n+    priv->arrow_file_writer =\n+      static_cast<parquet::arrow::FileWriter *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+gparquet_arrow_file_writer_get_property(GObject *object,\n+                                        guint prop_id,\n+                                        GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+gparquet_arrow_file_writer_init(GParquetArrowFileWriter *object)\n+{\n+}\n+\n+static void\n+gparquet_arrow_file_writer_class_init(GParquetArrowFileWriterClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = gparquet_arrow_file_writer_finalize;\n+  gobject_class->set_property = gparquet_arrow_file_writer_set_property;\n+  gobject_class->get_property = gparquet_arrow_file_writer_get_property;\n+\n+  spec = g_param_spec_pointer(\"arrow-file-writer\",\n+                              \"ArrowFileWriter\",\n+                              \"The raw std::shared<parquet::arrow::FileWriter> *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ARROW_FILE_WRITER, spec);\n+}\n+\n+/**\n+ * gparquet_arrow_file_writer_new_arrow:\n+ * @schema: Arrow schema for written data.\n+ * @sink: Arrow output stream to be written.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (nullable): A newly created #GParquetArrowFileWriter.\n+ *\n+ * Since: 0.11.0\n+ */\n+GParquetArrowFileWriter *\n+gparquet_arrow_file_writer_new_arrow(GArrowSchema *schema,\n+                                     GArrowOutputStream *sink,\n+                                     GError **error)\n+{\n+  auto arrow_schema = garrow_schema_get_raw(schema).get();\n+  auto arrow_output_stream = garrow_output_stream_get_raw(sink);\n+  auto arrow_memory_pool = arrow::default_memory_pool();\n+  auto parquet_writer_properties = parquet::default_writer_properties();\n+  std::unique_ptr<parquet::arrow::FileWriter> parquet_arrow_file_writer;\n+  auto status = parquet::arrow::FileWriter::Open(*arrow_schema,\n+                                                 arrow_memory_pool,\n+                                                 arrow_output_stream,\n+                                                 parquet_writer_properties,\n+                                                 &parquet_arrow_file_writer);\n+  if (garrow_error_check(error,\n+                         status,\n+                         \"[parquet][arrow][file-writer][new-arrow]\")) {\n+    return gparquet_arrow_file_writer_new_raw(parquet_arrow_file_writer.release());\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_writer_new_path:\n+ * @schema: Arrow schema for written data.\n+ * @path: Path to be read.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (nullable): A newly created #GParquetArrowFileWriter.\n+ *\n+ * Since: 0.11.0\n+ */\n+GParquetArrowFileWriter *\n+gparquet_arrow_file_writer_new_path(GArrowSchema *schema,\n+                                    const gchar *path,\n+                                    GError **error)\n+{\n+  std::shared_ptr<arrow::io::FileOutputStream> arrow_file_output_stream;\n+  auto status = arrow::io::FileOutputStream::Open(path,\n+                                                  false,\n+                                                  &arrow_file_output_stream);\n+  if (!garrow_error_check(error,\n+                          status,\n+                          \"[parquet][arrow][file-writer][new-path]\")) {\n+    return NULL;\n+  }\n+\n+  auto arrow_schema = garrow_schema_get_raw(schema).get();\n+  std::shared_ptr<arrow::io::OutputStream> arrow_output_stream =\n+    arrow_file_output_stream;\n+  auto arrow_memory_pool = arrow::default_memory_pool();\n+  auto parquet_writer_properties = parquet::default_writer_properties();\n+  std::unique_ptr<parquet::arrow::FileWriter> parquet_arrow_file_writer;\n+  status = parquet::arrow::FileWriter::Open(*arrow_schema,\n+                                            arrow_memory_pool,\n+                                            arrow_output_stream,\n+                                            parquet_writer_properties,\n+                                            &parquet_arrow_file_writer);\n+  if (garrow_error_check(error,\n+                         status,\n+                         \"[parquet][arrow][file-writer][new-path]\")) {\n+    return gparquet_arrow_file_writer_new_raw(parquet_arrow_file_writer.release());\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * gparquet_arrow_file_writer_write_table:\n+ * @writer: A #GParquetArrowFileWriter.\n+ * @table: A table to be written.\n+ * @chunk_size: The max number of rows in a row group.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.11.0\n+ */\n+gboolean\n+gparquet_arrow_file_writer_write_table(GParquetArrowFileWriter *writer,\n+                                       GArrowTable *table,\n+                                       guint64 chunk_size,\n+                                       GError **error)\n+{\n+  auto parquet_arrow_file_writer = gparquet_arrow_file_writer_get_raw(writer);\n+  auto arrow_table = garrow_table_get_raw(table).get();\n+  auto status = parquet_arrow_file_writer->WriteTable(*arrow_table, chunk_size);\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[parquet][arrow][file-writer][write-table]\");\n+}\n+\n+/**\n+ * gparquet_arrow_file_writer_close:\n+ * @writer: A #GParquetArrowFileWriter.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.11.0\n+ */\n+gboolean\n+gparquet_arrow_file_writer_close(GParquetArrowFileWriter *writer,\n+                                 GError **error)\n+{\n+  auto parquet_arrow_file_writer = gparquet_arrow_file_writer_get_raw(writer);\n+  auto status = parquet_arrow_file_writer->Close();\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[parquet][arrow][file-writer][close]\");\n+}\n+\n+\n+G_END_DECLS\n+\n+GParquetArrowFileWriter *\n+gparquet_arrow_file_writer_new_raw(parquet::arrow::FileWriter *parquet_arrow_file_writer)\n+{\n+  auto arrow_file_writer =\n+    GPARQUET_ARROW_FILE_WRITER(g_object_new(GPARQUET_TYPE_ARROW_FILE_WRITER,\n+                                            \"arrow-file-writer\", parquet_arrow_file_writer,\n+                                            NULL));\n+  return arrow_file_writer;\n+}\n+\n+parquet::arrow::FileWriter *\n+gparquet_arrow_file_writer_get_raw(GParquetArrowFileWriter *arrow_file_writer)\n+{\n+  auto priv = GPARQUET_ARROW_FILE_WRITER_GET_PRIVATE(arrow_file_writer);\n+  return priv->arrow_file_writer;\n+}\ndiff --git a/c_glib/parquet-glib/arrow-file-writer.h b/c_glib/parquet-glib/arrow-file-writer.h\nnew file mode 100644\nindex 0000000000..99db4321bf\n--- /dev/null\n+++ b/c_glib/parquet-glib/arrow-file-writer.h\n@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <arrow-glib/arrow-glib.h>\n+\n+G_BEGIN_DECLS\n+\n+#define GPARQUET_TYPE_ARROW_FILE_WRITER (gparquet_arrow_file_writer_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GParquetArrowFileWriter,\n+                         gparquet_arrow_file_writer,\n+                         GPARQUET,\n+                         ARROW_FILE_WRITER,\n+                         GObject)\n+struct _GParquetArrowFileWriterClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+GParquetArrowFileWriter *\n+gparquet_arrow_file_writer_new_arrow(GArrowSchema *schema,\n+                                     GArrowOutputStream *sink,\n+                                     GError **error);\n+GParquetArrowFileWriter *\n+gparquet_arrow_file_writer_new_path(GArrowSchema *schema,\n+                                    const gchar *path,\n+                                    GError **error);\n+\n+gboolean\n+gparquet_arrow_file_writer_write_table(GParquetArrowFileWriter *writer,\n+                                       GArrowTable *table,\n+                                       guint64 chunk_size,\n+                                       GError **error);\n+\n+gboolean\n+gparquet_arrow_file_writer_close(GParquetArrowFileWriter *writer,\n+                                 GError **error);\n+\n+G_END_DECLS\ndiff --git a/c_glib/parquet-glib/arrow-file-writer.hpp b/c_glib/parquet-glib/arrow-file-writer.hpp\nnew file mode 100644\nindex 0000000000..866d3f990b\n--- /dev/null\n+++ b/c_glib/parquet-glib/arrow-file-writer.hpp\n@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <parquet/arrow/writer.h>\n+\n+#include <parquet-glib/arrow-file-writer.h>\n+\n+GParquetArrowFileWriter *\n+gparquet_arrow_file_writer_new_raw(parquet::arrow::FileWriter *parquet_arrow_file_writer);\n+parquet::arrow::FileWriter *\n+gparquet_arrow_file_writer_get_raw(GParquetArrowFileWriter *arrow_file_writer);\ndiff --git a/c_glib/parquet-glib/meson.build b/c_glib/parquet-glib/meson.build\nnew file mode 100644\nindex 0000000000..afa6d210a1\n--- /dev/null\n+++ b/c_glib/parquet-glib/meson.build\n@@ -0,0 +1,81 @@\n+# -*- indent-tabs-mode: nil -*-\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+project_name = 'parquet-glib'\n+\n+sources = files(\n+  'arrow-file-reader.cpp',\n+  'arrow-file-writer.cpp',\n+)\n+\n+c_headers = files(\n+  'arrow-file-reader.h',\n+  'arrow-file-writer.h',\n+  'parquet-glib.h',\n+)\n+\n+cpp_headers = files(\n+  'arrow-file-reader.hpp',\n+  'arrow-file-writer.hpp',\n+  'parquet-glib.hpp',\n+)\n+\n+headers = c_headers + cpp_headers\n+install_headers(headers, subdir: project_name)\n+\n+\n+dependencies = [\n+  arrow,\n+  parquet,\n+  arrow_glib,\n+]\n+libparquet_glib = library('parquet-glib',\n+                          sources: sources,\n+                          install: true,\n+                          dependencies: dependencies,\n+                          include_directories: base_include_directories,\n+                          soversion: so_version,\n+                          version: library_version)\n+parquet_glib = declare_dependency(link_with: libparquet_glib,\n+                                  include_directories: base_include_directories,\n+                                  dependencies: dependencies)\n+\n+pkgconfig.generate(filebase: project_name,\n+                   name: 'Apache Parquet GLib',\n+                   description: 'C API for Apache Parquet based on GLib',\n+                   version: version,\n+                   requires: ['parquet', 'arrow-glib'],\n+                   libraries: [libparquet_glib])\n+\n+gnome.generate_gir(libparquet_glib,\n+                   dependencies: declare_dependency(sources: arrow_glib_gir),\n+                   sources: sources + c_headers,\n+                   namespace: 'Parquet',\n+                   nsversion: api_version,\n+                   identifier_prefix: 'GParquet',\n+                   symbol_prefix: 'gparquet',\n+                   export_packages: 'parquet-glib',\n+                   includes: [\n+\t\t     'Arrow-1.0',\n+                   ],\n+                   install: true,\n+                   extra_args: [\n+\t\t     '--warn-all',\n+\t\t     '--include-uninstalled=./arrow-glib/Arrow-1.0.gir',\n+                   ])\ndiff --git a/c_glib/parquet-glib/parquet-glib.h b/c_glib/parquet-glib/parquet-glib.h\nnew file mode 100644\nindex 0000000000..6ae0f7e8fe\n--- /dev/null\n+++ b/c_glib/parquet-glib/parquet-glib.h\n@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <parquet-glib/arrow-file-reader.h>\n+#include <parquet-glib/arrow-file-writer.h>\ndiff --git a/c_glib/parquet-glib/parquet-glib.hpp b/c_glib/parquet-glib/parquet-glib.hpp\nnew file mode 100644\nindex 0000000000..988e715a2e\n--- /dev/null\n+++ b/c_glib/parquet-glib/parquet-glib.hpp\n@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <parquet-glib/parquet-glib.h>\n+\n+#include <parquet-glib/arrow-file-reader.hpp>\n+#include <parquet-glib/arrow-file-writer.hpp>\ndiff --git a/c_glib/parquet-glib/parquet-glib.pc.in b/c_glib/parquet-glib/parquet-glib.pc.in\nnew file mode 100644\nindex 0000000000..81559f1bce\n--- /dev/null\n+++ b/c_glib/parquet-glib/parquet-glib.pc.in\n@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: Apache Parquet GLib\n+Description: C API for Apache Parquet based on GLib\n+Version: @VERSION@\n+Libs: -L${libdir} -lparquet-glib\n+Cflags: -I${includedir}\n+Requires: arrow-glib\ndiff --git a/c_glib/test/parquet/test-arrow.rb b/c_glib/test/parquet/test-arrow.rb\nnew file mode 100644\nindex 0000000000..de021df438\n--- /dev/null\n+++ b/c_glib/test/parquet/test-arrow.rb\n@@ -0,0 +1,64 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestParquetArrow < Test::Unit::TestCase\n+  include Helper::Buildable\n+\n+  def setup\n+    omit(\"Parquet is required\") unless defined?(::Parquet)\n+  end\n+\n+  def test_read_write\n+    tempfile = Tempfile.open([\"data\", \".parquet\"])\n+\n+    values = [true, nil, false, true]\n+    chunk_size = 2\n+\n+    field = Arrow::Field.new(\"enabled\", Arrow::BooleanDataType.new)\n+    schema = Arrow::Schema.new([field])\n+    writer = Parquet::ArrowFileWriter.new(schema, tempfile.path)\n+    begin\n+      columns = [\n+        Arrow::Column.new(field, build_boolean_array(values)),\n+      ]\n+      table = Arrow::Table.new(schema, columns)\n+      writer.write_table(table, chunk_size)\n+    ensure\n+      writer.close\n+    end\n+\n+    reader = Parquet::ArrowFileReader.new(tempfile.path)\n+    reader.use_threads = true\n+    assert_equal(chunk_size, reader.n_row_groups)\n+    table = reader.read_table\n+    table_data = table.n_columns.times.collect do |i|\n+      column = table.get_column(i)\n+      data = []\n+      column.data.chunks.each do |chunk|\n+        chunk.length.times do |j|\n+          if chunk.null?(j)\n+            data << nil\n+          else\n+            data << chunk.get_value(j)\n+          end\n+        end\n+      end\n+      [column.name, data]\n+    end\n+    assert_equal([[\"enabled\", values]], table_data)\n+  end\n+end\ndiff --git a/c_glib/test/run-test.rb b/c_glib/test/run-test.rb\nindex 366b08395d..b317335cdc 100755\n--- a/c_glib/test/run-test.rb\n+++ b/c_glib/test/run-test.rb\n@@ -42,6 +42,11 @@ def initialize(data)\n rescue GObjectIntrospection::RepositoryError::TypelibNotFound\n end\n \n+begin\n+  Parquet = GI.load(\"Parquet\")\n+rescue GObjectIntrospection::RepositoryError::TypelibNotFound\n+end\n+\n require \"rbconfig\"\n require \"tempfile\"\n require_relative \"helper/buildable\"\ndiff --git a/c_glib/test/run-test.sh b/c_glib/test/run-test.sh\nindex 9abd03540f..8fbed6fb09 100755\n--- a/c_glib/test/run-test.sh\n+++ b/c_glib/test/run-test.sh\n@@ -20,7 +20,7 @@\n test_dir=\"$(cd $(dirname $0); pwd)\"\n build_dir=\"$(cd .; pwd)\"\n \n-modules=\"arrow-glib arrow-gpu-glib\"\n+modules=\"arrow-glib arrow-gpu-glib parquet-glib\"\n \n for module in ${modules}; do\n   module_build_dir=\"${build_dir}/${module}\"\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-01T21:30:28.163+0000",
                    "updated": "2018-10-01T21:30:28.163+0000",
                    "started": "2018-10-01T21:30:28.162+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "150181",
                    "issueId": "13188307"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 2400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@692b47c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19663b23[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21aa8cd5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@93d14e0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@746f1b91[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1ef6f3f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@745687f3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@152d078d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1992352a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@637e27b0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23d74d33[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5e3b37ab[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 2400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 01 21:30:20 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-01T21:30:20.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3360/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-09-29T09:18:17.000+0000",
        "updated": "2018-10-01T21:30:28.000+0000",
        "timeoriginalestimate": null,
        "description": "This is undergoing IP clearance at the moment",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 2400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Import Parquet bindings",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188307/comment/16634659",
                    "id": "16634659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2622\n[https://github.com/apache/arrow/pull/2622]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-01T21:30:20.867+0000",
                    "updated": "2018-10-01T21:30:20.867+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yn0v:",
        "customfield_12314139": null
    }
}