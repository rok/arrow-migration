{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13480298",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298",
    "key": "ARROW-17631",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12647349",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12647349",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13480973",
                    "key": "SPARK-40402",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480973",
                    "fields": {
                        "summary": "StructType level metadata ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=igor.suhorukov",
            "name": "igor.suhorukov",
            "key": "JIRAUSER293905",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Igor Suhorukov",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=igor.suhorukov",
            "name": "igor.suhorukov",
            "key": "JIRAUSER293905",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Igor Suhorukov",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=igor.suhorukov",
            "name": "igor.suhorukov",
            "key": "JIRAUSER293905",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Igor Suhorukov",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17631/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807311",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#issuecomment-1241681205\n\n   <!--\n     Licensed to the Apache Software Foundation (ASF) under one\n     or more contributor license agreements.  See the NOTICE file\n     distributed with this work for additional information\n     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n   \n       http://www.apache.org/licenses/LICENSE-2.0\n   \n     Unless required by applicable law or agreed to in writing,\n     software distributed under the License is distributed on an\n     \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     KIND, either express or implied.  See the License for the\n     specific language governing permissions and limitations\n     under the License.\n   -->\n   \n   Thanks for opening a pull request!\n   \n   If this is not a [minor PR](https://github.com/apache/arrow/blob/master/CONTRIBUTING.md#Minor-Fixes). Could you open an issue for this pull request on JIRA? https://issues.apache.org/jira/browse/ARROW\n   \n   Opening JIRAs ahead of time contributes to the [Openness](http://theapacheway.com/open/#:~:text=Openness%20allows%20new%20users%20the,must%20happen%20in%20the%20open.) of the Apache Arrow project.\n   \n   Then could you also rename pull request title in the following format?\n   \n       ARROW-${JIRA_ID}: [${COMPONENT}] ${SUMMARY}\n   \n   or\n   \n       MINOR: [${COMPONENT}] ${SUMMARY}\n   \n   See also:\n   \n     * [Other pull requests](https://github.com/apache/arrow/pulls/)\n     * [Contribution Guidelines - How to contribute patches](https://arrow.apache.org/docs/developers/contributing.html#how-to-contribute-patches)\n   \n\n\n",
                    "created": "2022-09-09T08:40:44.078+0000",
                    "updated": "2022-09-09T08:40:44.078+0000",
                    "started": "2022-09-09T08:40:44.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807311",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#issuecomment-1241689934\n\n   https://issues.apache.org/jira/browse/ARROW-17631\n\n\n",
                    "created": "2022-09-09T08:48:42.716+0000",
                    "updated": "2022-09-09T08:48:42.716+0000",
                    "started": "2022-09-09T08:48:42.716+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807315",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#issuecomment-1241689957\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-09-09T08:48:44.429+0000",
                    "updated": "2022-09-09T08:48:44.429+0000",
                    "started": "2022-09-09T08:48:44.429+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807316",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807420",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#discussion_r967105833\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/Constants.java:\n##########\n@@ -27,5 +27,6 @@ private Constants() {}\n   public static final String SQL_TABLE_NAME_KEY = \"SQL_TABLE_NAME\";\n   public static final String SQL_COLUMN_NAME_KEY = \"SQL_COLUMN_NAME\";\n   public static final String SQL_TYPE_KEY = \"SQL_TYPE\";\n+  public static final String COMMENT = \"comment\";\n\nReview Comment:\n   Also, since the JDBC name for this is REMARKS, should we stay consistent with that?\n\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowCommentMetadataTest.java:\n##########\n@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.arrow.vector.util.ObjectMapperFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+public class JdbcToArrowCommentMetadataTest {\n+\n+  private final ObjectWriter schemaSerializer = ObjectMapperFactory.newObjectMapper().writerWithDefaultPrettyPrinter();\n+  private Connection conn = null;\n+\n+  /**\n+   * This method creates Connection object and DB table and also populate data into table for test.\n+   *\n+   * @throws SQLException on error\n+   * @throws ClassNotFoundException on error\n+   */\n+  @Before\n+  public void setUp() throws SQLException, ClassNotFoundException {\n+    String url = \"jdbc:h2:mem:JdbcToArrowTest?characterEncoding=UTF-8;INIT=runscript from 'classpath:/h2/comment.sql'\";\n+    String driver = \"org.h2.Driver\";\n+    Class.forName(driver);\n+    conn = DriverManager.getConnection(url);\n+  }\n+\n+  @After\n+  public void tearDown() throws SQLException {\n+    if (conn != null) {\n+      conn.close();\n+      conn = null;\n+    }\n+  }\n+\n+  @Test\n+  public void schemaComment() throws Exception {\n+    boolean includeMetadata = false;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithComments.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  @Test\n+  public void schemaCommentWithDatabaseMetadata() throws Exception {\n+    boolean includeMetadata = true;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithCommentsAndJdbcMeta.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  private Schema getSchemaWithCommentFromQuery(boolean includeMetadata) throws SQLException {\n+    DatabaseMetaData metaData = conn.getMetaData();\n+    try (Statement statement = conn.createStatement()) {\n+      try (ResultSet resultSet = statement.executeQuery(\"select * from table1\")) {\n+        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+        Map<Integer, String> columnCommentByColumnIndex = getColumnComments(metaData, resultSetMetaData);\n+\n+        String tableName = getTableNameFromResultSetMetaData(resultSetMetaData);\n+        String tableComment = getTableComment(metaData, tableName);\n+        JdbcToArrowConfig config = new JdbcToArrowConfigBuilder()\n+                .setAllocator(new RootAllocator()).setSchemaComment(tableComment)\n+                .setColumnCommentByColumnIndex(columnCommentByColumnIndex).setIncludeMetadata(includeMetadata).build();\n+        return JdbcToArrowUtils.jdbcToArrowSchema(resultSetMetaData, config);\n\nReview Comment:\n   Ah, for the other metadata, this method automatically extracts the metadata values and adds them here. But for REMARKS, it's non-trivial to extract it from the result set so it probably shouldn't be done automatically.\r\n   \r\n   At this point, I wonder if the API shouldn't just be: allow specifying extra metadata to attach to the schema and to each column, instead of special casing a single metadata value? \n\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/Constants.java:\n##########\n@@ -27,5 +27,6 @@ private Constants() {}\n   public static final String SQL_TABLE_NAME_KEY = \"SQL_TABLE_NAME\";\n   public static final String SQL_COLUMN_NAME_KEY = \"SQL_COLUMN_NAME\";\n   public static final String SQL_TYPE_KEY = \"SQL_TYPE\";\n+  public static final String COMMENT = \"comment\";\n\nReview Comment:\n   I think this should have the `SQL_` prefix (in both name and value) for consistency with the other constants\n\n\n\n",
                    "created": "2022-09-09T14:02:17.389+0000",
                    "updated": "2022-09-09T14:02:17.389+0000",
                    "started": "2022-09-09T14:02:17.389+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807420",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807487",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on code in PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#discussion_r967244098\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/Constants.java:\n##########\n@@ -27,5 +27,6 @@ private Constants() {}\n   public static final String SQL_TABLE_NAME_KEY = \"SQL_TABLE_NAME\";\n   public static final String SQL_COLUMN_NAME_KEY = \"SQL_COLUMN_NAME\";\n   public static final String SQL_TYPE_KEY = \"SQL_TYPE\";\n+  public static final String COMMENT = \"comment\";\n\nReview Comment:\n   I prefer \"comment\" as it much more easy to don't introduce new names for de facto interoperability with Apache Spark https://github.com/apache/spark/blob/e83aedd0f072ce18d5542b61eb40e2df1b83bb50/sql/catalyst/src/main/scala/org/apache/spark/sql/types/StructField.scala#L85 \r\n   Roundtrip conversion with org.apache.spark.sql.types.StructType/StructField and huge existing ecosystem around (AWS Glue etc)\r\n     \n\n\n\n",
                    "created": "2022-09-09T16:10:36.299+0000",
                    "updated": "2022-09-09T16:10:36.299+0000",
                    "started": "2022-09-09T16:10:36.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807487",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807490",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on code in PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#discussion_r967245996\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/Constants.java:\n##########\n@@ -27,5 +27,6 @@ private Constants() {}\n   public static final String SQL_TABLE_NAME_KEY = \"SQL_TABLE_NAME\";\n   public static final String SQL_COLUMN_NAME_KEY = \"SQL_COLUMN_NAME\";\n   public static final String SQL_TYPE_KEY = \"SQL_TYPE\";\n+  public static final String COMMENT = \"comment\";\n\nReview Comment:\n   >>Also, since the JDBC name for this is REMARKS, should we stay consistent with that?\r\n   No, I not think so as it internal JDBC naming, but Arrow target following Spark/Hadoop but not JDBC\n\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/Constants.java:\n##########\n@@ -27,5 +27,6 @@ private Constants() {}\n   public static final String SQL_TABLE_NAME_KEY = \"SQL_TABLE_NAME\";\n   public static final String SQL_COLUMN_NAME_KEY = \"SQL_COLUMN_NAME\";\n   public static final String SQL_TYPE_KEY = \"SQL_TYPE\";\n+  public static final String COMMENT = \"comment\";\n\nReview Comment:\n   >Also, since the JDBC name for this is REMARKS, should we stay consistent with that?\r\n   \r\n   No, I not think so as it internal JDBC naming, but Arrow target following Spark/Hadoop but not JDBC\n\n\n\n",
                    "created": "2022-09-09T16:13:01.615+0000",
                    "updated": "2022-09-09T16:13:01.615+0000",
                    "started": "2022-09-09T16:13:01.615+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807490",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807491",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#discussion_r967247379\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/Constants.java:\n##########\n@@ -27,5 +27,6 @@ private Constants() {}\n   public static final String SQL_TABLE_NAME_KEY = \"SQL_TABLE_NAME\";\n   public static final String SQL_COLUMN_NAME_KEY = \"SQL_COLUMN_NAME\";\n   public static final String SQL_TYPE_KEY = \"SQL_TYPE\";\n+  public static final String COMMENT = \"comment\";\n\nReview Comment:\n   Ah, if this is for spark compatibility that's good to know.\r\n   \r\n   That said - I think my comment below makes more sense then, what do you think? We should just let you add whatever metadata instead of hardcoding particular fields\n\n\n\n",
                    "created": "2022-09-09T16:14:41.843+0000",
                    "updated": "2022-09-09T16:14:41.843+0000",
                    "started": "2022-09-09T16:14:41.843+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807491",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on code in PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#discussion_r967250982\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowCommentMetadataTest.java:\n##########\n@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.arrow.vector.util.ObjectMapperFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+public class JdbcToArrowCommentMetadataTest {\n+\n+  private final ObjectWriter schemaSerializer = ObjectMapperFactory.newObjectMapper().writerWithDefaultPrettyPrinter();\n+  private Connection conn = null;\n+\n+  /**\n+   * This method creates Connection object and DB table and also populate data into table for test.\n+   *\n+   * @throws SQLException on error\n+   * @throws ClassNotFoundException on error\n+   */\n+  @Before\n+  public void setUp() throws SQLException, ClassNotFoundException {\n+    String url = \"jdbc:h2:mem:JdbcToArrowTest?characterEncoding=UTF-8;INIT=runscript from 'classpath:/h2/comment.sql'\";\n+    String driver = \"org.h2.Driver\";\n+    Class.forName(driver);\n+    conn = DriverManager.getConnection(url);\n+  }\n+\n+  @After\n+  public void tearDown() throws SQLException {\n+    if (conn != null) {\n+      conn.close();\n+      conn = null;\n+    }\n+  }\n+\n+  @Test\n+  public void schemaComment() throws Exception {\n+    boolean includeMetadata = false;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithComments.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  @Test\n+  public void schemaCommentWithDatabaseMetadata() throws Exception {\n+    boolean includeMetadata = true;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithCommentsAndJdbcMeta.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  private Schema getSchemaWithCommentFromQuery(boolean includeMetadata) throws SQLException {\n+    DatabaseMetaData metaData = conn.getMetaData();\n+    try (Statement statement = conn.createStatement()) {\n+      try (ResultSet resultSet = statement.executeQuery(\"select * from table1\")) {\n+        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+        Map<Integer, String> columnCommentByColumnIndex = getColumnComments(metaData, resultSetMetaData);\n+\n+        String tableName = getTableNameFromResultSetMetaData(resultSetMetaData);\n+        String tableComment = getTableComment(metaData, tableName);\n+        JdbcToArrowConfig config = new JdbcToArrowConfigBuilder()\n+                .setAllocator(new RootAllocator()).setSchemaComment(tableComment)\n+                .setColumnCommentByColumnIndex(columnCommentByColumnIndex).setIncludeMetadata(includeMetadata).build();\n+        return JdbcToArrowUtils.jdbcToArrowSchema(resultSetMetaData, config);\n\nReview Comment:\n   Good idea, @lidavidm!\r\n   Do you mean change new JdbcToArrowConfig fields to :\r\n     private final Map<String,String> schemaMetadata;\r\n     private final Map<Integer, Map<String,String>> columnMetadataByColumnIndex;\r\n   \r\n   ? To allow user provide any additional metadata for schema/column level? For me such approach is super rational - it allows propagate additional metadata for example SRID related to geometry /Spatial Reference Systems\n\n\n\n",
                    "created": "2022-09-09T16:19:02.544+0000",
                    "updated": "2022-09-09T16:19:02.544+0000",
                    "started": "2022-09-09T16:19:02.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807494",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807495",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#discussion_r967252055\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowCommentMetadataTest.java:\n##########\n@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.arrow.vector.util.ObjectMapperFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+public class JdbcToArrowCommentMetadataTest {\n+\n+  private final ObjectWriter schemaSerializer = ObjectMapperFactory.newObjectMapper().writerWithDefaultPrettyPrinter();\n+  private Connection conn = null;\n+\n+  /**\n+   * This method creates Connection object and DB table and also populate data into table for test.\n+   *\n+   * @throws SQLException on error\n+   * @throws ClassNotFoundException on error\n+   */\n+  @Before\n+  public void setUp() throws SQLException, ClassNotFoundException {\n+    String url = \"jdbc:h2:mem:JdbcToArrowTest?characterEncoding=UTF-8;INIT=runscript from 'classpath:/h2/comment.sql'\";\n+    String driver = \"org.h2.Driver\";\n+    Class.forName(driver);\n+    conn = DriverManager.getConnection(url);\n+  }\n+\n+  @After\n+  public void tearDown() throws SQLException {\n+    if (conn != null) {\n+      conn.close();\n+      conn = null;\n+    }\n+  }\n+\n+  @Test\n+  public void schemaComment() throws Exception {\n+    boolean includeMetadata = false;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithComments.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  @Test\n+  public void schemaCommentWithDatabaseMetadata() throws Exception {\n+    boolean includeMetadata = true;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithCommentsAndJdbcMeta.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  private Schema getSchemaWithCommentFromQuery(boolean includeMetadata) throws SQLException {\n+    DatabaseMetaData metaData = conn.getMetaData();\n+    try (Statement statement = conn.createStatement()) {\n+      try (ResultSet resultSet = statement.executeQuery(\"select * from table1\")) {\n+        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+        Map<Integer, String> columnCommentByColumnIndex = getColumnComments(metaData, resultSetMetaData);\n+\n+        String tableName = getTableNameFromResultSetMetaData(resultSetMetaData);\n+        String tableComment = getTableComment(metaData, tableName);\n+        JdbcToArrowConfig config = new JdbcToArrowConfigBuilder()\n+                .setAllocator(new RootAllocator()).setSchemaComment(tableComment)\n+                .setColumnCommentByColumnIndex(columnCommentByColumnIndex).setIncludeMetadata(includeMetadata).build();\n+        return JdbcToArrowUtils.jdbcToArrowSchema(resultSetMetaData, config);\n\nReview Comment:\n   Yes! That way you don't have to submit a new PR every time there's new metadata :)\n\n\n\n",
                    "created": "2022-09-09T16:20:22.408+0000",
                    "updated": "2022-09-09T16:20:22.408+0000",
                    "started": "2022-09-09T16:20:22.408+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807495",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on code in PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#discussion_r967250982\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowCommentMetadataTest.java:\n##########\n@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.arrow.vector.util.ObjectMapperFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+public class JdbcToArrowCommentMetadataTest {\n+\n+  private final ObjectWriter schemaSerializer = ObjectMapperFactory.newObjectMapper().writerWithDefaultPrettyPrinter();\n+  private Connection conn = null;\n+\n+  /**\n+   * This method creates Connection object and DB table and also populate data into table for test.\n+   *\n+   * @throws SQLException on error\n+   * @throws ClassNotFoundException on error\n+   */\n+  @Before\n+  public void setUp() throws SQLException, ClassNotFoundException {\n+    String url = \"jdbc:h2:mem:JdbcToArrowTest?characterEncoding=UTF-8;INIT=runscript from 'classpath:/h2/comment.sql'\";\n+    String driver = \"org.h2.Driver\";\n+    Class.forName(driver);\n+    conn = DriverManager.getConnection(url);\n+  }\n+\n+  @After\n+  public void tearDown() throws SQLException {\n+    if (conn != null) {\n+      conn.close();\n+      conn = null;\n+    }\n+  }\n+\n+  @Test\n+  public void schemaComment() throws Exception {\n+    boolean includeMetadata = false;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithComments.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  @Test\n+  public void schemaCommentWithDatabaseMetadata() throws Exception {\n+    boolean includeMetadata = true;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithCommentsAndJdbcMeta.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  private Schema getSchemaWithCommentFromQuery(boolean includeMetadata) throws SQLException {\n+    DatabaseMetaData metaData = conn.getMetaData();\n+    try (Statement statement = conn.createStatement()) {\n+      try (ResultSet resultSet = statement.executeQuery(\"select * from table1\")) {\n+        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+        Map<Integer, String> columnCommentByColumnIndex = getColumnComments(metaData, resultSetMetaData);\n+\n+        String tableName = getTableNameFromResultSetMetaData(resultSetMetaData);\n+        String tableComment = getTableComment(metaData, tableName);\n+        JdbcToArrowConfig config = new JdbcToArrowConfigBuilder()\n+                .setAllocator(new RootAllocator()).setSchemaComment(tableComment)\n+                .setColumnCommentByColumnIndex(columnCommentByColumnIndex).setIncludeMetadata(includeMetadata).build();\n+        return JdbcToArrowUtils.jdbcToArrowSchema(resultSetMetaData, config);\n\nReview Comment:\n   Good idea, @lidavidm!\r\n   Do you mean change new JdbcToArrowConfig fields to :\r\n     private final Map<String,String> schemaMetadata;\r\n     private final Map<Integer, Map<String,String>> columnMetadataByColumnIndex;\r\n   \r\n   ? To allow user provide any additional metadata for schema/column level? For me such approach is super rational - it allows propagate additional metadata for example SRID related to geometry /Spatial Reference Systems\r\n   It also allow to remove hard coded name String COMMENT = \"comment\"  from source and move naming responsibility to developer side\n\n\n\n",
                    "created": "2022-09-09T16:20:47.436+0000",
                    "updated": "2022-09-09T16:20:47.436+0000",
                    "started": "2022-09-09T16:20:47.435+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807497",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#discussion_r967252660\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowCommentMetadataTest.java:\n##########\n@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.arrow.vector.util.ObjectMapperFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+public class JdbcToArrowCommentMetadataTest {\n+\n+  private final ObjectWriter schemaSerializer = ObjectMapperFactory.newObjectMapper().writerWithDefaultPrettyPrinter();\n+  private Connection conn = null;\n+\n+  /**\n+   * This method creates Connection object and DB table and also populate data into table for test.\n+   *\n+   * @throws SQLException on error\n+   * @throws ClassNotFoundException on error\n+   */\n+  @Before\n+  public void setUp() throws SQLException, ClassNotFoundException {\n+    String url = \"jdbc:h2:mem:JdbcToArrowTest?characterEncoding=UTF-8;INIT=runscript from 'classpath:/h2/comment.sql'\";\n+    String driver = \"org.h2.Driver\";\n+    Class.forName(driver);\n+    conn = DriverManager.getConnection(url);\n+  }\n+\n+  @After\n+  public void tearDown() throws SQLException {\n+    if (conn != null) {\n+      conn.close();\n+      conn = null;\n+    }\n+  }\n+\n+  @Test\n+  public void schemaComment() throws Exception {\n+    boolean includeMetadata = false;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithComments.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  @Test\n+  public void schemaCommentWithDatabaseMetadata() throws Exception {\n+    boolean includeMetadata = true;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithCommentsAndJdbcMeta.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  private Schema getSchemaWithCommentFromQuery(boolean includeMetadata) throws SQLException {\n+    DatabaseMetaData metaData = conn.getMetaData();\n+    try (Statement statement = conn.createStatement()) {\n+      try (ResultSet resultSet = statement.executeQuery(\"select * from table1\")) {\n+        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+        Map<Integer, String> columnCommentByColumnIndex = getColumnComments(metaData, resultSetMetaData);\n+\n+        String tableName = getTableNameFromResultSetMetaData(resultSetMetaData);\n+        String tableComment = getTableComment(metaData, tableName);\n+        JdbcToArrowConfig config = new JdbcToArrowConfigBuilder()\n+                .setAllocator(new RootAllocator()).setSchemaComment(tableComment)\n+                .setColumnCommentByColumnIndex(columnCommentByColumnIndex).setIncludeMetadata(includeMetadata).build();\n+        return JdbcToArrowUtils.jdbcToArrowSchema(resultSetMetaData, config);\n\nReview Comment:\n   (Of course, you could probably add the metadata during reading as well\u2026but since we already offer some options, I guess we may as well have a formal API.)\n\n\n\n",
                    "created": "2022-09-09T16:20:57.427+0000",
                    "updated": "2022-09-09T16:20:57.427+0000",
                    "started": "2022-09-09T16:20:57.427+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807498",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on code in PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#discussion_r967254924\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowCommentMetadataTest.java:\n##########\n@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.arrow.vector.util.ObjectMapperFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+public class JdbcToArrowCommentMetadataTest {\n+\n+  private final ObjectWriter schemaSerializer = ObjectMapperFactory.newObjectMapper().writerWithDefaultPrettyPrinter();\n+  private Connection conn = null;\n+\n+  /**\n+   * This method creates Connection object and DB table and also populate data into table for test.\n+   *\n+   * @throws SQLException on error\n+   * @throws ClassNotFoundException on error\n+   */\n+  @Before\n+  public void setUp() throws SQLException, ClassNotFoundException {\n+    String url = \"jdbc:h2:mem:JdbcToArrowTest?characterEncoding=UTF-8;INIT=runscript from 'classpath:/h2/comment.sql'\";\n+    String driver = \"org.h2.Driver\";\n+    Class.forName(driver);\n+    conn = DriverManager.getConnection(url);\n+  }\n+\n+  @After\n+  public void tearDown() throws SQLException {\n+    if (conn != null) {\n+      conn.close();\n+      conn = null;\n+    }\n+  }\n+\n+  @Test\n+  public void schemaComment() throws Exception {\n+    boolean includeMetadata = false;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithComments.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  @Test\n+  public void schemaCommentWithDatabaseMetadata() throws Exception {\n+    boolean includeMetadata = true;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithCommentsAndJdbcMeta.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  private Schema getSchemaWithCommentFromQuery(boolean includeMetadata) throws SQLException {\n+    DatabaseMetaData metaData = conn.getMetaData();\n+    try (Statement statement = conn.createStatement()) {\n+      try (ResultSet resultSet = statement.executeQuery(\"select * from table1\")) {\n+        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+        Map<Integer, String> columnCommentByColumnIndex = getColumnComments(metaData, resultSetMetaData);\n+\n+        String tableName = getTableNameFromResultSetMetaData(resultSetMetaData);\n+        String tableComment = getTableComment(metaData, tableName);\n+        JdbcToArrowConfig config = new JdbcToArrowConfigBuilder()\n+                .setAllocator(new RootAllocator()).setSchemaComment(tableComment)\n+                .setColumnCommentByColumnIndex(columnCommentByColumnIndex).setIncludeMetadata(includeMetadata).build();\n+        return JdbcToArrowUtils.jdbcToArrowSchema(resultSetMetaData, config);\n\nReview Comment:\n   Cool, so I'll change implementation to more common approach but test case will be the same with \"comment\". Is it OK for you? \r\n   For me test - like code snippets for developers, somebody can implement complex DB metadata gathering base on the same idea  \n\n\n\n",
                    "created": "2022-09-09T16:23:22.640+0000",
                    "updated": "2022-09-09T16:23:22.640+0000",
                    "started": "2022-09-09T16:23:22.639+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807499",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#discussion_r967255845\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowCommentMetadataTest.java:\n##########\n@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.arrow.vector.util.ObjectMapperFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+public class JdbcToArrowCommentMetadataTest {\n+\n+  private final ObjectWriter schemaSerializer = ObjectMapperFactory.newObjectMapper().writerWithDefaultPrettyPrinter();\n+  private Connection conn = null;\n+\n+  /**\n+   * This method creates Connection object and DB table and also populate data into table for test.\n+   *\n+   * @throws SQLException on error\n+   * @throws ClassNotFoundException on error\n+   */\n+  @Before\n+  public void setUp() throws SQLException, ClassNotFoundException {\n+    String url = \"jdbc:h2:mem:JdbcToArrowTest?characterEncoding=UTF-8;INIT=runscript from 'classpath:/h2/comment.sql'\";\n+    String driver = \"org.h2.Driver\";\n+    Class.forName(driver);\n+    conn = DriverManager.getConnection(url);\n+  }\n+\n+  @After\n+  public void tearDown() throws SQLException {\n+    if (conn != null) {\n+      conn.close();\n+      conn = null;\n+    }\n+  }\n+\n+  @Test\n+  public void schemaComment() throws Exception {\n+    boolean includeMetadata = false;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithComments.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  @Test\n+  public void schemaCommentWithDatabaseMetadata() throws Exception {\n+    boolean includeMetadata = true;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithCommentsAndJdbcMeta.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  private Schema getSchemaWithCommentFromQuery(boolean includeMetadata) throws SQLException {\n+    DatabaseMetaData metaData = conn.getMetaData();\n+    try (Statement statement = conn.createStatement()) {\n+      try (ResultSet resultSet = statement.executeQuery(\"select * from table1\")) {\n+        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+        Map<Integer, String> columnCommentByColumnIndex = getColumnComments(metaData, resultSetMetaData);\n+\n+        String tableName = getTableNameFromResultSetMetaData(resultSetMetaData);\n+        String tableComment = getTableComment(metaData, tableName);\n+        JdbcToArrowConfig config = new JdbcToArrowConfigBuilder()\n+                .setAllocator(new RootAllocator()).setSchemaComment(tableComment)\n+                .setColumnCommentByColumnIndex(columnCommentByColumnIndex).setIncludeMetadata(includeMetadata).build();\n+        return JdbcToArrowUtils.jdbcToArrowSchema(resultSetMetaData, config);\n\nReview Comment:\n   Yes, we can keep the test case.\r\n   \r\n   It may help to also note in the test case that COMMENT is what Spark uses - I wasn't aware of that context\n\n\n\n",
                    "created": "2022-09-09T16:24:32.720+0000",
                    "updated": "2022-09-09T16:24:32.720+0000",
                    "started": "2022-09-09T16:24:32.720+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807501",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on code in PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#discussion_r967254924\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowCommentMetadataTest.java:\n##########\n@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.arrow.vector.util.ObjectMapperFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+public class JdbcToArrowCommentMetadataTest {\n+\n+  private final ObjectWriter schemaSerializer = ObjectMapperFactory.newObjectMapper().writerWithDefaultPrettyPrinter();\n+  private Connection conn = null;\n+\n+  /**\n+   * This method creates Connection object and DB table and also populate data into table for test.\n+   *\n+   * @throws SQLException on error\n+   * @throws ClassNotFoundException on error\n+   */\n+  @Before\n+  public void setUp() throws SQLException, ClassNotFoundException {\n+    String url = \"jdbc:h2:mem:JdbcToArrowTest?characterEncoding=UTF-8;INIT=runscript from 'classpath:/h2/comment.sql'\";\n+    String driver = \"org.h2.Driver\";\n+    Class.forName(driver);\n+    conn = DriverManager.getConnection(url);\n+  }\n+\n+  @After\n+  public void tearDown() throws SQLException {\n+    if (conn != null) {\n+      conn.close();\n+      conn = null;\n+    }\n+  }\n+\n+  @Test\n+  public void schemaComment() throws Exception {\n+    boolean includeMetadata = false;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithComments.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  @Test\n+  public void schemaCommentWithDatabaseMetadata() throws Exception {\n+    boolean includeMetadata = true;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithCommentsAndJdbcMeta.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  private Schema getSchemaWithCommentFromQuery(boolean includeMetadata) throws SQLException {\n+    DatabaseMetaData metaData = conn.getMetaData();\n+    try (Statement statement = conn.createStatement()) {\n+      try (ResultSet resultSet = statement.executeQuery(\"select * from table1\")) {\n+        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+        Map<Integer, String> columnCommentByColumnIndex = getColumnComments(metaData, resultSetMetaData);\n+\n+        String tableName = getTableNameFromResultSetMetaData(resultSetMetaData);\n+        String tableComment = getTableComment(metaData, tableName);\n+        JdbcToArrowConfig config = new JdbcToArrowConfigBuilder()\n+                .setAllocator(new RootAllocator()).setSchemaComment(tableComment)\n+                .setColumnCommentByColumnIndex(columnCommentByColumnIndex).setIncludeMetadata(includeMetadata).build();\n+        return JdbcToArrowUtils.jdbcToArrowSchema(resultSetMetaData, config);\n\nReview Comment:\n   Cool, so I'll change implementation to more common approach but test case will be the same with \"comment\". Is it OK for you? \r\n   For me test - like code snippets for developers, somebody can implement complex DB metadata gathering base on the same idea. For PostgreSQL driver required special wrapper around public class ResultSetMetaData to propagate right metadata to existing jdbc->arrow bridge\n\n\n\n",
                    "created": "2022-09-09T16:25:27.829+0000",
                    "updated": "2022-09-09T16:25:27.829+0000",
                    "started": "2022-09-09T16:25:27.828+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807502",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on code in PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#discussion_r967258562\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowCommentMetadataTest.java:\n##########\n@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.arrow.vector.util.ObjectMapperFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+public class JdbcToArrowCommentMetadataTest {\n+\n+  private final ObjectWriter schemaSerializer = ObjectMapperFactory.newObjectMapper().writerWithDefaultPrettyPrinter();\n+  private Connection conn = null;\n+\n+  /**\n+   * This method creates Connection object and DB table and also populate data into table for test.\n+   *\n+   * @throws SQLException on error\n+   * @throws ClassNotFoundException on error\n+   */\n+  @Before\n+  public void setUp() throws SQLException, ClassNotFoundException {\n+    String url = \"jdbc:h2:mem:JdbcToArrowTest?characterEncoding=UTF-8;INIT=runscript from 'classpath:/h2/comment.sql'\";\n+    String driver = \"org.h2.Driver\";\n+    Class.forName(driver);\n+    conn = DriverManager.getConnection(url);\n+  }\n+\n+  @After\n+  public void tearDown() throws SQLException {\n+    if (conn != null) {\n+      conn.close();\n+      conn = null;\n+    }\n+  }\n+\n+  @Test\n+  public void schemaComment() throws Exception {\n+    boolean includeMetadata = false;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithComments.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  @Test\n+  public void schemaCommentWithDatabaseMetadata() throws Exception {\n+    boolean includeMetadata = true;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithCommentsAndJdbcMeta.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  private Schema getSchemaWithCommentFromQuery(boolean includeMetadata) throws SQLException {\n+    DatabaseMetaData metaData = conn.getMetaData();\n+    try (Statement statement = conn.createStatement()) {\n+      try (ResultSet resultSet = statement.executeQuery(\"select * from table1\")) {\n+        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+        Map<Integer, String> columnCommentByColumnIndex = getColumnComments(metaData, resultSetMetaData);\n+\n+        String tableName = getTableNameFromResultSetMetaData(resultSetMetaData);\n+        String tableComment = getTableComment(metaData, tableName);\n+        JdbcToArrowConfig config = new JdbcToArrowConfigBuilder()\n+                .setAllocator(new RootAllocator()).setSchemaComment(tableComment)\n+                .setColumnCommentByColumnIndex(columnCommentByColumnIndex).setIncludeMetadata(includeMetadata).build();\n+        return JdbcToArrowUtils.jdbcToArrowSchema(resultSetMetaData, config);\n\nReview Comment:\n   Sure! I'll do it on Monday. Thank you for your assistance and good idea! Have a nice weekend @lidavidm \n\n\n\n",
                    "created": "2022-09-09T16:27:48.152+0000",
                    "updated": "2022-09-09T16:27:48.152+0000",
                    "started": "2022-09-09T16:27:48.152+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807503",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/807644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on code in PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#discussion_r967633038\n\n\n##########\njava/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/JdbcToArrowCommentMetadataTest.java:\n##########\n@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.apache.arrow.vector.util.ObjectMapperFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+public class JdbcToArrowCommentMetadataTest {\n+\n+  private final ObjectWriter schemaSerializer = ObjectMapperFactory.newObjectMapper().writerWithDefaultPrettyPrinter();\n+  private Connection conn = null;\n+\n+  /**\n+   * This method creates Connection object and DB table and also populate data into table for test.\n+   *\n+   * @throws SQLException on error\n+   * @throws ClassNotFoundException on error\n+   */\n+  @Before\n+  public void setUp() throws SQLException, ClassNotFoundException {\n+    String url = \"jdbc:h2:mem:JdbcToArrowTest?characterEncoding=UTF-8;INIT=runscript from 'classpath:/h2/comment.sql'\";\n+    String driver = \"org.h2.Driver\";\n+    Class.forName(driver);\n+    conn = DriverManager.getConnection(url);\n+  }\n+\n+  @After\n+  public void tearDown() throws SQLException {\n+    if (conn != null) {\n+      conn.close();\n+      conn = null;\n+    }\n+  }\n+\n+  @Test\n+  public void schemaComment() throws Exception {\n+    boolean includeMetadata = false;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithComments.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  @Test\n+  public void schemaCommentWithDatabaseMetadata() throws Exception {\n+    boolean includeMetadata = true;\n+    String schemaJson = schemaSerializer.writeValueAsString(getSchemaWithCommentFromQuery(includeMetadata));\n+    String expectedSchema = getExpectedSchema(\"/h2/expectedSchemaWithCommentsAndJdbcMeta.json\");\n+    assertThat(schemaJson).isEqualTo(expectedSchema);\n+  }\n+\n+  private Schema getSchemaWithCommentFromQuery(boolean includeMetadata) throws SQLException {\n+    DatabaseMetaData metaData = conn.getMetaData();\n+    try (Statement statement = conn.createStatement()) {\n+      try (ResultSet resultSet = statement.executeQuery(\"select * from table1\")) {\n+        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();\n+        Map<Integer, String> columnCommentByColumnIndex = getColumnComments(metaData, resultSetMetaData);\n+\n+        String tableName = getTableNameFromResultSetMetaData(resultSetMetaData);\n+        String tableComment = getTableComment(metaData, tableName);\n+        JdbcToArrowConfig config = new JdbcToArrowConfigBuilder()\n+                .setAllocator(new RootAllocator()).setSchemaComment(tableComment)\n+                .setColumnCommentByColumnIndex(columnCommentByColumnIndex).setIncludeMetadata(includeMetadata).build();\n+        return JdbcToArrowUtils.jdbcToArrowSchema(resultSetMetaData, config);\n\nReview Comment:\n   ![image](https://user-images.githubusercontent.com/10332206/189479583-15c33def-40cd-46b1-8532-6162a408d1bf.png)\r\n   \r\n   To Apache Spark schema conversion result for schema from org.apache.arrow.adapter.jdbc.JdbcToArrowCommentMetadataTest#schemaCommentWithDatabaseMetadata\r\n   \r\n   structType.toDDL(): ID BIGINT NOT NULL COMMENT 'Record identifier',NAME STRING COMMENT 'Name of record',COLUMN1 BOOLEAN,COLUMNN INT COMMENT 'Informative description of columnN'\n\n\n\n",
                    "created": "2022-09-10T10:39:26.865+0000",
                    "updated": "2022-09-10T10:39:26.865+0000",
                    "started": "2022-09-10T10:39:26.864+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807644",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/808356",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#issuecomment-1245610147\n\n   Hello @lidavidm \r\n   Is code ok after rework?\n\n\n",
                    "created": "2022-09-13T15:52:56.180+0000",
                    "updated": "2022-09-13T15:52:56.180+0000",
                    "started": "2022-09-13T15:52:56.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "808356",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/808357",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#issuecomment-1245612628\n\n   Hi, sorry, it seems there's still a lint error - looks like the newly added files need the license header at top, something like this https://github.com/apache/arrow/blob/8bf60b5deaa15a6e301221b57b419c9599e313b0/java/adapter/jdbc/src/test/resources/h2/test1_all_datatypes_h2.yml#L1-L10\n\n\n",
                    "created": "2022-09-13T15:54:58.743+0000",
                    "updated": "2022-09-13T15:54:58.743+0000",
                    "started": "2022-09-13T15:54:58.742+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "808357",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/808358",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#issuecomment-1245613072\n\n   I'll take a second look when I can but it may be a few days\n\n\n",
                    "created": "2022-09-13T15:55:19.172+0000",
                    "updated": "2022-09-13T15:55:19.172+0000",
                    "started": "2022-09-13T15:55:19.172+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "808358",
                    "issueId": "13480298"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/worklog/808368",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "igor-suhorukov commented on PR #14081:\nURL: https://github.com/apache/arrow/pull/14081#issuecomment-1245658676\n\n   Ok, done license header with h2 sql file. But is comment applicable to json expected dataset? I don't think that it possible for json files\n\n\n",
                    "created": "2022-09-13T16:30:06.797+0000",
                    "updated": "2022-09-13T16:30:06.797+0000",
                    "started": "2022-09-13T16:30:06.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "808368",
                    "issueId": "13480298"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4de845eb[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a8d3584[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5232d507[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5110fbd0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4218faea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4fcd5e03[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b133010[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5d8b94d9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58c1ea28[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7d599a75[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fd8a67e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6e74ca00[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 14 11:59:48 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-09-14T11:59:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17631/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-09-06T14:09:16.000+0000",
        "updated": "2022-09-14T21:53:27.000+0000",
        "timeoriginalestimate": null,
        "description": "Allow user to provide comment in Arrow Schema from \u00a0JdbcToArrowConfig . It will be very useful metadata in real life (medium to large scale project) for documentation and maintenance topics. Apache Spark code use \"comment\" key for such metadata, so this looks like reasonable default name for metadata in Arrow schema too",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Propagate table/columns comment into Arrow Schema",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": "https://github.com/apache/arrow/issues/14039#issuecomment-1238138823",
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480298/comment/17604050",
                    "id": "17604050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 14081\n[https://github.com/apache/arrow/pull/14081]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-09-14T11:59:48.264+0000",
                    "updated": "2022-09-14T11:59:48.264+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z18ckw:",
        "customfield_12314139": null
    }
}