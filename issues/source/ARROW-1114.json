{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13079225",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13079225",
    "key": "ARROW-1114",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1114/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@16759cbd[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e33422d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@168cc2ce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@72cad818[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21cac9dd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3ced5c4c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c8763ad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6829783d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1fdac0c4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4903e04f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3eee78c9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1da507b9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 23 21:58:41 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-10-23T21:58:37.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1114/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-06-12T14:35:18.000+0000",
        "updated": "2017-10-23T21:58:41.000+0000",
        "timeoriginalestimate": null,
        "description": "When dealing with IO interfaces that yield one record at a time, a common task will be appending each element to a sequence. ",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Create Record Batch Builder class as a reusable and efficient way to transpose row-by-row data to columns",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13079225/comment/16046909",
                    "id": "16046909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "A colleague of mine could be able to submit a builder that takes arbitrary rows (that inherit from std::tuple) and incrementally builds the corresponding table / recordbatch. The Schema is then inferred from the class structure at compile time.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2017-06-12T18:33:07.915+0000",
                    "updated": "2017-06-12T18:33:07.915+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13079225/comment/16214053",
                    "id": "16214053",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user wesm commented on the issue:\n\n    https://github.com/apache/arrow/pull/802\n  \n    No longer WIP. I wanted to get something basic in so that adapter components like Avro can use this class. Figure we can refine / expand the API as needed as we proceed\r\n    \r\n    @xhochy or @cpcloud could you review? Thanks\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-21T18:28:23.560+0000",
                    "updated": "2017-10-21T18:28:23.560+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13079225/comment/16215159",
                    "id": "16215159",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #802: ARROW-1114: [C++] Add simple RecordBatchBuilder class\nURL: https://github.com/apache/arrow/pull/802#issuecomment-338665322\n \n \n   Updated docs, this could use review before merging\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T13:50:35.878+0000",
                    "updated": "2017-10-23T13:50:35.878+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13079225/comment/16215415",
                    "id": "16215415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on a change in pull request #802: ARROW-1114: [C++] Add simple RecordBatchBuilder class\nURL: https://github.com/apache/arrow/pull/802#discussion_r146323676\n \n \n\n ##########\n File path: cpp/src/arrow/table_builder.h\n ##########\n @@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_TABLE_BUILDER_H\n+#define ARROW_TABLE_BUILDER_H\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class ArrayBuilder;\n+class MemoryPool;\n+class RecordBatch;\n+class Schema;\n+\n+/// \\class RecordBatchBuilder\n+/// \\brief Helper class for creating record batches iteratively given a known\n+/// schema\n+class RecordBatchBuilder {\n+ public:\n+  /// \\brief Create an initialize a RecordBatchBuilder\n+  /// \\param[in] schema The schema for the record batch\n+  /// \\param[in] pool A MemoryPool to use for allocations\n+  /// \\param[in] builder the created builder instance\n+  static Status Create(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n+                       std::unique_ptr<RecordBatchBuilder>* builder);\n+\n+  /// \\brief Create an initialize a RecordBatchBuilder\n+  /// \\param[in] schema The schema for the record batch\n+  /// \\param[in] pool A MemoryPool to use for allocations\n+  /// \\param[in] initial_capacity The initial capacity for the builders\n+  /// \\param[in] builder the created builder instance\n+  static Status Create(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n+                       int64_t initial_capacity,\n+                       std::unique_ptr<RecordBatchBuilder>* builder);\n+\n+  /// \\brief Get base pointer to field builder\n+  /// \\param i the field index\n+  /// \\return pointer to ArrayBuilder\n+  ArrayBuilder* GetField(int i) { return raw_field_builders_[i]; }\n+\n+  /// \\brief Get base pointer to field builder\n+  /// \\param i the field index\n+  /// \\return pointer to ArrayBuilder\n+  const ArrayBuilder* GetField(int i) const { return raw_field_builders_[i]; }\n+\n+  /// \\brief Return field builder casted to indicated specific builder type\n+  /// \\param i the field index\n+  /// \\return pointer to template type\n+  template <typename T>\n+  T* GetFieldAs(int i) {\n+    return static_cast<T*>(raw_field_builders_[i]);\n+  }\n+\n+  /// \\brief Return field builder casted to indicated specific builder type\n+  /// \\param i the field index\n+  /// \\return pointer to template type\n+  template <typename T>\n+  const T* GetFieldAs(int i) const {\n \n Review comment:\n   Is there any benefit in getting a constant Builder?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T16:36:03.368+0000",
                    "updated": "2017-10-23T16:36:03.368+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13079225/comment/16215416",
                    "id": "16215416",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on a change in pull request #802: ARROW-1114: [C++] Add simple RecordBatchBuilder class\nURL: https://github.com/apache/arrow/pull/802#discussion_r146323454\n \n \n\n ##########\n File path: cpp/src/arrow/table_builder.h\n ##########\n @@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_TABLE_BUILDER_H\n+#define ARROW_TABLE_BUILDER_H\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class ArrayBuilder;\n+class MemoryPool;\n+class RecordBatch;\n+class Schema;\n+\n+/// \\class RecordBatchBuilder\n+/// \\brief Helper class for creating record batches iteratively given a known\n+/// schema\n+class RecordBatchBuilder {\n+ public:\n+  /// \\brief Create an initialize a RecordBatchBuilder\n+  /// \\param[in] schema The schema for the record batch\n+  /// \\param[in] pool A MemoryPool to use for allocations\n+  /// \\param[in] builder the created builder instance\n+  static Status Create(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n \n Review comment:\n   We have often called these methods `Make\u2026` in the past, we should keep this naming pattern.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T16:36:03.370+0000",
                    "updated": "2017-10-23T16:36:03.370+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13079225/comment/16215445",
                    "id": "16215445",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #802: ARROW-1114: [C++] Add simple RecordBatchBuilder class\nURL: https://github.com/apache/arrow/pull/802#discussion_r146329095\n \n \n\n ##########\n File path: cpp/src/arrow/table_builder.h\n ##########\n @@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_TABLE_BUILDER_H\n+#define ARROW_TABLE_BUILDER_H\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class ArrayBuilder;\n+class MemoryPool;\n+class RecordBatch;\n+class Schema;\n+\n+/// \\class RecordBatchBuilder\n+/// \\brief Helper class for creating record batches iteratively given a known\n+/// schema\n+class RecordBatchBuilder {\n+ public:\n+  /// \\brief Create an initialize a RecordBatchBuilder\n+  /// \\param[in] schema The schema for the record batch\n+  /// \\param[in] pool A MemoryPool to use for allocations\n+  /// \\param[in] builder the created builder instance\n+  static Status Create(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n \n Review comment:\n   Done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T16:55:42.991+0000",
                    "updated": "2017-10-23T16:55:42.991+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13079225/comment/16215446",
                    "id": "16215446",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #802: ARROW-1114: [C++] Add simple RecordBatchBuilder class\nURL: https://github.com/apache/arrow/pull/802#discussion_r146329164\n \n \n\n ##########\n File path: cpp/src/arrow/table_builder.h\n ##########\n @@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_TABLE_BUILDER_H\n+#define ARROW_TABLE_BUILDER_H\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class ArrayBuilder;\n+class MemoryPool;\n+class RecordBatch;\n+class Schema;\n+\n+/// \\class RecordBatchBuilder\n+/// \\brief Helper class for creating record batches iteratively given a known\n+/// schema\n+class RecordBatchBuilder {\n+ public:\n+  /// \\brief Create an initialize a RecordBatchBuilder\n+  /// \\param[in] schema The schema for the record batch\n+  /// \\param[in] pool A MemoryPool to use for allocations\n+  /// \\param[in] builder the created builder instance\n+  static Status Create(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n+                       std::unique_ptr<RecordBatchBuilder>* builder);\n+\n+  /// \\brief Create an initialize a RecordBatchBuilder\n+  /// \\param[in] schema The schema for the record batch\n+  /// \\param[in] pool A MemoryPool to use for allocations\n+  /// \\param[in] initial_capacity The initial capacity for the builders\n+  /// \\param[in] builder the created builder instance\n+  static Status Create(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n+                       int64_t initial_capacity,\n+                       std::unique_ptr<RecordBatchBuilder>* builder);\n+\n+  /// \\brief Get base pointer to field builder\n+  /// \\param i the field index\n+  /// \\return pointer to ArrayBuilder\n+  ArrayBuilder* GetField(int i) { return raw_field_builders_[i]; }\n+\n+  /// \\brief Get base pointer to field builder\n+  /// \\param i the field index\n+  /// \\return pointer to ArrayBuilder\n+  const ArrayBuilder* GetField(int i) const { return raw_field_builders_[i]; }\n+\n+  /// \\brief Return field builder casted to indicated specific builder type\n+  /// \\param i the field index\n+  /// \\return pointer to template type\n+  template <typename T>\n+  T* GetFieldAs(int i) {\n+    return static_cast<T*>(raw_field_builders_[i]);\n+  }\n+\n+  /// \\brief Return field builder casted to indicated specific builder type\n+  /// \\param i the field index\n+  /// \\return pointer to template type\n+  template <typename T>\n+  const T* GetFieldAs(int i) const {\n \n Review comment:\n   Unclear. I removed the the YAGNI mantra, we can always add them later if needed\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T16:56:02.200+0000",
                    "updated": "2017-10-23T16:56:02.200+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13079225/comment/16215447",
                    "id": "16215447",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #802: ARROW-1114: [C++] Add simple RecordBatchBuilder class\nURL: https://github.com/apache/arrow/pull/802#discussion_r146329164\n \n \n\n ##########\n File path: cpp/src/arrow/table_builder.h\n ##########\n @@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_TABLE_BUILDER_H\n+#define ARROW_TABLE_BUILDER_H\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class ArrayBuilder;\n+class MemoryPool;\n+class RecordBatch;\n+class Schema;\n+\n+/// \\class RecordBatchBuilder\n+/// \\brief Helper class for creating record batches iteratively given a known\n+/// schema\n+class RecordBatchBuilder {\n+ public:\n+  /// \\brief Create an initialize a RecordBatchBuilder\n+  /// \\param[in] schema The schema for the record batch\n+  /// \\param[in] pool A MemoryPool to use for allocations\n+  /// \\param[in] builder the created builder instance\n+  static Status Create(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n+                       std::unique_ptr<RecordBatchBuilder>* builder);\n+\n+  /// \\brief Create an initialize a RecordBatchBuilder\n+  /// \\param[in] schema The schema for the record batch\n+  /// \\param[in] pool A MemoryPool to use for allocations\n+  /// \\param[in] initial_capacity The initial capacity for the builders\n+  /// \\param[in] builder the created builder instance\n+  static Status Create(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n+                       int64_t initial_capacity,\n+                       std::unique_ptr<RecordBatchBuilder>* builder);\n+\n+  /// \\brief Get base pointer to field builder\n+  /// \\param i the field index\n+  /// \\return pointer to ArrayBuilder\n+  ArrayBuilder* GetField(int i) { return raw_field_builders_[i]; }\n+\n+  /// \\brief Get base pointer to field builder\n+  /// \\param i the field index\n+  /// \\return pointer to ArrayBuilder\n+  const ArrayBuilder* GetField(int i) const { return raw_field_builders_[i]; }\n+\n+  /// \\brief Return field builder casted to indicated specific builder type\n+  /// \\param i the field index\n+  /// \\return pointer to template type\n+  template <typename T>\n+  T* GetFieldAs(int i) {\n+    return static_cast<T*>(raw_field_builders_[i]);\n+  }\n+\n+  /// \\brief Return field builder casted to indicated specific builder type\n+  /// \\param i the field index\n+  /// \\return pointer to template type\n+  template <typename T>\n+  const T* GetFieldAs(int i) const {\n \n Review comment:\n   Unclear. I removed with the YAGNI mantra, we can always add them later if needed\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T16:56:12.881+0000",
                    "updated": "2017-10-23T16:56:12.881+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13079225/comment/16215927",
                    "id": "16215927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #802: ARROW-1114: [C++] Add simple RecordBatchBuilder class\nURL: https://github.com/apache/arrow/pull/802#issuecomment-338809129\n \n \n   +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T21:58:24.189+0000",
                    "updated": "2017-10-23T21:58:24.189+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13079225/comment/16215928",
                    "id": "16215928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 802\n[https://github.com/apache/arrow/pull/802]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-23T21:58:37.747+0000",
                    "updated": "2017-10-23T21:58:37.747+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13079225/comment/16215929",
                    "id": "16215929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #802: ARROW-1114: [C++] Add simple RecordBatchBuilder class\nURL: https://github.com/apache/arrow/pull/802\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/CMakeLists.txt b/cpp/src/arrow/CMakeLists.txt\nindex 9a676510e..22b475146 100644\n--- a/cpp/src/arrow/CMakeLists.txt\n+++ b/cpp/src/arrow/CMakeLists.txt\n@@ -24,6 +24,7 @@ set(ARROW_SRCS\n   pretty_print.cc\n   status.cc\n   table.cc\n+  table_builder.cc\n   tensor.cc\n   type.cc\n   visitor.cc\n@@ -143,6 +144,7 @@ install(FILES\n   pretty_print.h\n   status.h\n   table.h\n+  table_builder.h\n   tensor.h\n   type.h\n   type_fwd.h\n@@ -172,6 +174,7 @@ ADD_ARROW_TEST(pretty_print-test)\n ADD_ARROW_TEST(status-test)\n ADD_ARROW_TEST(type-test)\n ADD_ARROW_TEST(table-test)\n+ADD_ARROW_TEST(table_builder-test)\n ADD_ARROW_TEST(tensor-test)\n \n ADD_ARROW_BENCHMARK(builder-benchmark)\ndiff --git a/cpp/src/arrow/api.h b/cpp/src/arrow/api.h\nindex 4d731bd32..5d2e859f3 100644\n--- a/cpp/src/arrow/api.h\n+++ b/cpp/src/arrow/api.h\n@@ -28,6 +28,7 @@\n #include \"arrow/pretty_print.h\"\n #include \"arrow/status.h\"\n #include \"arrow/table.h\"\n+#include \"arrow/table_builder.h\"\n #include \"arrow/tensor.h\"\n #include \"arrow/type.h\"\n #include \"arrow/visitor.h\"\ndiff --git a/cpp/src/arrow/ipc/json-integration-test.cc b/cpp/src/arrow/ipc/json-integration-test.cc\nindex 4a3b2b399..c7530a467 100644\n--- a/cpp/src/arrow/ipc/json-integration-test.cc\n+++ b/cpp/src/arrow/ipc/json-integration-test.cc\n@@ -182,10 +182,10 @@ static Status ValidateArrowVsJson(const std::string& arrow_path,\n       ss << \"Record batch \" << i << \" did not match\";\n \n       ss << \"\\nJSON:\\n\";\n-      RETURN_NOT_OK(PrettyPrint(*json_batch.get(), 0, &ss));\n+      RETURN_NOT_OK(PrettyPrint(*json_batch, 0, &ss));\n \n       ss << \"\\nArrow:\\n\";\n-      RETURN_NOT_OK(PrettyPrint(*arrow_batch.get(), 0, &ss));\n+      RETURN_NOT_OK(PrettyPrint(*arrow_batch, 0, &ss));\n       return Status::Invalid(ss.str());\n     }\n   }\ndiff --git a/cpp/src/arrow/table_builder-test.cc b/cpp/src/arrow/table_builder-test.cc\nnew file mode 100644\nindex 000000000..07d9b6b2d\n--- /dev/null\n+++ b/cpp/src/arrow/table_builder-test.cc\n@@ -0,0 +1,146 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"gtest/gtest.h\"\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/table_builder.h\"\n+#include \"arrow/test-common.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+\n+class TestRecordBatchBuilder : public TestBase {\n+ public:\n+};\n+\n+std::shared_ptr<Schema> ExampleSchema1() {\n+  auto f0 = field(\"f0\", int32());\n+  auto f1 = field(\"f1\", utf8());\n+  auto f2 = field(\"f1\", list(int8()));\n+  return ::arrow::schema({f0, f1, f2});\n+}\n+\n+template <typename BuilderType, typename T>\n+void AppendValues(BuilderType* builder, const std::vector<T>& values,\n+                  const std::vector<bool>& is_valid) {\n+  for (size_t i = 0; i < values.size(); ++i) {\n+    if (is_valid.size() == 0 || is_valid[i]) {\n+      ASSERT_OK(builder->Append(values[i]));\n+    } else {\n+      ASSERT_OK(builder->AppendNull());\n+    }\n+  }\n+}\n+\n+template <typename ValueType, typename T>\n+void AppendList(ListBuilder* builder, const std::vector<std::vector<T>>& values,\n+                const std::vector<bool>& is_valid) {\n+  auto values_builder = static_cast<ValueType*>(builder->value_builder());\n+\n+  for (size_t i = 0; i < values.size(); ++i) {\n+    if (is_valid.size() == 0 || is_valid[i]) {\n+      ASSERT_OK(builder->Append());\n+      AppendValues<ValueType, T>(values_builder, values[i], {});\n+    } else {\n+      ASSERT_OK(builder->AppendNull());\n+    }\n+  }\n+}\n+\n+TEST_F(TestRecordBatchBuilder, Basics) {\n+  auto schema = ExampleSchema1();\n+\n+  std::unique_ptr<RecordBatchBuilder> builder;\n+  ASSERT_OK(RecordBatchBuilder::Make(schema, pool_, &builder));\n+\n+  std::vector<bool> is_valid = {false, true, true, true};\n+  std::vector<int32_t> f0_values = {0, 1, 2, 3};\n+  std::vector<std::string> f1_values = {\"a\", \"bb\", \"ccc\", \"dddd\"};\n+  std::vector<std::vector<int8_t>> f2_values = {{}, {0, 1}, {}, {2}};\n+\n+  std::shared_ptr<Array> a0, a1, a2;\n+\n+  // Make the expected record batch\n+  auto AppendData = [&](Int32Builder* b0, StringBuilder* b1, ListBuilder* b2) {\n+    AppendValues<Int32Builder, int32_t>(b0, f0_values, is_valid);\n+    AppendValues<StringBuilder, std::string>(b1, f1_values, is_valid);\n+    AppendList<Int8Builder, int8_t>(b2, f2_values, is_valid);\n+  };\n+\n+  Int32Builder ex_b0;\n+  StringBuilder ex_b1;\n+  ListBuilder ex_b2(pool_, std::unique_ptr<Int8Builder>(new Int8Builder(pool_)));\n+\n+  AppendData(&ex_b0, &ex_b1, &ex_b2);\n+  ASSERT_OK(ex_b0.Finish(&a0));\n+  ASSERT_OK(ex_b1.Finish(&a1));\n+  ASSERT_OK(ex_b2.Finish(&a2));\n+\n+  RecordBatch expected(schema, 4, {a0, a1, a2});\n+\n+  // Builder attributes\n+  ASSERT_EQ(3, builder->num_fields());\n+  ASSERT_EQ(schema.get(), builder->schema().get());\n+\n+  const int kIter = 3;\n+  for (int i = 0; i < kIter; ++i) {\n+    AppendData(builder->GetFieldAs<Int32Builder>(0),\n+               static_cast<StringBuilder*>(builder->GetField(1)),\n+               builder->GetFieldAs<ListBuilder>(2));\n+\n+    std::shared_ptr<RecordBatch> batch;\n+\n+    if (i == kIter - 1) {\n+      // Do not flush in last iteration\n+      ASSERT_OK(builder->Flush(false, &batch));\n+    } else {\n+      ASSERT_OK(builder->Flush(&batch));\n+    }\n+\n+    ASSERT_BATCHES_EQUAL(expected, *batch);\n+  }\n+\n+  // Test setting initial capacity\n+  builder->SetInitialCapacity(4096);\n+  ASSERT_EQ(4096, builder->initial_capacity());\n+}\n+\n+TEST_F(TestRecordBatchBuilder, InvalidFieldLength) {\n+  auto schema = ExampleSchema1();\n+\n+  std::unique_ptr<RecordBatchBuilder> builder;\n+  ASSERT_OK(RecordBatchBuilder::Make(schema, pool_, &builder));\n+\n+  std::vector<bool> is_valid = {false, true, true, true};\n+  std::vector<int32_t> f0_values = {0, 1, 2, 3};\n+\n+  AppendValues<Int32Builder, int32_t>(builder->GetFieldAs<Int32Builder>(0), f0_values,\n+                                      is_valid);\n+\n+  std::shared_ptr<RecordBatch> dummy;\n+  ASSERT_RAISES(Invalid, builder->Flush(&dummy));\n+}\n+\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/table_builder.cc b/cpp/src/arrow/table_builder.cc\nnew file mode 100644\nindex 000000000..a1bd95940\n--- /dev/null\n+++ b/cpp/src/arrow/table_builder.cc\n@@ -0,0 +1,101 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/table_builder.h\"\n+\n+#include <algorithm>\n+#include <cstdlib>\n+#include <memory>\n+#include <sstream>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+// ----------------------------------------------------------------------\n+// RecordBatchBuilder\n+\n+RecordBatchBuilder::RecordBatchBuilder(const std::shared_ptr<Schema>& schema,\n+                                       MemoryPool* pool, int64_t initial_capacity)\n+    : schema_(schema), initial_capacity_(initial_capacity), pool_(pool) {}\n+\n+Status RecordBatchBuilder::Make(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n+                                std::unique_ptr<RecordBatchBuilder>* builder) {\n+  return Make(schema, pool, kMinBuilderCapacity, builder);\n+}\n+\n+Status RecordBatchBuilder::Make(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n+                                int64_t initial_capacity,\n+                                std::unique_ptr<RecordBatchBuilder>* builder) {\n+  builder->reset(new RecordBatchBuilder(schema, pool, initial_capacity));\n+  RETURN_NOT_OK((*builder)->CreateBuilders());\n+  return (*builder)->InitBuilders();\n+}\n+\n+Status RecordBatchBuilder::Flush(bool reset_builders,\n+                                 std::shared_ptr<RecordBatch>* batch) {\n+  std::vector<std::shared_ptr<Array>> fields;\n+  fields.resize(this->num_fields());\n+\n+  int64_t length = 0;\n+  for (int i = 0; i < this->num_fields(); ++i) {\n+    RETURN_NOT_OK(raw_field_builders_[i]->Finish(&fields[i]));\n+    if (i > 0 && fields[i]->length() != length) {\n+      return Status::Invalid(\"All fields must be same length when calling Flush\");\n+    }\n+    length = fields[i]->length();\n+  }\n+  *batch = std::make_shared<RecordBatch>(schema_, length, std::move(fields));\n+  if (reset_builders) {\n+    return InitBuilders();\n+  } else {\n+    return Status::OK();\n+  }\n+}\n+\n+Status RecordBatchBuilder::Flush(std::shared_ptr<RecordBatch>* batch) {\n+  return Flush(true, batch);\n+}\n+\n+void RecordBatchBuilder::SetInitialCapacity(int64_t capacity) {\n+  DCHECK_GT(capacity, 0) << \"Initial capacity must be positive\";\n+  initial_capacity_ = capacity;\n+}\n+\n+Status RecordBatchBuilder::CreateBuilders() {\n+  field_builders_.resize(this->num_fields());\n+  raw_field_builders_.resize(this->num_fields());\n+  for (int i = 0; i < this->num_fields(); ++i) {\n+    RETURN_NOT_OK(MakeBuilder(pool_, schema_->field(i)->type(), &field_builders_[i]));\n+    raw_field_builders_[i] = field_builders_[i].get();\n+  }\n+  return Status::OK();\n+}\n+\n+Status RecordBatchBuilder::InitBuilders() {\n+  for (int i = 0; i < this->num_fields(); ++i) {\n+    RETURN_NOT_OK(raw_field_builders_[i]->Init(initial_capacity_));\n+  }\n+  return Status::OK();\n+}\n+\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/table_builder.h b/cpp/src/arrow/table_builder.h\nnew file mode 100644\nindex 000000000..582389b70\n--- /dev/null\n+++ b/cpp/src/arrow/table_builder.h\n@@ -0,0 +1,111 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_TABLE_BUILDER_H\n+#define ARROW_TABLE_BUILDER_H\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class ArrayBuilder;\n+class MemoryPool;\n+class RecordBatch;\n+class Schema;\n+\n+/// \\class RecordBatchBuilder\n+/// \\brief Helper class for creating record batches iteratively given a known\n+/// schema\n+class RecordBatchBuilder {\n+ public:\n+  /// \\brief Create an initialize a RecordBatchBuilder\n+  /// \\param[in] schema The schema for the record batch\n+  /// \\param[in] pool A MemoryPool to use for allocations\n+  /// \\param[in] builder the created builder instance\n+  static Status Make(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n+                     std::unique_ptr<RecordBatchBuilder>* builder);\n+\n+  /// \\brief Create an initialize a RecordBatchBuilder\n+  /// \\param[in] schema The schema for the record batch\n+  /// \\param[in] pool A MemoryPool to use for allocations\n+  /// \\param[in] initial_capacity The initial capacity for the builders\n+  /// \\param[in] builder the created builder instance\n+  static Status Make(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n+                     int64_t initial_capacity,\n+                     std::unique_ptr<RecordBatchBuilder>* builder);\n+\n+  /// \\brief Get base pointer to field builder\n+  /// \\param i the field index\n+  /// \\return pointer to ArrayBuilder\n+  ArrayBuilder* GetField(int i) { return raw_field_builders_[i]; }\n+\n+  /// \\brief Return field builder casted to indicated specific builder type\n+  /// \\param i the field index\n+  /// \\return pointer to template type\n+  template <typename T>\n+  T* GetFieldAs(int i) {\n+    return static_cast<T*>(raw_field_builders_[i]);\n+  }\n+\n+  /// \\brief Finish current batch and optionally reset\n+  /// \\param[in] reset_builders the resulting RecordBatch\n+  /// \\param[out] batch the resulting RecordBatch\n+  /// \\return Status\n+  Status Flush(bool reset_builders, std::shared_ptr<RecordBatch>* batch);\n+\n+  /// \\brief Finish current batch and reset\n+  /// \\param[out] batch the resulting RecordBatch\n+  /// \\return Status\n+  Status Flush(std::shared_ptr<RecordBatch>* batch);\n+\n+  /// \\brief Set the initial capacity for new builders\n+  void SetInitialCapacity(int64_t capacity);\n+\n+  /// \\brief The initial capacity for builders\n+  int64_t initial_capacity() const { return initial_capacity_; }\n+\n+  /// \\brief The number of fields in the schema\n+  int num_fields() const { return schema_->num_fields(); }\n+\n+  /// \\brief The number of fields in the schema\n+  std::shared_ptr<Schema> schema() const { return schema_; }\n+\n+ private:\n+  RecordBatchBuilder(const std::shared_ptr<Schema>& schema, MemoryPool* pool,\n+                     int64_t initial_capacity);\n+\n+  Status CreateBuilders();\n+  Status InitBuilders();\n+\n+  std::shared_ptr<Schema> schema_;\n+  int64_t initial_capacity_;\n+  MemoryPool* pool_;\n+\n+  std::vector<std::unique_ptr<ArrayBuilder>> field_builders_;\n+  std::vector<ArrayBuilder*> raw_field_builders_;\n+};\n+\n+}  // namespace arrow\n+\n+#endif  // ARROW_TABLE_BUILDER_H\ndiff --git a/cpp/src/arrow/test-util.h b/cpp/src/arrow/test-util.h\nindex 80e4feb6c..83ebdea4a 100644\n--- a/cpp/src/arrow/test-util.h\n+++ b/cpp/src/arrow/test-util.h\n@@ -22,6 +22,7 @@\n #include <limits>\n #include <memory>\n #include <random>\n+#include <sstream>\n #include <string>\n #include <vector>\n \n@@ -291,6 +292,19 @@ void AssertArraysEqual(const Array& expected, const Array& actual) {\n   }\n }\n \n+#define ASSERT_BATCHES_EQUAL(LEFT, RIGHT)    \\\n+  do {                                       \\\n+    if (!LEFT.ApproxEquals(RIGHT)) {         \\\n+      std::stringstream ss;                  \\\n+      ss << \"Left:\\n\";                       \\\n+      ASSERT_OK(PrettyPrint(LEFT, 0, &ss));  \\\n+                                             \\\n+      ss << \"\\nRight:\\n\";                    \\\n+      ASSERT_OK(PrettyPrint(RIGHT, 0, &ss)); \\\n+      FAIL() << ss.str();                    \\\n+    }                                        \\\n+  } while (false)\n+\n }  // namespace arrow\n \n #endif  // ARROW_TEST_UTIL_H_\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T21:58:41.165+0000",
                    "updated": "2017-10-23T21:58:41.165+0000"
                }
            ],
            "maxResults": 11,
            "total": 11,
            "startAt": 0
        },
        "customfield_12311820": "0|i3g653:",
        "customfield_12314139": null
    }
}