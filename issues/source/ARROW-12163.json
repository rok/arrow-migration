{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13368767",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767",
    "key": "ARROW-12163",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12163/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 30,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/673099",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar opened a new pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591\n\n\n   - Adding compression level configurable at read/write files to use Lz4CompressionCodec / ZstdCompressionCodec\r\n   - Changes on modules: vector & compression \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T11:20:17.407+0000",
                    "updated": "2021-11-02T11:20:17.407+0000",
                    "started": "2021-11-02T11:20:17.407+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673099",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/673104",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#issuecomment-957355018\n\n\n   <!--\n     Licensed to the Apache Software Foundation (ASF) under one\n     or more contributor license agreements.  See the NOTICE file\n     distributed with this work for additional information\n     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n   \n       http://www.apache.org/licenses/LICENSE-2.0\n   \n     Unless required by applicable law or agreed to in writing,\n     software distributed under the License is distributed on an\n     \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     KIND, either express or implied.  See the License for the\n     specific language governing permissions and limitations\n     under the License.\n   -->\n   \n   Thanks for opening a pull request!\n   \n   If this is not a [minor PR](https://github.com/apache/arrow/blob/master/CONTRIBUTING.md#Minor-Fixes). Could you open an issue for this pull request on JIRA? https://issues.apache.org/jira/browse/ARROW\n   \n   Opening JIRAs ahead of time contributes to the [Openness](http://theapacheway.com/open/#:~:text=Openness%20allows%20new%20users%20the,must%20happen%20in%20the%20open.) of the Apache Arrow project.\n   \n   Then could you also rename pull request title in the following format?\n   \n       ARROW-${JIRA_ID}: [${COMPONENT}] ${SUMMARY}\n   \n   or\n   \n       MINOR: [${COMPONENT}] ${SUMMARY}\n   \n   See also:\n   \n     * [Other pull requests](https://github.com/apache/arrow/pulls/)\n     * [Contribution Guidelines - How to contribute patches](https://arrow.apache.org/docs/developers/contributing.html#how-to-contribute-patches)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T11:32:03.738+0000",
                    "updated": "2021-11-02T11:32:03.738+0000",
                    "started": "2021-11-02T11:32:03.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673104",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/673458",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#issuecomment-957355018\n\n\n   <!--\n     Licensed to the Apache Software Foundation (ASF) under one\n     or more contributor license agreements.  See the NOTICE file\n     distributed with this work for additional information\n     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n   \n       http://www.apache.org/licenses/LICENSE-2.0\n   \n     Unless required by applicable law or agreed to in writing,\n     software distributed under the License is distributed on an\n     \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     KIND, either express or implied.  See the License for the\n     specific language governing permissions and limitations\n     under the License.\n   -->\n   \n   Thanks for opening a pull request!\n   \n   If this is not a [minor PR](https://github.com/apache/arrow/blob/master/CONTRIBUTING.md#Minor-Fixes). Could you open an issue for this pull request on JIRA? https://issues.apache.org/jira/browse/ARROW\n   \n   Opening JIRAs ahead of time contributes to the [Openness](http://theapacheway.com/open/#:~:text=Openness%20allows%20new%20users%20the,must%20happen%20in%20the%20open.) of the Apache Arrow project.\n   \n   Then could you also rename pull request title in the following format?\n   \n       ARROW-${JIRA_ID}: [${COMPONENT}] ${SUMMARY}\n   \n   or\n   \n       MINOR: [${COMPONENT}] ${SUMMARY}\n   \n   See also:\n   \n     * [Other pull requests](https://github.com/apache/arrow/pulls/)\n     * [Contribution Guidelines - How to contribute patches](https://arrow.apache.org/docs/developers/contributing.html#how-to-contribute-patches)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T17:59:39.355+0000",
                    "updated": "2021-11-02T17:59:39.355+0000",
                    "started": "2021-11-02T17:59:39.354+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673458",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/673462",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar opened a new pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591\n\n\n   - Adding compression level configurable at read/write files to use Lz4CompressionCodec / ZstdCompressionCodec\r\n   - Changes on modules: vector & compression \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T18:00:03.809+0000",
                    "updated": "2021-11-02T18:00:03.809+0000",
                    "started": "2021-11-02T18:00:03.808+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673462",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/673681",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#discussion_r741330445\n\n\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n+      File fileNoCompression = new File(\"target/write_no_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{dumbCodec.getCodecType(), len, dumbCodec, fileNoCompression});\n+\n+      CompressionCodec lz4Codec = new Lz4CompressionCodec();\n+      File fileLZ4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\n\nReview comment:\n       ```suggestion\r\n         File fileLz4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\r\n   ```\r\n   nit: generally we use camel case for abbreviates as well\n\n##########\nFile path: docs/source/java/ipc.rst\n##########\n@@ -54,6 +54,15 @@ Now, we can begin writing a stream containing some number of these batches. For\n     ArrowStreamWriter writer = new ArrowStreamWriter(root, /*DictionaryProvider=*/null, Channels.newChannel(out));\n \n \n+Here we are not used compression option, but this could be implemented on this way thru codec option:\n\nReview comment:\n       ```suggestion\r\n   Buffer level compression is also supported by passing a codec:\r\n   ```\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n+      File fileNoCompression = new File(\"target/write_no_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{dumbCodec.getCodecType(), len, dumbCodec, fileNoCompression});\n+\n+      CompressionCodec lz4Codec = new Lz4CompressionCodec();\n+      File fileLZ4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{lz4Codec.getCodecType(), len, lz4Codec, fileLZ4Compression});\n+\n+      CompressionCodec zstdCodec = new ZstdCompressionCodec();\n+      File fileZSTDCompression = new File(\"target/write_zstd_compression_\" + len + \".arrow\");\n\nReview comment:\n       ```suggestion\r\n         File fileZstdCompression = new File(\"target/write_zstd_compression_\" + len + \".arrow\");\r\n   ```\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowStreamWriter.java\n##########\n@@ -65,6 +66,48 @@ public ArrowStreamWriter(VectorSchemaRoot root, DictionaryProvider provider, Wri\n     super(root, provider, out, option);\n   }\n \n+  /**\n+   * Construct an ArrowStreamWriter with an optional DictionaryProvider for the OutputStream.\n+   *\n+   * @param root Existing VectorSchemaRoot with vectors to be written.\n+   * @param includeNullCount Controls whether null count is copied to the {@link ArrowRecordBatch}\n+   * @param codec the codec for compressing data. If it is null, then no compression is needed.\n+   * @param alignBuffers Controls if buffers get aligned to 8-byte boundaries.\n+   * @param provider DictionaryProvider for any vectors that are dictionary encoded.\n+   *                 (Optional, can be null)\n+   * @param out OutputStream for writing.\n+   */\n+  public ArrowStreamWriter(VectorSchemaRoot root, boolean includeNullCount, CompressionCodec codec,\n\nReview comment:\n       same comment about constructor explosion as the file writer.\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n+      File fileNoCompression = new File(\"target/write_no_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{dumbCodec.getCodecType(), len, dumbCodec, fileNoCompression});\n+\n+      CompressionCodec lz4Codec = new Lz4CompressionCodec();\n+      File fileLZ4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{lz4Codec.getCodecType(), len, lz4Codec, fileLZ4Compression});\n+\n+      CompressionCodec zstdCodec = new ZstdCompressionCodec();\n+      File fileZSTDCompression = new File(\"target/write_zstd_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{zstdCodec.getCodecType(), len, zstdCodec, fileZSTDCompression});\n+\n+    }\n+    return params;\n+  }\n+\n+  @Test\n+  public void writeReadRandomAccessFile() throws IOException {\n+    RootAllocator allocator = new RootAllocator(Long.MAX_VALUE);\n+    BitVector bitVector = new BitVector(\"boolean\", allocator);\n+    VarCharVector varCharVector = new VarCharVector(\"varchar\", allocator);\n+    for (int i = 0; i < vectorLength; i++) {\n+      bitVector.setSafe(i, i % 2 == 0 ? 0 : 1);\n+      varCharVector.setSafe(i, (\"test\" + i).getBytes(StandardCharsets.UTF_8));\n+    }\n+    bitVector.setValueCount(vectorLength);\n+    varCharVector.setValueCount(vectorLength);\n+\n+    List<Field> fields = Arrays.asList(bitVector.getField(), varCharVector.getField());\n+    List<FieldVector> vectors = Arrays.asList(bitVector, varCharVector);\n+\n+    VectorSchemaRoot schemaRootWrite = new VectorSchemaRoot(fields, vectors);\n\nReview comment:\n       try-with-resources?\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n\nReview comment:\n       ```suggestion\r\n         CompressionCodec noCompression = NoCompressionCodec.INSTANCE;\r\n   ```\r\n   dumb can have negative connotations.\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n+      File fileNoCompression = new File(\"target/write_no_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{dumbCodec.getCodecType(), len, dumbCodec, fileNoCompression});\n+\n+      CompressionCodec lz4Codec = new Lz4CompressionCodec();\n+      File fileLZ4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{lz4Codec.getCodecType(), len, lz4Codec, fileLZ4Compression});\n+\n+      CompressionCodec zstdCodec = new ZstdCompressionCodec();\n+      File fileZSTDCompression = new File(\"target/write_zstd_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{zstdCodec.getCodecType(), len, zstdCodec, fileZSTDCompression});\n+\n+    }\n+    return params;\n+  }\n+\n+  @Test\n+  public void writeReadRandomAccessFile() throws IOException {\n+    RootAllocator allocator = new RootAllocator(Long.MAX_VALUE);\n+    BitVector bitVector = new BitVector(\"boolean\", allocator);\n+    VarCharVector varCharVector = new VarCharVector(\"varchar\", allocator);\n+    for (int i = 0; i < vectorLength; i++) {\n+      bitVector.setSafe(i, i % 2 == 0 ? 0 : 1);\n+      varCharVector.setSafe(i, (\"test\" + i).getBytes(StandardCharsets.UTF_8));\n+    }\n+    bitVector.setValueCount(vectorLength);\n+    varCharVector.setValueCount(vectorLength);\n+\n+    List<Field> fields = Arrays.asList(bitVector.getField(), varCharVector.getField());\n+    List<FieldVector> vectors = Arrays.asList(bitVector, varCharVector);\n+\n+    VectorSchemaRoot schemaRootWrite = new VectorSchemaRoot(fields, vectors);\n+\n+    // write\n+    FileOutputStream fileOutputStream = new FileOutputStream(file);\n+    ArrowFileWriter writer = new ArrowFileWriter(schemaRootWrite, true, codec, true,\n+        null, fileOutputStream.getChannel());\n+    writer.start();\n+    writer.writeBatch();\n+    writer.end();\n+\n+    // validations\n+    Assert.assertEquals(vectorLength, schemaRootWrite.getRowCount());\n\nReview comment:\n       can you check style in other tests, I thought we might static import assertEquals\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowFileWriter.java\n##########\n@@ -69,6 +70,31 @@ public ArrowFileWriter(VectorSchemaRoot root, DictionaryProvider provider, Writa\n     this.metaData = metaData;\n   }\n \n+  public ArrowFileWriter(VectorSchemaRoot root, boolean includeNullCount, CompressionCodec codec,\n\nReview comment:\n       Instead of making an ever expanding list of constructors, I think it is likely better at this point to create an \"Options\"  class that can be built using a builder pattern and passed in.  So we can have one new constructor:\r\n   \r\n   ArrowFileWriter(VectorSchemaRoot root, WriteOptions options, WritableByteChannel) and then maybe one private constructor if necessary that explodes the options.\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n+      File fileNoCompression = new File(\"target/write_no_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{dumbCodec.getCodecType(), len, dumbCodec, fileNoCompression});\n+\n+      CompressionCodec lz4Codec = new Lz4CompressionCodec();\n+      File fileLZ4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{lz4Codec.getCodecType(), len, lz4Codec, fileLZ4Compression});\n+\n+      CompressionCodec zstdCodec = new ZstdCompressionCodec();\n+      File fileZSTDCompression = new File(\"target/write_zstd_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{zstdCodec.getCodecType(), len, zstdCodec, fileZSTDCompression});\n+\n+    }\n+    return params;\n+  }\n+\n+  @Test\n+  public void writeReadRandomAccessFile() throws IOException {\n+    RootAllocator allocator = new RootAllocator(Long.MAX_VALUE);\n\nReview comment:\n       this should be in a try-with-resources block\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n+      File fileNoCompression = new File(\"target/write_no_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{dumbCodec.getCodecType(), len, dumbCodec, fileNoCompression});\n+\n+      CompressionCodec lz4Codec = new Lz4CompressionCodec();\n+      File fileLZ4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{lz4Codec.getCodecType(), len, lz4Codec, fileLZ4Compression});\n+\n+      CompressionCodec zstdCodec = new ZstdCompressionCodec();\n+      File fileZSTDCompression = new File(\"target/write_zstd_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{zstdCodec.getCodecType(), len, zstdCodec, fileZSTDCompression});\n+\n+    }\n+    return params;\n+  }\n+\n+  @Test\n+  public void writeReadRandomAccessFile() throws IOException {\n+    RootAllocator allocator = new RootAllocator(Long.MAX_VALUE);\n+    BitVector bitVector = new BitVector(\"boolean\", allocator);\n+    VarCharVector varCharVector = new VarCharVector(\"varchar\", allocator);\n+    for (int i = 0; i < vectorLength; i++) {\n+      bitVector.setSafe(i, i % 2 == 0 ? 0 : 1);\n+      varCharVector.setSafe(i, (\"test\" + i).getBytes(StandardCharsets.UTF_8));\n+    }\n+    bitVector.setValueCount(vectorLength);\n+    varCharVector.setValueCount(vectorLength);\n+\n+    List<Field> fields = Arrays.asList(bitVector.getField(), varCharVector.getField());\n+    List<FieldVector> vectors = Arrays.asList(bitVector, varCharVector);\n+\n+    VectorSchemaRoot schemaRootWrite = new VectorSchemaRoot(fields, vectors);\n+\n+    // write\n+    FileOutputStream fileOutputStream = new FileOutputStream(file);\n+    ArrowFileWriter writer = new ArrowFileWriter(schemaRootWrite, true, codec, true,\n\nReview comment:\n       please try to comment literal paraemters.  e.g. `schemarRootWrite, /*parameter 1 name=*/ true, /*parameter 2 name=*/`\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowFileWriter.java\n##########\n@@ -69,6 +70,31 @@ public ArrowFileWriter(VectorSchemaRoot root, DictionaryProvider provider, Writa\n     this.metaData = metaData;\n   }\n \n+  public ArrowFileWriter(VectorSchemaRoot root, boolean includeNullCount, CompressionCodec codec,\n\nReview comment:\n       Instead of making an ever expanding list of constructors, I think it is likely better at this point to create an \"Options\"  class that can be built using a builder pattern and passed in.  So we can have one new constructor:\r\n   \r\n   ArrowFileWriter(VectorSchemaRoot root, WriteOptions options, WritableByteChannel) and then maybe one private constructor if necessary that explodes the options.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T18:25:23.693+0000",
                    "updated": "2021-11-02T18:25:23.693+0000",
                    "started": "2021-11-02T18:25:23.692+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673681",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/673683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#issuecomment-957988740\n\n\n   Please update the PR title to *ARROW-12163: [Java] Make compression levels configurable*.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T18:25:30.925+0000",
                    "updated": "2021-11-02T18:25:30.925+0000",
                    "started": "2021-11-02T18:25:30.925+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673683",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/673692",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#issuecomment-957998681\n\n\n   One more note.  The JIRA linked is about adjusting the compression level used by compression algorithms (trading off speed for output size).  I didnt notice a change here for that apologies if i missed it.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T18:26:12.665+0000",
                    "updated": "2021-11-02T18:26:12.665+0000",
                    "started": "2021-11-02T18:26:12.665+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673692",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/673774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#issuecomment-958109374\n\n\n   https://issues.apache.org/jira/browse/ARROW-12163\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T19:39:49.657+0000",
                    "updated": "2021-11-02T19:39:49.657+0000",
                    "started": "2021-11-02T19:39:49.657+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673774",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/674011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#issuecomment-957355018\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T21:30:19.825+0000",
                    "updated": "2021-11-02T21:30:19.825+0000",
                    "started": "2021-11-02T21:30:19.825+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674011",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/674013",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar opened a new pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591\n\n\n   - Adding compression level configurable at read/write files to use Lz4CompressionCodec / ZstdCompressionCodec\r\n   - Changes on modules: vector & compression \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T21:30:35.973+0000",
                    "updated": "2021-11-02T21:30:35.973+0000",
                    "started": "2021-11-02T21:30:35.973+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674013",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/674099",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#issuecomment-957988740\n\n\n   Please update the PR title to *ARROW-12163: [Java] Make compression levels configurable*.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T21:40:48.806+0000",
                    "updated": "2021-11-02T21:40:48.806+0000",
                    "started": "2021-11-02T21:40:48.806+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674099",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/674164",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#discussion_r741330445\n\n\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n+      File fileNoCompression = new File(\"target/write_no_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{dumbCodec.getCodecType(), len, dumbCodec, fileNoCompression});\n+\n+      CompressionCodec lz4Codec = new Lz4CompressionCodec();\n+      File fileLZ4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\n\nReview comment:\n       ```suggestion\r\n         File fileLz4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\r\n   ```\r\n   nit: generally we use camel case for abbreviates as well\n\n##########\nFile path: docs/source/java/ipc.rst\n##########\n@@ -54,6 +54,15 @@ Now, we can begin writing a stream containing some number of these batches. For\n     ArrowStreamWriter writer = new ArrowStreamWriter(root, /*DictionaryProvider=*/null, Channels.newChannel(out));\n \n \n+Here we are not used compression option, but this could be implemented on this way thru codec option:\n\nReview comment:\n       ```suggestion\r\n   Buffer level compression is also supported by passing a codec:\r\n   ```\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n+      File fileNoCompression = new File(\"target/write_no_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{dumbCodec.getCodecType(), len, dumbCodec, fileNoCompression});\n+\n+      CompressionCodec lz4Codec = new Lz4CompressionCodec();\n+      File fileLZ4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{lz4Codec.getCodecType(), len, lz4Codec, fileLZ4Compression});\n+\n+      CompressionCodec zstdCodec = new ZstdCompressionCodec();\n+      File fileZSTDCompression = new File(\"target/write_zstd_compression_\" + len + \".arrow\");\n\nReview comment:\n       ```suggestion\r\n         File fileZstdCompression = new File(\"target/write_zstd_compression_\" + len + \".arrow\");\r\n   ```\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowStreamWriter.java\n##########\n@@ -65,6 +66,48 @@ public ArrowStreamWriter(VectorSchemaRoot root, DictionaryProvider provider, Wri\n     super(root, provider, out, option);\n   }\n \n+  /**\n+   * Construct an ArrowStreamWriter with an optional DictionaryProvider for the OutputStream.\n+   *\n+   * @param root Existing VectorSchemaRoot with vectors to be written.\n+   * @param includeNullCount Controls whether null count is copied to the {@link ArrowRecordBatch}\n+   * @param codec the codec for compressing data. If it is null, then no compression is needed.\n+   * @param alignBuffers Controls if buffers get aligned to 8-byte boundaries.\n+   * @param provider DictionaryProvider for any vectors that are dictionary encoded.\n+   *                 (Optional, can be null)\n+   * @param out OutputStream for writing.\n+   */\n+  public ArrowStreamWriter(VectorSchemaRoot root, boolean includeNullCount, CompressionCodec codec,\n\nReview comment:\n       same comment about constructor explosion as the file writer.\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n+      File fileNoCompression = new File(\"target/write_no_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{dumbCodec.getCodecType(), len, dumbCodec, fileNoCompression});\n+\n+      CompressionCodec lz4Codec = new Lz4CompressionCodec();\n+      File fileLZ4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{lz4Codec.getCodecType(), len, lz4Codec, fileLZ4Compression});\n+\n+      CompressionCodec zstdCodec = new ZstdCompressionCodec();\n+      File fileZSTDCompression = new File(\"target/write_zstd_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{zstdCodec.getCodecType(), len, zstdCodec, fileZSTDCompression});\n+\n+    }\n+    return params;\n+  }\n+\n+  @Test\n+  public void writeReadRandomAccessFile() throws IOException {\n+    RootAllocator allocator = new RootAllocator(Long.MAX_VALUE);\n+    BitVector bitVector = new BitVector(\"boolean\", allocator);\n+    VarCharVector varCharVector = new VarCharVector(\"varchar\", allocator);\n+    for (int i = 0; i < vectorLength; i++) {\n+      bitVector.setSafe(i, i % 2 == 0 ? 0 : 1);\n+      varCharVector.setSafe(i, (\"test\" + i).getBytes(StandardCharsets.UTF_8));\n+    }\n+    bitVector.setValueCount(vectorLength);\n+    varCharVector.setValueCount(vectorLength);\n+\n+    List<Field> fields = Arrays.asList(bitVector.getField(), varCharVector.getField());\n+    List<FieldVector> vectors = Arrays.asList(bitVector, varCharVector);\n+\n+    VectorSchemaRoot schemaRootWrite = new VectorSchemaRoot(fields, vectors);\n\nReview comment:\n       try-with-resources?\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n\nReview comment:\n       ```suggestion\r\n         CompressionCodec noCompression = NoCompressionCodec.INSTANCE;\r\n   ```\r\n   dumb can have negative connotations.\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n+      File fileNoCompression = new File(\"target/write_no_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{dumbCodec.getCodecType(), len, dumbCodec, fileNoCompression});\n+\n+      CompressionCodec lz4Codec = new Lz4CompressionCodec();\n+      File fileLZ4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{lz4Codec.getCodecType(), len, lz4Codec, fileLZ4Compression});\n+\n+      CompressionCodec zstdCodec = new ZstdCompressionCodec();\n+      File fileZSTDCompression = new File(\"target/write_zstd_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{zstdCodec.getCodecType(), len, zstdCodec, fileZSTDCompression});\n+\n+    }\n+    return params;\n+  }\n+\n+  @Test\n+  public void writeReadRandomAccessFile() throws IOException {\n+    RootAllocator allocator = new RootAllocator(Long.MAX_VALUE);\n+    BitVector bitVector = new BitVector(\"boolean\", allocator);\n+    VarCharVector varCharVector = new VarCharVector(\"varchar\", allocator);\n+    for (int i = 0; i < vectorLength; i++) {\n+      bitVector.setSafe(i, i % 2 == 0 ? 0 : 1);\n+      varCharVector.setSafe(i, (\"test\" + i).getBytes(StandardCharsets.UTF_8));\n+    }\n+    bitVector.setValueCount(vectorLength);\n+    varCharVector.setValueCount(vectorLength);\n+\n+    List<Field> fields = Arrays.asList(bitVector.getField(), varCharVector.getField());\n+    List<FieldVector> vectors = Arrays.asList(bitVector, varCharVector);\n+\n+    VectorSchemaRoot schemaRootWrite = new VectorSchemaRoot(fields, vectors);\n+\n+    // write\n+    FileOutputStream fileOutputStream = new FileOutputStream(file);\n+    ArrowFileWriter writer = new ArrowFileWriter(schemaRootWrite, true, codec, true,\n+        null, fileOutputStream.getChannel());\n+    writer.start();\n+    writer.writeBatch();\n+    writer.end();\n+\n+    // validations\n+    Assert.assertEquals(vectorLength, schemaRootWrite.getRowCount());\n\nReview comment:\n       can you check style in other tests, I thought we might static import assertEquals\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowFileWriter.java\n##########\n@@ -69,6 +70,31 @@ public ArrowFileWriter(VectorSchemaRoot root, DictionaryProvider provider, Writa\n     this.metaData = metaData;\n   }\n \n+  public ArrowFileWriter(VectorSchemaRoot root, boolean includeNullCount, CompressionCodec codec,\n\nReview comment:\n       Instead of making an ever expanding list of constructors, I think it is likely better at this point to create an \"Options\"  class that can be built using a builder pattern and passed in.  So we can have one new constructor:\r\n   \r\n   ArrowFileWriter(VectorSchemaRoot root, WriteOptions options, WritableByteChannel) and then maybe one private constructor if necessary that explodes the options.\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n+      File fileNoCompression = new File(\"target/write_no_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{dumbCodec.getCodecType(), len, dumbCodec, fileNoCompression});\n+\n+      CompressionCodec lz4Codec = new Lz4CompressionCodec();\n+      File fileLZ4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{lz4Codec.getCodecType(), len, lz4Codec, fileLZ4Compression});\n+\n+      CompressionCodec zstdCodec = new ZstdCompressionCodec();\n+      File fileZSTDCompression = new File(\"target/write_zstd_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{zstdCodec.getCodecType(), len, zstdCodec, fileZSTDCompression});\n+\n+    }\n+    return params;\n+  }\n+\n+  @Test\n+  public void writeReadRandomAccessFile() throws IOException {\n+    RootAllocator allocator = new RootAllocator(Long.MAX_VALUE);\n\nReview comment:\n       this should be in a try-with-resources block\n\n##########\nFile path: java/compression/src/test/java/org/apache/arrow/compression/TestCompressionCodecFile.java\n##########\n@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.compression;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.compression.CompressionCodec;\n+import org.apache.arrow.vector.compression.CompressionUtil;\n+import org.apache.arrow.vector.compression.NoCompressionCodec;\n+import org.apache.arrow.vector.ipc.ArrowFileReader;\n+import org.apache.arrow.vector.ipc.ArrowFileWriter;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.arrow.vector.ipc.ArrowStreamWriter;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestCompressionCodecFile {\n+  private final CompressionCodec codec;\n+  private final int vectorLength;\n+  private final File file;\n+\n+  public TestCompressionCodecFile(CompressionUtil.CodecType type, int vectorLength, CompressionCodec codec,\n+                                  File file) {\n+    this.codec = codec;\n+    this.file = file;\n+    this.vectorLength = vectorLength;\n+  }\n+\n+  @Parameterized.Parameters(name = \"codec = {0}, length = {1}, file = {2}\")\n+  public static Collection<Object[]> getCodecs() {\n+    List<Object[]> params = new ArrayList<>();\n+\n+    int[] lengths = new int[]{10, 100, 1000};\n+    for (int len : lengths) {\n+      CompressionCodec dumbCodec = NoCompressionCodec.INSTANCE;\n+      File fileNoCompression = new File(\"target/write_no_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{dumbCodec.getCodecType(), len, dumbCodec, fileNoCompression});\n+\n+      CompressionCodec lz4Codec = new Lz4CompressionCodec();\n+      File fileLZ4Compression = new File(\"target/write_lz4_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{lz4Codec.getCodecType(), len, lz4Codec, fileLZ4Compression});\n+\n+      CompressionCodec zstdCodec = new ZstdCompressionCodec();\n+      File fileZSTDCompression = new File(\"target/write_zstd_compression_\" + len + \".arrow\");\n+      params.add(new Object[]{zstdCodec.getCodecType(), len, zstdCodec, fileZSTDCompression});\n+\n+    }\n+    return params;\n+  }\n+\n+  @Test\n+  public void writeReadRandomAccessFile() throws IOException {\n+    RootAllocator allocator = new RootAllocator(Long.MAX_VALUE);\n+    BitVector bitVector = new BitVector(\"boolean\", allocator);\n+    VarCharVector varCharVector = new VarCharVector(\"varchar\", allocator);\n+    for (int i = 0; i < vectorLength; i++) {\n+      bitVector.setSafe(i, i % 2 == 0 ? 0 : 1);\n+      varCharVector.setSafe(i, (\"test\" + i).getBytes(StandardCharsets.UTF_8));\n+    }\n+    bitVector.setValueCount(vectorLength);\n+    varCharVector.setValueCount(vectorLength);\n+\n+    List<Field> fields = Arrays.asList(bitVector.getField(), varCharVector.getField());\n+    List<FieldVector> vectors = Arrays.asList(bitVector, varCharVector);\n+\n+    VectorSchemaRoot schemaRootWrite = new VectorSchemaRoot(fields, vectors);\n+\n+    // write\n+    FileOutputStream fileOutputStream = new FileOutputStream(file);\n+    ArrowFileWriter writer = new ArrowFileWriter(schemaRootWrite, true, codec, true,\n\nReview comment:\n       please try to comment literal paraemters.  e.g. `schemarRootWrite, /*parameter 1 name=*/ true, /*parameter 2 name=*/`\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowFileWriter.java\n##########\n@@ -69,6 +70,31 @@ public ArrowFileWriter(VectorSchemaRoot root, DictionaryProvider provider, Writa\n     this.metaData = metaData;\n   }\n \n+  public ArrowFileWriter(VectorSchemaRoot root, boolean includeNullCount, CompressionCodec codec,\n\nReview comment:\n       Instead of making an ever expanding list of constructors, I think it is likely better at this point to create an \"Options\"  class that can be built using a builder pattern and passed in.  So we can have one new constructor:\r\n   \r\n   ArrowFileWriter(VectorSchemaRoot root, WriteOptions options, WritableByteChannel) and then maybe one private constructor if necessary that explodes the options.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T21:47:26.025+0000",
                    "updated": "2021-11-02T21:47:26.025+0000",
                    "started": "2021-11-02T21:47:26.025+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674164",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/674200",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#issuecomment-957998681\n\n\n   One more note.  The JIRA linked is about adjusting the compression level used by compression algorithms (trading off speed for output size).  I didnt notice a change here for that apologies if i missed it.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T21:51:10.582+0000",
                    "updated": "2021-11-02T21:51:10.582+0000",
                    "started": "2021-11-02T21:51:10.582+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674200",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/674572",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#discussion_r741887094\n\n\n\n##########\nFile path: docs/source/java/ipc.rst\n##########\n@@ -54,6 +54,15 @@ Now, we can begin writing a stream containing some number of these batches. For\n     ArrowStreamWriter writer = new ArrowStreamWriter(root, /*DictionaryProvider=*/null, Channels.newChannel(out));\n \n \n+Buffer level compression is also supported by passing a codec:\n+Lz4CompressionCodec / ZstdCompressionCodec:\n+\n+.. code-block:: Java\n+\n+    ArrowStreamWriter writer = new ArrowStreamWriter(schemaRootWrite, true, new Lz4CompressionCodec(), true,\n+        null, fileOutputStream.getChannel());\n\nReview comment:\n       \"true, null\" doesn't say much about what these parameters are. Should you add commented parameter names as above (e.g. `/*DictionaryProvider=*/null`, but I don't know if it's the right name here?).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-03T12:27:52.083+0000",
                    "updated": "2021-11-03T12:27:52.083+0000",
                    "started": "2021-11-03T12:27:52.082+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674572",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/674573",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#discussion_r741887538\n\n\n\n##########\nFile path: docs/source/java/ipc.rst\n##########\n@@ -54,6 +54,15 @@ Now, we can begin writing a stream containing some number of these batches. For\n     ArrowStreamWriter writer = new ArrowStreamWriter(root, /*DictionaryProvider=*/null, Channels.newChannel(out));\n \n \n+Buffer level compression is also supported by passing a codec:\n+Lz4CompressionCodec / ZstdCompressionCodec:\n\nReview comment:\n       Looks like there is a missing sentence here? Are these the supported codecs? Something else?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-03T12:28:37.815+0000",
                    "updated": "2021-11-03T12:28:37.815+0000",
                    "started": "2021-11-03T12:28:37.815+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674573",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/674645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#issuecomment-959234041\n\n\n   > One more note. The JIRA linked is about adjusting the compression level used by compression algorithms (trading off speed for output size). I didnt notice a change here for that apologies if i missed it.\r\n   \r\n   @davisusanibar that seems true, the original goal of the JIRA ticket was to allow to configure the compression by specifying options like the level. Similarly to what we allow in C++ and Python where you can set `compression` and `compression_level` ( https://arrow.apache.org/docs/python/generated/pyarrow.Codec.html?highlight=codec#pyarrow.Codec ). It seems that the `CompressionCodec` and `CommonsCompressionFactory` do not allow to specify anything else than the `codecType` but not a level for such codecs. Should `Lz4CompressionCodec` and `ZstdCompressionCodec` grow a constructor argument to specify the level?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-03T14:25:13.687+0000",
                    "updated": "2021-11-03T14:25:13.687+0000",
                    "started": "2021-11-03T14:25:13.687+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674645",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/674648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- edited a comment on pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#issuecomment-959234041\n\n\n   > One more note. The JIRA linked is about adjusting the compression level used by compression algorithms (trading off speed for output size). I didnt notice a change here for that apologies if i missed it.\r\n   \r\n   @davisusanibar that seems true, the original goal of the JIRA ticket was to allow to configure the compression by specifying options like the level. Similarly to what we allow in C++ and Python where you can set `compression` and `compression_level` ( https://arrow.apache.org/docs/python/generated/pyarrow.Codec.html?highlight=codec#pyarrow.Codec ).\r\n   \r\n   It seems that the `CompressionCodec` and `CommonsCompressionFactory` do not allow to specify anything else than the `codecType` but not a level for such codecs. \r\n   \r\n   Should `Lz4CompressionCodec` and `ZstdCompressionCodec` grow a constructor argument to specify the level?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-03T14:25:43.433+0000",
                    "updated": "2021-11-03T14:25:43.433+0000",
                    "started": "2021-11-03T14:25:43.432+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674648",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/674659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- removed a comment on pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#issuecomment-959234041\n\n\n   > One more note. The JIRA linked is about adjusting the compression level used by compression algorithms (trading off speed for output size). I didnt notice a change here for that apologies if i missed it.\r\n   \r\n   @davisusanibar that seems true, the original goal of the JIRA ticket was to allow to configure the compression by specifying options like the level. Similarly to what we allow in C++ and Python where you can set `compression` and `compression_level` ( https://arrow.apache.org/docs/python/generated/pyarrow.Codec.html?highlight=codec#pyarrow.Codec ).\r\n   \r\n   It seems that the `CompressionCodec` and `CommonsCompressionFactory` do not allow to specify anything else than the `codecType` but not a level for such codecs. \r\n   \r\n   Should `Lz4CompressionCodec` and `ZstdCompressionCodec` grow a constructor argument to specify the level?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-03T14:37:01.053+0000",
                    "updated": "2021-11-03T14:37:01.053+0000",
                    "started": "2021-11-03T14:37:01.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674659",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/675234",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#issuecomment-959234041\n\n\n   > One more note. The JIRA linked is about adjusting the compression level used by compression algorithms (trading off speed for output size). I didnt notice a change here for that apologies if i missed it.\r\n   \r\n   @davisusanibar that seems true, the original goal of the JIRA ticket was to allow to configure the compression by specifying options like the level. Similarly to what we allow in C++ and Python where you can set `compression` and `compression_level` ( https://arrow.apache.org/docs/python/generated/pyarrow.Codec.html?highlight=codec#pyarrow.Codec ). It seems that the `CompressionCodec` and `CommonsCompressionFactory` do not allow to specify anything else than the `codecType` but not a level for such codecs. Should `Lz4CompressionCodec` and `ZstdCompressionCodec` grow a constructor argument to specify the level?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T00:28:48.029+0000",
                    "updated": "2021-11-04T00:28:48.029+0000",
                    "started": "2021-11-04T00:28:48.029+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "675234",
                    "issueId": "13368767"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/worklog/675256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- edited a comment on pull request #11591:\nURL: https://github.com/apache/arrow/pull/11591#issuecomment-959234041\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T00:34:01.450+0000",
                    "updated": "2021-11-04T00:34:01.450+0000",
                    "started": "2021-11-04T00:34:01.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "675256",
                    "issueId": "13368767"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7006b496[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a6108ba[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b957d6b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2913807b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3141afc1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@69faa034[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4924e645[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7c01a742[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@408230a4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7c45d380[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@123d1483[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@63778a31[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Aug 26 16:05:53 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12163/watchers",
            "watchCount": 3,
            "isWatching": true
        },
        "created": "2021-03-31T04:14:39.000+0000",
        "updated": "2022-08-26T16:20:59.000+0000",
        "timeoriginalestimate": null,
        "description": "Today we use default compression levels in compressors, these should be configurable via constructor.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Make compression levels configurable",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368767/comment/17585514",
                    "id": "17585514",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned per [project policy|https://arrow.apache.org/docs/dev/developers/bug_reports.html#issue-assignment]. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-08-26T16:05:53.097+0000",
                    "updated": "2022-08-26T16:20:59.622+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0pe6w:",
        "customfield_12314139": null
    }
}