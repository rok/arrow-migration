{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13485215",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215",
    "key": "ARROW-17966",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17966/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/816997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#issuecomment-1278970995\n\n   This PR currently depends on a non-official (PR fork) version of Substrait.  We probably should not merge until the corresponding Substrait PR has merged.\n\n\n",
                    "created": "2022-10-14T12:54:40.535+0000",
                    "updated": "2022-10-14T12:54:40.535+0000",
                    "started": "2022-10-14T12:54:40.535+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816997",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/816998",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#issuecomment-1278971349\n\n   https://issues.apache.org/jira/browse/ARROW-17966\n\n\n",
                    "created": "2022-10-14T12:54:58.786+0000",
                    "updated": "2022-10-14T12:54:58.786+0000",
                    "started": "2022-10-14T12:54:58.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816998",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/816999",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#issuecomment-1278971389\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-10-14T12:55:01.033+0000",
                    "updated": "2022-10-14T12:55:01.033+0000",
                    "started": "2022-10-14T12:55:01.033+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816999",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/818516",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on code in PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#discussion_r999574162\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -678,17 +693,48 @@ static EnumParser<OverflowBehavior> kOverflowParser =\n     GetEnumParser<OverflowBehavior>(kOverflowOptions);\n \n template <typename Enum>\n-Result<Enum> ParseEnumArg(const SubstraitCall& call, uint32_t arg_index,\n+Result<std::optional<Enum>> ParseOption(const SubstraitCall& call,\n+                                        std::string_view option_name,\n+                                        const EnumParser<Enum>& parser,\n+                                        const std::vector<Enum>& implemented_options) {\n+  std::optional<std::vector<std::string> const*> enum_arg = call.GetOption(option_name);\n+  if (!enum_arg.has_value()) {\n+    return std::nullopt;\n+  }\n+  std::vector<std::string> const* prefs = *enum_arg;\n+  for (const std::string& pref : *prefs) {\n+    ARROW_ASSIGN_OR_RAISE(Enum parsed, parser(pref));\n+    for (Enum implemented_opt : implemented_options) {\n+      if (implemented_opt == parsed) {\n+        return parsed;\n+      }\n+    }\n+  }\n+  // Prepare error message\n+  std::stringstream joined_prefs;\n+  for (std::size_t i = 0; i < prefs->size(); i++) {\n+    joined_prefs << (*prefs)[i];\n+    if (i < prefs->size() - 1) {\n+      joined_prefs << \", \";\n+    }\n+  }\n+  return Status::NotImplemented(\"During a call to a function with id \", call.id().uri,\n+                                \"#\", call.id().name, \" the plan requested the option \",\n+                                option_name, \" to be one of [\", joined_prefs.str(),\n+                                \"] but none of those option values are supported\");\n\nReview Comment:\n   ```suggestion\r\n                                   \"] but the only supported options are [\",\r\n                                   implemented_options_as_strings_somehow, \"]\");\r\n   ```\r\n   ?\n\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -156,15 +156,33 @@ Result<compute::Expression> SubstraitCall::GetValueArg(uint32_t index) const {\n   return value_arg_it->second;\n }\n \n-bool SubstraitCall::HasValueArg(uint32_t index) const {\n+bool SubstraitCall::HasValueArg(int index) const {\n   return value_args_.find(index) != value_args_.end();\n }\n \n-void SubstraitCall::SetValueArg(uint32_t index, compute::Expression value_arg) {\n+void SubstraitCall::SetValueArg(int index, compute::Expression value_arg) {\n   size_ = std::max(size_, index + 1);\n   value_args_[index] = std::move(value_arg);\n }\n \n+std::optional<std::vector<std::string> const*> SubstraitCall::GetOption(\n+    std::string_view option_name) const {\n+  auto opt = options_.find(std::string(option_name));\n+  if (opt == options_.end()) {\n+    return std::nullopt;\n+  }\n+  return &opt->second;\n+}\n+\n+void SubstraitCall::SetOption(std::string_view option_name,\n+                              const std::vector<std::string_view>& option_preferences) {\n+  std::vector<std::string> prefs_copy;\n+  std::transform(option_preferences.begin(), option_preferences.end(),\n+                 std::back_inserter(prefs_copy),\n+                 [](std::string_view pref) { return std::string(pref); });\n+  options_[std::string(option_name)] = prefs_copy;\n\nReview Comment:\n   Nit: copying a temporary vector and using std algorithms\r\n   ```suggestion\r\n     auto& prefs = options_[std::string(option_name)];\r\n     for (std::string_view pref : option_preferences) {\r\n       prefs.emplace_back(pref);\r\n     }\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -645,22 +663,19 @@ struct ExtensionIdRegistryImpl : ExtensionIdRegistry {\n };\n \n template <typename Enum>\n-using EnumParser = std::function<Result<Enum>(std::optional<std::string_view>)>;\n+using EnumParser = std::function<Result<Enum>(std::string_view)>;\n \n template <typename Enum>\n EnumParser<Enum> GetEnumParser(const std::vector<std::string>& options) {\n   std::unordered_map<std::string, Enum> parse_map;\n   for (std::size_t i = 0; i < options.size(); i++) {\n     parse_map[options[i]] = static_cast<Enum>(i + 1);\n   }\n-  return [parse_map](std::optional<std::string_view> enum_val) -> Result<Enum> {\n-    if (!enum_val) {\n-      // Assumes 0 is always kUnspecified in Enum\n-      return static_cast<Enum>(0);\n-    }\n-    auto maybe_parsed = parse_map.find(std::string(*enum_val));\n+  return [parse_map](std::string_view enum_val) -> Result<Enum> {\n\nReview Comment:\n   ```suggestion\r\n     return [parse_map = std::move(parse_map)](std::string_view enum_val) -> Result<Enum> {\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -645,22 +663,19 @@ struct ExtensionIdRegistryImpl : ExtensionIdRegistry {\n };\n \n template <typename Enum>\n-using EnumParser = std::function<Result<Enum>(std::optional<std::string_view>)>;\n+using EnumParser = std::function<Result<Enum>(std::string_view)>;\n \n template <typename Enum>\n EnumParser<Enum> GetEnumParser(const std::vector<std::string>& options) {\n   std::unordered_map<std::string, Enum> parse_map;\n   for (std::size_t i = 0; i < options.size(); i++) {\n     parse_map[options[i]] = static_cast<Enum>(i + 1);\n   }\n-  return [parse_map](std::optional<std::string_view> enum_val) -> Result<Enum> {\n-    if (!enum_val) {\n-      // Assumes 0 is always kUnspecified in Enum\n-      return static_cast<Enum>(0);\n-    }\n-    auto maybe_parsed = parse_map.find(std::string(*enum_val));\n+  return [parse_map](std::string_view enum_val) -> Result<Enum> {\n+    auto maybe_parsed = parse_map.find(std::string(enum_val));\n\nReview Comment:\n   Nit: it's a minor convention that `/mabe_\\w+/` indicates a `Result<>` or sometimes an `optional<>`\r\n   ```suggestion\r\n       auto it = parse_map.find(std::string(enum_val));\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -678,17 +693,48 @@ static EnumParser<OverflowBehavior> kOverflowParser =\n     GetEnumParser<OverflowBehavior>(kOverflowOptions);\n \n template <typename Enum>\n-Result<Enum> ParseEnumArg(const SubstraitCall& call, uint32_t arg_index,\n+Result<std::optional<Enum>> ParseOption(const SubstraitCall& call,\n+                                        std::string_view option_name,\n+                                        const EnumParser<Enum>& parser,\n+                                        const std::vector<Enum>& implemented_options) {\n+  std::optional<std::vector<std::string> const*> enum_arg = call.GetOption(option_name);\n+  if (!enum_arg.has_value()) {\n+    return std::nullopt;\n+  }\n+  std::vector<std::string> const* prefs = *enum_arg;\n+  for (const std::string& pref : *prefs) {\n+    ARROW_ASSIGN_OR_RAISE(Enum parsed, parser(pref));\n+    for (Enum implemented_opt : implemented_options) {\n+      if (implemented_opt == parsed) {\n+        return parsed;\n+      }\n+    }\n+  }\n+  // Prepare error message\n+  std::stringstream joined_prefs;\n+  for (std::size_t i = 0; i < prefs->size(); i++) {\n+    joined_prefs << (*prefs)[i];\n+    if (i < prefs->size() - 1) {\n+      joined_prefs << \", \";\n+    }\n+  }\n+  return Status::NotImplemented(\"During a call to a function with id \", call.id().uri,\n+                                \"#\", call.id().name, \" the plan requested the option \",\n+                                option_name, \" to be one of [\", joined_prefs.str(),\n\nReview Comment:\n   Nit: use JoinStrings\r\n   ```suggestion\r\n     return Status::NotImplemented(\"During a call to a function with id \", call.id().uri,\r\n                                   \"#\", call.id().name, \" the plan requested the option \",\r\n                                   option_name, \" to be one of [\",\r\n                                   arrow::internal::JoinStrings(*prefs),\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -698,12 +744,15 @@ Result<std::vector<compute::Expression>> GetValueArgs(const SubstraitCall& call,\n ExtensionIdRegistry::SubstraitCallToArrow DecodeOptionlessOverflowableArithmetic(\n     const std::string& function_name) {\n   return [function_name](const SubstraitCall& call) -> Result<compute::Expression> {\n-    ARROW_ASSIGN_OR_RAISE(OverflowBehavior overflow_behavior,\n-                          ParseEnumArg(call, 0, kOverflowParser));\n+    ARROW_ASSIGN_OR_RAISE(\n+        std::optional<OverflowBehavior> maybe_overflow_behavior,\n+        ParseOption(call, \"overflow\", kOverflowParser,\n+                    {OverflowBehavior::kSilent, OverflowBehavior::kError}));\n\nReview Comment:\n   Not sure how you feel about this, but: we could save some boilerplate by having ParseOption just return `implemented_options[0]` as the default in case the option is unspecified.\r\n   ```suggestion\r\n           OverflowBehavior overflow_behavior,\r\n           ParseOption(call, \"overflow\", kOverflowParser,\r\n                       {OverflowBehavior::kSilent, OverflowBehavior::kError}));\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/expression_internal.cc:\n##########\n@@ -90,6 +95,9 @@ Result<SubstraitCall> DecodeScalarFunction(\n     ARROW_RETURN_NOT_OK(DecodeArg(scalar_fn.arguments(i), static_cast<uint32_t>(i), &call,\n                                   ext_set, conversion_options));\n   }\n+  for (int i = 0; i < scalar_fn.options_size(); i++) {\n+    DecodeOption(scalar_fn.options(i), &call);\n\nReview Comment:\n   ```suggestion\r\n     for (const auto& option : scalar_fn.options()) {\r\n       DecodeOption(option, &call);\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -156,15 +156,33 @@ Result<compute::Expression> SubstraitCall::GetValueArg(uint32_t index) const {\n   return value_arg_it->second;\n }\n \n-bool SubstraitCall::HasValueArg(uint32_t index) const {\n+bool SubstraitCall::HasValueArg(int index) const {\n   return value_args_.find(index) != value_args_.end();\n }\n \n-void SubstraitCall::SetValueArg(uint32_t index, compute::Expression value_arg) {\n+void SubstraitCall::SetValueArg(int index, compute::Expression value_arg) {\n   size_ = std::max(size_, index + 1);\n   value_args_[index] = std::move(value_arg);\n }\n \n+std::optional<std::vector<std::string> const*> SubstraitCall::GetOption(\n+    std::string_view option_name) const {\n+  auto opt = options_.find(std::string(option_name));\n+  if (opt == options_.end()) {\n+    return std::nullopt;\n\nReview Comment:\n   Nit: this could be simpler\r\n   ```suggestion\r\n   const std::vector<std::string>* SubstraitCall::GetOption(\r\n       std::string_view option_name) const {\r\n     auto opt = options_.find(std::string(option_name));\r\n     if (opt == options_.end()) {\r\n       return nullptr;\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/plan_internal.cc:\n##########\n@@ -132,10 +133,29 @@ Result<ExtensionSet> GetExtensionSetFromPlan(const substrait::Plan& plan,\n                             conversion_options, registry);\n }\n \n+namespace {\n+\n+// FIXME Is there some way to get these from the cmake files?\n\nReview Comment:\n   There does not appear to be a way to inspect a substrait clone and get the version numbers apart from parsing CHANGELOG.md. You could add `#cmakedefine ARROW_SUBSTRAIT_BUILD_VERSION` to config.h.cmake then parse that here, or parse it in cmake and add `#cmakedefine ARROW_SUBSTRAIT_BUILD_VERSION_MAJOR` etc to config.h.cmake. This is for example how ThirdpartyToolchain.cmake provides a `#define` to indicate that jemalloc is vendored https://github.com/drin/arrow/blob/dea465396f981f9bd9862e501dc6750ca4fee6d9/cpp/cmake_modules/ThirdpartyToolchain.cmake#L1864-L1865 -> https://github.com/drin/arrow/blob/dea465396f981f9bd9862e501dc6750ca4fee6d9/cpp/src/arrow/util/config.h.cmake#L48\n\n\n\n",
                    "created": "2022-10-19T15:23:08.433+0000",
                    "updated": "2022-10-19T15:23:08.433+0000",
                    "started": "2022-10-19T15:23:08.433+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818516",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/818518",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on code in PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#discussion_r999646728\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -156,15 +156,33 @@ Result<compute::Expression> SubstraitCall::GetValueArg(uint32_t index) const {\n   return value_arg_it->second;\n }\n \n-bool SubstraitCall::HasValueArg(uint32_t index) const {\n+bool SubstraitCall::HasValueArg(int index) const {\n   return value_args_.find(index) != value_args_.end();\n }\n \n-void SubstraitCall::SetValueArg(uint32_t index, compute::Expression value_arg) {\n+void SubstraitCall::SetValueArg(int index, compute::Expression value_arg) {\n   size_ = std::max(size_, index + 1);\n   value_args_[index] = std::move(value_arg);\n }\n \n+std::optional<std::vector<std::string> const*> SubstraitCall::GetOption(\n+    std::string_view option_name) const {\n+  auto opt = options_.find(std::string(option_name));\n+  if (opt == options_.end()) {\n+    return std::nullopt;\n+  }\n+  return &opt->second;\n+}\n+\n+void SubstraitCall::SetOption(std::string_view option_name,\n+                              const std::vector<std::string_view>& option_preferences) {\n\nReview Comment:\n   Should this assert `!option_preferences.empty()`?\n\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -645,22 +663,19 @@ struct ExtensionIdRegistryImpl : ExtensionIdRegistry {\n };\n \n template <typename Enum>\n-using EnumParser = std::function<Result<Enum>(std::optional<std::string_view>)>;\n+using EnumParser = std::function<Result<Enum>(std::string_view)>;\n \n template <typename Enum>\n EnumParser<Enum> GetEnumParser(const std::vector<std::string>& options) {\n   std::unordered_map<std::string, Enum> parse_map;\n   for (std::size_t i = 0; i < options.size(); i++) {\n     parse_map[options[i]] = static_cast<Enum>(i + 1);\n\nReview Comment:\n   It's probably not necessary to reify \"UNSPECIFIED\" in all the enumerations. We will always either coerce to a default or error because a real value was required. That could be expressed in EnumParser as:\r\n   ```c++\r\n   template <typename Enum>\r\n   using EnumParser = std::function<Result<Enum>(std::string_view repr, std::optional<Enum> default)>;\r\n   ```\r\n   ... and it would save you some one-based indexing headache.\r\n   \r\n   Probably out of scope for this PR\n\n\n\n",
                    "created": "2022-10-19T15:53:40.344+0000",
                    "updated": "2022-10-19T15:53:40.344+0000",
                    "started": "2022-10-19T15:53:40.343+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818518",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/818633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#discussion_r1000021551\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -156,15 +156,33 @@ Result<compute::Expression> SubstraitCall::GetValueArg(uint32_t index) const {\n   return value_arg_it->second;\n }\n \n-bool SubstraitCall::HasValueArg(uint32_t index) const {\n+bool SubstraitCall::HasValueArg(int index) const {\n   return value_args_.find(index) != value_args_.end();\n }\n \n-void SubstraitCall::SetValueArg(uint32_t index, compute::Expression value_arg) {\n+void SubstraitCall::SetValueArg(int index, compute::Expression value_arg) {\n   size_ = std::max(size_, index + 1);\n   value_args_[index] = std::move(value_arg);\n }\n \n+std::optional<std::vector<std::string> const*> SubstraitCall::GetOption(\n+    std::string_view option_name) const {\n+  auto opt = options_.find(std::string(option_name));\n+  if (opt == options_.end()) {\n+    return std::nullopt;\n+  }\n+  return &opt->second;\n+}\n+\n+void SubstraitCall::SetOption(std::string_view option_name,\n+                              const std::vector<std::string_view>& option_preferences) {\n+  std::vector<std::string> prefs_copy;\n+  std::transform(option_preferences.begin(), option_preferences.end(),\n+                 std::back_inserter(prefs_copy),\n+                 [](std::string_view pref) { return std::string(pref); });\n+  options_[std::string(option_name)] = prefs_copy;\n\nReview Comment:\n   Ah, true, could have done a `std::move` on `prefs_copy`.  I agree this is more readable though.\n\n\n\n",
                    "created": "2022-10-19T23:45:37.917+0000",
                    "updated": "2022-10-19T23:45:37.917+0000",
                    "started": "2022-10-19T23:45:37.917+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818633",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/818650",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#discussion_r1000040264\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -678,17 +693,48 @@ static EnumParser<OverflowBehavior> kOverflowParser =\n     GetEnumParser<OverflowBehavior>(kOverflowOptions);\n \n template <typename Enum>\n-Result<Enum> ParseEnumArg(const SubstraitCall& call, uint32_t arg_index,\n+Result<std::optional<Enum>> ParseOption(const SubstraitCall& call,\n+                                        std::string_view option_name,\n+                                        const EnumParser<Enum>& parser,\n+                                        const std::vector<Enum>& implemented_options) {\n+  std::optional<std::vector<std::string> const*> enum_arg = call.GetOption(option_name);\n+  if (!enum_arg.has_value()) {\n+    return std::nullopt;\n+  }\n+  std::vector<std::string> const* prefs = *enum_arg;\n+  for (const std::string& pref : *prefs) {\n+    ARROW_ASSIGN_OR_RAISE(Enum parsed, parser(pref));\n+    for (Enum implemented_opt : implemented_options) {\n+      if (implemented_opt == parsed) {\n+        return parsed;\n+      }\n+    }\n+  }\n+  // Prepare error message\n+  std::stringstream joined_prefs;\n+  for (std::size_t i = 0; i < prefs->size(); i++) {\n+    joined_prefs << (*prefs)[i];\n+    if (i < prefs->size() - 1) {\n+      joined_prefs << \", \";\n+    }\n+  }\n+  return Status::NotImplemented(\"During a call to a function with id \", call.id().uri,\n+                                \"#\", call.id().name, \" the plan requested the option \",\n+                                option_name, \" to be one of [\", joined_prefs.str(),\n+                                \"] but none of those option values are supported\");\n\nReview Comment:\n   Done, and added a test case for this situation.\n\n\n\n",
                    "created": "2022-10-20T00:34:52.200+0000",
                    "updated": "2022-10-20T00:34:52.200+0000",
                    "started": "2022-10-20T00:34:52.200+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818650",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/818651",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#discussion_r1000041720\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -698,12 +744,15 @@ Result<std::vector<compute::Expression>> GetValueArgs(const SubstraitCall& call,\n ExtensionIdRegistry::SubstraitCallToArrow DecodeOptionlessOverflowableArithmetic(\n     const std::string& function_name) {\n   return [function_name](const SubstraitCall& call) -> Result<compute::Expression> {\n-    ARROW_ASSIGN_OR_RAISE(OverflowBehavior overflow_behavior,\n-                          ParseEnumArg(call, 0, kOverflowParser));\n+    ARROW_ASSIGN_OR_RAISE(\n+        std::optional<OverflowBehavior> maybe_overflow_behavior,\n+        ParseOption(call, \"overflow\", kOverflowParser,\n+                    {OverflowBehavior::kSilent, OverflowBehavior::kError}));\n\nReview Comment:\n   I made it `ParseOptionOrElse` just to be contrarian.\n\n\n\n",
                    "created": "2022-10-20T00:39:12.674+0000",
                    "updated": "2022-10-20T00:39:12.674+0000",
                    "started": "2022-10-20T00:39:12.674+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818651",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/818653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#discussion_r1000043752\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -156,15 +156,33 @@ Result<compute::Expression> SubstraitCall::GetValueArg(uint32_t index) const {\n   return value_arg_it->second;\n }\n \n-bool SubstraitCall::HasValueArg(uint32_t index) const {\n+bool SubstraitCall::HasValueArg(int index) const {\n   return value_args_.find(index) != value_args_.end();\n }\n \n-void SubstraitCall::SetValueArg(uint32_t index, compute::Expression value_arg) {\n+void SubstraitCall::SetValueArg(int index, compute::Expression value_arg) {\n   size_ = std::max(size_, index + 1);\n   value_args_[index] = std::move(value_arg);\n }\n \n+std::optional<std::vector<std::string> const*> SubstraitCall::GetOption(\n+    std::string_view option_name) const {\n+  auto opt = options_.find(std::string(option_name));\n+  if (opt == options_.end()) {\n+    return std::nullopt;\n+  }\n+  return &opt->second;\n+}\n+\n+void SubstraitCall::SetOption(std::string_view option_name,\n+                              const std::vector<std::string_view>& option_preferences) {\n\nReview Comment:\n   I went ahead and made it a full-blown invalid status as I can see this happening and it might be nice to be graceful about it.\n\n\n\n",
                    "created": "2022-10-20T00:44:58.296+0000",
                    "updated": "2022-10-20T00:44:58.296+0000",
                    "started": "2022-10-20T00:44:58.296+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818653",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/818655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#discussion_r1000044978\n\n\n##########\ncpp/src/arrow/engine/substrait/expression_internal.cc:\n##########\n@@ -90,6 +95,9 @@ Result<SubstraitCall> DecodeScalarFunction(\n     ARROW_RETURN_NOT_OK(DecodeArg(scalar_fn.arguments(i), static_cast<uint32_t>(i), &call,\n                                   ext_set, conversion_options));\n   }\n+  for (int i = 0; i < scalar_fn.options_size(); i++) {\n+    DecodeOption(scalar_fn.options(i), &call);\n\nReview Comment:\n   Fixed.\n\n\n\n",
                    "created": "2022-10-20T00:48:18.524+0000",
                    "updated": "2022-10-20T00:48:18.524+0000",
                    "started": "2022-10-20T00:48:18.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818655",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/818656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#issuecomment-1284746747\n\n   @bkietz Thanks for the review.  I still need to take a look at the cmake changes but I'll try that out later.\n\n\n",
                    "created": "2022-10-20T00:48:49.045+0000",
                    "updated": "2022-10-20T00:48:49.045+0000",
                    "started": "2022-10-20T00:48:49.044+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818656",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/818657",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#discussion_r1000045450\n\n\n##########\ncpp/src/arrow/engine/substrait/extension_set.cc:\n##########\n@@ -645,22 +663,19 @@ struct ExtensionIdRegistryImpl : ExtensionIdRegistry {\n };\n \n template <typename Enum>\n-using EnumParser = std::function<Result<Enum>(std::optional<std::string_view>)>;\n+using EnumParser = std::function<Result<Enum>(std::string_view)>;\n \n template <typename Enum>\n EnumParser<Enum> GetEnumParser(const std::vector<std::string>& options) {\n   std::unordered_map<std::string, Enum> parse_map;\n   for (std::size_t i = 0; i < options.size(); i++) {\n     parse_map[options[i]] = static_cast<Enum>(i + 1);\n\nReview Comment:\n   Agreed to leave out of scope for this PR.  I also agree it would probably be a good idea.  The \"unspecified\" thing is a relic from the old behavior where \"unspecified\" was something you had to explicitly specify.\n\n\n\n",
                    "created": "2022-10-20T00:49:39.170+0000",
                    "updated": "2022-10-20T00:49:39.170+0000",
                    "started": "2022-10-20T00:49:39.170+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818657",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/819779",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#issuecomment-1289318862\n\n   Deferring the cmake changes to https://issues.apache.org/jira/browse/ARROW-18145\n\n\n",
                    "created": "2022-10-24T16:52:17.785+0000",
                    "updated": "2022-10-24T16:52:17.785+0000",
                    "started": "2022-10-24T16:52:17.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "819779",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/819784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#issuecomment-1289330068\n\n   @bkietz I'm moving this to ready-for-review.  @rtpsw has been trying to get Ibis / Arrow compatibility working and this PR enables that, even though it temporarily breaks us from the main branch of Substrait while we wait on https://github.com/substrait-io/substrait/pull/342 to merge.  However, there is some work that is stacking up on top of this and branch management has started to cause some headaches.\r\n   \r\n   Curious to get your thoughts on moving forward as-is with this PR, to make it easier for people working on integration, and addressing any remaining discrepancies (e.g. Enum vs string) in follow-up PRs.\n\n\n",
                    "created": "2022-10-24T17:00:54.059+0000",
                    "updated": "2022-10-24T17:00:54.059+0000",
                    "started": "2022-10-24T17:00:54.058+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "819784",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/821962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on code in PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#discussion_r1009513386\n\n\n##########\ncpp/cmake_modules/ThirdpartyToolchain.cmake:\n##########\n@@ -657,6 +657,13 @@ else()\n            \"${THIRDPARTY_MIRROR_URL}/snappy-${ARROW_SNAPPY_BUILD_VERSION}.tar.gz\")\n endif()\n \n+# Remove these two lines once https://github.com/substrait-io/substrait/pull/342 merges\n\nReview Comment:\n   Moving forward sounds fine to me; this is why we're pulling this dependency from a URL after all. I've added https://issues.apache.org/jira/browse/ARROW-18201 to track the reversion. In the meantime, please move this modification to [versions.txt](https://github.com/westonpace/arrow/blob/cdb16492027dec59e6b8c55440077bd0dd3c919d/cpp/thirdparty/versions.txt#L84-L85), annotated with `// TODO(ARROW-18201)`\n\n\n\n",
                    "created": "2022-10-31T14:53:16.367+0000",
                    "updated": "2022-10-31T14:53:16.367+0000",
                    "started": "2022-10-31T14:53:16.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "821962",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/825879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#issuecomment-1314278341\n\n   The feature has now merged into Substrait.  Unfortunately, it seems releases are automated on Sundays so this probably can't merge until after Sunday at which time I will change the version numbers to be 0.20.0.\n\n\n",
                    "created": "2022-11-14T19:39:28.095+0000",
                    "updated": "2022-11-14T19:39:28.095+0000",
                    "started": "2022-11-14T19:39:28.095+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "825879",
                    "issueId": "13485215"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485215/worklog/826164",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on code in PR #14415:\nURL: https://github.com/apache/arrow/pull/14415#discussion_r1022848852\n\n\n##########\ncpp/src/arrow/engine/substrait/expression_internal.cc:\n##########\n@@ -80,15 +69,31 @@ Status DecodeArg(const substrait::FunctionArgument& arg, uint32_t idx,\n   return Status::OK();\n }\n \n+Status DecodeOption(const substrait::FunctionOption& opt, SubstraitCall* call) {\n+  std::vector<std::string_view> prefs;\n+  if (opt.preference_size() == 0) {\n+    return Status::Invalid(\"Invalid Substrait plan.  The option \", opt.name(),\n+                           \" is specified but does not list any choices\");\n+  }\n+  for (const auto& preference : opt.preference()) {\n+    prefs.push_back(preference);\n+  }\n+  call->SetOption(opt.name(), prefs);\n\nReview Comment:\n   ```suggestion\r\n     call->SetOption(opt.name(), std::move(prefs));\r\n   ```\n\n\n\n",
                    "created": "2022-11-15T14:25:02.333+0000",
                    "updated": "2022-11-15T14:25:02.333+0000",
                    "started": "2022-11-15T14:25:02.333+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826164",
                    "issueId": "13485215"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6e627c07[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6eda5438[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f752012[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3b2c850[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f293d73[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2ac62e78[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c25ee82[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@29c0411e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f7433f0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@44da7388[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5718c46f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7c7bb723[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "2022-10-08 00:16:29.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17966/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-10-08T00:16:29.000+0000",
        "updated": "2022-11-15T14:25:02.000+0000",
        "timeoriginalestimate": null,
        "description": "Substrait is presumably going to change how it defines optional arguments in https://github.com/substrait-io/substrait/pull/342 .\r\n\r\nThis change will require a corresponding change in Acero (this should also bring Acero in line with Ibis & Isthmus).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Adjust to new format for Substrait optional arguments",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|z196nk:",
        "customfield_12314139": null
    }
}