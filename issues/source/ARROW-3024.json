{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13177743",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177743",
    "key": "ARROW-3024",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3024/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177743/worklog/132521",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2403: ARROW-3024: [C++] Remove mutex in MemoryPool implementations\nURL: https://github.com/apache/arrow/pull/2403\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T18:27:38.716+0000",
                    "updated": "2018-08-08T18:27:38.716+0000",
                    "started": "2018-08-08T18:27:38.715+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132521",
                    "issueId": "13177743"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177743/worklog/132530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2403: ARROW-3024: [C++] Remove mutex in MemoryPool implementations\nURL: https://github.com/apache/arrow/pull/2403#discussion_r208693696\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.cc\n ##########\n @@ -88,22 +88,43 @@ MemoryPool::~MemoryPool() {}\n \n int64_t MemoryPool::max_memory() const { return -1; }\n \n-class DefaultMemoryPool : public MemoryPool {\n+///////////////////////////////////////////////////////////////////////\n+// Helper tracking memory statistics\n+\n+class MemoryPoolStats {\n  public:\n-  DefaultMemoryPool() : bytes_allocated_(0) { max_memory_ = 0; }\n+  MemoryPoolStats() : bytes_allocated_(0), max_memory_(0) {}\n+\n+  int64_t max_memory() const { return max_memory_.load(); }\n+\n+  int64_t bytes_allocated() const { return bytes_allocated_.load(); }\n+\n+  inline void UpdateAllocatedBytes(int64_t diff) {\n+    auto allocated = bytes_allocated_.fetch_add(diff) + diff;\n+    DCHECK_GE(allocated, 0) << \"allocation counter became negative\";\n+    // \"maximum\" allocated memory is ill-defined in multi-threaded code,\n+    // so don't try to be too rigorous here\n+    if (diff > 0 && allocated > max_memory_) {\n \n Review comment:\n   Could use CAS here http://www.cplusplus.com/reference/atomic/atomic_compare_exchange_weak/\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T18:47:13.780+0000",
                    "updated": "2018-08-08T18:47:13.780+0000",
                    "started": "2018-08-08T18:47:13.779+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132530",
                    "issueId": "13177743"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177743/worklog/132531",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2403: ARROW-3024: [C++] Remove mutex in MemoryPool implementations\nURL: https://github.com/apache/arrow/pull/2403#discussion_r208693834\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.cc\n ##########\n @@ -88,22 +88,43 @@ MemoryPool::~MemoryPool() {}\n \n int64_t MemoryPool::max_memory() const { return -1; }\n \n Review comment:\n   Remove `include <mutex>` in this file for good measure?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T18:47:13.839+0000",
                    "updated": "2018-08-08T18:47:13.839+0000",
                    "started": "2018-08-08T18:47:13.838+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132531",
                    "issueId": "13177743"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177743/worklog/132533",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2403: ARROW-3024: [C++] Remove mutex in MemoryPool implementations\nURL: https://github.com/apache/arrow/pull/2403#discussion_r208695085\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.cc\n ##########\n @@ -88,22 +88,43 @@ MemoryPool::~MemoryPool() {}\n \n int64_t MemoryPool::max_memory() const { return -1; }\n \n-class DefaultMemoryPool : public MemoryPool {\n+///////////////////////////////////////////////////////////////////////\n+// Helper tracking memory statistics\n+\n+class MemoryPoolStats {\n  public:\n-  DefaultMemoryPool() : bytes_allocated_(0) { max_memory_ = 0; }\n+  MemoryPoolStats() : bytes_allocated_(0), max_memory_(0) {}\n+\n+  int64_t max_memory() const { return max_memory_.load(); }\n+\n+  int64_t bytes_allocated() const { return bytes_allocated_.load(); }\n+\n+  inline void UpdateAllocatedBytes(int64_t diff) {\n+    auto allocated = bytes_allocated_.fetch_add(diff) + diff;\n+    DCHECK_GE(allocated, 0) << \"allocation counter became negative\";\n+    // \"maximum\" allocated memory is ill-defined in multi-threaded code,\n+    // so don't try to be too rigorous here\n+    if (diff > 0 && allocated > max_memory_) {\n \n Review comment:\n   AFAIK, that only works for equality testing.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T18:50:54.321+0000",
                    "updated": "2018-08-08T18:50:54.321+0000",
                    "started": "2018-08-08T18:50:54.320+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132533",
                    "issueId": "13177743"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177743/worklog/132534",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2403: ARROW-3024: [C++] Remove mutex in MemoryPool implementations\nURL: https://github.com/apache/arrow/pull/2403#discussion_r208695109\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.cc\n ##########\n @@ -88,22 +88,43 @@ MemoryPool::~MemoryPool() {}\n \n int64_t MemoryPool::max_memory() const { return -1; }\n \n Review comment:\n   Oh, right.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T18:51:00.139+0000",
                    "updated": "2018-08-08T18:51:00.139+0000",
                    "started": "2018-08-08T18:51:00.139+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132534",
                    "issueId": "13177743"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177743/worklog/132537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2403: ARROW-3024: [C++] Remove mutex in MemoryPool implementations\nURL: https://github.com/apache/arrow/pull/2403#discussion_r208696794\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.cc\n ##########\n @@ -88,22 +88,43 @@ MemoryPool::~MemoryPool() {}\n \n int64_t MemoryPool::max_memory() const { return -1; }\n \n-class DefaultMemoryPool : public MemoryPool {\n+///////////////////////////////////////////////////////////////////////\n+// Helper tracking memory statistics\n+\n+class MemoryPoolStats {\n  public:\n-  DefaultMemoryPool() : bytes_allocated_(0) { max_memory_ = 0; }\n+  MemoryPoolStats() : bytes_allocated_(0), max_memory_(0) {}\n+\n+  int64_t max_memory() const { return max_memory_.load(); }\n+\n+  int64_t bytes_allocated() const { return bytes_allocated_.load(); }\n+\n+  inline void UpdateAllocatedBytes(int64_t diff) {\n+    auto allocated = bytes_allocated_.fetch_add(diff) + diff;\n+    DCHECK_GE(allocated, 0) << \"allocation counter became negative\";\n+    // \"maximum\" allocated memory is ill-defined in multi-threaded code,\n+    // so don't try to be too rigorous here\n+    if (diff > 0 && allocated > max_memory_) {\n \n Review comment:\n   Atomics make my head hurt a little bit but it may be possible by writing a loop https://stackoverflow.com/a/16190791. I don't know that it's worth stressing out too much about\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T18:56:25.727+0000",
                    "updated": "2018-08-08T18:56:25.727+0000",
                    "started": "2018-08-08T18:56:25.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132537",
                    "issueId": "13177743"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177743/worklog/132546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2403: ARROW-3024: [C++] Remove mutex in MemoryPool implementations\nURL: https://github.com/apache/arrow/pull/2403#discussion_r208697304\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.cc\n ##########\n @@ -88,22 +88,43 @@ MemoryPool::~MemoryPool() {}\n \n int64_t MemoryPool::max_memory() const { return -1; }\n \n-class DefaultMemoryPool : public MemoryPool {\n+///////////////////////////////////////////////////////////////////////\n+// Helper tracking memory statistics\n+\n+class MemoryPoolStats {\n  public:\n-  DefaultMemoryPool() : bytes_allocated_(0) { max_memory_ = 0; }\n+  MemoryPoolStats() : bytes_allocated_(0), max_memory_(0) {}\n+\n+  int64_t max_memory() const { return max_memory_.load(); }\n+\n+  int64_t bytes_allocated() const { return bytes_allocated_.load(); }\n+\n+  inline void UpdateAllocatedBytes(int64_t diff) {\n+    auto allocated = bytes_allocated_.fetch_add(diff) + diff;\n+    DCHECK_GE(allocated, 0) << \"allocation counter became negative\";\n+    // \"maximum\" allocated memory is ill-defined in multi-threaded code,\n+    // so don't try to be too rigorous here\n+    if (diff > 0 && allocated > max_memory_) {\n \n Review comment:\n   Yes, it's possible to write a loop, but if you want to avoid two threads thrashing each other you probably want to limit the number of loop iterations and yield after that. I don't think it's worth the complication (and the overhead).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T18:58:06.797+0000",
                    "updated": "2018-08-08T18:58:06.797+0000",
                    "started": "2018-08-08T18:58:06.796+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132546",
                    "issueId": "13177743"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177743/worklog/132549",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2403: ARROW-3024: [C++] Remove mutex in MemoryPool implementations\nURL: https://github.com/apache/arrow/pull/2403#discussion_r208698599\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.cc\n ##########\n @@ -88,22 +88,43 @@ MemoryPool::~MemoryPool() {}\n \n int64_t MemoryPool::max_memory() const { return -1; }\n \n-class DefaultMemoryPool : public MemoryPool {\n+///////////////////////////////////////////////////////////////////////\n+// Helper tracking memory statistics\n+\n+class MemoryPoolStats {\n  public:\n-  DefaultMemoryPool() : bytes_allocated_(0) { max_memory_ = 0; }\n+  MemoryPoolStats() : bytes_allocated_(0), max_memory_(0) {}\n+\n+  int64_t max_memory() const { return max_memory_.load(); }\n+\n+  int64_t bytes_allocated() const { return bytes_allocated_.load(); }\n+\n+  inline void UpdateAllocatedBytes(int64_t diff) {\n+    auto allocated = bytes_allocated_.fetch_add(diff) + diff;\n+    DCHECK_GE(allocated, 0) << \"allocation counter became negative\";\n+    // \"maximum\" allocated memory is ill-defined in multi-threaded code,\n+    // so don't try to be too rigorous here\n+    if (diff > 0 && allocated > max_memory_) {\n \n Review comment:\n   Agreed. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T19:02:19.731+0000",
                    "updated": "2018-08-08T19:02:19.731+0000",
                    "started": "2018-08-08T19:02:19.731+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132549",
                    "issueId": "13177743"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177743/worklog/132581",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2403: ARROW-3024: [C++] Remove mutex in MemoryPool implementations\nURL: https://github.com/apache/arrow/pull/2403\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/allocator-test.cc b/cpp/src/arrow/allocator-test.cc\nindex 55cc203bac..bdae9b9511 100644\n--- a/cpp/src/arrow/allocator-test.cc\n+++ b/cpp/src/arrow/allocator-test.cc\n@@ -52,7 +52,7 @@ TEST(stl_allocator, FreeLargeMemory) {\n \n #ifndef NDEBUG\n   EXPECT_DEATH(alloc.deallocate(data, 120),\n-               \".*Check failed: \\\\(bytes_allocated_\\\\) >= \\\\(size\\\\)\");\n+               \".*Check failed:.* allocation counter became negative\");\n #endif\n \n   alloc.deallocate(data, 100);\ndiff --git a/cpp/src/arrow/memory_pool-test.cc b/cpp/src/arrow/memory_pool-test.cc\nindex 8915708ea2..4cd01d3243 100644\n--- a/cpp/src/arrow/memory_pool-test.cc\n+++ b/cpp/src/arrow/memory_pool-test.cc\n@@ -52,7 +52,7 @@ TEST(DefaultMemoryPoolDeathTest, FreeLargeMemory) {\n \n #ifndef NDEBUG\n   EXPECT_DEATH(pool->Free(data, 120),\n-               \".*Check failed: \\\\(bytes_allocated_\\\\) >= \\\\(size\\\\)\");\n+               \".*Check failed:.* allocation counter became negative\");\n #endif\n \n   pool->Free(data, 100);\n@@ -60,14 +60,14 @@ TEST(DefaultMemoryPoolDeathTest, FreeLargeMemory) {\n \n TEST(DefaultMemoryPoolDeathTest, MaxMemory) {\n   MemoryPool* pool = default_memory_pool();\n-\n-  uint8_t* data;\n-  ASSERT_OK(pool->Allocate(100, &data));\n-\n+  uint8_t* data1;\n   uint8_t* data2;\n-  ASSERT_OK(pool->Allocate(100, &data2));\n \n-  pool->Free(data, 100);\n+  ASSERT_OK(pool->Allocate(100, &data1));\n+  ASSERT_OK(pool->Allocate(50, &data2));\n+  pool->Free(data2, 50);\n+  ASSERT_OK(pool->Allocate(100, &data2));\n+  pool->Free(data1, 100);\n   pool->Free(data2, 100);\n \n   ASSERT_EQ(200, pool->max_memory());\ndiff --git a/cpp/src/arrow/memory_pool-test.h b/cpp/src/arrow/memory_pool-test.h\nindex ced59bf701..f583da5730 100644\n--- a/cpp/src/arrow/memory_pool-test.h\n+++ b/cpp/src/arrow/memory_pool-test.h\n@@ -40,7 +40,14 @@ class TestMemoryPoolBase : public ::testing::Test {\n     EXPECT_EQ(static_cast<uint64_t>(0), reinterpret_cast<uint64_t>(data) % 64);\n     ASSERT_EQ(100, pool->bytes_allocated());\n \n+    uint8_t* data2;\n+    ASSERT_OK(pool->Allocate(27, &data2));\n+    EXPECT_EQ(static_cast<uint64_t>(0), reinterpret_cast<uint64_t>(data2) % 64);\n+    ASSERT_EQ(127, pool->bytes_allocated());\n+\n     pool->Free(data, 100);\n+    ASSERT_EQ(27, pool->bytes_allocated());\n+    pool->Free(data2, 27);\n     ASSERT_EQ(0, pool->bytes_allocated());\n   }\n \ndiff --git a/cpp/src/arrow/memory_pool.cc b/cpp/src/arrow/memory_pool.cc\nindex a92bfbff35..2f71c5d6f1 100644\n--- a/cpp/src/arrow/memory_pool.cc\n+++ b/cpp/src/arrow/memory_pool.cc\n@@ -24,7 +24,6 @@\n #include <cstring>\n #include <iostream>\n #include <memory>\n-#include <mutex>\n #include <sstream>  // IWYU pragma: keep\n \n #include \"arrow/status.h\"\n@@ -88,22 +87,43 @@ MemoryPool::~MemoryPool() {}\n \n int64_t MemoryPool::max_memory() const { return -1; }\n \n-class DefaultMemoryPool : public MemoryPool {\n+///////////////////////////////////////////////////////////////////////\n+// Helper tracking memory statistics\n+\n+class MemoryPoolStats {\n  public:\n-  DefaultMemoryPool() : bytes_allocated_(0) { max_memory_ = 0; }\n+  MemoryPoolStats() : bytes_allocated_(0), max_memory_(0) {}\n+\n+  int64_t max_memory() const { return max_memory_.load(); }\n+\n+  int64_t bytes_allocated() const { return bytes_allocated_.load(); }\n+\n+  inline void UpdateAllocatedBytes(int64_t diff) {\n+    auto allocated = bytes_allocated_.fetch_add(diff) + diff;\n+    DCHECK_GE(allocated, 0) << \"allocation counter became negative\";\n+    // \"maximum\" allocated memory is ill-defined in multi-threaded code,\n+    // so don't try to be too rigorous here\n+    if (diff > 0 && allocated > max_memory_) {\n+      max_memory_ = allocated;\n+    }\n+  }\n+\n+ protected:\n+  std::atomic<int64_t> bytes_allocated_;\n+  std::atomic<int64_t> max_memory_;\n+};\n+\n+///////////////////////////////////////////////////////////////////////\n+// Default MemoryPool implementation\n \n+class DefaultMemoryPool : public MemoryPool {\n+ public:\n   ~DefaultMemoryPool() override {}\n \n   Status Allocate(int64_t size, uint8_t** out) override {\n     RETURN_NOT_OK(AllocateAligned(size, out));\n-    bytes_allocated_ += size;\n \n-    {\n-      std::lock_guard<std::mutex> guard(lock_);\n-      if (bytes_allocated_ > max_memory_) {\n-        max_memory_ = bytes_allocated_.load();\n-      }\n-    }\n+    stats_.UpdateAllocatedBytes(size);\n     return Status::OK();\n   }\n \n@@ -134,21 +154,13 @@ class DefaultMemoryPool : public MemoryPool {\n     *ptr = out;\n #endif  // defined(ARROW_JEMALLOC)\n \n-    bytes_allocated_ += new_size - old_size;\n-    {\n-      std::lock_guard<std::mutex> guard(lock_);\n-      if (bytes_allocated_ > max_memory_) {\n-        max_memory_ = bytes_allocated_.load();\n-      }\n-    }\n-\n+    stats_.UpdateAllocatedBytes(new_size - old_size);\n     return Status::OK();\n   }\n \n-  int64_t bytes_allocated() const override { return bytes_allocated_.load(); }\n+  int64_t bytes_allocated() const override { return stats_.bytes_allocated(); }\n \n   void Free(uint8_t* buffer, int64_t size) override {\n-    DCHECK_GE(bytes_allocated_, size);\n #ifdef _MSC_VER\n     _aligned_free(buffer);\n #elif defined(ARROW_JEMALLOC)\n@@ -156,15 +168,13 @@ class DefaultMemoryPool : public MemoryPool {\n #else\n     std::free(buffer);\n #endif\n-    bytes_allocated_ -= size;\n+    stats_.UpdateAllocatedBytes(-size);\n   }\n \n-  int64_t max_memory() const override { return max_memory_.load(); }\n+  int64_t max_memory() const override { return stats_.max_memory(); }\n \n  private:\n-  mutable std::mutex lock_;\n-  std::atomic<int64_t> bytes_allocated_;\n-  std::atomic<int64_t> max_memory_;\n+  MemoryPoolStats stats_;\n };\n \n MemoryPool* default_memory_pool() {\n@@ -172,6 +182,9 @@ MemoryPool* default_memory_pool() {\n   return &default_memory_pool_;\n }\n \n+///////////////////////////////////////////////////////////////////////\n+// LoggingMemoryPool implementation\n+\n LoggingMemoryPool::LoggingMemoryPool(MemoryPool* pool) : pool_(pool) {}\n \n Status LoggingMemoryPool::Allocate(int64_t size, uint8_t** out) {\n@@ -204,48 +217,37 @@ int64_t LoggingMemoryPool::max_memory() const {\n   return mem;\n }\n \n+///////////////////////////////////////////////////////////////////////\n+// ProxyMemoryPool implementation\n+\n class ProxyMemoryPool::ProxyMemoryPoolImpl {\n  public:\n   explicit ProxyMemoryPoolImpl(MemoryPool* pool) : pool_(pool) {}\n \n   Status Allocate(int64_t size, uint8_t** out) {\n     RETURN_NOT_OK(pool_->Allocate(size, out));\n-    bytes_allocated_ += size;\n-    {\n-      std::lock_guard<std::mutex> guard(lock_);\n-      if (bytes_allocated_ > max_memory_) {\n-        max_memory_ = bytes_allocated_.load();\n-      }\n-    }\n+    stats_.UpdateAllocatedBytes(size);\n     return Status::OK();\n   }\n \n   Status Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) {\n     RETURN_NOT_OK(pool_->Reallocate(old_size, new_size, ptr));\n-    bytes_allocated_ += new_size - old_size;\n-    {\n-      std::lock_guard<std::mutex> guard(lock_);\n-      if (bytes_allocated_ > max_memory_) {\n-        max_memory_ = bytes_allocated_.load();\n-      }\n-    }\n+    stats_.UpdateAllocatedBytes(new_size - old_size);\n     return Status::OK();\n   }\n \n   void Free(uint8_t* buffer, int64_t size) {\n     pool_->Free(buffer, size);\n-    bytes_allocated_ -= size;\n+    stats_.UpdateAllocatedBytes(-size);\n   }\n \n-  int64_t bytes_allocated() const { return bytes_allocated_.load(); }\n+  int64_t bytes_allocated() const { return stats_.bytes_allocated(); }\n \n-  int64_t max_memory() const { return max_memory_.load(); }\n+  int64_t max_memory() const { return stats_.max_memory(); }\n \n  private:\n-  mutable std::mutex lock_;\n   MemoryPool* pool_;\n-  std::atomic<int64_t> bytes_allocated_{0};\n-  std::atomic<int64_t> max_memory_{0};\n+  MemoryPoolStats stats_;\n };\n \n ProxyMemoryPool::ProxyMemoryPool(MemoryPool* pool) {\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-08T20:17:20.376+0000",
                    "updated": "2018-08-08T20:17:20.376+0000",
                    "started": "2018-08-08T20:17:20.376+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "132581",
                    "issueId": "13177743"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3b390dae[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a8cf14d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3aeb8b4b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@174003c2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@115c5aa1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3de1fa98[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5bb68fbc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4cffc91b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f851b77[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@d020325[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6226a656[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@50231c18[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Aug 08 20:17:13 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-08-08T20:17:13.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3024/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-08-08T17:33:51.000+0000",
        "updated": "2018-08-08T20:17:20.000+0000",
        "timeoriginalestimate": null,
        "description": "I believe it should be possible to make the default memory pool lock-free",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Replace usages of std::mutex with atomics in memory_pool.cc",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177743/comment/16573802",
                    "id": "16573802",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2403\n[https://github.com/apache/arrow/pull/2403]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-08T20:17:13.628+0000",
                    "updated": "2018-08-08T20:17:13.628+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3wu9r:",
        "customfield_12314139": null
    }
}