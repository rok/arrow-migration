{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13218573",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573",
    "key": "ARROW-4713",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "orc",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Yurui+Zhou",
            "name": "Yurui Zhou",
            "key": "yurui zhou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Yurui Zhou",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [
            {
                "id": "13219474",
                "key": "ARROW-4770",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13219474",
                "fields": {
                    "summary": "[C++][ORC] Enable copy free conversion for primitive types",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                        "description": "The issue is open and ready for the assignee to start work on it.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                        "name": "Open",
                        "id": "1",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                            "id": 2,
                            "key": "new",
                            "colorName": "blue-gray",
                            "name": "To Do"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13219475",
                "key": "ARROW-4771",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13219475",
                "fields": {
                    "summary": "[C++][ORC] Enable copy free conversion for Composite type",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                        "description": "The issue is open and ready for the assignee to start work on it.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                        "name": "Open",
                        "id": "1",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                            "id": 2,
                            "key": "new",
                            "colorName": "blue-gray",
                            "name": "To Do"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13219476",
                "key": "ARROW-4772",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13219476",
                "fields": {
                    "summary": "Provide new ORC adapter interface that allow user to specify row number",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13219477",
                "key": "ARROW-4773",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13219477",
                "fields": {
                    "summary": "[C++] Enable copy free conversion for dictionary encoded string column in ORC adapter",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                        "description": "The issue is open and ready for the assignee to start work on it.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                        "name": "Open",
                        "id": "1",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                            "id": 2,
                            "key": "new",
                            "colorName": "blue-gray",
                            "name": "To Do"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            }
        ],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Yurui+Zhou",
            "name": "Yurui Zhou",
            "key": "yurui zhou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Yurui Zhou",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 31800,
            "total": 31800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 26400,
            "total": 26400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4713/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 54,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/209993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yuruiz commented on pull request #3843: ARROW-4713: new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843\n \n \n   Improvemnt of current ORC adapter interface that enable following operation:\r\n   \r\n   - enable seek operation to designated row\r\n   - enable iteration over stripe with StripeReader\r\n       - StripeReader is neccesary since ORC support stripe level dictionary\r\n          encoding, for this reason the Arrow Schema could varies between\r\n          stripes if Dictionary Based Type is enabled.\r\n   - enable row level iteration with StripeReader\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-08T06:48:16.583+0000",
                    "updated": "2019-03-08T06:48:16.583+0000",
                    "started": "2019-03-08T06:48:16.583+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "209993",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210436",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yuruiz commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-09T03:19:42.335+0000",
                    "updated": "2019-03-09T03:19:42.335+0000",
                    "started": "2019-03-09T03:19:42.334+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210436",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yuruiz commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843\n \n \n   Improvemnt of current ORC adapter interface that enable following operation:\r\n   \r\n   - enable seek operation to designated row\r\n   - enable iteration over stripe with StripeReader\r\n       - StripeReader is neccesary since ORC support stripe level dictionary\r\n          encoding, for this reason the Arrow Schema could varies between\r\n          stripes if Dictionary Based Type is enabled.\r\n   - enable row level iteration with StripeReader\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-09T03:19:45.858+0000",
                    "updated": "2019-03-09T03:19:45.858+0000",
                    "started": "2019-03-09T03:19:45.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210437",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210487",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yuruiz commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-09T06:38:19.139+0000",
                    "updated": "2019-03-09T06:38:19.139+0000",
                    "started": "2019-03-09T06:38:19.139+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210487",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yuruiz commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843\n \n \n   Improvemnt of current ORC adapter interface that enable following operation:\r\n   \r\n   - enable seek operation to designated row\r\n   - enable iteration over stripe with StripeReader\r\n       - StripeReader is neccesary since ORC support stripe level dictionary\r\n          encoding, for this reason the Arrow Schema could varies between\r\n          stripes if Dictionary Based Type is enabled.\r\n   - enable row level iteration with StripeReader\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-09T06:38:21.123+0000",
                    "updated": "2019-03-09T06:38:21.123+0000",
                    "started": "2019-03-09T06:38:21.122+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210488",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264078943\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter-test.cc\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/adapters/orc/adapter.h\"\n+#include \"arrow/array.h\"\n+#include \"arrow/io/api.h\"\n+#include \"orc/OrcFile.hh\"\n+\n+#include <gtest/gtest.h>\n+\n+namespace liborc = orc;\n+\n+namespace arrow {\n+\n+const int DEFAULT_MEM_STREAM_SIZE = 100 * 1024 * 1024;\n+\n+class MemoryOutputStream : public liborc::OutputStream {\n+ public:\n+  explicit MemoryOutputStream(ssize_t capacity) : name(\"MemoryOutputStream\") {\n+    data = new char[capacity];\n+    length = 0;\n+  }\n+\n+  ~MemoryOutputStream() override { delete[] data; }\n+\n+  uint64_t getLength() const override { return length; }\n+\n+  uint64_t getNaturalWriteSize() const override { return naturalWriteSize; }\n+\n+  void write(const void* buf, size_t size) override {\n+    memcpy(data + length, buf, size);\n+    length += size;\n+  }\n+\n+  const std::string& getName() const override { return name; }\n+\n+  const char* getData() const { return data; }\n+\n+  void close() override {}\n+\n+  void reset() { length = 0; }\n+\n+ private:\n+  char* data;\n \n Review comment:\n   style: members should be named data_ https://google.github.io/styleguide/cppguide.html#Variable_Names\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T02:49:20.675+0000",
                    "updated": "2019-03-11T02:49:20.675+0000",
                    "started": "2019-03-11T02:49:20.675+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210772",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210779",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264081565\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter_util.h\n ##########\n @@ -0,0 +1,39 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_ADAPATER_UTIL_HH\n \n Review comment:\n   nit one H?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:45.285+0000",
                    "updated": "2019-03-11T03:15:45.285+0000",
                    "started": "2019-03-11T03:15:45.285+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210779",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210778",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264078983\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter-test.cc\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/adapters/orc/adapter.h\"\n+#include \"arrow/array.h\"\n+#include \"arrow/io/api.h\"\n+#include \"orc/OrcFile.hh\"\n+\n+#include <gtest/gtest.h>\n+\n+namespace liborc = orc;\n+\n+namespace arrow {\n+\n+const int DEFAULT_MEM_STREAM_SIZE = 100 * 1024 * 1024;\n+\n+class MemoryOutputStream : public liborc::OutputStream {\n+ public:\n+  explicit MemoryOutputStream(ssize_t capacity) : name(\"MemoryOutputStream\") {\n+    data = new char[capacity];\n+    length = 0;\n+  }\n+\n+  ~MemoryOutputStream() override { delete[] data; }\n+\n+  uint64_t getLength() const override { return length; }\n+\n+  uint64_t getNaturalWriteSize() const override { return naturalWriteSize; }\n+\n+  void write(const void* buf, size_t size) override {\n+    memcpy(data + length, buf, size);\n+    length += size;\n+  }\n+\n+  const std::string& getName() const override { return name; }\n+\n+  const char* getData() const { return data; }\n+\n+  void close() override {}\n+\n+  void reset() { length = 0; }\n+\n+ private:\n+  char* data;\n+  std::string name;\n+  uint64_t length, naturalWriteSize;\n+};\n+\n+std::unique_ptr<liborc::Writer> createWriter(uint64_t stripeSize,\n \n Review comment:\n   Method names should start with Capital letters\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:45.285+0000",
                    "updated": "2019-03-11T03:15:45.285+0000",
                    "started": "2019-03-11T03:15:45.285+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210778",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210780",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264079037\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter-test.cc\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/adapters/orc/adapter.h\"\n+#include \"arrow/array.h\"\n+#include \"arrow/io/api.h\"\n+#include \"orc/OrcFile.hh\"\n+\n+#include <gtest/gtest.h>\n+\n+namespace liborc = orc;\n+\n+namespace arrow {\n+\n+const int DEFAULT_MEM_STREAM_SIZE = 100 * 1024 * 1024;\n+\n+class MemoryOutputStream : public liborc::OutputStream {\n+ public:\n+  explicit MemoryOutputStream(ssize_t capacity) : name(\"MemoryOutputStream\") {\n+    data = new char[capacity];\n+    length = 0;\n+  }\n+\n+  ~MemoryOutputStream() override { delete[] data; }\n+\n+  uint64_t getLength() const override { return length; }\n+\n+  uint64_t getNaturalWriteSize() const override { return naturalWriteSize; }\n+\n+  void write(const void* buf, size_t size) override {\n+    memcpy(data + length, buf, size);\n+    length += size;\n+  }\n+\n+  const std::string& getName() const override { return name; }\n+\n+  const char* getData() const { return data; }\n+\n+  void close() override {}\n+\n+  void reset() { length = 0; }\n+\n+ private:\n+  char* data;\n+  std::string name;\n+  uint64_t length, naturalWriteSize;\n+};\n+\n+std::unique_ptr<liborc::Writer> createWriter(uint64_t stripeSize,\n \n Review comment:\n   parameter names are stripe_size\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:45.286+0000",
                    "updated": "2019-03-11T03:15:45.286+0000",
                    "started": "2019-03-11T03:15:45.285+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210780",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264079578\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter-test.cc\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/adapters/orc/adapter.h\"\n+#include \"arrow/array.h\"\n+#include \"arrow/io/api.h\"\n+#include \"orc/OrcFile.hh\"\n+\n+#include <gtest/gtest.h>\n+\n+namespace liborc = orc;\n+\n+namespace arrow {\n+\n+const int DEFAULT_MEM_STREAM_SIZE = 100 * 1024 * 1024;\n+\n+class MemoryOutputStream : public liborc::OutputStream {\n+ public:\n+  explicit MemoryOutputStream(ssize_t capacity) : name(\"MemoryOutputStream\") {\n+    data = new char[capacity];\n+    length = 0;\n+  }\n+\n+  ~MemoryOutputStream() override { delete[] data; }\n+\n+  uint64_t getLength() const override { return length; }\n+\n+  uint64_t getNaturalWriteSize() const override { return naturalWriteSize; }\n+\n+  void write(const void* buf, size_t size) override {\n+    memcpy(data + length, buf, size);\n+    length += size;\n+  }\n+\n+  const std::string& getName() const override { return name; }\n+\n+  const char* getData() const { return data; }\n+\n+  void close() override {}\n+\n+  void reset() { length = 0; }\n+\n+ private:\n+  char* data;\n+  std::string name;\n+  uint64_t length, naturalWriteSize;\n+};\n+\n+std::unique_ptr<liborc::Writer> createWriter(uint64_t stripeSize,\n+                                             const liborc::Type& type,\n+                                             liborc::OutputStream* stream) {\n+  liborc::WriterOptions options;\n+  options.setStripeSize(stripeSize);\n+  options.setCompressionBlockSize(1024);\n+  options.setMemoryPool(liborc::getDefaultPool());\n+  options.setRowIndexStride(0);\n+  return liborc::createWriter(type, stream, options);\n+}\n+\n+TEST(TestAdapter, readIntFileMultipleStripes) {\n+  MemoryOutputStream memStream(DEFAULT_MEM_STREAM_SIZE);\n+  ORC_UNIQUE_PTR<liborc::Type> type(\n+      liborc::Type::buildTypeFromString(\"struct<col1:int,col2:string>\"));\n+\n+  const uint64_t stripeSize = 1024;  // 1K\n+  const uint64_t stripeCount = 10;\n+\n+  auto writer = createWriter(stripeSize, *type, &memStream);\n+  auto batch = writer->createRowBatch(65535);\n+  auto structBatch = dynamic_cast<liborc::StructVectorBatch*>(batch.get());\n+  auto longBatch = dynamic_cast<liborc::LongVectorBatch*>(structBatch->fields[0]);\n+  auto strBatch = dynamic_cast<liborc::StringVectorBatch*>(structBatch->fields[1]);\n+  int64_t accumulated = 0;\n+\n+  for (uint64_t j = 0; j < stripeCount; ++j) {\n+    char dataBuffer[327675];\n+    uint64_t offset = 0;\n+    for (uint64_t i = 0; i < 65535; ++i) {\n+      std::ostringstream os;\n \n Review comment:\n   can you use std::to_string here instead?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:45.369+0000",
                    "updated": "2019-03-11T03:15:45.369+0000",
                    "started": "2019-03-11T03:15:45.368+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210781",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210782",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264079776\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter-test.cc\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/adapters/orc/adapter.h\"\n+#include \"arrow/array.h\"\n+#include \"arrow/io/api.h\"\n+#include \"orc/OrcFile.hh\"\n+\n+#include <gtest/gtest.h>\n+\n+namespace liborc = orc;\n+\n+namespace arrow {\n+\n+const int DEFAULT_MEM_STREAM_SIZE = 100 * 1024 * 1024;\n+\n+class MemoryOutputStream : public liborc::OutputStream {\n+ public:\n+  explicit MemoryOutputStream(ssize_t capacity) : name(\"MemoryOutputStream\") {\n+    data = new char[capacity];\n+    length = 0;\n+  }\n+\n+  ~MemoryOutputStream() override { delete[] data; }\n+\n+  uint64_t getLength() const override { return length; }\n+\n+  uint64_t getNaturalWriteSize() const override { return naturalWriteSize; }\n+\n+  void write(const void* buf, size_t size) override {\n+    memcpy(data + length, buf, size);\n+    length += size;\n+  }\n+\n+  const std::string& getName() const override { return name; }\n+\n+  const char* getData() const { return data; }\n+\n+  void close() override {}\n+\n+  void reset() { length = 0; }\n+\n+ private:\n+  char* data;\n+  std::string name;\n+  uint64_t length, naturalWriteSize;\n+};\n+\n+std::unique_ptr<liborc::Writer> createWriter(uint64_t stripeSize,\n+                                             const liborc::Type& type,\n+                                             liborc::OutputStream* stream) {\n+  liborc::WriterOptions options;\n+  options.setStripeSize(stripeSize);\n+  options.setCompressionBlockSize(1024);\n+  options.setMemoryPool(liborc::getDefaultPool());\n+  options.setRowIndexStride(0);\n+  return liborc::createWriter(type, stream, options);\n+}\n+\n+TEST(TestAdapter, readIntFileMultipleStripes) {\n+  MemoryOutputStream memStream(DEFAULT_MEM_STREAM_SIZE);\n+  ORC_UNIQUE_PTR<liborc::Type> type(\n+      liborc::Type::buildTypeFromString(\"struct<col1:int,col2:string>\"));\n+\n+  const uint64_t stripeSize = 1024;  // 1K\n+  const uint64_t stripeCount = 10;\n+\n+  auto writer = createWriter(stripeSize, *type, &memStream);\n+  auto batch = writer->createRowBatch(65535);\n+  auto structBatch = dynamic_cast<liborc::StructVectorBatch*>(batch.get());\n+  auto longBatch = dynamic_cast<liborc::LongVectorBatch*>(structBatch->fields[0]);\n+  auto strBatch = dynamic_cast<liborc::StringVectorBatch*>(structBatch->fields[1]);\n+  int64_t accumulated = 0;\n+\n+  for (uint64_t j = 0; j < stripeCount; ++j) {\n+    char dataBuffer[327675];\n+    uint64_t offset = 0;\n+    for (uint64_t i = 0; i < 65535; ++i) {\n+      std::ostringstream os;\n+      os << accumulated % 65535;\n+      longBatch->data[i] = static_cast<int64_t>(accumulated % 65535);\n+      strBatch->data[i] = dataBuffer + offset;\n+      strBatch->length[i] = static_cast<int64_t>(os.str().size());\n+      memcpy(dataBuffer + offset, os.str().c_str(), os.str().size());\n+      accumulated++;\n+      offset += os.str().size();\n+    }\n+    structBatch->numElements = 65535;\n+    longBatch->numElements = 65535;\n+    strBatch->numElements = 65535;\n+\n+    writer->add(*batch);\n+  }\n+\n+  writer->close();\n+\n+  std::shared_ptr<io::ReadableFileInterface> inStream(new io::BufferReader(\n+      std::make_shared<Buffer>(reinterpret_cast<const uint8_t*>(memStream.getData()),\n+                               static_cast<int64_t>(memStream.getLength()))));\n+\n+  std::unique_ptr<adapters::orc::ORCFileReader> reader;\n+  EXPECT_EQ(Status::OK().code(),\n \n Review comment:\n   should this be assert? (should the test continue if it fails?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:45.383+0000",
                    "updated": "2019-03-11T03:15:45.383+0000",
                    "started": "2019-03-11T03:15:45.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210782",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264079440\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter-test.cc\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/adapters/orc/adapter.h\"\n+#include \"arrow/array.h\"\n+#include \"arrow/io/api.h\"\n+#include \"orc/OrcFile.hh\"\n+\n+#include <gtest/gtest.h>\n+\n+namespace liborc = orc;\n+\n+namespace arrow {\n+\n+const int DEFAULT_MEM_STREAM_SIZE = 100 * 1024 * 1024;\n+\n+class MemoryOutputStream : public liborc::OutputStream {\n+ public:\n+  explicit MemoryOutputStream(ssize_t capacity) : name(\"MemoryOutputStream\") {\n+    data = new char[capacity];\n+    length = 0;\n+  }\n+\n+  ~MemoryOutputStream() override { delete[] data; }\n+\n+  uint64_t getLength() const override { return length; }\n+\n+  uint64_t getNaturalWriteSize() const override { return naturalWriteSize; }\n+\n+  void write(const void* buf, size_t size) override {\n+    memcpy(data + length, buf, size);\n+    length += size;\n+  }\n+\n+  const std::string& getName() const override { return name; }\n+\n+  const char* getData() const { return data; }\n+\n+  void close() override {}\n+\n+  void reset() { length = 0; }\n+\n+ private:\n+  char* data;\n+  std::string name;\n+  uint64_t length, naturalWriteSize;\n+};\n+\n+std::unique_ptr<liborc::Writer> createWriter(uint64_t stripeSize,\n+                                             const liborc::Type& type,\n+                                             liborc::OutputStream* stream) {\n+  liborc::WriterOptions options;\n+  options.setStripeSize(stripeSize);\n+  options.setCompressionBlockSize(1024);\n+  options.setMemoryPool(liborc::getDefaultPool());\n+  options.setRowIndexStride(0);\n+  return liborc::createWriter(type, stream, options);\n+}\n+\n+TEST(TestAdapter, readIntFileMultipleStripes) {\n+  MemoryOutputStream memStream(DEFAULT_MEM_STREAM_SIZE);\n+  ORC_UNIQUE_PTR<liborc::Type> type(\n+      liborc::Type::buildTypeFromString(\"struct<col1:int,col2:string>\"));\n+\n+  const uint64_t stripeSize = 1024;  // 1K\n+  const uint64_t stripeCount = 10;\n+\n+  auto writer = createWriter(stripeSize, *type, &memStream);\n+  auto batch = writer->createRowBatch(65535);\n+  auto structBatch = dynamic_cast<liborc::StructVectorBatch*>(batch.get());\n+  auto longBatch = dynamic_cast<liborc::LongVectorBatch*>(structBatch->fields[0]);\n+  auto strBatch = dynamic_cast<liborc::StringVectorBatch*>(structBatch->fields[1]);\n+  int64_t accumulated = 0;\n+\n+  for (uint64_t j = 0; j < stripeCount; ++j) {\n+    char dataBuffer[327675];\n \n Review comment:\n   data_buffer, i'm going to stop pointing out new naming style stuff, please try to do a self review and update as appropriate\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:45.577+0000",
                    "updated": "2019-03-11T03:15:45.577+0000",
                    "started": "2019-03-11T03:15:45.576+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210783",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264079367\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter-test.cc\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/adapters/orc/adapter.h\"\n+#include \"arrow/array.h\"\n+#include \"arrow/io/api.h\"\n+#include \"orc/OrcFile.hh\"\n+\n+#include <gtest/gtest.h>\n+\n+namespace liborc = orc;\n+\n+namespace arrow {\n+\n+const int DEFAULT_MEM_STREAM_SIZE = 100 * 1024 * 1024;\n+\n+class MemoryOutputStream : public liborc::OutputStream {\n+ public:\n+  explicit MemoryOutputStream(ssize_t capacity) : name(\"MemoryOutputStream\") {\n+    data = new char[capacity];\n+    length = 0;\n+  }\n+\n+  ~MemoryOutputStream() override { delete[] data; }\n+\n+  uint64_t getLength() const override { return length; }\n+\n+  uint64_t getNaturalWriteSize() const override { return naturalWriteSize; }\n+\n+  void write(const void* buf, size_t size) override {\n+    memcpy(data + length, buf, size);\n+    length += size;\n+  }\n+\n+  const std::string& getName() const override { return name; }\n+\n+  const char* getData() const { return data; }\n+\n+  void close() override {}\n+\n+  void reset() { length = 0; }\n+\n+ private:\n+  char* data;\n+  std::string name;\n+  uint64_t length, naturalWriteSize;\n+};\n+\n+std::unique_ptr<liborc::Writer> createWriter(uint64_t stripeSize,\n+                                             const liborc::Type& type,\n+                                             liborc::OutputStream* stream) {\n+  liborc::WriterOptions options;\n+  options.setStripeSize(stripeSize);\n+  options.setCompressionBlockSize(1024);\n+  options.setMemoryPool(liborc::getDefaultPool());\n+  options.setRowIndexStride(0);\n+  return liborc::createWriter(type, stream, options);\n+}\n+\n+TEST(TestAdapter, readIntFileMultipleStripes) {\n+  MemoryOutputStream memStream(DEFAULT_MEM_STREAM_SIZE);\n+  ORC_UNIQUE_PTR<liborc::Type> type(\n+      liborc::Type::buildTypeFromString(\"struct<col1:int,col2:string>\"));\n+\n+  const uint64_t stripeSize = 1024;  // 1K\n+  const uint64_t stripeCount = 10;\n+\n+  auto writer = createWriter(stripeSize, *type, &memStream);\n+  auto batch = writer->createRowBatch(65535);\n+  auto structBatch = dynamic_cast<liborc::StructVectorBatch*>(batch.get());\n+  auto longBatch = dynamic_cast<liborc::LongVectorBatch*>(structBatch->fields[0]);\n+  auto strBatch = dynamic_cast<liborc::StringVectorBatch*>(structBatch->fields[1]);\n+  int64_t accumulated = 0;\n+\n+  for (uint64_t j = 0; j < stripeCount; ++j) {\n+    char dataBuffer[327675];\n+    uint64_t offset = 0;\n+    for (uint64_t i = 0; i < 65535; ++i) {\n \n Review comment:\n   can you make this a named constant,any significance to this size?  \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:45.587+0000",
                    "updated": "2019-03-11T03:15:45.587+0000",
                    "started": "2019-03-11T03:15:45.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210784",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210785",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264079277\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter-test.cc\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/adapters/orc/adapter.h\"\n+#include \"arrow/array.h\"\n+#include \"arrow/io/api.h\"\n+#include \"orc/OrcFile.hh\"\n+\n+#include <gtest/gtest.h>\n+\n+namespace liborc = orc;\n+\n+namespace arrow {\n+\n+const int DEFAULT_MEM_STREAM_SIZE = 100 * 1024 * 1024;\n \n Review comment:\n   prefer kDefaultmemStraemSize, make this a conexpr?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:45.771+0000",
                    "updated": "2019-03-11T03:15:45.771+0000",
                    "started": "2019-03-11T03:15:45.770+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210785",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264081214\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter_util.h\n ##########\n @@ -0,0 +1,39 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_ADAPATER_UTIL_HH\n+#define ARROW_ADAPATER_UTIL_HH\n+\n+#include <cstdint>\n+#include <memory>\n+\n+#include \"arrow/array/builder_base.h\"\n+#include \"arrow/status.h\"\n+#include \"orc/OrcFile.hh\"\n+\n+namespace arrow {\n+\n \n Review comment:\n   Just curious any reason you chose to make these static methods vs functions in a namespace?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:45.937+0000",
                    "updated": "2019-03-11T03:15:45.937+0000",
                    "started": "2019-03-11T03:15:45.937+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210786",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210787",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264079673\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter-test.cc\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/adapters/orc/adapter.h\"\n+#include \"arrow/array.h\"\n+#include \"arrow/io/api.h\"\n+#include \"orc/OrcFile.hh\"\n+\n+#include <gtest/gtest.h>\n+\n+namespace liborc = orc;\n+\n+namespace arrow {\n+\n+const int DEFAULT_MEM_STREAM_SIZE = 100 * 1024 * 1024;\n+\n+class MemoryOutputStream : public liborc::OutputStream {\n+ public:\n+  explicit MemoryOutputStream(ssize_t capacity) : name(\"MemoryOutputStream\") {\n+    data = new char[capacity];\n+    length = 0;\n+  }\n+\n+  ~MemoryOutputStream() override { delete[] data; }\n+\n+  uint64_t getLength() const override { return length; }\n+\n+  uint64_t getNaturalWriteSize() const override { return naturalWriteSize; }\n+\n+  void write(const void* buf, size_t size) override {\n+    memcpy(data + length, buf, size);\n+    length += size;\n+  }\n+\n+  const std::string& getName() const override { return name; }\n+\n+  const char* getData() const { return data; }\n+\n+  void close() override {}\n+\n+  void reset() { length = 0; }\n+\n+ private:\n+  char* data;\n+  std::string name;\n+  uint64_t length, naturalWriteSize;\n+};\n+\n+std::unique_ptr<liborc::Writer> createWriter(uint64_t stripeSize,\n+                                             const liborc::Type& type,\n+                                             liborc::OutputStream* stream) {\n+  liborc::WriterOptions options;\n+  options.setStripeSize(stripeSize);\n+  options.setCompressionBlockSize(1024);\n+  options.setMemoryPool(liborc::getDefaultPool());\n+  options.setRowIndexStride(0);\n+  return liborc::createWriter(type, stream, options);\n+}\n+\n+TEST(TestAdapter, readIntFileMultipleStripes) {\n \n Review comment:\n   how long does this test take to run?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:45.982+0000",
                    "updated": "2019-03-11T03:15:45.982+0000",
                    "started": "2019-03-11T03:15:45.981+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210787",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210788",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264079826\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter-test.cc\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/adapters/orc/adapter.h\"\n+#include \"arrow/array.h\"\n+#include \"arrow/io/api.h\"\n+#include \"orc/OrcFile.hh\"\n+\n+#include <gtest/gtest.h>\n+\n+namespace liborc = orc;\n+\n+namespace arrow {\n+\n+const int DEFAULT_MEM_STREAM_SIZE = 100 * 1024 * 1024;\n+\n+class MemoryOutputStream : public liborc::OutputStream {\n+ public:\n+  explicit MemoryOutputStream(ssize_t capacity) : name(\"MemoryOutputStream\") {\n+    data = new char[capacity];\n+    length = 0;\n+  }\n+\n+  ~MemoryOutputStream() override { delete[] data; }\n+\n+  uint64_t getLength() const override { return length; }\n+\n+  uint64_t getNaturalWriteSize() const override { return naturalWriteSize; }\n+\n+  void write(const void* buf, size_t size) override {\n+    memcpy(data + length, buf, size);\n+    length += size;\n+  }\n+\n+  const std::string& getName() const override { return name; }\n+\n+  const char* getData() const { return data; }\n+\n+  void close() override {}\n+\n+  void reset() { length = 0; }\n+\n+ private:\n+  char* data;\n+  std::string name;\n+  uint64_t length, naturalWriteSize;\n+};\n+\n+std::unique_ptr<liborc::Writer> createWriter(uint64_t stripeSize,\n+                                             const liborc::Type& type,\n+                                             liborc::OutputStream* stream) {\n+  liborc::WriterOptions options;\n+  options.setStripeSize(stripeSize);\n+  options.setCompressionBlockSize(1024);\n+  options.setMemoryPool(liborc::getDefaultPool());\n+  options.setRowIndexStride(0);\n+  return liborc::createWriter(type, stream, options);\n+}\n+\n+TEST(TestAdapter, readIntFileMultipleStripes) {\n+  MemoryOutputStream memStream(DEFAULT_MEM_STREAM_SIZE);\n+  ORC_UNIQUE_PTR<liborc::Type> type(\n+      liborc::Type::buildTypeFromString(\"struct<col1:int,col2:string>\"));\n+\n+  const uint64_t stripeSize = 1024;  // 1K\n+  const uint64_t stripeCount = 10;\n+\n+  auto writer = createWriter(stripeSize, *type, &memStream);\n+  auto batch = writer->createRowBatch(65535);\n+  auto structBatch = dynamic_cast<liborc::StructVectorBatch*>(batch.get());\n+  auto longBatch = dynamic_cast<liborc::LongVectorBatch*>(structBatch->fields[0]);\n+  auto strBatch = dynamic_cast<liborc::StringVectorBatch*>(structBatch->fields[1]);\n+  int64_t accumulated = 0;\n+\n+  for (uint64_t j = 0; j < stripeCount; ++j) {\n+    char dataBuffer[327675];\n+    uint64_t offset = 0;\n+    for (uint64_t i = 0; i < 65535; ++i) {\n+      std::ostringstream os;\n+      os << accumulated % 65535;\n+      longBatch->data[i] = static_cast<int64_t>(accumulated % 65535);\n+      strBatch->data[i] = dataBuffer + offset;\n+      strBatch->length[i] = static_cast<int64_t>(os.str().size());\n+      memcpy(dataBuffer + offset, os.str().c_str(), os.str().size());\n+      accumulated++;\n+      offset += os.str().size();\n+    }\n+    structBatch->numElements = 65535;\n+    longBatch->numElements = 65535;\n+    strBatch->numElements = 65535;\n+\n+    writer->add(*batch);\n+  }\n+\n+  writer->close();\n+\n+  std::shared_ptr<io::ReadableFileInterface> inStream(new io::BufferReader(\n+      std::make_shared<Buffer>(reinterpret_cast<const uint8_t*>(memStream.getData()),\n+                               static_cast<int64_t>(memStream.getLength()))));\n+\n+  std::unique_ptr<adapters::orc::ORCFileReader> reader;\n+  EXPECT_EQ(Status::OK().code(),\n+            adapters::orc::ORCFileReader::Open(inStream, default_memory_pool(), &reader)\n+                .code());\n+\n+  EXPECT_EQ(655350, reader->NumberOfRows());\n \n Review comment:\n   same question for this and the next one?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:45.997+0000",
                    "updated": "2019-03-11T03:15:45.997+0000",
                    "started": "2019-03-11T03:15:45.997+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210788",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264081004\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter_util.cc\n ##########\n @@ -0,0 +1,422 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/adapters/orc/adapter_util.h\"\n+#include \"arrow/array/builder_base.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/decimal.h\"\n+#include \"arrow/util/lazy.h\"\n+\n+#include \"orc/Exceptions.hh\"\n+#include \"orc/OrcFile.hh\"\n+\n+// alias to not interfere with nested orc namespace\n+namespace liborc = orc;\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+// The numer of nanoseconds in a second\n+constexpr int64_t kOneSecondNanos = 1000000000LL;\n+\n+Status AppendStructBatch(const liborc::Type* type, liborc::ColumnVectorBatch* cbatch,\n+                         int64_t offset, int64_t length, ArrayBuilder* abuilder) {\n+  auto builder = checked_cast<StructBuilder*>(abuilder);\n+  auto batch = checked_cast<liborc::StructVectorBatch*>(cbatch);\n+\n+  const uint8_t* valid_bytes = nullptr;\n+  if (batch->hasNulls) {\n+    valid_bytes = reinterpret_cast<const uint8_t*>(batch->notNull.data()) + offset;\n+  }\n+  RETURN_NOT_OK(builder->AppendValues(length, valid_bytes));\n+\n+  for (int i = 0; i < builder->num_fields(); i++) {\n+    RETURN_NOT_OK(AdapaterUtil::AppendBatch(type->getSubtype(i), batch->fields[i], offset,\n+                                            length, builder->field_builder(i)));\n+  }\n+  return Status::OK();\n+}\n+\n+Status AppendListBatch(const liborc::Type* type, liborc::ColumnVectorBatch* cbatch,\n+                       int64_t offset, int64_t length, ArrayBuilder* abuilder) {\n+  auto builder = checked_cast<ListBuilder*>(abuilder);\n+  auto batch = checked_cast<liborc::ListVectorBatch*>(cbatch);\n+  liborc::ColumnVectorBatch* elements = batch->elements.get();\n+  const liborc::Type* elemtype = type->getSubtype(0);\n+\n+  const bool has_nulls = batch->hasNulls;\n+  for (int64_t i = offset; i < length + offset; i++) {\n+    if (!has_nulls || batch->notNull[i]) {\n+      int64_t start = batch->offsets[i];\n+      int64_t end = batch->offsets[i + 1];\n+      RETURN_NOT_OK(builder->Append());\n+      RETURN_NOT_OK(AdapaterUtil::AppendBatch(elemtype, elements, start, end - start,\n+                                              builder->value_builder()));\n+    } else {\n+      RETURN_NOT_OK(builder->AppendNull());\n+    }\n+  }\n+  return Status::OK();\n+}\n+\n+Status AppendMapBatch(const liborc::Type* type, liborc::ColumnVectorBatch* cbatch,\n+                      int64_t offset, int64_t length, ArrayBuilder* abuilder) {\n+  auto list_builder = checked_cast<ListBuilder*>(abuilder);\n+  auto struct_builder = checked_cast<StructBuilder*>(list_builder->value_builder());\n+  auto batch = checked_cast<liborc::MapVectorBatch*>(cbatch);\n+  liborc::ColumnVectorBatch* keys = batch->keys.get();\n+  liborc::ColumnVectorBatch* vals = batch->elements.get();\n+  const liborc::Type* keytype = type->getSubtype(0);\n+  const liborc::Type* valtype = type->getSubtype(1);\n+\n+  const bool has_nulls = batch->hasNulls;\n+  for (int64_t i = offset; i < length + offset; i++) {\n+    RETURN_NOT_OK(list_builder->Append());\n+    int64_t start = batch->offsets[i];\n+    int64_t list_length = batch->offsets[i + 1] - start;\n+    if (list_length && (!has_nulls || batch->notNull[i])) {\n+      RETURN_NOT_OK(struct_builder->AppendValues(list_length, nullptr));\n+      RETURN_NOT_OK(AdapaterUtil::AppendBatch(keytype, keys, start, list_length,\n+                                              struct_builder->field_builder(0)));\n+      RETURN_NOT_OK(AdapaterUtil::AppendBatch(valtype, vals, start, list_length,\n+                                              struct_builder->field_builder(1)));\n+    }\n+  }\n+  return Status::OK();\n+}\n+\n+template <class builder_type, class batch_type, class elem_type>\n+Status AppendNumericBatch(liborc::ColumnVectorBatch* cbatch, int64_t offset,\n+                          int64_t length, ArrayBuilder* abuilder) {\n+  auto builder = checked_cast<builder_type*>(abuilder);\n+  auto batch = checked_cast<batch_type*>(cbatch);\n+\n+  if (length == 0) {\n+    return Status::OK();\n+  }\n+  const uint8_t* valid_bytes = nullptr;\n+  if (batch->hasNulls) {\n+    valid_bytes = reinterpret_cast<const uint8_t*>(batch->notNull.data()) + offset;\n+  }\n+  const elem_type* source = batch->data.data() + offset;\n+  RETURN_NOT_OK(builder->AppendValues(source, length, valid_bytes));\n+  return Status::OK();\n+}\n+\n+template <class builder_type, class target_type, class batch_type, class source_type>\n+Status AppendNumericBatchCast(liborc::ColumnVectorBatch* cbatch, int64_t offset,\n+                              int64_t length, ArrayBuilder* abuilder) {\n+  auto builder = checked_cast<builder_type*>(abuilder);\n+  auto batch = checked_cast<batch_type*>(cbatch);\n+\n+  if (length == 0) {\n+    return Status::OK();\n+  }\n+\n+  const uint8_t* valid_bytes = nullptr;\n+  if (batch->hasNulls) {\n+    valid_bytes = reinterpret_cast<const uint8_t*>(batch->notNull.data()) + offset;\n+  }\n+  const source_type* source = batch->data.data() + offset;\n+  auto cast_iter = internal::MakeLazyRange(\n+      [&source](int64_t index) { return static_cast<target_type>(source[index]); },\n+      length);\n+\n+  RETURN_NOT_OK(builder->AppendValues(cast_iter.begin(), cast_iter.end(), valid_bytes));\n+\n+  return Status::OK();\n+}\n+\n+Status AppendBoolBatch(liborc::ColumnVectorBatch* cbatch, int64_t offset, int64_t length,\n+                       ArrayBuilder* abuilder) {\n+  auto builder = checked_cast<BooleanBuilder*>(abuilder);\n+  auto batch = checked_cast<liborc::LongVectorBatch*>(cbatch);\n+\n+  if (length == 0) {\n+    return Status::OK();\n+  }\n+\n+  const uint8_t* valid_bytes = nullptr;\n+  if (batch->hasNulls) {\n+    valid_bytes = reinterpret_cast<const uint8_t*>(batch->notNull.data()) + offset;\n+  }\n+  const int64_t* source = batch->data.data() + offset;\n+\n+  auto cast_iter = internal::MakeLazyRange(\n+      [&source](int64_t index) { return static_cast<bool>(source[index]); }, length);\n+\n+  RETURN_NOT_OK(builder->AppendValues(cast_iter.begin(), cast_iter.end(), valid_bytes));\n+\n+  return Status::OK();\n+}\n+\n+Status AppendTimestampBatch(liborc::ColumnVectorBatch* cbatch, int64_t offset,\n \n Review comment:\n   There seems to be a lot of duplicate code here, is it possible to templatize it?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:46.021+0000",
                    "updated": "2019-03-11T03:15:46.021+0000",
                    "started": "2019-03-11T03:15:46.020+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210789",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264080121\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter.h\n ##########\n @@ -41,7 +41,7 @@ class ARROW_EXPORT ORCFileReader {\n  public:\n   ~ORCFileReader();\n \n-  /// \\brief Create a new ORC reader\n+  /// \\brief Create a new ORC reader with default read size as 1024\n \n Review comment:\n   bytes?  end with a period.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:46.023+0000",
                    "updated": "2019-03-11T03:15:46.023+0000",
                    "started": "2019-03-11T03:15:46.022+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210790",
                    "issueId": "13218573"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/worklog/210791",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3843: ARROW-4713: [C++] new ORC adapter interface for stripe and row iteration\nURL: https://github.com/apache/arrow/pull/3843#discussion_r264080564\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/adapter.h\n ##########\n @@ -102,6 +102,26 @@ class ARROW_EXPORT ORCFileReader {\n   Status ReadStripe(int64_t stripe, const std::vector<int>& include_indices,\n                     std::shared_ptr<RecordBatch>* out);\n \n+  /// \\brief Seek to designated row. Invoke NextStripeReader() after seek\n+  ///        will return stripe reader starting from designed row.\n+  ///\n+  /// \\param[in] rowNumber the rows number to seek\n+  Status Seek(int64_t rowNumber);\n+\n+  /// \\brief Get stripe reader\n+  ///\n+  /// \\param[in] readSize the record batch reader default read size\n+  /// \\param[out] out the returned stripe reader\n+  Status NextStripeReader(int64_t readSize, std::shared_ptr<RecordBatchReader>* out);\n \n Review comment:\n   it is not clear to me how these methods relate to ReadStrip above, could you document intended usage of the class?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-11T03:15:46.085+0000",
                    "updated": "2019-03-11T03:15:46.085+0000",
                    "started": "2019-03-11T03:15:46.084+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "210791",
                    "issueId": "13218573"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 26400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2ceff184[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@337aa25f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@176be839[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7165d8d1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@726916fd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6c3bae3d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2459a9a3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7ba55ea9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41c171de[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@703a659d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19c7ce88[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@48c69b0f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 31800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 12 14:04:45 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4713/watchers",
            "watchCount": 6,
            "isWatching": true
        },
        "created": "2019-02-28T09:02:02.000+0000",
        "updated": "2022-07-12T14:04:45.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently the Arrow C++ provide a naive adapter implementation that allow user to read orc file to Arrow RecordBatch. However, this implementation have several drawbacks:\r\n * Inefficient conversion that incurs huge memcpy overhead\r\n ** currently the ORC\u00a0adapter are performing byte to byte memcpy to move data to ORC VectorBatch to Arrow RecordBatch regardless of the fact that ORC VectorBatch shares the same memory layout with Arrow in most of the Data Types\r\n * Huge memory footprint because the lack of TableReader implementation\r\n ** The ORC adapter currently only allow user to read data with the unit of stripe. However, as a columnar format with high compression ration, data read from a ORC stripe can potential takes over gigabytes of memory, which makes the ORC adapter not quite usable in production environment.\r\n\r\nHere we propose a new ORC adapter implementation to fix the issues mentioned above:\r\n * To reduce conversion overhead, instead of performing naive data copy, the new adapter would be able to fully taking advantage of the memory layout similarity between ORC VectorBatch and Arrow RecordBatch. Namely the new adapter will perform pointer manipulation to transfer the memory ownership from VectorBatch to Arrow RecordBatch whenever possible.\r\n * The new ORC Adapter would be able to provide user a row level granularity when reading data from Orc File. The user should be able to specify how many rows should be expected on output RecordBatch and the ORC Adapter should make sure no more the requested number of rows would be returned.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 26400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Improve C++ Orc Adapter performance and memory footprint",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/comment/16780654",
                    "id": "16780654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Seems like there may be many tasks here, please create sub-tasks if you want to break the work into multiple patches",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-28T15:48:11.534+0000",
                    "updated": "2019-02-28T15:48:11.534+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/comment/17201546",
                    "id": "17201546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~Yurui Zhou] Are you still planning to work on these issues at some point?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-09-24T13:59:05.311+0000",
                    "updated": "2020-09-24T13:59:05.311+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/comment/17263386",
                    "id": "17263386",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Moving to 4.0.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2021-01-12T14:50:26.779+0000",
                    "updated": "2021-01-12T14:50:26.779+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/comment/17267009",
                    "id": "17267009",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yingzhou474",
                        "name": "yingzhou474",
                        "key": "yingzhou474",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Ian Alexander Joiner",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Hmm..this looks interesting. If @Yurui Zhou won\u2019t take it I potentially can. However I don\u2019t think I have time for that before July though. So if I will take it it will need to happen half a year later and won\u2019t be available in 4.0.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yingzhou474",
                        "name": "yingzhou474",
                        "key": "yingzhou474",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Ian Alexander Joiner",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-01-18T04:45:55.083+0000",
                    "updated": "2021-01-18T04:47:24.440+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218573/comment/17565736",
                    "id": "17565736",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-07-12T14:04:45.924+0000",
                    "updated": "2022-07-12T14:04:45.924+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z006ew:",
        "customfield_12314139": null
    }
}