{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13384191",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191",
    "key": "ARROW-13096",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "beginner",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12617554",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12617554",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13377986",
                    "key": "ARROW-12748",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377986",
                    "fields": {
                        "summary": "[C++] Arithmetic kernels for numeric arrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12619375",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12619375",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13389866",
                    "key": "ARROW-13345",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389866",
                    "fields": {
                        "summary": "[C++] Implement logN compute function",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12618756",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12618756",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13388176",
                    "key": "ARROW-13280",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13388176",
                    "fields": {
                        "summary": "[R] Bindings for log and trig functions",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13096/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/612798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567\n\n\n   Adds ln, log10, and log2. We could add a log1e and/or a logN if useful (probably not?)\r\n   \r\n   Has some code from/will conflict with #10544.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-21T17:15:40.545+0000",
                    "updated": "2021-06-21T17:15:40.545+0000",
                    "started": "2021-06-21T17:15:40.545+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612798",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/612799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#issuecomment-865207432\n\n\n   https://issues.apache.org/jira/browse/ARROW-13096\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-21T17:15:58.476+0000",
                    "updated": "2021-06-21T17:15:58.476+0000",
                    "started": "2021-06-21T17:15:58.475+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612799",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/612970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#discussion_r655907205\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1511,5 +1517,55 @@ TEST(TestBinaryArithmeticDecimal, Divide) {\n   }\n }\n \n+TYPED_TEST(TestUnaryArithmeticFloating, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1, 2.7182818284590452354]\"),\n+                        ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticSigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticUnsigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+}\n+\n\nReview comment:\n       In valid test cases, no need to use `ty` (aka `this->type_singleton()`) with `ArrayFromJSON` because that is the default type. Also, no need to use the `this` keyword for the class methods.\r\n   \r\n   Moreover, PR #10395 extends the unary scalar arithmetic test class to support combinations of JSON/Array inputs which will allow you to further simplify the test statements as follows:\r\n   * For integer inputs: `AssertUnaryOp(Ln, \"[1]\", ArrayFromJSON(float64(), \"[0]\"));`\r\n   * For floating point inputs: `AssertUnaryOp(Log10, \"[1, 10]\", \"[0, 1]\");`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T06:17:08.095+0000",
                    "updated": "2021-06-22T06:17:08.095+0000",
                    "started": "2021-06-22T06:17:08.095+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612970",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/612971",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#discussion_r655907796\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1511,5 +1517,55 @@ TEST(TestBinaryArithmeticDecimal, Divide) {\n   }\n }\n \n+TYPED_TEST(TestUnaryArithmeticFloating, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1, 2.7182818284590452354]\"),\n+                        ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticSigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticUnsigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+}\n+\n\nReview comment:\n       Add test cases with `Inf` and `NaN` inputs.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T06:18:21.257+0000",
                    "updated": "2021-06-22T06:18:21.257+0000",
                    "started": "2021-06-22T06:18:21.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612971",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/612972",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#discussion_r655908488\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -274,6 +274,18 @@ an ``Invalid`` :class:`Status` when overflow is detected.\n +--------------------------+------------+--------------------+---------------------+\n | divide_checked           | Binary     | Numeric            | Numeric (1)         |\n +--------------------------+------------+--------------------+---------------------+\n+| ln                       | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| ln_checked               | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| log10                    | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| log10_checked            | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| log2                     | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| log2_checked             | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n\nReview comment:\n       I would suggest to add a note stating that these functions return `float64` value for integral inputs and same type as input for floating-point inputs.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T06:19:49.128+0000",
                    "updated": "2021-06-22T06:19:49.128+0000",
                    "started": "2021-06-22T06:19:49.128+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612972",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/612974",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#discussion_r655907796\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1511,5 +1517,55 @@ TEST(TestBinaryArithmeticDecimal, Divide) {\n   }\n }\n \n+TYPED_TEST(TestUnaryArithmeticFloating, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1, 2.7182818284590452354]\"),\n+                        ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticSigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticUnsigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+}\n+\n\nReview comment:\n       Add test cases with `Inf`, `NaN`, `null`, `min`, `max` inputs.\r\n   \r\n   For min/max you can refer to the tests of [`AbsoluteValue`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc#L1111-L1147).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T06:27:47.437+0000",
                    "updated": "2021-06-22T06:27:47.437+0000",
                    "started": "2021-06-22T06:27:47.437+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612974",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/612975",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#discussion_r655907205\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1511,5 +1517,55 @@ TEST(TestBinaryArithmeticDecimal, Divide) {\n   }\n }\n \n+TYPED_TEST(TestUnaryArithmeticFloating, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1, 2.7182818284590452354]\"),\n+                        ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticSigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticUnsigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+}\n+\n\nReview comment:\n       In valid test cases, no need to use `ty` (aka `this->type_singleton()`) with `ArrayFromJSON` because that is the default type.\r\n   \r\n   Moreover, PR #10395 extends the unary scalar arithmetic test class to support combinations of JSON/Array inputs which will allow you to further simplify the test statements as follows:\r\n   * For integer inputs: `AssertUnaryOp(Ln, \"[1]\", ArrayFromJSON(float64(), \"[0]\"));`\r\n   * For floating point inputs: `AssertUnaryOp(Log10, \"[1, 10]\", \"[0, 1]\");`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T06:28:10.534+0000",
                    "updated": "2021-06-22T06:28:10.534+0000",
                    "started": "2021-06-22T06:28:10.534+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612975",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/612977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#discussion_r655918970\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -734,6 +924,19 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+// Integer arguments return double values\n+template <typename Op>\n+std::shared_ptr<ScalarFunction> MakeUnaryIntToDoubleNotNull(std::string name,\n+                                                            const FunctionDoc* doc) {\n+  auto func = std::make_shared<ArithmeticFunction>(name, Arity::Unary(), doc);\n+  for (const auto& ty : NumericTypes()) {\n+    auto output = is_integer(ty->id()) ? float64() : ty;\n+    auto exec = IntToDoubleExecFromOp<ScalarUnaryNotNull, Op>(ty);\n+    DCHECK_OK(func->AddKernel({ty}, output, exec));\n+  }\n+  return func;\n+}\n+\n\nReview comment:\n       I suggest to change the function name to `MakeUnaryArithmeticFunctionFloatOutTypeNotNull`.\r\n   Also, the `_checked` variants use the `ScalarUnaryNotNull` kernel exec generator but the regular variants use `ScalarUnary`. Need to add `MakeUnaryArithmeticFunctionFloatOutType` with same logic but using `ScalarUnary`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T06:40:28.869+0000",
                    "updated": "2021-06-22T06:40:28.869+0000",
                    "started": "2021-06-22T06:40:28.868+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612977",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/612978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#discussion_r655920884\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -485,6 +644,37 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+// For kernels that always return floating results\n+template <template <typename... Args> class KernelGenerator, typename Op>\n+ArrayKernelExec IntToDoubleExecFromOp(detail::GetTypeId get_id) {\n\nReview comment:\n       The variety of generator dispatchers available in the compute kernel are not consistent with their names. At some point we should rename them consistently, but that is out-of-scope for this PR. Nevertheless, I suggest to change the name of this generator dispatcher to `GenerateUnaryArithmeticFloatOutType`. This is simply a suggestion, we can rename later.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T06:43:46.670+0000",
                    "updated": "2021-06-22T06:43:46.670+0000",
                    "started": "2021-06-22T06:43:46.669+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612978",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/612981",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#discussion_r655927814\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -485,6 +644,37 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+// For kernels that always return floating results\n+template <template <typename... Args> class KernelGenerator, typename Op>\n+ArrayKernelExec IntToDoubleExecFromOp(detail::GetTypeId get_id) {\n\nReview comment:\n       *For context:* There are a variety of generator dispatchers in the compute layer and their names are inconsistent (this is indirectly related to ARROW-9161). There has been previous work in [renaming them for consistency](https://github.com/apache/arrow/pull/7461#issuecomment-645623392) but looking at the codebase, we will need another pass.\r\n   \r\n   I suggest to change the name `IntToDoubleExecFromOp` to `GenerateArithmeticWithFloatOutType`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T06:55:59.157+0000",
                    "updated": "2021-06-22T06:55:59.157+0000",
                    "started": "2021-06-22T06:55:59.157+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612981",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/612983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#discussion_r655918970\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -734,6 +924,19 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+// Integer arguments return double values\n+template <typename Op>\n+std::shared_ptr<ScalarFunction> MakeUnaryIntToDoubleNotNull(std::string name,\n+                                                            const FunctionDoc* doc) {\n+  auto func = std::make_shared<ArithmeticFunction>(name, Arity::Unary(), doc);\n+  for (const auto& ty : NumericTypes()) {\n+    auto output = is_integer(ty->id()) ? float64() : ty;\n+    auto exec = IntToDoubleExecFromOp<ScalarUnaryNotNull, Op>(ty);\n+    DCHECK_OK(func->AddKernel({ty}, output, exec));\n+  }\n+  return func;\n+}\n+\n\nReview comment:\n       I suggest to change the function name to `MakeUnaryArithmeticFunctionWithFloatOutTypeNotNull`.\r\n   Also, the `_checked` variants use the `ScalarUnaryNotNull` kernel exec generator but the regular variants use `ScalarUnary`. Need to add `MakeUnaryArithmeticFunctionWithFloatOutType` with same logic but using `ScalarUnary`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T06:57:06.186+0000",
                    "updated": "2021-06-22T06:57:06.186+0000",
                    "started": "2021-06-22T06:57:06.186+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612983",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/613122",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#discussion_r655907205\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1511,5 +1517,55 @@ TEST(TestBinaryArithmeticDecimal, Divide) {\n   }\n }\n \n+TYPED_TEST(TestUnaryArithmeticFloating, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1, 2.7182818284590452354]\"),\n+                        ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticSigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticUnsigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+}\n+\n\nReview comment:\n       In valid test cases, no need to use `ty` (aka `this->type_singleton()`) with `ArrayFromJSON` because that is the default type. Also, no need to use the `this` keyword for the class methods.\r\n   \r\n   Moreover, PR #10395 extends the unary scalar arithmetic test class to support combinations of JSON/Array inputs which will allow you to further simplify the test statements as follows:\r\n   * For integer inputs: `AssertUnaryOp(Ln, \"[1]\", ArrayFromJSON(float64(), \"[0]\"));`\r\n   * For floating point inputs: `AssertUnaryOp(Log10, \"[1, 10]\", \"[0, 1]\");`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1511,5 +1517,55 @@ TEST(TestBinaryArithmeticDecimal, Divide) {\n   }\n }\n \n+TYPED_TEST(TestUnaryArithmeticFloating, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1, 2.7182818284590452354]\"),\n+                        ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticSigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticUnsigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+}\n+\n\nReview comment:\n       Add test cases with `Inf` and `NaN` inputs.\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -274,6 +274,18 @@ an ``Invalid`` :class:`Status` when overflow is detected.\n +--------------------------+------------+--------------------+---------------------+\n | divide_checked           | Binary     | Numeric            | Numeric (1)         |\n +--------------------------+------------+--------------------+---------------------+\n+| ln                       | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| ln_checked               | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| log10                    | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| log10_checked            | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| log2                     | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| log2_checked             | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n\nReview comment:\n       I would suggest to add a note stating that these functions return `float64` value for integral inputs and same type as input for floating-point inputs.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1511,5 +1517,55 @@ TEST(TestBinaryArithmeticDecimal, Divide) {\n   }\n }\n \n+TYPED_TEST(TestUnaryArithmeticFloating, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1, 2.7182818284590452354]\"),\n+                        ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticSigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticUnsigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+}\n+\n\nReview comment:\n       Add test cases with `Inf`, `NaN`, `null`, `min`, `max` inputs.\r\n   \r\n   For min/max you can refer to the tests of [`AbsoluteValue`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc#L1111-L1147).\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1511,5 +1517,55 @@ TEST(TestBinaryArithmeticDecimal, Divide) {\n   }\n }\n \n+TYPED_TEST(TestUnaryArithmeticFloating, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1, 2.7182818284590452354]\"),\n+                        ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"), ArrayFromJSON(ty, \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticSigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticUnsigned, Log) {\n+  auto ty = this->type_singleton();\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, ArrayFromJSON(ty, \"[1]\"), ArrayFromJSON(float64(), \"[0]\"));\n+    this->AssertUnaryOp(Log10, ArrayFromJSON(ty, \"[1, 10]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+    this->AssertUnaryOp(Log2, ArrayFromJSON(ty, \"[1, 2]\"),\n+                        ArrayFromJSON(float64(), \"[0, 1]\"));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+}\n+\n\nReview comment:\n       In valid test cases, no need to use `ty` (aka `this->type_singleton()`) with `ArrayFromJSON` because that is the default type.\r\n   \r\n   Moreover, PR #10395 extends the unary scalar arithmetic test class to support combinations of JSON/Array inputs which will allow you to further simplify the test statements as follows:\r\n   * For integer inputs: `AssertUnaryOp(Ln, \"[1]\", ArrayFromJSON(float64(), \"[0]\"));`\r\n   * For floating point inputs: `AssertUnaryOp(Log10, \"[1, 10]\", \"[0, 1]\");`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -734,6 +924,19 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+// Integer arguments return double values\n+template <typename Op>\n+std::shared_ptr<ScalarFunction> MakeUnaryIntToDoubleNotNull(std::string name,\n+                                                            const FunctionDoc* doc) {\n+  auto func = std::make_shared<ArithmeticFunction>(name, Arity::Unary(), doc);\n+  for (const auto& ty : NumericTypes()) {\n+    auto output = is_integer(ty->id()) ? float64() : ty;\n+    auto exec = IntToDoubleExecFromOp<ScalarUnaryNotNull, Op>(ty);\n+    DCHECK_OK(func->AddKernel({ty}, output, exec));\n+  }\n+  return func;\n+}\n+\n\nReview comment:\n       I suggest to change the function name to `MakeUnaryArithmeticFunctionFloatOutTypeNotNull`.\r\n   Also, the `_checked` variants use the `ScalarUnaryNotNull` kernel exec generator but the regular variants use `ScalarUnary`. Need to add `MakeUnaryArithmeticFunctionFloatOutType` with same logic but using `ScalarUnary`.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -485,6 +644,37 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+// For kernels that always return floating results\n+template <template <typename... Args> class KernelGenerator, typename Op>\n+ArrayKernelExec IntToDoubleExecFromOp(detail::GetTypeId get_id) {\n\nReview comment:\n       The variety of generator dispatchers available in the compute kernel are not consistent with their names. At some point we should rename them consistently, but that is out-of-scope for this PR. Nevertheless, I suggest to change the name of this generator dispatcher to `GenerateUnaryArithmeticFloatOutType`. This is simply a suggestion, we can rename later.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -485,6 +644,37 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+// For kernels that always return floating results\n+template <template <typename... Args> class KernelGenerator, typename Op>\n+ArrayKernelExec IntToDoubleExecFromOp(detail::GetTypeId get_id) {\n\nReview comment:\n       *For context:* There are a variety of generator dispatchers in the compute layer and their names are inconsistent (this is indirectly related to ARROW-9161). There has been previous work in [renaming them for consistency](https://github.com/apache/arrow/pull/7461#issuecomment-645623392) but looking at the codebase, we will need another pass.\r\n   \r\n   I suggest to change the name `IntToDoubleExecFromOp` to `GenerateArithmeticWithFloatOutType`.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -734,6 +924,19 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+// Integer arguments return double values\n+template <typename Op>\n+std::shared_ptr<ScalarFunction> MakeUnaryIntToDoubleNotNull(std::string name,\n+                                                            const FunctionDoc* doc) {\n+  auto func = std::make_shared<ArithmeticFunction>(name, Arity::Unary(), doc);\n+  for (const auto& ty : NumericTypes()) {\n+    auto output = is_integer(ty->id()) ? float64() : ty;\n+    auto exec = IntToDoubleExecFromOp<ScalarUnaryNotNull, Op>(ty);\n+    DCHECK_OK(func->AddKernel({ty}, output, exec));\n+  }\n+  return func;\n+}\n+\n\nReview comment:\n       I suggest to change the function name to `MakeUnaryArithmeticFunctionWithFloatOutTypeNotNull`.\r\n   Also, the `_checked` variants use the `ScalarUnaryNotNull` kernel exec generator but the regular variants use `ScalarUnary`. Need to add `MakeUnaryArithmeticFunctionWithFloatOutType` with same logic but using `ScalarUnary`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T07:50:20.359+0000",
                    "updated": "2021-06-22T07:50:20.359+0000",
                    "started": "2021-06-22T07:50:20.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613122",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/613257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567\n\n\n   Adds ln, log10, and log2. We could add a log1e and/or a logN if useful (probably not?)\r\n   \r\n   Has some code from/will conflict with #10544.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T08:07:35.755+0000",
                    "updated": "2021-06-22T08:07:35.755+0000",
                    "started": "2021-06-22T08:07:35.755+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613257",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/613309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#issuecomment-865207432\n\n\n   https://issues.apache.org/jira/browse/ARROW-13096\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T08:14:57.175+0000",
                    "updated": "2021-06-22T08:14:57.175+0000",
                    "started": "2021-06-22T08:14:57.175+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613309",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/613494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#issuecomment-866005033\n\n\n   @edponce thanks for the feedback! Since I also used these in #10544 I've made the changes there - if they look OK, then I'll backport them here. I had to do a little refactoring since ScalarBinary(EqualTypes) didn't specify a template parameter list and that threw off the inference.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T13:54:41.551+0000",
                    "updated": "2021-06-22T13:54:41.551+0000",
                    "started": "2021-06-22T13:54:41.551+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613494",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/617023",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#issuecomment-871365421\n\n\n   I will rebase this once #10544 merges since there'll be more conflicts there anyways.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-30T12:37:15.944+0000",
                    "updated": "2021-06-30T12:37:15.944+0000",
                    "started": "2021-06-30T12:37:15.943+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "617023",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/617693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#discussion_r662440835\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -396,6 +396,52 @@ Result<Datum> Atan(const Datum& arg, ExecContext* ctx = NULLPTR);\n ARROW_EXPORT\n Result<Datum> Atan2(const Datum& y, const Datum& x, ExecContext* ctx = NULLPTR);\n \n+/// \\brief Get the natural log of a value. Array values can be of arbitrary\n+/// length. If argument is null the result will be null.\n+///\n+/// \\param[in] arg the value transformed\n\nReview comment:\n       Why \"transformed\"?\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -396,6 +396,52 @@ Result<Datum> Atan(const Datum& arg, ExecContext* ctx = NULLPTR);\n ARROW_EXPORT\n Result<Datum> Atan2(const Datum& y, const Datum& x, ExecContext* ctx = NULLPTR);\n \n+/// \\brief Get the natural log of a value. Array values can be of arbitrary\n+/// length. If argument is null the result will be null.\n\nReview comment:\n       I'm not sure that \"Array values can be of arbitrary length\" is a useful mention. It's normally true of all scalar (elemen-wise) functions.\r\n   \r\n   Also, can we keep the `\\brief` sentence a single one-liner, and put the description after a newline?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -686,6 +686,118 @@ struct Atan2 {\n   }\n };\n \n+struct LogNatural {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      return -std::numeric_limits<T>::infinity();\n+    } else if (arg < 0.0) {\n+      return std::numeric_limits<T>::quiet_NaN();\n+    }\n+    return std::log(arg);\n+  }\n+};\n+\n+struct LogNaturalChecked {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status* st) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      *st = Status::Invalid(\"divide by zero\");\n+      return arg;\n+    } else if (arg < 0.0) {\n+      *st = Status::Invalid(\"domain error\");\n\nReview comment:\n       Perhaps something more precise, e.g. \"logarithm of negative number\"?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -686,6 +686,118 @@ struct Atan2 {\n   }\n };\n \n+struct LogNatural {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      return -std::numeric_limits<T>::infinity();\n+    } else if (arg < 0.0) {\n+      return std::numeric_limits<T>::quiet_NaN();\n+    }\n+    return std::log(arg);\n+  }\n+};\n+\n+struct LogNaturalChecked {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status* st) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      *st = Status::Invalid(\"divide by zero\");\n+      return arg;\n+    } else if (arg < 0.0) {\n+      *st = Status::Invalid(\"domain error\");\n+      return arg;\n+    }\n+    return std::log(arg);\n+  }\n+};\n+\n+struct Log10 {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      return -std::numeric_limits<T>::infinity();\n+    } else if (arg < 0.0) {\n+      return std::numeric_limits<T>::quiet_NaN();\n+    }\n+    return std::log10(arg);\n+  }\n+};\n+\n+struct Log10Checked {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status* st) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0) {\n+      *st = Status::Invalid(\"divide by zero\");\n+      return arg;\n+    } else if (arg < 0) {\n+      *st = Status::Invalid(\"domain error\");\n+      return arg;\n+    }\n+    return std::log10(arg);\n+  }\n+};\n+\n+struct Log2 {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      return -std::numeric_limits<T>::infinity();\n+    } else if (arg < 0.0) {\n+      return std::numeric_limits<T>::quiet_NaN();\n+    }\n+    return std::log2(arg);\n+  }\n+};\n+\n+struct Log2Checked {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status* st) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      *st = Status::Invalid(\"divide by zero\");\n+      return arg;\n+    } else if (arg < 0.0) {\n+      *st = Status::Invalid(\"domain error\");\n+      return arg;\n+    }\n+    return std::log2(arg);\n+  }\n+};\n\nReview comment:\n       I don't know if that's worth it, but these three kernels have very similar implementations, maybe something could be shared. Or perhaps that's pointless generalization.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -686,6 +686,118 @@ struct Atan2 {\n   }\n };\n \n+struct LogNatural {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      return -std::numeric_limits<T>::infinity();\n+    } else if (arg < 0.0) {\n+      return std::numeric_limits<T>::quiet_NaN();\n+    }\n+    return std::log(arg);\n+  }\n+};\n+\n+struct LogNaturalChecked {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status* st) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      *st = Status::Invalid(\"divide by zero\");\n\nReview comment:\n       I don't know if that's the best error message. Perhaps \"logarithm of zero\"?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -1295,6 +1407,60 @@ const FunctionDoc atan2_doc{\n     \"Compute the inverse tangent using argument signs to determine the quadrant\",\n     (\"Integer arguments return double values.\"),\n     {\"y\", \"x\"}};\n+\n+const FunctionDoc ln_doc{\n+    \"Take natural log of arguments element-wise\",\n\nReview comment:\n       We use \"Compute\" above.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1821,5 +1821,57 @@ TYPED_TEST(TestBinaryArithmeticFloating, TrigAtan2) {\n                               -M_PI_2, 0, M_PI));\n }\n \n+TYPED_TEST(TestUnaryArithmeticFloating, Log) {\n+  using CType = typename TestFixture::CType;\n+  auto ty = this->type_singleton();\n+  this->SetNansEqual(true);\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    this->AssertUnaryOp(Ln, \"[1, 2.7182818284590452354, null, NaN, Inf]\",\n+                        \"[0, 1, null, NaN, Inf]\");\n+    // N.B. min() for float types is smallest normal number > 0\n+    this->AssertUnaryOp(Ln, std::numeric_limits<CType>::min(),\n+                        std::log(std::numeric_limits<CType>::min()));\n+    this->AssertUnaryOp(Ln, std::numeric_limits<CType>::max(),\n+                        std::log(std::numeric_limits<CType>::max()));\n+    this->AssertUnaryOp(Log10, \"[1, 10, null, NaN, Inf]\", \"[0, 1, null, NaN, Inf]\");\n+    this->AssertUnaryOp(Log10, std::numeric_limits<CType>::min(),\n+                        std::log10(std::numeric_limits<CType>::min()));\n+    this->AssertUnaryOp(Log10, std::numeric_limits<CType>::max(),\n+                        std::log10(std::numeric_limits<CType>::max()));\n+    this->AssertUnaryOp(Log2, \"[1, 2, null, NaN, Inf]\", \"[0, 1, null, NaN, Inf]\");\n+    this->AssertUnaryOp(Log2, std::numeric_limits<CType>::min(),\n+                        std::log2(std::numeric_limits<CType>::min()));\n+    this->AssertUnaryOp(Log2, std::numeric_limits<CType>::max(),\n+                        std::log2(std::numeric_limits<CType>::max()));\n+    this->AssertUnaryOp(Log1p, \"[0, 1.7182818284590452354, null, NaN, Inf]\",\n+                        \"[0, 1, null, NaN, Inf]\");\n+    this->AssertUnaryOp(Log1p, std::numeric_limits<CType>::min(),\n+                        std::log1p(std::numeric_limits<CType>::min()));\n+    this->AssertUnaryOp(Log1p, std::numeric_limits<CType>::max(),\n+                        std::log1p(std::numeric_limits<CType>::max()));\n+  }\n+  this->AssertUnaryOpRaises(Ln, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Ln, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Ln, \"[-Inf]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Ln, MakeArray(std::numeric_limits<CType>::lowest()),\n+                            \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log10, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, \"[-Inf]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log10, MakeArray(std::numeric_limits<CType>::lowest()),\n+                            \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[0]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log2, \"[-1]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, \"[-Inf]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log2, MakeArray(std::numeric_limits<CType>::lowest()),\n+                            \"domain error\");\n+  this->AssertUnaryOpRaises(Log1p, \"[-1]\", \"divide by zero\");\n+  this->AssertUnaryOpRaises(Log1p, \"[-2]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log1p, \"[-Inf]\", \"domain error\");\n+  this->AssertUnaryOpRaises(Log1p, MakeArray(std::numeric_limits<CType>::lowest()),\n+                            \"domain error\");\n\nReview comment:\n       Can we check the error cases for the non-checked variants as well?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-01T16:45:36.967+0000",
                    "updated": "2021-07-01T16:45:36.967+0000",
                    "started": "2021-07-01T16:45:36.966+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "617693",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/617694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#issuecomment-872398480\n\n\n   Hmm, there's a genuine CI failure here:\r\n   https://github.com/apache/arrow/pull/10567/checks?check_run_id=2954826698\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-01T16:46:30.290+0000",
                    "updated": "2021-07-01T16:46:30.290+0000",
                    "started": "2021-07-01T16:46:30.289+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "617694",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/617710",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#discussion_r662455707\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -686,6 +686,118 @@ struct Atan2 {\n   }\n };\n \n+struct LogNatural {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      return -std::numeric_limits<T>::infinity();\n+    } else if (arg < 0.0) {\n+      return std::numeric_limits<T>::quiet_NaN();\n+    }\n+    return std::log(arg);\n+  }\n+};\n+\n+struct LogNaturalChecked {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status* st) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      *st = Status::Invalid(\"divide by zero\");\n+      return arg;\n+    } else if (arg < 0.0) {\n+      *st = Status::Invalid(\"domain error\");\n+      return arg;\n+    }\n+    return std::log(arg);\n+  }\n+};\n+\n+struct Log10 {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      return -std::numeric_limits<T>::infinity();\n+    } else if (arg < 0.0) {\n+      return std::numeric_limits<T>::quiet_NaN();\n+    }\n+    return std::log10(arg);\n+  }\n+};\n+\n+struct Log10Checked {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status* st) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0) {\n+      *st = Status::Invalid(\"divide by zero\");\n+      return arg;\n+    } else if (arg < 0) {\n+      *st = Status::Invalid(\"domain error\");\n+      return arg;\n+    }\n+    return std::log10(arg);\n+  }\n+};\n+\n+struct Log2 {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status*) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      return -std::numeric_limits<T>::infinity();\n+    } else if (arg < 0.0) {\n+      return std::numeric_limits<T>::quiet_NaN();\n+    }\n+    return std::log2(arg);\n+  }\n+};\n+\n+struct Log2Checked {\n+  template <typename T, typename Arg>\n+  static enable_if_floating_point<Arg, T> Call(KernelContext*, Arg arg, Status* st) {\n+    static_assert(std::is_same<T, Arg>::value, \"\");\n+    if (arg == 0.0) {\n+      *st = Status::Invalid(\"divide by zero\");\n+      return arg;\n+    } else if (arg < 0.0) {\n+      *st = Status::Invalid(\"domain error\");\n+      return arg;\n+    }\n+    return std::log2(arg);\n+  }\n+};\n\nReview comment:\n       I could make it templated on two functions (one for float, one for double)?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-01T17:01:24.716+0000",
                    "updated": "2021-07-01T17:01:24.716+0000",
                    "started": "2021-07-01T17:01:24.715+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "617710",
                    "issueId": "13384191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/worklog/618112",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10567:\nURL: https://github.com/apache/arrow/pull/10567#issuecomment-872989061\n\n\n   I've extended the test cases and fixed the CI failure (by avoiding bouncing through RapidJSON for the failing assertions).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-02T13:14:38.562+0000",
                    "updated": "2021-07-02T13:14:38.562+0000",
                    "started": "2021-07-02T13:14:38.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618112",
                    "issueId": "13384191"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2feca2c1[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@119a93da[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ec07293[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@b012cd2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15edab93[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@100bd8da[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d9274a2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5ff7a47e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27be2d20[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@69bdfc05[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2744a2f4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@45723636[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jul 07 02:46:39 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-07-07T02:46:39.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13096/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-06-16T15:51:18.000+0000",
        "updated": "2021-07-15T15:46:12.000+0000",
        "timeoriginalestimate": null,
        "description": "ln, log, log2?",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement logarithm compute functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/comment/17367085",
                    "id": "17367085",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I consider having (1) *ln*, (2) *log10*, and (3) *log2* is a good starting point, and the missing variants are:\r\n (4) *log\\(x, base)* = *log\\(x)* / *log(base)*, note that *log(base)* is a constant w.r.t. to Datum *x* so optimizations can be made\r\n (5) *log1p\\(x)* = *log(1+x)*\r\n\r\nNote that (4) is the most general variant as it can represent any of the other variants, so it might be worthwhile to consider adding it to Arrow.\r\n\r\nAs additional context, here is the partial landscape of log functions across library/languages:\r\n * [C++ math library|https://www.cplusplus.com/reference/cmath/log] supports (1,2,3,5)\r\n * [Python *math* module|https://docs.python.org/3/library/math.html#math.log] supports (1-5)\r\n * [Python *numpy*|https://numpy.org/doc/stable/reference/generated/numpy.log.html#numpy.log] supports (1,2,3,5)\r\n * [R|https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/log] supports (1-5)\r\n * [Rust math|https://docs.rs/numeric/0.1.4/numeric/math/fn.log.html] support (1-5)\r\n * [MySQL|https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html] supports (1-4)\r\n * [PostgreSQL|https://www.postgresql.org/docs/9.1/functions-math.html] supports (1,2,4)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-06-22T07:46:15.619+0000",
                    "updated": "2021-06-22T07:46:15.619+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/comment/17367392",
                    "id": "17367392",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Thanks for looking all these over. I think we can add #5 easily. For #4, would we pass the log base as a kernel option? Or as another argument? (We'd only be able to optimize in the former case, I guess, unless we required a scalar argument)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-06-22T14:32:02.159+0000",
                    "updated": "2021-06-22T14:32:02.159+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384191/comment/17376175",
                    "id": "17376175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai%231",
                        "name": "yibocai#1",
                        "key": "yibocai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10453",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10453",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10453",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10453"
                        },
                        "displayName": "yibocai#1",
                        "active": false,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 10567\n[https://github.com/apache/arrow/pull/10567]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai%231",
                        "name": "yibocai#1",
                        "key": "yibocai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10453",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10453",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10453",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10453"
                        },
                        "displayName": "yibocai#1",
                        "active": false,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-07-07T02:46:39.147+0000",
                    "updated": "2021-07-07T02:46:39.147+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0s0jc:",
        "customfield_12314139": null
    }
}