{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13286312",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312",
    "key": "ARROW-7890",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7890/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 40,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/390080",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-20T17:23:42.103+0000",
                    "updated": "2020-02-20T17:23:42.103+0000",
                    "started": "2020-02-20T17:23:42.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390080",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/390090",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#issuecomment-589214675\n \n \n   https://issues.apache.org/jira/browse/ARROW-7890\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-20T17:31:35.429+0000",
                    "updated": "2020-02-20T17:31:35.429+0000",
                    "started": "2020-02-20T17:31:35.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390090",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#issuecomment-590997598\n \n \n   I still need to add docstrings, but otherwise I think this is ready for review. Also tested under ThreadSanitizer.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:26:42.739+0000",
                    "updated": "2020-02-25T18:26:42.739+0000",
                    "started": "2020-02-25T18:26:42.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392762",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384049211\n \n \n\n ##########\n File path: cpp/src/arrow/util/parallel.h\n ##########\n @@ -35,61 +32,19 @@ namespace internal {\n template <class FUNCTION>\n Status ParallelFor(int num_tasks, FUNCTION&& func) {\n   auto pool = internal::GetCpuThreadPool();\n-  std::vector<std::future<Status>> futures(num_tasks);\n+  std::vector<Future<Status>> futures;\n+  futures.reserve(num_tasks);\n \n Review comment:\n   @bkietz Note that a Future isn't default-constructible. Should I add a default constructor that initializes it to an invalid state?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:37:14.799+0000",
                    "updated": "2020-02-25T18:37:14.799+0000",
                    "started": "2020-02-25T18:37:14.799+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392815",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384049483\n \n \n\n ##########\n File path: cpp/src/arrow/util/future_iterator.h\n ##########\n @@ -0,0 +1,70 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cassert>\n+#include <memory>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/iterator.h\"\n+#include \"arrow/util/logging.h\"\n \n Review comment:\n   Oops, need to remove this include.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:37:44.859+0000",
                    "updated": "2020-02-25T18:37:44.859+0000",
                    "started": "2020-02-25T18:37:44.859+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392817",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r382283496\n \n \n\n ##########\n File path: cpp/src/arrow/util/future.h\n ##########\n @@ -0,0 +1,223 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <atomic>\n+#include <cmath>\n+#include <memory>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+enum class FutureState : int8_t { PENDING, SUCCESS, FAILURE };\n+\n+inline bool IsFutureFinished(FutureState state) { return state != FutureState::PENDING; }\n+\n+// ---------------------------------------------------------------------\n+// Type-erased helpers\n+\n+class FutureWaiter;\n+\n+class ARROW_EXPORT FutureImpl {\n+ public:\n+  static constexpr double kInfinity = HUGE_VAL;\n+\n+  virtual ~FutureImpl();\n \n Review comment:\n   ```suggestion\r\n     virtual ~FutureImpl() = default;\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:28.973+0000",
                    "updated": "2020-02-25T21:28:28.973+0000",
                    "started": "2020-02-25T21:28:28.972+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392957",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384086690\n \n \n\n ##########\n File path: cpp/src/arrow/util/future.h\n ##########\n @@ -0,0 +1,318 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <atomic>\n+#include <cmath>\n+#include <memory>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+enum class FutureState : int8_t { PENDING, SUCCESS, FAILURE };\n+\n+inline bool IsFutureFinished(FutureState state) { return state != FutureState::PENDING; }\n+\n+// ---------------------------------------------------------------------\n+// Type-erased helpers\n+\n+class FutureWaiter;\n+template <typename T>\n+class Future;\n+\n+class ARROW_EXPORT FutureImpl {\n+ public:\n+  static constexpr double kInfinity = HUGE_VAL;\n+\n+  virtual ~FutureImpl();\n+\n+  FutureState state() { return state_.load(); }\n+\n+  static std::unique_ptr<FutureImpl> Make();\n+\n+ protected:\n+  FutureImpl();\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(FutureImpl);\n+\n+  // Future API\n+  void MarkFinished();\n+  void MarkFailed();\n+  void Wait();\n+  bool Wait(double seconds);\n+\n+  // Waiter API\n+  inline FutureState AddWaiter(FutureWaiter* w, int future_num);\n+  inline void RemoveWaiter(FutureWaiter* w);\n+\n+  std::atomic<FutureState> state_;\n+\n+  template <typename T>\n+  friend class Future;\n+  template <typename T>\n+  friend class FutureStorage;\n+  friend class FutureWaiter;\n+  friend class FutureWaiterImpl;\n+};\n+\n+// An object that waits on multiple futures at once.  Only one waiter\n+// can be registered for each future at any time.\n+class ARROW_EXPORT FutureWaiter {\n+ public:\n+  enum Kind : int8_t { ANY, ALL, ALL_OR_FIRST_FAILED, ITERATE };\n+\n+  static constexpr double kInfinity = FutureImpl::kInfinity;\n+\n+  static std::unique_ptr<FutureWaiter> Make(Kind kind, std::vector<FutureImpl*> futures);\n \n Review comment:\n   I don't think this function should be public\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:28.977+0000",
                    "updated": "2020-02-25T21:28:28.977+0000",
                    "started": "2020-02-25T21:28:28.977+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392958",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384106566\n \n \n\n ##########\n File path: cpp/src/arrow/util/future.cc\n ##########\n @@ -0,0 +1,300 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/future.h\"\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <condition_variable>\n+#include <mutex>\n+#include <numeric>\n+\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+// Shared mutex for all FutureWaiter instances.\n+// This simplifies lock management compared to a per-waiter mutex.\n+// The locking order is: global waiter mutex, then per-future mutex.\n+//\n+// It is unlikely that many waiter instances are alive at once, so this\n+// should ideally not limit scalability.\n+static std::mutex global_waiter_mutex;\n \n Review comment:\n   This doesn't seem to save much complexity. The only place it's used outside `class FutureWaiterImpl` is inside `class ConcreteFutureImpl`, which has a pointer to its `waiter`. I'd prefer a per-waiter mutex just to avoid worrying about this\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:29.269+0000",
                    "updated": "2020-02-25T21:28:29.269+0000",
                    "started": "2020-02-25T21:28:29.268+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392959",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392960",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r382647756\n \n \n\n ##########\n File path: cpp/src/arrow/util/future.h\n ##########\n @@ -0,0 +1,223 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <atomic>\n+#include <cmath>\n+#include <memory>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+enum class FutureState : int8_t { PENDING, SUCCESS, FAILURE };\n+\n+inline bool IsFutureFinished(FutureState state) { return state != FutureState::PENDING; }\n+\n+// ---------------------------------------------------------------------\n+// Type-erased helpers\n+\n+class FutureWaiter;\n+\n+class ARROW_EXPORT FutureImpl {\n+ public:\n+  static constexpr double kInfinity = HUGE_VAL;\n+\n+  virtual ~FutureImpl();\n+\n+  FutureState state() { return state_.load(); }\n+\n+  static std::unique_ptr<FutureImpl> Make();\n+\n+  // Future API\n+  void MarkFinished();\n+  void MarkFailed();\n+  void Wait();\n+  bool Wait(double seconds);\n \n Review comment:\n   Instead of returning bool, could this return a more descriptive enum (so we don't have to remember what true/false mean here)? Maybe:\r\n   ```suggestion\r\n     FutureState Wait(double seconds);\r\n   ```\r\n   (returns `FutureState::PENDING` if the future is not completed before `seconds` have passed)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:29.294+0000",
                    "updated": "2020-02-25T21:28:29.294+0000",
                    "started": "2020-02-25T21:28:29.293+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392960",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392961",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384100130\n \n \n\n ##########\n File path: cpp/src/arrow/util/future_test.cc\n ##########\n @@ -0,0 +1,707 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/future_iterator.h\"\n+\n+#include <algorithm>\n+#include <chrono>\n+#include <memory>\n+#include <ostream>\n+#include <random>\n+#include <string>\n+#include <thread>\n+#include <vector>\n+\n+#include <gmock/gmock-matchers.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/thread_pool.h\"\n+\n+namespace arrow {\n+\n+using internal::ThreadPool;\n+\n+int ToInt(int x) { return x; }\n+\n+// A data type without a default constructor.\n+struct Foo {\n+  int bar;\n+  std::string baz;\n+\n+  explicit Foo(int value) : bar(value), baz(std::to_string(value)) {}\n+\n+  int ToInt() const { return bar; }\n+\n+  bool operator==(int other) const { return bar == other; }\n+  bool operator==(const Foo& other) const { return bar == other.bar; }\n+\n+  friend std::ostream& operator<<(std::ostream& os, const Foo& foo) {\n+    return os << \"Foo(\" << foo.bar << \")\";\n+  }\n+};\n+\n+template <>\n+struct IterationTraits<Foo> {\n+  static Foo End() { return Foo(-1); }\n+};\n+\n+// A data type with only move constructors.\n+struct MoveOnlyDataType {\n+  explicit MoveOnlyDataType(int x) : data(new int(x)) {}\n+\n+  MoveOnlyDataType(const MoveOnlyDataType& other) = delete;\n+  MoveOnlyDataType& operator=(const MoveOnlyDataType& other) = delete;\n+\n+  MoveOnlyDataType(MoveOnlyDataType&& other) { MoveFrom(other); }\n+  MoveOnlyDataType& operator=(MoveOnlyDataType&& other) {\n+    MoveFrom(other);\n+    return *this;\n+  }\n+\n+  ~MoveOnlyDataType() { Destroy(); }\n+\n+  void Destroy() {\n+    if (data != nullptr) {\n+      delete data;\n+      data = nullptr;\n+    }\n+  }\n+\n+  void MoveFrom(MoveOnlyDataType& other) {\n+    Destroy();\n+    data = other.data;\n+    other.data = nullptr;\n+  }\n+\n+  int ToInt() const { return data == nullptr ? -42 : *data; }\n+\n+  bool operator==(int other) const { return data != nullptr && *data == other; }\n+  bool operator==(const MoveOnlyDataType& other) const {\n+    return data != nullptr && other.data != nullptr && *data == *other.data;\n+  }\n+\n+  int* data = nullptr;\n+};\n+\n+template <>\n+struct IterationTraits<MoveOnlyDataType> {\n+  static MoveOnlyDataType End() { return MoveOnlyDataType(-1); }\n+};\n+\n+template <typename T>\n+void AssertNotFinished(const Future<T>& fut) {\n+  ASSERT_FALSE(IsFutureFinished(fut.state()));\n+}\n+\n+template <typename T>\n+void AssertFinished(const Future<T>& fut) {\n+  ASSERT_TRUE(IsFutureFinished(fut.state()));\n+}\n+\n+// Assert the future is successful *now*\n+template <typename T>\n+void AssertSuccessful(const Future<T>& fut) {\n+  ASSERT_EQ(fut.state(), FutureState::SUCCESS);\n+  ASSERT_OK(fut.status());\n+}\n+\n+// Assert the future is failed *now*\n+template <typename T>\n+void AssertFailed(const Future<T>& fut) {\n+  ASSERT_EQ(fut.state(), FutureState::FAILURE);\n+  ASSERT_FALSE(fut.status().ok());\n+}\n+\n+template <typename T>\n+std::vector<T> IteratorToVector(Iterator<T> iterator) {\n+  std::vector<T> out;\n+\n \n Review comment:\n   ```suggestion\r\n     std::transform(iterator.begin(), iterator.end(), std::back_inserter(out), [](Result<T> maybe_value) {\r\n       EXPECT_OK(maybe_value);\r\n       return std::move(maybe_value)->ValueOrDie()\r\n     });\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:29.420+0000",
                    "updated": "2020-02-25T21:28:29.420+0000",
                    "started": "2020-02-25T21:28:29.420+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392961",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384093852\n \n \n\n ##########\n File path: cpp/src/arrow/util/future.h\n ##########\n @@ -0,0 +1,318 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <atomic>\n+#include <cmath>\n+#include <memory>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+enum class FutureState : int8_t { PENDING, SUCCESS, FAILURE };\n+\n+inline bool IsFutureFinished(FutureState state) { return state != FutureState::PENDING; }\n+\n+// ---------------------------------------------------------------------\n+// Type-erased helpers\n+\n+class FutureWaiter;\n+template <typename T>\n+class Future;\n+\n+class ARROW_EXPORT FutureImpl {\n+ public:\n+  static constexpr double kInfinity = HUGE_VAL;\n+\n+  virtual ~FutureImpl();\n+\n+  FutureState state() { return state_.load(); }\n+\n+  static std::unique_ptr<FutureImpl> Make();\n+\n+ protected:\n+  FutureImpl();\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(FutureImpl);\n+\n+  // Future API\n+  void MarkFinished();\n+  void MarkFailed();\n+  void Wait();\n+  bool Wait(double seconds);\n+\n+  // Waiter API\n+  inline FutureState AddWaiter(FutureWaiter* w, int future_num);\n+  inline void RemoveWaiter(FutureWaiter* w);\n+\n+  std::atomic<FutureState> state_;\n+\n+  template <typename T>\n+  friend class Future;\n+  template <typename T>\n+  friend class FutureStorage;\n+  friend class FutureWaiter;\n+  friend class FutureWaiterImpl;\n+};\n+\n+// An object that waits on multiple futures at once.  Only one waiter\n+// can be registered for each future at any time.\n+class ARROW_EXPORT FutureWaiter {\n+ public:\n+  enum Kind : int8_t { ANY, ALL, ALL_OR_FIRST_FAILED, ITERATE };\n+\n+  static constexpr double kInfinity = FutureImpl::kInfinity;\n+\n+  static std::unique_ptr<FutureWaiter> Make(Kind kind, std::vector<FutureImpl*> futures);\n+\n+  template <typename FutureType>\n+  static std::unique_ptr<FutureWaiter> Make(Kind kind,\n+                                            const std::vector<FutureType>& futures) {\n+    return Make(kind, ExtractFutures(futures));\n+  }\n+\n+  virtual ~FutureWaiter();\n+\n+  bool Wait(double seconds = kInfinity);\n+  int WaitAndFetchOne();\n+\n+  std::vector<int> MoveFinishedFutures();\n+\n+ protected:\n+  // Extract FutureImpls from Futures\n+  template <typename FutureType,\n+            typename Enable = std::enable_if<!std::is_pointer<FutureType>::value>>\n+  static std::vector<FutureImpl*> ExtractFutures(const std::vector<FutureType>& futures) {\n+    std::vector<FutureImpl*> base_futures(futures.size());\n+    for (int i = 0; i < static_cast<int>(futures.size()); ++i) {\n+      base_futures[i] = futures[i].impl_;\n+    }\n+    return base_futures;\n+  }\n+\n+  // Extract FutureImpls from Future pointers\n+  template <typename FutureType>\n+  static std::vector<FutureImpl*> ExtractFutures(\n+      const std::vector<FutureType*>& futures) {\n+    std::vector<FutureImpl*> base_futures(futures.size());\n+    for (int i = 0; i < static_cast<int>(futures.size()); ++i) {\n+      base_futures[i] = futures[i]->impl_;\n+    }\n+    return base_futures;\n+  }\n+\n+  FutureWaiter();\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(FutureWaiter);\n+\n+  inline void MarkFutureFinishedUnlocked(int future_num, FutureState state);\n+\n+  friend class FutureImpl;\n+  friend class ConcreteFutureImpl;\n+};\n+\n+// ---------------------------------------------------------------------\n+// An intermediate class for storing Future results\n+\n+class FutureStorageBase {\n+ public:\n+  FutureStorageBase() : impl_(FutureImpl::Make()) {}\n+\n+ protected:\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(FutureStorageBase);\n+  std::unique_ptr<FutureImpl> impl_;\n+\n+  template <typename T>\n+  friend class Future;\n+};\n+\n+template <typename T>\n+class FutureStorage : public FutureStorageBase {\n+ public:\n+  Status status() const { return result_.status(); }\n+\n+  template <typename U>\n+  void MarkFinished(U&& value) {\n+    result_ = std::forward<U>(value);\n+    if (ARROW_PREDICT_TRUE(result_.ok())) {\n+      impl_->MarkFinished();\n+    } else {\n+      impl_->MarkFailed();\n+    }\n+  }\n+\n+  template <typename Func>\n+  void ExecuteAndMarkFinished(Func&& func) {\n+    MarkFinished(func());\n+  }\n+\n+ protected:\n+  Result<T> result_;\n+  friend class Future<T>;\n+};\n+\n+// A Future<void> just stores a Status (always ok for now, but that could change\n+// if we implement cancellation).\n+template <>\n+class FutureStorage<void> : public FutureStorageBase {\n+ public:\n+  Status status() const { return status_; }\n+\n+  void MarkFinished(Status st = Status::OK()) {\n+    status_ = std::move(st);\n+    impl_->MarkFinished();\n+  }\n+\n+  template <typename Func>\n+  void ExecuteAndMarkFinished(Func&& func) {\n+    func();\n+    MarkFinished();\n+  }\n+\n+ protected:\n+  Status status_;\n+};\n+\n+// A Future<Status> just stores a Status.\n+template <>\n+class FutureStorage<Status> : public FutureStorageBase {\n+ public:\n+  Status status() const { return status_; }\n+\n+  void MarkFinished(Status st) {\n+    status_ = std::move(st);\n+    if (ARROW_PREDICT_TRUE(status_.ok())) {\n+      impl_->MarkFinished();\n+    } else {\n+      impl_->MarkFailed();\n+    }\n+  }\n+\n+  template <typename Func>\n+  void ExecuteAndMarkFinished(Func&& func) {\n+    MarkFinished(func());\n+  }\n+\n+ protected:\n+  Status status_;\n+};\n+\n+// ---------------------------------------------------------------------\n+// Public API\n+\n+template <typename T>\n+class Future {\n+ public:\n+  static constexpr double kInfinity = FutureImpl::kInfinity;\n+\n+  // Consumer API\n+\n+  FutureState state() const { return impl_->state(); }\n+\n+  const Result<T>& result() const& {\n+    Wait();\n+    return storage_->result_;\n \n Review comment:\n   I can't figure out how this compiles. Neither `FutureStorage<void>` nor `FutureStorage<Status>` have a member named result_\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:29.423+0000",
                    "updated": "2020-02-25T21:28:29.423+0000",
                    "started": "2020-02-25T21:28:29.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392962",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392963",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384116843\n \n \n\n ##########\n File path: cpp/src/arrow/util/future_iterator.h\n ##########\n @@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cassert>\n+#include <memory>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/iterator.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+template <typename T>\n+class AsCompletedIterator {\n \n Review comment:\n   It would probably also be handy to have an iterator which yields results in order of completion (one which corresponds to `FutureWaiter::ANY`).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:29.423+0000",
                    "updated": "2020-02-25T21:28:29.423+0000",
                    "started": "2020-02-25T21:28:29.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392963",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384113073\n \n \n\n ##########\n File path: cpp/src/arrow/util/future.h\n ##########\n @@ -0,0 +1,318 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <atomic>\n+#include <cmath>\n+#include <memory>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+enum class FutureState : int8_t { PENDING, SUCCESS, FAILURE };\n+\n+inline bool IsFutureFinished(FutureState state) { return state != FutureState::PENDING; }\n+\n+// ---------------------------------------------------------------------\n+// Type-erased helpers\n+\n+class FutureWaiter;\n+template <typename T>\n+class Future;\n+\n+class ARROW_EXPORT FutureImpl {\n+ public:\n+  static constexpr double kInfinity = HUGE_VAL;\n+\n+  virtual ~FutureImpl();\n+\n+  FutureState state() { return state_.load(); }\n+\n+  static std::unique_ptr<FutureImpl> Make();\n+\n+ protected:\n+  FutureImpl();\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(FutureImpl);\n+\n+  // Future API\n+  void MarkFinished();\n+  void MarkFailed();\n+  void Wait();\n+  bool Wait(double seconds);\n+\n+  // Waiter API\n+  inline FutureState AddWaiter(FutureWaiter* w, int future_num);\n+  inline void RemoveWaiter(FutureWaiter* w);\n+\n+  std::atomic<FutureState> state_;\n+\n+  template <typename T>\n+  friend class Future;\n+  template <typename T>\n+  friend class FutureStorage;\n+  friend class FutureWaiter;\n+  friend class FutureWaiterImpl;\n+};\n+\n+// An object that waits on multiple futures at once.  Only one waiter\n \n Review comment:\n   Nit: could this definition be moved below Future so that FutureImpl is directly followed by Future?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:29.469+0000",
                    "updated": "2020-02-25T21:28:29.469+0000",
                    "started": "2020-02-25T21:28:29.469+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392964",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392965",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384113343\n \n \n\n ##########\n File path: cpp/src/arrow/util/future.h\n ##########\n @@ -0,0 +1,318 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <atomic>\n+#include <cmath>\n+#include <memory>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+enum class FutureState : int8_t { PENDING, SUCCESS, FAILURE };\n+\n+inline bool IsFutureFinished(FutureState state) { return state != FutureState::PENDING; }\n+\n+// ---------------------------------------------------------------------\n+// Type-erased helpers\n+\n+class FutureWaiter;\n+template <typename T>\n+class Future;\n+\n+class ARROW_EXPORT FutureImpl {\n \n Review comment:\n   This would allow replacement of `unique_ptr<FutureImpl>` with `FutureImpl`, simplifying the pointer web a bit\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:29.472+0000",
                    "updated": "2020-02-25T21:28:29.472+0000",
                    "started": "2020-02-25T21:28:29.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392965",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392966",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384092960\n \n \n\n ##########\n File path: cpp/src/arrow/util/parallel.h\n ##########\n @@ -35,61 +32,19 @@ namespace internal {\n template <class FUNCTION>\n Status ParallelFor(int num_tasks, FUNCTION&& func) {\n   auto pool = internal::GetCpuThreadPool();\n-  std::vector<std::future<Status>> futures(num_tasks);\n+  std::vector<Future<Status>> futures;\n+  futures.reserve(num_tasks);\n \n Review comment:\n   Why *isn't* Future default constructible? Future::Make doesn't take any arguments and can't fail; it just constructs a future which has yet to be marked (right?). Let that be the default constructor\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:29.583+0000",
                    "updated": "2020-02-25T21:28:29.583+0000",
                    "started": "2020-02-25T21:28:29.582+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392966",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392967",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384111950\n \n \n\n ##########\n File path: cpp/src/arrow/util/future.h\n ##########\n @@ -0,0 +1,318 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <atomic>\n+#include <cmath>\n+#include <memory>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+enum class FutureState : int8_t { PENDING, SUCCESS, FAILURE };\n+\n+inline bool IsFutureFinished(FutureState state) { return state != FutureState::PENDING; }\n+\n+// ---------------------------------------------------------------------\n+// Type-erased helpers\n+\n+class FutureWaiter;\n+template <typename T>\n+class Future;\n+\n+class ARROW_EXPORT FutureImpl {\n \n Review comment:\n   I don't understand the utility of the division into `FutureImpl` and `ConcreteFutureImpl`. Only `~FutureImpl()` is virtual and there is only one subclass anyway. If it's only to get around the CLI linter's aversion to the `<mutex>` then I think there are cleaner ways to work around it. For one `std::unique_lock` can be instantiated against anything which provides `lock()` and `unlock()` members, so we could have\r\n   \r\n   ```c++\r\n   /// wrapper around std::mutex for header compatibility with C++/CLI\r\n   class ARROW_EXPORT Mutex {\r\n     void lock();\r\n     void unlock();\r\n   };\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:29.586+0000",
                    "updated": "2020-02-25T21:28:29.586+0000",
                    "started": "2020-02-25T21:28:29.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392967",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392968",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384100939\n \n \n\n ##########\n File path: cpp/src/arrow/util/future_test.cc\n ##########\n @@ -0,0 +1,707 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/future_iterator.h\"\n+\n+#include <algorithm>\n+#include <chrono>\n+#include <memory>\n+#include <ostream>\n+#include <random>\n+#include <string>\n+#include <thread>\n+#include <vector>\n+\n+#include <gmock/gmock-matchers.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/thread_pool.h\"\n+\n+namespace arrow {\n+\n+using internal::ThreadPool;\n+\n+int ToInt(int x) { return x; }\n+\n+// A data type without a default constructor.\n+struct Foo {\n+  int bar;\n+  std::string baz;\n+\n+  explicit Foo(int value) : bar(value), baz(std::to_string(value)) {}\n+\n+  int ToInt() const { return bar; }\n+\n+  bool operator==(int other) const { return bar == other; }\n+  bool operator==(const Foo& other) const { return bar == other.bar; }\n+\n+  friend std::ostream& operator<<(std::ostream& os, const Foo& foo) {\n+    return os << \"Foo(\" << foo.bar << \")\";\n+  }\n+};\n+\n+template <>\n+struct IterationTraits<Foo> {\n+  static Foo End() { return Foo(-1); }\n+};\n+\n+// A data type with only move constructors.\n+struct MoveOnlyDataType {\n+  explicit MoveOnlyDataType(int x) : data(new int(x)) {}\n+\n+  MoveOnlyDataType(const MoveOnlyDataType& other) = delete;\n+  MoveOnlyDataType& operator=(const MoveOnlyDataType& other) = delete;\n+\n+  MoveOnlyDataType(MoveOnlyDataType&& other) { MoveFrom(other); }\n+  MoveOnlyDataType& operator=(MoveOnlyDataType&& other) {\n+    MoveFrom(other);\n+    return *this;\n+  }\n+\n+  ~MoveOnlyDataType() { Destroy(); }\n+\n+  void Destroy() {\n+    if (data != nullptr) {\n+      delete data;\n+      data = nullptr;\n+    }\n+  }\n+\n+  void MoveFrom(MoveOnlyDataType& other) {\n+    Destroy();\n+    data = other.data;\n+    other.data = nullptr;\n+  }\n+\n+  int ToInt() const { return data == nullptr ? -42 : *data; }\n+\n+  bool operator==(int other) const { return data != nullptr && *data == other; }\n+  bool operator==(const MoveOnlyDataType& other) const {\n+    return data != nullptr && other.data != nullptr && *data == *other.data;\n+  }\n+\n+  int* data = nullptr;\n+};\n+\n+template <>\n+struct IterationTraits<MoveOnlyDataType> {\n+  static MoveOnlyDataType End() { return MoveOnlyDataType(-1); }\n+};\n+\n+template <typename T>\n+void AssertNotFinished(const Future<T>& fut) {\n+  ASSERT_FALSE(IsFutureFinished(fut.state()));\n+}\n+\n+template <typename T>\n+void AssertFinished(const Future<T>& fut) {\n+  ASSERT_TRUE(IsFutureFinished(fut.state()));\n+}\n+\n+// Assert the future is successful *now*\n+template <typename T>\n+void AssertSuccessful(const Future<T>& fut) {\n+  ASSERT_EQ(fut.state(), FutureState::SUCCESS);\n+  ASSERT_OK(fut.status());\n+}\n+\n+// Assert the future is failed *now*\n+template <typename T>\n+void AssertFailed(const Future<T>& fut) {\n+  ASSERT_EQ(fut.state(), FutureState::FAILURE);\n+  ASSERT_FALSE(fut.status().ok());\n+}\n+\n+template <typename T>\n+std::vector<T> IteratorToVector(Iterator<T> iterator) {\n+  std::vector<T> out;\n+\n+  auto fn = [&out](T value) -> Status {\n+    out.emplace_back(std::move(value));\n+    return Status::OK();\n+  };\n+\n+  ARROW_EXPECT_OK(iterator.Visit(fn));\n+\n+  return out;\n+}\n+\n+template <typename T>\n+struct IteratorResults {\n+  std::vector<T> values;\n+  std::vector<Status> errors;\n+};\n+\n+template <typename T>\n+IteratorResults<T> IteratorToResults(Iterator<T> iterator) {\n+  IteratorResults<T> results;\n+\n+  while (true) {\n \n Review comment:\n   ```suggestion\r\n     for (auto res : iterator) {\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:29.587+0000",
                    "updated": "2020-02-25T21:28:29.587+0000",
                    "started": "2020-02-25T21:28:29.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392968",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384125704\n \n \n\n ##########\n File path: cpp/src/arrow/util/future.h\n ##########\n @@ -0,0 +1,318 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <atomic>\n+#include <cmath>\n+#include <memory>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+enum class FutureState : int8_t { PENDING, SUCCESS, FAILURE };\n+\n+inline bool IsFutureFinished(FutureState state) { return state != FutureState::PENDING; }\n+\n+// ---------------------------------------------------------------------\n+// Type-erased helpers\n+\n+class FutureWaiter;\n+template <typename T>\n+class Future;\n+\n+class ARROW_EXPORT FutureImpl {\n+ public:\n+  static constexpr double kInfinity = HUGE_VAL;\n+\n+  virtual ~FutureImpl();\n+\n+  FutureState state() { return state_.load(); }\n+\n+  static std::unique_ptr<FutureImpl> Make();\n+\n+ protected:\n+  FutureImpl();\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(FutureImpl);\n+\n+  // Future API\n+  void MarkFinished();\n+  void MarkFailed();\n+  void Wait();\n+  bool Wait(double seconds);\n+\n+  // Waiter API\n+  inline FutureState AddWaiter(FutureWaiter* w, int future_num);\n+  inline void RemoveWaiter(FutureWaiter* w);\n+\n+  std::atomic<FutureState> state_;\n+\n+  template <typename T>\n+  friend class Future;\n+  template <typename T>\n+  friend class FutureStorage;\n+  friend class FutureWaiter;\n+  friend class FutureWaiterImpl;\n+};\n+\n+// An object that waits on multiple futures at once.  Only one waiter\n+// can be registered for each future at any time.\n+class ARROW_EXPORT FutureWaiter {\n+ public:\n+  enum Kind : int8_t { ANY, ALL, ALL_OR_FIRST_FAILED, ITERATE };\n+\n+  static constexpr double kInfinity = FutureImpl::kInfinity;\n+\n+  static std::unique_ptr<FutureWaiter> Make(Kind kind, std::vector<FutureImpl*> futures);\n+\n+  template <typename FutureType>\n+  static std::unique_ptr<FutureWaiter> Make(Kind kind,\n+                                            const std::vector<FutureType>& futures) {\n+    return Make(kind, ExtractFutures(futures));\n+  }\n+\n+  virtual ~FutureWaiter();\n+\n+  bool Wait(double seconds = kInfinity);\n+  int WaitAndFetchOne();\n+\n+  std::vector<int> MoveFinishedFutures();\n+\n+ protected:\n+  // Extract FutureImpls from Futures\n+  template <typename FutureType,\n+            typename Enable = std::enable_if<!std::is_pointer<FutureType>::value>>\n+  static std::vector<FutureImpl*> ExtractFutures(const std::vector<FutureType>& futures) {\n+    std::vector<FutureImpl*> base_futures(futures.size());\n+    for (int i = 0; i < static_cast<int>(futures.size()); ++i) {\n+      base_futures[i] = futures[i].impl_;\n+    }\n+    return base_futures;\n+  }\n+\n+  // Extract FutureImpls from Future pointers\n+  template <typename FutureType>\n+  static std::vector<FutureImpl*> ExtractFutures(\n+      const std::vector<FutureType*>& futures) {\n+    std::vector<FutureImpl*> base_futures(futures.size());\n+    for (int i = 0; i < static_cast<int>(futures.size()); ++i) {\n+      base_futures[i] = futures[i]->impl_;\n+    }\n+    return base_futures;\n+  }\n+\n+  FutureWaiter();\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(FutureWaiter);\n+\n+  inline void MarkFutureFinishedUnlocked(int future_num, FutureState state);\n+\n+  friend class FutureImpl;\n+  friend class ConcreteFutureImpl;\n+};\n+\n+// ---------------------------------------------------------------------\n+// An intermediate class for storing Future results\n+\n+class FutureStorageBase {\n+ public:\n+  FutureStorageBase() : impl_(FutureImpl::Make()) {}\n+\n+ protected:\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(FutureStorageBase);\n+  std::unique_ptr<FutureImpl> impl_;\n+\n+  template <typename T>\n+  friend class Future;\n+};\n+\n+template <typename T>\n+class FutureStorage : public FutureStorageBase {\n+ public:\n+  Status status() const { return result_.status(); }\n+\n+  template <typename U>\n+  void MarkFinished(U&& value) {\n+    result_ = std::forward<U>(value);\n+    if (ARROW_PREDICT_TRUE(result_.ok())) {\n+      impl_->MarkFinished();\n+    } else {\n+      impl_->MarkFailed();\n+    }\n+  }\n+\n+  template <typename Func>\n+  void ExecuteAndMarkFinished(Func&& func) {\n+    MarkFinished(func());\n+  }\n+\n+ protected:\n+  Result<T> result_;\n+  friend class Future<T>;\n+};\n+\n+// A Future<void> just stores a Status (always ok for now, but that could change\n+// if we implement cancellation).\n+template <>\n+class FutureStorage<void> : public FutureStorageBase {\n+ public:\n+  Status status() const { return status_; }\n+\n+  void MarkFinished(Status st = Status::OK()) {\n+    status_ = std::move(st);\n+    impl_->MarkFinished();\n+  }\n+\n+  template <typename Func>\n+  void ExecuteAndMarkFinished(Func&& func) {\n+    func();\n+    MarkFinished();\n+  }\n+\n+ protected:\n+  Status status_;\n+};\n+\n+// A Future<Status> just stores a Status.\n+template <>\n+class FutureStorage<Status> : public FutureStorageBase {\n+ public:\n+  Status status() const { return status_; }\n+\n+  void MarkFinished(Status st) {\n+    status_ = std::move(st);\n+    if (ARROW_PREDICT_TRUE(status_.ok())) {\n+      impl_->MarkFinished();\n+    } else {\n+      impl_->MarkFailed();\n+    }\n+  }\n+\n+  template <typename Func>\n+  void ExecuteAndMarkFinished(Func&& func) {\n+    MarkFinished(func());\n+  }\n+\n+ protected:\n+  Status status_;\n+};\n+\n+// ---------------------------------------------------------------------\n+// Public API\n+\n+template <typename T>\n+class Future {\n+ public:\n+  static constexpr double kInfinity = FutureImpl::kInfinity;\n+\n+  // Consumer API\n+\n+  FutureState state() const { return impl_->state(); }\n+\n+  const Result<T>& result() const& {\n+    Wait();\n+    return storage_->result_;\n+  }\n+\n+  Result<T> result() && {\n+    Wait();\n+    return std::move(storage_->result_);\n+  }\n+\n+  Status status() const {\n+    Wait();\n+    return storage_->status();\n+  }\n+\n+  void Wait() const {\n+    if (!IsFutureFinished(impl_->state())) {\n+      impl_->Wait();\n+    }\n+  }\n+\n+  bool Wait(double seconds) const {\n+    if (IsFutureFinished(impl_->state())) {\n+      return true;\n+    }\n+    return impl_->Wait(seconds);\n+  }\n+\n+  // Producer API\n+\n+  template <typename Func>\n+  void ExecuteAndMarkFinished(Func&& func) {\n+    storage_->ExecuteAndMarkFinished(std::forward<Func>(func));\n \n Review comment:\n   This doesn't need to be a member of storage_\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:29.669+0000",
                    "updated": "2020-02-25T21:28:29.669+0000",
                    "started": "2020-02-25T21:28:29.668+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392969",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/392970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384126207\n \n \n\n ##########\n File path: cpp/src/arrow/util/future.h\n ##########\n @@ -0,0 +1,318 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <atomic>\n+#include <cmath>\n+#include <memory>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+enum class FutureState : int8_t { PENDING, SUCCESS, FAILURE };\n+\n+inline bool IsFutureFinished(FutureState state) { return state != FutureState::PENDING; }\n+\n+// ---------------------------------------------------------------------\n+// Type-erased helpers\n+\n+class FutureWaiter;\n+template <typename T>\n+class Future;\n+\n+class ARROW_EXPORT FutureImpl {\n+ public:\n+  static constexpr double kInfinity = HUGE_VAL;\n+\n+  virtual ~FutureImpl();\n+\n+  FutureState state() { return state_.load(); }\n+\n+  static std::unique_ptr<FutureImpl> Make();\n+\n+ protected:\n+  FutureImpl();\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(FutureImpl);\n+\n+  // Future API\n+  void MarkFinished();\n+  void MarkFailed();\n+  void Wait();\n+  bool Wait(double seconds);\n+\n+  // Waiter API\n+  inline FutureState AddWaiter(FutureWaiter* w, int future_num);\n \n Review comment:\n   Since each future may only have one waiter, maybe this should be named `SetWaiter`? Or `AddToWaiter`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T21:28:29.672+0000",
                    "updated": "2020-02-25T21:28:29.672+0000",
                    "started": "2020-02-25T21:28:29.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392970",
                    "issueId": "13286312"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/worklog/393376",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6467: ARROW-7890: [C++] Add Future implementation\nURL: https://github.com/apache/arrow/pull/6467#discussion_r384424096\n \n \n\n ##########\n File path: cpp/src/arrow/util/future.cc\n ##########\n @@ -0,0 +1,300 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/future.h\"\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <condition_variable>\n+#include <mutex>\n+#include <numeric>\n+\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+// Shared mutex for all FutureWaiter instances.\n+// This simplifies lock management compared to a per-waiter mutex.\n+// The locking order is: global waiter mutex, then per-future mutex.\n+//\n+// It is unlikely that many waiter instances are alive at once, so this\n+// should ideally not limit scalability.\n+static std::mutex global_waiter_mutex;\n \n Review comment:\n   No, it's more delicate. With a per-waiter mutex, `FutureImpl::DoMarkFinishedOrFailed` has to check whether it has a waiter before locking the waiter. But before checking whether it has a waiter, it must take its own lock. And then it's violating the \"waiter then future\" locking order.\r\n   \r\n   The alternative is to switch the locking order to \"future then waiter\". It shifts the implementation complexity to the `Waiter` constructor. Currently, the waiter locks itself and then locks every future individually. It would have to first lock all its futures at once, then lock itself. This creates a much larger critical section. Also, theoretically we might also need to lock those futures in deterministic order (I don't think it would matter right now, because a future can only have a single waiter, but I'm not entirely sure).\r\n   \r\n   So the simplest solution, in terms of implementation complexity, really seems to be the global waiter lock. Perhaps at some point we'll notice it creates too much contention, in which case we'll have to switch to a more involved implementation strategy (or to a third-party library that has this all solved efficiently :-)).\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-26T11:06:57.857+0000",
                    "updated": "2020-02-26T11:06:57.857+0000",
                    "started": "2020-02-26T11:06:57.857+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393376",
                    "issueId": "13286312"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
            "id": "5",
            "description": "General wishlist item.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Wish",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 19200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3c91656a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15f87984[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6338d495[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@35daa52f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39ce4db6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@478fc4f2[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@62363cea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2250e5e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49cd5051[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@70dca5ce[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@235e0653[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@923bb98[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Mar 03 14:55:52 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-03-03T14:55:52.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7890/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-02-19T19:34:28.000+0000",
        "updated": "2020-03-03T14:55:54.000+0000",
        "timeoriginalestimate": null,
        "description": "{{std::future}} is unfortunately not featureful enough: there is no way to wait on several futures at once.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add Promise / Future implementation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286312/comment/17050284",
                    "id": "17050284",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 6467\n[https://github.com/apache/arrow/pull/6467]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-03-03T14:55:52.529+0000",
                    "updated": "2020-03-03T14:55:52.529+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0bo3s:",
        "customfield_12314139": null
    }
}