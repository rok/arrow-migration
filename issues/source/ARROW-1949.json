{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13127267",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13127267",
    "key": "ARROW-1949",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12542249",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12542249",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13170457",
                    "key": "ARROW-2799",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170457",
                    "fields": {
                        "summary": "[Python] Add safe option to Table.from_pandas to avoid unsafe casts",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1949/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 6,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13127267/worklog/139354",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs opened a new pull request #2497: WIP: ARROW-1949: [Python/C++] Add option to Array.from_pandas and pyarrow.array to perform unsafe casts\nURL: https://github.com/apache/arrow/pull/2497\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-29T17:53:44.909+0000",
                    "updated": "2018-08-29T17:53:44.909+0000",
                    "started": "2018-08-29T17:53:44.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "139354",
                    "issueId": "13127267"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13127267/worklog/140361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2497: WIP: ARROW-1949: [Python/C++] Add option to Array.from_pandas and pyarrow.array to perform unsafe casts\nURL: https://github.com/apache/arrow/pull/2497#discussion_r214524802\n \n \n\n ##########\n File path: python/pyarrow/array.pxi\n ##########\n @@ -17,8 +17,8 @@\n \n \n cdef _sequence_to_array(object sequence, object mask, object size,\n-                        DataType type,\n-                        CMemoryPool* pool, c_bool from_pandas):\n+                        DataType type, CMemoryPool* pool, c_bool from_pandas,\n+                        c_bool safe):\n \n Review comment:\n   TODO: Implementation is missing from here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-01T23:04:48.753+0000",
                    "updated": "2018-09-01T23:04:48.753+0000",
                    "started": "2018-09-01T23:04:48.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "140361",
                    "issueId": "13127267"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13127267/worklog/140367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2497: WIP: ARROW-1949: [Python/C++] Add option to Array.from_pandas and pyarrow.array to perform unsafe casts\nURL: https://github.com/apache/arrow/pull/2497#discussion_r214525810\n \n \n\n ##########\n File path: python/pyarrow/array.pxi\n ##########\n @@ -17,8 +17,8 @@\n \n \n cdef _sequence_to_array(object sequence, object mask, object size,\n-                        DataType type,\n-                        CMemoryPool* pool, c_bool from_pandas):\n+                        DataType type, CMemoryPool* pool, c_bool from_pandas,\n+                        c_bool safe):\n \n Review comment:\n   ConvertPySequence [assumes](https://github.com/apache/arrow/blob/master/cpp/src/arrow/python/python_to_arrow.cc#L926) strict conversion if datatype is explicitly passed.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-02T00:37:03.580+0000",
                    "updated": "2018-09-02T00:37:03.580+0000",
                    "started": "2018-09-02T00:37:03.579+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "140367",
                    "issueId": "13127267"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13127267/worklog/140380",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2497: ARROW-1949: [Python/C++] Add option to Array.from_pandas and pyarrow.array to perform unsafe casts\nURL: https://github.com/apache/arrow/pull/2497#issuecomment-417912510\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2497?src=pr&el=h1) Report\n   > Merging [#2497](https://codecov.io/gh/apache/arrow/pull/2497?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/c282a14932c5a8edc0582798a68e460ce0a88827?src=pr&el=desc) will **increase** coverage by `1.27%`.\n   > The diff coverage is `64.1%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2497/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2497?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2497      +/-   ##\n   ==========================================\n   + Coverage   86.17%   87.44%   +1.27%     \n   ==========================================\n     Files         308      246      -62     \n     Lines       47102    43433    -3669     \n   ==========================================\n   - Hits        40589    37980    -2609     \n   + Misses       6439     5453     -986     \n   + Partials       74        0      -74\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2497?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/tests/test\\_array.py](https://codecov.io/gh/apache/arrow/pull/2497/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9hcnJheS5weQ==) | `98.96% <100%> (+0.02%)` | :arrow_up: |\n   | [python/pyarrow/array.pxi](https://codecov.io/gh/apache/arrow/pull/2497/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvYXJyYXkucHhp) | `68.93% <43.75%> (+0.36%)` | :arrow_up: |\n   | [cpp/src/arrow/python/numpy\\_to\\_arrow.cc](https://codecov.io/gh/apache/arrow/pull/2497/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vbnVtcHlfdG9fYXJyb3cuY2M=) | `93.53% <50%> (-0.58%)` | :arrow_down: |\n   | [rust/src/record\\_batch.rs](https://codecov.io/gh/apache/arrow/pull/2497/diff?src=pr&el=tree#diff-cnVzdC9zcmMvcmVjb3JkX2JhdGNoLnJz) | | |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2497/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | | |\n   | [rust/src/array.rs](https://codecov.io/gh/apache/arrow/pull/2497/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYXJyYXkucnM=) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2497/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/internal/testing/tools/bool.go](https://codecov.io/gh/apache/arrow/pull/2497/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvdGVzdGluZy90b29scy9ib29sLmdv) | | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/2497/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2497/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | ... and [56 more](https://codecov.io/gh/apache/arrow/pull/2497/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2497?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2497?src=pr&el=footer). Last update [c282a14...f352c47](https://codecov.io/gh/apache/arrow/pull/2497?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-02T08:03:47.951+0000",
                    "updated": "2018-09-02T08:03:47.951+0000",
                    "started": "2018-09-02T08:03:47.950+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "140380",
                    "issueId": "13127267"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13127267/worklog/140758",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #2497: ARROW-1949: [Python/C++] Add option to Array.from_pandas and pyarrow.array to perform unsafe casts\nURL: https://github.com/apache/arrow/pull/2497\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex 502afc7376..ece00c286e 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -173,13 +173,15 @@ int64_t MaskToBitmap(PyArrayObject* mask, int64_t length, uint8_t* bitmap) {\n class NumPyConverter {\n  public:\n   NumPyConverter(MemoryPool* pool, PyObject* arr, PyObject* mo,\n-                 const std::shared_ptr<DataType>& type, bool from_pandas)\n+                 const std::shared_ptr<DataType>& type, bool from_pandas,\n+                 const compute::CastOptions& cast_options = compute::CastOptions())\n       : pool_(pool),\n         type_(type),\n         arr_(reinterpret_cast<PyArrayObject*>(arr)),\n         dtype_(PyArray_DESCR(arr_)),\n         mask_(nullptr),\n         from_pandas_(from_pandas),\n+        cast_options_(cast_options),\n         null_bitmap_data_(nullptr),\n         null_count_(0) {\n     if (mo != nullptr && mo != Py_None) {\n@@ -289,6 +291,7 @@ class NumPyConverter {\n   int itemsize_;\n \n   bool from_pandas_;\n+  compute::CastOptions cast_options_;\n \n   // Used in visitor pattern\n   ArrayVector out_arrays_;\n@@ -319,7 +322,8 @@ namespace {\n Status CastBuffer(const std::shared_ptr<DataType>& in_type,\n                   const std::shared_ptr<Buffer>& input, const int64_t length,\n                   const std::shared_ptr<Buffer>& valid_bitmap, const int64_t null_count,\n-                  const std::shared_ptr<DataType>& out_type, MemoryPool* pool,\n+                  const std::shared_ptr<DataType>& out_type,\n+                  const compute::CastOptions& cast_options, MemoryPool* pool,\n                   std::shared_ptr<Buffer>* out) {\n   // Must cast\n   auto tmp_data = ArrayData::Make(in_type, length, {valid_bitmap, input}, null_count);\n@@ -328,9 +332,6 @@ Status CastBuffer(const std::shared_ptr<DataType>& in_type,\n   std::shared_ptr<Array> casted_array;\n \n   compute::FunctionContext context(pool);\n-  compute::CastOptions cast_options;\n-  cast_options.allow_int_overflow = false;\n-  cast_options.allow_time_truncate = false;\n \n   RETURN_NOT_OK(\n       compute::Cast(&context, *tmp_array, out_type, cast_options, &casted_array));\n@@ -412,7 +413,8 @@ inline Status NumPyConverter::ConvertData(std::shared_ptr<Buffer>* data) {\n   RETURN_NOT_OK(NumPyDtypeToArrow(reinterpret_cast<PyObject*>(dtype_), &input_type));\n \n   if (!input_type->Equals(*type_)) {\n-    RETURN_NOT_OK(CastBuffer(input_type, *data, length_, nullptr, 0, type_, pool_, data));\n+    RETURN_NOT_OK(CastBuffer(input_type, *data, length_, nullptr, 0, type_, cast_options_,\n+                             pool_, data));\n   }\n \n   return Status::OK();\n@@ -465,14 +467,14 @@ inline Status NumPyConverter::ConvertData<Date32Type>(std::shared_ptr<Buffer>* d\n       if (!input_type->Equals(*type_)) {\n         // The null bitmap was already computed in VisitNative()\n         RETURN_NOT_OK(CastBuffer(input_type, *data, length_, null_bitmap_, null_count_,\n-                                 type_, pool_, data));\n+                                 type_, cast_options_, pool_, data));\n       }\n     }\n   } else {\n     RETURN_NOT_OK(NumPyDtypeToArrow(reinterpret_cast<PyObject*>(dtype_), &input_type));\n     if (!input_type->Equals(*type_)) {\n-      RETURN_NOT_OK(\n-          CastBuffer(input_type, *data, length_, nullptr, 0, type_, pool_, data));\n+      RETURN_NOT_OK(CastBuffer(input_type, *data, length_, nullptr, 0, type_,\n+                               cast_options_, pool_, data));\n     }\n   }\n \n@@ -512,14 +514,14 @@ inline Status NumPyConverter::ConvertData<Date64Type>(std::shared_ptr<Buffer>* d\n       if (!input_type->Equals(*type_)) {\n         // The null bitmap was already computed in VisitNative()\n         RETURN_NOT_OK(CastBuffer(input_type, *data, length_, null_bitmap_, null_count_,\n-                                 type_, pool_, data));\n+                                 type_, cast_options_, pool_, data));\n       }\n     }\n   } else {\n     RETURN_NOT_OK(NumPyDtypeToArrow(reinterpret_cast<PyObject*>(dtype_), &input_type));\n     if (!input_type->Equals(*type_)) {\n-      RETURN_NOT_OK(\n-          CastBuffer(input_type, *data, length_, nullptr, 0, type_, pool_, data));\n+      RETURN_NOT_OK(CastBuffer(input_type, *data, length_, nullptr, 0, type_,\n+                               cast_options_, pool_, data));\n     }\n   }\n \n@@ -770,6 +772,7 @@ Status NumPyConverter::Visit(const StructType& type) {\n \n Status NdarrayToArrow(MemoryPool* pool, PyObject* ao, PyObject* mo, bool from_pandas,\n                       const std::shared_ptr<DataType>& type,\n+                      const compute::CastOptions& cast_options,\n                       std::shared_ptr<ChunkedArray>* out) {\n   if (!PyArray_Check(ao)) {\n     return Status::Invalid(\"Input object was not a NumPy array\");\n@@ -784,7 +787,7 @@ Status NdarrayToArrow(MemoryPool* pool, PyObject* ao, PyObject* mo, bool from_pa\n     return ConvertPySequence(ao, mo, py_options, out);\n   }\n \n-  NumPyConverter converter(pool, ao, mo, type, from_pandas);\n+  NumPyConverter converter(pool, ao, mo, type, from_pandas, cast_options);\n   RETURN_NOT_OK(converter.Convert());\n   const auto& output_arrays = converter.result();\n   DCHECK_GT(output_arrays.size(), 0);\n@@ -792,5 +795,11 @@ Status NdarrayToArrow(MemoryPool* pool, PyObject* ao, PyObject* mo, bool from_pa\n   return Status::OK();\n }\n \n+Status NdarrayToArrow(MemoryPool* pool, PyObject* ao, PyObject* mo, bool from_pandas,\n+                      const std::shared_ptr<DataType>& type,\n+                      std::shared_ptr<ChunkedArray>* out) {\n+  return NdarrayToArrow(pool, ao, mo, from_pandas, type, compute::CastOptions(), out);\n+}\n+\n }  // namespace py\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.h b/cpp/src/arrow/python/numpy_to_arrow.h\nindex bbdd5764fd..5e1c088264 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.h\n+++ b/cpp/src/arrow/python/numpy_to_arrow.h\n@@ -24,6 +24,7 @@\n \n #include <memory>\n \n+#include \"arrow/compute/kernels/cast.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n@@ -45,6 +46,23 @@ namespace py {\n /// \\param[in] from_pandas If true, use pandas's null sentinels to determine\n /// whether values are null\n /// \\param[in] type a specific type to cast to, may be null\n+/// \\param[in] cast_options casting options\n+/// \\param[out] out a ChunkedArray, to accommodate chunked output\n+ARROW_EXPORT\n+Status NdarrayToArrow(MemoryPool* pool, PyObject* ao, PyObject* mo, bool from_pandas,\n+                      const std::shared_ptr<DataType>& type,\n+                      const compute::CastOptions& cast_options,\n+                      std::shared_ptr<ChunkedArray>* out);\n+\n+/// Safely convert NumPy arrays to Arrow. If target data type is not known,\n+/// pass a type with null.\n+///\n+/// \\param[in] pool Memory pool for any memory allocations\n+/// \\param[in] ao an ndarray with the array data\n+/// \\param[in] mo an ndarray with a null mask (True is null), optional\n+/// \\param[in] from_pandas If true, use pandas's null sentinels to determine\n+/// whether values are null\n+/// \\param[in] type a specific type to cast to, may be null\n /// \\param[out] out a ChunkedArray, to accommodate chunked output\n ARROW_EXPORT\n Status NdarrayToArrow(MemoryPool* pool, PyObject* ao, PyObject* mo, bool from_pandas,\ndiff --git a/python/pyarrow/array.pxi b/python/pyarrow/array.pxi\nindex 76a639abfc..f9a16a334c 100644\n--- a/python/pyarrow/array.pxi\n+++ b/python/pyarrow/array.pxi\n@@ -17,8 +17,7 @@\n \n \n cdef _sequence_to_array(object sequence, object mask, object size,\n-                        DataType type,\n-                        CMemoryPool* pool, c_bool from_pandas):\n+                        DataType type, CMemoryPool* pool, c_bool from_pandas):\n     cdef int64_t c_size\n     cdef PyConversionOptions options\n \n@@ -50,10 +49,14 @@ cdef _is_array_like(obj):\n \n \n cdef _ndarray_to_array(object values, object mask, DataType type,\n-                       c_bool from_pandas,\n-                       CMemoryPool* pool):\n-    cdef shared_ptr[CChunkedArray] chunked_out\n-    cdef shared_ptr[CDataType] c_type\n+                       c_bool from_pandas, c_bool safe, CMemoryPool* pool):\n+    cdef:\n+        shared_ptr[CChunkedArray] chunked_out\n+        shared_ptr[CDataType] c_type\n+        CCastOptions cast_options\n+\n+    cast_options.allow_int_overflow = not safe\n+    cast_options.allow_time_truncate = not safe\n \n     dtype = values.dtype\n \n@@ -66,7 +69,7 @@ cdef _ndarray_to_array(object values, object mask, DataType type,\n \n     with nogil:\n         check_status(NdarrayToArrow(pool, values, mask, from_pandas,\n-                                    c_type, &chunked_out))\n+                                    c_type, cast_options, &chunked_out))\n \n     if chunked_out.get().num_chunks() > 1:\n         return pyarrow_wrap_chunked_array(chunked_out)\n@@ -83,9 +86,8 @@ cdef inline DataType _ensure_type(object type):\n         return type\n \n \n-def array(object obj, type=None, mask=None,\n-          MemoryPool memory_pool=None, size=None,\n-          from_pandas=False):\n+def array(object obj, type=None, mask=None, size=None, bint from_pandas=False,\n+          bint safe=True, MemoryPool memory_pool=None):\n     \"\"\"\n     Create pyarrow.Array instance from a Python object\n \n@@ -94,14 +96,11 @@ def array(object obj, type=None, mask=None,\n     obj : sequence, iterable, ndarray or Series\n         If both type and size are specified may be a single use iterable. If\n         not strongly-typed, Arrow type will be inferred for resulting array\n-    mask : array (boolean), optional\n-        Indicate which values are null (True) or not null (False).\n     type : pyarrow.DataType\n         Explicit type to attempt to coerce to, otherwise will be inferred from\n         the data\n-    memory_pool : pyarrow.MemoryPool, optional\n-        If not passed, will allocate memory from the currently-set default\n-        memory pool\n+    mask : array (boolean), optional\n+        Indicate which values are null (True) or not null (False).\n     size : int64, optional\n         Size of the elements. If the imput is larger than size bail at this\n         length. For iterators, if size is larger than the input iterator this\n@@ -113,6 +112,11 @@ def array(object obj, type=None, mask=None,\n         data. If passed, the mask tasks precendence, but if a value is unmasked\n         (not-null), but still null according to pandas semantics, then it is\n         null\n+    safe : boolean, default True\n+        Check for overflows or other unsafe conversions\n+    memory_pool : pyarrow.MemoryPool, optional\n+        If not passed, will allocate memory from the currently-set default\n+        memory pool\n \n     Notes\n     -----\n@@ -158,13 +162,15 @@ def array(object obj, type=None, mask=None,\n             return DictionaryArray.from_arrays(\n                 values.codes, values.categories.values,\n                 mask=mask, ordered=values.ordered,\n-                from_pandas=from_pandas,\n+                from_pandas=from_pandas, safe=safe,\n                 memory_pool=memory_pool)\n         else:\n             values, type = pdcompat.get_datetimetz_type(values, obj.dtype,\n                                                         type)\n-            return _ndarray_to_array(values, mask, type, from_pandas, pool)\n+            return _ndarray_to_array(values, mask, type, from_pandas, safe,\n+                                     pool)\n     else:\n+        # ConvertPySequence does strict conversion if type is explicitly passed\n         return _sequence_to_array(obj, mask, size, type, pool, from_pandas)\n \n \n@@ -352,7 +358,7 @@ cdef class Array:\n         with nogil:\n             check_status(DebugPrint(deref(self.ap), 0))\n \n-    def cast(self, object target_type, safe=True):\n+    def cast(self, object target_type, bint safe=True):\n         \"\"\"\n         Cast array values to another data type.\n \n@@ -439,7 +445,8 @@ cdef class Array:\n         return wrap_datum(out)\n \n     @staticmethod\n-    def from_pandas(obj, mask=None, type=None, MemoryPool memory_pool=None):\n+    def from_pandas(obj, mask=None, type=None, bint safe=True,\n+                    MemoryPool memory_pool=None):\n         \"\"\"\n         Convert pandas.Series to an Arrow Array, using pandas's semantics about\n         what values indicate nulls. See pyarrow.array for more general\n@@ -453,6 +460,8 @@ cdef class Array:\n         type : pyarrow.DataType\n             Explicit type to attempt to coerce to, otherwise will be inferred\n             from the data\n+        safe : boolean, default True\n+            Check for overflows or other unsafe conversions\n         memory_pool : pyarrow.MemoryPool, optional\n             If not passed, will allocate memory from the currently-set default\n             memory pool\n@@ -468,8 +477,8 @@ cdef class Array:\n         array : pyarrow.Array or pyarrow.ChunkedArray (if object data\n         overflows binary buffer)\n         \"\"\"\n-        return array(obj, mask=mask, type=type, memory_pool=memory_pool,\n-                     from_pandas=True)\n+        return array(obj, mask=mask, type=type, safe=safe, from_pandas=True,\n+                     memory_pool=memory_pool)\n \n     def __reduce__(self):\n         return _restore_array, \\\n@@ -597,9 +606,8 @@ cdef class Array:\n \n         return pyarrow_wrap_array(result)\n \n-    def to_pandas(self, c_bool strings_to_categorical=False,\n-                  c_bool zero_copy_only=False,\n-                  c_bool integer_object_nulls=False):\n+    def to_pandas(self, bint strings_to_categorical=False,\n+                  bint zero_copy_only=False, bint integer_object_nulls=False):\n         \"\"\"\n         Convert to a NumPy array object suitable for use in pandas.\n \n@@ -1051,8 +1059,8 @@ cdef class DictionaryArray(Array):\n         return self._indices\n \n     @staticmethod\n-    def from_arrays(indices, dictionary, mask=None, ordered=False,\n-                    from_pandas=False, safe=True,\n+    def from_arrays(indices, dictionary, mask=None, bint ordered=False,\n+                    bint from_pandas=False, bint safe=True,\n                     MemoryPool memory_pool=None):\n         \"\"\"\n         Construct Arrow DictionaryArray from array of indices (must be\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 7fe354dd89..8bbbfcfd66 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -968,6 +968,12 @@ cdef extern from \"arrow/python/api.h\" namespace \"arrow::py\" nogil:\n                            const shared_ptr[CDataType]& type,\n                            shared_ptr[CChunkedArray]* out)\n \n+    CStatus NdarrayToArrow(CMemoryPool* pool, object ao, object mo,\n+                           c_bool from_pandas,\n+                           const shared_ptr[CDataType]& type,\n+                           const CCastOptions& cast_options,\n+                           shared_ptr[CChunkedArray]* out)\n+\n     CStatus NdarrayToTensor(CMemoryPool* pool, object ao,\n                             shared_ptr[CTensor]* out)\n \ndiff --git a/python/pyarrow/tests/test_array.py b/python/pyarrow/tests/test_array.py\nindex 4bebe3139a..d4b582e06c 100644\n--- a/python/pyarrow/tests/test_array.py\n+++ b/python/pyarrow/tests/test_array.py\n@@ -479,13 +479,18 @@ def test_string_from_buffers():\n \n def _check_cast_case(case, safe=True):\n     in_data, in_type, out_data, out_type = case\n+    expected = pa.array(out_data, type=out_type)\n \n+    # check casting an already created array\n     in_arr = pa.array(in_data, type=in_type)\n-\n     casted = in_arr.cast(out_type, safe=safe)\n-    expected = pa.array(out_data, type=out_type)\n     assert casted.equals(expected)\n \n+    # constructing an array with out type which optionally involves casting\n+    # for more see ARROW-1949\n+    in_arr = pa.array(in_data, type=out_type, safe=safe)\n+    assert in_arr.equals(expected)\n+\n \n def test_cast_integers_safe():\n     safe_cases = [\n@@ -573,6 +578,22 @@ def test_cast_timestamp_unit():\n     result = arr.cast(target, safe=False)\n     assert result.equals(expected)\n \n+    # ARROW-1949\n+    series = pd.Series([pd.Timestamp(1), pd.Timestamp(10), pd.Timestamp(1000)])\n+    expected = pa.array([0, 0, 1], type=pa.timestamp('us'))\n+\n+    with pytest.raises(ValueError):\n+        pa.array(series, type=pa.timestamp('us'))\n+\n+    with pytest.raises(ValueError):\n+        pa.Array.from_pandas(series, type=pa.timestamp('us'))\n+\n+    result = pa.Array.from_pandas(series, type=pa.timestamp('us'), safe=False)\n+    assert result.equals(expected)\n+\n+    result = pa.array(series, type=pa.timestamp('us'), safe=False)\n+    assert result.equals(expected)\n+\n \n def test_cast_signed_to_unsigned():\n     safe_cases = [\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-04T06:36:49.982+0000",
                    "updated": "2018-09-04T06:36:49.982+0000",
                    "started": "2018-09-04T06:36:49.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "140758",
                    "issueId": "13127267"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13127267/worklog/140789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #2497: ARROW-1949: [Python/C++] Add option to Array.from_pandas and pyarrow.array to perform unsafe casts\nURL: https://github.com/apache/arrow/pull/2497#issuecomment-418273220\n \n \n   Thanks Uwe!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-04T07:47:06.105+0000",
                    "updated": "2018-09-04T07:47:06.105+0000",
                    "started": "2018-09-04T07:47:06.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "140789",
                    "issueId": "13127267"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7bca9fb4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b998439[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@324b83bb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@65246187[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67320e03[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@66245db7[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@89c5c93[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4ef23c5e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39c77195[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7d4a4aff[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1758e901[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@48172778[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 04 06:36:43 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-04T06:36:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1949/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2017-12-26T22:24:54.000+0000",
        "updated": "2018-09-04T07:47:06.000+0000",
        "timeoriginalestimate": null,
        "description": "Per mailing list thread",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python/C++] Add option to Array.from_pandas and pyarrow.array to perform unsafe casts",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13127267/comment/16602657",
                    "id": "16602657",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 2497\n[https://github.com/apache/arrow/pull/2497]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-09-04T06:36:43.229+0000",
                    "updated": "2018-09-04T06:36:43.229+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3oas7:",
        "customfield_12314139": null
    }
}