{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13442593",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593",
    "key": "ARROW-16424",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "substrait"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12639686",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12639686",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13442220",
                    "key": "ARROW-16392",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442220",
                    "fields": {
                        "summary": "[C++] Substrait consumer cannot handle file URIs that contain a Windows drive letter",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12649450",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12649450",
                "type": {
                    "id": "12310560",
                    "name": "Problem/Incident",
                    "inward": "is caused by",
                    "outward": "causes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310560"
                },
                "outwardIssue": {
                    "id": "13486182",
                    "key": "ARROW-18041",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13486182",
                    "fields": {
                        "summary": "[Python] Sustrait-related test failure in wheel tests",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/1",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/blocker.svg",
                            "name": "Blocker",
                            "id": "1"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=octalene",
            "name": "octalene",
            "key": "octalene",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=octalene&avatarId=51083",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=octalene&avatarId=51083",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=octalene&avatarId=51083",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=octalene&avatarId=51083"
            },
            "displayName": "Aldrin Montana",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ArianaVillegas",
            "name": "ArianaVillegas",
            "key": "JIRAUSER280694",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER280694&avatarId=50269",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER280694&avatarId=50269",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER280694&avatarId=50269",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER280694&avatarId=50269"
            },
            "displayName": "Ariana Villegas",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ArianaVillegas",
            "name": "ArianaVillegas",
            "key": "JIRAUSER280694",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER280694&avatarId=50269",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER280694&avatarId=50269",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER280694&avatarId=50269",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER280694&avatarId=50269"
            },
            "displayName": "Ariana Villegas",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 37800,
            "total": 37800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 37800,
            "total": 37800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16424/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 63,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/782146",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sanjibansg opened a new pull request, #13390:\nURL: https://github.com/apache/arrow/pull/13390\n\n   This PR updates the parsing of paths using the `UriParser` in `relation_internal.cc`, where a method is also introduced for extracting the extension component from a file path.\n\n\n",
                    "created": "2022-06-16T19:14:07.719+0000",
                    "updated": "2022-06-16T19:14:07.719+0000",
                    "started": "2022-06-16T19:14:07.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782146",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/782147",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13390:\nURL: https://github.com/apache/arrow/pull/13390#issuecomment-1158040378\n\n   https://issues.apache.org/jira/browse/ARROW-16424\n\n\n",
                    "created": "2022-06-16T19:14:28.161+0000",
                    "updated": "2022-06-16T19:14:28.161+0000",
                    "started": "2022-06-16T19:14:28.161+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782147",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/782376",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13390:\nURL: https://github.com/apache/arrow/pull/13390#discussion_r900050308\n\n\n##########\ncpp/src/arrow/util/uri.h:\n##########\n@@ -68,6 +68,8 @@ class ARROW_EXPORT Uri {\n   /// The URI path component.\n   std::string path() const;\n \n+  std::string extension() const;\n\nReview Comment:\n   nit: docstring?\n\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.h:\n##########\n@@ -24,6 +24,7 @@\n #include \"arrow/engine/substrait/serde.h\"\n #include \"arrow/engine/substrait/visibility.h\"\n #include \"arrow/type_fwd.h\"\n+#include \"arrow/util/uri.h\"\n\nReview Comment:\n   nit: if this include isn't actually needed in the header, can it be placed in the .cc file instead?\n\n\n\n##########\ncpp/src/arrow/util/uri.cc:\n##########\n@@ -208,6 +208,8 @@ std::string Uri::path() const {\n   return std::move(ss).str();\n }\n \n+std::string Uri::extension() const { return impl_->path_segments_.back().to_string(); }\n\nReview Comment:\n   Also, is the last path segment really the extension? I would've expected it to be the filename\u2026\n\n\n\n##########\ncpp/src/arrow/util/uri.cc:\n##########\n@@ -208,6 +208,8 @@ std::string Uri::path() const {\n   return std::move(ss).str();\n }\n \n+std::string Uri::extension() const { return impl_->path_segments_.back().to_string(); }\n\nReview Comment:\n   `path_segments_` could be empty, looking at the implementation.\n\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -106,25 +106,37 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n           path = item.uri_path_glob();\n         }\n \n+        ::arrow::internal::Uri uri;\n+        RETURN_NOT_OK(uri.Parse(path));\n         if (item.format() ==\n             substrait::ReadRel::LocalFiles::FileOrFiles::FILE_FORMAT_PARQUET) {\n           format = std::make_shared<dataset::ParquetFileFormat>();\n-        } else if (util::string_view{path}.ends_with(\".arrow\")) {\n+        } else if (uri.extension() == \".arrow\") {\n\nReview Comment:\n   we may also want to support \".arrows\"?\n\n\n\n",
                    "created": "2022-06-17T12:03:35.347+0000",
                    "updated": "2022-06-17T12:03:35.347+0000",
                    "started": "2022-06-17T12:03:35.346+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782376",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/782446",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13390:\nURL: https://github.com/apache/arrow/pull/13390#discussion_r900279339\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -106,25 +106,37 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n           path = item.uri_path_glob();\n         }\n \n+        ::arrow::internal::Uri uri;\n+        RETURN_NOT_OK(uri.Parse(path));\n         if (item.format() ==\n             substrait::ReadRel::LocalFiles::FileOrFiles::FILE_FORMAT_PARQUET) {\n           format = std::make_shared<dataset::ParquetFileFormat>();\n-        } else if (util::string_view{path}.ends_with(\".arrow\")) {\n+        } else if (uri.extension() == \".arrow\") {\n\nReview Comment:\n   This \"extension comparison\" mechanism is short-lived.  The latest version of Substrait supports specifying IPC as a file format.  However, I'm interested in the thought of supporting `.arrows` as that would imply we are reading files from a filesystem where the files were written with the streaming mode.  Do you think that is a use case we might encounter?\r\n   \r\n   I purposely did not include support for the streaming mode when adding the Substrait support for IPC to LocalFiles because I didn't think it would make sense for a dataset of files stored on disk to have IPC files written with the streaming mode (if you're going to be writing to disk, you might as well use the file mode).  Do you think this is a situation we might encounter?\n\n\n\n",
                    "created": "2022-06-17T15:52:36.708+0000",
                    "updated": "2022-06-17T15:52:36.708+0000",
                    "started": "2022-06-17T15:52:36.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782446",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/782447",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13390:\nURL: https://github.com/apache/arrow/pull/13390#discussion_r900280168\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -106,25 +106,37 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n           path = item.uri_path_glob();\n         }\n \n+        ::arrow::internal::Uri uri;\n+        RETURN_NOT_OK(uri.Parse(path));\n         if (item.format() ==\n             substrait::ReadRel::LocalFiles::FileOrFiles::FILE_FORMAT_PARQUET) {\n           format = std::make_shared<dataset::ParquetFileFormat>();\n-        } else if (util::string_view{path}.ends_with(\".arrow\")) {\n+        } else if (uri.extension() == \".arrow\") {\n\nReview Comment:\n   I suggested it mostly for completeness, I don't think it's particularly likely though.\n\n\n\n",
                    "created": "2022-06-17T15:53:41.852+0000",
                    "updated": "2022-06-17T15:53:41.852+0000",
                    "started": "2022-06-17T15:53:41.852+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782447",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/782452",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13390:\nURL: https://github.com/apache/arrow/pull/13390#discussion_r900283284\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -106,25 +106,37 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n           path = item.uri_path_glob();\n         }\n \n+        ::arrow::internal::Uri uri;\n+        RETURN_NOT_OK(uri.Parse(path));\n         if (item.format() ==\n             substrait::ReadRel::LocalFiles::FileOrFiles::FILE_FORMAT_PARQUET) {\n           format = std::make_shared<dataset::ParquetFileFormat>();\n-        } else if (util::string_view{path}.ends_with(\".arrow\")) {\n+        } else if (uri.extension() == \".arrow\") {\n\nReview Comment:\n   If the situation arises, it can be added to the Substrait spec in a backwards-compatible way.\n\n\n\n",
                    "created": "2022-06-17T15:57:42.095+0000",
                    "updated": "2022-06-17T15:57:42.095+0000",
                    "started": "2022-06-17T15:57:42.095+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782452",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/785831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sanjibansg commented on code in PR #13390:\nURL: https://github.com/apache/arrow/pull/13390#discussion_r909226803\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.h:\n##########\n@@ -24,6 +24,7 @@\n #include \"arrow/engine/substrait/serde.h\"\n #include \"arrow/engine/substrait/visibility.h\"\n #include \"arrow/type_fwd.h\"\n+#include \"arrow/util/uri.h\"\n\nReview Comment:\n   made the change, thanks!\n\n\n\n##########\ncpp/src/arrow/util/uri.h:\n##########\n@@ -68,6 +68,8 @@ class ARROW_EXPORT Uri {\n   /// The URI path component.\n   std::string path() const;\n \n+  std::string extension() const;\n\nReview Comment:\n   added docstring.\n\n\n\n",
                    "created": "2022-06-29T06:00:27.596+0000",
                    "updated": "2022-06-29T06:00:27.596+0000",
                    "started": "2022-06-29T06:00:27.595+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "785831",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/785917",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13390:\nURL: https://github.com/apache/arrow/pull/13390#discussion_r909527428\n\n\n##########\ncpp/src/arrow/util/uri.cc:\n##########\n@@ -208,6 +208,12 @@ std::string Uri::path() const {\n   return std::move(ss).str();\n }\n \n+std::string Uri::extension() const { \n+  std::string filename = impl_->path_segments_.back().to_string();\n\nReview Comment:\n   again, isn't it possible for path_segments_ to be empty?\n\n\n\n##########\ncpp/src/arrow/util/uri.cc:\n##########\n@@ -208,6 +208,12 @@ std::string Uri::path() const {\n   return std::move(ss).str();\n }\n \n+std::string Uri::extension() const { \n+  std::string filename = impl_->path_segments_.back().to_string();\n+  size_t extension_index = filename.find(\".\");\n\nReview Comment:\n   Should we use this instead? Though, I suppose that requires ARROW_FILESYSTEM=ON: https://github.com/apache/arrow/blob/4b74c72d1f97f35746a6aee8515639b37579f332/cpp/src/arrow/filesystem/path_util.h#L41-L43\r\n   \r\n   At the very least, use `find_last_of`? https://github.com/apache/arrow/blob/4b74c72d1f97f35746a6aee8515639b37579f332/cpp/src/arrow/filesystem/path_util.cc#L82-L87\n\n\n\n",
                    "created": "2022-06-29T11:46:22.354+0000",
                    "updated": "2022-06-29T11:46:22.354+0000",
                    "started": "2022-06-29T11:46:22.353+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "785917",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/786034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13390:\nURL: https://github.com/apache/arrow/pull/13390#discussion_r910177440\n\n\n##########\ncpp/src/arrow/util/uri.cc:\n##########\n@@ -208,6 +208,12 @@ std::string Uri::path() const {\n   return std::move(ss).str();\n }\n \n+std::string Uri::extension() const { \n+  std::string filename = impl_->path_segments_.back().to_string();\n+  size_t extension_index = filename.find(\".\");\n\nReview Comment:\n   This entire block of code is converting a Substrait LocalFiles into a FileSystemDataset so I think its safe to rely on `ARROW_FILESYSTEM` methods.\n\n\n\n",
                    "created": "2022-06-29T16:29:49.165+0000",
                    "updated": "2022-06-29T16:29:49.165+0000",
                    "started": "2022-06-29T16:29:49.165+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786034",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/786043",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13390:\nURL: https://github.com/apache/arrow/pull/13390#discussion_r910187844\n\n\n##########\ncpp/src/arrow/util/uri.cc:\n##########\n@@ -208,6 +208,12 @@ std::string Uri::path() const {\n   return std::move(ss).str();\n }\n \n+std::string Uri::extension() const { \n+  std::string filename = impl_->path_segments_.back().to_string();\n+  size_t extension_index = filename.find(\".\");\n\nReview Comment:\n   This code is in `util/uri.cc` though, so it'll get built whether filesystems are enabled or not.\n\n\n\n",
                    "created": "2022-06-29T16:41:15.107+0000",
                    "updated": "2022-06-29T16:41:15.107+0000",
                    "started": "2022-06-29T16:41:15.107+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786043",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/786047",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13390:\nURL: https://github.com/apache/arrow/pull/13390#discussion_r910193565\n\n\n##########\ncpp/src/arrow/util/uri.cc:\n##########\n@@ -208,6 +208,12 @@ std::string Uri::path() const {\n   return std::move(ss).str();\n }\n \n+std::string Uri::extension() const { \n+  std::string filename = impl_->path_segments_.back().to_string();\n+  size_t extension_index = filename.find(\".\");\n\nReview Comment:\n   Ah, missed that, sorry.\n\n\n\n",
                    "created": "2022-06-29T16:47:35.696+0000",
                    "updated": "2022-06-29T16:47:35.696+0000",
                    "started": "2022-06-29T16:47:35.695+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786047",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/786543",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13390:\nURL: https://github.com/apache/arrow/pull/13390#discussion_r910961052\n\n\n##########\ncpp/src/arrow/util/uri.h:\n##########\n@@ -68,6 +68,9 @@ class ARROW_EXPORT Uri {\n   /// The URI path component.\n   std::string path() const;\n \n+  /// The Extension component for file\n+  std::string extension() const;\n\nReview Comment:\n   There is no concept of extension in URIs (the path may not represent a filename at all). Can't you just make it a private utility in substrait?\n\n\n\n",
                    "created": "2022-06-30T12:23:09.357+0000",
                    "updated": "2022-06-30T12:23:09.357+0000",
                    "started": "2022-06-30T12:23:09.356+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786543",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/806857",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin opened a new pull request, #14071:\nURL: https://github.com/apache/arrow/pull/14071\n\n   A PR to subsume #13390\r\n   \r\n   I tried to add on to #13390, but then I rebased and now it seems really complicated to add to that PR.\r\n   \r\n   This PR primarily uses `Uri` to parse file URIs extracted from `substrait::ReadRel`. This occurs when `FromProto` is called on a `Relation` that is a read type (`ReadRel`). Additionally, to make `FromProto` a bit more readable, I moved the code for this case into a separate function, `FromReadRelation`. This function has the following overall flow:\r\n   \r\n   1. Validate ReadRel\r\n   2. Initialize FileFormat from the 1st file URI\r\n   3. foreach file URI:\r\n       1. Validate the proto URI\r\n       2. Parse using the Uri class\r\n       3. Validate the Uri (should be a `file:///` path)\r\n       4. Accumulate `FileInfo` instances using `LocalFileSystem`\r\n   4. return DeclarationInfo for dataset scan over the file URIs\r\n   \r\n   \r\n   Validation functions are prefixed with `Check` to match `CheckRelCommon`.\n\n\n",
                    "created": "2022-09-07T23:25:30.776+0000",
                    "updated": "2022-09-07T23:25:30.776+0000",
                    "started": "2022-09-07T23:25:30.776+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806857",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/806858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14071:\nURL: https://github.com/apache/arrow/pull/14071#issuecomment-1240015661\n\n   https://issues.apache.org/jira/browse/ARROW-16424\n\n\n",
                    "created": "2022-09-07T23:25:56.246+0000",
                    "updated": "2022-09-07T23:25:56.246+0000",
                    "started": "2022-09-07T23:25:56.245+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806858",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/806859",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13390:\nURL: https://github.com/apache/arrow/pull/13390#issuecomment-1240021655\n\n   I was trying to extend this PR, but rebasing made it complicated, so I opened a new one.\r\n   \r\n   The reviews I mainly see here are regarding getting the file extension from the Uri. In #14071 , I don't do this because substrait has fields that specify the file type. Code for this was added after this PR was opened, and can be see here (currently live in master):\r\n   https://github.com/apache/arrow/blob/47314c3999d7b7a7f9167c6ed6793da756c411a1/cpp/src/arrow/engine/substrait/relation_internal.cc#L131-L141\r\n   \r\n   It was because of this code that I rebased.\r\n   \r\n   I think this PR can be closed, and #14071 can replace it. There is a smaller change to `Uri` in that PR, but the update to `relation_internal.cc` is larger (but mostly organizational).\n\n\n",
                    "created": "2022-09-07T23:36:02.649+0000",
                    "updated": "2022-09-07T23:36:02.649+0000",
                    "started": "2022-09-07T23:36:02.649+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806859",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/806863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14071:\nURL: https://github.com/apache/arrow/pull/14071#discussion_r965403621\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -52,159 +55,239 @@ Status CheckRelCommon(const RelMessage& rel) {\n   return Status::OK();\n }\n \n-Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet& ext_set,\n-                                  const ConversionOptions& conversion_options) {\n-  static bool dataset_init = false;\n-  if (!dataset_init) {\n-    dataset_init = true;\n-    dataset::internal::Initialize();\n+Status CheckReadRelation(const substrait::ReadRel& rel,\n+                         const ConversionOptions& conversion_options) {\n+  // NOTE: scan_options->projection is not used by the scanner and thus can't be used\n+  if (rel.has_projection()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::projection\");\n   }\n \n-  switch (rel.rel_type_case()) {\n-    case substrait::Rel::RelTypeCase::kRead: {\n-      const auto& read = rel.read();\n-      RETURN_NOT_OK(CheckRelCommon(read));\n+  if (rel.has_named_table()) {\n+    if (!conversion_options.named_table_provider) {\n+      return Status::Invalid(\n+          \"plan contained a named table but a NamedTableProvider has not been \"\n+          \"configured\");\n+    }\n+\n+    return Status::OK();\n+  }\n \n-      ARROW_ASSIGN_OR_RAISE(auto base_schema,\n-                            FromProto(read.base_schema(), ext_set, conversion_options));\n-      auto num_columns = static_cast<int>(base_schema->fields().size());\n+  if (!rel.has_local_files()) {\n+    return Status::NotImplemented(\n+        \"substrait::ReadRel with read_type other than LocalFiles\");\n+  }\n \n-      auto scan_options = std::make_shared<dataset::ScanOptions>();\n-      scan_options->use_threads = true;\n+  if (rel.local_files().has_advanced_extension()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::LocalFiles::advanced_extension\");\n+  }\n \n-      if (read.has_filter()) {\n-        ARROW_ASSIGN_OR_RAISE(scan_options->filter,\n-                              FromProto(read.filter(), ext_set, conversion_options));\n-      }\n+  return Status::OK();\n+}\n \n-      if (read.has_projection()) {\n-        // NOTE: scan_options->projection is not used by the scanner and thus can't be\n-        // used for this\n-        return Status::NotImplemented(\"substrait::ReadRel::projection\");\n-      }\n+Status CheckFileItem(const substrait::ReadRel_LocalFiles_FileOrFiles& file_item) {\n+  if (file_item.partition_index() != 0) {\n+    return Status::NotImplemented(\n+        \"non-default substrait::ReadRel::LocalFiles::FileOrFiles::partition_index\");\n+  }\n \n-      if (read.has_named_table()) {\n-        if (!conversion_options.named_table_provider) {\n-          return Status::Invalid(\n-              \"plan contained a named table but a NamedTableProvider has not been \"\n-              \"configured\");\n-        }\n-        const NamedTableProvider& named_table_provider =\n-            conversion_options.named_table_provider;\n-        const substrait::ReadRel::NamedTable& named_table = read.named_table();\n-        std::vector<std::string> table_names(named_table.names().begin(),\n-                                             named_table.names().end());\n-        ARROW_ASSIGN_OR_RAISE(compute::Declaration source_decl,\n-                              named_table_provider(table_names));\n-        return DeclarationInfo{std::move(source_decl), num_columns};\n-      }\n+  if (file_item.start() != 0) {\n+    return Status::NotImplemented(\n+        \"non-default substrait::ReadRel::LocalFiles::FileOrFiles::start offset\");\n+  }\n+\n+  if (file_item.length() != 0) {\n+    return Status::NotImplemented(\n+        \"non-default substrait::ReadRel::LocalFiles::FileOrFiles::length\");\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status CheckFilePathUri(const ::arrow::internal::Uri& uri) {\n+  if (!uri.is_file_scheme()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::LocalFiles item (\", uri.ToString(),\n+                                  \") with other than local filesystem (file:///)\");\n+  }\n+\n+  if (uri.port() != -1) {\n+    return Status::NotImplemented(\"substrait::ReadRel::LocalFiles item (\", uri.ToString(),\n+                                  \") should not have a port number in path\");\n+  }\n+\n+  if (!uri.query_string().empty()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::LocalFiles item (\", uri.ToString(),\n+                                  \") should not have a query string in path\");\n+  }\n+\n+  return Status::OK();\n+}\n+\n+// Other helper functions\n+Status DiscoverFilesFromDir(std::shared_ptr<fs::LocalFileSystem>& local_fs,\n+                            std::string dirpath, std::vector<fs::FileInfo>& rel_fpaths) {\n+  // Define a selector for a recursive descent\n+  fs::FileSelector selector;\n+  selector.base_dir = dirpath;\n+  selector.recursive = true;\n+\n+  ARROW_ASSIGN_OR_RAISE(auto file_infos, local_fs->GetFileInfo(selector));\n+  for (auto& file_info : file_infos) {\n+    if (file_info.type() == fs::FileType::File) {\n+      rel_fpaths.push_back(file_info);\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n+// Function that implements \"FromProto\" for a substrait::ReadRel (read relation)\n+Result<DeclarationInfo> FromReadRelation(const substrait::ReadRel& rel,\n\nReview Comment:\n   I am not sure if we should change the function name. I believe `FromProto` is used by all the other relations. If we are going to change that format, better to do it in a separate PR for all relations and keep things uniform. \n\n\n\n",
                    "created": "2022-09-08T00:32:53.091+0000",
                    "updated": "2022-09-08T00:32:53.091+0000",
                    "started": "2022-09-08T00:32:53.091+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806863",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/806864",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14071:\nURL: https://github.com/apache/arrow/pull/14071#discussion_r965407330\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -52,159 +55,239 @@ Status CheckRelCommon(const RelMessage& rel) {\n   return Status::OK();\n }\n \n-Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet& ext_set,\n-                                  const ConversionOptions& conversion_options) {\n-  static bool dataset_init = false;\n-  if (!dataset_init) {\n-    dataset_init = true;\n-    dataset::internal::Initialize();\n+Status CheckReadRelation(const substrait::ReadRel& rel,\n+                         const ConversionOptions& conversion_options) {\n+  // NOTE: scan_options->projection is not used by the scanner and thus can't be used\n+  if (rel.has_projection()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::projection\");\n   }\n \n-  switch (rel.rel_type_case()) {\n-    case substrait::Rel::RelTypeCase::kRead: {\n-      const auto& read = rel.read();\n-      RETURN_NOT_OK(CheckRelCommon(read));\n+  if (rel.has_named_table()) {\n+    if (!conversion_options.named_table_provider) {\n+      return Status::Invalid(\n+          \"plan contained a named table but a NamedTableProvider has not been \"\n+          \"configured\");\n+    }\n+\n+    return Status::OK();\n+  }\n \n-      ARROW_ASSIGN_OR_RAISE(auto base_schema,\n-                            FromProto(read.base_schema(), ext_set, conversion_options));\n-      auto num_columns = static_cast<int>(base_schema->fields().size());\n+  if (!rel.has_local_files()) {\n+    return Status::NotImplemented(\n+        \"substrait::ReadRel with read_type other than LocalFiles\");\n+  }\n \n-      auto scan_options = std::make_shared<dataset::ScanOptions>();\n-      scan_options->use_threads = true;\n+  if (rel.local_files().has_advanced_extension()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::LocalFiles::advanced_extension\");\n+  }\n \n-      if (read.has_filter()) {\n-        ARROW_ASSIGN_OR_RAISE(scan_options->filter,\n-                              FromProto(read.filter(), ext_set, conversion_options));\n-      }\n+  return Status::OK();\n+}\n \n-      if (read.has_projection()) {\n-        // NOTE: scan_options->projection is not used by the scanner and thus can't be\n-        // used for this\n-        return Status::NotImplemented(\"substrait::ReadRel::projection\");\n-      }\n+Status CheckFileItem(const substrait::ReadRel_LocalFiles_FileOrFiles& file_item) {\n+  if (file_item.partition_index() != 0) {\n+    return Status::NotImplemented(\n+        \"non-default substrait::ReadRel::LocalFiles::FileOrFiles::partition_index\");\n+  }\n \n-      if (read.has_named_table()) {\n-        if (!conversion_options.named_table_provider) {\n-          return Status::Invalid(\n-              \"plan contained a named table but a NamedTableProvider has not been \"\n-              \"configured\");\n-        }\n-        const NamedTableProvider& named_table_provider =\n-            conversion_options.named_table_provider;\n-        const substrait::ReadRel::NamedTable& named_table = read.named_table();\n-        std::vector<std::string> table_names(named_table.names().begin(),\n-                                             named_table.names().end());\n-        ARROW_ASSIGN_OR_RAISE(compute::Declaration source_decl,\n-                              named_table_provider(table_names));\n-        return DeclarationInfo{std::move(source_decl), num_columns};\n-      }\n+  if (file_item.start() != 0) {\n+    return Status::NotImplemented(\n+        \"non-default substrait::ReadRel::LocalFiles::FileOrFiles::start offset\");\n+  }\n+\n+  if (file_item.length() != 0) {\n+    return Status::NotImplemented(\n+        \"non-default substrait::ReadRel::LocalFiles::FileOrFiles::length\");\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status CheckFilePathUri(const ::arrow::internal::Uri& uri) {\n+  if (!uri.is_file_scheme()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::LocalFiles item (\", uri.ToString(),\n+                                  \") with other than local filesystem (file:///)\");\n+  }\n+\n+  if (uri.port() != -1) {\n+    return Status::NotImplemented(\"substrait::ReadRel::LocalFiles item (\", uri.ToString(),\n+                                  \") should not have a port number in path\");\n+  }\n+\n+  if (!uri.query_string().empty()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::LocalFiles item (\", uri.ToString(),\n+                                  \") should not have a query string in path\");\n+  }\n+\n+  return Status::OK();\n+}\n+\n+// Other helper functions\n+Status DiscoverFilesFromDir(std::shared_ptr<fs::LocalFileSystem>& local_fs,\n+                            std::string dirpath, std::vector<fs::FileInfo>& rel_fpaths) {\n+  // Define a selector for a recursive descent\n+  fs::FileSelector selector;\n+  selector.base_dir = dirpath;\n+  selector.recursive = true;\n+\n+  ARROW_ASSIGN_OR_RAISE(auto file_infos, local_fs->GetFileInfo(selector));\n+  for (auto& file_info : file_infos) {\n+    if (file_info.type() == fs::FileType::File) {\n+      rel_fpaths.push_back(file_info);\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n+// Function that implements \"FromProto\" for a substrait::ReadRel (read relation)\n+Result<DeclarationInfo> FromReadRelation(const substrait::ReadRel& rel,\n+                                         const ExtensionSet& ext_set,\n+                                         const ConversionOptions& conversion_options) {\n+  // Validate the defined read relation\n+  RETURN_NOT_OK(CheckReadRelation(rel, conversion_options));\n+\n+  // Get the base schema for the read relation\n+  ARROW_ASSIGN_OR_RAISE(auto base_schema,\n+                        FromProto(rel.base_schema(), ext_set, conversion_options));\n \n-      if (!read.has_local_files()) {\n+  auto num_columns = static_cast<int>(base_schema->fields().size());\n+  auto scan_options = std::make_shared<dataset::ScanOptions>();\n+  scan_options->use_threads = true;\n+\n+  if (rel.has_filter()) {\n+    ARROW_ASSIGN_OR_RAISE(scan_options->filter,\n+                          FromProto(rel.filter(), ext_set, conversion_options));\n+  }\n+\n+  if (rel.has_named_table()) {\n+    const NamedTableProvider& named_provider = conversion_options.named_table_provider;\n+    const substrait::ReadRel::NamedTable& named_table = rel.named_table();\n+    std::vector<std::string> table_names(named_table.names().begin(),\n+                                         named_table.names().end());\n+\n+    ARROW_ASSIGN_OR_RAISE(compute::Declaration source_decl, named_provider(table_names));\n+    return DeclarationInfo{std::move(source_decl), num_columns};\n+  }\n+\n+  // Determine format based on the first FileOrFiles item\n+  std::shared_ptr<dataset::FileFormat> format;\n+  if (rel.local_files().items_size() > 0) {\n+    const auto& first_file = rel.local_files().items(0);\n+\n+    switch (first_file.file_format_case()) {\n+      case substrait::ReadRel_LocalFiles_FileOrFiles::kParquet:\n+        format = std::make_shared<dataset::ParquetFileFormat>();\n+        break;\n+\n+      case substrait::ReadRel_LocalFiles_FileOrFiles::kArrow:\n+        format = std::make_shared<dataset::IpcFileFormat>();\n+        break;\n+\n+      default:\n+        // TODO: maybe check for \".feather\" or \".arrows\"?\n         return Status::NotImplemented(\n-            \"substrait::ReadRel with read_type other than LocalFiles\");\n+            \"unknown file format \",\n+            \"(see substrait::ReadRel::LocalFiles::FileOrFiles::file_format)\");\n\nReview Comment:\n   rather than unknown, may be `unsupported`. \n\n\n\n",
                    "created": "2022-09-08T00:43:19.728+0000",
                    "updated": "2022-09-08T00:43:19.728+0000",
                    "started": "2022-09-08T00:43:19.728+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806864",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/806870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14071:\nURL: https://github.com/apache/arrow/pull/14071#discussion_r965440777\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -52,159 +55,239 @@ Status CheckRelCommon(const RelMessage& rel) {\n   return Status::OK();\n }\n \n-Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet& ext_set,\n-                                  const ConversionOptions& conversion_options) {\n-  static bool dataset_init = false;\n-  if (!dataset_init) {\n-    dataset_init = true;\n-    dataset::internal::Initialize();\n+Status CheckReadRelation(const substrait::ReadRel& rel,\n+                         const ConversionOptions& conversion_options) {\n+  // NOTE: scan_options->projection is not used by the scanner and thus can't be used\n+  if (rel.has_projection()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::projection\");\n   }\n \n-  switch (rel.rel_type_case()) {\n-    case substrait::Rel::RelTypeCase::kRead: {\n-      const auto& read = rel.read();\n-      RETURN_NOT_OK(CheckRelCommon(read));\n+  if (rel.has_named_table()) {\n+    if (!conversion_options.named_table_provider) {\n+      return Status::Invalid(\n+          \"plan contained a named table but a NamedTableProvider has not been \"\n+          \"configured\");\n+    }\n+\n+    return Status::OK();\n+  }\n \n-      ARROW_ASSIGN_OR_RAISE(auto base_schema,\n-                            FromProto(read.base_schema(), ext_set, conversion_options));\n-      auto num_columns = static_cast<int>(base_schema->fields().size());\n+  if (!rel.has_local_files()) {\n+    return Status::NotImplemented(\n+        \"substrait::ReadRel with read_type other than LocalFiles\");\n+  }\n \n-      auto scan_options = std::make_shared<dataset::ScanOptions>();\n-      scan_options->use_threads = true;\n+  if (rel.local_files().has_advanced_extension()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::LocalFiles::advanced_extension\");\n+  }\n \n-      if (read.has_filter()) {\n-        ARROW_ASSIGN_OR_RAISE(scan_options->filter,\n-                              FromProto(read.filter(), ext_set, conversion_options));\n-      }\n+  return Status::OK();\n+}\n \n-      if (read.has_projection()) {\n-        // NOTE: scan_options->projection is not used by the scanner and thus can't be\n-        // used for this\n-        return Status::NotImplemented(\"substrait::ReadRel::projection\");\n-      }\n+Status CheckFileItem(const substrait::ReadRel_LocalFiles_FileOrFiles& file_item) {\n+  if (file_item.partition_index() != 0) {\n+    return Status::NotImplemented(\n+        \"non-default substrait::ReadRel::LocalFiles::FileOrFiles::partition_index\");\n+  }\n \n-      if (read.has_named_table()) {\n-        if (!conversion_options.named_table_provider) {\n-          return Status::Invalid(\n-              \"plan contained a named table but a NamedTableProvider has not been \"\n-              \"configured\");\n-        }\n-        const NamedTableProvider& named_table_provider =\n-            conversion_options.named_table_provider;\n-        const substrait::ReadRel::NamedTable& named_table = read.named_table();\n-        std::vector<std::string> table_names(named_table.names().begin(),\n-                                             named_table.names().end());\n-        ARROW_ASSIGN_OR_RAISE(compute::Declaration source_decl,\n-                              named_table_provider(table_names));\n-        return DeclarationInfo{std::move(source_decl), num_columns};\n-      }\n+  if (file_item.start() != 0) {\n+    return Status::NotImplemented(\n+        \"non-default substrait::ReadRel::LocalFiles::FileOrFiles::start offset\");\n+  }\n+\n+  if (file_item.length() != 0) {\n+    return Status::NotImplemented(\n+        \"non-default substrait::ReadRel::LocalFiles::FileOrFiles::length\");\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status CheckFilePathUri(const ::arrow::internal::Uri& uri) {\n+  if (!uri.is_file_scheme()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::LocalFiles item (\", uri.ToString(),\n+                                  \") with other than local filesystem (file:///)\");\n+  }\n+\n+  if (uri.port() != -1) {\n+    return Status::NotImplemented(\"substrait::ReadRel::LocalFiles item (\", uri.ToString(),\n+                                  \") should not have a port number in path\");\n+  }\n+\n+  if (!uri.query_string().empty()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::LocalFiles item (\", uri.ToString(),\n+                                  \") should not have a query string in path\");\n+  }\n+\n+  return Status::OK();\n+}\n+\n+// Other helper functions\n+Status DiscoverFilesFromDir(std::shared_ptr<fs::LocalFileSystem>& local_fs,\n+                            std::string dirpath, std::vector<fs::FileInfo>& rel_fpaths) {\n+  // Define a selector for a recursive descent\n+  fs::FileSelector selector;\n+  selector.base_dir = dirpath;\n+  selector.recursive = true;\n+\n+  ARROW_ASSIGN_OR_RAISE(auto file_infos, local_fs->GetFileInfo(selector));\n+  for (auto& file_info : file_infos) {\n+    if (file_info.type() == fs::FileType::File) {\n+      rel_fpaths.push_back(file_info);\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n+// Function that implements \"FromProto\" for a substrait::ReadRel (read relation)\n+Result<DeclarationInfo> FromReadRelation(const substrait::ReadRel& rel,\n\nReview Comment:\n   I think your approach is better, may be we can standardize this across other relations too. But I believe it could be better to do it in another PR. I see these components in general\r\n   \r\n   1. validation\r\n   2. excluding what is not supported via checks\r\n   3. logic to populate the relational entities\r\n   4. may be helper functions like (file discovery, etc)\r\n   \r\n   At the moment we have all these within the switch case which is not very easy to go through. \r\n   \r\n   Shall we create a separate JIRA and work it there? cc @westonpace \n\n\n\n",
                    "created": "2022-09-08T02:15:26.493+0000",
                    "updated": "2022-09-08T02:15:26.493+0000",
                    "started": "2022-09-08T02:15:26.492+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806870",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/806871",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14071:\nURL: https://github.com/apache/arrow/pull/14071#discussion_r965443558\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -52,159 +55,239 @@ Status CheckRelCommon(const RelMessage& rel) {\n   return Status::OK();\n }\n \n-Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet& ext_set,\n-                                  const ConversionOptions& conversion_options) {\n-  static bool dataset_init = false;\n-  if (!dataset_init) {\n-    dataset_init = true;\n-    dataset::internal::Initialize();\n+Status CheckReadRelation(const substrait::ReadRel& rel,\n\nReview Comment:\n   doubt: at a certain point, these unimplemented once will be implemented and the use of this function wouldn't be very useful. Wouldn't it be better to leave them within the main function where we do the rest of the tasks? \n\n\n\n",
                    "created": "2022-09-08T02:22:26.776+0000",
                    "updated": "2022-09-08T02:22:26.776+0000",
                    "started": "2022-09-08T02:22:26.776+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806871",
                    "issueId": "13442593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/worklog/806872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #14071:\nURL: https://github.com/apache/arrow/pull/14071#discussion_r965443813\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -52,159 +55,239 @@ Status CheckRelCommon(const RelMessage& rel) {\n   return Status::OK();\n }\n \n-Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet& ext_set,\n-                                  const ConversionOptions& conversion_options) {\n-  static bool dataset_init = false;\n-  if (!dataset_init) {\n-    dataset_init = true;\n-    dataset::internal::Initialize();\n+Status CheckReadRelation(const substrait::ReadRel& rel,\n+                         const ConversionOptions& conversion_options) {\n+  // NOTE: scan_options->projection is not used by the scanner and thus can't be used\n+  if (rel.has_projection()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::projection\");\n   }\n \n-  switch (rel.rel_type_case()) {\n-    case substrait::Rel::RelTypeCase::kRead: {\n-      const auto& read = rel.read();\n-      RETURN_NOT_OK(CheckRelCommon(read));\n+  if (rel.has_named_table()) {\n+    if (!conversion_options.named_table_provider) {\n+      return Status::Invalid(\n+          \"plan contained a named table but a NamedTableProvider has not been \"\n+          \"configured\");\n+    }\n+\n+    return Status::OK();\n+  }\n \n-      ARROW_ASSIGN_OR_RAISE(auto base_schema,\n-                            FromProto(read.base_schema(), ext_set, conversion_options));\n-      auto num_columns = static_cast<int>(base_schema->fields().size());\n+  if (!rel.has_local_files()) {\n+    return Status::NotImplemented(\n+        \"substrait::ReadRel with read_type other than LocalFiles\");\n+  }\n \n-      auto scan_options = std::make_shared<dataset::ScanOptions>();\n-      scan_options->use_threads = true;\n+  if (rel.local_files().has_advanced_extension()) {\n+    return Status::NotImplemented(\"substrait::ReadRel::LocalFiles::advanced_extension\");\n+  }\n \n-      if (read.has_filter()) {\n-        ARROW_ASSIGN_OR_RAISE(scan_options->filter,\n-                              FromProto(read.filter(), ext_set, conversion_options));\n-      }\n+  return Status::OK();\n+}\n \n-      if (read.has_projection()) {\n-        // NOTE: scan_options->projection is not used by the scanner and thus can't be\n-        // used for this\n-        return Status::NotImplemented(\"substrait::ReadRel::projection\");\n-      }\n+Status CheckFileItem(const substrait::ReadRel_LocalFiles_FileOrFiles& file_item) {\n\nReview Comment:\n   ```suggestion\r\n   Status CheckFileItem(const substrait::ReadRel::LocalFiles::FileOrFiles& file_item) {\r\n   ```\n\n\n\n",
                    "created": "2022-09-08T02:23:06.753+0000",
                    "updated": "2022-09-08T02:23:06.753+0000",
                    "started": "2022-09-08T02:23:06.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806872",
                    "issueId": "13442593"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 37800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7cf43203[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@713bc6f2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@407fc86b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6f5c9ac0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2aa574cb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3654d20[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3de7e1b7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@36e6e651[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3764cf6a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1e4198eb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c2938cd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1dfc8177[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 37800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 12 14:26:47 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-10-12T14:26:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16424/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-04-29T22:54:47.000+0000",
        "updated": "2022-10-13T17:04:57.000+0000",
        "timeoriginalestimate": null,
        "description": "FromProto\u00a0function in {{arrow/engine/substrait/relation_internal.cc}} parse {{uri_path}} with {{string_view}} utilities. However this should be done with {{Uri}}\u00a0class from\u00a0{{arrow/util/uri.h.}}\r\n{code:c++}\r\nelse if (util::string_view{path}.ends_with(\".arrow\")) {\r\n  format = std::make_shared<dataset::IpcFileFormat>();\r\n} else if (util::string_view{path}.ends_with(\".feather\")) {\r\n  format = std::make_shared<dataset::IpcFileFormat>();\r\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 37800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Update uri_path parsing in FromProto",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/comment/17533998",
                    "id": "17533998",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "When writing the python Substrait consumer we disabled one of the tests on Windows due to this issue (it was described as ARROW-16392 which is a duplicate of this issue).  When this is fixed we should make sure to re-enable the test.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-05-09T19:58:34.898+0000",
                    "updated": "2022-05-09T19:58:34.898+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/comment/17601403",
                    "id": "17601403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=octalene",
                        "name": "octalene",
                        "key": "octalene",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=octalene&avatarId=51083",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=octalene&avatarId=51083",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=octalene&avatarId=51083",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=octalene&avatarId=51083"
                        },
                        "displayName": "Aldrin Montana",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I wanted to note some of the unit tests that were disabled due to ARROW-16392, which can be re-enabled when this is addressed:\r\n* [DeserializeWithConsumerFactory|https://github.com/apache/arrow/blob/master/cpp/src/arrow/engine/substrait/serde_test.cc#L901-L922]\r\n* [DeserializeSinglePlanWithConsumerFactory|https://github.com/apache/arrow/blob/master/cpp/src/arrow/engine/substrait/serde_test.cc#L924-L942]\r\n* [DeserializeWithWriteOptionsFactory|https://github.com/apache/arrow/blob/master/cpp/src/arrow/engine/substrait/serde_test.cc#L944-L985]\r\n* [GetRecordBatchReader|https://github.com/apache/arrow/blob/master/cpp/src/arrow/engine/substrait/serde_test.cc#L998-L1013]\r\n\r\n(as of commit [ff3aa3b|https://github.com/apache/arrow/blob/ff3aa3b7bb31c679892d19ff74d67563b986828f/cpp/src/arrow/engine/substrait/serde_test.cc])",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=octalene",
                        "name": "octalene",
                        "key": "octalene",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=octalene&avatarId=51083",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=octalene&avatarId=51083",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=octalene&avatarId=51083",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=octalene&avatarId=51083"
                        },
                        "displayName": "Aldrin Montana",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-09-07T16:51:11.772+0000",
                    "updated": "2022-09-07T16:51:11.772+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/comment/17601550",
                    "id": "17601550",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=octalene",
                        "name": "octalene",
                        "key": "octalene",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=octalene&avatarId=51083",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=octalene&avatarId=51083",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=octalene&avatarId=51083",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=octalene&avatarId=51083"
                        },
                        "displayName": "Aldrin Montana",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I have assigned this issue to myself. I tried to extend [PR#13390|https://github.com/apache/arrow/pull/13390], but that became complicated after I rebased.\r\n\r\n\u00a0\r\n\r\nI have created [PR#14071|https://github.com/apache/arrow/pull/14071]\u00a0for reference, but I will also try to coordinate with [~vibhatha]\u00a0 for ARROW-16855.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=octalene",
                        "name": "octalene",
                        "key": "octalene",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=octalene&avatarId=51083",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=octalene&avatarId=51083",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=octalene&avatarId=51083",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=octalene&avatarId=51083"
                        },
                        "displayName": "Aldrin Montana",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-09-07T23:29:38.316+0000",
                    "updated": "2022-09-07T23:29:38.316+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442593/comment/17616464",
                    "id": "17616464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 14071\n[https://github.com/apache/arrow/pull/14071]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-10-12T14:26:47.740+0000",
                    "updated": "2022-10-12T14:26:47.740+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z11ylc:",
        "customfield_12314139": null
    }
}