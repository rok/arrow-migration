{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13186986",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986",
    "key": "ARROW-3316",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12607627",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12607627",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13340313",
                    "key": "ARROW-10570",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313",
                    "fields": {
                        "summary": "[R] Use Converter API to convert SEXP to Array/ChunkedArray",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 31200,
            "total": 31200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 31200,
            "total": 31200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3316/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 52,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/560032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois opened a new pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-02T16:46:57.655+0000",
                    "updated": "2021-03-02T16:46:57.655+0000",
                    "started": "2021-03-02T16:46:57.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "560032",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/560053",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#discussion_r585768620\n\n\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -1023,12 +1060,87 @@ std::shared_ptr<arrow::Array> vec_to_arrow(SEXP x,\n       options.type, options, gc_memory_pool()));\n \n   StopIfNotOk(converter->Extend(x, options.size));\n+\n   return ValueOrStop(converter->ToArray());\n }\n \n }  // namespace r\n }  // namespace arrow\n \n+// [[arrow::export]]\n+std::shared_ptr<arrow::Table> Table__from_dots(SEXP lst, SEXP schema_sxp) {\n+  bool infer_schema = !Rf_inherits(schema_sxp, \"Schema\");\n+\n+  int num_fields;\n+  StopIfNotOk(arrow::r::count_fields(lst, &num_fields));\n+\n+  // schema + metadata\n+  std::shared_ptr<arrow::Schema> schema;\n+  StopIfNotOk(arrow::r::InferSchemaFromDots(lst, schema_sxp, num_fields, schema));\n+  StopIfNotOk(arrow::r::AddMetadataFromDots(lst, num_fields, schema));\n+\n+  // table\n+  std::vector<std::shared_ptr<arrow::ChunkedArray>> columns(num_fields);\n+\n+  // for now the parallel task does not work,\n+  // presumably because some ->Extend() can't actually run in parallel\n+  //\n+  // auto parallel_tasks =\n+  //     arrow::internal::TaskGroup::MakeThreaded(arrow::internal::GetCpuThreadPool());\n+  auto parallel_tasks =\n+    arrow::internal::TaskGroup::MakeSerial();\n+\n+  std::vector<std::function<arrow::Status()>> delayed_serial_tasks;\n+\n+  auto extract_one_column = [&](int j, SEXP x, cpp11::r_string) {\n+    if (Rf_inherits(x, \"ChunkedArray\")) {\n+      columns[j] = cpp11::as_cpp<std::shared_ptr<arrow::ChunkedArray>>(x);\n+    } else if (Rf_inherits(x, \"Array\")) {\n+      columns[j] = std::make_shared<arrow::ChunkedArray>(\n+          cpp11::as_cpp<std::shared_ptr<arrow::Array>>(x));\n+    } else {\n+      arrow::r::RConversionOptions options;\n+      options.strict = !infer_schema;\n+      options.type = schema->field(j)->type();\n+      options.size = vctrs::short_vec_size(x);\n+\n+      // maybe short circuit when zero-copy is possible\n+      if (arrow::r::can_reuse_memory(x, options.type)) {\n+        columns[j] = std::make_shared<arrow::ChunkedArray>(\n+            arrow::r::vec_to_arrow__reuse_memory(x));\n+      } else {\n+        auto converter = ValueOrStop(\n+            arrow::MakeConverter<arrow::r::RConverter, arrow::r::RConverterTrait>(\n+                options.type, options, gc_memory_pool()));\n+\n+        auto task = [&]() {\n\nReview comment:\n       This reference capture of `converter` is not safe since `task` outlives the scope of `converter`\r\n   ```suggestion\r\n           auto task = [=]() {\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-02T17:33:51.941+0000",
                    "updated": "2021-03-02T17:33:51.941+0000",
                    "started": "2021-03-02T17:33:51.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "560053",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/560136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#issuecomment-789215240\n\n\n   https://issues.apache.org/jira/browse/ARROW-3316\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-02T21:06:09.152+0000",
                    "updated": "2021-03-02T21:06:09.152+0000",
                    "started": "2021-03-02T21:06:09.152+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "560136",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/560502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#issuecomment-789772368\n\n\n   ```cpp\r\n   bool CanExtendParallel(SEXP x, const std::shared_ptr<arrow::DataType>& type) {\r\n     // TODO: identify when it's ok to do things in parallel\r\n     return false;\r\n   }\r\n   ```\r\n   \r\n   turning this to `true` entirely makes everything fail dramatically. So we'll need to pay careful attention about what can and cannot be done concurrently. We might have to dial down the use of the `cpp11` package because I believe when we create a `cpp11` vector to shell a `SEXP` this uses a central resource for the protection. \r\n   \r\n   It would probably be better to move the \"can this be done in parallel\" to a virtual method of `RConverter`, but we would need to move capture `converter` in the `task` lambda or at least figure out some way for the converter to still be alive when the task is run. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-03T14:55:57.762+0000",
                    "updated": "2021-03-03T14:55:57.762+0000",
                    "started": "2021-03-03T14:55:57.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "560502",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/568905",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#issuecomment-802741367\n\n\n   The issue about doing R things in parallel is that you can't really. Maybe we can have an R specific mutex: \r\n   \r\n   ```cpp\r\n   std::mutex& get_r_mutex() {\r\n     static std::mutex m ;\r\n     return m;\r\n   }\r\n   ```\r\n   \r\n   that we can lock when we do need to call something in the R api, including making a `cpp11::doubles` for example. Then use this in a wrapper class like: \r\n   \r\n   ```cpp\r\n   template <class vector>\r\n   class synchronized {\r\n   public:\r\n     synchronized(SEXP x) {\r\n       std::lock_guard<std::mutex> lock(get_r_mutex());\r\n       data_ = new vector(x);\r\n     }\r\n   \r\n     vector& data() {\r\n       return *data_;\r\n     }\r\n   \r\n     ~synchronized() {\r\n       std::lock_guard<std::mutex> lock(get_r_mutex());\r\n       delete data_;\r\n     }\r\n   \r\n   private:\r\n     vector* data_;\r\n   };\r\n   ```\r\n   \r\n   so that we can have something like this: \r\n   \r\n   ```cpp\r\n   // [[arrow::export]]\r\n   int parallel_test(int n) {\r\n     auto tasks = arrow::internal::TaskGroup::MakeThreaded(arrow::internal::GetCpuThreadPool());\r\n     SEXP x = PROTECT(Rf_allocVector(REALSXP, 100));\r\n   \r\n     std::atomic<int> count(0);\r\n     for (int i = 0; i < n; i++) {\r\n       tasks->Append([x, &count] {\r\n         synchronized<cpp11::doubles> dx(x);\r\n   \r\n         int nx = dx.data().size();\r\n         std::this_thread::sleep_for(std::chrono::milliseconds(100));\r\n         count += nx;\r\n   \r\n         return arrow::Status::OK();\r\n       });\r\n     }\r\n   \r\n     auto status = tasks->Finish();\r\n     UNPROTECT(1);\r\n     return count;\r\n   }\r\n   ```\r\n   \r\n   Of course this only makes sure that the `synchronized<cpp11::doubles>` is safe on construction and destruction, access to other methods would also need to lock/unlock. \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-19T10:58:59.838+0000",
                    "updated": "2021-03-19T10:58:59.838+0000",
                    "started": "2021-03-19T10:58:59.838+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "568905",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/587362",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#discussion_r618566919\n\n\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -1023,12 +1062,134 @@ std::shared_ptr<arrow::Array> vec_to_arrow(SEXP x,\n       options.type, options, gc_memory_pool()));\n \n   StopIfNotOk(converter->Extend(x, options.size));\n+\n   return ValueOrStop(converter->ToArray());\n }\n \n }  // namespace r\n }  // namespace arrow\n \n+arrow::Status check_consistent_column_length(\n+    const std::vector<std::shared_ptr<arrow::ChunkedArray>>& columns) {\n+  if (columns.size()) {\n+    int64_t num_rows = columns[0]->length();\n+\n+    for (const auto& column : columns) {\n+      if (column->length() != num_rows) {\n+        return arrow::Status::Invalid(\"All columns must have the same length\");\n+      }\n+    }\n+  }\n+\n+  return arrow::Status::OK();\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::Table> Table__from_dots(SEXP lst, SEXP schema_sxp) {\n+  bool infer_schema = !Rf_inherits(schema_sxp, \"Schema\");\n+\n+  int num_fields;\n+  StopIfNotOk(arrow::r::count_fields(lst, &num_fields));\n+\n+  // schema + metadata\n+  std::shared_ptr<arrow::Schema> schema;\n+  StopIfNotOk(arrow::r::InferSchemaFromDots(lst, schema_sxp, num_fields, schema));\n+  StopIfNotOk(arrow::r::AddMetadataFromDots(lst, num_fields, schema));\n+\n+  if (!infer_schema && schema->num_fields() != num_fields) {\n+    cpp11::stop(\"incompatible. schema has %d fields, and %d columns are supplied\",\n+                schema->num_fields(), num_fields);\n+  }\n+\n+  // table\n+  std::vector<std::shared_ptr<arrow::ChunkedArray>> columns(num_fields);\n+\n+  if (!infer_schema) {\n+    auto check_name = [&](int j, SEXP, cpp11::r_string name) {\n+      std::string cpp_name(name);\n+      if (schema->field(j)->name() != cpp_name) {\n+        cpp11::stop(\"field at index %d has name '%s' != '%s'\", j + 1,\n+                    schema->field(j)->name().c_str(), cpp_name.c_str());\n+      }\n+    };\n+    arrow::r::TraverseDots(lst, num_fields, check_name);\n+  }\n+\n+  auto parallel_tasks =\n+      arrow::internal::TaskGroup::MakeThreaded(arrow::internal::GetCpuThreadPool());\n+  std::vector<std::function<arrow::Status()>> delayed_serial_tasks;\n+\n+  arrow::Status status = arrow::Status::OK();\n+\n+  auto flatten_lst = arrow::r::FlattenDots(lst, num_fields);\n+  std::vector<std::unique_ptr<arrow::r::RConverter>> converters(num_fields);\n+\n+  // init converters\n+  for (int j = 0; j < num_fields && status.ok(); j++) {\n+    SEXP x = flatten_lst[j];\n+\n+    if (Rf_inherits(x, \"ChunkedArray\")) {\n+      columns[j] = cpp11::as_cpp<std::shared_ptr<arrow::ChunkedArray>>(x);\n+    } else if (Rf_inherits(x, \"Array\")) {\n+      columns[j] = std::make_shared<arrow::ChunkedArray>(\n+          cpp11::as_cpp<std::shared_ptr<arrow::Array>>(x));\n+    } else {\n+      arrow::r::RConversionOptions options;\n+      options.strict = !infer_schema;\n+      options.type = schema->field(j)->type();\n+      options.size = vctrs::short_vec_size(x);\n+\n+      // maybe short circuit when zero-copy is possible\n+      if (arrow::r::can_reuse_memory(x, options.type)) {\n+        columns[j] = std::make_shared<arrow::ChunkedArray>(\n+            arrow::r::vec_to_arrow__reuse_memory(x));\n+      } else {\n+        auto converter_result =\n+            arrow::MakeConverter<arrow::r::RConverter, arrow::r::RConverterTrait>(\n+                options.type, options, gc_memory_pool());\n+        if (!converter_result.ok()) {\n+          status = converter_result.status();\n+          break;\n+        }\n+        converters[j] = std::move(converter_result.ValueUnsafe());\n+      }\n+    }\n+  }\n+  StopIfNotOk(status);\n+\n+  for (int j = 0; j < num_fields; j++) {\n+    auto& converter = converters[j];\n+    if (converter != nullptr) {\n+      auto task = [j, &converters, &flatten_lst, &columns] {\n+        auto& converter = converters[j];\n+\n+        SEXP x = flatten_lst[j];\n+        RETURN_NOT_OK(converter->Extend(x, converter->options().size));\n+        ARROW_ASSIGN_OR_RAISE(auto array, converter->ToArray());\n+        columns[j] = std::make_shared<arrow::ChunkedArray>(array);\n+        return arrow::Status::OK();\n+      };\n+\n+      if (converter->Parallel()) {\n+        parallel_tasks->Append(task);\n+      } else {\n+        delayed_serial_tasks.push_back(std::move(task));\n+      }\n+    }\n+  }\n+\n+  for (auto& task : delayed_serial_tasks) {\n+    status &= task();\n+  }\n+\n+  status &= parallel_tasks->Finish();\n+  status &= check_consistent_column_length(columns);\n\nReview comment:\n       Regarding my comment at https://github.com/apache/arrow/pull/9851#discussion_r605919879: looks like you already took care of this. Thanks!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-22T16:37:04.688+0000",
                    "updated": "2021-04-22T16:37:04.688+0000",
                    "started": "2021-04-22T16:37:04.688+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "587362",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/590411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#issuecomment-828472890\n\n\n   Marking this as ready to review. I've changed the approach this week so that it does not need to resort to locking. \r\n   \r\n   This introduces the `RTasks` class that factors out handling of tasks that can be run in parallel and tasks that cannot (because they might touch the R central resource, e.g. protect an R object ...). It has `void Append(bool parallel, Task&& task)` to add a task. Based on `parallel` the task is either added to the parallel task group, and potentially started immediately, or delayed to run until all the tasks have been added. \r\n   \r\n   Then it has `Finish()` which 1) runs the tasks that have been delayed, and then waits for the parallel tasks to finish. \r\n   \r\n   With this, the `RConverter` class gained `virtual void DelayedExtend(SEXP values, int64_t size, RTasks& tasks)`. The idea is that an implementation might first do some setup work that has to happen on the main thread because it uses central R resources, but then the bulk of the work is either run in parallel if possible or delayed. \r\n   \r\n   The `RStructConverter` implementation is a good example that has to do some work upfront but then can still benefit from parallel ingestion of its columns. \r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-28T13:51:41.165+0000",
                    "updated": "2021-04-28T13:51:41.165+0000",
                    "started": "2021-04-28T13:51:41.165+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "590411",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/591715",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#issuecomment-830399868\n\n\n   @github-actions crossbow submit -g r\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-30T21:14:39.738+0000",
                    "updated": "2021-04-30T21:14:39.738+0000",
                    "started": "2021-04-30T21:14:39.737+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591715",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/591716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#issuecomment-830400651\n\n\n   Revision: 299c34f94c61c7017f4a9e32437ddd0d9bbd50ee\n   \n   Submitted crossbow builds: [ursacomputing/crossbow @ actions-362](https://github.com/ursacomputing/crossbow/branches/all?query=actions-362)\n   \n   |Task|Status|\n   |----|------|\n   |conda-linux-gcc-py36-cpu-r36|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-conda-linux-gcc-py36-cpu-r36)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-conda-linux-gcc-py36-cpu-r36)|\n   |conda-linux-gcc-py37-cpu-r40|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-conda-linux-gcc-py37-cpu-r40)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-conda-linux-gcc-py37-cpu-r40)|\n   |conda-osx-clang-py36-r36|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-conda-osx-clang-py36-r36)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-conda-osx-clang-py36-r36)|\n   |conda-osx-clang-py37-r40|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-conda-osx-clang-py37-r40)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-conda-osx-clang-py37-r40)|\n   |conda-win-vs2017-py36-r36|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-conda-win-vs2017-py36-r36)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-conda-win-vs2017-py36-r36)|\n   |conda-win-vs2017-py37-r40|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-conda-win-vs2017-py37-r40)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-conda-win-vs2017-py37-r40)|\n   |homebrew-r-autobrew|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-362-github-homebrew-r-autobrew)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-362-github-homebrew-r-autobrew)|\n   |test-r-devdocs|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-362-github-test-r-devdocs)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-362-github-test-r-devdocs)|\n   |test-r-install-local|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-362-github-test-r-install-local)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-362-github-test-r-install-local)|\n   |test-r-linux-as-cran|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-362-github-test-r-linux-as-cran)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-362-github-test-r-linux-as-cran)|\n   |test-r-minimal-build|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-test-r-minimal-build)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-test-r-minimal-build)|\n   |test-r-rhub-ubuntu-gcc-release|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-test-r-rhub-ubuntu-gcc-release)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-test-r-rhub-ubuntu-gcc-release)|\n   |test-r-rocker-r-base-latest|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-test-r-rocker-r-base-latest)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-test-r-rocker-r-base-latest)|\n   |test-r-rstudio-r-base-3.6-bionic|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-test-r-rstudio-r-base-3.6-bionic)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-test-r-rstudio-r-base-3.6-bionic)|\n   |test-r-rstudio-r-base-3.6-centos7-devtoolset-8|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-test-r-rstudio-r-base-3.6-centos7-devtoolset-8)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-test-r-rstudio-r-base-3.6-centos7-devtoolset-8)|\n   |test-r-rstudio-r-base-3.6-centos8|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-test-r-rstudio-r-base-3.6-centos8)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-test-r-rstudio-r-base-3.6-centos8)|\n   |test-r-rstudio-r-base-3.6-opensuse15|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-test-r-rstudio-r-base-3.6-opensuse15)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-test-r-rstudio-r-base-3.6-opensuse15)|\n   |test-r-rstudio-r-base-3.6-opensuse42|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-test-r-rstudio-r-base-3.6-opensuse42)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-test-r-rstudio-r-base-3.6-opensuse42)|\n   |test-r-version-compatibility|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-362-github-test-r-version-compatibility)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-362-github-test-r-version-compatibility)|\n   |test-r-versions|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-362-github-test-r-versions)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-362-github-test-r-versions)|\n   |test-r-without-arrow|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-test-r-without-arrow)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-test-r-without-arrow)|\n   |test-ubuntu-18.04-r-sanitizer|[![Azure](https://dev.azure.com/ursacomputing/crossbow/_apis/build/status/ursacomputing.crossbow?branchName=actions-362-azure-test-ubuntu-18.04-r-sanitizer)](https://dev.azure.com/ursacomputing/crossbow/_build/latest?definitionId=1&branchName=actions-362-azure-test-ubuntu-18.04-r-sanitizer)|\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-30T21:15:24.291+0000",
                    "updated": "2021-04-30T21:15:24.291+0000",
                    "started": "2021-04-30T21:15:24.290+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591716",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/592725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#discussion_r625721013\n\n\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -46,6 +50,41 @@ using internal::MakeConverter;\n \n namespace r {\n \n+class RTasks {\n+ public:\n+  using Task = std::function<Status()>;\n\nReview comment:\n       You could use `FnOnce` in place of `std::function`.  It's in `arrow/util/functional.h`.  You should mostly be able to drop it in except you need to move the task when you run it (you might have to use a move iterator for `delayed_serial_tasks`) or when you pass it down into `parallel_tasks`.  The main advantage is anything captured by the function will be released immediately after the function runs.  There has been some efforts in Arrow to be consistent with using `FnOnce` where possible (ARROW-10966, ARROW-11191).\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -46,6 +50,41 @@ using internal::MakeConverter;\n \n namespace r {\n \n+class RTasks {\n+ public:\n+  using Task = std::function<Status()>;\n+\n+  RTasks()\n+      : parallel_tasks(arrow::internal::TaskGroup::MakeThreaded(\n+            arrow::internal::GetCpuThreadPool())) {}\n+\n+  Status Finish() {\n\nReview comment:\n       To avoid nested deadlock this method (`Finish()`) must never be called from a thread pool thread.  This is because `Finish()` blocks on `parallel_tasks`.  You should be ok with your current usage but a comment somewhere might not hurt.\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -46,6 +50,41 @@ using internal::MakeConverter;\n \n namespace r {\n \n+class RTasks {\n+ public:\n+  using Task = std::function<Status()>;\n+\n+  RTasks()\n+      : parallel_tasks(arrow::internal::TaskGroup::MakeThreaded(\n+            arrow::internal::GetCpuThreadPool())) {}\n+\n+  Status Finish() {\n+    Status status = Status::OK();\n+\n+    // run the delayed tasks now\n+    for (auto& task : delayed_serial_tasks) {\n+      status &= task();\n+      if (!status.ok()) break;\n+    }\n+\n+    // then wait for the parallel tasks to finish\n+    status &= parallel_tasks->Finish();\n\nReview comment:\n       It would be nice if there were a good way to trigger the parallel_tasks to fail early if `status` was not ok here (and we broke out of the serial loop above).\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -168,46 +207,85 @@ bool is_NA<int64_t>(int64_t value) {\n }\n \n template <typename T>\n-struct RVectorVisitor {\n+class RVectorIterator {\n+ public:\n+  using value_type = T;\n+  RVectorIterator(SEXP x, int64_t start)\n+      : ptr_x_(reinterpret_cast<const T*>(DATAPTR_RO(x)) + start) {}\n+\n+  RVectorIterator& operator++() {\n+    ++ptr_x_;\n+    return *this;\n+  }\n+\n+  const T operator*() const { return *ptr_x_; }\n+\n+ private:\n+  const T* ptr_x_;\n+};\n+\n+template <typename T>\n+class RVectorIterator_ALTREP {\n+ public:\n+  using value_type = T;\n   using data_type =\n       typename std::conditional<std::is_same<T, int64_t>::value, double, T>::type;\n   using r_vector_type = cpp11::r_vector<data_type>;\n+  using r_vector_iterator = typename r_vector_type::const_iterator;\n \n-  template <typename AppendNull, typename AppendValue>\n-  static Status Visit(SEXP x, int64_t size, AppendNull&& append_null,\n-                      AppendValue&& append_value) {\n-    r_vector_type values(x);\n-    auto it = values.begin();\n-\n-    for (R_xlen_t i = 0; i < size; i++, ++it) {\n-      auto value = GetValue(*it);\n-\n-      if (is_NA<T>(value)) {\n-        RETURN_NOT_OK(append_null());\n-      } else {\n-        RETURN_NOT_OK(append_value(value));\n-      }\n-    }\n+  RVectorIterator_ALTREP(SEXP x, int64_t start)\n+      : vector_(x), it_(vector_.begin() + start) {}\n \n-    return Status::OK();\n+  RVectorIterator_ALTREP& operator++() {\n+    ++it_;\n+    return *this;\n   }\n \n+  const T operator*() const { return GetValue(*it_); }\n+\n   static T GetValue(data_type x) { return x; }\n+\n+ private:\n+  r_vector_type vector_;\n+  r_vector_iterator it_;\n };\n \n template <>\n-int64_t RVectorVisitor<int64_t>::GetValue(double x) {\n+int64_t RVectorIterator_ALTREP<int64_t>::GetValue(double x) {\n   int64_t value;\n   memcpy(&value, &x, sizeof(int64_t));\n   return value;\n }\n \n+template <typename Iterator, typename AppendNull, typename AppendValue>\n+Status VisitVector(Iterator it, int64_t n, AppendNull&& append_null,\n+                   AppendValue&& append_value) {\n+  for (R_xlen_t i = 0; i < n; i++, ++it) {\n\nReview comment:\n       Minor: You're pretty close to being able to use a range-based for loop here.  I'm not sure how difficult it would be to create an `end()` pointer and an iterator equality function.\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -168,46 +207,85 @@ bool is_NA<int64_t>(int64_t value) {\n }\n \n template <typename T>\n-struct RVectorVisitor {\n+class RVectorIterator {\n+ public:\n+  using value_type = T;\n+  RVectorIterator(SEXP x, int64_t start)\n+      : ptr_x_(reinterpret_cast<const T*>(DATAPTR_RO(x)) + start) {}\n+\n+  RVectorIterator& operator++() {\n+    ++ptr_x_;\n+    return *this;\n+  }\n+\n+  const T operator*() const { return *ptr_x_; }\n+\n+ private:\n+  const T* ptr_x_;\n+};\n+\n+template <typename T>\n+class RVectorIterator_ALTREP {\n+ public:\n+  using value_type = T;\n   using data_type =\n       typename std::conditional<std::is_same<T, int64_t>::value, double, T>::type;\n   using r_vector_type = cpp11::r_vector<data_type>;\n+  using r_vector_iterator = typename r_vector_type::const_iterator;\n \n-  template <typename AppendNull, typename AppendValue>\n-  static Status Visit(SEXP x, int64_t size, AppendNull&& append_null,\n-                      AppendValue&& append_value) {\n-    r_vector_type values(x);\n-    auto it = values.begin();\n-\n-    for (R_xlen_t i = 0; i < size; i++, ++it) {\n-      auto value = GetValue(*it);\n-\n-      if (is_NA<T>(value)) {\n-        RETURN_NOT_OK(append_null());\n-      } else {\n-        RETURN_NOT_OK(append_value(value));\n-      }\n-    }\n+  RVectorIterator_ALTREP(SEXP x, int64_t start)\n+      : vector_(x), it_(vector_.begin() + start) {}\n \n-    return Status::OK();\n+  RVectorIterator_ALTREP& operator++() {\n+    ++it_;\n+    return *this;\n   }\n \n+  const T operator*() const { return GetValue(*it_); }\n+\n   static T GetValue(data_type x) { return x; }\n+\n+ private:\n+  r_vector_type vector_;\n+  r_vector_iterator it_;\n };\n \n template <>\n-int64_t RVectorVisitor<int64_t>::GetValue(double x) {\n+int64_t RVectorIterator_ALTREP<int64_t>::GetValue(double x) {\n   int64_t value;\n   memcpy(&value, &x, sizeof(int64_t));\n   return value;\n }\n \n+template <typename Iterator, typename AppendNull, typename AppendValue>\n+Status VisitVector(Iterator it, int64_t n, AppendNull&& append_null,\n+                   AppendValue&& append_value) {\n+  for (R_xlen_t i = 0; i < n; i++, ++it) {\n+    auto value = *it;\n+\n+    if (is_NA<typename Iterator::value_type>(value)) {\n+      RETURN_NOT_OK(append_null());\n+    } else {\n+      RETURN_NOT_OK(append_value(value));\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n class RConverter : public Converter<SEXP, RConversionOptions> {\n  public:\n   virtual Status Append(SEXP) { return Status::NotImplemented(\"Append\"); }\n \n   virtual Status Extend(SEXP values, int64_t size) {\n-    return Status::NotImplemented(\"ExtendMasked\");\n+    return Status::NotImplemented(\"Extend\");\n+  }\n+\n+  // by default, just delay the ->Extend(), i.e. not run in parallel\n+  // implementations might redefine so that ->Extend() is run in parallel\n+  virtual void DelayedExtend(SEXP values, int64_t size, RTasks& tasks) {\n+    auto task = [this, values, size]() { return this->Extend(values, size); };\n\nReview comment:\n       The `this` capture is possibly worrisome.  It seems you should be ok since you block `Table__from_dots` until `Finish` is done but what if an error happens on line 1332 and `StopIfNotOk` bails out.  Is it possible it leaves (and allows `this` to go out of scope) before all the parallel tests have been cleared or flushed through?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-04T13:04:11.468+0000",
                    "updated": "2021-05-04T13:04:11.468+0000",
                    "started": "2021-05-04T13:04:11.468+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592725",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/593032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#issuecomment-833889120\n\n\n   Ok, I've added in a run from the commit that this branch is based off (16a0739 ) of to be a more close comparison, and things are murkier:\r\n   \r\n   * most of the naturalistic datasets are worse\r\n   * floats, integers, and strings also seem worse to varying degrees\r\n   * the dict type is still very improved\r\n   \r\n   [parallel-data-conversion.html.zip](https://github.com/apache/arrow/files/6437781/parallel-data-conversion.html.zip)\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-06T21:44:47.789+0000",
                    "updated": "2021-05-06T21:44:47.789+0000",
                    "started": "2021-05-06T21:44:47.789+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "593032",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/593051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#issuecomment-833924620\n\n\n   I'm a little skeptical, with the exception of the big change on the data.frames of factor columns, that this isn't just noise. I don't think there's been any other changes in the data.frame to Arrow code between latest master and where this branch is based. \r\n   \r\n   For the sake of argument, let's assume that \"a little better or a little worse\" is really just no change. I'm more surprised that there seems only to be that one improvement. The fannie mae dataset has 31 columns: with 8 cores, why is essentially the same performance as before/with 1 core?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-06T22:48:15.624+0000",
                    "updated": "2021-05-06T22:48:15.624+0000",
                    "started": "2021-05-06T22:48:15.624+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "593051",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/593066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#issuecomment-833942444\n\n\n   Absolutely, aside from factors, all of these differences are compatible with being pure noise / no real change. \r\n   \r\n   If we don't see any speed up with any types other than factors, I'm not totally surprised that the naturalistic data sets aren't seeing an improvement since fannie + nyctaxi when read in as data.frames don't result in any factors. And the chi traffic dataset which starts as a parquet only has two columns which are factors.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-06T23:25:52.359+0000",
                    "updated": "2021-05-06T23:25:52.359+0000",
                    "started": "2021-05-06T23:25:52.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "593066",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/593067",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#issuecomment-833942913\n\n\n   Also, I should have been more careful with my words and that \"worse\" should have really been \"not-convincingly-better\"\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-06T23:26:56.919+0000",
                    "updated": "2021-05-06T23:26:56.919+0000",
                    "started": "2021-05-06T23:26:56.919+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "593067",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/593264",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#discussion_r628178231\n\n\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -46,6 +50,41 @@ using internal::MakeConverter;\n \n namespace r {\n \n+class RTasks {\n+ public:\n+  using Task = std::function<Status()>;\n\nReview comment:\n       Thanks. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-07T12:39:52.127+0000",
                    "updated": "2021-05-07T12:39:52.127+0000",
                    "started": "2021-05-07T12:39:52.126+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "593264",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/593272",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#discussion_r628184405\n\n\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -46,6 +50,41 @@ using internal::MakeConverter;\n \n namespace r {\n \n+class RTasks {\n+ public:\n+  using Task = std::function<Status()>;\n+\n+  RTasks()\n+      : parallel_tasks(arrow::internal::TaskGroup::MakeThreaded(\n+            arrow::internal::GetCpuThreadPool())) {}\n+\n+  Status Finish() {\n\nReview comment:\n       I added a comment. I don't understand the implementation of the threaded task pool enough at this point to do better than this at this point. We'll see how things evolve as we perhaps use `RTasks` in other places. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-07T12:50:01.397+0000",
                    "updated": "2021-05-07T12:50:01.397+0000",
                    "started": "2021-05-07T12:50:01.396+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "593272",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/593274",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#discussion_r628187430\n\n\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -46,6 +50,41 @@ using internal::MakeConverter;\n \n namespace r {\n \n+class RTasks {\n+ public:\n+  using Task = std::function<Status()>;\n+\n+  RTasks()\n+      : parallel_tasks(arrow::internal::TaskGroup::MakeThreaded(\n+            arrow::internal::GetCpuThreadPool())) {}\n+\n+  Status Finish() {\n+    Status status = Status::OK();\n+\n+    // run the delayed tasks now\n+    for (auto& task : delayed_serial_tasks) {\n+      status &= task();\n+      if (!status.ok()) break;\n+    }\n+\n+    // then wait for the parallel tasks to finish\n+    status &= parallel_tasks->Finish();\n\nReview comment:\n       I'm not sure how to do this\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-07T12:54:42.510+0000",
                    "updated": "2021-05-07T12:54:42.510+0000",
                    "started": "2021-05-07T12:54:42.509+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "593274",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/593287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#discussion_r628202179\n\n\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -168,46 +207,85 @@ bool is_NA<int64_t>(int64_t value) {\n }\n \n template <typename T>\n-struct RVectorVisitor {\n+class RVectorIterator {\n+ public:\n+  using value_type = T;\n+  RVectorIterator(SEXP x, int64_t start)\n+      : ptr_x_(reinterpret_cast<const T*>(DATAPTR_RO(x)) + start) {}\n+\n+  RVectorIterator& operator++() {\n+    ++ptr_x_;\n+    return *this;\n+  }\n+\n+  const T operator*() const { return *ptr_x_; }\n+\n+ private:\n+  const T* ptr_x_;\n+};\n+\n+template <typename T>\n+class RVectorIterator_ALTREP {\n+ public:\n+  using value_type = T;\n   using data_type =\n       typename std::conditional<std::is_same<T, int64_t>::value, double, T>::type;\n   using r_vector_type = cpp11::r_vector<data_type>;\n+  using r_vector_iterator = typename r_vector_type::const_iterator;\n \n-  template <typename AppendNull, typename AppendValue>\n-  static Status Visit(SEXP x, int64_t size, AppendNull&& append_null,\n-                      AppendValue&& append_value) {\n-    r_vector_type values(x);\n-    auto it = values.begin();\n-\n-    for (R_xlen_t i = 0; i < size; i++, ++it) {\n-      auto value = GetValue(*it);\n-\n-      if (is_NA<T>(value)) {\n-        RETURN_NOT_OK(append_null());\n-      } else {\n-        RETURN_NOT_OK(append_value(value));\n-      }\n-    }\n+  RVectorIterator_ALTREP(SEXP x, int64_t start)\n+      : vector_(x), it_(vector_.begin() + start) {}\n \n-    return Status::OK();\n+  RVectorIterator_ALTREP& operator++() {\n+    ++it_;\n+    return *this;\n   }\n \n+  const T operator*() const { return GetValue(*it_); }\n+\n   static T GetValue(data_type x) { return x; }\n+\n+ private:\n+  r_vector_type vector_;\n+  r_vector_iterator it_;\n };\n \n template <>\n-int64_t RVectorVisitor<int64_t>::GetValue(double x) {\n+int64_t RVectorIterator_ALTREP<int64_t>::GetValue(double x) {\n   int64_t value;\n   memcpy(&value, &x, sizeof(int64_t));\n   return value;\n }\n \n+template <typename Iterator, typename AppendNull, typename AppendValue>\n+Status VisitVector(Iterator it, int64_t n, AppendNull&& append_null,\n+                   AppendValue&& append_value) {\n+  for (R_xlen_t i = 0; i < n; i++, ++it) {\n\nReview comment:\n       We might revisit when we tackle chunking, iterator equality and `end()` should be straightforward as the iterator classes we use are just wrappers around either pointers or cpp11 iterators. \r\n   \r\n   The only thing is that when we'll chunk, we might not iterate from start to end. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-07T13:17:14.087+0000",
                    "updated": "2021-05-07T13:17:14.087+0000",
                    "started": "2021-05-07T13:17:14.086+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "593287",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/593288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#discussion_r628202812\n\n\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -168,46 +207,85 @@ bool is_NA<int64_t>(int64_t value) {\n }\n \n template <typename T>\n-struct RVectorVisitor {\n+class RVectorIterator {\n+ public:\n+  using value_type = T;\n+  RVectorIterator(SEXP x, int64_t start)\n+      : ptr_x_(reinterpret_cast<const T*>(DATAPTR_RO(x)) + start) {}\n+\n+  RVectorIterator& operator++() {\n+    ++ptr_x_;\n+    return *this;\n+  }\n+\n+  const T operator*() const { return *ptr_x_; }\n+\n+ private:\n+  const T* ptr_x_;\n+};\n+\n+template <typename T>\n+class RVectorIterator_ALTREP {\n+ public:\n+  using value_type = T;\n   using data_type =\n       typename std::conditional<std::is_same<T, int64_t>::value, double, T>::type;\n   using r_vector_type = cpp11::r_vector<data_type>;\n+  using r_vector_iterator = typename r_vector_type::const_iterator;\n \n-  template <typename AppendNull, typename AppendValue>\n-  static Status Visit(SEXP x, int64_t size, AppendNull&& append_null,\n-                      AppendValue&& append_value) {\n-    r_vector_type values(x);\n-    auto it = values.begin();\n-\n-    for (R_xlen_t i = 0; i < size; i++, ++it) {\n-      auto value = GetValue(*it);\n-\n-      if (is_NA<T>(value)) {\n-        RETURN_NOT_OK(append_null());\n-      } else {\n-        RETURN_NOT_OK(append_value(value));\n-      }\n-    }\n+  RVectorIterator_ALTREP(SEXP x, int64_t start)\n+      : vector_(x), it_(vector_.begin() + start) {}\n \n-    return Status::OK();\n+  RVectorIterator_ALTREP& operator++() {\n+    ++it_;\n+    return *this;\n   }\n \n+  const T operator*() const { return GetValue(*it_); }\n+\n   static T GetValue(data_type x) { return x; }\n+\n+ private:\n+  r_vector_type vector_;\n+  r_vector_iterator it_;\n };\n \n template <>\n-int64_t RVectorVisitor<int64_t>::GetValue(double x) {\n+int64_t RVectorIterator_ALTREP<int64_t>::GetValue(double x) {\n   int64_t value;\n   memcpy(&value, &x, sizeof(int64_t));\n   return value;\n }\n \n+template <typename Iterator, typename AppendNull, typename AppendValue>\n+Status VisitVector(Iterator it, int64_t n, AppendNull&& append_null,\n+                   AppendValue&& append_value) {\n+  for (R_xlen_t i = 0; i < n; i++, ++it) {\n+    auto value = *it;\n+\n+    if (is_NA<typename Iterator::value_type>(value)) {\n+      RETURN_NOT_OK(append_null());\n+    } else {\n+      RETURN_NOT_OK(append_value(value));\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n class RConverter : public Converter<SEXP, RConversionOptions> {\n  public:\n   virtual Status Append(SEXP) { return Status::NotImplemented(\"Append\"); }\n \n   virtual Status Extend(SEXP values, int64_t size) {\n-    return Status::NotImplemented(\"ExtendMasked\");\n+    return Status::NotImplemented(\"Extend\");\n+  }\n+\n+  // by default, just delay the ->Extend(), i.e. not run in parallel\n+  // implementations might redefine so that ->Extend() is run in parallel\n+  virtual void DelayedExtend(SEXP values, int64_t size, RTasks& tasks) {\n+    auto task = [this, values, size]() { return this->Extend(values, size); };\n\nReview comment:\n       yes definitely, I thought I had dealt with all the stop cases, we can only do a `StopIfNotOk()` once all concurrency is finished\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-07T13:18:19.722+0000",
                    "updated": "2021-05-07T13:18:19.722+0000",
                    "started": "2021-05-07T13:18:19.722+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "593288",
                    "issueId": "13186986"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/worklog/593302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #9615:\nURL: https://github.com/apache/arrow/pull/9615#issuecomment-834401547\n\n\n   What is the schema of the fanni mae data set ? Does it have some missing values ? Maybe the code goes through this branch: \r\n   \r\n   ```r\r\n         if (arrow::r::can_reuse_memory(x, options.type)) {\r\n           columns[j] = std::make_shared<arrow::ChunkedArray>(\r\n               arrow::r::vec_to_arrow__reuse_memory(x));\r\n         }\r\n   ```\r\n   \r\n   which for now does not benefit from parallelization, and perhaps should, at least when there are some NA to deal with: \r\n   \r\n   ```cpp\r\n   // this is only used on some special cases when the arrow Array can just use the memory of\r\n   // the R object, via an RBuffer, hence be zero copy\r\n   template <int RTYPE, typename RVector, typename Type>\r\n   std::shared_ptr<Array> MakeSimpleArray(SEXP x) {\r\n     using value_type = typename arrow::TypeTraits<Type>::ArrayType::value_type;\r\n     RVector vec(x);\r\n     auto n = vec.size();\r\n     auto p_vec_start = reinterpret_cast<const value_type*>(DATAPTR_RO(vec));\r\n     auto p_vec_end = p_vec_start + n;\r\n     std::vector<std::shared_ptr<Buffer>> buffers{nullptr,\r\n                                                  std::make_shared<RBuffer<RVector>>(vec)};\r\n   \r\n     int null_count = 0;\r\n   \r\n     auto first_na = std::find_if(p_vec_start, p_vec_end, is_NA<value_type>);\r\n     if (first_na < p_vec_end) {\r\n       auto null_bitmap =\r\n           ValueOrStop(AllocateBuffer(BitUtil::BytesForBits(n), gc_memory_pool()));\r\n       internal::FirstTimeBitmapWriter bitmap_writer(null_bitmap->mutable_data(), 0, n);\r\n   \r\n       // first loop to clear all the bits before the first NA\r\n       auto j = std::distance(p_vec_start, first_na);\r\n       int i = 0;\r\n       for (; i < j; i++, bitmap_writer.Next()) {\r\n         bitmap_writer.Set();\r\n       }\r\n   \r\n       auto p_vec = first_na;\r\n       // then finish\r\n       for (; i < n; i++, bitmap_writer.Next(), ++p_vec) {\r\n         if (is_NA<value_type>(*p_vec)) {\r\n           bitmap_writer.Clear();\r\n           null_count++;\r\n         } else {\r\n           bitmap_writer.Set();\r\n         }\r\n       }\r\n   \r\n       bitmap_writer.Finish();\r\n       buffers[0] = std::move(null_bitmap);\r\n     }\r\n   \r\n     auto data = ArrayData::Make(std::make_shared<Type>(), LENGTH(x), std::move(buffers),\r\n                                 null_count, 0 /*offset*/);\r\n   \r\n     // return the right Array class\r\n     return std::make_shared<typename TypeTraits<Type>::ArrayType>(data);\r\n   }\r\n   ```\r\n   \r\n   The `find_if()` and the content of the `if (first_na < p_vec_end) {` branch is where this does some work, but all things are in place so that we could benefit from parallelization. \r\n   \r\n   Looking at this in the next few days. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-07T13:40:46.831+0000",
                    "updated": "2021-05-07T13:40:46.831+0000",
                    "started": "2021-05-07T13:40:46.830+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "593302",
                    "issueId": "13186986"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 31200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5f5d013e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5db24f0f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1de507f8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@52e0e97c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c94a7cb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3b68631[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36d99b78[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@63272fd6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a346686[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6d04e4ff[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@177ca07c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4dff74da[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 31200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jun 02 18:45:37 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-02T18:45:37.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3316/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-09-24T10:36:06.000+0000",
        "updated": "2021-06-02T18:47:19.000+0000",
        "timeoriginalestimate": null,
        "description": "This is the companion issue to ARROW-2968, like {{pyarrow.Table.from_pandas}}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 31200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Multi-threaded conversion from R data.frame to Arrow table / record batch",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/comment/16705342",
                    "id": "16705342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This would be nice to have for benchmarks",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-30T22:11:26.328+0000",
                    "updated": "2018-11-30T22:11:26.328+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/comment/17287418",
                    "id": "17287418",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~npr] do you know if this was ever implemented?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-02-19T23:26:59.817+0000",
                    "updated": "2021-02-19T23:26:59.817+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/comment/17287430",
                    "id": "17287430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Not yet but Romain and I have been eyeing this as an end goal of the conversion code refactoring he\u2019s been working on. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-02-19T23:57:10.540+0000",
                    "updated": "2021-02-19T23:57:10.540+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986/comment/17355914",
                    "id": "17355914",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 9615\n[https://github.com/apache/arrow/pull/9615]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-06-02T18:45:37.157+0000",
                    "updated": "2021-06-02T18:45:37.157+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yexb:",
        "customfield_12314139": null
    }
}