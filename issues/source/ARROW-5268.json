{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13231796",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796",
    "key": "ARROW-5268",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
            "name": "shiro615",
            "key": "shiro615",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
            },
            "displayName": "Yosuke Shiro",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
            "name": "shiro615",
            "key": "shiro615",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
            },
            "displayName": "Yosuke Shiro",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
            "name": "shiro615",
            "key": "shiro615",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
            },
            "displayName": "Yosuke Shiro",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5268/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/237886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-06T16:29:42.600+0000",
                    "updated": "2019-05-06T16:29:42.600+0000",
                    "started": "2019-05-06T16:29:42.599+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "237886",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/238144",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r281357471\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -1497,6 +1501,393 @@ garrow_csv_reader_read(GArrowCSVReader *reader,\n   }\n }\n \n+\n+typedef struct GArrowJSONReadOptionsPrivate_ {\n+  arrow::MemoryPool *pool;\n+  arrow::json::ReadOptions read_options;\n+  arrow::json::ParseOptions parse_options;\n+} GArrowJSONReadOptionsPrivate;\n+\n+enum {\n+  PROP_JSON_READER_POOL = 1,\n+  PROP_JSON_READER_USE_THREADS,\n+  PROP_JSON_READER_BLOCK_SIZE,\n+  PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES,\n+  PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowJSONReadOptions,\n+                           garrow_json_read_options,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object) \\\n+  static_cast<GArrowJSONReadOptionsPrivate *>(       \\\n+    garrow_json_read_options_get_instance_private(   \\\n+      GARROW_JSON_READ_OPTIONS(object)))\n+\n+static void\n+garrow_json_read_options_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_POOL:\n+    priv->pool = static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  case PROP_JSON_READER_USE_THREADS:\n+    priv->read_options.use_threads = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    priv->read_options.block_size = g_value_get_int(value);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    priv->parse_options.newlines_in_values = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    priv->parse_options.unexpected_field_behavior =\n+      static_cast<arrow::json::UnexpectedFieldBehavior>(g_value_get_enum(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_get_property(GObject *object,\n+                                      guint prop_id,\n+                                      GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_USE_THREADS:\n+    g_value_set_boolean(value, priv->read_options.use_threads);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    g_value_set_int(value, priv->read_options.block_size);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    g_value_set_boolean(value, priv->parse_options.newlines_in_values);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    g_value_set_enum(value, static_cast<char>(priv->parse_options.unexpected_field_behavior));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_init(GArrowJSONReadOptions *object)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+  priv->pool = arrow::default_memory_pool();\n+  priv->read_options = arrow::json::ReadOptions::Defaults();\n+  priv->parse_options = arrow::json::ParseOptions::Defaults();\n+}\n+\n+static void\n+garrow_json_read_options_class_init(GArrowJSONReadOptionsClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_json_read_options_set_property;\n+  gobject_class->get_property = garrow_json_read_options_get_property;\n+\n+  spec = g_param_spec_pointer(\"pool\",\n+                              \"Pool\",\n+                              \"The raw arrow::MemoryPool *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_POOL,\n+                                  spec);\n+\n+  auto read_options = arrow::json::ReadOptions::Defaults();\n+\n+  /**\n+   * GArrowJSONReadOptions:use-threads:\n+   *\n+   * Whether to use the global CPU thread pool.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_boolean(\"use-threads\",\n+                              \"Use threads\",\n+                              \"Whether to use the global CPU thread pool\",\n+                              read_options.use_threads,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_USE_THREADS,\n+                                  spec);\n+\n+  /**\n+   * GArrowJSONReadOptions:block-size:\n+   *\n+   * Block size we request from the IO layer; also determines the size\n+   * of chunks when #GArrowJSONReadOptions:use-threads is %TRUE.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_int(\"block-size\",\n+                          \"Block size\",\n+                          \"Block size we request from the IO layer; \"\n+                          \"also determines the size of chunks \"\n+                          \"when ::use-threads is %TRUE\",\n \n Review comment:\n   Can we use `%CONSTANT` syntax in property description?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-06T21:15:40.566+0000",
                    "updated": "2019-05-06T21:15:40.566+0000",
                    "started": "2019-05-06T21:15:40.565+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "238144",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/238145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r281359223\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -1497,6 +1501,393 @@ garrow_csv_reader_read(GArrowCSVReader *reader,\n   }\n }\n \n+\n+typedef struct GArrowJSONReadOptionsPrivate_ {\n+  arrow::MemoryPool *pool;\n+  arrow::json::ReadOptions read_options;\n+  arrow::json::ParseOptions parse_options;\n+} GArrowJSONReadOptionsPrivate;\n+\n+enum {\n+  PROP_JSON_READER_POOL = 1,\n \n Review comment:\n   We can remove this because we set `priv->pool` in `garrow_json_read_options_init()`.\r\n   Could you also remove `PROP_POOL` for `GArrowCSVReadOptions`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-06T21:15:40.594+0000",
                    "updated": "2019-05-06T21:15:40.594+0000",
                    "started": "2019-05-06T21:15:40.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "238145",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/238146",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r281358203\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -1497,6 +1501,393 @@ garrow_csv_reader_read(GArrowCSVReader *reader,\n   }\n }\n \n+\n+typedef struct GArrowJSONReadOptionsPrivate_ {\n+  arrow::MemoryPool *pool;\n+  arrow::json::ReadOptions read_options;\n+  arrow::json::ParseOptions parse_options;\n+} GArrowJSONReadOptionsPrivate;\n+\n+enum {\n+  PROP_JSON_READER_POOL = 1,\n+  PROP_JSON_READER_USE_THREADS,\n+  PROP_JSON_READER_BLOCK_SIZE,\n+  PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES,\n+  PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowJSONReadOptions,\n+                           garrow_json_read_options,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object) \\\n+  static_cast<GArrowJSONReadOptionsPrivate *>(       \\\n+    garrow_json_read_options_get_instance_private(   \\\n+      GARROW_JSON_READ_OPTIONS(object)))\n+\n+static void\n+garrow_json_read_options_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_POOL:\n+    priv->pool = static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  case PROP_JSON_READER_USE_THREADS:\n+    priv->read_options.use_threads = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    priv->read_options.block_size = g_value_get_int(value);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    priv->parse_options.newlines_in_values = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    priv->parse_options.unexpected_field_behavior =\n+      static_cast<arrow::json::UnexpectedFieldBehavior>(g_value_get_enum(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_get_property(GObject *object,\n+                                      guint prop_id,\n+                                      GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_USE_THREADS:\n+    g_value_set_boolean(value, priv->read_options.use_threads);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    g_value_set_int(value, priv->read_options.block_size);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    g_value_set_boolean(value, priv->parse_options.newlines_in_values);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    g_value_set_enum(value, static_cast<char>(priv->parse_options.unexpected_field_behavior));\n \n Review comment:\n   Could you use `gint` instead of `char`?\r\n   Because `g_value_set_enum()` uses `gint`: https://developer.gnome.org/gobject/stable/gobject-Standard-Parameter-and-Value-Types.html#g-value-set-enum\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-06T21:15:40.627+0000",
                    "updated": "2019-05-06T21:15:40.627+0000",
                    "started": "2019-05-06T21:15:40.626+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "238146",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/238147",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r281362624\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.hpp\n ##########\n @@ -21,6 +21,7 @@\n \n #include <arrow/api.h>\n #include <arrow/csv/api.h>\n+#include <arrow/json/api.h>\n \n Review comment:\n   Could you put this after `arrow/ipc/...`?\r\n   We list `#include` in alphabetically order.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-06T21:15:40.632+0000",
                    "updated": "2019-05-06T21:15:40.632+0000",
                    "started": "2019-05-06T21:15:40.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "238147",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/238148",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r281359882\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -1497,6 +1501,393 @@ garrow_csv_reader_read(GArrowCSVReader *reader,\n   }\n }\n \n+\n+typedef struct GArrowJSONReadOptionsPrivate_ {\n+  arrow::MemoryPool *pool;\n+  arrow::json::ReadOptions read_options;\n+  arrow::json::ParseOptions parse_options;\n+} GArrowJSONReadOptionsPrivate;\n+\n+enum {\n+  PROP_JSON_READER_POOL = 1,\n+  PROP_JSON_READER_USE_THREADS,\n+  PROP_JSON_READER_BLOCK_SIZE,\n+  PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES,\n+  PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowJSONReadOptions,\n+                           garrow_json_read_options,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object) \\\n+  static_cast<GArrowJSONReadOptionsPrivate *>(       \\\n+    garrow_json_read_options_get_instance_private(   \\\n+      GARROW_JSON_READ_OPTIONS(object)))\n+\n+static void\n+garrow_json_read_options_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_POOL:\n+    priv->pool = static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  case PROP_JSON_READER_USE_THREADS:\n+    priv->read_options.use_threads = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    priv->read_options.block_size = g_value_get_int(value);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    priv->parse_options.newlines_in_values = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    priv->parse_options.unexpected_field_behavior =\n+      static_cast<arrow::json::UnexpectedFieldBehavior>(g_value_get_enum(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_get_property(GObject *object,\n+                                      guint prop_id,\n+                                      GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_USE_THREADS:\n+    g_value_set_boolean(value, priv->read_options.use_threads);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    g_value_set_int(value, priv->read_options.block_size);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    g_value_set_boolean(value, priv->parse_options.newlines_in_values);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    g_value_set_enum(value, static_cast<char>(priv->parse_options.unexpected_field_behavior));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_init(GArrowJSONReadOptions *object)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+  priv->pool = arrow::default_memory_pool();\n+  priv->read_options = arrow::json::ReadOptions::Defaults();\n+  priv->parse_options = arrow::json::ParseOptions::Defaults();\n+}\n+\n+static void\n+garrow_json_read_options_class_init(GArrowJSONReadOptionsClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_json_read_options_set_property;\n+  gobject_class->get_property = garrow_json_read_options_get_property;\n+\n+  spec = g_param_spec_pointer(\"pool\",\n+                              \"Pool\",\n+                              \"The raw arrow::MemoryPool *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_POOL,\n+                                  spec);\n+\n+  auto read_options = arrow::json::ReadOptions::Defaults();\n+\n+  /**\n+   * GArrowJSONReadOptions:use-threads:\n+   *\n+   * Whether to use the global CPU thread pool.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_boolean(\"use-threads\",\n+                              \"Use threads\",\n+                              \"Whether to use the global CPU thread pool\",\n+                              read_options.use_threads,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_USE_THREADS,\n+                                  spec);\n+\n+  /**\n+   * GArrowJSONReadOptions:block-size:\n+   *\n+   * Block size we request from the IO layer; also determines the size\n+   * of chunks when #GArrowJSONReadOptions:use-threads is %TRUE.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_int(\"block-size\",\n+                          \"Block size\",\n+                          \"Block size we request from the IO layer; \"\n+                          \"also determines the size of chunks \"\n+                          \"when ::use-threads is %TRUE\",\n+                          0,\n+                          G_MAXINT,\n+                          read_options.block_size,\n+                          static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_BLOCK_SIZE,\n+                                  spec);\n+\n+\n+  auto parse_options = arrow::json::ParseOptions::Defaults();\n+\n+  /**\n+   * GArrowJSONReadOptions:allow-newlines-in-values:\n+   *\n+   * Whether objects may be printed across multiple lines (for example pretty printed).\n+   * if %FALSE, input must end with an empty line.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_boolean(\"allow-newlines-in-values\",\n+                              \"Allow newlines in values\",\n+                              \"Whether objects may be printed across multiple lines \"\n+                              \"(for example pretty printed). \"\n+                              \"if %FALSE, input must end with an empty line.\",\n+                              parse_options.newlines_in_values,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES,\n+                                  spec);\n+\n+  /**\n+   * GArrowJSONReadOptions:unexpected-field-behavior:\n+   *\n+   * How to parse handle fields outside the explicit schema.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_enum(\"unexpected-field-behavior\",\n+                           \"UnexpectedFieldBehavior\",\n+                           \"How to parse handle fields outside the explicit schema.\",\n+                           GARROW_TYPE_JSON_READ_UNEXPECTED_FIELD_BEHAVIOR,\n+                           GARROW_JSON_READ_INFERTYPE,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR,\n+                                  spec);\n+}\n+\n+/**\n+ * garrow_json_read_options_new:\n+ *\n+ * Returns: A newly created #GArrowJSONReadOptions.\n+ *\n+ * Since: 0.14.0\n+ */\n+GArrowJSONReadOptions *\n+garrow_json_read_options_new(void)\n+{\n+  auto json_read_options = g_object_new(GARROW_TYPE_JSON_READ_OPTIONS,\n+                                        \"pool\", arrow::default_memory_pool(),\n+                                        NULL);\n+  return GARROW_JSON_READ_OPTIONS(json_read_options);\n+}\n+\n+/**\n+ * garrow_json_read_options_set_explicit_schema:\n+ * @options: A #GArrowJSONReadOptions.\n+ * @schema: The optional explicit #GArrowSchema.\n+ *\n+ * Set optional explicit schema for passing custom conversion rules.\n+ *\n+ * Since: 0.14.0\n+ */\n+void\n+garrow_json_read_options_set_explicit_schema(GArrowJSONReadOptions *options,\n+                                             GArrowSchema *schema)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(options);\n+  auto arrow_schema = garrow_schema_get_raw(schema);\n+  priv->parse_options.explicit_schema = arrow_schema;\n+}\n \n Review comment:\n   Could you implement this as a property?\r\n   We can use `g_param_spec_object()`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-06T21:15:40.710+0000",
                    "updated": "2019-05-06T21:15:40.710+0000",
                    "started": "2019-05-06T21:15:40.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "238148",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/238149",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r281360729\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -1497,6 +1501,393 @@ garrow_csv_reader_read(GArrowCSVReader *reader,\n   }\n }\n \n+\n+typedef struct GArrowJSONReadOptionsPrivate_ {\n+  arrow::MemoryPool *pool;\n+  arrow::json::ReadOptions read_options;\n+  arrow::json::ParseOptions parse_options;\n+} GArrowJSONReadOptionsPrivate;\n+\n+enum {\n+  PROP_JSON_READER_POOL = 1,\n+  PROP_JSON_READER_USE_THREADS,\n+  PROP_JSON_READER_BLOCK_SIZE,\n+  PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES,\n+  PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowJSONReadOptions,\n+                           garrow_json_read_options,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object) \\\n+  static_cast<GArrowJSONReadOptionsPrivate *>(       \\\n+    garrow_json_read_options_get_instance_private(   \\\n+      GARROW_JSON_READ_OPTIONS(object)))\n+\n+static void\n+garrow_json_read_options_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_POOL:\n+    priv->pool = static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  case PROP_JSON_READER_USE_THREADS:\n+    priv->read_options.use_threads = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    priv->read_options.block_size = g_value_get_int(value);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    priv->parse_options.newlines_in_values = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    priv->parse_options.unexpected_field_behavior =\n+      static_cast<arrow::json::UnexpectedFieldBehavior>(g_value_get_enum(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_get_property(GObject *object,\n+                                      guint prop_id,\n+                                      GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_USE_THREADS:\n+    g_value_set_boolean(value, priv->read_options.use_threads);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    g_value_set_int(value, priv->read_options.block_size);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    g_value_set_boolean(value, priv->parse_options.newlines_in_values);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    g_value_set_enum(value, static_cast<char>(priv->parse_options.unexpected_field_behavior));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_init(GArrowJSONReadOptions *object)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+  priv->pool = arrow::default_memory_pool();\n+  priv->read_options = arrow::json::ReadOptions::Defaults();\n+  priv->parse_options = arrow::json::ParseOptions::Defaults();\n+}\n+\n+static void\n+garrow_json_read_options_class_init(GArrowJSONReadOptionsClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_json_read_options_set_property;\n+  gobject_class->get_property = garrow_json_read_options_get_property;\n+\n+  spec = g_param_spec_pointer(\"pool\",\n+                              \"Pool\",\n+                              \"The raw arrow::MemoryPool *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_POOL,\n+                                  spec);\n+\n+  auto read_options = arrow::json::ReadOptions::Defaults();\n+\n+  /**\n+   * GArrowJSONReadOptions:use-threads:\n+   *\n+   * Whether to use the global CPU thread pool.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_boolean(\"use-threads\",\n+                              \"Use threads\",\n+                              \"Whether to use the global CPU thread pool\",\n+                              read_options.use_threads,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_USE_THREADS,\n+                                  spec);\n+\n+  /**\n+   * GArrowJSONReadOptions:block-size:\n+   *\n+   * Block size we request from the IO layer; also determines the size\n+   * of chunks when #GArrowJSONReadOptions:use-threads is %TRUE.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_int(\"block-size\",\n+                          \"Block size\",\n+                          \"Block size we request from the IO layer; \"\n+                          \"also determines the size of chunks \"\n+                          \"when ::use-threads is %TRUE\",\n+                          0,\n+                          G_MAXINT,\n+                          read_options.block_size,\n+                          static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_BLOCK_SIZE,\n+                                  spec);\n+\n+\n+  auto parse_options = arrow::json::ParseOptions::Defaults();\n+\n+  /**\n+   * GArrowJSONReadOptions:allow-newlines-in-values:\n+   *\n+   * Whether objects may be printed across multiple lines (for example pretty printed).\n+   * if %FALSE, input must end with an empty line.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_boolean(\"allow-newlines-in-values\",\n+                              \"Allow newlines in values\",\n+                              \"Whether objects may be printed across multiple lines \"\n+                              \"(for example pretty printed). \"\n+                              \"if %FALSE, input must end with an empty line.\",\n+                              parse_options.newlines_in_values,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES,\n+                                  spec);\n+\n+  /**\n+   * GArrowJSONReadOptions:unexpected-field-behavior:\n+   *\n+   * How to parse handle fields outside the explicit schema.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_enum(\"unexpected-field-behavior\",\n+                           \"UnexpectedFieldBehavior\",\n+                           \"How to parse handle fields outside the explicit schema.\",\n+                           GARROW_TYPE_JSON_READ_UNEXPECTED_FIELD_BEHAVIOR,\n+                           GARROW_JSON_READ_INFERTYPE,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR,\n+                                  spec);\n+}\n+\n+/**\n+ * garrow_json_read_options_new:\n+ *\n+ * Returns: A newly created #GArrowJSONReadOptions.\n+ *\n+ * Since: 0.14.0\n+ */\n+GArrowJSONReadOptions *\n+garrow_json_read_options_new(void)\n+{\n+  auto json_read_options = g_object_new(GARROW_TYPE_JSON_READ_OPTIONS,\n+                                        \"pool\", arrow::default_memory_pool(),\n+                                        NULL);\n+  return GARROW_JSON_READ_OPTIONS(json_read_options);\n+}\n+\n+/**\n+ * garrow_json_read_options_set_explicit_schema:\n+ * @options: A #GArrowJSONReadOptions.\n+ * @schema: The optional explicit #GArrowSchema.\n+ *\n+ * Set optional explicit schema for passing custom conversion rules.\n+ *\n+ * Since: 0.14.0\n+ */\n+void\n+garrow_json_read_options_set_explicit_schema(GArrowJSONReadOptions *options,\n+                                             GArrowSchema *schema)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(options);\n+  auto arrow_schema = garrow_schema_get_raw(schema);\n+  priv->parse_options.explicit_schema = arrow_schema;\n+}\n \n Review comment:\n   We can use `schema` as property name. We can omit `explicit-` because we aren't using `explicit-` for `GArrowCSVReadOptions`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-06T21:15:40.731+0000",
                    "updated": "2019-05-06T21:15:40.731+0000",
                    "started": "2019-05-06T21:15:40.731+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "238149",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/238150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r281361603\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.h\n ##########\n @@ -283,4 +283,56 @@ GArrowTable *garrow_csv_reader_read(GArrowCSVReader *reader,\n                                     GError **error);\n \n \n+/**\n+ * GArrowJSONReadUnexpectedFieldBehavior:\n+ * @GARROW_JSON_READ_IGNORE: Ignore other fields.\n+ * @GARROW_JSON_READ_ERROR: Return error.\n+ * @GARROW_JSON_READ_INFERTYPE: Infer a type.\n+ *\n+ * They are corresponding to `arrow::json::UnexpectedFieldBehavior` values.\n+ */\n+typedef enum {\n+  GARROW_JSON_READ_IGNORE,\n+  GARROW_JSON_READ_ERROR,\n+  GARROW_JSON_READ_INFERTYPE,\n \n Review comment:\n   Could you add `_` between `INFER` and `TYPE`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-06T21:15:40.932+0000",
                    "updated": "2019-05-06T21:15:40.932+0000",
                    "started": "2019-05-06T21:15:40.931+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "238150",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/238151",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r281365608\n \n \n\n ##########\n File path: c_glib/test/test-json-reader.rb\n ##########\n @@ -0,0 +1,91 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestJSONReader < Test::Unit::TestCase\n+  include Helper::Buildable\n+  include Helper::Omittable\n+\n+  sub_test_case(\"#read\") do\n+    def open_input(json)\n+      buffer = Arrow::Buffer.new(json)\n+      Arrow::BufferInputStream.new(buffer)\n+    end\n+\n+    def test_default\n+      require_gi(1, 42, 0)\n+      table = Arrow::JSONReader.new(open_input(<<-JSON))\n+{ \"message\": \"Hello\", \"count\": 3.5, \"valid\": false }\n+{ \"message\": \"World\", \"count\": 3.25, \"valid\": true }\n+      JSON\n+      columns = {\n+        \"message\" => build_string_array([\"Hello\", \"World\"]),\n+        \"count\" => build_double_array([3.5, 3.25]),\n+        \"valid\" => build_boolean_array([false, true]),\n+      }\n+      assert_equal(build_table(columns),\n+                   table.read)\n+    end\n+\n+    sub_test_case(\"options\") do\n \n Review comment:\n   `unexpected-field-behavior` is better than `options` because the tests in this sub test case only tests `unexpected-field-behavior` option.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-06T21:15:41.078+0000",
                    "updated": "2019-05-06T21:15:41.078+0000",
                    "started": "2019-05-06T21:15:41.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "238151",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/239983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on issue #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#issuecomment-491105921\n \n \n   Thanks for your comments.\r\n   I'll try to address them.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-09T23:49:20.987+0000",
                    "updated": "2019-05-09T23:49:20.987+0000",
                    "started": "2019-05-09T23:49:20.986+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "239983",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/240637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r283105769\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -1497,6 +1501,393 @@ garrow_csv_reader_read(GArrowCSVReader *reader,\n   }\n }\n \n+\n+typedef struct GArrowJSONReadOptionsPrivate_ {\n+  arrow::MemoryPool *pool;\n+  arrow::json::ReadOptions read_options;\n+  arrow::json::ParseOptions parse_options;\n+} GArrowJSONReadOptionsPrivate;\n+\n+enum {\n+  PROP_JSON_READER_POOL = 1,\n+  PROP_JSON_READER_USE_THREADS,\n+  PROP_JSON_READER_BLOCK_SIZE,\n+  PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES,\n+  PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowJSONReadOptions,\n+                           garrow_json_read_options,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object) \\\n+  static_cast<GArrowJSONReadOptionsPrivate *>(       \\\n+    garrow_json_read_options_get_instance_private(   \\\n+      GARROW_JSON_READ_OPTIONS(object)))\n+\n+static void\n+garrow_json_read_options_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_POOL:\n+    priv->pool = static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  case PROP_JSON_READER_USE_THREADS:\n+    priv->read_options.use_threads = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    priv->read_options.block_size = g_value_get_int(value);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    priv->parse_options.newlines_in_values = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    priv->parse_options.unexpected_field_behavior =\n+      static_cast<arrow::json::UnexpectedFieldBehavior>(g_value_get_enum(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_get_property(GObject *object,\n+                                      guint prop_id,\n+                                      GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_USE_THREADS:\n+    g_value_set_boolean(value, priv->read_options.use_threads);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    g_value_set_int(value, priv->read_options.block_size);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    g_value_set_boolean(value, priv->parse_options.newlines_in_values);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    g_value_set_enum(value, static_cast<char>(priv->parse_options.unexpected_field_behavior));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_init(GArrowJSONReadOptions *object)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+  priv->pool = arrow::default_memory_pool();\n+  priv->read_options = arrow::json::ReadOptions::Defaults();\n+  priv->parse_options = arrow::json::ParseOptions::Defaults();\n+}\n+\n+static void\n+garrow_json_read_options_class_init(GArrowJSONReadOptionsClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_json_read_options_set_property;\n+  gobject_class->get_property = garrow_json_read_options_get_property;\n+\n+  spec = g_param_spec_pointer(\"pool\",\n+                              \"Pool\",\n+                              \"The raw arrow::MemoryPool *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_POOL,\n+                                  spec);\n+\n+  auto read_options = arrow::json::ReadOptions::Defaults();\n+\n+  /**\n+   * GArrowJSONReadOptions:use-threads:\n+   *\n+   * Whether to use the global CPU thread pool.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_boolean(\"use-threads\",\n+                              \"Use threads\",\n+                              \"Whether to use the global CPU thread pool\",\n+                              read_options.use_threads,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_USE_THREADS,\n+                                  spec);\n+\n+  /**\n+   * GArrowJSONReadOptions:block-size:\n+   *\n+   * Block size we request from the IO layer; also determines the size\n+   * of chunks when #GArrowJSONReadOptions:use-threads is %TRUE.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_int(\"block-size\",\n+                          \"Block size\",\n+                          \"Block size we request from the IO layer; \"\n+                          \"also determines the size of chunks \"\n+                          \"when ::use-threads is %TRUE\",\n \n Review comment:\n   You mean we can use `%use-threads`  instead of `::use-threads`?\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-11T17:54:21.072+0000",
                    "updated": "2019-05-11T17:54:21.072+0000",
                    "started": "2019-05-11T17:54:21.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240637",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/240638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r283105773\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -1497,6 +1501,393 @@ garrow_csv_reader_read(GArrowCSVReader *reader,\n   }\n }\n \n+\n+typedef struct GArrowJSONReadOptionsPrivate_ {\n+  arrow::MemoryPool *pool;\n+  arrow::json::ReadOptions read_options;\n+  arrow::json::ParseOptions parse_options;\n+} GArrowJSONReadOptionsPrivate;\n+\n+enum {\n+  PROP_JSON_READER_POOL = 1,\n+  PROP_JSON_READER_USE_THREADS,\n+  PROP_JSON_READER_BLOCK_SIZE,\n+  PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES,\n+  PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowJSONReadOptions,\n+                           garrow_json_read_options,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object) \\\n+  static_cast<GArrowJSONReadOptionsPrivate *>(       \\\n+    garrow_json_read_options_get_instance_private(   \\\n+      GARROW_JSON_READ_OPTIONS(object)))\n+\n+static void\n+garrow_json_read_options_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_POOL:\n+    priv->pool = static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  case PROP_JSON_READER_USE_THREADS:\n+    priv->read_options.use_threads = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    priv->read_options.block_size = g_value_get_int(value);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    priv->parse_options.newlines_in_values = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    priv->parse_options.unexpected_field_behavior =\n+      static_cast<arrow::json::UnexpectedFieldBehavior>(g_value_get_enum(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_get_property(GObject *object,\n+                                      guint prop_id,\n+                                      GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_USE_THREADS:\n+    g_value_set_boolean(value, priv->read_options.use_threads);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    g_value_set_int(value, priv->read_options.block_size);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    g_value_set_boolean(value, priv->parse_options.newlines_in_values);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    g_value_set_enum(value, static_cast<char>(priv->parse_options.unexpected_field_behavior));\n \n Review comment:\n   I've fixed it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-11T17:54:22.218+0000",
                    "updated": "2019-05-11T17:54:22.218+0000",
                    "started": "2019-05-11T17:54:22.217+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240638",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/240639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r283105783\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -1497,6 +1501,393 @@ garrow_csv_reader_read(GArrowCSVReader *reader,\n   }\n }\n \n+\n+typedef struct GArrowJSONReadOptionsPrivate_ {\n+  arrow::MemoryPool *pool;\n+  arrow::json::ReadOptions read_options;\n+  arrow::json::ParseOptions parse_options;\n+} GArrowJSONReadOptionsPrivate;\n+\n+enum {\n+  PROP_JSON_READER_POOL = 1,\n \n Review comment:\n   Yes. I've removed them.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-11T17:54:42.647+0000",
                    "updated": "2019-05-11T17:54:42.647+0000",
                    "started": "2019-05-11T17:54:42.646+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240639",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/240640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r283105789\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -1497,6 +1501,393 @@ garrow_csv_reader_read(GArrowCSVReader *reader,\n   }\n }\n \n+\n+typedef struct GArrowJSONReadOptionsPrivate_ {\n+  arrow::MemoryPool *pool;\n+  arrow::json::ReadOptions read_options;\n+  arrow::json::ParseOptions parse_options;\n+} GArrowJSONReadOptionsPrivate;\n+\n+enum {\n+  PROP_JSON_READER_POOL = 1,\n+  PROP_JSON_READER_USE_THREADS,\n+  PROP_JSON_READER_BLOCK_SIZE,\n+  PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES,\n+  PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowJSONReadOptions,\n+                           garrow_json_read_options,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object) \\\n+  static_cast<GArrowJSONReadOptionsPrivate *>(       \\\n+    garrow_json_read_options_get_instance_private(   \\\n+      GARROW_JSON_READ_OPTIONS(object)))\n+\n+static void\n+garrow_json_read_options_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_POOL:\n+    priv->pool = static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  case PROP_JSON_READER_USE_THREADS:\n+    priv->read_options.use_threads = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    priv->read_options.block_size = g_value_get_int(value);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    priv->parse_options.newlines_in_values = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    priv->parse_options.unexpected_field_behavior =\n+      static_cast<arrow::json::UnexpectedFieldBehavior>(g_value_get_enum(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_get_property(GObject *object,\n+                                      guint prop_id,\n+                                      GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_USE_THREADS:\n+    g_value_set_boolean(value, priv->read_options.use_threads);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    g_value_set_int(value, priv->read_options.block_size);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    g_value_set_boolean(value, priv->parse_options.newlines_in_values);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    g_value_set_enum(value, static_cast<char>(priv->parse_options.unexpected_field_behavior));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_init(GArrowJSONReadOptions *object)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+  priv->pool = arrow::default_memory_pool();\n+  priv->read_options = arrow::json::ReadOptions::Defaults();\n+  priv->parse_options = arrow::json::ParseOptions::Defaults();\n+}\n+\n+static void\n+garrow_json_read_options_class_init(GArrowJSONReadOptionsClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_json_read_options_set_property;\n+  gobject_class->get_property = garrow_json_read_options_get_property;\n+\n+  spec = g_param_spec_pointer(\"pool\",\n+                              \"Pool\",\n+                              \"The raw arrow::MemoryPool *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_POOL,\n+                                  spec);\n+\n+  auto read_options = arrow::json::ReadOptions::Defaults();\n+\n+  /**\n+   * GArrowJSONReadOptions:use-threads:\n+   *\n+   * Whether to use the global CPU thread pool.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_boolean(\"use-threads\",\n+                              \"Use threads\",\n+                              \"Whether to use the global CPU thread pool\",\n+                              read_options.use_threads,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_USE_THREADS,\n+                                  spec);\n+\n+  /**\n+   * GArrowJSONReadOptions:block-size:\n+   *\n+   * Block size we request from the IO layer; also determines the size\n+   * of chunks when #GArrowJSONReadOptions:use-threads is %TRUE.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_int(\"block-size\",\n+                          \"Block size\",\n+                          \"Block size we request from the IO layer; \"\n+                          \"also determines the size of chunks \"\n+                          \"when ::use-threads is %TRUE\",\n+                          0,\n+                          G_MAXINT,\n+                          read_options.block_size,\n+                          static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_BLOCK_SIZE,\n+                                  spec);\n+\n+\n+  auto parse_options = arrow::json::ParseOptions::Defaults();\n+\n+  /**\n+   * GArrowJSONReadOptions:allow-newlines-in-values:\n+   *\n+   * Whether objects may be printed across multiple lines (for example pretty printed).\n+   * if %FALSE, input must end with an empty line.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_boolean(\"allow-newlines-in-values\",\n+                              \"Allow newlines in values\",\n+                              \"Whether objects may be printed across multiple lines \"\n+                              \"(for example pretty printed). \"\n+                              \"if %FALSE, input must end with an empty line.\",\n+                              parse_options.newlines_in_values,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES,\n+                                  spec);\n+\n+  /**\n+   * GArrowJSONReadOptions:unexpected-field-behavior:\n+   *\n+   * How to parse handle fields outside the explicit schema.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_enum(\"unexpected-field-behavior\",\n+                           \"UnexpectedFieldBehavior\",\n+                           \"How to parse handle fields outside the explicit schema.\",\n+                           GARROW_TYPE_JSON_READ_UNEXPECTED_FIELD_BEHAVIOR,\n+                           GARROW_JSON_READ_INFERTYPE,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR,\n+                                  spec);\n+}\n+\n+/**\n+ * garrow_json_read_options_new:\n+ *\n+ * Returns: A newly created #GArrowJSONReadOptions.\n+ *\n+ * Since: 0.14.0\n+ */\n+GArrowJSONReadOptions *\n+garrow_json_read_options_new(void)\n+{\n+  auto json_read_options = g_object_new(GARROW_TYPE_JSON_READ_OPTIONS,\n+                                        \"pool\", arrow::default_memory_pool(),\n+                                        NULL);\n+  return GARROW_JSON_READ_OPTIONS(json_read_options);\n+}\n+\n+/**\n+ * garrow_json_read_options_set_explicit_schema:\n+ * @options: A #GArrowJSONReadOptions.\n+ * @schema: The optional explicit #GArrowSchema.\n+ *\n+ * Set optional explicit schema for passing custom conversion rules.\n+ *\n+ * Since: 0.14.0\n+ */\n+void\n+garrow_json_read_options_set_explicit_schema(GArrowJSONReadOptions *options,\n+                                             GArrowSchema *schema)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(options);\n+  auto arrow_schema = garrow_schema_get_raw(schema);\n+  priv->parse_options.explicit_schema = arrow_schema;\n+}\n \n Review comment:\n   Yes. I've fixed them.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-11T17:54:55.695+0000",
                    "updated": "2019-05-11T17:54:55.695+0000",
                    "started": "2019-05-11T17:54:55.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240640",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/240641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r283105793\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.h\n ##########\n @@ -283,4 +283,56 @@ GArrowTable *garrow_csv_reader_read(GArrowCSVReader *reader,\n                                     GError **error);\n \n \n+/**\n+ * GArrowJSONReadUnexpectedFieldBehavior:\n+ * @GARROW_JSON_READ_IGNORE: Ignore other fields.\n+ * @GARROW_JSON_READ_ERROR: Return error.\n+ * @GARROW_JSON_READ_INFERTYPE: Infer a type.\n+ *\n+ * They are corresponding to `arrow::json::UnexpectedFieldBehavior` values.\n+ */\n+typedef enum {\n+  GARROW_JSON_READ_IGNORE,\n+  GARROW_JSON_READ_ERROR,\n+  GARROW_JSON_READ_INFERTYPE,\n \n Review comment:\n   I've fixed it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-11T17:55:02.564+0000",
                    "updated": "2019-05-11T17:55:02.564+0000",
                    "started": "2019-05-11T17:55:02.563+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240641",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/240642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r283105797\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.hpp\n ##########\n @@ -21,6 +21,7 @@\n \n #include <arrow/api.h>\n #include <arrow/csv/api.h>\n+#include <arrow/json/api.h>\n \n Review comment:\n   I've fixed it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-11T17:55:07.886+0000",
                    "updated": "2019-05-11T17:55:07.886+0000",
                    "started": "2019-05-11T17:55:07.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240642",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/240643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r283105800\n \n \n\n ##########\n File path: c_glib/test/test-json-reader.rb\n ##########\n @@ -0,0 +1,91 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestJSONReader < Test::Unit::TestCase\n+  include Helper::Buildable\n+  include Helper::Omittable\n+\n+  sub_test_case(\"#read\") do\n+    def open_input(json)\n+      buffer = Arrow::Buffer.new(json)\n+      Arrow::BufferInputStream.new(buffer)\n+    end\n+\n+    def test_default\n+      require_gi(1, 42, 0)\n+      table = Arrow::JSONReader.new(open_input(<<-JSON))\n+{ \"message\": \"Hello\", \"count\": 3.5, \"valid\": false }\n+{ \"message\": \"World\", \"count\": 3.25, \"valid\": true }\n+      JSON\n+      columns = {\n+        \"message\" => build_string_array([\"Hello\", \"World\"]),\n+        \"count\" => build_double_array([3.5, 3.25]),\n+        \"valid\" => build_boolean_array([false, true]),\n+      }\n+      assert_equal(build_table(columns),\n+                   table.read)\n+    end\n+\n+    sub_test_case(\"options\") do\n \n Review comment:\n   I've fixed it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-11T17:55:10.795+0000",
                    "updated": "2019-05-11T17:55:10.795+0000",
                    "started": "2019-05-11T17:55:10.794+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240643",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/240695",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r283115100\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -1497,6 +1501,393 @@ garrow_csv_reader_read(GArrowCSVReader *reader,\n   }\n }\n \n+\n+typedef struct GArrowJSONReadOptionsPrivate_ {\n+  arrow::MemoryPool *pool;\n+  arrow::json::ReadOptions read_options;\n+  arrow::json::ParseOptions parse_options;\n+} GArrowJSONReadOptionsPrivate;\n+\n+enum {\n+  PROP_JSON_READER_POOL = 1,\n+  PROP_JSON_READER_USE_THREADS,\n+  PROP_JSON_READER_BLOCK_SIZE,\n+  PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES,\n+  PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowJSONReadOptions,\n+                           garrow_json_read_options,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object) \\\n+  static_cast<GArrowJSONReadOptionsPrivate *>(       \\\n+    garrow_json_read_options_get_instance_private(   \\\n+      GARROW_JSON_READ_OPTIONS(object)))\n+\n+static void\n+garrow_json_read_options_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_POOL:\n+    priv->pool = static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  case PROP_JSON_READER_USE_THREADS:\n+    priv->read_options.use_threads = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    priv->read_options.block_size = g_value_get_int(value);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    priv->parse_options.newlines_in_values = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    priv->parse_options.unexpected_field_behavior =\n+      static_cast<arrow::json::UnexpectedFieldBehavior>(g_value_get_enum(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_get_property(GObject *object,\n+                                      guint prop_id,\n+                                      GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_USE_THREADS:\n+    g_value_set_boolean(value, priv->read_options.use_threads);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    g_value_set_int(value, priv->read_options.block_size);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    g_value_set_boolean(value, priv->parse_options.newlines_in_values);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    g_value_set_enum(value, static_cast<char>(priv->parse_options.unexpected_field_behavior));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_init(GArrowJSONReadOptions *object)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+  priv->pool = arrow::default_memory_pool();\n+  priv->read_options = arrow::json::ReadOptions::Defaults();\n+  priv->parse_options = arrow::json::ParseOptions::Defaults();\n+}\n+\n+static void\n+garrow_json_read_options_class_init(GArrowJSONReadOptionsClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_json_read_options_set_property;\n+  gobject_class->get_property = garrow_json_read_options_get_property;\n+\n+  spec = g_param_spec_pointer(\"pool\",\n+                              \"Pool\",\n+                              \"The raw arrow::MemoryPool *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_POOL,\n+                                  spec);\n+\n+  auto read_options = arrow::json::ReadOptions::Defaults();\n+\n+  /**\n+   * GArrowJSONReadOptions:use-threads:\n+   *\n+   * Whether to use the global CPU thread pool.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_boolean(\"use-threads\",\n+                              \"Use threads\",\n+                              \"Whether to use the global CPU thread pool\",\n+                              read_options.use_threads,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_JSON_READER_USE_THREADS,\n+                                  spec);\n+\n+  /**\n+   * GArrowJSONReadOptions:block-size:\n+   *\n+   * Block size we request from the IO layer; also determines the size\n+   * of chunks when #GArrowJSONReadOptions:use-threads is %TRUE.\n+   *\n+   * Since: 0.14.0\n+   */\n+  spec = g_param_spec_int(\"block-size\",\n+                          \"Block size\",\n+                          \"Block size we request from the IO layer; \"\n+                          \"also determines the size of chunks \"\n+                          \"when ::use-threads is %TRUE\",\n \n Review comment:\n   Ah, sorry.\r\n   I wanted to say that \"is %TRUE valid (processed as a marked up text) in property description?\".\r\n   \r\n   I know that property document by comment can be processed by GTK-Doc and GTK-Doc process the `%CONSTANT` markup.\r\n   But I don't know that how property description is processed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-12T00:12:07.068+0000",
                    "updated": "2019-05-12T00:12:07.068+0000",
                    "started": "2019-05-12T00:12:07.067+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240695",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/240696",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r283115270\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -1497,6 +1488,387 @@ garrow_csv_reader_read(GArrowCSVReader *reader,\n   }\n }\n \n+\n+typedef struct GArrowJSONReadOptionsPrivate_ {\n+  arrow::MemoryPool *pool;\n+  arrow::json::ReadOptions read_options;\n+  arrow::json::ParseOptions parse_options;\n+  GArrowSchema *schema;\n+} GArrowJSONReadOptionsPrivate;\n+\n+enum {\n+  PROP_JSON_READER_USE_THREADS = 1,\n+  PROP_JSON_READER_BLOCK_SIZE,\n+  PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES,\n+  PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR,\n+  PROP_JSON_READER_SCHEMA\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowJSONReadOptions,\n+                           garrow_json_read_options,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object) \\\n+  static_cast<GArrowJSONReadOptionsPrivate *>(       \\\n+    garrow_json_read_options_get_instance_private(   \\\n+      GARROW_JSON_READ_OPTIONS(object)))\n+\n+static void\n+garrow_json_read_options_dispose(GObject *object)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  if (priv->schema) {\n+    g_object_unref(priv->schema);\n+    priv->schema = nullptr;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_json_read_options_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_json_read_options_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_USE_THREADS:\n+    priv->read_options.use_threads = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    priv->read_options.block_size = g_value_get_int(value);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    priv->parse_options.newlines_in_values = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    priv->parse_options.unexpected_field_behavior =\n+      static_cast<arrow::json::UnexpectedFieldBehavior>(g_value_get_enum(value));\n+    break;\n+  case PROP_JSON_READER_SCHEMA:\n+    priv->schema = GARROW_SCHEMA(g_value_dup_object(value));\n+    priv->parse_options.explicit_schema = garrow_schema_get_raw(priv->schema);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_get_property(GObject *object,\n+                                      guint prop_id,\n+                                      GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_USE_THREADS:\n+    g_value_set_boolean(value, priv->read_options.use_threads);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    g_value_set_int(value, priv->read_options.block_size);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    g_value_set_boolean(value, priv->parse_options.newlines_in_values);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    g_value_set_enum(value, static_cast<int>(priv->parse_options.unexpected_field_behavior));\n+    break;\n+  case PROP_JSON_READER_SCHEMA:\n+    if (priv->schema) {\n+      g_value_set_object(value, priv->schema);\n+    } else {\n+      g_value_set_object(value, nullptr);\n+    }\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_json_read_options_init(GArrowJSONReadOptions *object)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+  priv->pool = arrow::default_memory_pool();\n \n Review comment:\n   Ah, `priv->pool` is leaked.\r\n   We need to execute `priv->poll = nullptr;` on `_dispose()` for this.\r\n   Or we can remove `priv->pool` at all.\r\n   I think that the latter is better. What do you think about this?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-12T00:24:01.156+0000",
                    "updated": "2019-05-12T00:24:01.156+0000",
                    "started": "2019-05-12T00:24:01.156+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240696",
                    "issueId": "13231796"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/worklog/240697",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4263:  ARROW-5268: [GLib] Add GArrowJSONReader\nURL: https://github.com/apache/arrow/pull/4263#discussion_r283115210\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -1497,6 +1488,387 @@ garrow_csv_reader_read(GArrowCSVReader *reader,\n   }\n }\n \n+\n+typedef struct GArrowJSONReadOptionsPrivate_ {\n+  arrow::MemoryPool *pool;\n+  arrow::json::ReadOptions read_options;\n+  arrow::json::ParseOptions parse_options;\n+  GArrowSchema *schema;\n+} GArrowJSONReadOptionsPrivate;\n+\n+enum {\n+  PROP_JSON_READER_USE_THREADS = 1,\n+  PROP_JSON_READER_BLOCK_SIZE,\n+  PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES,\n+  PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR,\n+  PROP_JSON_READER_SCHEMA\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowJSONReadOptions,\n+                           garrow_json_read_options,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object) \\\n+  static_cast<GArrowJSONReadOptionsPrivate *>(       \\\n+    garrow_json_read_options_get_instance_private(   \\\n+      GARROW_JSON_READ_OPTIONS(object)))\n+\n+static void\n+garrow_json_read_options_dispose(GObject *object)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  if (priv->schema) {\n+    g_object_unref(priv->schema);\n+    priv->schema = nullptr;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_json_read_options_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_json_read_options_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GARROW_JSON_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_JSON_READER_USE_THREADS:\n+    priv->read_options.use_threads = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_BLOCK_SIZE:\n+    priv->read_options.block_size = g_value_get_int(value);\n+    break;\n+  case PROP_JSON_READER_ALLOW_NEWLINES_IN_VALUES:\n+    priv->parse_options.newlines_in_values = g_value_get_boolean(value);\n+    break;\n+  case PROP_JSON_READER_UNEXPECTED_FIELD_BEHAVIOR:\n+    priv->parse_options.unexpected_field_behavior =\n+      static_cast<arrow::json::UnexpectedFieldBehavior>(g_value_get_enum(value));\n+    break;\n+  case PROP_JSON_READER_SCHEMA:\n+    priv->schema = GARROW_SCHEMA(g_value_dup_object(value));\n \n Review comment:\n   Could you `g_object_unrf()` when `priv->schema` isn't `NULL`? And `g_value_dup_object()` may return `NULL`.\r\n   \r\n   ```cpp\r\n   if (priv->schema) {\r\n     g_object_unref(priv->schema);\r\n   }\r\n   auto schema = g_value_dup_object(value);\r\n   if (schema) {\r\n     priv->schema = GARROW_SCHEMA(schema);\r\n     priv->parse_options.explicit_schema = garrow_schema_get_raw(priv->schema);\r\n   } else {\r\n     priv->schema = NULL;\r\n     priv->parse_options.explicit_schema = nullptr;\r\n   }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-12T00:24:01.158+0000",
                    "updated": "2019-05-12T00:24:01.158+0000",
                    "started": "2019-05-12T00:24:01.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240697",
                    "issueId": "13231796"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@62bf163f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d120795[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3be97ec6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@67ae881[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24b8af4d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6959dd38[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19b6919b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@48594ccc[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29fa504d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@e6de857[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23fa8a48[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@21c79dd7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon May 13 21:17:50 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-05-13T21:17:50.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5268/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-05-06T15:41:51.000+0000",
        "updated": "2019-05-13T21:17:50.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add GArrowJSONReader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231796/comment/16838874",
                    "id": "16838874",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 4263\n[https://github.com/apache/arrow/pull/4263]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2019-05-13T21:17:50.533+0000",
                    "updated": "2019-05-13T21:17:50.533+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z02feg:",
        "customfield_12314139": null
    }
}