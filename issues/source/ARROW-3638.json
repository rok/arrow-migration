{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13194629",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629",
    "key": "ARROW-3638",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3638/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629/worklog/159641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #2853: ARROW-3638: [C++][Python] Move reading from Feather as Table feature to C++ from Python\nURL: https://github.com/apache/arrow/pull/2853\n \n \n   It's for using the feature from GLib.\r\n   \r\n   (I know Feather is deprecated format.)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-27T16:05:00.182+0000",
                    "updated": "2018-10-27T16:05:00.182+0000",
                    "started": "2018-10-27T16:05:00.181+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159641",
                    "issueId": "13194629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629/worklog/159656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2853: ARROW-3638: [C++][Python] Move reading from Feather as Table feature to C++ from Python\nURL: https://github.com/apache/arrow/pull/2853#discussion_r228721095\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/feather-test.cc\n ##########\n @@ -265,6 +265,112 @@ void CheckArrays(const Array& expected, const Array& result) {\n   }\n }\n \n+void CheckBatches(const RecordBatch& expected, const RecordBatch& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(result, 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(expected, 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n+\n+std::shared_ptr<RecordBatch> TableToBatch(const Table &table) {\n+  TableBatchReader reader(table);\n+  std::shared_ptr<RecordBatch> batch;\n+  EXPECT_OK(reader.ReadNext(&batch));\n+  return batch;\n+}\n+\n+void CheckTables(const Table& expected, const Table& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(*TableToBatch(result), 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(*TableToBatch(expected), 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n+\n+class TestTableReader : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    ASSERT_OK(io::BufferOutputStream::Create(1024, default_memory_pool(), &stream_));\n+    ASSERT_OK(TableWriter::Open(stream_, &writer_));\n+  }\n+\n+  void Finish() {\n+    // Write table footer\n+    ASSERT_OK(writer_->Finalize());\n+\n+    ASSERT_OK(stream_->Finish(&output_));\n+\n+    std::shared_ptr<io::BufferReader> buffer(new io::BufferReader(output_));\n+    ASSERT_OK(TableReader::Open(buffer, &reader_));\n+  }\n+\n+ protected:\n+  std::shared_ptr<io::BufferOutputStream> stream_;\n+  std::unique_ptr<TableWriter> writer_;\n+  std::unique_ptr<TableReader> reader_;\n+\n+  std::shared_ptr<Buffer> output_;\n+};\n+\n+TEST_F(TestTableReader, ReadIndices) {\n+  std::shared_ptr<RecordBatch> batch1;\n+  ASSERT_OK(MakeIntRecordBatch(&batch1));\n+  std::shared_ptr<RecordBatch> batch2;\n+  ASSERT_OK(MakeIntRecordBatch(&batch2));\n+\n+  ASSERT_OK(writer_->Append(\"f0\", *batch1->column(0)));\n+  ASSERT_OK(writer_->Append(\"f1\", *batch1->column(1)));\n+  ASSERT_OK(writer_->Append(\"f2\", *batch2->column(0)));\n+  ASSERT_OK(writer_->Append(\"f3\", *batch2->column(1)));\n+  Finish();\n+\n+  std::vector<int> indices({3, 0, 5});\n+  std::shared_ptr<Table> result;\n+  reader_->Read(indices, &result);\n+  std::vector<std::shared_ptr<Field>> fields;\n+  std::vector<std::shared_ptr<Array>> arrays;\n+  fields.push_back(std::make_shared<Field>(\"f0\", int32()));\n+  arrays.push_back(batch1->column(0));\n+  fields.push_back(std::make_shared<Field>(\"f3\", int32()));\n+  arrays.push_back(batch2->column(1));\n+  auto expected = Table::Make(std::make_shared<Schema>(fields),\n+                              arrays);\n+  CheckTables(*expected, *result);\n+}\n+\n+TEST_F(TestTableReader, ReadNames) {\n+  std::shared_ptr<RecordBatch> batch1;\n+  ASSERT_OK(MakeIntRecordBatch(&batch1));\n+  std::shared_ptr<RecordBatch> batch2;\n+  ASSERT_OK(MakeIntRecordBatch(&batch2));\n+\n+  ASSERT_OK(writer_->Append(\"f0\", *batch1->column(0)));\n+  ASSERT_OK(writer_->Append(\"f1\", *batch1->column(1)));\n+  ASSERT_OK(writer_->Append(\"f2\", *batch2->column(0)));\n+  ASSERT_OK(writer_->Append(\"f3\", *batch2->column(1)));\n+  Finish();\n+\n+  std::vector<std::string> names({\"f3\", \"f0\", \"f5\"});\n+  std::shared_ptr<Table> result;\n+  reader_->Read(names, &result);\n \n Review comment:\n   Need to check status\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-27T17:53:05.184+0000",
                    "updated": "2018-10-27T17:53:05.184+0000",
                    "started": "2018-10-27T17:53:05.184+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159656",
                    "issueId": "13194629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629/worklog/159657",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2853: ARROW-3638: [C++][Python] Move reading from Feather as Table feature to C++ from Python\nURL: https://github.com/apache/arrow/pull/2853#discussion_r228721091\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/feather-test.cc\n ##########\n @@ -265,6 +265,112 @@ void CheckArrays(const Array& expected, const Array& result) {\n   }\n }\n \n+void CheckBatches(const RecordBatch& expected, const RecordBatch& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(result, 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(expected, 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n+\n+std::shared_ptr<RecordBatch> TableToBatch(const Table &table) {\n+  TableBatchReader reader(table);\n+  std::shared_ptr<RecordBatch> batch;\n+  EXPECT_OK(reader.ReadNext(&batch));\n+  return batch;\n+}\n+\n+void CheckTables(const Table& expected, const Table& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(*TableToBatch(result), 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(*TableToBatch(expected), 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n+\n+class TestTableReader : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    ASSERT_OK(io::BufferOutputStream::Create(1024, default_memory_pool(), &stream_));\n+    ASSERT_OK(TableWriter::Open(stream_, &writer_));\n+  }\n+\n+  void Finish() {\n+    // Write table footer\n+    ASSERT_OK(writer_->Finalize());\n+\n+    ASSERT_OK(stream_->Finish(&output_));\n+\n+    std::shared_ptr<io::BufferReader> buffer(new io::BufferReader(output_));\n+    ASSERT_OK(TableReader::Open(buffer, &reader_));\n+  }\n+\n+ protected:\n+  std::shared_ptr<io::BufferOutputStream> stream_;\n+  std::unique_ptr<TableWriter> writer_;\n+  std::unique_ptr<TableReader> reader_;\n+\n+  std::shared_ptr<Buffer> output_;\n+};\n+\n+TEST_F(TestTableReader, ReadIndices) {\n+  std::shared_ptr<RecordBatch> batch1;\n+  ASSERT_OK(MakeIntRecordBatch(&batch1));\n+  std::shared_ptr<RecordBatch> batch2;\n+  ASSERT_OK(MakeIntRecordBatch(&batch2));\n+\n+  ASSERT_OK(writer_->Append(\"f0\", *batch1->column(0)));\n+  ASSERT_OK(writer_->Append(\"f1\", *batch1->column(1)));\n+  ASSERT_OK(writer_->Append(\"f2\", *batch2->column(0)));\n+  ASSERT_OK(writer_->Append(\"f3\", *batch2->column(1)));\n+  Finish();\n+\n+  std::vector<int> indices({3, 0, 5});\n+  std::shared_ptr<Table> result;\n+  reader_->Read(indices, &result);\n \n Review comment:\n   Need to check status\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-27T17:53:05.185+0000",
                    "updated": "2018-10-27T17:53:05.185+0000",
                    "started": "2018-10-27T17:53:05.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159657",
                    "issueId": "13194629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629/worklog/159682",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2853: ARROW-3638: [C++][Python] Move reading from Feather as Table feature to C++ from Python\nURL: https://github.com/apache/arrow/pull/2853#discussion_r228732554\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/feather-test.cc\n ##########\n @@ -265,6 +265,112 @@ void CheckArrays(const Array& expected, const Array& result) {\n   }\n }\n \n+void CheckBatches(const RecordBatch& expected, const RecordBatch& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(result, 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(expected, 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n+\n+std::shared_ptr<RecordBatch> TableToBatch(const Table &table) {\n+  TableBatchReader reader(table);\n+  std::shared_ptr<RecordBatch> batch;\n+  EXPECT_OK(reader.ReadNext(&batch));\n+  return batch;\n+}\n+\n+void CheckTables(const Table& expected, const Table& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(*TableToBatch(result), 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(*TableToBatch(expected), 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n+\n+class TestTableReader : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    ASSERT_OK(io::BufferOutputStream::Create(1024, default_memory_pool(), &stream_));\n+    ASSERT_OK(TableWriter::Open(stream_, &writer_));\n+  }\n+\n+  void Finish() {\n+    // Write table footer\n+    ASSERT_OK(writer_->Finalize());\n+\n+    ASSERT_OK(stream_->Finish(&output_));\n+\n+    std::shared_ptr<io::BufferReader> buffer(new io::BufferReader(output_));\n+    ASSERT_OK(TableReader::Open(buffer, &reader_));\n+  }\n+\n+ protected:\n+  std::shared_ptr<io::BufferOutputStream> stream_;\n+  std::unique_ptr<TableWriter> writer_;\n+  std::unique_ptr<TableReader> reader_;\n+\n+  std::shared_ptr<Buffer> output_;\n+};\n+\n+TEST_F(TestTableReader, ReadIndices) {\n+  std::shared_ptr<RecordBatch> batch1;\n+  ASSERT_OK(MakeIntRecordBatch(&batch1));\n+  std::shared_ptr<RecordBatch> batch2;\n+  ASSERT_OK(MakeIntRecordBatch(&batch2));\n+\n+  ASSERT_OK(writer_->Append(\"f0\", *batch1->column(0)));\n+  ASSERT_OK(writer_->Append(\"f1\", *batch1->column(1)));\n+  ASSERT_OK(writer_->Append(\"f2\", *batch2->column(0)));\n+  ASSERT_OK(writer_->Append(\"f3\", *batch2->column(1)));\n+  Finish();\n+\n+  std::vector<int> indices({3, 0, 5});\n+  std::shared_ptr<Table> result;\n+  reader_->Read(indices, &result);\n \n Review comment:\n   Oops. I've added.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-28T02:48:36.224+0000",
                    "updated": "2018-10-28T02:48:36.224+0000",
                    "started": "2018-10-28T02:48:36.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159682",
                    "issueId": "13194629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629/worklog/159683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2853: ARROW-3638: [C++][Python] Move reading from Feather as Table feature to C++ from Python\nURL: https://github.com/apache/arrow/pull/2853#discussion_r228732557\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/feather-test.cc\n ##########\n @@ -265,6 +265,112 @@ void CheckArrays(const Array& expected, const Array& result) {\n   }\n }\n \n+void CheckBatches(const RecordBatch& expected, const RecordBatch& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(result, 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(expected, 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n+\n+std::shared_ptr<RecordBatch> TableToBatch(const Table &table) {\n+  TableBatchReader reader(table);\n+  std::shared_ptr<RecordBatch> batch;\n+  EXPECT_OK(reader.ReadNext(&batch));\n+  return batch;\n+}\n+\n+void CheckTables(const Table& expected, const Table& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(*TableToBatch(result), 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(*TableToBatch(expected), 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n+\n+class TestTableReader : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    ASSERT_OK(io::BufferOutputStream::Create(1024, default_memory_pool(), &stream_));\n+    ASSERT_OK(TableWriter::Open(stream_, &writer_));\n+  }\n+\n+  void Finish() {\n+    // Write table footer\n+    ASSERT_OK(writer_->Finalize());\n+\n+    ASSERT_OK(stream_->Finish(&output_));\n+\n+    std::shared_ptr<io::BufferReader> buffer(new io::BufferReader(output_));\n+    ASSERT_OK(TableReader::Open(buffer, &reader_));\n+  }\n+\n+ protected:\n+  std::shared_ptr<io::BufferOutputStream> stream_;\n+  std::unique_ptr<TableWriter> writer_;\n+  std::unique_ptr<TableReader> reader_;\n+\n+  std::shared_ptr<Buffer> output_;\n+};\n+\n+TEST_F(TestTableReader, ReadIndices) {\n+  std::shared_ptr<RecordBatch> batch1;\n+  ASSERT_OK(MakeIntRecordBatch(&batch1));\n+  std::shared_ptr<RecordBatch> batch2;\n+  ASSERT_OK(MakeIntRecordBatch(&batch2));\n+\n+  ASSERT_OK(writer_->Append(\"f0\", *batch1->column(0)));\n+  ASSERT_OK(writer_->Append(\"f1\", *batch1->column(1)));\n+  ASSERT_OK(writer_->Append(\"f2\", *batch2->column(0)));\n+  ASSERT_OK(writer_->Append(\"f3\", *batch2->column(1)));\n+  Finish();\n+\n+  std::vector<int> indices({3, 0, 5});\n+  std::shared_ptr<Table> result;\n+  reader_->Read(indices, &result);\n+  std::vector<std::shared_ptr<Field>> fields;\n+  std::vector<std::shared_ptr<Array>> arrays;\n+  fields.push_back(std::make_shared<Field>(\"f0\", int32()));\n+  arrays.push_back(batch1->column(0));\n+  fields.push_back(std::make_shared<Field>(\"f3\", int32()));\n+  arrays.push_back(batch2->column(1));\n+  auto expected = Table::Make(std::make_shared<Schema>(fields),\n+                              arrays);\n+  CheckTables(*expected, *result);\n+}\n+\n+TEST_F(TestTableReader, ReadNames) {\n+  std::shared_ptr<RecordBatch> batch1;\n+  ASSERT_OK(MakeIntRecordBatch(&batch1));\n+  std::shared_ptr<RecordBatch> batch2;\n+  ASSERT_OK(MakeIntRecordBatch(&batch2));\n+\n+  ASSERT_OK(writer_->Append(\"f0\", *batch1->column(0)));\n+  ASSERT_OK(writer_->Append(\"f1\", *batch1->column(1)));\n+  ASSERT_OK(writer_->Append(\"f2\", *batch2->column(0)));\n+  ASSERT_OK(writer_->Append(\"f3\", *batch2->column(1)));\n+  Finish();\n+\n+  std::vector<std::string> names({\"f3\", \"f0\", \"f5\"});\n+  std::shared_ptr<Table> result;\n+  reader_->Read(names, &result);\n \n Review comment:\n   ditto.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-28T02:48:43.805+0000",
                    "updated": "2018-10-28T02:48:43.805+0000",
                    "started": "2018-10-28T02:48:43.804+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159683",
                    "issueId": "13194629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629/worklog/159684",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2853: ARROW-3638: [C++][Python] Move reading from Feather as Table feature to C++ from Python\nURL: https://github.com/apache/arrow/pull/2853#issuecomment-433671781\n \n \n   I've also fixed style issues.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-28T02:48:55.840+0000",
                    "updated": "2018-10-28T02:48:55.840+0000",
                    "started": "2018-10-28T02:48:55.839+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159684",
                    "issueId": "13194629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629/worklog/159700",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #2853: ARROW-3638: [C++][Python] Move reading from Feather as Table feature to C++ from Python\nURL: https://github.com/apache/arrow/pull/2853\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/ipc/feather-test.cc b/cpp/src/arrow/ipc/feather-test.cc\nindex ded0a8bbe1..2e442577b9 100644\n--- a/cpp/src/arrow/ipc/feather-test.cc\n+++ b/cpp/src/arrow/ipc/feather-test.cc\n@@ -265,6 +265,110 @@ void CheckArrays(const Array& expected, const Array& result) {\n   }\n }\n \n+void CheckBatches(const RecordBatch& expected, const RecordBatch& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(result, 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(expected, 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n+\n+std::shared_ptr<RecordBatch> TableToBatch(const Table& table) {\n+  TableBatchReader reader(table);\n+  std::shared_ptr<RecordBatch> batch;\n+  EXPECT_OK(reader.ReadNext(&batch));\n+  return batch;\n+}\n+\n+void CheckTables(const Table& expected, const Table& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(*TableToBatch(result), 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(*TableToBatch(expected), 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n+\n+class TestTableReader : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    ASSERT_OK(io::BufferOutputStream::Create(1024, default_memory_pool(), &stream_));\n+    ASSERT_OK(TableWriter::Open(stream_, &writer_));\n+  }\n+\n+  void Finish() {\n+    // Write table footer\n+    ASSERT_OK(writer_->Finalize());\n+\n+    ASSERT_OK(stream_->Finish(&output_));\n+\n+    std::shared_ptr<io::BufferReader> buffer(new io::BufferReader(output_));\n+    ASSERT_OK(TableReader::Open(buffer, &reader_));\n+  }\n+\n+ protected:\n+  std::shared_ptr<io::BufferOutputStream> stream_;\n+  std::unique_ptr<TableWriter> writer_;\n+  std::unique_ptr<TableReader> reader_;\n+\n+  std::shared_ptr<Buffer> output_;\n+};\n+\n+TEST_F(TestTableReader, ReadIndices) {\n+  std::shared_ptr<RecordBatch> batch1;\n+  ASSERT_OK(MakeIntRecordBatch(&batch1));\n+  std::shared_ptr<RecordBatch> batch2;\n+  ASSERT_OK(MakeIntRecordBatch(&batch2));\n+\n+  ASSERT_OK(writer_->Append(\"f0\", *batch1->column(0)));\n+  ASSERT_OK(writer_->Append(\"f1\", *batch1->column(1)));\n+  ASSERT_OK(writer_->Append(\"f2\", *batch2->column(0)));\n+  ASSERT_OK(writer_->Append(\"f3\", *batch2->column(1)));\n+  Finish();\n+\n+  std::vector<int> indices({3, 0, 5});\n+  std::shared_ptr<Table> result;\n+  ASSERT_OK(reader_->Read(indices, &result));\n+  std::vector<std::shared_ptr<Field>> fields;\n+  std::vector<std::shared_ptr<Array>> arrays;\n+  fields.push_back(std::make_shared<Field>(\"f0\", int32()));\n+  arrays.push_back(batch1->column(0));\n+  fields.push_back(std::make_shared<Field>(\"f3\", int32()));\n+  arrays.push_back(batch2->column(1));\n+  auto expected = Table::Make(std::make_shared<Schema>(fields), arrays);\n+  CheckTables(*expected, *result);\n+}\n+\n+TEST_F(TestTableReader, ReadNames) {\n+  std::shared_ptr<RecordBatch> batch1;\n+  ASSERT_OK(MakeIntRecordBatch(&batch1));\n+  std::shared_ptr<RecordBatch> batch2;\n+  ASSERT_OK(MakeIntRecordBatch(&batch2));\n+\n+  ASSERT_OK(writer_->Append(\"f0\", *batch1->column(0)));\n+  ASSERT_OK(writer_->Append(\"f1\", *batch1->column(1)));\n+  ASSERT_OK(writer_->Append(\"f2\", *batch2->column(0)));\n+  ASSERT_OK(writer_->Append(\"f3\", *batch2->column(1)));\n+  Finish();\n+\n+  std::vector<std::string> names({\"f3\", \"f0\", \"f5\"});\n+  std::shared_ptr<Table> result;\n+  ASSERT_OK(reader_->Read(names, &result));\n+  std::vector<std::shared_ptr<Field>> fields;\n+  std::vector<std::shared_ptr<Array>> arrays;\n+  fields.push_back(std::make_shared<Field>(\"f0\", int32()));\n+  arrays.push_back(batch1->column(0));\n+  fields.push_back(std::make_shared<Field>(\"f3\", int32()));\n+  arrays.push_back(batch2->column(1));\n+  auto expected = Table::Make(std::make_shared<Schema>(fields), arrays);\n+  CheckTables(*expected, *result);\n+}\n+\n class TestTableWriter : public ::testing::Test {\n  public:\n   void SetUp() {\n@@ -288,12 +392,12 @@ class TestTableWriter : public ::testing::Test {\n     }\n     Finish();\n \n-    std::shared_ptr<Column> col;\n-    for (int i = 0; i < batch.num_columns(); ++i) {\n-      ASSERT_OK(reader_->GetColumn(i, &col));\n-      ASSERT_EQ(batch.column_name(i), col->name());\n-      CheckArrays(*batch.column(i), *col->data()->chunk(0));\n-    }\n+    std::shared_ptr<Table> table;\n+    ASSERT_OK(reader_->Read(&table));\n+    TableBatchReader table_batch_reader(*table);\n+    std::shared_ptr<RecordBatch> result;\n+    ASSERT_OK(table_batch_reader.ReadNext(&result));\n+    CheckBatches(batch, *result);\n   }\n \n  protected:\ndiff --git a/cpp/src/arrow/ipc/feather.cc b/cpp/src/arrow/ipc/feather.cc\nindex 71ca14f40d..749b3f9406 100644\n--- a/cpp/src/arrow/ipc/feather.cc\n+++ b/cpp/src/arrow/ipc/feather.cc\n@@ -444,6 +444,66 @@ class TableReader::TableReaderImpl {\n     return Status::OK();\n   }\n \n+  Status Read(std::shared_ptr<Table>* out) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<std::shared_ptr<Column>> columns;\n+    for (int i = 0; i < num_columns(); ++i) {\n+      std::shared_ptr<Column> column;\n+      RETURN_NOT_OK(GetColumn(i, &column));\n+      columns.push_back(column);\n+      fields.push_back(column->field());\n+    }\n+    *out = Table::Make(schema(fields), columns);\n+    return Status::OK();\n+  }\n+\n+  Status Read(const std::vector<int>& indices, std::shared_ptr<Table>* out) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<std::shared_ptr<Column>> columns;\n+    for (int i = 0; i < num_columns(); ++i) {\n+      bool found = false;\n+      for (auto j : indices) {\n+        if (i == j) {\n+          found = true;\n+          break;\n+        }\n+      }\n+      if (!found) {\n+        continue;\n+      }\n+      std::shared_ptr<Column> column;\n+      RETURN_NOT_OK(GetColumn(i, &column));\n+      columns.push_back(column);\n+      fields.push_back(column->field());\n+    }\n+    *out = Table::Make(schema(fields), columns);\n+    return Status::OK();\n+  }\n+\n+  Status Read(const std::vector<std::string>& names, std::shared_ptr<Table>* out) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<std::shared_ptr<Column>> columns;\n+    for (int i = 0; i < num_columns(); ++i) {\n+      auto name = GetColumnName(i);\n+      bool found = false;\n+      for (auto& n : names) {\n+        if (name == n) {\n+          found = true;\n+          break;\n+        }\n+      }\n+      if (!found) {\n+        continue;\n+      }\n+      std::shared_ptr<Column> column;\n+      RETURN_NOT_OK(GetColumn(i, &column));\n+      columns.push_back(column);\n+      fields.push_back(column->field());\n+    }\n+    *out = Table::Make(schema(fields), columns);\n+    return Status::OK();\n+  }\n+\n  private:\n   std::shared_ptr<io::RandomAccessFile> source_;\n   std::unique_ptr<TableMetadata> metadata_;\n@@ -480,6 +540,17 @@ Status TableReader::GetColumn(int i, std::shared_ptr<Column>* out) {\n   return impl_->GetColumn(i, out);\n }\n \n+Status TableReader::Read(std::shared_ptr<Table>* out) { return impl_->Read(out); }\n+\n+Status TableReader::Read(const std::vector<int>& indices, std::shared_ptr<Table>* out) {\n+  return impl_->Read(indices, out);\n+}\n+\n+Status TableReader::Read(const std::vector<std::string>& names,\n+                         std::shared_ptr<Table>* out) {\n+  return impl_->Read(names, out);\n+}\n+\n // ----------------------------------------------------------------------\n // writer.cc\n \ndiff --git a/cpp/src/arrow/ipc/feather.h b/cpp/src/arrow/ipc/feather.h\nindex 7c884e9f52..579392a7ce 100644\n--- a/cpp/src/arrow/ipc/feather.h\n+++ b/cpp/src/arrow/ipc/feather.h\n@@ -24,6 +24,7 @@\n #include <cstdint>\n #include <memory>\n #include <string>\n+#include <vector>\n \n #include \"arrow/util/visibility.h\"\n \n@@ -32,6 +33,7 @@ namespace arrow {\n class Array;\n class Column;\n class Status;\n+class Table;\n \n namespace io {\n \n@@ -91,6 +93,32 @@ class ARROW_EXPORT TableReader {\n   /// This function is zero-copy if the file source supports zero-copy reads\n   Status GetColumn(int i, std::shared_ptr<Column>* out);\n \n+  /// \\brief Read all columns from the file as an arrow::Table.\n+  ///\n+  /// \\param[out] out the returned table\n+  /// \\return Status\n+  ///\n+  /// This function is zero-copy if the file source supports zero-copy reads\n+  Status Read(std::shared_ptr<Table>* out);\n+\n+  /// \\brief Read only the specified columns from the file as an arrow::Table.\n+  ///\n+  /// \\param[in] indices the column indices to read\n+  /// \\param[out] out the returned table\n+  /// \\return Status\n+  ///\n+  /// This function is zero-copy if the file source supports zero-copy reads\n+  Status Read(const std::vector<int>& indices, std::shared_ptr<Table>* out);\n+\n+  /// \\brief Read only the specified columns from the file as an arrow::Table.\n+  ///\n+  /// \\param[in] names the column names to read\n+  /// \\param[out] out the returned table\n+  /// \\return Status\n+  ///\n+  /// This function is zero-copy if the file source supports zero-copy reads\n+  Status Read(const std::vector<std::string>& names, std::shared_ptr<Table>* out);\n+\n  private:\n   class ARROW_NO_EXPORT TableReaderImpl;\n   std::unique_ptr<TableReaderImpl> impl_;\ndiff --git a/python/pyarrow/feather.pxi b/python/pyarrow/feather.pxi\nindex 9750aecd51..20b12c1e35 100644\n--- a/python/pyarrow/feather.pxi\n+++ b/python/pyarrow/feather.pxi\n@@ -104,3 +104,37 @@ cdef class FeatherReader:\n                          .GetColumn(i, &sp_column))\n \n         return pyarrow_wrap_column(sp_column)\n+\n+    def _read(self):\n+        cdef shared_ptr[CTable] sp_table\n+        with nogil:\n+            check_status(self.reader.get()\n+                         .Read(&sp_table))\n+\n+        return pyarrow_wrap_table(sp_table)\n+\n+    def _read_indices(self, indices):\n+        cdef:\n+            shared_ptr[CTable] sp_table\n+            vector[int] c_indices\n+\n+        for index in indices:\n+            c_indices.push_back(index)\n+        with nogil:\n+            check_status(self.reader.get()\n+                         .Read(c_indices, &sp_table))\n+\n+        return pyarrow_wrap_table(sp_table)\n+\n+    def _read_names(self, names):\n+        cdef:\n+            shared_ptr[CTable] sp_table\n+            vector[c_string] c_names\n+\n+        for name in names:\n+            c_names.push_back(tobytes(name))\n+        with nogil:\n+            check_status(self.reader.get()\n+                         .Read(c_names, &sp_table))\n+\n+        return pyarrow_wrap_table(sp_table)\ndiff --git a/python/pyarrow/feather.py b/python/pyarrow/feather.py\nindex 4a693fe3ea..930e999a56 100644\n--- a/python/pyarrow/feather.py\n+++ b/python/pyarrow/feather.py\n@@ -24,7 +24,7 @@\n \n from pyarrow.compat import pdapi\n from pyarrow.lib import FeatherError  # noqa\n-from pyarrow.lib import RecordBatch, Table, concat_tables\n+from pyarrow.lib import RecordBatch, concat_tables\n import pyarrow.lib as ext\n \n \n@@ -50,22 +50,18 @@ def read(self, *args, **kwargs):\n         return self.read_pandas(*args, **kwargs)\n \n     def read_table(self, columns=None):\n-        if columns is not None:\n-            column_set = set(columns)\n-        else:\n-            column_set = None\n-\n-        columns = []\n-        names = []\n-        for i in range(self.num_columns):\n-            name = self.get_column_name(i)\n-            if column_set is None or name in column_set:\n-                col = self.get_column(i)\n-                columns.append(col)\n-                names.append(name)\n-\n-        table = Table.from_arrays(columns, names=names)\n-        return table\n+        if columns is None:\n+            return self._read()\n+        column_types = [type(column) for column in columns]\n+        if all(map(lambda t: t == int, column_types)):\n+            return self._read_indices(columns)\n+        elif all(map(lambda t: t == str, column_types)):\n+            return self._read_names(columns)\n+\n+        column_type_names = [t.__name__ for t in column_types]\n+        raise TypeError(\"Columns must be indices or names. \"\n+                        \"Got columns {} of types {}\"\n+                        .format(columns, column_type_names))\n \n     def read_pandas(self, columns=None, use_threads=True):\n         return self.read_table(columns=columns).to_pandas(\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 9e3a879122..1cc229788f 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -910,6 +910,10 @@ cdef extern from \"arrow/ipc/api.h\" namespace \"arrow::ipc\" nogil:\n         CStatus GetColumn(int i, shared_ptr[CColumn]* out)\n         c_string GetColumnName(int i)\n \n+        CStatus Read(shared_ptr[CTable]* out)\n+        CStatus Read(const vector[int] indices, shared_ptr[CTable]* out)\n+        CStatus Read(const vector[c_string] names, shared_ptr[CTable]* out)\n+\n \n cdef extern from \"arrow/csv/api.h\" namespace \"arrow::csv\" nogil:\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-28T09:23:06.581+0000",
                    "updated": "2018-10-28T09:23:06.581+0000",
                    "started": "2018-10-28T09:23:06.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159700",
                    "issueId": "13194629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629/worklog/159701",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2853: ARROW-3638: [C++][Python] Move reading from Feather as Table feature to C++ from Python\nURL: https://github.com/apache/arrow/pull/2853#discussion_r228740875\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/feather-test.cc\n ##########\n @@ -265,6 +265,110 @@ void CheckArrays(const Array& expected, const Array& result) {\n   }\n }\n \n+void CheckBatches(const RecordBatch& expected, const RecordBatch& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(result, 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(expected, 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n+\n+std::shared_ptr<RecordBatch> TableToBatch(const Table& table) {\n+  TableBatchReader reader(table);\n+  std::shared_ptr<RecordBatch> batch;\n+  EXPECT_OK(reader.ReadNext(&batch));\n+  return batch;\n+}\n+\n+void CheckTables(const Table& expected, const Table& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(*TableToBatch(result), 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(*TableToBatch(expected), 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n \n Review comment:\n   These methods should be placed in a common file\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-28T09:27:14.735+0000",
                    "updated": "2018-10-28T09:27:14.735+0000",
                    "started": "2018-10-28T09:27:14.734+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159701",
                    "issueId": "13194629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629/worklog/159702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2853: ARROW-3638: [C++][Python] Move reading from Feather as Table feature to C++ from Python\nURL: https://github.com/apache/arrow/pull/2853#discussion_r228740913\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/feather.cc\n ##########\n @@ -444,6 +444,66 @@ class TableReader::TableReaderImpl {\n     return Status::OK();\n   }\n \n+  Status Read(std::shared_ptr<Table>* out) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<std::shared_ptr<Column>> columns;\n+    for (int i = 0; i < num_columns(); ++i) {\n+      std::shared_ptr<Column> column;\n+      RETURN_NOT_OK(GetColumn(i, &column));\n+      columns.push_back(column);\n+      fields.push_back(column->field());\n+    }\n+    *out = Table::Make(schema(fields), columns);\n+    return Status::OK();\n+  }\n+\n+  Status Read(const std::vector<int>& indices, std::shared_ptr<Table>* out) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<std::shared_ptr<Column>> columns;\n+    for (int i = 0; i < num_columns(); ++i) {\n+      bool found = false;\n+      for (auto j : indices) {\n+        if (i == j) {\n+          found = true;\n+          break;\n+        }\n+      }\n+      if (!found) {\n+        continue;\n+      }\n+      std::shared_ptr<Column> column;\n+      RETURN_NOT_OK(GetColumn(i, &column));\n+      columns.push_back(column);\n+      fields.push_back(column->field());\n+    }\n+    *out = Table::Make(schema(fields), columns);\n+    return Status::OK();\n+  }\n+\n+  Status Read(const std::vector<std::string>& names, std::shared_ptr<Table>* out) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<std::shared_ptr<Column>> columns;\n+    for (int i = 0; i < num_columns(); ++i) {\n+      auto name = GetColumnName(i);\n+      bool found = false;\n+      for (auto& n : names) {\n+        if (name == n) {\n+          found = true;\n+          break;\n+        }\n+      }\n+      if (!found) {\n+        continue;\n \n Review comment:\n   same here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-28T09:27:14.755+0000",
                    "updated": "2018-10-28T09:27:14.755+0000",
                    "started": "2018-10-28T09:27:14.754+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159702",
                    "issueId": "13194629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629/worklog/159703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2853: ARROW-3638: [C++][Python] Move reading from Feather as Table feature to C++ from Python\nURL: https://github.com/apache/arrow/pull/2853#discussion_r228740908\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/feather.cc\n ##########\n @@ -444,6 +444,66 @@ class TableReader::TableReaderImpl {\n     return Status::OK();\n   }\n \n+  Status Read(std::shared_ptr<Table>* out) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<std::shared_ptr<Column>> columns;\n+    for (int i = 0; i < num_columns(); ++i) {\n+      std::shared_ptr<Column> column;\n+      RETURN_NOT_OK(GetColumn(i, &column));\n+      columns.push_back(column);\n+      fields.push_back(column->field());\n+    }\n+    *out = Table::Make(schema(fields), columns);\n+    return Status::OK();\n+  }\n+\n+  Status Read(const std::vector<int>& indices, std::shared_ptr<Table>* out) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<std::shared_ptr<Column>> columns;\n+    for (int i = 0; i < num_columns(); ++i) {\n+      bool found = false;\n+      for (auto j : indices) {\n+        if (i == j) {\n+          found = true;\n+          break;\n+        }\n+      }\n+      if (!found) {\n+        continue;\n+      }\n+      std::shared_ptr<Column> column;\n+      RETURN_NOT_OK(GetColumn(i, &column));\n \n Review comment:\n   Perhaps we would want to return an error for an invalid index?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-28T09:27:14.776+0000",
                    "updated": "2018-10-28T09:27:14.776+0000",
                    "started": "2018-10-28T09:27:14.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159703",
                    "issueId": "13194629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629/worklog/159711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2853: ARROW-3638: [C++][Python] Move reading from Feather as Table feature to C++ from Python\nURL: https://github.com/apache/arrow/pull/2853#discussion_r228745309\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/feather-test.cc\n ##########\n @@ -265,6 +265,110 @@ void CheckArrays(const Array& expected, const Array& result) {\n   }\n }\n \n+void CheckBatches(const RecordBatch& expected, const RecordBatch& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(result, 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(expected, 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n+\n+std::shared_ptr<RecordBatch> TableToBatch(const Table& table) {\n+  TableBatchReader reader(table);\n+  std::shared_ptr<RecordBatch> batch;\n+  EXPECT_OK(reader.ReadNext(&batch));\n+  return batch;\n+}\n+\n+void CheckTables(const Table& expected, const Table& result) {\n+  if (!result.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    EXPECT_OK(PrettyPrint(*TableToBatch(result), 0, &pp_result));\n+    EXPECT_OK(PrettyPrint(*TableToBatch(expected), 0, &pp_expected));\n+    FAIL() << \"Got: \" << pp_result.str() << \"\\nExpected: \" << pp_expected.str();\n+  }\n+}\n \n Review comment:\n   OK. I'll do it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-28T11:47:16.502+0000",
                    "updated": "2018-10-28T11:47:16.502+0000",
                    "started": "2018-10-28T11:47:16.469+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159711",
                    "issueId": "13194629"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629/worklog/159716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2853: ARROW-3638: [C++][Python] Move reading from Feather as Table feature to C++ from Python\nURL: https://github.com/apache/arrow/pull/2853#discussion_r228745475\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/feather.cc\n ##########\n @@ -444,6 +444,66 @@ class TableReader::TableReaderImpl {\n     return Status::OK();\n   }\n \n+  Status Read(std::shared_ptr<Table>* out) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<std::shared_ptr<Column>> columns;\n+    for (int i = 0; i < num_columns(); ++i) {\n+      std::shared_ptr<Column> column;\n+      RETURN_NOT_OK(GetColumn(i, &column));\n+      columns.push_back(column);\n+      fields.push_back(column->field());\n+    }\n+    *out = Table::Make(schema(fields), columns);\n+    return Status::OK();\n+  }\n+\n+  Status Read(const std::vector<int>& indices, std::shared_ptr<Table>* out) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<std::shared_ptr<Column>> columns;\n+    for (int i = 0; i < num_columns(); ++i) {\n+      bool found = false;\n+      for (auto j : indices) {\n+        if (i == j) {\n+          found = true;\n+          break;\n+        }\n+      }\n+      if (!found) {\n+        continue;\n+      }\n+      std::shared_ptr<Column> column;\n+      RETURN_NOT_OK(GetColumn(i, &column));\n \n Review comment:\n   First, I implemented so but I stopped. Because it breaks backward compatibility for the original Python implementation. (The Python implementation ignores invalid indices.)\r\n   Can we accept the backward compatibility?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-28T11:52:04.116+0000",
                    "updated": "2018-10-28T11:52:04.116+0000",
                    "started": "2018-10-28T11:52:04.115+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159716",
                    "issueId": "13194629"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@cd25cf3[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b7c03c5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fd6d35e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@34ef974a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15a8da6c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@d2f4b93[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54ba254b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1ca7ad51[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f8f7f13[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@388bc6a2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d1e3c85[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1c72c352[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Oct 28 09:22:53 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-28T09:22:52.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3638/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-27T16:03:14.000+0000",
        "updated": "2018-10-28T11:52:04.000+0000",
        "timeoriginalestimate": null,
        "description": "It's for using the feature from GLib.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Python] Move reading from Feather as Table feature to C++ from Python",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194629/comment/16666335",
                    "id": "16666335",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 2853\n[https://github.com/apache/arrow/pull/2853]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-10-28T09:22:53.020+0000",
                    "updated": "2018-10-28T09:22:53.020+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zptz:",
        "customfield_12314139": null
    }
}