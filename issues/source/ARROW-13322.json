{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13389370",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370",
    "key": "ARROW-13322",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=augustoasilva",
            "name": "augustoasilva",
            "key": "augustoasilva",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Augusto Alves Silva",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=augustoasilva",
            "name": "augustoasilva",
            "key": "augustoasilva",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Augusto Alves Silva",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13322/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/621943",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva opened a new pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711\n\n\n   Converts the number of seconds from unix epoch (1970-01-01 00:00:00 UTC) to a string representing the timestamp of that moment in the current system time zone in the format of \"1970-01-01 00:00:00\".\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-13T10:57:39.805+0000",
                    "updated": "2021-07-13T10:57:39.805+0000",
                    "started": "2021-07-13T10:57:39.805+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621943",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/621944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#issuecomment-878988685\n\n\n   https://issues.apache.org/jira/browse/ARROW-13322\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-13T10:58:02.952+0000",
                    "updated": "2021-07-13T10:58:02.952+0000",
                    "started": "2021-07-13T10:58:02.951+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621944",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/622458",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#issuecomment-879806994\n\n\n   @anthonylouisbsb could you review this PR?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-14T11:16:44.483+0000",
                    "updated": "2021-07-14T11:16:44.483+0000",
                    "started": "2021-07-14T11:16:44.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622458",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/622576",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb commented on a change in pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#discussion_r669769114\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n+  bool match = std::regex_match(pattern, std::regex(regex_format));\n+\n+  if (!match) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // length from pattern\n+  int res = 0;\n+\n+  switch (pattern_len) {\n+    // yyyy\n+    case 4:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64, year);\n+      break;\n+    // yyyy-MM\n+    case 7:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64 \"-%02\" PRId64, year,\n+                     month);\n+      break;\n+    // yyyy-MM-dd\n+    case 10:\n\nReview comment:\n       What happens if the user defines a pattern like this: `dd-MM-yyyy`, the method will process it correctly?\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n\nReview comment:\n       I think that regex does not cover all possible patterns that function can receive, like: `MM-yyyy-dd`.\r\n   \r\n   The [Hive](https://github.com/apache/hive/blob/a2d50efecdeb066b767ce0ae0850103d5ee35933/hplsql/src/main/java/org/apache/hive/hplsql/functions/FunctionDatetime.java#L173) code use an external library to process that result. I think you should do the same thing,\r\n   \r\n   [Strftime](https://www.cplusplus.com/reference/ctime/strftime/) is an example of a library that you can use to format the output of a time.\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n\nReview comment:\n       This function you had created is very similar to [this other one](https://github.com/apache/arrow/blob/f1a7b0d765ad925cc764ebd3e512f02bcdedfd41/cpp/src/gandiva/precompiled/time.cc#L778). If they are equal, I think you do not need to repeat the code, just add an alias in the function registry for the existent function\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n+  bool match = std::regex_match(pattern, std::regex(regex_format));\n\nReview comment:\n       You should move this function to gdv_stubs and must use the RE2 library to process the regex\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n+  bool match = std::regex_match(pattern, std::regex(regex_format));\n+\n+  if (!match) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // length from pattern\n+  int res = 0;\n+\n+  switch (pattern_len) {\n+    // yyyy\n+    case 4:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64, year);\n+      break;\n+    // yyyy-MM\n+    case 7:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64 \"-%02\" PRId64, year,\n+                     month);\n+      break;\n+    // yyyy-MM-dd\n+    case 10:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64, year, month, day);\n+      break;\n+    // yyyy-MM-dd hh\n+    case 13:\n\nReview comment:\n       The same case above, if the user define a different pattern with the same length: `dd-MM-yyyy hh`\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n+  bool match = std::regex_match(pattern, std::regex(regex_format));\n+\n+  if (!match) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // length from pattern\n+  int res = 0;\n+\n+  switch (pattern_len) {\n+    // yyyy\n+    case 4:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64, year);\n+      break;\n+    // yyyy-MM\n+    case 7:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64 \"-%02\" PRId64, year,\n+                     month);\n+      break;\n+    // yyyy-MM-dd\n+    case 10:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64, year, month, day);\n+      break;\n+    // yyyy-MM-dd hh\n+    case 13:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64, year, month,\n+                     day, hour);\n+      break;\n+    // yyyy-MM-dd hh:mm\n+    case 16:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64,\n+                     year, month, day, hour, minute);\n+      break;\n+    // yyyy-MM-dd hh:mm:ss\n+    case 19:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+      break;\n+    // yyyy-MM-dd hh:mm:ss.sss\n+    case 23:\n\nReview comment:\n       Ditto\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n+  bool match = std::regex_match(pattern, std::regex(regex_format));\n+\n+  if (!match) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // length from pattern\n+  int res = 0;\n+\n+  switch (pattern_len) {\n+    // yyyy\n+    case 4:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64, year);\n+      break;\n+    // yyyy-MM\n+    case 7:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64 \"-%02\" PRId64, year,\n+                     month);\n+      break;\n+    // yyyy-MM-dd\n+    case 10:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64, year, month, day);\n+      break;\n+    // yyyy-MM-dd hh\n+    case 13:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64, year, month,\n+                     day, hour);\n+      break;\n+    // yyyy-MM-dd hh:mm\n+    case 16:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64,\n+                     year, month, day, hour, minute);\n+      break;\n+    // yyyy-MM-dd hh:mm:ss\n+    case 19:\n\nReview comment:\n       Ditto\n\n##########\nFile path: cpp/src/gandiva/precompiled/time_test.cc\n##########\n@@ -839,4 +839,86 @@ TEST(TestTime, TestToTimeNumeric) {\n   EXPECT_EQ(expected_output, to_time_float64(3601.500));\n }\n \n-}  // namespace gandiva\n+TEST(TestTime, TestFromUnixtimeWithoutPattern) {\n\nReview comment:\n       Create some integrated tests for this function in Java or in the `tests` folder\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n+  bool match = std::regex_match(pattern, std::regex(regex_format));\n+\n+  if (!match) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // length from pattern\n+  int res = 0;\n+\n+  switch (pattern_len) {\n+    // yyyy\n+    case 4:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64, year);\n+      break;\n+    // yyyy-MM\n+    case 7:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64 \"-%02\" PRId64, year,\n+                     month);\n+      break;\n+    // yyyy-MM-dd\n+    case 10:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64, year, month, day);\n+      break;\n+    // yyyy-MM-dd hh\n+    case 13:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64, year, month,\n+                     day, hour);\n+      break;\n+    // yyyy-MM-dd hh:mm\n+    case 16:\n\nReview comment:\n       Ditto\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-14T16:43:14.432+0000",
                    "updated": "2021-07-14T16:43:14.432+0000",
                    "started": "2021-07-14T16:43:14.432+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622576",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/622762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#discussion_r669989632\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n\nReview comment:\n       They are similar, but the from_unixtime does not has the seconds' fractions. Also, from_unixtime without the pattern the size is fixed. I think I could call the one that you have mentioned inside it to not duplicate the code.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-14T22:13:12.265+0000",
                    "updated": "2021-07-14T22:13:12.265+0000",
                    "started": "2021-07-14T22:13:12.264+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622762",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/622763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#discussion_r669990486\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n+  bool match = std::regex_match(pattern, std::regex(regex_format));\n\nReview comment:\n       Ok, I will do it.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-14T22:15:06.864+0000",
                    "updated": "2021-07-14T22:15:06.864+0000",
                    "started": "2021-07-14T22:15:06.864+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622763",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/622764",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#discussion_r669990651\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n+  bool match = std::regex_match(pattern, std::regex(regex_format));\n+\n+  if (!match) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // length from pattern\n+  int res = 0;\n+\n+  switch (pattern_len) {\n+    // yyyy\n+    case 4:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64, year);\n+      break;\n+    // yyyy-MM\n+    case 7:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64 \"-%02\" PRId64, year,\n+                     month);\n+      break;\n+    // yyyy-MM-dd\n+    case 10:\n\nReview comment:\n       Yes, the comment was misplaced.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-14T22:15:31.863+0000",
                    "updated": "2021-07-14T22:15:31.863+0000",
                    "started": "2021-07-14T22:15:31.863+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622764",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/622766",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#discussion_r669990651\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n+  bool match = std::regex_match(pattern, std::regex(regex_format));\n+\n+  if (!match) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // length from pattern\n+  int res = 0;\n+\n+  switch (pattern_len) {\n+    // yyyy\n+    case 4:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64, year);\n+      break;\n+    // yyyy-MM\n+    case 7:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64 \"-%02\" PRId64, year,\n+                     month);\n+      break;\n+    // yyyy-MM-dd\n+    case 10:\n\nReview comment:\n       No, I focused mainly on the first pattern.\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n+  bool match = std::regex_match(pattern, std::regex(regex_format));\n+\n+  if (!match) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // length from pattern\n+  int res = 0;\n+\n+  switch (pattern_len) {\n+    // yyyy\n+    case 4:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64, year);\n+      break;\n+    // yyyy-MM\n+    case 7:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64 \"-%02\" PRId64, year,\n+                     month);\n+      break;\n+    // yyyy-MM-dd\n+    case 10:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64, year, month, day);\n+      break;\n+    // yyyy-MM-dd hh\n+    case 13:\n\nReview comment:\n       No, I focused mainly on the first pattern.\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n+  bool match = std::regex_match(pattern, std::regex(regex_format));\n+\n+  if (!match) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // length from pattern\n+  int res = 0;\n+\n+  switch (pattern_len) {\n+    // yyyy\n+    case 4:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64, year);\n+      break;\n+    // yyyy-MM\n+    case 7:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64 \"-%02\" PRId64, year,\n+                     month);\n+      break;\n+    // yyyy-MM-dd\n+    case 10:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64, year, month, day);\n+      break;\n+    // yyyy-MM-dd hh\n+    case 13:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64, year, month,\n+                     day, hour);\n+      break;\n+    // yyyy-MM-dd hh:mm\n+    case 16:\n\nReview comment:\n       No, I focused mainly on the first pattern.\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n+  bool match = std::regex_match(pattern, std::regex(regex_format));\n+\n+  if (!match) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // length from pattern\n+  int res = 0;\n+\n+  switch (pattern_len) {\n+    // yyyy\n+    case 4:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64, year);\n+      break;\n+    // yyyy-MM\n+    case 7:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64 \"-%02\" PRId64, year,\n+                     month);\n+      break;\n+    // yyyy-MM-dd\n+    case 10:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64, year, month, day);\n+      break;\n+    // yyyy-MM-dd hh\n+    case 13:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64, year, month,\n+                     day, hour);\n+      break;\n+    // yyyy-MM-dd hh:mm\n+    case 16:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64,\n+                     year, month, day, hour, minute);\n+      break;\n+    // yyyy-MM-dd hh:mm:ss\n+    case 19:\n\nReview comment:\n       No, I focused mainly on the first pattern.\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n+  bool match = std::regex_match(pattern, std::regex(regex_format));\n+\n+  if (!match) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // length from pattern\n+  int res = 0;\n+\n+  switch (pattern_len) {\n+    // yyyy\n+    case 4:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64, year);\n+      break;\n+    // yyyy-MM\n+    case 7:\n+      res = snprintf(char_buffer, char_buffer_length, \"%04\" PRId64 \"-%02\" PRId64, year,\n+                     month);\n+      break;\n+    // yyyy-MM-dd\n+    case 10:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64, year, month, day);\n+      break;\n+    // yyyy-MM-dd hh\n+    case 13:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64, year, month,\n+                     day, hour);\n+      break;\n+    // yyyy-MM-dd hh:mm\n+    case 16:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64,\n+                     year, month, day, hour, minute);\n+      break;\n+    // yyyy-MM-dd hh:mm:ss\n+    case 19:\n+      res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+      break;\n+    // yyyy-MM-dd hh:mm:ss.sss\n+    case 23:\n\nReview comment:\n       No, I focused mainly on the first pattern.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-14T22:16:30.449+0000",
                    "updated": "2021-07-14T22:16:30.449+0000",
                    "started": "2021-07-14T22:16:30.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622766",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/622768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#discussion_r669991187\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/time_test.cc\n##########\n@@ -839,4 +839,86 @@ TEST(TestTime, TestToTimeNumeric) {\n   EXPECT_EQ(expected_output, to_time_float64(3601.500));\n }\n \n-}  // namespace gandiva\n+TEST(TestTime, TestFromUnixtimeWithoutPattern) {\n\nReview comment:\n       Ok, will do it.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-14T22:16:45.015+0000",
                    "updated": "2021-07-14T22:16:45.015+0000",
                    "started": "2021-07-14T22:16:45.015+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622768",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/622769",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#discussion_r669991533\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/time.cc\n##########\n@@ -841,6 +843,161 @@ gdv_int64 castBIGINT_daytimeinterval(gdv_day_time_interval in) {\n          extractDay_daytimeinterval(in) * MILLIS_IN_DAY;\n }\n \n+FORCE_INLINE\n+const char* from_unixtime_int64(gdv_int64 context, gdv_timestamp in, gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+\n+  static const int kTimeStampStringLen = 19;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  // yyyy-MM-dd hh:mm:ss\n+  int res = snprintf(char_buffer, char_buffer_length,\n+                     \"%04\" PRId64 \"-%02\" PRId64 \"-%02\" PRId64 \" %02\" PRId64 \":%02\" PRId64\n+                     \":%02\" PRId64,\n+                     year, month, day, hour, minute, second);\n+  if (res < 0) {\n+    gdv_fn_context_set_error_msg(context, \"Could not format the timestamp\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  *out_len = kTimeStampStringLen;\n+\n+  if (*out_len <= 0) {\n+    if (*out_len < 0) {\n+      gdv_fn_context_set_error_msg(context, \"Length of output string cannot be negative\");\n+    }\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  char* ret = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (ret == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(ret, char_buffer, *out_len);\n+  return ret;\n+}\n+\n+FORCE_INLINE\n+const char* from_unixtime_int64_utf8(gdv_int64 context, gdv_timestamp in,\n+                                     const char* pattern, gdv_int32 pattern_len,\n+                                     gdv_int32* out_len) {\n+  gdv_int64 year = extractYear_timestamp(in);\n+  gdv_int64 month = extractMonth_timestamp(in);\n+  gdv_int64 day = extractDay_timestamp(in);\n+  gdv_int64 hour = extractHour_timestamp(in);\n+  gdv_int64 minute = extractMinute_timestamp(in);\n+  gdv_int64 second = extractSecond_timestamp(in);\n+  gdv_int64 millis = in % MILLIS_IN_SEC;\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context, \"Invalid allowed pattern size\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  static const int kTimeStampStringLen = pattern_len;\n+  const int char_buffer_length = kTimeStampStringLen + 1;  // snprintf adds \\0\n+  char char_buffer[char_buffer_length];\n+\n+  const char* regex_format =\n+      \"y{4}(-[M]{2})?+.*?(-[d]{2})?+.*?( [h]{2})?+.*?\"\n+      \"(:[mm]{2})?+.*?(:[s]{2})?+.*?(.[s]{3})?+.*?\";\n\nReview comment:\n       Ok, I will take a look further within the already used libs on the project to process more patterns.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-14T22:17:40.949+0000",
                    "updated": "2021-07-14T22:17:40.949+0000",
                    "started": "2021-07-14T22:17:40.949+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622769",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/623563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb commented on a change in pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#discussion_r671204429\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -767,6 +769,113 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n }\n }\n \n+GANDIVA_EXPORT\n+const char* gdv_fn_from_unixtime_int64(int64_t context, gdv_timestamp in,\n+                                       int32_t* out_len) {\n+  const char* pattern = \"yyyy-MM-dd hh:mm:ss\";\n+  const int length = strlen(pattern);\n+  const char* ret =\n+      gdv_fn_from_unixtime_int64_utf8(context, in, pattern, length, out_len);\n+\n+  return ret;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_from_unixtime_int64_utf8(int64_t context, gdv_timestamp in,\n+                                            const char* pattern, int32_t pattern_len,\n+                                            int32_t* out_len) {\n+  // Patter dictionary to translate a given pattern like yyyy-MM-dd to\n+  // a pattern like %Y-%m-%d that the std::strftime can translate.\n+  std::map<std::string, std::string> pattern_dict{\n+      {\"YYYY\", \"%Y\"},  // converts 'YYYY' to full year, eg. 1970\n+      {\"YY\", \"%y\"},    // converts 'YY' to final two-digits year, eg. 70\n+      {\"yyyy\", \"%Y\"},  // converts 'YYYY' to full year, eg. 1970\n+      {\"yy\", \"%y\"},    // converts 'YY' to final two-digits year, eg. 70\n+      {\"MM\", \"%m\"},    // converts 'MM' to month digits, eg. 10\n+      {\"M\", \"%b\"},     // converts 'M' to month abbreviation, eg. Oct\n+      {\"Mm\", \"%B\"},    // converts 'Mm' to month abbreviation, eg. October\n+      {\"d\", \"%e\"},  // converts 'd' to day of the month as a decimal number (range [1,31])\n+      {\"dd\",\n+       \"%d\"},  // converts 'dd' to day of the month as a decimal number (range [01,31])\n+      {\"h\",\n+       \"%I\"},  // converts 'h' hour as a decimal number, 12 hour clock (range [01-12])\n+      {\"hh\",\n+       \"%H\"},  // converts 'hh' to hour as a decimal number, 24 hour clock (range [00-23])\n+      {\"m\", \"%M\"},   // converts 'm' to minute as a decimal number (range [00,59])\n+      {\"mm\", \"%M\"},  // converts 'mm' minute as a decimal number (range [00,59])\n+      {\"s\", \"%S\"},   // converts 's' to second as a decimal number (range [00,60])\n+      {\"ss\", \"%S\"},  // converts 'ss' to second as a decimal number (range [00,60])\n+  };\n+\n+  if (pattern_len <= 0) {\n+    gdv_fn_context_set_error_msg(context,\n+                                 \"Invalid pattern, it must have at least 1 char\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n\nReview comment:\n       Is the pattern Literal? If it is Literal you can follow the example of the [TO_DATE](https://github.com/apache/arrow/blob/master/cpp/src/gandiva/to_date_holder.cc) function and move this process to a holder to avoid instantiate and convert this map for each value\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -767,6 +769,113 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n }\n }\n \n+GANDIVA_EXPORT\n+const char* gdv_fn_from_unixtime_int64(int64_t context, gdv_timestamp in,\n+                                       int32_t* out_len) {\n+  const char* pattern = \"yyyy-MM-dd hh:mm:ss\";\n+  const int length = strlen(pattern);\n\nReview comment:\n       I think you should insert the pattern length manually and change the name to `pattern_len`.\r\n   \r\n   I think magic numbers are bad when they are inserted without context, but in that case you know that number refers to the pattern above. It would avoid a call to the `strlen` function too. \n\n##########\nFile path: cpp/src/gandiva/tests/projector_test.cc\n##########\n@@ -1353,4 +1353,51 @@ TEST_F(TestProjector, TestBinRepresentation) {\n   EXPECT_ARROW_ARRAY_EQUALS(exp, outputs.at(0));\n }\n \n+TEST_F(TestProjector, TestFromUnixTime) {\n+  // schema for input fields\n+  auto field0 = field(\"f0\", arrow::int64());\n+  auto field1 = field(\"f1\", arrow::utf8());\n+  auto schema = arrow::schema({field0, field1});\n+\n+  // output fields\n+  auto field_from_unixtime = field(\"from_unixtime\", arrow::utf8());\n+\n+  // Build expression\n+  auto from_unixtime_expr = TreeExprBuilder::MakeExpression(\n+      \"from_unixtime\", {field0, field1}, field_from_unixtime);\n+\n+  std::shared_ptr<Projector> projector;\n+  auto status =\n+      Projector::Make(schema, {from_unixtime_expr}, TestConfiguration(), &projector);\n+  EXPECT_TRUE(status.ok()) << status.message();\n+\n+  // Create a row-batch with some sample data\n+  int64_t epoch_timestamp1 = 1107428640;  // 2005-02-03 11:04:00\n+  int64_t epoch_timestamp2 = 1338975201;  // 2012-06-06 09:33:21\n+  int64_t epoch_timestamp3 = 1543449599;  // 2018-11-28 23:59:59\n+\n+  std::string pattern1 = \"yyyy-MM-dd hh:mm\";\n+  std::string pattern2 = \"dd-M-yy\";\n+  std::string pattern3 = \"hh:mm:ss dd-Mm-YYYY\";\n+\n+  int num_records = 3;\n+  auto array0 = MakeArrowArrayInt64(\n+      {epoch_timestamp1, epoch_timestamp2, epoch_timestamp3}, {true, true, true});\n+  auto array1 = MakeArrowArrayUtf8({pattern1, pattern2, pattern3}, {true, true, true});\n+  // expected output\n+  auto exp_from_unixtime = MakeArrowArrayUtf8(\n+      {\"2005-02-03 11:04\", \"06-Jun-12\", \"23:59:59 28-November-2018\"}, {true, true, true});\n\nReview comment:\n       The date functions in the Gandiva usually consider the patterns as Literal(see the `TO_DATE` function). That one that you added has a different behavior?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-16T12:24:51.222+0000",
                    "updated": "2021-07-16T12:24:51.222+0000",
                    "started": "2021-07-16T12:24:51.222+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "623563",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/623915",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#discussion_r671549496\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -767,6 +769,113 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n }\n }\n \n+GANDIVA_EXPORT\n+const char* gdv_fn_from_unixtime_int64(int64_t context, gdv_timestamp in,\n+                                       int32_t* out_len) {\n+  const char* pattern = \"yyyy-MM-dd hh:mm:ss\";\n+  const int length = strlen(pattern);\n\nReview comment:\n       It make senses, I will apply your suggestion.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-16T22:13:53.494+0000",
                    "updated": "2021-07-16T22:13:53.494+0000",
                    "started": "2021-07-16T22:13:53.493+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "623915",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/624711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#issuecomment-882961161\n\n\n   Moving this PR to https://github.com/apache/arrow/pull/9877\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-20T00:52:05.701+0000",
                    "updated": "2021-07-20T00:52:05.701+0000",
                    "started": "2021-07-20T00:52:05.701+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "624711",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/624712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva closed pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-20T00:52:09.030+0000",
                    "updated": "2021-07-20T00:52:09.030+0000",
                    "started": "2021-07-20T00:52:09.030+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "624712",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/624879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#issuecomment-882961161\n\n\n   Moving this PR to https://github.com/apache/arrow/pull/9877\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-20T09:36:20.855+0000",
                    "updated": "2021-07-20T09:36:20.855+0000",
                    "started": "2021-07-20T09:36:20.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "624879",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/624899",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva closed pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-20T09:38:09.493+0000",
                    "updated": "2021-07-20T09:38:09.493+0000",
                    "started": "2021-07-20T09:38:09.493+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "624899",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/625276",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711#issuecomment-882961161\n\n\n   Moving this PR to https://github.com/apache/arrow/pull/9877\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-20T11:48:09.032+0000",
                    "updated": "2021-07-20T11:48:09.032+0000",
                    "started": "2021-07-20T11:48:09.032+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "625276",
                    "issueId": "13389370"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/worklog/625291",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva closed pull request #10711:\nURL: https://github.com/apache/arrow/pull/10711\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-20T11:49:43.400+0000",
                    "updated": "2021-07-20T11:49:43.400+0000",
                    "started": "2021-07-20T11:49:43.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "625291",
                    "issueId": "13389370"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@49e8bf27[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e132604[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9063fb7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2e021b95[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5023a824[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@82d7d1d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30ee1028[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@e0e6b13[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@43a1907e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2087c882[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6028e3ea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1d834a0f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Dec 14 23:42:15 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-12-14T23:42:15.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13322/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-07-13T10:53:57.000+0000",
        "updated": "2021-12-14T23:42:15.000+0000",
        "timeoriginalestimate": null,
        "description": "Converts the number of seconds from unix epoch (1970-01-01 00:00:00 UTC) to a string representing the timestamp of that moment in the current system time zone in the format of \"1970-01-01 00:00:00\".",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Gandiva] Add from_unixtime hive function to gandiva",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13389370/comment/17459565",
                    "id": "17459565",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=augustoasilva",
                        "name": "augustoasilva",
                        "key": "augustoasilva",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Augusto Alves Silva",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "The PR was merged to another one so this issue is closed",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=augustoasilva",
                        "name": "augustoasilva",
                        "key": "augustoasilva",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Augusto Alves Silva",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-12-14T23:42:15.908+0000",
                    "updated": "2021-12-14T23:42:15.908+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0swfs:",
        "customfield_12314139": null
    }
}