{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13265850",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850",
    "key": "ARROW-7047",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 25800,
            "total": 25800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 25800,
            "total": 25800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7047/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 51,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813\n \n \n   This allows type mismatches between scalars in filter expressions and the fields to which they are compared.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T16:47:50.014+0000",
                    "updated": "2019-11-12T16:47:50.014+0000",
                    "started": "2019-11-12T16:47:50.013+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342038",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342043",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#issuecomment-552987492\n \n \n   https://issues.apache.org/jira/browse/ARROW-7047\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T17:02:40.423+0000",
                    "updated": "2019-11-12T17:02:40.423+0000",
                    "started": "2019-11-12T17:02:40.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342043",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345665328\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -305,6 +316,36 @@ class ARROW_DS_EXPORT NotExpression final\n   Result<std::shared_ptr<DataType>> Validate(const Schema& schema) const override;\n };\n \n+/// Explicitly cast an expression to a different type\n+class ARROW_DS_EXPORT CastExpression final\n+    : public ExpressionImpl<UnaryExpression, CastExpression, ExpressionType::CAST> {\n+ public:\n+  CastExpression(std::shared_ptr<Expression> operand, std::shared_ptr<DataType> to,\n+                 compute::CastOptions options)\n+      : ExpressionImpl(std::move(operand)),\n+        to_(std::move(to)),\n+        options_(std::move(options)) {}\n+\n+  CastExpression(std::shared_ptr<Expression> operand, std::shared_ptr<Expression> like,\n \n Review comment:\n   The other expression is assumed to be evaluated against the same schema? Perhaps add a docstring?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:19.607+0000",
                    "updated": "2019-11-13T10:36:19.607+0000",
                    "started": "2019-11-13T10:36:19.606+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342510",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342511",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345673859\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -758,43 +797,107 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n-struct AccumulateFieldsVisitor {\n-  void operator()(const FieldExpression& expr) { fields.push_back(expr.name()); }\n+Result<std::shared_ptr<Expression>> InsertImplicitCasts(const Expression& expr,\n+                                                        const Schema& schema) {\n+  struct {\n+    struct Validated {\n+      std::shared_ptr<Expression> expr;\n+      std::shared_ptr<DataType> type;\n+    };\n+\n+    Result<Validated> Validate(const Expression& expr) {\n+      Validated out;\n+      ARROW_ASSIGN_OR_RAISE(out.expr, InsertImplicitCasts(expr, schema_));\n+      ARROW_ASSIGN_OR_RAISE(out.type, out.expr->Validate(schema_));\n+      return std::move(out);\n+    }\n \n-  void operator()(const NotExpression& expr) { VisitExpression(*expr.operand(), *this); }\n+    Result<std::shared_ptr<Expression>> operator()(const NotExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto op, Validate(*expr.operand()));\n \n-  void operator()(const AndExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+      if (op.type->id() != Type::BOOL) {\n+        op.expr = op.expr->CastTo(boolean()).Copy();\n+      }\n+      return not_(std::move(op.expr));\n+    }\n \n-  void operator()(const OrExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+    Result<std::shared_ptr<Expression>> operator()(const AndExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n \n-  void operator()(const ComparisonExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+      if (lhs.type->id() != Type::BOOL) {\n+        lhs.expr = lhs.expr->CastTo(boolean()).Copy();\n+      }\n+      if (rhs.type->id() != Type::BOOL) {\n+        rhs.expr = rhs.expr->CastTo(boolean()).Copy();\n+      }\n+      return and_(std::move(lhs.expr), std::move(rhs.expr));\n+    }\n \n-  template <typename E>\n-  void operator()(const E& expr) const {}\n+    Result<std::shared_ptr<Expression>> operator()(const OrExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n \n-  std::vector<std::string> fields;\n-};\n+      if (lhs.type->id() != Type::BOOL) {\n+        lhs.expr = lhs.expr->CastTo(boolean()).Copy();\n+      }\n+      if (rhs.type->id() != Type::BOOL) {\n+        rhs.expr = rhs.expr->CastTo(boolean()).Copy();\n+      }\n+      return or_(std::move(lhs.expr), std::move(rhs.expr));\n+    }\n+\n+    Result<std::shared_ptr<Expression>> operator()(const ComparisonExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n+\n+      if (lhs.type->Equals(rhs.type)) {\n+        return expr.Copy();\n+      }\n+\n+      if (lhs.expr->type() == ExpressionType::SCALAR) {\n+        lhs.expr = lhs.expr->CastTo(rhs.type).Copy();\n+      } else {\n+        rhs.expr = rhs.expr->CastTo(lhs.type).Copy();\n+      }\n+      return std::make_shared<ComparisonExpression>(expr.op(), std::move(lhs.expr),\n+                                                    std::move(rhs.expr));\n+    }\n+\n+    Result<std::shared_ptr<Expression>> operator()(const Expression& expr) const {\n+      return expr.Copy();\n+    }\n+\n+    const Schema& schema_;\n+  } visitor = {schema};\n+\n+  return VisitExpression(expr, visitor);\n \n Review comment:\n   I wonder if at some point this functionality should be implemented as a virtual function on each expression type, rather than as a visitor.\r\n   (is it planned to make it possible to define custom expressions?)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:19.813+0000",
                    "updated": "2019-11-13T10:36:19.813+0000",
                    "started": "2019-11-13T10:36:19.813+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342511",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342512",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345669552\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -758,43 +797,107 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n-struct AccumulateFieldsVisitor {\n-  void operator()(const FieldExpression& expr) { fields.push_back(expr.name()); }\n+Result<std::shared_ptr<Expression>> InsertImplicitCasts(const Expression& expr,\n+                                                        const Schema& schema) {\n+  struct {\n+    struct Validated {\n+      std::shared_ptr<Expression> expr;\n+      std::shared_ptr<DataType> type;\n+    };\n+\n+    Result<Validated> Validate(const Expression& expr) {\n+      Validated out;\n+      ARROW_ASSIGN_OR_RAISE(out.expr, InsertImplicitCasts(expr, schema_));\n+      ARROW_ASSIGN_OR_RAISE(out.type, out.expr->Validate(schema_));\n+      return std::move(out);\n \n Review comment:\n   Is `std::move` actually necessary? Is C++ able to devise that a return variable is a rvalue?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:19.878+0000",
                    "updated": "2019-11-13T10:36:19.878+0000",
                    "started": "2019-11-13T10:36:19.878+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342512",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345668364\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -502,6 +503,10 @@ std::shared_ptr<Expression> NotExpression::Assume(const Expression& given) const\n   return Copy();\n }\n \n+std::shared_ptr<Expression> CastExpression::Assume(const Expression& given) const {\n+  return std::make_shared<CastExpression>(operand_->Assume(given), to_, options_);\n \n Review comment:\n   What if `like_` is being used rather than `to_`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:20.051+0000",
                    "updated": "2019-11-13T10:36:20.051+0000",
                    "started": "2019-11-13T10:36:20.050+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342513",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342514",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345668028\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -839,6 +942,10 @@ struct TreeEvaluator::Impl {\n     return this_->Evaluate(expr, batch_);\n   }\n \n+  Result<Datum> operator()(const Expression& expr) const {\n \n Review comment:\n   Is this overload useful? Shouldn't all calls be matched against the templated overload above?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:20.258+0000",
                    "updated": "2019-11-13T10:36:20.258+0000",
                    "started": "2019-11-13T10:36:20.258+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342514",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342515",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345678702\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.cc\n ##########\n @@ -194,4 +200,138 @@ Status CheckBufferLength(const FixedSizeBinaryType* t, const std::shared_ptr<Buf\n }\n }  // namespace internal\n \n+// CastImpl(...) assumes `to` points to a non null scalar of the correct type with\n+// uninitialized value\n+\n+// error fallback\n+Status CastImpl(const Scalar& from, Scalar* to) {\n+  return Status::NotImplemented(\"casting scalars of type \", *from.type, \" to_type type \",\n+                                *to->type);\n+}\n+\n+// numeric to numeric\n+template <typename From, typename To>\n+Status CastImpl(const NumericScalar<From>& from, NumericScalar<To>* to) {\n+  to->value = static_cast<typename To::c_type>(from.value);\n+  return Status::OK();\n+}\n+\n+// numeric to boolean\n+template <typename T>\n+Status CastImpl(const NumericScalar<T>& from, BooleanScalar* to) {\n+  constexpr auto zero = static_cast<typename T::c_type>(0);\n+  to->value = from.value != zero;\n+  return Status::OK();\n+}\n+\n+// boolean to numeric\n+template <typename T>\n+Status CastImpl(const BooleanScalar& from, NumericScalar<T>* to) {\n+  to->value = static_cast<typename T::c_type>(from.value);\n+  return Status::OK();\n+}\n+\n+// string to any\n+template <typename ScalarType>\n+Status CastImpl(const StringScalar& from, ScalarType* to) {\n+  std::shared_ptr<Scalar> out;\n+  RETURN_NOT_OK(Scalar::Parse(to->type, util::string_view(*from.value), &out));\n+  to->value = std::move(checked_cast<ScalarType&>(*out).value);\n+  return Status::OK();\n+}\n+\n+// binary to string\n+template <typename T>\n+Status CastImpl(const BinaryScalar& from, StringScalar* to) {\n+  to->value = from.value;\n+  return Status::OK();\n+}\n+\n+// numeric to string\n+template <typename T>\n+Status CastImpl(const NumericScalar<T>& from, StringScalar* to) {\n+  to->value = Buffer::FromString(std::to_string(from.value));\n+  return Status::OK();\n+}\n+\n+// boolean to string\n+Status CastImpl(const BooleanScalar& from, StringScalar* to) {\n+  to->value = Buffer::FromString(from.value ? \"true\" : \"false\");\n+  return Status::OK();\n+}\n+\n+template <typename ToType>\n+struct UnpackFromType {\n \n Review comment:\n   Why is it called \"unpack\"?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:20.265+0000",
                    "updated": "2019-11-13T10:36:20.265+0000",
                    "started": "2019-11-13T10:36:20.265+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342515",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342516",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345677259\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.cc\n ##########\n @@ -194,4 +200,138 @@ Status CheckBufferLength(const FixedSizeBinaryType* t, const std::shared_ptr<Buf\n }\n }  // namespace internal\n \n+// CastImpl(...) assumes `to` points to a non null scalar of the correct type with\n+// uninitialized value\n+\n+// error fallback\n+Status CastImpl(const Scalar& from, Scalar* to) {\n+  return Status::NotImplemented(\"casting scalars of type \", *from.type, \" to_type type \",\n \n Review comment:\n   Typo: \"to type\", not \"to_type type\".\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:20.316+0000",
                    "updated": "2019-11-13T10:36:20.316+0000",
                    "started": "2019-11-13T10:36:20.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342516",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342517",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345677009\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.cc\n ##########\n @@ -194,4 +200,138 @@ Status CheckBufferLength(const FixedSizeBinaryType* t, const std::shared_ptr<Buf\n }\n }  // namespace internal\n \n+// CastImpl(...) assumes `to` points to a non null scalar of the correct type with\n+// uninitialized value\n+\n+// error fallback\n+Status CastImpl(const Scalar& from, Scalar* to) {\n+  return Status::NotImplemented(\"casting scalars of type \", *from.type, \" to_type type \",\n+                                *to->type);\n+}\n+\n+// numeric to numeric\n+template <typename From, typename To>\n+Status CastImpl(const NumericScalar<From>& from, NumericScalar<To>* to) {\n+  to->value = static_cast<typename To::c_type>(from.value);\n+  return Status::OK();\n+}\n+\n+// numeric to boolean\n+template <typename T>\n+Status CastImpl(const NumericScalar<T>& from, BooleanScalar* to) {\n+  constexpr auto zero = static_cast<typename T::c_type>(0);\n+  to->value = from.value != zero;\n+  return Status::OK();\n+}\n+\n+// boolean to numeric\n+template <typename T>\n+Status CastImpl(const BooleanScalar& from, NumericScalar<T>* to) {\n+  to->value = static_cast<typename T::c_type>(from.value);\n+  return Status::OK();\n+}\n+\n+// string to any\n+template <typename ScalarType>\n+Status CastImpl(const StringScalar& from, ScalarType* to) {\n+  std::shared_ptr<Scalar> out;\n+  RETURN_NOT_OK(Scalar::Parse(to->type, util::string_view(*from.value), &out));\n+  to->value = std::move(checked_cast<ScalarType&>(*out).value);\n+  return Status::OK();\n+}\n+\n+// binary to string\n+template <typename T>\n \n Review comment:\n   Parameter T isn't used here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:20.332+0000",
                    "updated": "2019-11-13T10:36:20.332+0000",
                    "started": "2019-11-13T10:36:20.332+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342517",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342518",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345669801\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -758,43 +797,107 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n-struct AccumulateFieldsVisitor {\n-  void operator()(const FieldExpression& expr) { fields.push_back(expr.name()); }\n+Result<std::shared_ptr<Expression>> InsertImplicitCasts(const Expression& expr,\n+                                                        const Schema& schema) {\n+  struct {\n+    struct Validated {\n+      std::shared_ptr<Expression> expr;\n+      std::shared_ptr<DataType> type;\n+    };\n+\n+    Result<Validated> Validate(const Expression& expr) {\n \n Review comment:\n   Perhaps this is the kind of case where returning a Status and passing two out-parameters is simpler ;-)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:20.335+0000",
                    "updated": "2019-11-13T10:36:20.335+0000",
                    "started": "2019-11-13T10:36:20.335+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342518",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342519",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345676574\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.cc\n ##########\n @@ -194,4 +200,138 @@ Status CheckBufferLength(const FixedSizeBinaryType* t, const std::shared_ptr<Buf\n }\n }  // namespace internal\n \n+// CastImpl(...) assumes `to` points to a non null scalar of the correct type with\n+// uninitialized value\n+\n+// error fallback\n+Status CastImpl(const Scalar& from, Scalar* to) {\n+  return Status::NotImplemented(\"casting scalars of type \", *from.type, \" to_type type \",\n+                                *to->type);\n+}\n+\n+// numeric to numeric\n+template <typename From, typename To>\n+Status CastImpl(const NumericScalar<From>& from, NumericScalar<To>* to) {\n+  to->value = static_cast<typename To::c_type>(from.value);\n+  return Status::OK();\n+}\n+\n+// numeric to boolean\n+template <typename T>\n+Status CastImpl(const NumericScalar<T>& from, BooleanScalar* to) {\n+  constexpr auto zero = static_cast<typename T::c_type>(0);\n+  to->value = from.value != zero;\n+  return Status::OK();\n+}\n+\n+// boolean to numeric\n+template <typename T>\n+Status CastImpl(const BooleanScalar& from, NumericScalar<T>* to) {\n+  to->value = static_cast<typename T::c_type>(from.value);\n+  return Status::OK();\n+}\n+\n+// string to any\n+template <typename ScalarType>\n+Status CastImpl(const StringScalar& from, ScalarType* to) {\n+  std::shared_ptr<Scalar> out;\n+  RETURN_NOT_OK(Scalar::Parse(to->type, util::string_view(*from.value), &out));\n+  to->value = std::move(checked_cast<ScalarType&>(*out).value);\n+  return Status::OK();\n+}\n+\n+// binary to string\n+template <typename T>\n+Status CastImpl(const BinaryScalar& from, StringScalar* to) {\n+  to->value = from.value;\n+  return Status::OK();\n+}\n+\n+// numeric to string\n+template <typename T>\n+Status CastImpl(const NumericScalar<T>& from, StringScalar* to) {\n+  to->value = Buffer::FromString(std::to_string(from.value));\n \n Review comment:\n   Should use `utils/formatting.h` instead. `std::to_string` is locale-dependent.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:20.335+0000",
                    "updated": "2019-11-13T10:36:20.335+0000",
                    "started": "2019-11-13T10:36:20.335+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342519",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342520",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345681297\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter_test.cc\n ##########\n @@ -251,6 +251,76 @@ TEST_F(FilterTest, Basics) {\n   ])\");\n }\n \n+TEST_F(FilterTest, Cast) {\n+  ASSERT_RAISES(TypeError, (\"a\"_ == double(1.0)).Validate(Schema({field(\"a\", int32())})));\n+\n+  AssertFilter(\"a\"_.CastTo(float64()) == double(1.0),\n+               {field(\"a\", int32()), field(\"b\", float64())}, R\"([\n+      {\"a\": 0, \"b\": -0.1, \"in\": 0},\n+      {\"a\": 0, \"b\":  0.3, \"in\": 0},\n+      {\"a\": 1, \"b\":  0.2, \"in\": 1},\n+      {\"a\": 2, \"b\": -0.1, \"in\": 0},\n+      {\"a\": 0, \"b\":  0.1, \"in\": 0},\n+      {\"a\": 0, \"b\": null, \"in\": 0},\n+      {\"a\": 1, \"b\":  1.0, \"in\": 1}\n+  ])\");\n+\n+  AssertFilter(\"a\"_ == scalar(0.6)->CastLike(\"a\"_),\n+               {field(\"a\", int32()), field(\"b\", float64())}, R\"([\n+      {\"a\": 0, \"b\": -0.1, \"in\": 1},\n+      {\"a\": 0, \"b\":  0.3, \"in\": 1},\n+      {\"a\": 1, \"b\":  0.2, \"in\": 0},\n+      {\"a\": 2, \"b\": -0.1, \"in\": 0},\n+      {\"a\": 0, \"b\":  0.1, \"in\": 1},\n+      {\"a\": 0, \"b\": null, \"in\": 1},\n+      {\"a\": 1, \"b\":  1.0, \"in\": 0}\n+  ])\");\n+\n+  AssertFilter(\"a\"_.CastLike(\"b\"_) == \"b\"_, {field(\"a\", int32()), field(\"b\", float64())},\n+               R\"([\n+      {\"a\": 0, \"b\": -0.1, \"in\": 0},\n+      {\"a\": 0, \"b\":  0.0, \"in\": 1},\n+      {\"a\": 1, \"b\":  1.0, \"in\": 1},\n+      {\"a\": 2, \"b\": -0.1, \"in\": 0},\n+      {\"a\": 0, \"b\":  0.1, \"in\": 0},\n+      {\"a\": 2, \"b\": null, \"in\": null},\n+      {\"a\": 1, \"b\":  1.0, \"in\": 1}\n+  ])\");\n+}\n+\n+TEST_F(ExpressionsTest, ImplicitCast) {\n+  ASSERT_OK_AND_ASSIGN(auto filter,\n+                       InsertImplicitCasts(\"a\"_ == 0.0, Schema({field(\"a\", int32())})));\n+  ASSERT_EQ(E{filter}, E{\"a\"_ == scalar(0.0)->CastTo(int32())});\n \n Review comment:\n   This is `scalar(int32_t(0))`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:20.359+0000",
                    "updated": "2019-11-13T10:36:20.359+0000",
                    "started": "2019-11-13T10:36:20.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342520",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342521",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345681758\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter_test.cc\n ##########\n @@ -251,6 +251,76 @@ TEST_F(FilterTest, Basics) {\n   ])\");\n }\n \n+TEST_F(FilterTest, Cast) {\n+  ASSERT_RAISES(TypeError, (\"a\"_ == double(1.0)).Validate(Schema({field(\"a\", int32())})));\n+\n+  AssertFilter(\"a\"_.CastTo(float64()) == double(1.0),\n+               {field(\"a\", int32()), field(\"b\", float64())}, R\"([\n+      {\"a\": 0, \"b\": -0.1, \"in\": 0},\n+      {\"a\": 0, \"b\":  0.3, \"in\": 0},\n+      {\"a\": 1, \"b\":  0.2, \"in\": 1},\n+      {\"a\": 2, \"b\": -0.1, \"in\": 0},\n+      {\"a\": 0, \"b\":  0.1, \"in\": 0},\n+      {\"a\": 0, \"b\": null, \"in\": 0},\n+      {\"a\": 1, \"b\":  1.0, \"in\": 1}\n+  ])\");\n+\n+  AssertFilter(\"a\"_ == scalar(0.6)->CastLike(\"a\"_),\n+               {field(\"a\", int32()), field(\"b\", float64())}, R\"([\n+      {\"a\": 0, \"b\": -0.1, \"in\": 1},\n+      {\"a\": 0, \"b\":  0.3, \"in\": 1},\n+      {\"a\": 1, \"b\":  0.2, \"in\": 0},\n+      {\"a\": 2, \"b\": -0.1, \"in\": 0},\n+      {\"a\": 0, \"b\":  0.1, \"in\": 1},\n+      {\"a\": 0, \"b\": null, \"in\": 1},\n+      {\"a\": 1, \"b\":  1.0, \"in\": 0}\n+  ])\");\n+\n+  AssertFilter(\"a\"_.CastLike(\"b\"_) == \"b\"_, {field(\"a\", int32()), field(\"b\", float64())},\n+               R\"([\n+      {\"a\": 0, \"b\": -0.1, \"in\": 0},\n+      {\"a\": 0, \"b\":  0.0, \"in\": 1},\n+      {\"a\": 1, \"b\":  1.0, \"in\": 1},\n+      {\"a\": 2, \"b\": -0.1, \"in\": 0},\n+      {\"a\": 0, \"b\":  0.1, \"in\": 0},\n+      {\"a\": 2, \"b\": null, \"in\": null},\n+      {\"a\": 1, \"b\":  1.0, \"in\": 1}\n+  ])\");\n+}\n+\n+TEST_F(ExpressionsTest, ImplicitCast) {\n+  ASSERT_OK_AND_ASSIGN(auto filter,\n+                       InsertImplicitCasts(\"a\"_ == 0.0, Schema({field(\"a\", int32())})));\n+  ASSERT_EQ(E{filter}, E{\"a\"_ == scalar(0.0)->CastTo(int32())});\n+\n+  auto ns = timestamp(TimeUnit::NANO);\n+  ASSERT_OK_AND_ASSIGN(filter,\n+                       InsertImplicitCasts(\"a\"_ == \"1990\", Schema({field(\"a\", ns)})));\n+  ASSERT_EQ(E{filter}, E{\"a\"_ == scalar(\"1990\")->CastTo(ns)});\n+\n+  ASSERT_OK_AND_ASSIGN(\n+      filter, InsertImplicitCasts(\"a\"_ == \"1990\" and \"b\"_ == \"3\",\n+                                  Schema({field(\"a\", ns), field(\"b\", int32())})));\n+  ASSERT_EQ(E{filter}, E{\"a\"_ == scalar(\"1990\")->CastTo(ns) and\n+                         \"b\"_ == scalar(\"3\")->CastTo(int32())});\n \n Review comment:\n   The string \"3\" is implicitly cast to an int? That doesn't sound desirable.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:20.379+0000",
                    "updated": "2019-11-13T10:36:20.379+0000",
                    "started": "2019-11-13T10:36:20.379+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342521",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342522",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345673972\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -758,43 +797,107 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n-struct AccumulateFieldsVisitor {\n-  void operator()(const FieldExpression& expr) { fields.push_back(expr.name()); }\n+Result<std::shared_ptr<Expression>> InsertImplicitCasts(const Expression& expr,\n+                                                        const Schema& schema) {\n+  struct {\n+    struct Validated {\n+      std::shared_ptr<Expression> expr;\n+      std::shared_ptr<DataType> type;\n+    };\n+\n+    Result<Validated> Validate(const Expression& expr) {\n+      Validated out;\n+      ARROW_ASSIGN_OR_RAISE(out.expr, InsertImplicitCasts(expr, schema_));\n+      ARROW_ASSIGN_OR_RAISE(out.type, out.expr->Validate(schema_));\n+      return std::move(out);\n+    }\n \n-  void operator()(const NotExpression& expr) { VisitExpression(*expr.operand(), *this); }\n+    Result<std::shared_ptr<Expression>> operator()(const NotExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto op, Validate(*expr.operand()));\n \n-  void operator()(const AndExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+      if (op.type->id() != Type::BOOL) {\n+        op.expr = op.expr->CastTo(boolean()).Copy();\n+      }\n+      return not_(std::move(op.expr));\n+    }\n \n-  void operator()(const OrExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+    Result<std::shared_ptr<Expression>> operator()(const AndExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n \n-  void operator()(const ComparisonExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+      if (lhs.type->id() != Type::BOOL) {\n+        lhs.expr = lhs.expr->CastTo(boolean()).Copy();\n+      }\n+      if (rhs.type->id() != Type::BOOL) {\n+        rhs.expr = rhs.expr->CastTo(boolean()).Copy();\n+      }\n+      return and_(std::move(lhs.expr), std::move(rhs.expr));\n+    }\n \n-  template <typename E>\n-  void operator()(const E& expr) const {}\n+    Result<std::shared_ptr<Expression>> operator()(const OrExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n \n-  std::vector<std::string> fields;\n-};\n+      if (lhs.type->id() != Type::BOOL) {\n+        lhs.expr = lhs.expr->CastTo(boolean()).Copy();\n+      }\n+      if (rhs.type->id() != Type::BOOL) {\n+        rhs.expr = rhs.expr->CastTo(boolean()).Copy();\n+      }\n+      return or_(std::move(lhs.expr), std::move(rhs.expr));\n+    }\n+\n+    Result<std::shared_ptr<Expression>> operator()(const ComparisonExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n+\n+      if (lhs.type->Equals(rhs.type)) {\n+        return expr.Copy();\n+      }\n+\n+      if (lhs.expr->type() == ExpressionType::SCALAR) {\n+        lhs.expr = lhs.expr->CastTo(rhs.type).Copy();\n+      } else {\n+        rhs.expr = rhs.expr->CastTo(lhs.type).Copy();\n+      }\n+      return std::make_shared<ComparisonExpression>(expr.op(), std::move(lhs.expr),\n+                                                    std::move(rhs.expr));\n+    }\n+\n+    Result<std::shared_ptr<Expression>> operator()(const Expression& expr) const {\n+      return expr.Copy();\n+    }\n+\n+    const Schema& schema_;\n+  } visitor = {schema};\n+\n+  return VisitExpression(expr, visitor);\n+}\n \n std::vector<std::string> FieldsInExpression(const Expression& expr) {\n-  AccumulateFieldsVisitor visitor;\n+  struct {\n+    void operator()(const FieldExpression& expr) { fields.push_back(expr.name()); }\n+\n+    void operator()(const UnaryExpression& expr) {\n+      VisitExpression(*expr.operand(), *this);\n+    }\n+\n+    void operator()(const BinaryExpression& expr) {\n+      VisitExpression(*expr.left_operand(), *this);\n+      VisitExpression(*expr.right_operand(), *this);\n+    }\n+\n+    void operator()(const Expression&) const {}\n+\n+    std::vector<std::string> fields;\n+  } visitor;\n+\n   VisitExpression(expr, visitor);\n \n Review comment:\n   Same question here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:20.389+0000",
                    "updated": "2019-11-13T10:36:20.389+0000",
                    "started": "2019-11-13T10:36:20.389+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342522",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342523",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345679367\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.cc\n ##########\n @@ -194,4 +200,138 @@ Status CheckBufferLength(const FixedSizeBinaryType* t, const std::shared_ptr<Buf\n }\n }  // namespace internal\n \n+// CastImpl(...) assumes `to` points to a non null scalar of the correct type with\n \n Review comment:\n   Shouldn't all those internal details be pushed in an anonymous namespace?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:20.403+0000",
                    "updated": "2019-11-13T10:36:20.403+0000",
                    "started": "2019-11-13T10:36:20.403+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342523",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342524",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345670829\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -758,43 +797,107 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n-struct AccumulateFieldsVisitor {\n-  void operator()(const FieldExpression& expr) { fields.push_back(expr.name()); }\n+Result<std::shared_ptr<Expression>> InsertImplicitCasts(const Expression& expr,\n+                                                        const Schema& schema) {\n+  struct {\n+    struct Validated {\n+      std::shared_ptr<Expression> expr;\n+      std::shared_ptr<DataType> type;\n+    };\n+\n+    Result<Validated> Validate(const Expression& expr) {\n+      Validated out;\n+      ARROW_ASSIGN_OR_RAISE(out.expr, InsertImplicitCasts(expr, schema_));\n+      ARROW_ASSIGN_OR_RAISE(out.type, out.expr->Validate(schema_));\n+      return std::move(out);\n+    }\n \n-  void operator()(const NotExpression& expr) { VisitExpression(*expr.operand(), *this); }\n+    Result<std::shared_ptr<Expression>> operator()(const NotExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto op, Validate(*expr.operand()));\n \n-  void operator()(const AndExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+      if (op.type->id() != Type::BOOL) {\n+        op.expr = op.expr->CastTo(boolean()).Copy();\n+      }\n+      return not_(std::move(op.expr));\n+    }\n \n-  void operator()(const OrExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+    Result<std::shared_ptr<Expression>> operator()(const AndExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n \n-  void operator()(const ComparisonExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+      if (lhs.type->id() != Type::BOOL) {\n+        lhs.expr = lhs.expr->CastTo(boolean()).Copy();\n+      }\n+      if (rhs.type->id() != Type::BOOL) {\n+        rhs.expr = rhs.expr->CastTo(boolean()).Copy();\n+      }\n+      return and_(std::move(lhs.expr), std::move(rhs.expr));\n+    }\n \n-  template <typename E>\n-  void operator()(const E& expr) const {}\n+    Result<std::shared_ptr<Expression>> operator()(const OrExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n \n-  std::vector<std::string> fields;\n-};\n+      if (lhs.type->id() != Type::BOOL) {\n+        lhs.expr = lhs.expr->CastTo(boolean()).Copy();\n+      }\n+      if (rhs.type->id() != Type::BOOL) {\n+        rhs.expr = rhs.expr->CastTo(boolean()).Copy();\n+      }\n+      return or_(std::move(lhs.expr), std::move(rhs.expr));\n+    }\n+\n+    Result<std::shared_ptr<Expression>> operator()(const ComparisonExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n+\n+      if (lhs.type->Equals(rhs.type)) {\n+        return expr.Copy();\n+      }\n+\n+      if (lhs.expr->type() == ExpressionType::SCALAR) {\n+        lhs.expr = lhs.expr->CastTo(rhs.type).Copy();\n+      } else {\n+        rhs.expr = rhs.expr->CastTo(lhs.type).Copy();\n \n Review comment:\n   Should you check that `rhs.expr` is a scalar here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T10:36:20.457+0000",
                    "updated": "2019-11-13T10:36:20.457+0000",
                    "started": "2019-11-13T10:36:20.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342524",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342684",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345837762\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -758,43 +797,107 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n-struct AccumulateFieldsVisitor {\n-  void operator()(const FieldExpression& expr) { fields.push_back(expr.name()); }\n+Result<std::shared_ptr<Expression>> InsertImplicitCasts(const Expression& expr,\n+                                                        const Schema& schema) {\n+  struct {\n+    struct Validated {\n+      std::shared_ptr<Expression> expr;\n+      std::shared_ptr<DataType> type;\n+    };\n+\n+    Result<Validated> Validate(const Expression& expr) {\n+      Validated out;\n+      ARROW_ASSIGN_OR_RAISE(out.expr, InsertImplicitCasts(expr, schema_));\n+      ARROW_ASSIGN_OR_RAISE(out.type, out.expr->Validate(schema_));\n+      return std::move(out);\n+    }\n \n-  void operator()(const NotExpression& expr) { VisitExpression(*expr.operand(), *this); }\n+    Result<std::shared_ptr<Expression>> operator()(const NotExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto op, Validate(*expr.operand()));\n \n-  void operator()(const AndExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+      if (op.type->id() != Type::BOOL) {\n+        op.expr = op.expr->CastTo(boolean()).Copy();\n+      }\n+      return not_(std::move(op.expr));\n+    }\n \n-  void operator()(const OrExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+    Result<std::shared_ptr<Expression>> operator()(const AndExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n \n-  void operator()(const ComparisonExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+      if (lhs.type->id() != Type::BOOL) {\n+        lhs.expr = lhs.expr->CastTo(boolean()).Copy();\n+      }\n+      if (rhs.type->id() != Type::BOOL) {\n+        rhs.expr = rhs.expr->CastTo(boolean()).Copy();\n+      }\n+      return and_(std::move(lhs.expr), std::move(rhs.expr));\n+    }\n \n-  template <typename E>\n-  void operator()(const E& expr) const {}\n+    Result<std::shared_ptr<Expression>> operator()(const OrExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n \n-  std::vector<std::string> fields;\n-};\n+      if (lhs.type->id() != Type::BOOL) {\n+        lhs.expr = lhs.expr->CastTo(boolean()).Copy();\n+      }\n+      if (rhs.type->id() != Type::BOOL) {\n+        rhs.expr = rhs.expr->CastTo(boolean()).Copy();\n+      }\n+      return or_(std::move(lhs.expr), std::move(rhs.expr));\n+    }\n+\n+    Result<std::shared_ptr<Expression>> operator()(const ComparisonExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n+\n+      if (lhs.type->Equals(rhs.type)) {\n+        return expr.Copy();\n+      }\n+\n+      if (lhs.expr->type() == ExpressionType::SCALAR) {\n+        lhs.expr = lhs.expr->CastTo(rhs.type).Copy();\n+      } else {\n+        rhs.expr = rhs.expr->CastTo(lhs.type).Copy();\n+      }\n+      return std::make_shared<ComparisonExpression>(expr.op(), std::move(lhs.expr),\n+                                                    std::move(rhs.expr));\n+    }\n+\n+    Result<std::shared_ptr<Expression>> operator()(const Expression& expr) const {\n+      return expr.Copy();\n+    }\n+\n+    const Schema& schema_;\n+  } visitor = {schema};\n+\n+  return VisitExpression(expr, visitor);\n \n Review comment:\n   Custom expressions are already available, and I can refactor this to a virtual method without much trouble.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:49:18.111+0000",
                    "updated": "2019-11-13T15:49:18.111+0000",
                    "started": "2019-11-13T15:49:18.111+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342684",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342685",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345838225\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -758,43 +797,107 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n-struct AccumulateFieldsVisitor {\n-  void operator()(const FieldExpression& expr) { fields.push_back(expr.name()); }\n+Result<std::shared_ptr<Expression>> InsertImplicitCasts(const Expression& expr,\n+                                                        const Schema& schema) {\n+  struct {\n+    struct Validated {\n+      std::shared_ptr<Expression> expr;\n+      std::shared_ptr<DataType> type;\n+    };\n+\n+    Result<Validated> Validate(const Expression& expr) {\n+      Validated out;\n+      ARROW_ASSIGN_OR_RAISE(out.expr, InsertImplicitCasts(expr, schema_));\n+      ARROW_ASSIGN_OR_RAISE(out.type, out.expr->Validate(schema_));\n+      return std::move(out);\n+    }\n \n-  void operator()(const NotExpression& expr) { VisitExpression(*expr.operand(), *this); }\n+    Result<std::shared_ptr<Expression>> operator()(const NotExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto op, Validate(*expr.operand()));\n \n-  void operator()(const AndExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+      if (op.type->id() != Type::BOOL) {\n+        op.expr = op.expr->CastTo(boolean()).Copy();\n+      }\n+      return not_(std::move(op.expr));\n+    }\n \n-  void operator()(const OrExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+    Result<std::shared_ptr<Expression>> operator()(const AndExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n \n-  void operator()(const ComparisonExpression& expr) {\n-    VisitExpression(*expr.left_operand(), *this);\n-    VisitExpression(*expr.right_operand(), *this);\n-  }\n+      if (lhs.type->id() != Type::BOOL) {\n+        lhs.expr = lhs.expr->CastTo(boolean()).Copy();\n+      }\n+      if (rhs.type->id() != Type::BOOL) {\n+        rhs.expr = rhs.expr->CastTo(boolean()).Copy();\n+      }\n+      return and_(std::move(lhs.expr), std::move(rhs.expr));\n+    }\n \n-  template <typename E>\n-  void operator()(const E& expr) const {}\n+    Result<std::shared_ptr<Expression>> operator()(const OrExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n \n-  std::vector<std::string> fields;\n-};\n+      if (lhs.type->id() != Type::BOOL) {\n+        lhs.expr = lhs.expr->CastTo(boolean()).Copy();\n+      }\n+      if (rhs.type->id() != Type::BOOL) {\n+        rhs.expr = rhs.expr->CastTo(boolean()).Copy();\n+      }\n+      return or_(std::move(lhs.expr), std::move(rhs.expr));\n+    }\n+\n+    Result<std::shared_ptr<Expression>> operator()(const ComparisonExpression& expr) {\n+      ARROW_ASSIGN_OR_RAISE(auto lhs, Validate(*expr.left_operand()));\n+      ARROW_ASSIGN_OR_RAISE(auto rhs, Validate(*expr.right_operand()));\n+\n+      if (lhs.type->Equals(rhs.type)) {\n+        return expr.Copy();\n+      }\n+\n+      if (lhs.expr->type() == ExpressionType::SCALAR) {\n+        lhs.expr = lhs.expr->CastTo(rhs.type).Copy();\n+      } else {\n+        rhs.expr = rhs.expr->CastTo(lhs.type).Copy();\n \n Review comment:\n   Even if rhs.expr is not a scalar, it must be cast to lhs.type to enable comparison\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:49:59.117+0000",
                    "updated": "2019-11-13T15:49:59.117+0000",
                    "started": "2019-11-13T15:49:59.116+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342685",
                    "issueId": "13265850"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/worklog/342688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5813: ARROW-7047: [C++] Insert implicit casts in ScannerBuilder::Finish\nURL: https://github.com/apache/arrow/pull/5813#discussion_r345839406\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -758,43 +797,107 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n-struct AccumulateFieldsVisitor {\n-  void operator()(const FieldExpression& expr) { fields.push_back(expr.name()); }\n+Result<std::shared_ptr<Expression>> InsertImplicitCasts(const Expression& expr,\n+                                                        const Schema& schema) {\n+  struct {\n+    struct Validated {\n+      std::shared_ptr<Expression> expr;\n+      std::shared_ptr<DataType> type;\n+    };\n+\n+    Result<Validated> Validate(const Expression& expr) {\n+      Validated out;\n+      ARROW_ASSIGN_OR_RAISE(out.expr, InsertImplicitCasts(expr, schema_));\n+      ARROW_ASSIGN_OR_RAISE(out.type, out.expr->Validate(schema_));\n+      return std::move(out);\n \n Review comment:\n   You're right and this *should* be unnecessary.\r\n   I placed it here to silence warnings from clang that older compilers may not infer implicit move because the return type is not identical to the variable type\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:51:46.238+0000",
                    "updated": "2019-11-13T15:51:46.238+0000",
                    "started": "2019-11-13T15:51:46.238+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342688",
                    "issueId": "13265850"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 25800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5cd51388[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3eee797b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4aa42153[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7ccacdd[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f04e2b6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@68886ee9[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@34d7412[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@61859ae2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@592cd536[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@72f817dc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a7d0075[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5762cb52[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 25800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 15 23:34:21 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-11-15T23:34:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7047/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2019-11-01T22:05:21.000+0000",
        "updated": "2020-04-10T15:32:36.000+0000",
        "timeoriginalestimate": null,
        "description": "It's not trivial for users to be able to ensure that scalars are of identical type to the fields they relate to in Expressions. For one, FieldExpressions don't contain a type reference, so at the time when I construct {{field_ref(\"col1\") > scalar(42)}}, I don't know exactly what type col1 is to be able to ensure that scalar(42) matches. Even if it were available, I wouldn't be able to determine what type to make it if the expression were {{(field_ref(\"col1\") + field_ref(\"col2\")) > scalar(42)}}.\r\n\r\nWe should allow CompareExpressions to cast the inputs as necessary. This should be among integer types and floating point types, and across integers and floats too. Likewise among date/timestamp types, and probably if comparing a string scalar against a date/timestamp column, the string should be parsed as a datetime. We also need to think about DictionaryTypes (though in practice this is moot until we have a comparison kernels that work on strings).\r\n\r\n[~fsaintjacques][~bkietz]",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 25800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] Filter expressions should not require exact type match",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/comment/16967527",
                    "id": "16967527",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "In typical databases, this is not the responsibility of physical operators (the dataset module in this case). It is assumed that inputs are properly typed/casted by who ever generates the physical plan. I would propose that we create an interface to bind/validate/cast an expression to a Schema, e.g.\r\n\r\n\r\n{code:c++}\r\n/// \\brief Bind an expression to a schema\r\n///\r\n/// Binding will try to align types of expressions and referenced fields. It will also checks that all references are valid.\r\nResult<Expression> Expression::Bind(const Schema& schema, BindOptions options);\r\n{code}\r\n\r\nThis utility could be used by high level languages and the planner (execution engine). This could be exposed as an option in the ScannerBuilder interface, or an optional parameter to the AddFilter.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-11-05T13:27:30.054+0000",
                    "updated": "2019-11-05T13:29:13.695+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/comment/16967561",
                    "id": "16967561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~fsaintjacques] thanks, that seems reasonable. I'll add {{CastExpression}} and {{Bind}} can insert these everywhere a type mismatch is encountered. \r\nIt seems like a direct extension of {{Expression::Validate}}, is it worth keeping them both? {{Bind}} could also output the expression's evaluated type\r\n\r\nFieldExpressions are currently not typed but it seems reasonable to add optional typing when the field's type is known.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-11-05T14:20:11.114+0000",
                    "updated": "2019-11-05T14:20:11.114+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265850/comment/16975476",
                    "id": "16975476",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 5813\n[https://github.com/apache/arrow/pull/5813]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-11-15T23:34:21.741+0000",
                    "updated": "2019-11-15T23:34:21.741+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z086uo:",
        "customfield_12314139": null
    }
}