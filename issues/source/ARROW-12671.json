{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13377074",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074",
    "key": "ARROW-12671",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12627711",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12627711",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13414892",
                    "key": "ARROW-14957",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414892",
                    "fields": {
                        "summary": "[C++] Update OpenTelemetry to v1.1.0",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12627712",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12627712",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13414893",
                    "key": "ARROW-14958",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893",
                    "fields": {
                        "summary": "[C++][FlightRPC] Enable OpenTelemetry with Arrow Flight",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 40200,
            "total": 40200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 40200,
            "total": 40200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12671/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 67,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/654090",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#issuecomment-924987234\n\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-22T14:30:29.965+0000",
                    "updated": "2021-09-22T14:30:29.965+0000",
                    "started": "2021-09-22T14:30:29.965+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654090",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/670326",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#issuecomment-952268885\n\n\n   The build error on AppVeyor _should_ be fixed by https://github.com/apache/arrow/pull/11547. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-26T19:54:07.151+0000",
                    "updated": "2021-10-26T19:54:07.151+0000",
                    "started": "2021-10-26T19:54:07.150+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "670326",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/670361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r736886675\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n+ public:\n+  explicit OStreamJsonSpanExporter(std::ostream& sout = std::cerr) noexcept\n+      : sout_(sout), shutdown_(false) {}\n+  std::unique_ptr<sdktrace::Recordable> MakeRecordable() noexcept override {\n+    return std::unique_ptr<sdktrace::Recordable>(new sdktrace::SpanData);\n+  }\n+  otel::sdk::common::ExportResult Export(\n+      const nostd::span<std::unique_ptr<sdktrace::Recordable>>& spans) noexcept override {\n+    if (shutdown_) return otel::sdk::common::ExportResult::kFailure;\n+\n+    for (auto& recordable : spans) {\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper> writer(sout_);\n+      auto span = std::unique_ptr<sdktrace::SpanData>(\n+          static_cast<sdktrace::SpanData*>(recordable.release()));\n+      if (!span) continue;\n+      char trace_id[32] = {0};\n+      char span_id[16] = {0};\n+      char parent_span_id[16] = {0};\n+      span->GetTraceId().ToLowerBase16(trace_id);\n+      span->GetSpanId().ToLowerBase16(span_id);\n+      span->GetParentSpanId().ToLowerBase16(parent_span_id);\n+\n+      writer.StartObject();\n+      writer.Key(\"name\");\n+      writer.String(span->GetName().data(), span->GetName().length());\n+      writer.Key(\"trace_id\");\n+      writer.String(trace_id, 32);\n+      writer.Key(\"span_id\");\n+      writer.String(span_id, 16);\n+      writer.Key(\"parent_span_id\");\n+      writer.String(parent_span_id, 16);\n+      writer.Key(\"start\");\n+      writer.Int64(span->GetStartTime().time_since_epoch().count());\n+      writer.Key(\"duration\");\n+      writer.Int64(span->GetDuration().count());\n+      writer.Key(\"description\");\n+      writer.String(span->GetDescription().data(), span->GetDescription().length());\n+      writer.Key(\"kind\");\n+      writer.Int(static_cast<int>(span->GetSpanKind()));\n+      writer.Key(\"status\");\n+      // TODO: this is expensive\n+      writer.String(statuses_[static_cast<int>(span->GetStatus())]);\n+      writer.Key(\"args\");\n+      writer.StartObject();\n+      OwnedAttributeValueVisitor visitor(writer);\n+      for (const auto& pair : span->GetAttributes()) {\n+        writer.Key(pair.first.data(), pair.first.length());\n+        nostd::visit(visitor, pair.second);\n+      }\n+      writer.EndObject();\n+      writer.EndObject();\n+      sout_.Put('\\n');\n+    }\n+    sout_.Flush();\n+    return otel::sdk::common::ExportResult::kSuccess;\n+  }\n+  bool Shutdown(std::chrono::microseconds) noexcept override {\n+    shutdown_ = true;\n+    return true;\n+  }\n+\n+ private:\n+  arrow::rapidjson::OStreamWrapper sout_;\n+  bool shutdown_;\n+  std::map<int, std::string> statuses_{{0, \"Unset\"}, {1, \"Ok\"}, {2, \"Error\"}};\n+};\n+#endif\n+\n+class ThreadIdSpanProcessor : public sdktrace::BatchSpanProcessor {\n+ public:\n+  using sdktrace::BatchSpanProcessor::BatchSpanProcessor;\n+  void OnEnd(std::unique_ptr<sdktrace::Recordable>&& span) noexcept override {\n+    std::stringstream thread_id;\n+    thread_id << std::this_thread::get_id();\n+    span->SetAttribute(\"thread_id\", thread_id.str());\n+    sdktrace::BatchSpanProcessor::OnEnd(std::move(span));\n+  }\n+};\n+\n+std::unique_ptr<sdktrace::SpanExporter> InitializeExporter() {\n+  auto maybe_env_var = arrow::internal::GetEnvVar(kTracingBackendEnvVar);\n+  if (maybe_env_var.ok()) {\n+    auto env_var = maybe_env_var.ValueOrDie();\n+    if (env_var == \"json\") {\n+#ifdef ARROW_JSON\n+      return std::unique_ptr<sdktrace::SpanExporter>(\n+          new OStreamJsonSpanExporter(std::cerr));\n+#else\n+      ARROW_LOG(WARNING) << \"Requested \" << kTracingBackendEnvVar\n+                         << \"=json but Arrow was built without ARROW_JSON\";\n+#endif\n+    } else if (!env_var.empty()) {\n+      ARROW_LOG(WARNING) << \"Requested unknown backend \" << kTracingBackendEnvVar << \"=\"\n+                         << env_var;\n+    }\n+  }\n+  return std::unique_ptr<sdktrace::SpanExporter>();\n+}\n+\n+nostd::shared_ptr<sdktrace::TracerProvider> InitializeSdkTracerProvider() {\n+  auto exporter = InitializeExporter();\n+  if (exporter) {\n+    sdktrace::BatchSpanProcessorOptions options;\n+    options.max_queue_size = 16384;\n+    options.schedule_delay_millis = std::chrono::milliseconds(500);\n+    options.max_export_batch_size = 16384;\n+    auto processor = std::unique_ptr<sdktrace::SpanProcessor>(\n\nReview comment:\n       I guess this can't be `make_unique`?\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n\nReview comment:\n       Even if you don't go with the OTLP exporter (I assume the dependencies are annoying), you can use the `opentelemetry::exporter::trace::OStreamSpanExporter` which doesn't output JSON, but if you're not doing anything structured, it should suffice. The messages look like this:\r\n   \r\n   ```\r\n   {\r\n     name          : library\r\n     trace_id      : 2a93c0ffd8d36fce84c28b3d08f845c9\r\n     span_id       : 109ea4dea0acdab5\r\n     tracestate    :\r\n     parent_span_id: 0000000000000000\r\n     start         : 1635282336724427669\r\n     duration      : 75913\r\n     description   :\r\n     span kind     : Internal\r\n     status        : Unset\r\n     attributes    :\r\n     events        :\r\n     links         :\r\n     resources     :\r\n           service.name: unknown_service\r\n           telemetry.sdk.version: 1.0.1\r\n           telemetry.sdk.name: opentelemetry\r\n           telemetry.sdk.language: cpp\r\n     instr-lib     : foo_library\r\n   }\r\n   ```\r\n   \r\n    For any structure, the collector can be used.\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n+ public:\n+  explicit OStreamJsonSpanExporter(std::ostream& sout = std::cerr) noexcept\n+      : sout_(sout), shutdown_(false) {}\n+  std::unique_ptr<sdktrace::Recordable> MakeRecordable() noexcept override {\n+    return std::unique_ptr<sdktrace::Recordable>(new sdktrace::SpanData);\n+  }\n+  otel::sdk::common::ExportResult Export(\n+      const nostd::span<std::unique_ptr<sdktrace::Recordable>>& spans) noexcept override {\n+    if (shutdown_) return otel::sdk::common::ExportResult::kFailure;\n+\n+    for (auto& recordable : spans) {\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper> writer(sout_);\n+      auto span = std::unique_ptr<sdktrace::SpanData>(\n+          static_cast<sdktrace::SpanData*>(recordable.release()));\n+      if (!span) continue;\n+      char trace_id[32] = {0};\n+      char span_id[16] = {0};\n+      char parent_span_id[16] = {0};\n+      span->GetTraceId().ToLowerBase16(trace_id);\n+      span->GetSpanId().ToLowerBase16(span_id);\n+      span->GetParentSpanId().ToLowerBase16(parent_span_id);\n+\n+      writer.StartObject();\n+      writer.Key(\"name\");\n+      writer.String(span->GetName().data(), span->GetName().length());\n+      writer.Key(\"trace_id\");\n+      writer.String(trace_id, 32);\n+      writer.Key(\"span_id\");\n+      writer.String(span_id, 16);\n+      writer.Key(\"parent_span_id\");\n+      writer.String(parent_span_id, 16);\n+      writer.Key(\"start\");\n+      writer.Int64(span->GetStartTime().time_since_epoch().count());\n+      writer.Key(\"duration\");\n+      writer.Int64(span->GetDuration().count());\n+      writer.Key(\"description\");\n+      writer.String(span->GetDescription().data(), span->GetDescription().length());\n+      writer.Key(\"kind\");\n+      writer.Int(static_cast<int>(span->GetSpanKind()));\n+      writer.Key(\"status\");\n+      // TODO: this is expensive\n+      writer.String(statuses_[static_cast<int>(span->GetStatus())]);\n+      writer.Key(\"args\");\n+      writer.StartObject();\n+      OwnedAttributeValueVisitor visitor(writer);\n+      for (const auto& pair : span->GetAttributes()) {\n+        writer.Key(pair.first.data(), pair.first.length());\n+        nostd::visit(visitor, pair.second);\n+      }\n+      writer.EndObject();\n+      writer.EndObject();\n+      sout_.Put('\\n');\n+    }\n+    sout_.Flush();\n+    return otel::sdk::common::ExportResult::kSuccess;\n+  }\n+  bool Shutdown(std::chrono::microseconds) noexcept override {\n+    shutdown_ = true;\n+    return true;\n+  }\n+\n+ private:\n+  arrow::rapidjson::OStreamWrapper sout_;\n+  bool shutdown_;\n+  std::map<int, std::string> statuses_{{0, \"Unset\"}, {1, \"Ok\"}, {2, \"Error\"}};\n+};\n+#endif\n+\n+class ThreadIdSpanProcessor : public sdktrace::BatchSpanProcessor {\n+ public:\n+  using sdktrace::BatchSpanProcessor::BatchSpanProcessor;\n+  void OnEnd(std::unique_ptr<sdktrace::Recordable>&& span) noexcept override {\n+    std::stringstream thread_id;\n+    thread_id << std::this_thread::get_id();\n+    span->SetAttribute(\"thread_id\", thread_id.str());\n+    sdktrace::BatchSpanProcessor::OnEnd(std::move(span));\n+  }\n+};\n+\n+std::unique_ptr<sdktrace::SpanExporter> InitializeExporter() {\n+  auto maybe_env_var = arrow::internal::GetEnvVar(kTracingBackendEnvVar);\n+  if (maybe_env_var.ok()) {\n+    auto env_var = maybe_env_var.ValueOrDie();\n+    if (env_var == \"json\") {\n+#ifdef ARROW_JSON\n+      return std::unique_ptr<sdktrace::SpanExporter>(\n+          new OStreamJsonSpanExporter(std::cerr));\n+#else\n+      ARROW_LOG(WARNING) << \"Requested \" << kTracingBackendEnvVar\n+                         << \"=json but Arrow was built without ARROW_JSON\";\n+#endif\n+    } else if (!env_var.empty()) {\n+      ARROW_LOG(WARNING) << \"Requested unknown backend \" << kTracingBackendEnvVar << \"=\"\n+                         << env_var;\n+    }\n+  }\n+  return std::unique_ptr<sdktrace::SpanExporter>();\n+}\n+\n+nostd::shared_ptr<sdktrace::TracerProvider> InitializeSdkTracerProvider() {\n+  auto exporter = InitializeExporter();\n+  if (exporter) {\n+    sdktrace::BatchSpanProcessorOptions options;\n+    options.max_queue_size = 16384;\n+    options.schedule_delay_millis = std::chrono::milliseconds(500);\n+    options.max_export_batch_size = 16384;\n+    auto processor = std::unique_ptr<sdktrace::SpanProcessor>(\n+        new ThreadIdSpanProcessor(std::move(exporter), options));\n+    return nostd::shared_ptr<sdktrace::TracerProvider>(\n\nReview comment:\n       Similarly, guessing this can't be `make_shared`?\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n\nReview comment:\n       I'm able to run these examples (https://github.com/open-telemetry/opentelemetry-cpp/tree/main/examples/otlp) with a tiny collector setup producing JSON to stdout. I don't think this exporter is necessary.\r\n   \r\n   Additionally, I think we'd lose a lot of the benefits of opentelemetry by outputting JSON that isn't compatible with any otel consumer. If you run the examples you'll see that the JSON differs what's being written here in a number of meaningful ways.\r\n   \r\n   I think it's enough to add the initialization (sans this exporter) and the async generator wrapper.\r\n   \r\n   To reproduce the examples:\r\n   \r\n   1. Build the library from source (the examples should build by default)\r\n   2. change `examples/otlp/opentelemetry-collector-config/config.dev.yaml` to this:\r\n   ```yaml\r\n   exporters:\r\n     file:\r\n       path: /dev/stdout\r\n   receivers:\r\n     otlp:\r\n       protocols:\r\n         grpc:\r\n           endpoint: 0.0.0.0:4317\r\n         http:\r\n           endpoint: \"0.0.0.0:4318\"\r\n           cors_allowed_origins:\r\n           - '*'\r\n   service:\r\n     pipelines:\r\n       traces:\r\n         receivers:\r\n         - otlp\r\n         exporters:\r\n         - file\r\n   ```\r\n   3. Start the collector container from the `opentelemetry-cpp` clone:\r\n   ```\r\n   docker run --rm -it -p 4317:4317 -p 4318:4318 -v $(pwd)/examples/otlp:/cfg otel/opentelemetry-collector:latest --config=/cfg/opentelemetry-collector-config/config.dev.yaml\r\n   ```\r\n   \r\n   If you now run `build/examples/otlp/example_otlp_grpc` or `build/examples/otlp/example_otlp_http` you should see a line of JSON coming out from the place you launch the container for each invocation.\r\n   \r\n   The example can be simplified further by removing one of the `grpc` or `http` receivers.\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n+ public:\n+  explicit OStreamJsonSpanExporter(std::ostream& sout = std::cerr) noexcept\n+      : sout_(sout), shutdown_(false) {}\n+  std::unique_ptr<sdktrace::Recordable> MakeRecordable() noexcept override {\n+    return std::unique_ptr<sdktrace::Recordable>(new sdktrace::SpanData);\n+  }\n+  otel::sdk::common::ExportResult Export(\n+      const nostd::span<std::unique_ptr<sdktrace::Recordable>>& spans) noexcept override {\n+    if (shutdown_) return otel::sdk::common::ExportResult::kFailure;\n+\n+    for (auto& recordable : spans) {\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper> writer(sout_);\n+      auto span = std::unique_ptr<sdktrace::SpanData>(\n+          static_cast<sdktrace::SpanData*>(recordable.release()));\n+      if (!span) continue;\n+      char trace_id[32] = {0};\n+      char span_id[16] = {0};\n+      char parent_span_id[16] = {0};\n+      span->GetTraceId().ToLowerBase16(trace_id);\n+      span->GetSpanId().ToLowerBase16(span_id);\n+      span->GetParentSpanId().ToLowerBase16(parent_span_id);\n+\n+      writer.StartObject();\n+      writer.Key(\"name\");\n+      writer.String(span->GetName().data(), span->GetName().length());\n+      writer.Key(\"trace_id\");\n+      writer.String(trace_id, 32);\n+      writer.Key(\"span_id\");\n+      writer.String(span_id, 16);\n+      writer.Key(\"parent_span_id\");\n+      writer.String(parent_span_id, 16);\n+      writer.Key(\"start\");\n+      writer.Int64(span->GetStartTime().time_since_epoch().count());\n+      writer.Key(\"duration\");\n+      writer.Int64(span->GetDuration().count());\n+      writer.Key(\"description\");\n+      writer.String(span->GetDescription().data(), span->GetDescription().length());\n+      writer.Key(\"kind\");\n+      writer.Int(static_cast<int>(span->GetSpanKind()));\n+      writer.Key(\"status\");\n+      // TODO: this is expensive\n+      writer.String(statuses_[static_cast<int>(span->GetStatus())]);\n+      writer.Key(\"args\");\n+      writer.StartObject();\n+      OwnedAttributeValueVisitor visitor(writer);\n+      for (const auto& pair : span->GetAttributes()) {\n+        writer.Key(pair.first.data(), pair.first.length());\n+        nostd::visit(visitor, pair.second);\n+      }\n+      writer.EndObject();\n+      writer.EndObject();\n+      sout_.Put('\\n');\n+    }\n+    sout_.Flush();\n+    return otel::sdk::common::ExportResult::kSuccess;\n+  }\n+  bool Shutdown(std::chrono::microseconds) noexcept override {\n+    shutdown_ = true;\n+    return true;\n+  }\n+\n+ private:\n+  arrow::rapidjson::OStreamWrapper sout_;\n+  bool shutdown_;\n+  std::map<int, std::string> statuses_{{0, \"Unset\"}, {1, \"Ok\"}, {2, \"Error\"}};\n+};\n+#endif\n+\n+class ThreadIdSpanProcessor : public sdktrace::BatchSpanProcessor {\n\nReview comment:\n       Is this the thread of the current span, or the thread of the thing doing the processing (these could in theory be separate threads)\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n\nReview comment:\n       Is this actually necessary? Typically a collector handles turning the otel data into `$MY_FAVORITE_FORMAT`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-26T21:22:10.107+0000",
                    "updated": "2021-10-26T21:22:10.107+0000",
                    "started": "2021-10-26T21:22:10.107+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "670361",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/670363",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r736934319\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n\nReview comment:\n       The motivation here was to have a convenient way to just get a log file that we could then parse/analyze with something else. Hence:\r\n   \r\n   1) Yes we are a library, but for development purposes it's easier to just have very basic configuration built in\r\n   2) On top of that, [the C++ and Python libraries do not interoperate](https://github.com/open-telemetry/community/discussions/734) which makes it rather inconvenient to use with PyArrow\r\n   3) The output of OStreamSpanExporter is very annoying to parse compared to JSON\r\n   \r\n   That said, the collector seems like it should mostly address all this. IIRC, I had some issues with getting it to point to our gRPC build and such and decided to just drop it for expediency but we should figure it out instead of doing something special.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-26T21:27:03.292+0000",
                    "updated": "2021-10-26T21:27:03.292+0000",
                    "started": "2021-10-26T21:27:03.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "670363",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/670364",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r736935110\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n\nReview comment:\n       And being able to use the API only would simplify our build (we could even perhaps vendor the headers?)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-26T21:27:36.821+0000",
                    "updated": "2021-10-26T21:27:36.821+0000",
                    "started": "2021-10-26T21:27:36.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "670364",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/670365",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r736935583\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n+ public:\n+  explicit OStreamJsonSpanExporter(std::ostream& sout = std::cerr) noexcept\n+      : sout_(sout), shutdown_(false) {}\n+  std::unique_ptr<sdktrace::Recordable> MakeRecordable() noexcept override {\n+    return std::unique_ptr<sdktrace::Recordable>(new sdktrace::SpanData);\n+  }\n+  otel::sdk::common::ExportResult Export(\n+      const nostd::span<std::unique_ptr<sdktrace::Recordable>>& spans) noexcept override {\n+    if (shutdown_) return otel::sdk::common::ExportResult::kFailure;\n+\n+    for (auto& recordable : spans) {\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper> writer(sout_);\n+      auto span = std::unique_ptr<sdktrace::SpanData>(\n+          static_cast<sdktrace::SpanData*>(recordable.release()));\n+      if (!span) continue;\n+      char trace_id[32] = {0};\n+      char span_id[16] = {0};\n+      char parent_span_id[16] = {0};\n+      span->GetTraceId().ToLowerBase16(trace_id);\n+      span->GetSpanId().ToLowerBase16(span_id);\n+      span->GetParentSpanId().ToLowerBase16(parent_span_id);\n+\n+      writer.StartObject();\n+      writer.Key(\"name\");\n+      writer.String(span->GetName().data(), span->GetName().length());\n+      writer.Key(\"trace_id\");\n+      writer.String(trace_id, 32);\n+      writer.Key(\"span_id\");\n+      writer.String(span_id, 16);\n+      writer.Key(\"parent_span_id\");\n+      writer.String(parent_span_id, 16);\n+      writer.Key(\"start\");\n+      writer.Int64(span->GetStartTime().time_since_epoch().count());\n+      writer.Key(\"duration\");\n+      writer.Int64(span->GetDuration().count());\n+      writer.Key(\"description\");\n+      writer.String(span->GetDescription().data(), span->GetDescription().length());\n+      writer.Key(\"kind\");\n+      writer.Int(static_cast<int>(span->GetSpanKind()));\n+      writer.Key(\"status\");\n+      // TODO: this is expensive\n+      writer.String(statuses_[static_cast<int>(span->GetStatus())]);\n+      writer.Key(\"args\");\n+      writer.StartObject();\n+      OwnedAttributeValueVisitor visitor(writer);\n+      for (const auto& pair : span->GetAttributes()) {\n+        writer.Key(pair.first.data(), pair.first.length());\n+        nostd::visit(visitor, pair.second);\n+      }\n+      writer.EndObject();\n+      writer.EndObject();\n+      sout_.Put('\\n');\n+    }\n+    sout_.Flush();\n+    return otel::sdk::common::ExportResult::kSuccess;\n+  }\n+  bool Shutdown(std::chrono::microseconds) noexcept override {\n+    shutdown_ = true;\n+    return true;\n+  }\n+\n+ private:\n+  arrow::rapidjson::OStreamWrapper sout_;\n+  bool shutdown_;\n+  std::map<int, std::string> statuses_{{0, \"Unset\"}, {1, \"Ok\"}, {2, \"Error\"}};\n+};\n+#endif\n+\n+class ThreadIdSpanProcessor : public sdktrace::BatchSpanProcessor {\n\nReview comment:\n       I _think_ when I looked at it, it would be the thread of the span (the processor is called inline instead of on the background thread), and that is the intent here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-26T21:28:00.040+0000",
                    "updated": "2021-10-26T21:28:00.040+0000",
                    "started": "2021-10-26T21:28:00.039+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "670365",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/670367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r736935906\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n+ public:\n+  explicit OStreamJsonSpanExporter(std::ostream& sout = std::cerr) noexcept\n+      : sout_(sout), shutdown_(false) {}\n+  std::unique_ptr<sdktrace::Recordable> MakeRecordable() noexcept override {\n+    return std::unique_ptr<sdktrace::Recordable>(new sdktrace::SpanData);\n+  }\n+  otel::sdk::common::ExportResult Export(\n+      const nostd::span<std::unique_ptr<sdktrace::Recordable>>& spans) noexcept override {\n+    if (shutdown_) return otel::sdk::common::ExportResult::kFailure;\n+\n+    for (auto& recordable : spans) {\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper> writer(sout_);\n+      auto span = std::unique_ptr<sdktrace::SpanData>(\n+          static_cast<sdktrace::SpanData*>(recordable.release()));\n+      if (!span) continue;\n+      char trace_id[32] = {0};\n+      char span_id[16] = {0};\n+      char parent_span_id[16] = {0};\n+      span->GetTraceId().ToLowerBase16(trace_id);\n+      span->GetSpanId().ToLowerBase16(span_id);\n+      span->GetParentSpanId().ToLowerBase16(parent_span_id);\n+\n+      writer.StartObject();\n+      writer.Key(\"name\");\n+      writer.String(span->GetName().data(), span->GetName().length());\n+      writer.Key(\"trace_id\");\n+      writer.String(trace_id, 32);\n+      writer.Key(\"span_id\");\n+      writer.String(span_id, 16);\n+      writer.Key(\"parent_span_id\");\n+      writer.String(parent_span_id, 16);\n+      writer.Key(\"start\");\n+      writer.Int64(span->GetStartTime().time_since_epoch().count());\n+      writer.Key(\"duration\");\n+      writer.Int64(span->GetDuration().count());\n+      writer.Key(\"description\");\n+      writer.String(span->GetDescription().data(), span->GetDescription().length());\n+      writer.Key(\"kind\");\n+      writer.Int(static_cast<int>(span->GetSpanKind()));\n+      writer.Key(\"status\");\n+      // TODO: this is expensive\n+      writer.String(statuses_[static_cast<int>(span->GetStatus())]);\n+      writer.Key(\"args\");\n+      writer.StartObject();\n+      OwnedAttributeValueVisitor visitor(writer);\n+      for (const auto& pair : span->GetAttributes()) {\n+        writer.Key(pair.first.data(), pair.first.length());\n+        nostd::visit(visitor, pair.second);\n+      }\n+      writer.EndObject();\n+      writer.EndObject();\n+      sout_.Put('\\n');\n+    }\n+    sout_.Flush();\n+    return otel::sdk::common::ExportResult::kSuccess;\n+  }\n+  bool Shutdown(std::chrono::microseconds) noexcept override {\n+    shutdown_ = true;\n+    return true;\n+  }\n+\n+ private:\n+  arrow::rapidjson::OStreamWrapper sout_;\n+  bool shutdown_;\n+  std::map<int, std::string> statuses_{{0, \"Unset\"}, {1, \"Ok\"}, {2, \"Error\"}};\n+};\n+#endif\n+\n+class ThreadIdSpanProcessor : public sdktrace::BatchSpanProcessor {\n+ public:\n+  using sdktrace::BatchSpanProcessor::BatchSpanProcessor;\n+  void OnEnd(std::unique_ptr<sdktrace::Recordable>&& span) noexcept override {\n+    std::stringstream thread_id;\n+    thread_id << std::this_thread::get_id();\n+    span->SetAttribute(\"thread_id\", thread_id.str());\n+    sdktrace::BatchSpanProcessor::OnEnd(std::move(span));\n+  }\n+};\n+\n+std::unique_ptr<sdktrace::SpanExporter> InitializeExporter() {\n+  auto maybe_env_var = arrow::internal::GetEnvVar(kTracingBackendEnvVar);\n+  if (maybe_env_var.ok()) {\n+    auto env_var = maybe_env_var.ValueOrDie();\n+    if (env_var == \"json\") {\n+#ifdef ARROW_JSON\n+      return std::unique_ptr<sdktrace::SpanExporter>(\n+          new OStreamJsonSpanExporter(std::cerr));\n+#else\n+      ARROW_LOG(WARNING) << \"Requested \" << kTracingBackendEnvVar\n+                         << \"=json but Arrow was built without ARROW_JSON\";\n+#endif\n+    } else if (!env_var.empty()) {\n+      ARROW_LOG(WARNING) << \"Requested unknown backend \" << kTracingBackendEnvVar << \"=\"\n+                         << env_var;\n+    }\n+  }\n+  return std::unique_ptr<sdktrace::SpanExporter>();\n+}\n+\n+nostd::shared_ptr<sdktrace::TracerProvider> InitializeSdkTracerProvider() {\n+  auto exporter = InitializeExporter();\n+  if (exporter) {\n+    sdktrace::BatchSpanProcessorOptions options;\n+    options.max_queue_size = 16384;\n+    options.schedule_delay_millis = std::chrono::milliseconds(500);\n+    options.max_export_batch_size = 16384;\n+    auto processor = std::unique_ptr<sdktrace::SpanProcessor>(\n\nReview comment:\n       I can import arrow::util::make_unique\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-26T21:28:27.516+0000",
                    "updated": "2021-10-26T21:28:27.516+0000",
                    "started": "2021-10-26T21:28:27.516+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "670367",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/670369",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r736936788\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n+ public:\n+  explicit OStreamJsonSpanExporter(std::ostream& sout = std::cerr) noexcept\n+      : sout_(sout), shutdown_(false) {}\n+  std::unique_ptr<sdktrace::Recordable> MakeRecordable() noexcept override {\n+    return std::unique_ptr<sdktrace::Recordable>(new sdktrace::SpanData);\n+  }\n+  otel::sdk::common::ExportResult Export(\n+      const nostd::span<std::unique_ptr<sdktrace::Recordable>>& spans) noexcept override {\n+    if (shutdown_) return otel::sdk::common::ExportResult::kFailure;\n+\n+    for (auto& recordable : spans) {\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper> writer(sout_);\n+      auto span = std::unique_ptr<sdktrace::SpanData>(\n+          static_cast<sdktrace::SpanData*>(recordable.release()));\n+      if (!span) continue;\n+      char trace_id[32] = {0};\n+      char span_id[16] = {0};\n+      char parent_span_id[16] = {0};\n+      span->GetTraceId().ToLowerBase16(trace_id);\n+      span->GetSpanId().ToLowerBase16(span_id);\n+      span->GetParentSpanId().ToLowerBase16(parent_span_id);\n+\n+      writer.StartObject();\n+      writer.Key(\"name\");\n+      writer.String(span->GetName().data(), span->GetName().length());\n+      writer.Key(\"trace_id\");\n+      writer.String(trace_id, 32);\n+      writer.Key(\"span_id\");\n+      writer.String(span_id, 16);\n+      writer.Key(\"parent_span_id\");\n+      writer.String(parent_span_id, 16);\n+      writer.Key(\"start\");\n+      writer.Int64(span->GetStartTime().time_since_epoch().count());\n+      writer.Key(\"duration\");\n+      writer.Int64(span->GetDuration().count());\n+      writer.Key(\"description\");\n+      writer.String(span->GetDescription().data(), span->GetDescription().length());\n+      writer.Key(\"kind\");\n+      writer.Int(static_cast<int>(span->GetSpanKind()));\n+      writer.Key(\"status\");\n+      // TODO: this is expensive\n+      writer.String(statuses_[static_cast<int>(span->GetStatus())]);\n+      writer.Key(\"args\");\n+      writer.StartObject();\n+      OwnedAttributeValueVisitor visitor(writer);\n+      for (const auto& pair : span->GetAttributes()) {\n+        writer.Key(pair.first.data(), pair.first.length());\n+        nostd::visit(visitor, pair.second);\n+      }\n+      writer.EndObject();\n+      writer.EndObject();\n+      sout_.Put('\\n');\n+    }\n+    sout_.Flush();\n+    return otel::sdk::common::ExportResult::kSuccess;\n+  }\n+  bool Shutdown(std::chrono::microseconds) noexcept override {\n+    shutdown_ = true;\n+    return true;\n+  }\n+\n+ private:\n+  arrow::rapidjson::OStreamWrapper sout_;\n+  bool shutdown_;\n+  std::map<int, std::string> statuses_{{0, \"Unset\"}, {1, \"Ok\"}, {2, \"Error\"}};\n+};\n+#endif\n+\n+class ThreadIdSpanProcessor : public sdktrace::BatchSpanProcessor {\n+ public:\n+  using sdktrace::BatchSpanProcessor::BatchSpanProcessor;\n+  void OnEnd(std::unique_ptr<sdktrace::Recordable>&& span) noexcept override {\n+    std::stringstream thread_id;\n+    thread_id << std::this_thread::get_id();\n+    span->SetAttribute(\"thread_id\", thread_id.str());\n+    sdktrace::BatchSpanProcessor::OnEnd(std::move(span));\n+  }\n+};\n+\n+std::unique_ptr<sdktrace::SpanExporter> InitializeExporter() {\n+  auto maybe_env_var = arrow::internal::GetEnvVar(kTracingBackendEnvVar);\n+  if (maybe_env_var.ok()) {\n+    auto env_var = maybe_env_var.ValueOrDie();\n+    if (env_var == \"json\") {\n+#ifdef ARROW_JSON\n+      return std::unique_ptr<sdktrace::SpanExporter>(\n+          new OStreamJsonSpanExporter(std::cerr));\n+#else\n+      ARROW_LOG(WARNING) << \"Requested \" << kTracingBackendEnvVar\n+                         << \"=json but Arrow was built without ARROW_JSON\";\n+#endif\n+    } else if (!env_var.empty()) {\n+      ARROW_LOG(WARNING) << \"Requested unknown backend \" << kTracingBackendEnvVar << \"=\"\n+                         << env_var;\n+    }\n+  }\n+  return std::unique_ptr<sdktrace::SpanExporter>();\n+}\n+\n+nostd::shared_ptr<sdktrace::TracerProvider> InitializeSdkTracerProvider() {\n+  auto exporter = InitializeExporter();\n+  if (exporter) {\n+    sdktrace::BatchSpanProcessorOptions options;\n+    options.max_queue_size = 16384;\n+    options.schedule_delay_millis = std::chrono::milliseconds(500);\n+    options.max_export_batch_size = 16384;\n+    auto processor = std::unique_ptr<sdktrace::SpanProcessor>(\n+        new ThreadIdSpanProcessor(std::move(exporter), options));\n+    return nostd::shared_ptr<sdktrace::TracerProvider>(\n\nReview comment:\n       I don't remember if there was a reason why. I can go fiddle with it. (I think there's no nostd::make_shared?)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-26T21:29:55.584+0000",
                    "updated": "2021-10-26T21:29:55.584+0000",
                    "started": "2021-10-26T21:29:55.584+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "670369",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/671615",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r738724692\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n\nReview comment:\n       Ok, so what I think I'll do here is remove the formatter and include a way to configure the ostream and OTLP exporters. I want to still _optionally_ include these exporters, for cases like PyArrow and R (which can't realistically link to OTel and configure it) and just to make like easier for Arrow developers. But anything we ship will only use the OpenTelemetry API.\r\n   \r\n   I agree libraries should only use the API but Arrow is in a weird spot. If the Python OTel bindings interoperated with the C++ ones (and we had R bindings) then the issue here would be moot.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-28T20:04:40.373+0000",
                    "updated": "2021-10-28T20:04:40.373+0000",
                    "started": "2021-10-28T20:04:40.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "671615",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/671626",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r738742092\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n\nReview comment:\n       True. Sounds good to me.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-28T20:21:29.284+0000",
                    "updated": "2021-10-28T20:21:29.284+0000",
                    "started": "2021-10-28T20:21:29.284+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "671626",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/671627",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r738744932\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n\nReview comment:\n       The issue that will come up is applications that mix Python libraries and arrow c++ code, that already have exporters and are running in some arbitrary configuration. I guess those folks can build arrow without the exporter and use that?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-28T20:24:05.111+0000",
                    "updated": "2021-10-28T20:24:05.111+0000",
                    "started": "2021-10-28T20:24:05.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "671627",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/671632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r738754458\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n\nReview comment:\n       I would guess that most Python libraries with exporters would be using the Python library, but yeah - we should ship Arrow without the exporter by default. (I think it should be possible to eventually ship a second package with only the exporters, perhaps? At least on Conda, maybe not as a wheel.)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-28T20:32:39.534+0000",
                    "updated": "2021-10-28T20:32:39.534+0000",
                    "started": "2021-10-28T20:32:39.534+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "671632",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/672130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r739465101\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -0,0 +1,252 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#include <iostream>\n+#include <sstream>\n+#include <thread>\n+\n+#ifdef _MSC_VER\n+#pragma warning(push)\n+#pragma warning(disable : 4522)\n+#endif\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/sdk/trace/batch_span_processor.h>\n+#include <opentelemetry/sdk/trace/recordable.h>\n+#include <opentelemetry/sdk/trace/span_data.h>\n+#include <opentelemetry/sdk/trace/tracer_provider.h>\n+#include <opentelemetry/trace/noop.h>\n+#include <opentelemetry/trace/provider.h>\n+#endif\n+#ifdef _MSC_VER\n+#pragma warning(pop)\n+#endif\n+\n+#include \"arrow/util/config.h\"\n+#include \"arrow/util/io_util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/make_unique.h\"\n+#ifdef ARROW_JSON\n+#include \"arrow/json/rapidjson_defs.h\"\n+#include \"rapidjson/ostreamwrapper.h\"\n+#include \"rapidjson/writer.h\"\n+#endif\n+\n+namespace arrow {\n+namespace internal {\n+namespace tracing {\n+\n+namespace nostd = opentelemetry::nostd;\n+namespace otel = opentelemetry;\n+\n+constexpr char kTracingBackendEnvVar[] = \"ARROW_TRACING_BACKEND\";\n+\n+namespace {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace sdktrace = opentelemetry::sdk::trace;\n+#ifdef ARROW_JSON\n+struct OwnedAttributeValueVisitor {\n+  OwnedAttributeValueVisitor(\n+      arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer_)\n+      : writer(writer_) {}\n+\n+  void operator()(const std::string& arg) { writer.String(arg); }\n+\n+  void operator()(const int32_t& arg) { writer.Int(arg); }\n+\n+  void operator()(const uint32_t& arg) { writer.Uint(arg); }\n+\n+  void operator()(const int64_t& arg) { writer.Int64(arg); }\n+\n+  void operator()(const uint64_t& arg) { writer.Uint64(arg); }\n+\n+  template <typename T>\n+  void operator()(T&& arg) {\n+    writer.Null();\n+  }\n+\n+  arrow::rapidjson::Writer<arrow::rapidjson::OStreamWrapper>& writer;\n+};\n+\n+/// Export spans as newline-delimited JSON.\n+class OStreamJsonSpanExporter : public sdktrace::SpanExporter {\n\nReview comment:\n       Ugh, enabling OTLP requires the bundled Protobuf definitions, which aren't in the release tarball (similar-ish issue before: https://github.com/open-telemetry/opentelemetry-cpp/issues/869)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-29T18:52:48.765+0000",
                    "updated": "2021-10-29T18:52:48.765+0000",
                    "started": "2021-10-29T18:52:48.765+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "672130",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/672502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r739891424\n\n\n\n##########\nFile path: cpp/cmake_modules/ThirdpartyToolchain.cmake\n##########\n@@ -3839,6 +3851,115 @@ if(ARROW_ORC)\n   message(STATUS \"Found ORC headers: ${ORC_INCLUDE_DIR}\")\n endif()\n \n+# ----------------------------------------------------------------------\n+# OpenTelemetry C++\n+\n+macro(build_opentelemetry)\n+  message(\"Building OpenTelemetry from source\")\n+  set(OPENTELEMETRY_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/opentelemetry_ep-install\")\n+  set(OPENTELEMETRY_INCLUDE_DIR \"${OPENTELEMETRY_PREFIX}/include\")\n+  set(OPENTELEMETRY_STATIC_LIB\n+      \"${OPENTELEMETRY_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}opentelemetry${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n+  )\n+  set(_OPENTELEMETRY_APIS api sdk)\n+  set(_OPENTELEMETRY_LIBS common resources trace)\n+  set(OPENTELEMETRY_BUILD_BYPRODUCTS)\n+  set(OPENTELEMETRY_LIBRARIES)\n+\n+  foreach(_OPENTELEMETRY_LIB ${_OPENTELEMETRY_APIS})\n+    add_library(opentelemetry-cpp::${_OPENTELEMETRY_LIB} INTERFACE IMPORTED)\n+    set_target_properties(opentelemetry-cpp::${_OPENTELEMETRY_LIB}\n+                          PROPERTIES INTERFACE_INCLUDE_DIRECTORIES\n+                                     \"${OPENTELEMETRY_INCLUDE_DIR}\")\n+  endforeach()\n+  foreach(_OPENTELEMETRY_LIB ${_OPENTELEMETRY_LIBS})\n+    set(_OPENTELEMETRY_STATIC_LIBRARY\n+        \"${OPENTELEMETRY_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}opentelemetry_${_OPENTELEMETRY_LIB}${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n+    )\n+    add_library(opentelemetry-cpp::${_OPENTELEMETRY_LIB} STATIC IMPORTED)\n+    set_target_properties(opentelemetry-cpp::${_OPENTELEMETRY_LIB}\n+                          PROPERTIES IMPORTED_LOCATION ${_OPENTELEMETRY_STATIC_LIBRARY})\n+    list(APPEND OPENTELEMETRY_BUILD_BYPRODUCTS ${_OPENTELEMETRY_STATIC_LIBRARY})\n+    list(APPEND OPENTELEMETRY_LIBRARIES opentelemetry-cpp::${_OPENTELEMETRY_LIB})\n+  endforeach()\n+\n+  set(OPENTELEMETRY_CMAKE_ARGS\n+      ${EP_COMMON_TOOLCHAIN}\n+      \"-DCMAKE_INSTALL_PREFIX=${OPENTELEMETRY_PREFIX}\"\n+      \"-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\"\n+      -DCMAKE_INSTALL_LIBDIR=lib\n+      \"-DCMAKE_CXX_FLAGS=${EP_CXX_FLAGS}\"\n+      -DBUILD_TESTING=OFF\n+      -DWITH_EXAMPLES=OFF)\n+  if(ARROW_WITH_OPENTELEMETRY)\n+    list(APPEND ARROW_BUNDLED_STATIC_LIBS ${OPENTELEMETRY_LIBRARIES})\n+  else()\n+    set(OPENTELEMETRY_CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS} \"-DWITH_API_ONLY=ON\")\n+    if(WIN32)\n+      # WITH_ETW does not respect WITH_API_ONLY\n+      set(OPENTELEMETRY_CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS} -DWITH_ETW=OFF)\n+    endif()\n+  endif()\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"s390x\")\n+    externalproject_add(opentelemetry_ep\n+                        ${EP_LOG_OPTIONS}\n+                        URL_HASH \"SHA256=${ARROW_OPENTELEMETRY_BUILD_SHA256_CHECKSUM}\"\n+                        # OpenTelemetry tries to determine the processor arch for vcpkg,\n+                        # which fails on s390x, even though it doesn't use vcpkg there\n+                        CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ARCH=s390x\n+                                          ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR}\n+                                          \"<SOURCE_DIR><SOURCE_SUBDIR>\"\n+                                          ${OPENTELEMETRY_CMAKE_ARGS}\n+                        BUILD_COMMAND ${CMAKE_COMMAND} --build \"<BINARY_DIR>\" --target all\n+                        INSTALL_COMMAND ${CMAKE_COMMAND} --build \"<BINARY_DIR>\" --target\n+                                        install\n+                        # CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS}\n+                        URL ${OPENTELEMETRY_SOURCE_URL}\n+                        BUILD_BYPRODUCTS ${OPENTELEMETRY_BUILD_BYPRODUCTS}\n+                        EXCLUDE_FROM_ALL NOT\n+                        ${ARROW_WITH_OPENTELEMETRY})\n+  else()\n+    externalproject_add(opentelemetry_ep\n+                        ${EP_LOG_OPTIONS}\n+                        URL_HASH \"SHA256=${ARROW_OPENTELEMETRY_BUILD_SHA256_CHECKSUM}\"\n+                        CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS}\n+                        URL ${OPENTELEMETRY_SOURCE_URL}\n+                        BUILD_BYPRODUCTS ${OPENTELEMETRY_BUILD_BYPRODUCTS}\n+                        EXCLUDE_FROM_ALL NOT\n+                        ${ARROW_WITH_OPENTELEMETRY})\n+  endif()\n+  add_dependencies(toolchain opentelemetry_ep)\n+  add_dependencies(toolchain-tests opentelemetry_ep)\n+\n+  set(OPENTELEMETRY_VENDORED 1)\n+\n+  set_target_properties(opentelemetry-cpp::common\n+                        PROPERTIES INTERFACE_LINK_LIBRARIES\n+                                   \"opentelemetry-cpp::api;opentelemetry-cpp::sdk;Threads::Threads\"\n+  )\n+  set_target_properties(opentelemetry-cpp::resources\n+                        PROPERTIES INTERFACE_LINK_LIBRARIES \"opentelemetry-cpp::common\")\n+  set_target_properties(opentelemetry-cpp::trace\n+                        PROPERTIES INTERFACE_LINK_LIBRARIES\n+                                   \"opentelemetry-cpp::common;opentelemetry-cpp::resources\"\n+  )\n+\n+  foreach(_OPENTELEMETRY_LIB ${_OPENTELEMETRY_LIBS})\n+    add_dependencies(opentelemetry-cpp::${_OPENTELEMETRY_LIB} opentelemetry_ep)\n+  endforeach()\n+endmacro()\n+\n+# For now OpenTelemetry is always bundled from upstream\n+if(1)\n\nReview comment:\n       Any chance you can do the same thing that's done elsewhere in this file and call `find_package` if `OpenTelemetry_SOURCE == \"SYSTEM\"`?\r\n   \r\n   Bundling unconditionally like this makes it really difficult to deal OpenTelemetry provided by a package manager.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-31T23:24:06.458+0000",
                    "updated": "2021-10-31T23:24:06.458+0000",
                    "started": "2021-10-31T23:24:06.458+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "672502",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/672503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r739891424\n\n\n\n##########\nFile path: cpp/cmake_modules/ThirdpartyToolchain.cmake\n##########\n@@ -3839,6 +3851,115 @@ if(ARROW_ORC)\n   message(STATUS \"Found ORC headers: ${ORC_INCLUDE_DIR}\")\n endif()\n \n+# ----------------------------------------------------------------------\n+# OpenTelemetry C++\n+\n+macro(build_opentelemetry)\n+  message(\"Building OpenTelemetry from source\")\n+  set(OPENTELEMETRY_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/opentelemetry_ep-install\")\n+  set(OPENTELEMETRY_INCLUDE_DIR \"${OPENTELEMETRY_PREFIX}/include\")\n+  set(OPENTELEMETRY_STATIC_LIB\n+      \"${OPENTELEMETRY_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}opentelemetry${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n+  )\n+  set(_OPENTELEMETRY_APIS api sdk)\n+  set(_OPENTELEMETRY_LIBS common resources trace)\n+  set(OPENTELEMETRY_BUILD_BYPRODUCTS)\n+  set(OPENTELEMETRY_LIBRARIES)\n+\n+  foreach(_OPENTELEMETRY_LIB ${_OPENTELEMETRY_APIS})\n+    add_library(opentelemetry-cpp::${_OPENTELEMETRY_LIB} INTERFACE IMPORTED)\n+    set_target_properties(opentelemetry-cpp::${_OPENTELEMETRY_LIB}\n+                          PROPERTIES INTERFACE_INCLUDE_DIRECTORIES\n+                                     \"${OPENTELEMETRY_INCLUDE_DIR}\")\n+  endforeach()\n+  foreach(_OPENTELEMETRY_LIB ${_OPENTELEMETRY_LIBS})\n+    set(_OPENTELEMETRY_STATIC_LIBRARY\n+        \"${OPENTELEMETRY_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}opentelemetry_${_OPENTELEMETRY_LIB}${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n+    )\n+    add_library(opentelemetry-cpp::${_OPENTELEMETRY_LIB} STATIC IMPORTED)\n+    set_target_properties(opentelemetry-cpp::${_OPENTELEMETRY_LIB}\n+                          PROPERTIES IMPORTED_LOCATION ${_OPENTELEMETRY_STATIC_LIBRARY})\n+    list(APPEND OPENTELEMETRY_BUILD_BYPRODUCTS ${_OPENTELEMETRY_STATIC_LIBRARY})\n+    list(APPEND OPENTELEMETRY_LIBRARIES opentelemetry-cpp::${_OPENTELEMETRY_LIB})\n+  endforeach()\n+\n+  set(OPENTELEMETRY_CMAKE_ARGS\n+      ${EP_COMMON_TOOLCHAIN}\n+      \"-DCMAKE_INSTALL_PREFIX=${OPENTELEMETRY_PREFIX}\"\n+      \"-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\"\n+      -DCMAKE_INSTALL_LIBDIR=lib\n+      \"-DCMAKE_CXX_FLAGS=${EP_CXX_FLAGS}\"\n+      -DBUILD_TESTING=OFF\n+      -DWITH_EXAMPLES=OFF)\n+  if(ARROW_WITH_OPENTELEMETRY)\n+    list(APPEND ARROW_BUNDLED_STATIC_LIBS ${OPENTELEMETRY_LIBRARIES})\n+  else()\n+    set(OPENTELEMETRY_CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS} \"-DWITH_API_ONLY=ON\")\n+    if(WIN32)\n+      # WITH_ETW does not respect WITH_API_ONLY\n+      set(OPENTELEMETRY_CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS} -DWITH_ETW=OFF)\n+    endif()\n+  endif()\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"s390x\")\n+    externalproject_add(opentelemetry_ep\n+                        ${EP_LOG_OPTIONS}\n+                        URL_HASH \"SHA256=${ARROW_OPENTELEMETRY_BUILD_SHA256_CHECKSUM}\"\n+                        # OpenTelemetry tries to determine the processor arch for vcpkg,\n+                        # which fails on s390x, even though it doesn't use vcpkg there\n+                        CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ARCH=s390x\n+                                          ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR}\n+                                          \"<SOURCE_DIR><SOURCE_SUBDIR>\"\n+                                          ${OPENTELEMETRY_CMAKE_ARGS}\n+                        BUILD_COMMAND ${CMAKE_COMMAND} --build \"<BINARY_DIR>\" --target all\n+                        INSTALL_COMMAND ${CMAKE_COMMAND} --build \"<BINARY_DIR>\" --target\n+                                        install\n+                        # CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS}\n+                        URL ${OPENTELEMETRY_SOURCE_URL}\n+                        BUILD_BYPRODUCTS ${OPENTELEMETRY_BUILD_BYPRODUCTS}\n+                        EXCLUDE_FROM_ALL NOT\n+                        ${ARROW_WITH_OPENTELEMETRY})\n+  else()\n+    externalproject_add(opentelemetry_ep\n+                        ${EP_LOG_OPTIONS}\n+                        URL_HASH \"SHA256=${ARROW_OPENTELEMETRY_BUILD_SHA256_CHECKSUM}\"\n+                        CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS}\n+                        URL ${OPENTELEMETRY_SOURCE_URL}\n+                        BUILD_BYPRODUCTS ${OPENTELEMETRY_BUILD_BYPRODUCTS}\n+                        EXCLUDE_FROM_ALL NOT\n+                        ${ARROW_WITH_OPENTELEMETRY})\n+  endif()\n+  add_dependencies(toolchain opentelemetry_ep)\n+  add_dependencies(toolchain-tests opentelemetry_ep)\n+\n+  set(OPENTELEMETRY_VENDORED 1)\n+\n+  set_target_properties(opentelemetry-cpp::common\n+                        PROPERTIES INTERFACE_LINK_LIBRARIES\n+                                   \"opentelemetry-cpp::api;opentelemetry-cpp::sdk;Threads::Threads\"\n+  )\n+  set_target_properties(opentelemetry-cpp::resources\n+                        PROPERTIES INTERFACE_LINK_LIBRARIES \"opentelemetry-cpp::common\")\n+  set_target_properties(opentelemetry-cpp::trace\n+                        PROPERTIES INTERFACE_LINK_LIBRARIES\n+                                   \"opentelemetry-cpp::common;opentelemetry-cpp::resources\"\n+  )\n+\n+  foreach(_OPENTELEMETRY_LIB ${_OPENTELEMETRY_LIBS})\n+    add_dependencies(opentelemetry-cpp::${_OPENTELEMETRY_LIB} opentelemetry_ep)\n+  endforeach()\n+endmacro()\n+\n+# For now OpenTelemetry is always bundled from upstream\n+if(1)\n\nReview comment:\n       Any chance you can do the same thing that's done elsewhere in this file and call `find_package` if `OpenTelemetry_SOURCE == \"SYSTEM\"`?\r\n   \r\n   Bundling unconditionally like this makes it really difficult to deal with OpenTelemetry provided by a package manager.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-31T23:24:19.648+0000",
                    "updated": "2021-10-31T23:24:19.648+0000",
                    "started": "2021-10-31T23:24:19.648+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "672503",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/672504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r739898822\n\n\n\n##########\nFile path: cpp/cmake_modules/ThirdpartyToolchain.cmake\n##########\n@@ -3839,6 +3851,115 @@ if(ARROW_ORC)\n   message(STATUS \"Found ORC headers: ${ORC_INCLUDE_DIR}\")\n endif()\n \n+# ----------------------------------------------------------------------\n+# OpenTelemetry C++\n+\n+macro(build_opentelemetry)\n+  message(\"Building OpenTelemetry from source\")\n+  set(OPENTELEMETRY_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/opentelemetry_ep-install\")\n+  set(OPENTELEMETRY_INCLUDE_DIR \"${OPENTELEMETRY_PREFIX}/include\")\n+  set(OPENTELEMETRY_STATIC_LIB\n+      \"${OPENTELEMETRY_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}opentelemetry${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n+  )\n+  set(_OPENTELEMETRY_APIS api sdk)\n+  set(_OPENTELEMETRY_LIBS common resources trace)\n+  set(OPENTELEMETRY_BUILD_BYPRODUCTS)\n+  set(OPENTELEMETRY_LIBRARIES)\n+\n+  foreach(_OPENTELEMETRY_LIB ${_OPENTELEMETRY_APIS})\n+    add_library(opentelemetry-cpp::${_OPENTELEMETRY_LIB} INTERFACE IMPORTED)\n+    set_target_properties(opentelemetry-cpp::${_OPENTELEMETRY_LIB}\n+                          PROPERTIES INTERFACE_INCLUDE_DIRECTORIES\n+                                     \"${OPENTELEMETRY_INCLUDE_DIR}\")\n+  endforeach()\n+  foreach(_OPENTELEMETRY_LIB ${_OPENTELEMETRY_LIBS})\n+    set(_OPENTELEMETRY_STATIC_LIBRARY\n+        \"${OPENTELEMETRY_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}opentelemetry_${_OPENTELEMETRY_LIB}${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n+    )\n+    add_library(opentelemetry-cpp::${_OPENTELEMETRY_LIB} STATIC IMPORTED)\n+    set_target_properties(opentelemetry-cpp::${_OPENTELEMETRY_LIB}\n+                          PROPERTIES IMPORTED_LOCATION ${_OPENTELEMETRY_STATIC_LIBRARY})\n+    list(APPEND OPENTELEMETRY_BUILD_BYPRODUCTS ${_OPENTELEMETRY_STATIC_LIBRARY})\n+    list(APPEND OPENTELEMETRY_LIBRARIES opentelemetry-cpp::${_OPENTELEMETRY_LIB})\n+  endforeach()\n+\n+  set(OPENTELEMETRY_CMAKE_ARGS\n+      ${EP_COMMON_TOOLCHAIN}\n+      \"-DCMAKE_INSTALL_PREFIX=${OPENTELEMETRY_PREFIX}\"\n+      \"-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\"\n+      -DCMAKE_INSTALL_LIBDIR=lib\n+      \"-DCMAKE_CXX_FLAGS=${EP_CXX_FLAGS}\"\n+      -DBUILD_TESTING=OFF\n+      -DWITH_EXAMPLES=OFF)\n+  if(ARROW_WITH_OPENTELEMETRY)\n+    list(APPEND ARROW_BUNDLED_STATIC_LIBS ${OPENTELEMETRY_LIBRARIES})\n+  else()\n+    set(OPENTELEMETRY_CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS} \"-DWITH_API_ONLY=ON\")\n+    if(WIN32)\n+      # WITH_ETW does not respect WITH_API_ONLY\n+      set(OPENTELEMETRY_CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS} -DWITH_ETW=OFF)\n+    endif()\n+  endif()\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"s390x\")\n+    externalproject_add(opentelemetry_ep\n+                        ${EP_LOG_OPTIONS}\n+                        URL_HASH \"SHA256=${ARROW_OPENTELEMETRY_BUILD_SHA256_CHECKSUM}\"\n+                        # OpenTelemetry tries to determine the processor arch for vcpkg,\n+                        # which fails on s390x, even though it doesn't use vcpkg there\n+                        CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ARCH=s390x\n+                                          ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR}\n+                                          \"<SOURCE_DIR><SOURCE_SUBDIR>\"\n+                                          ${OPENTELEMETRY_CMAKE_ARGS}\n+                        BUILD_COMMAND ${CMAKE_COMMAND} --build \"<BINARY_DIR>\" --target all\n+                        INSTALL_COMMAND ${CMAKE_COMMAND} --build \"<BINARY_DIR>\" --target\n+                                        install\n+                        # CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS}\n+                        URL ${OPENTELEMETRY_SOURCE_URL}\n+                        BUILD_BYPRODUCTS ${OPENTELEMETRY_BUILD_BYPRODUCTS}\n+                        EXCLUDE_FROM_ALL NOT\n+                        ${ARROW_WITH_OPENTELEMETRY})\n+  else()\n+    externalproject_add(opentelemetry_ep\n+                        ${EP_LOG_OPTIONS}\n+                        URL_HASH \"SHA256=${ARROW_OPENTELEMETRY_BUILD_SHA256_CHECKSUM}\"\n+                        CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS}\n+                        URL ${OPENTELEMETRY_SOURCE_URL}\n+                        BUILD_BYPRODUCTS ${OPENTELEMETRY_BUILD_BYPRODUCTS}\n+                        EXCLUDE_FROM_ALL NOT\n+                        ${ARROW_WITH_OPENTELEMETRY})\n+  endif()\n+  add_dependencies(toolchain opentelemetry_ep)\n+  add_dependencies(toolchain-tests opentelemetry_ep)\n+\n+  set(OPENTELEMETRY_VENDORED 1)\n+\n+  set_target_properties(opentelemetry-cpp::common\n+                        PROPERTIES INTERFACE_LINK_LIBRARIES\n+                                   \"opentelemetry-cpp::api;opentelemetry-cpp::sdk;Threads::Threads\"\n+  )\n+  set_target_properties(opentelemetry-cpp::resources\n+                        PROPERTIES INTERFACE_LINK_LIBRARIES \"opentelemetry-cpp::common\")\n+  set_target_properties(opentelemetry-cpp::trace\n+                        PROPERTIES INTERFACE_LINK_LIBRARIES\n+                                   \"opentelemetry-cpp::common;opentelemetry-cpp::resources\"\n+  )\n+\n+  foreach(_OPENTELEMETRY_LIB ${_OPENTELEMETRY_LIBS})\n+    add_dependencies(opentelemetry-cpp::${_OPENTELEMETRY_LIB} opentelemetry_ep)\n+  endforeach()\n+endmacro()\n+\n+# For now OpenTelemetry is always bundled from upstream\n+if(1)\n\nReview comment:\n       I can, though without packages in Conda etc. it'll be a little more annoying to test things. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-01T00:23:37.340+0000",
                    "updated": "2021-11-01T00:23:37.340+0000",
                    "started": "2021-11-01T00:23:37.339+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "672504",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/672512",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#discussion_r739914273\n\n\n\n##########\nFile path: cpp/cmake_modules/ThirdpartyToolchain.cmake\n##########\n@@ -3839,6 +3851,115 @@ if(ARROW_ORC)\n   message(STATUS \"Found ORC headers: ${ORC_INCLUDE_DIR}\")\n endif()\n \n+# ----------------------------------------------------------------------\n+# OpenTelemetry C++\n+\n+macro(build_opentelemetry)\n+  message(\"Building OpenTelemetry from source\")\n+  set(OPENTELEMETRY_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/opentelemetry_ep-install\")\n+  set(OPENTELEMETRY_INCLUDE_DIR \"${OPENTELEMETRY_PREFIX}/include\")\n+  set(OPENTELEMETRY_STATIC_LIB\n+      \"${OPENTELEMETRY_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}opentelemetry${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n+  )\n+  set(_OPENTELEMETRY_APIS api sdk)\n+  set(_OPENTELEMETRY_LIBS common resources trace)\n+  set(OPENTELEMETRY_BUILD_BYPRODUCTS)\n+  set(OPENTELEMETRY_LIBRARIES)\n+\n+  foreach(_OPENTELEMETRY_LIB ${_OPENTELEMETRY_APIS})\n+    add_library(opentelemetry-cpp::${_OPENTELEMETRY_LIB} INTERFACE IMPORTED)\n+    set_target_properties(opentelemetry-cpp::${_OPENTELEMETRY_LIB}\n+                          PROPERTIES INTERFACE_INCLUDE_DIRECTORIES\n+                                     \"${OPENTELEMETRY_INCLUDE_DIR}\")\n+  endforeach()\n+  foreach(_OPENTELEMETRY_LIB ${_OPENTELEMETRY_LIBS})\n+    set(_OPENTELEMETRY_STATIC_LIBRARY\n+        \"${OPENTELEMETRY_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}opentelemetry_${_OPENTELEMETRY_LIB}${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n+    )\n+    add_library(opentelemetry-cpp::${_OPENTELEMETRY_LIB} STATIC IMPORTED)\n+    set_target_properties(opentelemetry-cpp::${_OPENTELEMETRY_LIB}\n+                          PROPERTIES IMPORTED_LOCATION ${_OPENTELEMETRY_STATIC_LIBRARY})\n+    list(APPEND OPENTELEMETRY_BUILD_BYPRODUCTS ${_OPENTELEMETRY_STATIC_LIBRARY})\n+    list(APPEND OPENTELEMETRY_LIBRARIES opentelemetry-cpp::${_OPENTELEMETRY_LIB})\n+  endforeach()\n+\n+  set(OPENTELEMETRY_CMAKE_ARGS\n+      ${EP_COMMON_TOOLCHAIN}\n+      \"-DCMAKE_INSTALL_PREFIX=${OPENTELEMETRY_PREFIX}\"\n+      \"-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\"\n+      -DCMAKE_INSTALL_LIBDIR=lib\n+      \"-DCMAKE_CXX_FLAGS=${EP_CXX_FLAGS}\"\n+      -DBUILD_TESTING=OFF\n+      -DWITH_EXAMPLES=OFF)\n+  if(ARROW_WITH_OPENTELEMETRY)\n+    list(APPEND ARROW_BUNDLED_STATIC_LIBS ${OPENTELEMETRY_LIBRARIES})\n+  else()\n+    set(OPENTELEMETRY_CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS} \"-DWITH_API_ONLY=ON\")\n+    if(WIN32)\n+      # WITH_ETW does not respect WITH_API_ONLY\n+      set(OPENTELEMETRY_CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS} -DWITH_ETW=OFF)\n+    endif()\n+  endif()\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"s390x\")\n+    externalproject_add(opentelemetry_ep\n+                        ${EP_LOG_OPTIONS}\n+                        URL_HASH \"SHA256=${ARROW_OPENTELEMETRY_BUILD_SHA256_CHECKSUM}\"\n+                        # OpenTelemetry tries to determine the processor arch for vcpkg,\n+                        # which fails on s390x, even though it doesn't use vcpkg there\n+                        CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ARCH=s390x\n+                                          ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR}\n+                                          \"<SOURCE_DIR><SOURCE_SUBDIR>\"\n+                                          ${OPENTELEMETRY_CMAKE_ARGS}\n+                        BUILD_COMMAND ${CMAKE_COMMAND} --build \"<BINARY_DIR>\" --target all\n+                        INSTALL_COMMAND ${CMAKE_COMMAND} --build \"<BINARY_DIR>\" --target\n+                                        install\n+                        # CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS}\n+                        URL ${OPENTELEMETRY_SOURCE_URL}\n+                        BUILD_BYPRODUCTS ${OPENTELEMETRY_BUILD_BYPRODUCTS}\n+                        EXCLUDE_FROM_ALL NOT\n+                        ${ARROW_WITH_OPENTELEMETRY})\n+  else()\n+    externalproject_add(opentelemetry_ep\n+                        ${EP_LOG_OPTIONS}\n+                        URL_HASH \"SHA256=${ARROW_OPENTELEMETRY_BUILD_SHA256_CHECKSUM}\"\n+                        CMAKE_ARGS ${OPENTELEMETRY_CMAKE_ARGS}\n+                        URL ${OPENTELEMETRY_SOURCE_URL}\n+                        BUILD_BYPRODUCTS ${OPENTELEMETRY_BUILD_BYPRODUCTS}\n+                        EXCLUDE_FROM_ALL NOT\n+                        ${ARROW_WITH_OPENTELEMETRY})\n+  endif()\n+  add_dependencies(toolchain opentelemetry_ep)\n+  add_dependencies(toolchain-tests opentelemetry_ep)\n+\n+  set(OPENTELEMETRY_VENDORED 1)\n+\n+  set_target_properties(opentelemetry-cpp::common\n+                        PROPERTIES INTERFACE_LINK_LIBRARIES\n+                                   \"opentelemetry-cpp::api;opentelemetry-cpp::sdk;Threads::Threads\"\n+  )\n+  set_target_properties(opentelemetry-cpp::resources\n+                        PROPERTIES INTERFACE_LINK_LIBRARIES \"opentelemetry-cpp::common\")\n+  set_target_properties(opentelemetry-cpp::trace\n+                        PROPERTIES INTERFACE_LINK_LIBRARIES\n+                                   \"opentelemetry-cpp::common;opentelemetry-cpp::resources\"\n+  )\n+\n+  foreach(_OPENTELEMETRY_LIB ${_OPENTELEMETRY_LIBS})\n+    add_dependencies(opentelemetry-cpp::${_OPENTELEMETRY_LIB} opentelemetry_ep)\n+  endforeach()\n+endmacro()\n+\n+# For now OpenTelemetry is always bundled from upstream\n+if(1)\n\nReview comment:\n       It's fine without, maybe we can get that packaged up before the next release.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-01T01:52:13.111+0000",
                    "updated": "2021-11-01T01:52:13.111+0000",
                    "started": "2021-11-01T01:52:13.111+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "672512",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/672704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#issuecomment-956320657\n\n\n   I've enabled the OTLP build, with caveats:\r\n   - It will not work with bundled gRPC/Protobuf since OTel appears not to declare a dependency on gRPC from its Protobuf module. (I need to replicate and report upstream, though I'm having issues getting OTel to build in general right now.)\r\n   - Even though we enable only the OTLP HTTP exporter here, we still need gRPC because the upstream build always depends on both.\r\n   - I haven't actually wired up the exporter for use yet.\r\n   I'll also get it building against \"system\" OTel next (assuming you specify it via CMAKE_PREFIX_PATH, since we don't have Conda/vcpkg/system package manager packages).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-01T15:14:47.461+0000",
                    "updated": "2021-11-01T15:14:47.461+0000",
                    "started": "2021-11-01T15:14:47.461+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "672704",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/672705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm edited a comment on pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#issuecomment-956320657\n\n\n   I've enabled the OTLP build, with caveats:\r\n   - It will not work with bundled gRPC/Protobuf since OTel appears not to declare a dependency on gRPC from its Protobuf module. (I need to replicate and report upstream, though I'm having issues getting OTel to build in general right now.)\r\n   - Even though we enable only the OTLP HTTP exporter here, we still need gRPC because the upstream build always depends on both.\r\n   - I haven't actually wired up the exporter for use yet.\r\n   \r\n   I'll also get it building against \"system\" OTel next (assuming you specify it via CMAKE_PREFIX_PATH, since we don't have Conda/vcpkg/system package manager packages).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-01T15:15:00.640+0000",
                    "updated": "2021-11-01T15:15:00.640+0000",
                    "started": "2021-11-01T15:15:00.640+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "672705",
                    "issueId": "13377074"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/worklog/672719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on pull request #10260:\nURL: https://github.com/apache/arrow/pull/10260#issuecomment-956330534\n\n\n   @lidavidm Do you have an example somewhere? I am happy to help try to spin things up and see where I get stuck (my success there wouldn't block this PR in any way)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-01T15:26:07.022+0000",
                    "updated": "2021-11-01T15:26:07.022+0000",
                    "started": "2021-11-01T15:26:07.022+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "672719",
                    "issueId": "13377074"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 40200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@593bfb51[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@716b518[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a664b5b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@386a817a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e04f090[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7cc0b9a9[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44c409f9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2849214a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7190d4a3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@86426c9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c0b7dfd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@d294247[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 40200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Dec 01 19:34:31 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-12-01T19:34:31.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12671/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2021-05-06T18:09:23.000+0000",
        "updated": "2021-12-02T12:20:38.000+0000",
        "timeoriginalestimate": null,
        "description": "[As discussed on the mailing list|https://lists.apache.org/thread.html/re0db1b4d7a82f4cdb7bfab4bdd3620a9b3813a22626800d9772ccbda%40%3Cdev.arrow.apache.org%3E], try integrating a framework like OpenTelemetry to get performance instrumentation (in Datasets) and distributed tracing support (in Flight).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 40200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Integrate tracing framework",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074/comment/17451996",
                    "id": "17451996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10260\n[https://github.com/apache/arrow/pull/10260]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-12-01T19:34:31.444+0000",
                    "updated": "2021-12-01T19:34:31.444+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0qspk:",
        "customfield_12314139": null
    }
}