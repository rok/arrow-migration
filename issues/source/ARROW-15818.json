{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13431341",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341",
    "key": "ARROW-15818",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "substrait"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "aggregateprogress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15818/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 37,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/736676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot opened a new pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564\n\n\n   This is an early draft PR to add a basic Substrait consumer, at least enough for us to test our Substrait output to help us stay on track.\r\n   \r\n   The main issue I have is that I can't get this to build locally, even though I'm building with `-DARROW_ENGINE=ON`. I don't think that `libsubstrait.a` is getting installed nor are the headers in `arrow/engine/substrait`, and I'm not sure if this is a config error or whether I just don't know cmake well enough to make it work on my machine.\r\n   \r\n   The second thing that I don't know how to do is how to get the source node at the top of the serialized plan.\r\n   \r\n   The third thing I don't know how to do is to get the plan to return a RecordBatchReader like we do with the other exec plan runner.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T14:26:22.547+0000",
                    "updated": "2022-03-04T14:26:22.547+0000",
                    "started": "2022-03-04T14:26:22.547+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736676",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/736677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#issuecomment-1059208150\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T14:26:36.785+0000",
                    "updated": "2022-03-04T14:26:36.785+0000",
                    "started": "2022-03-04T14:26:36.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736677",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/736693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#discussion_r819626624\n\n\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -296,3 +296,39 @@ ExecNode <- R6Class(\"ExecNode\",\n     schema = function() ExecNode_output_schema(self)\n   )\n )\n+\n+do_exec_plan_substrait <- function(.data, substrait_plan) {\n+  if (is.string(substrait_plan)) {\n+    substrait_plan <- engine__internal__SubstraitFromJSON(substrait_plan)\n+  } else if (is.raw(substrait_plan)) {\n+    substrait_plan <- buffer(substrait_plan)\n+  } else {\n+    abort(\"`substrait_plan` must be a JSON string or raw() vector\")\n+  }\n+\n+  plan <- ExecPlan$create()\n+\n+  if (inherits(.data, \"RecordBatchReader\")) {\n+    source_node <- ExecNode_ReadFromRecordBatchReader(self, dataset$.data)\n+  } else if (inehrits(.data, \"ArrowTabular\")) {\n+    dataset <- InMemoryDataset$create(dataset)\n+    source_node <- ExecNode_Scan(\n+      plan,\n+      dataset,\n+      Expression$scalar(TRUE),\n+      colnames %||% character(0)\n+    )\n+  } else if (inherits(.data, \"Dataset\")) {\n+    source_node <- ExecNode_Scan(\n+      plan,\n+      .data,\n+      Expression$scalar(TRUE),\n+      colnames %||% character(0)\n+    )\n+  } else {\n+    obj_desc <- paste0(class(.data), collapse = \" / \")\n+    abort(glue(\"Can't construct source node from object of type {obj_desc}\"))\n+  }\n\nReview comment:\n       Why isn't this just `plan$Scan(.data)`?\r\n   \r\n   This is probably a bigger question, but apparently (with ExecPlans) you have to express the filter and projection into the Scan node in order to get predicate pushdown to work. That might not work when consuming substrait, the substrait consumer is going to need to handle the pushdown.\r\n   \r\n   Also you have a typo `inehrits`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T14:40:49.015+0000",
                    "updated": "2022-03-04T14:40:49.015+0000",
                    "started": "2022-03-04T14:40:49.014+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736693",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/736703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#discussion_r819650353\n\n\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -296,3 +296,39 @@ ExecNode <- R6Class(\"ExecNode\",\n     schema = function() ExecNode_output_schema(self)\n   )\n )\n+\n+do_exec_plan_substrait <- function(.data, substrait_plan) {\n+  if (is.string(substrait_plan)) {\n+    substrait_plan <- engine__internal__SubstraitFromJSON(substrait_plan)\n+  } else if (is.raw(substrait_plan)) {\n+    substrait_plan <- buffer(substrait_plan)\n+  } else {\n+    abort(\"`substrait_plan` must be a JSON string or raw() vector\")\n+  }\n+\n+  plan <- ExecPlan$create()\n+\n+  if (inherits(.data, \"RecordBatchReader\")) {\n+    source_node <- ExecNode_ReadFromRecordBatchReader(self, dataset$.data)\n+  } else if (inehrits(.data, \"ArrowTabular\")) {\n+    dataset <- InMemoryDataset$create(dataset)\n+    source_node <- ExecNode_Scan(\n+      plan,\n+      dataset,\n+      Expression$scalar(TRUE),\n+      colnames %||% character(0)\n+    )\n+  } else if (inherits(.data, \"Dataset\")) {\n+    source_node <- ExecNode_Scan(\n+      plan,\n+      .data,\n+      Expression$scalar(TRUE),\n+      colnames %||% character(0)\n+    )\n+  } else {\n+    obj_desc <- paste0(class(.data), collapse = \" / \")\n+    abort(glue(\"Can't construct source node from object of type {obj_desc}\"))\n+  }\n\nReview comment:\n       My reading of it was that `plan$Scan(.data)` needed an `arrow_dplyr_query` and I was trying to keep the initial \"this thing works\" as simple as possible.\r\n   \r\n   I imagine we could do some inspection of the substrait plan to extract which field references actually show up (totally possible from what I currently know about substrait), or do that inspection the C++ consumer.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T15:07:37.095+0000",
                    "updated": "2022-03-04T15:07:37.095+0000",
                    "started": "2022-03-04T15:07:37.095+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736703",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/736709",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#discussion_r819653877\n\n\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -296,3 +296,39 @@ ExecNode <- R6Class(\"ExecNode\",\n     schema = function() ExecNode_output_schema(self)\n   )\n )\n+\n+do_exec_plan_substrait <- function(.data, substrait_plan) {\n+  if (is.string(substrait_plan)) {\n+    substrait_plan <- engine__internal__SubstraitFromJSON(substrait_plan)\n+  } else if (is.raw(substrait_plan)) {\n+    substrait_plan <- buffer(substrait_plan)\n+  } else {\n+    abort(\"`substrait_plan` must be a JSON string or raw() vector\")\n+  }\n+\n+  plan <- ExecPlan$create()\n+\n+  if (inherits(.data, \"RecordBatchReader\")) {\n+    source_node <- ExecNode_ReadFromRecordBatchReader(self, dataset$.data)\n+  } else if (inehrits(.data, \"ArrowTabular\")) {\n+    dataset <- InMemoryDataset$create(dataset)\n+    source_node <- ExecNode_Scan(\n+      plan,\n+      dataset,\n+      Expression$scalar(TRUE),\n+      colnames %||% character(0)\n+    )\n+  } else if (inherits(.data, \"Dataset\")) {\n+    source_node <- ExecNode_Scan(\n+      plan,\n+      .data,\n+      Expression$scalar(TRUE),\n+      colnames %||% character(0)\n+    )\n+  } else {\n+    obj_desc <- paste0(class(.data), collapse = \" / \")\n+    abort(glue(\"Can't construct source node from object of type {obj_desc}\"))\n+  }\n\nReview comment:\n       plan$Build takes a query but plan$Scan doesn't require it: https://github.com/apache/arrow/blob/master/r/R/query-engine.R#L81\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T15:11:34.236+0000",
                    "updated": "2022-03-04T15:11:34.236+0000",
                    "started": "2022-03-04T15:11:34.236+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736709",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/736812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#discussion_r819786616\n\n\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -296,3 +296,39 @@ ExecNode <- R6Class(\"ExecNode\",\n     schema = function() ExecNode_output_schema(self)\n   )\n )\n+\n+do_exec_plan_substrait <- function(.data, substrait_plan) {\n+  if (is.string(substrait_plan)) {\n+    substrait_plan <- engine__internal__SubstraitFromJSON(substrait_plan)\n+  } else if (is.raw(substrait_plan)) {\n+    substrait_plan <- buffer(substrait_plan)\n+  } else {\n+    abort(\"`substrait_plan` must be a JSON string or raw() vector\")\n+  }\n+\n+  plan <- ExecPlan$create()\n+\n+  if (inherits(.data, \"RecordBatchReader\")) {\n+    source_node <- ExecNode_ReadFromRecordBatchReader(self, dataset$.data)\n+  } else if (inehrits(.data, \"ArrowTabular\")) {\n+    dataset <- InMemoryDataset$create(dataset)\n+    source_node <- ExecNode_Scan(\n+      plan,\n+      dataset,\n+      Expression$scalar(TRUE),\n+      colnames %||% character(0)\n+    )\n+  } else if (inherits(.data, \"Dataset\")) {\n+    source_node <- ExecNode_Scan(\n+      plan,\n+      .data,\n+      Expression$scalar(TRUE),\n+      colnames %||% character(0)\n+    )\n+  } else {\n+    obj_desc <- paste0(class(.data), collapse = \" / \")\n+    abort(glue(\"Can't construct source node from object of type {obj_desc}\"))\n+  }\n\nReview comment:\n       The substrait consumer will not bring the pushdown from filter/project nodes into the read rel (though a query optimizer would ;))  In Substrait, you will need to do the same thing that you do with ExecPlans, only it will be ReadRel instead of ScanNode.  Scan predicate pushdown is expressed at `ReadRel::projection` and scan filter pushdown is specified at `ReadRel::filter`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T17:52:04.576+0000",
                    "updated": "2022-03-04T17:52:04.576+0000",
                    "started": "2022-03-04T17:52:04.576+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736812",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/736815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#discussion_r819788630\n\n\n\n##########\nFile path: r/src/compute-exec.cpp\n##########\n@@ -277,4 +278,65 @@ std::shared_ptr<compute::ExecNode> ExecNode_ReadFromRecordBatchReader(\n   return MakeExecNodeOrStop(\"source\", plan.get(), {}, options);\n }\n \n+// just until we figure out the incantation to get a proper sinknode\n\nReview comment:\n       I think we would eventually want to do the same thing we do with exec plans which is to consume with pushgenerator (which is basically a producer/consumer queue).  The sink node consumer will push the batch into the queue and then a record batch reader will read the batches from the queue.  We'd also want to wire it up to backpressure like we have today.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T17:55:11.900+0000",
                    "updated": "2022-03-04T17:55:11.900+0000",
                    "started": "2022-03-04T17:55:11.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736815",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/736816",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#discussion_r819789166\n\n\n\n##########\nFile path: r/src/compute-exec.cpp\n##########\n@@ -277,4 +278,65 @@ std::shared_ptr<compute::ExecNode> ExecNode_ReadFromRecordBatchReader(\n   return MakeExecNodeOrStop(\"source\", plan.get(), {}, options);\n }\n \n+// just until we figure out the incantation to get a proper sinknode\n\nReview comment:\n       In fact, to reduce duplication, we may want to add a C++ method that takes in a Substrait plan, and returns a record batch reader.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T17:55:54.460+0000",
                    "updated": "2022-03-04T17:55:54.460+0000",
                    "started": "2022-03-04T17:55:54.460+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736816",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/736818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#discussion_r819791151\n\n\n\n##########\nFile path: r/src/compute-exec.cpp\n##########\n@@ -277,4 +278,65 @@ std::shared_ptr<compute::ExecNode> ExecNode_ReadFromRecordBatchReader(\n   return MakeExecNodeOrStop(\"source\", plan.get(), {}, options);\n }\n \n+// just until we figure out the incantation to get a proper sinknode\n\nReview comment:\n       ARROW-15849\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T17:58:52.373+0000",
                    "updated": "2022-03-04T17:58:52.373+0000",
                    "started": "2022-03-04T17:58:52.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736818",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/736830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#issuecomment-1059406392\n\n\n   https://github.com/apache/arrow/pull/12569 also looks relevant for the build issues\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T18:18:21.177+0000",
                    "updated": "2022-03-04T18:18:21.177+0000",
                    "started": "2022-03-04T18:18:21.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736830",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/736837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#discussion_r819808503\n\n\n\n##########\nFile path: r/src/compute-exec.cpp\n##########\n@@ -277,4 +278,65 @@ std::shared_ptr<compute::ExecNode> ExecNode_ReadFromRecordBatchReader(\n   return MakeExecNodeOrStop(\"source\", plan.get(), {}, options);\n }\n \n+// just until we figure out the incantation to get a proper sinknode\n\nReview comment:\n       That would be great! Perhaps for this PR I will keep to the example usage (which reads a parquet file and prints the output) and use the C++ method when it becomes available (it will take us a while to get the dplyr->Substrait generation right so there's no particular rush).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T18:25:34.202+0000",
                    "updated": "2022-03-04T18:25:34.202+0000",
                    "started": "2022-03-04T18:25:34.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736837",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/736872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#issuecomment-1059487075\n\n\n   Whee...this works! (Although until ARROW-15849 is merged it's necessary to copy the arrow/engine/substrait/ headers manually...). It currently just prints the output...before this is merged I think it would be nice to return a `Table` to help us test output.\r\n   \r\n   ``` r\r\n   # remotes::install_github(\"apache/arrow/r#12564\")\r\n   # remotes::install_github(\"voltrondata/substrait-r\")\r\n   library(arrow, warn.conflicts = FALSE)\r\n   library(substrait)\r\n   \r\n   # currently works via the ReadRel object (not an Arrow source node),\r\n   # so we need a parquet file to work with\r\n   temp_parquet_file <- tempfile()\r\n   write_parquet(mtcars, temp_parquet_file)\r\n   \r\n   plan <- substrait$Plan$create(\r\n     relations = list(\r\n       substrait$PlanRel$create(\r\n         rel = substrait$Rel$create(\r\n           read = substrait$ReadRel$create(\r\n             base_schema = as_substrait(mtcars, \"substrait.NamedStruct\"),\r\n             local_files = substrait$ReadRel$LocalFiles$create(\r\n               items = list(\r\n                 substrait$ReadRel$LocalFiles$FileOrFiles$create(\r\n                   uri_file = sprintf(\"file://%s\", temp_parquet_file),\r\n                   format = substrait$ReadRel$LocalFiles$FileOrFiles$FileFormat$FILE_FORMAT_PARQUET\r\n                 )\r\n               )\r\n             )\r\n           )\r\n         )\r\n       )\r\n     )\r\n   )\r\n   \r\n   arrow:::do_exec_plan_substrait(as.raw(plan))\r\n   #> <tag: 0 rows: 32>\r\n   #> ExecBatch\r\n   #>     # Rows: 32\r\n   #>     0: Array[21,21,22.8,21.4,18.7,18.1,14.3,24.4,22.8,19.2,...,15.2,13.3,19.2,27.3,26,30.4,15.8,19.7,15,21.4]\r\n   #>     1: Array[6,6,4,6,8,6,8,4,4,6,...,8,8,8,4,4,4,8,6,8,4]\r\n   #>     2: Array[160,160,108,258,360,225,360,146.7,140.8,167.6,...,304,350,400,79,120.3,95.1,351,145,301,121]\r\n   #>     3: Array[110,110,93,110,175,105,245,62,95,123,...,150,245,175,66,91,113,264,175,335,109]\r\n   #>     4: Array[3.9,3.9,3.85,3.08,3.15,2.76,3.21,3.69,3.92,3.92,...,3.15,3.73,3.08,4.08,4.43,3.77,4.22,3.62,3.54,4.11]\r\n   #>     5: Array[2.62,2.875,2.32,3.215,3.44,3.46,3.57,3.19,3.15,3.44,...,3.435,3.84,3.845,1.935,2.14,1.513,3.17,2.77,3.57,2.78]\r\n   #>     6: Array[16.46,17.02,18.61,19.44,17.02,20.22,15.84,20,22.9,18.3,...,17.3,15.41,17.05,18.9,16.7,16.9,14.5,15.5,14.6,18.6]\r\n   #>     7: Array[0,0,1,1,0,1,0,1,1,1,...,0,0,0,1,0,1,0,0,0,1]\r\n   #>     8: Array[1,1,1,0,0,0,0,0,0,0,...,0,0,0,1,1,1,1,1,1,1]\r\n   #>     9: Array[4,4,4,3,3,3,3,4,4,4,...,3,3,3,4,5,5,5,5,5,4]\r\n   #>     10: Array[4,4,1,1,2,1,4,2,2,4,...,2,4,2,1,2,2,4,6,8,2]\r\n   #>     11: Scalar[0]\r\n   #>     12: Scalar[0]\r\n   #>     13: Scalar[true]\r\n   #> \r\n   #> <tag: 0 finished>\r\n   ```\r\n   \r\n   <sup>Created on 2022-03-04 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T20:14:31.485+0000",
                    "updated": "2022-03-04T20:14:31.485+0000",
                    "started": "2022-03-04T20:14:31.485+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736872",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/738157",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#issuecomment-1061817573\n\n\n   Ok! This is ready for some eyes. The C++ that works with the ExecPlan is something that I got to work, but it is not elegant (notably, it requires that the output field names are known in advance). As @westonpace mentioned above, the C++ may be able to absorb the implementation for substrait -> RecordBatchReader, which is really what we want.\r\n   \r\n   I'm happy to put this PR on hold until there's more infrastructure to make this easier, although either way we will likely need several follow-up PRs. My preference would be to merge a preliminary version with an unexported `do_exec_plan_substrait()` so that Nic and I don't have to rebuild the R package every time we switch projects (but we can also make that work if that sounds too hacky). I think that in all cases we will need multiple follow up PRs as the capabilities of C++ substrait and the R substrait evolve.\r\n   \r\n   To make sure this PR is going to serve its purpose, I also implemented a preliminary substrait package function that calls `do_exec_plan_substrait()` (for reference below).\r\n   \r\n   <details>\r\n   \r\n   substrait_eval_arrow <- function(plan, tables) {\r\n     plan <- as_substrait(plan, \"substrait.Plan\")\r\n     stopifnot(rlang::is_named2(tables))\r\n   \r\n     # only support plans with exactly one relation in the relations list for now\r\n     stopifnot(length(plan$relations) == 1)\r\n   \r\n     temp_parquet <- vapply(tables, function(i) tempfile(), character(1))\r\n     on.exit(unlink(temp_parquet))\r\n   \r\n     local_file_tables <- lapply(seq_along(tables), function(i) {\r\n       substrait$ReadRel$LocalFiles$create(\r\n         items = list(\r\n           substrait$ReadRel$LocalFiles$FileOrFiles$create(\r\n             uri_file = sprintf(\"file://%s\", temp_parquet[i]),\r\n             format = substrait$ReadRel$LocalFiles$FileOrFiles$FileFormat$\r\n               FILE_FORMAT_PARQUET\r\n           )\r\n         )\r\n       )\r\n     })\r\n     names(local_file_tables) <- names(tables)\r\n   \r\n     table_base_schema <- lapply(tables, as_substrait, \"substrait.NamedStruct\")\r\n   \r\n     call_for_errors <- sys.call()\r\n   \r\n     # walk the relation tree looking for named tables, replacing\r\n     # with those from local_file_tables\r\n     plan <- rel_tree_modify(plan, \"substrait_ReadRel\", function(x) {\r\n       if (isTRUE(\"named_table\" %in% names(x))) {\r\n         name <- x$named_table$names\r\n   \r\n         if (!isTRUE(name %in% names(local_file_tables))) {\r\n           rlang::abort(\r\n             sprintf(\"Named table '%s' not found in `tables`\", name),\r\n             call = call_for_errors\r\n           )\r\n         }\r\n   \r\n         if (!identical(x$base_schema, table_base_schema[[name]])) {\r\n           rlang::abort(\r\n             sprintf(\r\n               \"Base schema for table '%s' does not match declared base schema\",\r\n               name\r\n             ),\r\n             call = call_for_errors\r\n           )\r\n         }\r\n   \r\n         x$named_table <- NULL\r\n         x$local_files <- local_file_tables[[name]]\r\n         x\r\n       } else {\r\n         x\r\n       }\r\n     })\r\n   \r\n     col_names <- substrait_colnames(plan$relations[[1]])\r\n   \r\n     # write parquet files\r\n     Map(arrow::write_parquet, tables, temp_parquet)\r\n   \r\n     # run the exec plan\r\n     getNamespace(\"arrow\")[[\"do_exec_plan_substrait\"]](as.raw(plan), col_names)\r\n   }\r\n   \r\n   </details>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-08T14:09:38.437+0000",
                    "updated": "2022-03-08T14:09:38.437+0000",
                    "started": "2022-03-08T14:09:38.436+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "738157",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/738158",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot edited a comment on pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#issuecomment-1061817573\n\n\n   Ok! This is ready for some eyes. The C++ that works with the ExecPlan is something that I got to work, but it is not elegant (notably, it requires that the output field names are known in advance). As @westonpace mentioned above, the C++ may be able to absorb the implementation for substrait -> RecordBatchReader, which is really what we want.\r\n   \r\n   I'm happy to put this PR on hold until there's more infrastructure to make this easier, although either way we will likely need several follow-up PRs. My preference would be to merge a preliminary version with an unexported `do_exec_plan_substrait()` so that Nic and I don't have to rebuild the R package every time we switch projects (but we can also make that work if that sounds too hacky).\r\n   \r\n   To make sure this PR is going to serve its purpose, I also implemented a preliminary substrait package function that calls `do_exec_plan_substrait()` (for reference below).\r\n   \r\n   <details>\r\n   \r\n   substrait_eval_arrow <- function(plan, tables) {\r\n     plan <- as_substrait(plan, \"substrait.Plan\")\r\n     stopifnot(rlang::is_named2(tables))\r\n   \r\n     # only support plans with exactly one relation in the relations list for now\r\n     stopifnot(length(plan$relations) == 1)\r\n   \r\n     temp_parquet <- vapply(tables, function(i) tempfile(), character(1))\r\n     on.exit(unlink(temp_parquet))\r\n   \r\n     local_file_tables <- lapply(seq_along(tables), function(i) {\r\n       substrait$ReadRel$LocalFiles$create(\r\n         items = list(\r\n           substrait$ReadRel$LocalFiles$FileOrFiles$create(\r\n             uri_file = sprintf(\"file://%s\", temp_parquet[i]),\r\n             format = substrait$ReadRel$LocalFiles$FileOrFiles$FileFormat$\r\n               FILE_FORMAT_PARQUET\r\n           )\r\n         )\r\n       )\r\n     })\r\n     names(local_file_tables) <- names(tables)\r\n   \r\n     table_base_schema <- lapply(tables, as_substrait, \"substrait.NamedStruct\")\r\n   \r\n     call_for_errors <- sys.call()\r\n   \r\n     # walk the relation tree looking for named tables, replacing\r\n     # with those from local_file_tables\r\n     plan <- rel_tree_modify(plan, \"substrait_ReadRel\", function(x) {\r\n       if (isTRUE(\"named_table\" %in% names(x))) {\r\n         name <- x$named_table$names\r\n   \r\n         if (!isTRUE(name %in% names(local_file_tables))) {\r\n           rlang::abort(\r\n             sprintf(\"Named table '%s' not found in `tables`\", name),\r\n             call = call_for_errors\r\n           )\r\n         }\r\n   \r\n         if (!identical(x$base_schema, table_base_schema[[name]])) {\r\n           rlang::abort(\r\n             sprintf(\r\n               \"Base schema for table '%s' does not match declared base schema\",\r\n               name\r\n             ),\r\n             call = call_for_errors\r\n           )\r\n         }\r\n   \r\n         x$named_table <- NULL\r\n         x$local_files <- local_file_tables[[name]]\r\n         x\r\n       } else {\r\n         x\r\n       }\r\n     })\r\n   \r\n     col_names <- substrait_colnames(plan$relations[[1]])\r\n   \r\n     # write parquet files\r\n     Map(arrow::write_parquet, tables, temp_parquet)\r\n   \r\n     # run the exec plan\r\n     getNamespace(\"arrow\")[[\"do_exec_plan_substrait\"]](as.raw(plan), col_names)\r\n   }\r\n   \r\n   </details>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-08T14:10:11.118+0000",
                    "updated": "2022-03-08T14:10:11.118+0000",
                    "started": "2022-03-08T14:10:11.117+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "738158",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/738159",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot edited a comment on pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#issuecomment-1061817573\n\n\n   Ok! This is ready for some eyes. The C++ that works with the ExecPlan is something that I got to work, but it is not elegant (notably, it requires that the output field names are known in advance). As @westonpace mentioned above, the C++ may be able to absorb the implementation for substrait -> RecordBatchReader, which is really what we want.\r\n   \r\n   I'm happy to put this PR on hold until there's more infrastructure to make this easier, although either way we will likely need several follow-up PRs. My preference would be to merge a preliminary version with an unexported `do_exec_plan_substrait()` so that Nic and I don't have to rebuild the R package every time we switch projects (but we can also make that work if that sounds too hacky).\r\n   \r\n   To make sure this PR is going to serve its purpose, I also implemented a preliminary substrait package function that calls `do_exec_plan_substrait()` (for reference below).\r\n   \r\n   <details>\r\n   \r\n   ```r\r\n   \r\n   substrait_eval_arrow <- function(plan, tables) {\r\n     plan <- as_substrait(plan, \"substrait.Plan\")\r\n     stopifnot(rlang::is_named2(tables))\r\n   \r\n     # only support plans with exactly one relation in the relations list for now\r\n     stopifnot(length(plan$relations) == 1)\r\n   \r\n     temp_parquet <- vapply(tables, function(i) tempfile(), character(1))\r\n     on.exit(unlink(temp_parquet))\r\n   \r\n     local_file_tables <- lapply(seq_along(tables), function(i) {\r\n       substrait$ReadRel$LocalFiles$create(\r\n         items = list(\r\n           substrait$ReadRel$LocalFiles$FileOrFiles$create(\r\n             uri_file = sprintf(\"file://%s\", temp_parquet[i]),\r\n             format = substrait$ReadRel$LocalFiles$FileOrFiles$FileFormat$\r\n               FILE_FORMAT_PARQUET\r\n           )\r\n         )\r\n       )\r\n     })\r\n     names(local_file_tables) <- names(tables)\r\n   \r\n     table_base_schema <- lapply(tables, as_substrait, \"substrait.NamedStruct\")\r\n   \r\n     call_for_errors <- sys.call()\r\n   \r\n     # walk the relation tree looking for named tables, replacing\r\n     # with those from local_file_tables\r\n     plan <- rel_tree_modify(plan, \"substrait_ReadRel\", function(x) {\r\n       if (isTRUE(\"named_table\" %in% names(x))) {\r\n         name <- x$named_table$names\r\n   \r\n         if (!isTRUE(name %in% names(local_file_tables))) {\r\n           rlang::abort(\r\n             sprintf(\"Named table '%s' not found in `tables`\", name),\r\n             call = call_for_errors\r\n           )\r\n         }\r\n   \r\n         if (!identical(x$base_schema, table_base_schema[[name]])) {\r\n           rlang::abort(\r\n             sprintf(\r\n               \"Base schema for table '%s' does not match declared base schema\",\r\n               name\r\n             ),\r\n             call = call_for_errors\r\n           )\r\n         }\r\n   \r\n         x$named_table <- NULL\r\n         x$local_files <- local_file_tables[[name]]\r\n         x\r\n       } else {\r\n         x\r\n       }\r\n     })\r\n   \r\n     col_names <- substrait_colnames(plan$relations[[1]])\r\n   \r\n     # write parquet files\r\n     Map(arrow::write_parquet, tables, temp_parquet)\r\n   \r\n     # run the exec plan\r\n     getNamespace(\"arrow\")[[\"do_exec_plan_substrait\"]](as.raw(plan), col_names)\r\n   }\r\n   \r\n   ```\r\n   \r\n   </details>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-08T14:10:43.650+0000",
                    "updated": "2022-03-08T14:10:43.650+0000",
                    "started": "2022-03-08T14:10:43.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "738159",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/738161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot edited a comment on pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#issuecomment-1061817573\n\n\n   Ok! This is ready for some eyes. The C++ that works with the ExecPlan is something that I got to work, but it is not elegant (notably, it requires that the output field names are known in advance). As @westonpace mentioned above, the C++ may be able to absorb the implementation for substrait -> RecordBatchReader, which is really what we want.\r\n   \r\n   I'm happy to put this PR on hold until there's more infrastructure to make this easier, although either way we will likely need several follow-up PRs. My preference would be to merge a preliminary version with an unexported `do_exec_plan_substrait()` so that Nic and I don't have to rebuild the R package every time we switch projects (but we can also make that work if that sounds too hacky).\r\n   \r\n   To make sure this PR is going to serve its purpose, I also implemented a preliminary substrait package function that calls `do_exec_plan_substrait()` (for reference below, or see https://github.com/voltrondata/substrait-r/pull/3 for details ).\r\n   \r\n   <details>\r\n   \r\n   ```r\r\n   \r\n   substrait_eval_arrow <- function(plan, tables) {\r\n     plan <- as_substrait(plan, \"substrait.Plan\")\r\n     stopifnot(rlang::is_named2(tables))\r\n   \r\n     # only support plans with exactly one relation in the relations list for now\r\n     stopifnot(length(plan$relations) == 1)\r\n   \r\n     temp_parquet <- vapply(tables, function(i) tempfile(), character(1))\r\n     on.exit(unlink(temp_parquet))\r\n   \r\n     local_file_tables <- lapply(seq_along(tables), function(i) {\r\n       substrait$ReadRel$LocalFiles$create(\r\n         items = list(\r\n           substrait$ReadRel$LocalFiles$FileOrFiles$create(\r\n             uri_file = sprintf(\"file://%s\", temp_parquet[i]),\r\n             format = substrait$ReadRel$LocalFiles$FileOrFiles$FileFormat$\r\n               FILE_FORMAT_PARQUET\r\n           )\r\n         )\r\n       )\r\n     })\r\n     names(local_file_tables) <- names(tables)\r\n   \r\n     table_base_schema <- lapply(tables, as_substrait, \"substrait.NamedStruct\")\r\n   \r\n     call_for_errors <- sys.call()\r\n   \r\n     # walk the relation tree looking for named tables, replacing\r\n     # with those from local_file_tables\r\n     plan <- rel_tree_modify(plan, \"substrait_ReadRel\", function(x) {\r\n       if (isTRUE(\"named_table\" %in% names(x))) {\r\n         name <- x$named_table$names\r\n   \r\n         if (!isTRUE(name %in% names(local_file_tables))) {\r\n           rlang::abort(\r\n             sprintf(\"Named table '%s' not found in `tables`\", name),\r\n             call = call_for_errors\r\n           )\r\n         }\r\n   \r\n         if (!identical(x$base_schema, table_base_schema[[name]])) {\r\n           rlang::abort(\r\n             sprintf(\r\n               \"Base schema for table '%s' does not match declared base schema\",\r\n               name\r\n             ),\r\n             call = call_for_errors\r\n           )\r\n         }\r\n   \r\n         x$named_table <- NULL\r\n         x$local_files <- local_file_tables[[name]]\r\n         x\r\n       } else {\r\n         x\r\n       }\r\n     })\r\n   \r\n     col_names <- substrait_colnames(plan$relations[[1]])\r\n   \r\n     # write parquet files\r\n     Map(arrow::write_parquet, tables, temp_parquet)\r\n   \r\n     # run the exec plan\r\n     getNamespace(\"arrow\")[[\"do_exec_plan_substrait\"]](as.raw(plan), col_names)\r\n   }\r\n   \r\n   ```\r\n   \r\n   </details>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-08T14:12:21.819+0000",
                    "updated": "2022-03-08T14:12:21.819+0000",
                    "started": "2022-03-08T14:12:21.819+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "738161",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/747756",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot edited a comment on pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#issuecomment-1061817573\n\n\n   Ok! This is ready for some eyes. The C++ that works with the ExecPlan is something that I got to work, but it is not elegant (notably, it requires that the output field names are known in advance). As @westonpace mentioned above, the C++ may be able to absorb the implementation for substrait -> RecordBatchReader, which is really what we want.\r\n   \r\n   I'm happy to put this PR on hold until there's more infrastructure to make this easier, although either way we will likely need several follow-up PRs. My preference would be to merge a preliminary version with an unexported `do_exec_plan_substrait()` so that Nic and I don't have to rebuild the R package every time we switch projects (but we can also make that work if that sounds too hacky).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-25T12:08:44.922+0000",
                    "updated": "2022-03-25T12:08:44.922+0000",
                    "started": "2022-03-25T12:08:44.921+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747756",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/747761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot removed a comment on pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#issuecomment-1059487075\n\n\n   Whee...this works! (Although until ARROW-15849 is merged it's necessary to copy the arrow/engine/substrait/ headers manually...). It currently just prints the output...before this is merged I think it would be nice to return a `Table` to help us test output.\r\n   \r\n   ``` r\r\n   # remotes::install_github(\"apache/arrow/r#12564\")\r\n   # remotes::install_github(\"voltrondata/substrait-r\")\r\n   library(arrow, warn.conflicts = FALSE)\r\n   library(substrait)\r\n   \r\n   # currently works via the ReadRel object (not an Arrow source node),\r\n   # so we need a parquet file to work with\r\n   temp_parquet_file <- tempfile()\r\n   write_parquet(mtcars, temp_parquet_file)\r\n   \r\n   plan <- substrait$Plan$create(\r\n     relations = list(\r\n       substrait$PlanRel$create(\r\n         rel = substrait$Rel$create(\r\n           read = substrait$ReadRel$create(\r\n             base_schema = as_substrait(mtcars, \"substrait.NamedStruct\"),\r\n             local_files = substrait$ReadRel$LocalFiles$create(\r\n               items = list(\r\n                 substrait$ReadRel$LocalFiles$FileOrFiles$create(\r\n                   uri_file = sprintf(\"file://%s\", temp_parquet_file),\r\n                   format = substrait$ReadRel$LocalFiles$FileOrFiles$FileFormat$FILE_FORMAT_PARQUET\r\n                 )\r\n               )\r\n             )\r\n           )\r\n         )\r\n       )\r\n     )\r\n   )\r\n   \r\n   arrow:::do_exec_plan_substrait(as.raw(plan))\r\n   #> <tag: 0 rows: 32>\r\n   #> ExecBatch\r\n   #>     # Rows: 32\r\n   #>     0: Array[21,21,22.8,21.4,18.7,18.1,14.3,24.4,22.8,19.2,...,15.2,13.3,19.2,27.3,26,30.4,15.8,19.7,15,21.4]\r\n   #>     1: Array[6,6,4,6,8,6,8,4,4,6,...,8,8,8,4,4,4,8,6,8,4]\r\n   #>     2: Array[160,160,108,258,360,225,360,146.7,140.8,167.6,...,304,350,400,79,120.3,95.1,351,145,301,121]\r\n   #>     3: Array[110,110,93,110,175,105,245,62,95,123,...,150,245,175,66,91,113,264,175,335,109]\r\n   #>     4: Array[3.9,3.9,3.85,3.08,3.15,2.76,3.21,3.69,3.92,3.92,...,3.15,3.73,3.08,4.08,4.43,3.77,4.22,3.62,3.54,4.11]\r\n   #>     5: Array[2.62,2.875,2.32,3.215,3.44,3.46,3.57,3.19,3.15,3.44,...,3.435,3.84,3.845,1.935,2.14,1.513,3.17,2.77,3.57,2.78]\r\n   #>     6: Array[16.46,17.02,18.61,19.44,17.02,20.22,15.84,20,22.9,18.3,...,17.3,15.41,17.05,18.9,16.7,16.9,14.5,15.5,14.6,18.6]\r\n   #>     7: Array[0,0,1,1,0,1,0,1,1,1,...,0,0,0,1,0,1,0,0,0,1]\r\n   #>     8: Array[1,1,1,0,0,0,0,0,0,0,...,0,0,0,1,1,1,1,1,1,1]\r\n   #>     9: Array[4,4,4,3,3,3,3,4,4,4,...,3,3,3,4,5,5,5,5,5,4]\r\n   #>     10: Array[4,4,1,1,2,1,4,2,2,4,...,2,4,2,1,2,2,4,6,8,2]\r\n   #>     11: Scalar[0]\r\n   #>     12: Scalar[0]\r\n   #>     13: Scalar[true]\r\n   #> \r\n   #> <tag: 0 finished>\r\n   ```\r\n   \r\n   <sup>Created on 2022-03-04 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-25T12:13:39.683+0000",
                    "updated": "2022-03-25T12:13:39.683+0000",
                    "started": "2022-03-25T12:13:39.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747761",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/748661",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#discussion_r836507290\n\n\n\n##########\nFile path: r/tests/testthat/test-query-engine.R\n##########\n@@ -0,0 +1,86 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+test_that(\"do_exec_plan_substrait can evaluate a simple plan\", {\n+  skip_if_not_available(\"engine\")\n+\n+  df <- data.frame(i = 1:5, b = rep_len(c(TRUE, FALSE), 5))\n+  table <- arrow_table(df, schema = schema(i = int64(), b = bool()))\n+\n+  tf <- tempfile()\n+  on.exit(unlink(tf))\n+  write_parquet(table, tf)\n+\n+  substrait_json <- sprintf('{\n+    \"relations\": [\n+      {\"rel\": {\n+        \"read\": {\n+          \"base_schema\": {\n+            \"struct\": {\n+              \"types\": [ {\"i64\": {}}, {\"bool\": {}} ]\n+            },\n+            \"names\": [\"i\", \"b\"]\n+          },\n+          \"local_files\": {\n+            \"items\": [\n+              {\n+                \"uri_file\": \"file://%s\",\n+                \"format\": \"FILE_FORMAT_PARQUET\"\n+              }\n+            ]\n+          }\n+        }\n+      }}\n+    ],\n+    \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 7,\n+        \"uri\": \"https://github.com/apache/arrow/blob/master/format/substrait/extension_types.yaml\"\n\nReview comment:\n       This is more a substrait question, but does something like `https://github.com/apache/arrow/blob/-/format/substrait/extension_types.yaml` work (so that the default branch is used instead of hardcoding?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T14:40:54.046+0000",
                    "updated": "2022-03-28T14:40:54.046+0000",
                    "started": "2022-03-28T14:40:54.046+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748661",
                    "issueId": "13431341"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/worklog/748723",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on a change in pull request #12564:\nURL: https://github.com/apache/arrow/pull/12564#discussion_r836570533\n\n\n\n##########\nFile path: r/configure\n##########\n@@ -244,6 +244,14 @@ if [ $? -eq 0 ]; then\n     # NOTE: arrow-dataset is assumed to have the same -L flag as arrow\n     # so there is no need to add its location to PKG_DIRS\n   fi\n+  # Check for Arrow Engine subcomponent\n+  grep -i 'set(ARROW_ENGINE \"ON\")' $ARROW_OPTS_CMAKE >/dev/null 2>&1\n+  if [ $? -eq 0 ]; then\n+    PKG_CFLAGS=\"$PKG_CFLAGS -DARROW_R_WITH_ENGINE\"\n+    PKG_LIBS=\"-larrow_engine $PKG_LIBS\"\n+    # NOTE: arrow-engine is assumed to have the same -L flag as arrow\n+    # so there is no need to add its location to PKG_DIRS\n+  fi\n\nReview comment:\n       In `configure.win`, could we add the following to configure_dev()?\r\n   \r\n   ```\r\n     if [ $(cmake_option ARROW_ENGINE) -eq 1 ]; then\r\n       PKG_CFLAGS=\"$PKG_CFLAGS -DARROW_R_WITH_ENGINE\"\r\n       PKG_CONFIG_PACKAGES=\"$PKG_CONFIG_PACKAGES arrow-engine\"\r\n     fi\r\n   ```\r\n   \r\n   (I wouldn't worry about `configure_release`, since there are corresponding CI changes that would need to be handled there).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T15:45:07.460+0000",
                    "updated": "2022-03-28T15:45:07.460+0000",
                    "started": "2022-03-28T15:45:07.460+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748723",
                    "issueId": "13431341"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 22200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@24067ae2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@18923f95[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e42988f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@47a56845[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@195fb9c4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@61627fc8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3bbe058b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@57b5b5f9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33c0b752[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@41ae02dd[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a77c53e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7097a3f4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 22200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Mar 29 13:24:22 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-03-29T13:24:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15818/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-03-01T18:06:22.000+0000",
        "updated": "2022-04-01T07:21:40.000+0000",
        "timeoriginalestimate": null,
        "description": "After ARROW-15238 we have the possibility for a Substrait consumer in C++! As we work on R bindings for Substrait, it will be useful for us to have some way to send Substrait objects into Arrow to make sure we're on the right track.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 22200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Implement initial Substrait consumer in the R bindings",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431341/comment/17514095",
                    "id": "17514095",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 12564\n[https://github.com/apache/arrow/pull/12564]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-03-29T13:24:22.610+0000",
                    "updated": "2022-03-29T13:24:22.610+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z102c0:",
        "customfield_12314139": null
    }
}