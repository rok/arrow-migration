{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13185597",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597",
    "key": "ARROW-3254",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/3",
            "id": "3",
            "description": "The problem is a duplicate of an existing issue.",
            "name": "Duplicate"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12549024",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12549024",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "inwardIssue": {
                    "id": "13182901",
                    "key": "ARROW-3169",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182901",
                    "fields": {
                        "summary": "[C++] Break array-test.cc and array.cc into multiple compilation units",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3254/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/worklog/151145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #2704: ARROW-3254: [C++] Add SOURCES option to ADD_ARROW_TEST to be able to combine multiple test files into a single executable\nURL: https://github.com/apache/arrow/pull/2704\n \n \n   I also moved arrow/test-util.h to arrow/util/testing.h and moved some of the implementation of that file into arrow/util/testing.cc, so that many of these auxiliary test functions are only compiled once. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T11:50:27.538+0000",
                    "updated": "2018-10-04T11:50:27.538+0000",
                    "started": "2018-10-04T11:50:27.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151145",
                    "issueId": "13185597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/worklog/151148",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2704: ARROW-3254: [C++] Add SOURCES option to ADD_ARROW_TEST to be able to combine multiple test files into a single executable\nURL: https://github.com/apache/arrow/pull/2704#discussion_r222635998\n \n \n\n ##########\n File path: cpp/cmake_modules/BuildUtils.cmake\n ##########\n @@ -397,40 +398,44 @@ function(ADD_ARROW_TEST REL_TEST_NAME)\n     set(ARG_LABELS unittest)\n   endif()\n \n-  if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${REL_TEST_NAME}.cc)\n-    # This test has a corresponding .cc file, set it up as an executable.\n-    set(TEST_PATH \"${EXECUTABLE_OUTPUT_PATH}/${TEST_NAME}\")\n-    add_executable(${TEST_NAME} \"${REL_TEST_NAME}.cc\")\n+  # This test has a corresponding .cc file, set it up as an executable.\n+  set(TEST_PATH \"${EXECUTABLE_OUTPUT_PATH}/${TEST_NAME}\")\n \n-    if (ARG_STATIC_LINK_LIBS)\n-      # Customize link libraries\n-      target_link_libraries(${TEST_NAME} ${ARG_STATIC_LINK_LIBS})\n-    else()\n-      target_link_libraries(${TEST_NAME} ${ARROW_TEST_LINK_LIBS})\n-    endif()\n+  if (ARG_SOURCES)\n+    set(SOURCE_FILES ${ARG_SOURCES})\n+  elseif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${REL_TEST_NAME}.cc)\n+    set(SOURCE_FILES \"${REL_TEST_NAME}.cc\")\n+  else()\n+    message(FATAL_ERROR \"No source file available for building test\")\n+  endif()\n \n-    if (ARG_EXTRA_LINK_LIBS)\n-      target_link_libraries(${TEST_NAME} ${ARG_EXTRA_LINK_LIBS})\n-    endif()\n+  add_executable(${TEST_NAME} ${SOURCE_FILES})\n \n-    if (ARG_EXTRA_INCLUDES)\n-      target_include_directories(${TEST_NAME} SYSTEM PUBLIC\n-        ${ARG_EXTRA_INCLUDES}\n-        )\n-    endif()\n+  if (ARG_STATIC_LINK_LIBS)\n+    # Customize link libraries\n+    target_link_libraries(${TEST_NAME} ${ARG_STATIC_LINK_LIBS})\n+  else()\n+    target_link_libraries(${TEST_NAME} ${ARROW_TEST_LINK_LIBS})\n+  endif()\n \n-    if (ARG_EXTRA_DEPENDENCIES)\n-      add_dependencies(${TEST_NAME} ${ARG_EXTRA_DEPENDENCIES})\n-    endif()\n+  if (ARG_EXTRA_LINK_LIBS)\n+    target_link_libraries(${TEST_NAME} ${ARG_EXTRA_LINK_LIBS})\n+  endif()\n \n-    foreach (TEST_LABEL ${ARG_LABELS})\n-      add_dependencies(${TEST_LABEL} ${TEST_NAME})\n-    endforeach()\n-  else()\n-    # No executable, just invoke the test (probably a script) directly.\n-    set(TEST_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${REL_TEST_NAME})\n \n Review comment:\n   This was unused\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T11:53:33.727+0000",
                    "updated": "2018-10-04T11:53:33.727+0000",
                    "started": "2018-10-04T11:53:33.727+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151148",
                    "issueId": "13185597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/worklog/151197",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2704: ARROW-3254: [C++] Add SOURCES option to ADD_ARROW_TEST to be able to combine multiple test files into a single executable\nURL: https://github.com/apache/arrow/pull/2704#issuecomment-427039696\n \n \n   I combined a bunch of semantically-related tests. Even with all this, with Gandiva now in the build we have 68 test executables. After the Gandiva patches get caught up, I will combine the semantically-related Gandiva tests to improve build times and reduce the amount of executables created\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T14:27:04.275+0000",
                    "updated": "2018-10-04T14:27:04.275+0000",
                    "started": "2018-10-04T14:27:04.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151197",
                    "issueId": "13185597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/worklog/151284",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2704: ARROW-3254: [C++] Add SOURCES option to ADD_ARROW_TEST to be able to combine multiple test files into a single executable\nURL: https://github.com/apache/arrow/pull/2704#issuecomment-427095281\n \n \n   Argh Windows is a constant source of problems. @pitrou apparently if you combine a DLL (like arrow.dll) with a static library (like the auxiliary testing static library I created here) it will gripe about duplicated inline symbols. I think we should revert to statically linking the tests on Windows to avoid this madness\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T17:03:15.173+0000",
                    "updated": "2018-10-04T17:03:15.173+0000",
                    "started": "2018-10-04T17:03:15.173+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151284",
                    "issueId": "13185597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/worklog/151285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2704: ARROW-3254: [C++] Add SOURCES option to ADD_ARROW_TEST to be able to combine multiple test files into a single executable\nURL: https://github.com/apache/arrow/pull/2704#issuecomment-427096318\n \n \n   I'd like to step back a bit:\r\n   * having multiple test files allow parallelizing (an important feature when developing, especially now that Parquet tests have been added to the bunch - some of them are quite slow)\r\n   * linking should be fast if Arrow is linked as a shared library\r\n   * the test executables should be small if Arrow is linked as a shared library\r\n   \r\n   The fact that we do/did static linking for tests is an anomaly, and is IMHO the real source of the slowness and disk consumption.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T17:06:36.611+0000",
                    "updated": "2018-10-04T17:06:36.611+0000",
                    "started": "2018-10-04T17:06:36.611+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151285",
                    "issueId": "13185597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/worklog/151286",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2704: ARROW-3254: [C++] Add SOURCES option to ADD_ARROW_TEST to be able to combine multiple test files into a single executable\nURL: https://github.com/apache/arrow/pull/2704#issuecomment-427096407\n \n \n   It appears that the issue is that the symbols in the DLL have `dllimport` linkage while in the static lib they have dllexport: https://akrzemi1.wordpress.com/2016/11/28/the-one-definition-rule/. I'm going to fire up my windows box and see if I can fix it\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T17:06:55.648+0000",
                    "updated": "2018-10-04T17:06:55.648+0000",
                    "started": "2018-10-04T17:06:55.647+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151286",
                    "issueId": "13185597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/worklog/151287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2704: ARROW-3254: [C++] Add SOURCES option to ADD_ARROW_TEST to be able to combine multiple test files into a single executable\nURL: https://github.com/apache/arrow/pull/2704#issuecomment-427096814\n \n \n   > linking should be fast if Arrow is linked as a shared library\r\n   \r\n   My understanding is that code coverage doesn't work if you don't statically link\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T17:08:09.384+0000",
                    "updated": "2018-10-04T17:08:09.384+0000",
                    "started": "2018-10-04T17:08:09.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151287",
                    "issueId": "13185597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/worklog/151288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2704: ARROW-3254: [C++] Add SOURCES option to ADD_ARROW_TEST to be able to combine multiple test files into a single executable\nURL: https://github.com/apache/arrow/pull/2704#issuecomment-427097688\n \n \n   Reading https://github.com/apache/kudu/blob/master/CMakeLists.txt#L422, it seems that maybe the coverage issue goes away if you use Clang\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T17:10:55.558+0000",
                    "updated": "2018-10-04T17:10:55.558+0000",
                    "started": "2018-10-04T17:10:55.557+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151288",
                    "issueId": "13185597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/worklog/151290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2704: ARROW-3254: [C++] Add SOURCES option to ADD_ARROW_TEST to be able to combine multiple test files into a single executable\nURL: https://github.com/apache/arrow/pull/2704#issuecomment-427098655\n \n \n   Do you mean codecov-generated code coverage results?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T17:13:56.651+0000",
                    "updated": "2018-10-04T17:13:56.651+0000",
                    "started": "2018-10-04T17:13:56.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151290",
                    "issueId": "13185597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/worklog/151294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2704: ARROW-3254: [C++] Add SOURCES option to ADD_ARROW_TEST to be able to combine multiple test files into a single executable\nURL: https://github.com/apache/arrow/pull/2704#issuecomment-427099405\n \n \n   Yeah, apparently there is an issue with code coverage data generated when compiling with `--coverage` and using gcc. Read this commit message for more information about this https://github.com/apache/kudu/commit/48799d3fed53c79a5163fd9c4cd9cbae80a9f2d6\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T17:16:19.050+0000",
                    "updated": "2018-10-04T17:16:19.050+0000",
                    "started": "2018-10-04T17:16:19.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151294",
                    "issueId": "13185597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/worklog/151295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2704: ARROW-3254: [C++] Add SOURCES option to ADD_ARROW_TEST to be able to combine multiple test files into a single executable\nURL: https://github.com/apache/arrow/pull/2704#issuecomment-427100371\n \n \n   I opened https://issues.apache.org/jira/browse/ARROW-3442. I still think it's a good idea to be able to split a unit test suite between multiple files, but I'll roll back my changes that combine a bunch of the existing tests\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-04T17:19:14.344+0000",
                    "updated": "2018-10-04T17:19:14.344+0000",
                    "started": "2018-10-04T17:19:14.343+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151295",
                    "issueId": "13185597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/worklog/167521",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2704: ARROW-3254: [C++] Add SOURCES option to ADD_ARROW_TEST to be able to combine multiple test files into a single executable\nURL: https://github.com/apache/arrow/pull/2704#issuecomment-440055817\n \n \n   I'll revisit this after https://github.com/apache/arrow/pull/2997 is merged\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-19T21:56:00.925+0000",
                    "updated": "2018-11-19T21:56:00.925+0000",
                    "started": "2018-11-19T21:56:00.924+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167521",
                    "issueId": "13185597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/worklog/167522",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2704: ARROW-3254: [C++] Add SOURCES option to ADD_ARROW_TEST to be able to combine multiple test files into a single executable\nURL: https://github.com/apache/arrow/pull/2704\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/Makefile.am b/c_glib/Makefile.am\nindex 5fb65f0409..886b0d6106 100644\n--- a/c_glib/Makefile.am\n+++ b/c_glib/Makefile.am\n@@ -26,6 +26,7 @@ SUBDIRS =\t\t\t\t\t\\\n \ttool\n \n EXTRA_DIST =\t\t\t\t\t\\\n+\tGemfile\t\t\t\t\t\\\n \tREADME.md\t\t\t\t\\\n \tautogen.sh\t\t\t\t\\\n \tmeson.build\t\t\t\t\\\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex 4448b989e3..5279daf65e 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -661,6 +661,7 @@ endif()\n \n if (ARROW_BUILD_BENCHMARKS)\n   set(ARROW_BENCHMARK_LINK_LIBS\n+    arrow_testing_aux\n     arrow_static\n     arrow_benchmark_main\n     gtest\n@@ -710,6 +711,17 @@ endif()\n \n set(ARROW_TEST_LINK_LIBS ${ARROW_MIN_TEST_LIBS})\n \n+if (ARROW_BUILD_TESTS OR ARROW_BUILD_BENCHMARKS)\n+  # TODO(wesm): ARROW-3254, maybe find a better place to put shared auxiliary\n+  # testing tools that depend on gtest\n+  add_library(arrow_testing_aux STATIC src/arrow/util/testing.cc)\n+  target_compile_definitions(arrow_testing_aux\n+    PRIVATE ARROW_EXPORTING)\n+  add_dependencies(arrow_testing_aux gtest)\n+  set(ARROW_TEST_LINK_LIBS arrow_testing_aux\n+    ${ARROW_TEST_LINK_LIBS})\n+endif()\n+\n if (ARROW_JEMALLOC)\n   add_definitions(-DARROW_JEMALLOC)\n   add_definitions(-DARROW_JEMALLOC_INCLUDE_DIR=${JEMALLOC_INCLUDE_DIR})\ndiff --git a/cpp/cmake_modules/BuildUtils.cmake b/cpp/cmake_modules/BuildUtils.cmake\nindex 98c5d03196..f6de635889 100644\n--- a/cpp/cmake_modules/BuildUtils.cmake\n+++ b/cpp/cmake_modules/BuildUtils.cmake\n@@ -360,11 +360,12 @@ endfunction()\n # multiple unit tests in some subgroup, you can assign a test to multiple\n # groups using the syntax unittest;GROUP2;GROUP3. Custom targets for the group\n # names must exist\n+# \\arg SOURCES one or more source files to use for building test executable\n function(ADD_ARROW_TEST REL_TEST_NAME)\n   set(options NO_VALGRIND)\n   set(one_value_args)\n-  set(multi_value_args STATIC_LINK_LIBS EXTRA_LINK_LIBS EXTRA_INCLUDES EXTRA_DEPENDENCIES\n-    LABELS PREFIX)\n+  set(multi_value_args SOURCES STATIC_LINK_LIBS EXTRA_LINK_LIBS EXTRA_INCLUDES\n+    EXTRA_DEPENDENCIES LABELS PREFIX)\n   cmake_parse_arguments(ARG \"${options}\" \"${one_value_args}\" \"${multi_value_args}\" ${ARGN})\n   if(ARG_UNPARSED_ARGUMENTS)\n     message(SEND_ERROR \"Error: unrecognized arguments: ${ARG_UNPARSED_ARGUMENTS}\")\n@@ -397,40 +398,44 @@ function(ADD_ARROW_TEST REL_TEST_NAME)\n     set(ARG_LABELS unittest)\n   endif()\n \n-  if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${REL_TEST_NAME}.cc)\n-    # This test has a corresponding .cc file, set it up as an executable.\n-    set(TEST_PATH \"${EXECUTABLE_OUTPUT_PATH}/${TEST_NAME}\")\n-    add_executable(${TEST_NAME} \"${REL_TEST_NAME}.cc\")\n+  # This test has a corresponding .cc file, set it up as an executable.\n+  set(TEST_PATH \"${EXECUTABLE_OUTPUT_PATH}/${TEST_NAME}\")\n \n-    if (ARG_STATIC_LINK_LIBS)\n-      # Customize link libraries\n-      target_link_libraries(${TEST_NAME} ${ARG_STATIC_LINK_LIBS})\n-    else()\n-      target_link_libraries(${TEST_NAME} ${ARROW_TEST_LINK_LIBS})\n-    endif()\n+  if (ARG_SOURCES)\n+    set(SOURCE_FILES ${ARG_SOURCES})\n+  elseif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${REL_TEST_NAME}.cc)\n+    set(SOURCE_FILES \"${REL_TEST_NAME}.cc\")\n+  else()\n+    message(FATAL_ERROR \"No source file available for building test\")\n+  endif()\n \n-    if (ARG_EXTRA_LINK_LIBS)\n-      target_link_libraries(${TEST_NAME} ${ARG_EXTRA_LINK_LIBS})\n-    endif()\n+  add_executable(${TEST_NAME} ${SOURCE_FILES})\n \n-    if (ARG_EXTRA_INCLUDES)\n-      target_include_directories(${TEST_NAME} SYSTEM PUBLIC\n-        ${ARG_EXTRA_INCLUDES}\n-        )\n-    endif()\n+  if (ARG_STATIC_LINK_LIBS)\n+    # Customize link libraries\n+    target_link_libraries(${TEST_NAME} ${ARG_STATIC_LINK_LIBS})\n+  else()\n+    target_link_libraries(${TEST_NAME} ${ARROW_TEST_LINK_LIBS})\n+  endif()\n \n-    if (ARG_EXTRA_DEPENDENCIES)\n-      add_dependencies(${TEST_NAME} ${ARG_EXTRA_DEPENDENCIES})\n-    endif()\n+  if (ARG_EXTRA_LINK_LIBS)\n+    target_link_libraries(${TEST_NAME} ${ARG_EXTRA_LINK_LIBS})\n+  endif()\n \n-    foreach (TEST_LABEL ${ARG_LABELS})\n-      add_dependencies(${TEST_LABEL} ${TEST_NAME})\n-    endforeach()\n-  else()\n-    # No executable, just invoke the test (probably a script) directly.\n-    set(TEST_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${REL_TEST_NAME})\n+  if (ARG_EXTRA_INCLUDES)\n+    target_include_directories(${TEST_NAME} SYSTEM PUBLIC\n+      ${ARG_EXTRA_INCLUDES}\n+      )\n+  endif()\n+\n+  if (ARG_EXTRA_DEPENDENCIES)\n+    add_dependencies(${TEST_NAME} ${ARG_EXTRA_DEPENDENCIES})\n   endif()\n \n+  foreach (TEST_LABEL ${ARG_LABELS})\n+    add_dependencies(${TEST_LABEL} ${TEST_NAME})\n+  endforeach()\n+\n   if (ARROW_TEST_MEMCHECK AND NOT ARG_NO_VALGRIND)\n     SET_PROPERTY(TARGET ${TEST_NAME}\n       APPEND_STRING PROPERTY\ndiff --git a/cpp/cmake_modules/FindRE2.cmake b/cpp/cmake_modules/FindRE2.cmake\nindex 6450b22e32..f2a4670c61 100644\n--- a/cpp/cmake_modules/FindRE2.cmake\n+++ b/cpp/cmake_modules/FindRE2.cmake\n@@ -22,48 +22,57 @@\n # This module defines\n #  RE2_INCLUDE_DIR, directory containing headers\n #  RE2_STATIC_LIB, path to libre2.a\n-#  re2 imported static library\n #  RE2_FOUND, whether re2 has been found\n \n-set(RE2_SEARCH_HEADER_PATHS ${RE2_HOME}/include)\n-\n-set(RE2_SEARCH_LIB_PATHS ${RE2_HOME}/lib)\n+if( NOT \"${RE2_HOME}\" STREQUAL \"\")\n+    file (TO_CMAKE_PATH \"${RE2_HOME}\" _re2_path)\n+endif()\n+message (STATUS \"RE2_HOME: ${RE2_HOME}\")\n \n find_path(RE2_INCLUDE_DIR re2/re2.h\n-  PATHS ${RE2_SEARCH_HEADER_PATHS}\n-        NO_DEFAULT_PATH\n+  HINTS ${_re2_path}\n+  NO_DEFAULT_PATH\n+  PATH_SUFFIXES \"include\"\n   DOC  \"Google's re2 regex header path\"\n )\n \n-find_library(RE2_LIBS NAMES re2\n-  PATHS ${RE2_SEARCH_LIB_PATHS}\n-        NO_DEFAULT_PATH\n-  DOC   \"Google's re2 regex library\"\n-)\n+set (lib_dirs \"lib\")\n+if (EXISTS \"${_re2_path}/lib64\")\n+  set (lib_dirs \"lib64\" ${lib_dirs})\n+endif ()\n+if (EXISTS \"${_re2_path}/lib/${CMAKE_LIBRARY_ARCHITECTURE}\")\n+  set (lib_dirs \"lib/${CMAKE_LIBRARY_ARCHITECTURE}\" ${lib_dirs})\n+endif ()\n \n find_library(RE2_STATIC_LIB NAMES libre2${CMAKE_STATIC_LIBRARY_SUFFIX}\n-  PATHS ${RE2_SEARCH_LIB_PATHS}\n+  PATHS ${_re2_path}\n         NO_DEFAULT_PATH\n+  PATH_SUFFIXES ${lib_dirs}\n   DOC   \"Google's re2 regex static library\"\n )\n \n message(STATUS ${RE2_INCLUDE_DIR})\n \n-if (NOT RE2_INCLUDE_DIR OR NOT RE2_LIBS OR\n-    NOT RE2_STATIC_LIB)\n+if (NOT RE2_INCLUDE_DIR OR NOT RE2_STATIC_LIB)\n   set(RE2_FOUND FALSE)\n-  message(FATAL_ERROR \"Re2 includes and libraries NOT found. \"\n-    \"Looked for headers in ${RE2_SEARCH_HEADER_PATHS}, \"\n-    \"and for libs in ${RE2_SEARCH_LIB_PATHS}\")\n+  if (_re2_path)\n+    set (RE2_ERR_MSG \"Could not find re2. Looked in ${_re2_path}.\")\n+  else ()\n+    set (RE2_ERR_MSG \"Could not find re2 in system search paths.\")\n+  endif()\n+\n+  if (RE2_FIND_REQUIRED)\n+    message(FATAL_ERROR \"${RE2_ERR_MSG})\")\n+  else ()\n+    message (STATUS \"${RE2_ERR_MSG}\")\n+  endif ()\n else()\n     set(RE2_FOUND TRUE)\n-    add_library(re2 STATIC IMPORTED)\n-    set_target_properties(re2 PROPERTIES IMPORTED_LOCATION \"${RE2_STATIC_LIB}\")\n+    message(STATUS \"Found the RE2 headers : ${RE2_INCLUDE_DIR}\")\n+    message(STATUS \"Found the RE2 static library : ${RE2_STATIC_LIB}\")\n endif()\n \n mark_as_advanced(\n   RE2_INCLUDE_DIR\n-  RE2_LIBS\n   RE2_STATIC_LIB\n-  re2\n )\ndiff --git a/cpp/cmake_modules/GandivaBuildUtils.cmake b/cpp/cmake_modules/GandivaBuildUtils.cmake\nindex c247b2b4eb..a1ed48eee8 100644\n--- a/cpp/cmake_modules/GandivaBuildUtils.cmake\n+++ b/cpp/cmake_modules/GandivaBuildUtils.cmake\n@@ -19,6 +19,7 @@\n function(build_gandiva_lib TYPE ARROW)\n   string(TOUPPER ${TYPE} TYPE_UPPER_CASE)\n   add_library(gandiva_${TYPE} ${TYPE_UPPER_CASE} $<TARGET_OBJECTS:gandiva_obj_lib>)\n+  add_dependencies(gandiva_${TYPE} arrow_dependencies)\n \n   target_include_directories(gandiva_${TYPE}\n     PUBLIC\n@@ -60,9 +61,9 @@ function(build_gandiva_lib TYPE ARROW)\n endfunction(build_gandiva_lib TYPE)\n \n set(GANDIVA_TEST_LINK_LIBS\n-  ${GTEST_STATIC_LIB}\n-  ${GTEST_MAIN_STATIC_LIB}\n-  ${RE2_STATIC_LIB})\n+  gtest\n+  gtest_main\n+  re2)\n \n if (PTHREAD_LIBRARY)\n   set(GANDIVA_TEST_LINK_LIBS\n@@ -82,6 +83,9 @@ function(add_gandiva_unit_test REL_TEST_NAME)\n     target_link_libraries(${TEST_NAME} PRIVATE LLVM::LLVM_INTERFACE)\n   endif()\n \n+  # Require toolchain to be built\n+  add_dependencies(${TEST_NAME} arrow_dependencies)\n+\n   target_include_directories(${TEST_NAME} PRIVATE\n     ${CMAKE_SOURCE_DIR}/include\n     ${CMAKE_SOURCE_DIR}/src\ndiff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake\nindex 1c7cd622b1..2e2f7d1b32 100644\n--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake\n+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake\n@@ -230,6 +230,12 @@ else()\n   set(PROTOBUF_SOURCE_URL \"https://github.com/protocolbuffers/protobuf/releases/download/${PROTOBUF_VERSION}/protobuf-all-${STRIPPED_PROTOBUF_VERSION}.tar.gz\")\n endif()\n \n+if (DEFINED ENV{ARROW_RE2_URL})\n+  set(RE2_SOURCE_URL \"$ENV{ARROW_RE2_URL}\")\n+else()\n+  set(RE2_SOURCE_URL \"https://github.com/google/re2/archive/${RE2_VERSION}.tar.gz\")\n+endif()\n+\n set(RAPIDJSON_SOURCE_MD5 \"badd12c511e081fec6c89c43a7027bce\")\n if (DEFINED ENV{ARROW_RAPIDJSON_URL})\n   set(RAPIDJSON_SOURCE_URL \"$ENV{ARROW_RAPIDJSON_URL}\")\n@@ -1057,11 +1063,47 @@ if (ARROW_WITH_ZSTD)\n   endif()\n endif()\n \n+# ----------------------------------------------------------------------\n+# RE2 (required for Gandiva)\n+if (ARROW_GANDIVA)\n+  # re2\n+  if (\"${RE2_HOME}\" STREQUAL \"\")\n+    set (RE2_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/re2_ep-install\")\n+    set (RE2_HOME \"${RE2_PREFIX}\")\n+    set (RE2_INCLUDE_DIR \"${RE2_PREFIX}/include\")\n+    set (RE2_STATIC_LIB \"${RE2_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}re2${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n+\n+    set(RE2_CMAKE_ARGS\n+          \"-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\"\n+          \"-DCMAKE_CXX_FLAGS=${EP_CXX_FLAGS}\"\n+          \"-DCMAKE_CXX_FLAGS_${UPPERCASE_BUILD_TYPE}=${EP_CXX_FLAGS}\"\n+          \"-DCMAKE_INSTALL_PREFIX=${RE2_PREFIX}\")\n+    ExternalProject_Add(re2_ep\n+      ${EP_LOG_OPTIONS}\n+      INSTALL_DIR ${RE2_PREFIX}\n+      URL ${RE2_SOURCE_URL}\n+      CMAKE_ARGS ${RE2_CMAKE_ARGS}\n+      BUILD_BYPRODUCTS \"${RE2_STATIC_LIB}\")\n+    set (RE2_VENDORED 1)\n+  else ()\n+    find_package (RE2 REQUIRED)\n+    set (RE2_VENDORED 0)\n+  endif ()\n+\n+  include_directories (SYSTEM ${RE2_INCLUDE_DIR})\n+  ADD_THIRDPARTY_LIB(re2\n+    STATIC_LIB ${RE2_STATIC_LIB})\n+\n+  if (RE2_VENDORED)\n+    add_dependencies (arrow_dependencies re2_ep)\n+  endif ()\n+endif ()\n+\n \n # ----------------------------------------------------------------------\n-# Protocol Buffers (required for ORC and Flight libraries)\n+# Protocol Buffers (required for ORC and Flight and Gandiva libraries)\n \n-if (ARROW_ORC OR ARROW_FLIGHT)\n+if (ARROW_ORC OR ARROW_FLIGHT OR ARROW_GANDIVA)\n   # protobuf\n   if (\"${PROTOBUF_HOME}\" STREQUAL \"\")\n     set (PROTOBUF_PREFIX \"${THIRDPARTY_DIR}/protobuf_ep-install\")\ndiff --git a/cpp/src/arrow/CMakeLists.txt b/cpp/src/arrow/CMakeLists.txt\nindex 290b3c9b60..caab8f314f 100644\n--- a/cpp/src/arrow/CMakeLists.txt\n+++ b/cpp/src/arrow/CMakeLists.txt\n@@ -175,7 +175,6 @@ endif()\n \n # Headers: top level\n install(FILES\n-  allocator.h\n   api.h\n   array.h\n   buffer.h\n@@ -192,7 +191,6 @@ install(FILES\n   type.h\n   type_fwd.h\n   type_traits.h\n-  test-util.h\n   visitor.h\n   visitor_inline.h\n   DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/arrow\")\n@@ -209,17 +207,20 @@ install(\n # Unit tests\n #######################################\n \n-ADD_ARROW_TEST(allocator-test)\n-ADD_ARROW_TEST(array-test)\n-ADD_ARROW_TEST(buffer-test)\n-ADD_ARROW_TEST(memory_pool-test)\n-ADD_ARROW_TEST(pretty_print-test)\n-ADD_ARROW_TEST(public-api-test)\n-ADD_ARROW_TEST(status-test)\n-ADD_ARROW_TEST(stl-test)\n-ADD_ARROW_TEST(type-test)\n-ADD_ARROW_TEST(table-test)\n-ADD_ARROW_TEST(table_builder-test)\n+ADD_ARROW_TEST(arrow-columnar-test\n+  SOURCES array-test.cc\n+  pretty_print-test.cc\n+  stl-test.cc\n+  type-test.cc\n+  table-test.cc\n+  table_builder-test.cc)\n+\n+ADD_ARROW_TEST(arrow-platform-test\n+  SOURCES buffer-test.cc\n+  memory_pool-test.cc\n+  public-api-test.cc\n+  status-test)\n+\n ADD_ARROW_TEST(tensor-test)\n \n ADD_ARROW_BENCHMARK(builder-benchmark)\ndiff --git a/cpp/src/arrow/array-test.cc b/cpp/src/arrow/array-test.cc\nindex f5153aa0ce..92db0d07ff 100644\n--- a/cpp/src/arrow/array-test.cc\n+++ b/cpp/src/arrow/array-test.cc\n@@ -30,12 +30,12 @@\n #include \"arrow/memory_pool.h\"\n #include \"arrow/status.h\"\n #include \"arrow/test-common.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/lazy.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/buffer-test.cc b/cpp/src/arrow/buffer-test.cc\nindex 6ee60765d2..4ff9d01f5c 100644\n--- a/cpp/src/arrow/buffer-test.cc\n+++ b/cpp/src/arrow/buffer-test.cc\n@@ -26,7 +26,7 @@\n #include \"arrow/buffer.h\"\n #include \"arrow/memory_pool.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n using std::string;\n \ndiff --git a/cpp/src/arrow/builder-benchmark.cc b/cpp/src/arrow/builder-benchmark.cc\nindex 809e6ffab8..b190cdbad0 100644\n--- a/cpp/src/arrow/builder-benchmark.cc\n+++ b/cpp/src/arrow/builder-benchmark.cc\n@@ -19,7 +19,7 @@\n \n #include \"arrow/builder.h\"\n #include \"arrow/memory_pool.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/column-benchmark.cc b/cpp/src/arrow/column-benchmark.cc\nindex 11d97adda0..e9160a24fa 100644\n--- a/cpp/src/arrow/column-benchmark.cc\n+++ b/cpp/src/arrow/column-benchmark.cc\n@@ -20,7 +20,7 @@\n #include \"arrow/array.h\"\n #include \"arrow/memory_pool.h\"\n #include \"arrow/table.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace {\ndiff --git a/cpp/src/arrow/compute/compute-benchmark.cc b/cpp/src/arrow/compute/compute-benchmark.cc\nindex 405aa40142..db52eaaca0 100644\n--- a/cpp/src/arrow/compute/compute-benchmark.cc\n+++ b/cpp/src/arrow/compute/compute-benchmark.cc\n@@ -21,7 +21,7 @@\n \n #include \"arrow/builder.h\"\n #include \"arrow/memory_pool.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n #include \"arrow/compute/context.h\"\n #include \"arrow/compute/kernels/hash.h\"\ndiff --git a/cpp/src/arrow/compute/compute-test.cc b/cpp/src/arrow/compute/compute-test.cc\nindex 056fb031b7..3280d2f19d 100644\n--- a/cpp/src/arrow/compute/compute-test.cc\n+++ b/cpp/src/arrow/compute/compute-test.cc\n@@ -34,9 +34,9 @@\n #include \"arrow/pretty_print.h\"\n #include \"arrow/status.h\"\n #include \"arrow/test-common.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n+#include \"arrow/util/testing.h\"\n \n #include \"arrow/compute/context.h\"\n #include \"arrow/compute/kernel.h\"\ndiff --git a/cpp/src/arrow/csv/CMakeLists.txt b/cpp/src/arrow/csv/CMakeLists.txt\nindex 84b080b1ee..ad7b6851d0 100644\n--- a/cpp/src/arrow/csv/CMakeLists.txt\n+++ b/cpp/src/arrow/csv/CMakeLists.txt\n@@ -15,10 +15,14 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-ADD_ARROW_TEST(csv-chunker-test)\n-ADD_ARROW_TEST(csv-column-builder-test)\n-ADD_ARROW_TEST(csv-converter-test)\n-ADD_ARROW_TEST(csv-parser-test)\n+add_custom_target(arrow_csv)\n+\n+ADD_ARROW_TEST(arrow-csv-test\n+  SOURCES csv-chunker-test.cc\n+  csv-column-builder-test.cc\n+  csv-converter-test.cc\n+  csv-parser-test.cc\n+  LABELS \"unittest;arrow_csv\")\n \n ADD_ARROW_BENCHMARK(csv-converter-benchmark)\n ADD_ARROW_BENCHMARK(csv-parser-benchmark)\ndiff --git a/cpp/src/arrow/csv/csv-chunker-test.cc b/cpp/src/arrow/csv/csv-chunker-test.cc\nindex 1fb419957b..79fa150b34 100644\n--- a/cpp/src/arrow/csv/csv-chunker-test.cc\n+++ b/cpp/src/arrow/csv/csv-chunker-test.cc\n@@ -25,7 +25,7 @@\n #include \"arrow/csv/chunker.h\"\n #include \"arrow/csv/test-common.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace csv {\ndiff --git a/cpp/src/arrow/csv/csv-column-builder-test.cc b/cpp/src/arrow/csv/csv-column-builder-test.cc\nindex 9de6d7daea..694ea241bc 100644\n--- a/cpp/src/arrow/csv/csv-column-builder-test.cc\n+++ b/cpp/src/arrow/csv/csv-column-builder-test.cc\n@@ -24,7 +24,7 @@\n #include \"arrow/csv/column-builder.h\"\n #include \"arrow/csv/test-common.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n #include \"arrow/util/thread-pool.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/arrow/csv/csv-converter-benchmark.cc b/cpp/src/arrow/csv/csv-converter-benchmark.cc\nindex bba1bc3d0e..d3d39622ce 100644\n--- a/cpp/src/arrow/csv/csv-converter-benchmark.cc\n+++ b/cpp/src/arrow/csv/csv-converter-benchmark.cc\n@@ -24,7 +24,7 @@\n #include \"arrow/csv/options.h\"\n #include \"arrow/csv/parser.h\"\n #include \"arrow/csv/test-common.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace csv {\ndiff --git a/cpp/src/arrow/csv/csv-converter-test.cc b/cpp/src/arrow/csv/csv-converter-test.cc\nindex 1cf668d65d..cf9d4647bb 100644\n--- a/cpp/src/arrow/csv/csv-converter-test.cc\n+++ b/cpp/src/arrow/csv/csv-converter-test.cc\n@@ -24,7 +24,7 @@\n #include \"arrow/csv/converter.h\"\n #include \"arrow/csv/test-common.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace csv {\ndiff --git a/cpp/src/arrow/csv/csv-parser-benchmark.cc b/cpp/src/arrow/csv/csv-parser-benchmark.cc\nindex f61102d4cb..877bf4971b 100644\n--- a/cpp/src/arrow/csv/csv-parser-benchmark.cc\n+++ b/cpp/src/arrow/csv/csv-parser-benchmark.cc\n@@ -23,7 +23,7 @@\n #include \"arrow/csv/chunker.h\"\n #include \"arrow/csv/options.h\"\n #include \"arrow/csv/parser.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace csv {\ndiff --git a/cpp/src/arrow/csv/csv-parser-test.cc b/cpp/src/arrow/csv/csv-parser-test.cc\nindex 1e8162f432..d6d6530a44 100644\n--- a/cpp/src/arrow/csv/csv-parser-test.cc\n+++ b/cpp/src/arrow/csv/csv-parser-test.cc\n@@ -23,7 +23,7 @@\n #include \"arrow/csv/parser.h\"\n #include \"arrow/csv/test-common.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace csv {\ndiff --git a/cpp/src/arrow/csv/test-common.h b/cpp/src/arrow/csv/test-common.h\nindex dd0e0cf3af..697edde573 100644\n--- a/cpp/src/arrow/csv/test-common.h\n+++ b/cpp/src/arrow/csv/test-common.h\n@@ -24,12 +24,12 @@\n #include <vector>\n \n #include \"arrow/csv/parser.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace csv {\n \n-std::string MakeCSVData(std::vector<std::string> lines) {\n+static inline std::string MakeCSVData(std::vector<std::string> lines) {\n   std::stringstream ss;\n   for (const auto& line : lines) {\n     ss << line;\n@@ -38,7 +38,8 @@ std::string MakeCSVData(std::vector<std::string> lines) {\n }\n \n // Make a BlockParser from a vector of lines representing a CSV file\n-void MakeCSVParser(std::vector<std::string> lines, std::shared_ptr<BlockParser>* out) {\n+static inline void MakeCSVParser(std::vector<std::string> lines,\n+                                 std::shared_ptr<BlockParser>* out) {\n   auto csv = MakeCSVData(lines);\n   auto parser = std::make_shared<BlockParser>(ParseOptions::Defaults());\n   uint32_t out_size;\n@@ -48,7 +49,8 @@ void MakeCSVParser(std::vector<std::string> lines, std::shared_ptr<BlockParser>*\n }\n \n // Make a BlockParser from a vector of strings representing a single CSV column\n-void MakeColumnParser(std::vector<std::string> items, std::shared_ptr<BlockParser>* out) {\n+static inline void MakeColumnParser(std::vector<std::string> items,\n+                                    std::shared_ptr<BlockParser>* out) {\n   std::vector<std::string> lines;\n   for (const auto& item : items) {\n     lines.push_back(item + '\\n');\ndiff --git a/cpp/src/arrow/dbi/hiveserver2/CMakeLists.txt b/cpp/src/arrow/dbi/hiveserver2/CMakeLists.txt\nindex ba2634b286..3a16a7834c 100644\n--- a/cpp/src/arrow/dbi/hiveserver2/CMakeLists.txt\n+++ b/cpp/src/arrow/dbi/hiveserver2/CMakeLists.txt\n@@ -105,9 +105,9 @@ set_property(SOURCE ${ARROW_HIVESERVER2_SRCS}\n   \" -Wno-shadow-field\")\n \n set(ARROW_HIVESERVER2_TEST_LINK_LIBS\n-  ${ARROW_TEST_LINK_LIBS}\n   arrow_hiveserver2_static\n   arrow_hiveserver2_thrift\n+  ${ARROW_TEST_LINK_LIBS}\n   thriftstatic)\n \n if (ARROW_BUILD_TESTS)\ndiff --git a/cpp/src/arrow/dbi/hiveserver2/hiveserver2-test.cc b/cpp/src/arrow/dbi/hiveserver2/hiveserver2-test.cc\nindex 7022ff017f..f1607a35d3 100644\n--- a/cpp/src/arrow/dbi/hiveserver2/hiveserver2-test.cc\n+++ b/cpp/src/arrow/dbi/hiveserver2/hiveserver2-test.cc\n@@ -29,7 +29,7 @@\n #include \"arrow/dbi/hiveserver2/thrift-internal.h\"\n \n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n using std::string;\n using std::unique_ptr;\ndiff --git a/cpp/src/arrow/flight/flight-benchmark.cc b/cpp/src/arrow/flight/flight-benchmark.cc\nindex 898d015431..afd235b230 100644\n--- a/cpp/src/arrow/flight/flight-benchmark.cc\n+++ b/cpp/src/arrow/flight/flight-benchmark.cc\n@@ -27,8 +27,8 @@\n #include \"arrow/io/memory.h\"\n #include \"arrow/ipc/api.h\"\n #include \"arrow/record_batch.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/util/stopwatch.h\"\n+#include \"arrow/util/testing.h\"\n #include \"arrow/util/thread-pool.h\"\n \n #include \"arrow/flight/api.h\"\ndiff --git a/cpp/src/arrow/flight/flight-test.cc b/cpp/src/arrow/flight/flight-test.cc\nindex 2d1b2f8477..080c2b726c 100644\n--- a/cpp/src/arrow/flight/flight-test.cc\n+++ b/cpp/src/arrow/flight/flight-test.cc\n@@ -35,7 +35,7 @@\n \n #include \"arrow/ipc/test-common.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n #include \"arrow/flight/api.h\"\n \ndiff --git a/cpp/src/arrow/flight/test-util.h b/cpp/src/arrow/flight/test-util.h\nindex 4a1299719b..257258bbc3 100644\n--- a/cpp/src/arrow/flight/test-util.h\n+++ b/cpp/src/arrow/flight/test-util.h\n@@ -27,7 +27,7 @@\n \n #include \"arrow/ipc/test-common.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n #include \"arrow/flight/api.h\"\n #include \"arrow/flight/internal.h\"\ndiff --git a/cpp/src/arrow/gpu/cuda-benchmark.cc b/cpp/src/arrow/gpu/cuda-benchmark.cc\nindex 8b3723d838..9e9e4dace5 100644\n--- a/cpp/src/arrow/gpu/cuda-benchmark.cc\n+++ b/cpp/src/arrow/gpu/cuda-benchmark.cc\n@@ -23,7 +23,7 @@\n \n #include \"arrow/array.h\"\n #include \"arrow/memory_pool.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n #include \"arrow/gpu/cuda_api.h\"\n \ndiff --git a/cpp/src/arrow/gpu/cuda-test.cc b/cpp/src/arrow/gpu/cuda-test.cc\nindex cb37545800..f3277cf04e 100644\n--- a/cpp/src/arrow/gpu/cuda-test.cc\n+++ b/cpp/src/arrow/gpu/cuda-test.cc\n@@ -24,7 +24,7 @@\n #include \"arrow/ipc/api.h\"\n #include \"arrow/ipc/test-common.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n #include \"arrow/gpu/cuda_api.h\"\n \ndiff --git a/cpp/src/arrow/io/CMakeLists.txt b/cpp/src/arrow/io/CMakeLists.txt\nindex ff6b8541dc..b7492f6a09 100644\n--- a/cpp/src/arrow/io/CMakeLists.txt\n+++ b/cpp/src/arrow/io/CMakeLists.txt\n@@ -18,15 +18,17 @@\n # ----------------------------------------------------------------------\n # arrow_io : Arrow IO interfaces\n \n-ADD_ARROW_TEST(io-buffered-test)\n-ADD_ARROW_TEST(io-file-test)\n-\n if (ARROW_HDFS AND NOT ARROW_BOOST_HEADER_ONLY)\n-  ADD_ARROW_TEST(io-hdfs-test NO_VALGRIND)\n+  ADD_ARROW_TEST(arrow-hdfs-test\n+    NO_VALGRIND\n+    SOURCES io-hdfs-test.cc)\n endif()\n \n-ADD_ARROW_TEST(io-memory-test)\n-ADD_ARROW_TEST(io-readahead-test)\n+ADD_ARROW_TEST(arrow-io-test\n+  SOURCES io-buffered-test.cc\n+  io-file-test.cc\n+  io-memory-test.cc\n+  io-readahead-test.cc)\n \n ADD_ARROW_BENCHMARK(io-file-benchmark)\n ADD_ARROW_BENCHMARK(io-memory-benchmark)\ndiff --git a/cpp/src/arrow/io/io-buffered-test.cc b/cpp/src/arrow/io/io-buffered-test.cc\nindex efa2301f28..73e678a44c 100644\n--- a/cpp/src/arrow/io/io-buffered-test.cc\n+++ b/cpp/src/arrow/io/io-buffered-test.cc\n@@ -27,7 +27,7 @@\n #include \"arrow/io/interfaces.h\"\n #include \"arrow/io/test-common.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace io {\ndiff --git a/cpp/src/arrow/io/io-file-benchmark.cc b/cpp/src/arrow/io/io-file-benchmark.cc\nindex e5a326e277..ad545178bf 100644\n--- a/cpp/src/arrow/io/io-file-benchmark.cc\n+++ b/cpp/src/arrow/io/io-file-benchmark.cc\n@@ -18,8 +18,8 @@\n #include \"arrow/api.h\"\n #include \"arrow/io/buffered.h\"\n #include \"arrow/io/file.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/util/io-util.h\"\n+#include \"arrow/util/testing.h\"\n \n #include \"benchmark/benchmark.h\"\n \ndiff --git a/cpp/src/arrow/io/io-file-test.cc b/cpp/src/arrow/io/io-file-test.cc\nindex 22d5947c69..8ee84a2243 100644\n--- a/cpp/src/arrow/io/io-file-test.cc\n+++ b/cpp/src/arrow/io/io-file-test.cc\n@@ -35,8 +35,8 @@\n #include \"arrow/io/test-common.h\"\n #include \"arrow/memory_pool.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/util/io-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace io {\ndiff --git a/cpp/src/arrow/io/io-hdfs-test.cc b/cpp/src/arrow/io/io-hdfs-test.cc\nindex c853b20126..35aeb5f3ad 100644\n--- a/cpp/src/arrow/io/io-hdfs-test.cc\n+++ b/cpp/src/arrow/io/io-hdfs-test.cc\n@@ -35,7 +35,7 @@\n #include \"arrow/io/hdfs.h\"\n #include \"arrow/io/interfaces.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace io {\ndiff --git a/cpp/src/arrow/io/io-memory-benchmark.cc b/cpp/src/arrow/io/io-memory-benchmark.cc\nindex 72a5dc8ac2..77c5529ee8 100644\n--- a/cpp/src/arrow/io/io-memory-benchmark.cc\n+++ b/cpp/src/arrow/io/io-memory-benchmark.cc\n@@ -17,7 +17,7 @@\n \n #include \"arrow/api.h\"\n #include \"arrow/io/memory.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n #include \"benchmark/benchmark.h\"\n \ndiff --git a/cpp/src/arrow/io/io-memory-test.cc b/cpp/src/arrow/io/io-memory-test.cc\nindex db536adf75..c3372a908f 100644\n--- a/cpp/src/arrow/io/io-memory-test.cc\n+++ b/cpp/src/arrow/io/io-memory-test.cc\n@@ -28,8 +28,8 @@\n #include \"arrow/io/memory.h\"\n #include \"arrow/memory_pool.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/io/io-readahead-test.cc b/cpp/src/arrow/io/io-readahead-test.cc\nindex b1b7b43955..dba82a55ec 100644\n--- a/cpp/src/arrow/io/io-readahead-test.cc\n+++ b/cpp/src/arrow/io/io-readahead-test.cc\n@@ -29,8 +29,8 @@\n #include \"arrow/io/readahead.h\"\n #include \"arrow/memory_pool.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/io/test-common.h b/cpp/src/arrow/io/test-common.h\nindex fa9145259b..bd89574cf8 100644\n--- a/cpp/src/arrow/io/test-common.h\n+++ b/cpp/src/arrow/io/test-common.h\n@@ -41,7 +41,7 @@\n #include \"arrow/io/file.h\"\n #include \"arrow/io/memory.h\"\n #include \"arrow/memory_pool.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace io {\ndiff --git a/cpp/src/arrow/ipc/feather-test.cc b/cpp/src/arrow/ipc/feather-test.cc\nindex 1ee36d7c87..c88dbae43b 100644\n--- a/cpp/src/arrow/ipc/feather-test.cc\n+++ b/cpp/src/arrow/ipc/feather-test.cc\n@@ -30,8 +30,8 @@\n #include \"arrow/ipc/test-common.h\"\n #include \"arrow/pretty_print.h\"\n #include \"arrow/table.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/ipc/ipc-json-test.cc b/cpp/src/arrow/ipc/ipc-json-test.cc\nindex 26d396dc06..b08f3a2a61 100644\n--- a/cpp/src/arrow/ipc/ipc-json-test.cc\n+++ b/cpp/src/arrow/ipc/ipc-json-test.cc\n@@ -33,9 +33,9 @@\n #include \"arrow/memory_pool.h\"\n #include \"arrow/record_batch.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace ipc {\ndiff --git a/cpp/src/arrow/ipc/ipc-read-write-benchmark.cc b/cpp/src/arrow/ipc/ipc-read-write-benchmark.cc\nindex ace2965b90..4fe01a0d5a 100644\n--- a/cpp/src/arrow/ipc/ipc-read-write-benchmark.cc\n+++ b/cpp/src/arrow/ipc/ipc-read-write-benchmark.cc\n@@ -24,7 +24,7 @@\n #include \"arrow/api.h\"\n #include \"arrow/io/memory.h\"\n #include \"arrow/ipc/api.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/ipc/ipc-read-write-test.cc b/cpp/src/arrow/ipc/ipc-read-write-test.cc\nindex 55c5f409ea..a24bd030a3 100644\n--- a/cpp/src/arrow/ipc/ipc-read-write-test.cc\n+++ b/cpp/src/arrow/ipc/ipc-read-write-test.cc\n@@ -37,9 +37,9 @@\n #include \"arrow/pretty_print.h\"\n #include \"arrow/status.h\"\n #include \"arrow/tensor.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/ipc/json-integration-test.cc b/cpp/src/arrow/ipc/json-integration-test.cc\nindex 37778fa251..6b90921e09 100644\n--- a/cpp/src/arrow/ipc/json-integration-test.cc\n+++ b/cpp/src/arrow/ipc/json-integration-test.cc\n@@ -36,8 +36,8 @@\n #include \"arrow/pretty_print.h\"\n #include \"arrow/record_batch.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n+#include \"arrow/util/testing.h\"\n \n DEFINE_string(arrow, \"\", \"Arrow file name\");\n DEFINE_string(json, \"\", \"JSON file name\");\ndiff --git a/cpp/src/arrow/ipc/test-common.h b/cpp/src/arrow/ipc/test-common.h\nindex 4f7de26e35..7e35955db0 100644\n--- a/cpp/src/arrow/ipc/test-common.h\n+++ b/cpp/src/arrow/ipc/test-common.h\n@@ -32,9 +32,9 @@\n #include \"arrow/pretty_print.h\"\n #include \"arrow/record_batch.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n #include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace ipc {\ndiff --git a/cpp/src/arrow/memory_pool-test.cc b/cpp/src/arrow/memory_pool-test.cc\nindex c2c814644d..181e26e8c3 100644\n--- a/cpp/src/arrow/memory_pool-test.cc\n+++ b/cpp/src/arrow/memory_pool-test.cc\n@@ -63,14 +63,16 @@ TEST(DefaultMemoryPoolDeathTest, MaxMemory) {\n   uint8_t* data1;\n   uint8_t* data2;\n \n-  ASSERT_OK(pool->Allocate(100, &data1));\n+  auto prior_max_memory = pool->max_memory();\n+\n+  ASSERT_OK(pool->Allocate(prior_max_memory + 100, &data1));\n   ASSERT_OK(pool->Allocate(50, &data2));\n   pool->Free(data2, 50);\n   ASSERT_OK(pool->Allocate(100, &data2));\n-  pool->Free(data1, 100);\n+  pool->Free(data1, prior_max_memory + 100);\n   pool->Free(data2, 100);\n \n-  ASSERT_EQ(200, pool->max_memory());\n+  ASSERT_EQ(prior_max_memory + 200, pool->max_memory());\n }\n \n #endif  // ARROW_VALGRIND\n@@ -80,16 +82,18 @@ TEST(LoggingMemoryPool, Logging) {\n \n   LoggingMemoryPool lp(pool);\n \n+  auto prior_max_memory = pool->max_memory();\n+\n   uint8_t* data;\n   ASSERT_OK(pool->Allocate(100, &data));\n \n   uint8_t* data2;\n-  ASSERT_OK(pool->Allocate(100, &data2));\n+  ASSERT_OK(pool->Allocate(prior_max_memory + 100, &data2));\n \n   pool->Free(data, 100);\n-  pool->Free(data2, 100);\n+  pool->Free(data2, prior_max_memory + 100);\n \n-  ASSERT_EQ(200, pool->max_memory());\n+  ASSERT_EQ(prior_max_memory + 200, pool->max_memory());\n }\n \n TEST(ProxyMemoryPool, Logging) {\ndiff --git a/cpp/src/arrow/memory_pool-test.h b/cpp/src/arrow/memory_pool-test.h\nindex 27ec718e6e..12849b820a 100644\n--- a/cpp/src/arrow/memory_pool-test.h\n+++ b/cpp/src/arrow/memory_pool-test.h\n@@ -22,7 +22,7 @@\n \n #include \"arrow/memory_pool.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/pretty_print-test.cc b/cpp/src/arrow/pretty_print-test.cc\nindex 9724b8e090..814e789195 100644\n--- a/cpp/src/arrow/pretty_print-test.cc\n+++ b/cpp/src/arrow/pretty_print-test.cc\n@@ -28,10 +28,10 @@\n #include \"arrow/array.h\"\n #include \"arrow/builder.h\"\n #include \"arrow/pretty_print.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n #include \"arrow/util/decimal.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/python/python-test.cc b/cpp/src/arrow/python/python-test.cc\nindex 2d15ce45b3..0d1cebbe1f 100644\n--- a/cpp/src/arrow/python/python-test.cc\n+++ b/cpp/src/arrow/python/python-test.cc\n@@ -24,7 +24,7 @@\n #include \"arrow/array.h\"\n #include \"arrow/builder.h\"\n #include \"arrow/table.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n #include \"arrow/python/arrow_to_pandas.h\"\n #include \"arrow/python/decimal.h\"\ndiff --git a/cpp/src/arrow/table-test.cc b/cpp/src/arrow/table-test.cc\nindex dfd8b63c08..705139c2c7 100644\n--- a/cpp/src/arrow/table-test.cc\n+++ b/cpp/src/arrow/table-test.cc\n@@ -26,8 +26,8 @@\n #include \"arrow/status.h\"\n #include \"arrow/table.h\"\n #include \"arrow/test-common.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n+#include \"arrow/util/testing.h\"\n \n using std::shared_ptr;\n using std::vector;\ndiff --git a/cpp/src/arrow/table_builder-test.cc b/cpp/src/arrow/table_builder-test.cc\nindex 74f5ce0969..ae13c3a398 100644\n--- a/cpp/src/arrow/table_builder-test.cc\n+++ b/cpp/src/arrow/table_builder-test.cc\n@@ -27,9 +27,9 @@\n #include \"arrow/table.h\"\n #include \"arrow/table_builder.h\"\n #include \"arrow/test-common.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n #include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/tensor-test.cc b/cpp/src/arrow/tensor-test.cc\nindex 196841cfd2..0a7fd51b6a 100644\n--- a/cpp/src/arrow/tensor-test.cc\n+++ b/cpp/src/arrow/tensor-test.cc\n@@ -27,8 +27,8 @@\n #include \"arrow/buffer.h\"\n #include \"arrow/memory_pool.h\"\n #include \"arrow/tensor.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/test-common.h b/cpp/src/arrow/test-common.h\nindex 9cd8ffd364..63a5e1bd2a 100644\n--- a/cpp/src/arrow/test-common.h\n+++ b/cpp/src/arrow/test-common.h\n@@ -30,7 +30,7 @@\n #include \"arrow/buffer.h\"\n #include \"arrow/builder.h\"\n #include \"arrow/memory_pool.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \n@@ -62,7 +62,8 @@ class TestBase : public ::testing::Test {\n };\n \n template <typename ArrayType>\n-std::shared_ptr<Array> TestBase::MakeRandomArray(int64_t length, int64_t null_count) {\n+inline std::shared_ptr<Array> TestBase::MakeRandomArray(int64_t length,\n+                                                        int64_t null_count) {\n   const int64_t data_nbytes = length * sizeof(typename ArrayType::value_type);\n   std::shared_ptr<Buffer> data;\n   EXPECT_OK(AllocateBuffer(pool_, data_nbytes, &data));\n@@ -75,13 +76,13 @@ std::shared_ptr<Array> TestBase::MakeRandomArray(int64_t length, int64_t null_co\n }\n \n template <>\n-std::shared_ptr<Array> TestBase::MakeRandomArray<NullArray>(int64_t length,\n-                                                            int64_t null_count) {\n+inline std::shared_ptr<Array> TestBase::MakeRandomArray<NullArray>(int64_t length,\n+                                                                   int64_t null_count) {\n   return std::make_shared<NullArray>(length);\n }\n \n template <>\n-std::shared_ptr<Array> TestBase::MakeRandomArray<FixedSizeBinaryArray>(\n+inline std::shared_ptr<Array> TestBase::MakeRandomArray<FixedSizeBinaryArray>(\n     int64_t length, int64_t null_count) {\n   const int byte_width = 10;\n   std::shared_ptr<Buffer> null_bitmap = MakeRandomNullBitmap(length, null_count);\n@@ -94,8 +95,8 @@ std::shared_ptr<Array> TestBase::MakeRandomArray<FixedSizeBinaryArray>(\n }\n \n template <>\n-std::shared_ptr<Array> TestBase::MakeRandomArray<BinaryArray>(int64_t length,\n-                                                              int64_t null_count) {\n+inline std::shared_ptr<Array> TestBase::MakeRandomArray<BinaryArray>(int64_t length,\n+                                                                     int64_t null_count) {\n   std::vector<uint8_t> valid_bytes(length, 1);\n   for (int64_t i = 0; i < null_count; i++) {\n     valid_bytes[i * 2] = 0;\ndiff --git a/cpp/src/arrow/type-test.cc b/cpp/src/arrow/type-test.cc\nindex 6291cf611c..2df1616573 100644\n--- a/cpp/src/arrow/type-test.cc\n+++ b/cpp/src/arrow/type-test.cc\n@@ -24,10 +24,10 @@\n \n #include <gtest/gtest.h>\n \n-#include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/key_value_metadata.h\"\n+#include \"arrow/util/testing.h\"\n \n using std::shared_ptr;\n using std::vector;\ndiff --git a/cpp/src/arrow/util/CMakeLists.txt b/cpp/src/arrow/util/CMakeLists.txt\nindex c8f7316145..deb2ea2207 100644\n--- a/cpp/src/arrow/util/CMakeLists.txt\n+++ b/cpp/src/arrow/util/CMakeLists.txt\n@@ -45,9 +45,11 @@ install(FILES\n   parallel.h\n   rle-encoding.h\n   sse-util.h\n+  stl_allocator.h\n   stl.h\n   stopwatch.h\n   string.h\n+  testing.h\n   thread-pool.h\n   type_traits.h\n   variant.h\n@@ -55,10 +57,6 @@ install(FILES\n   windows_compatibility.h\n   DESTINATION include/arrow/util)\n \n-#######################################\n-# arrow_test_main\n-#######################################\n-\n if (ARROW_BUILD_BENCHMARKS)\n   add_library(arrow_benchmark_main benchmark_main.cc)\n   if (APPLE)\n@@ -81,18 +79,29 @@ if (ARROW_BUILD_BENCHMARKS)\n   add_dependencies(arrow_benchmark_main gtest)\n endif()\n \n-ADD_ARROW_TEST(bit-util-test)\n-ADD_ARROW_TEST(checked-cast-test)\n+set(UTIL_TEST_SRCS\n+  bit-util-test.cc\n+  checked-cast-test.cc\n+  decimal-test.cc\n+  key-value-metadata-test.cc\n+  lazy-test.cc\n+  logging-test.cc\n+  rle-encoding-test.cc\n+  stl_allocator-test.cc\n+  stl-util-test.cc)\n+\n+ADD_ARROW_TEST(util-test\n+  SOURCES ${UTIL_TEST_SRCS}\n+  PREFIX \"arrow\"\n+  LABELS \"unittest\")\n+\n+ADD_ARROW_TEST(thread-test\n+  SOURCES thread-pool-test.cc task-group-test.cc\n+  PREFIX \"arrow\"\n+  LABELS \"unittest\")\n+\n ADD_ARROW_TEST(compression-test)\n-ADD_ARROW_TEST(decimal-test)\n-ADD_ARROW_TEST(key-value-metadata-test)\n-ADD_ARROW_TEST(rle-encoding-test)\n ADD_ARROW_TEST(parsing-util-test)\n-ADD_ARROW_TEST(stl-util-test)\n-ADD_ARROW_TEST(thread-pool-test)\n-ADD_ARROW_TEST(task-group-test)\n-ADD_ARROW_TEST(lazy-test)\n-ADD_ARROW_TEST(logging-test)\n \n ADD_ARROW_BENCHMARK(bit-util-benchmark)\n ADD_ARROW_BENCHMARK(decimal-benchmark)\ndiff --git a/cpp/src/arrow/util/bit-util-benchmark.cc b/cpp/src/arrow/util/bit-util-benchmark.cc\nindex beb48df278..153e8864de 100644\n--- a/cpp/src/arrow/util/bit-util-benchmark.cc\n+++ b/cpp/src/arrow/util/bit-util-benchmark.cc\n@@ -22,8 +22,8 @@\n #include \"arrow/buffer.h\"\n #include \"arrow/builder.h\"\n #include \"arrow/memory_pool.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/util/bit-util-test.cc b/cpp/src/arrow/util/bit-util-test.cc\nindex 86c493382d..a3733cc105 100644\n--- a/cpp/src/arrow/util/bit-util-test.cc\n+++ b/cpp/src/arrow/util/bit-util-test.cc\n@@ -32,10 +32,10 @@\n #include \"arrow/buffer.h\"\n #include \"arrow/memory_pool.h\"\n #include \"arrow/test-common.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/util/bit-stream-utils.h\"\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/cpu-info.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/util/compression-test.cc b/cpp/src/arrow/util/compression-test.cc\nindex 11f99e37cb..1003f5e0f6 100644\n--- a/cpp/src/arrow/util/compression-test.cc\n+++ b/cpp/src/arrow/util/compression-test.cc\n@@ -22,8 +22,8 @@\n \n #include <gtest/gtest.h>\n \n-#include \"arrow/test-util.h\"\n #include \"arrow/util/compression.h\"\n+#include \"arrow/util/testing.h\"\n \n using std::string;\n using std::vector;\ndiff --git a/cpp/src/arrow/util/decimal-test.cc b/cpp/src/arrow/util/decimal-test.cc\nindex 61884a18b1..5a7a561562 100644\n--- a/cpp/src/arrow/util/decimal-test.cc\n+++ b/cpp/src/arrow/util/decimal-test.cc\n@@ -22,8 +22,8 @@\n #include <gtest/gtest.h>\n \n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/util/decimal.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/util/lazy-benchmark.cc b/cpp/src/arrow/util/lazy-benchmark.cc\nindex 0b10ce197e..417505a857 100644\n--- a/cpp/src/arrow/util/lazy-benchmark.cc\n+++ b/cpp/src/arrow/util/lazy-benchmark.cc\n@@ -21,8 +21,8 @@\n \n #include <benchmark/benchmark.h>\n \n-#include \"arrow/test-util.h\"\n #include \"arrow/util/lazy.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/util/lazy-test.cc b/cpp/src/arrow/util/lazy-test.cc\nindex af8a9ec26b..33fb8ff0a9 100644\n--- a/cpp/src/arrow/util/lazy-test.cc\n+++ b/cpp/src/arrow/util/lazy-test.cc\n@@ -19,8 +19,8 @@\n \n #include <gtest/gtest.h>\n \n-#include \"arrow/test-util.h\"\n #include \"arrow/util/lazy.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/util/number-parsing-benchmark.cc b/cpp/src/arrow/util/number-parsing-benchmark.cc\nindex 28ef76abe7..baa2f026f6 100644\n--- a/cpp/src/arrow/util/number-parsing-benchmark.cc\n+++ b/cpp/src/arrow/util/number-parsing-benchmark.cc\n@@ -22,8 +22,8 @@\n #include <type_traits>\n #include <vector>\n \n-#include \"arrow/test-util.h\"\n #include \"arrow/util/parsing.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n namespace internal {\ndiff --git a/cpp/src/arrow/util/parsing-util-test.cc b/cpp/src/arrow/util/parsing-util-test.cc\nindex 9fa5ffb7a9..128d0bfd54 100644\n--- a/cpp/src/arrow/util/parsing-util-test.cc\n+++ b/cpp/src/arrow/util/parsing-util-test.cc\n@@ -21,8 +21,8 @@\n #include <string>\n \n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/util/parsing.h\"\n+#include \"arrow/util/testing.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/allocator-test.cc b/cpp/src/arrow/util/stl_allocator-test.cc\nsimilarity index 88%\nrename from cpp/src/arrow/allocator-test.cc\nrename to cpp/src/arrow/util/stl_allocator-test.cc\nindex bdae9b9511..54f26a3936 100644\n--- a/cpp/src/arrow/allocator-test.cc\n+++ b/cpp/src/arrow/util/stl_allocator-test.cc\n@@ -21,8 +21,8 @@\n \n #include <gtest/gtest.h>\n \n-#include \"arrow/allocator.h\"\n #include \"arrow/memory_pool.h\"\n+#include \"arrow/util/stl_allocator.h\"\n \n namespace arrow {\n \n@@ -61,14 +61,16 @@ TEST(stl_allocator, FreeLargeMemory) {\n TEST(stl_allocator, MaxMemory) {\n   auto pool = default_memory_pool();\n \n+  const int64_t prior_max_memory = pool->max_memory();\n+\n   stl_allocator<uint8_t> alloc(pool);\n-  uint8_t* data = alloc.allocate(1000);\n+  uint8_t* data = alloc.allocate(prior_max_memory + 1000);\n   uint8_t* data2 = alloc.allocate(1000);\n \n-  alloc.deallocate(data, 1000);\n+  alloc.deallocate(data, prior_max_memory + 1000);\n   alloc.deallocate(data2, 1000);\n \n-  ASSERT_EQ(2000, pool->max_memory());\n+  ASSERT_EQ(prior_max_memory + 2000, pool->max_memory());\n }\n \n #endif  // ARROW_VALGRIND\ndiff --git a/cpp/src/arrow/allocator.h b/cpp/src/arrow/util/stl_allocator.h\nsimilarity index 100%\nrename from cpp/src/arrow/allocator.h\nrename to cpp/src/arrow/util/stl_allocator.h\ndiff --git a/cpp/src/arrow/util/task-group-test.cc b/cpp/src/arrow/util/task-group-test.cc\nindex 3bca0047eb..47f8ce5ca8 100644\n--- a/cpp/src/arrow/util/task-group-test.cc\n+++ b/cpp/src/arrow/util/task-group-test.cc\n@@ -27,9 +27,9 @@\n #include <vector>\n \n #include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/util/macros.h\"\n #include \"arrow/util/task-group.h\"\n+#include \"arrow/util/testing.h\"\n #include \"arrow/util/thread-pool.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/arrow/util/testing.cc b/cpp/src/arrow/util/testing.cc\nnew file mode 100644\nindex 0000000000..b770391fc4\n--- /dev/null\n+++ b/cpp/src/arrow/util/testing.cc\n@@ -0,0 +1,310 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/testing.h\"\n+\n+#ifndef _WIN32\n+#include <sys/stat.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include <algorithm>\n+#include <chrono>\n+#include <cstdint>\n+#include <cstdlib>\n+#include <iostream>\n+#include <limits>\n+#include <memory>\n+#include <random>\n+#include <sstream>\n+#include <string>\n+#include <thread>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/pretty_print.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/decimal.h\"\n+#include \"arrow/util/logging.h\"\n+\n+void sleep_for(double seconds) {\n+  std::this_thread::sleep_for(\n+      std::chrono::nanoseconds(static_cast<int64_t>(seconds * 1e9)));\n+}\n+\n+namespace arrow {\n+\n+using ArrayVector = std::vector<std::shared_ptr<Array>>;\n+\n+void random_null_bytes(int64_t n, double pct_null, uint8_t* null_bytes) {\n+  const int random_seed = 0;\n+  std::mt19937 gen(random_seed);\n+  std::uniform_real_distribution<double> d(0.0, 1.0);\n+  std::generate(null_bytes, null_bytes + n,\n+                [&d, &gen, &pct_null] { return d(gen) > pct_null; });\n+}\n+\n+void random_is_valid(int64_t n, double pct_null, std::vector<bool>* is_valid) {\n+  const int random_seed = 0;\n+  std::mt19937 gen(random_seed);\n+  std::uniform_real_distribution<double> d(0.0, 1.0);\n+  is_valid->resize(n, false);\n+  std::generate(is_valid->begin(), is_valid->end(),\n+                [&d, &gen, &pct_null] { return d(gen) > pct_null; });\n+}\n+\n+void random_bytes(int64_t n, uint32_t seed, uint8_t* out) {\n+  std::mt19937 gen(seed);\n+  std::uniform_int_distribution<uint32_t> d(0, std::numeric_limits<uint8_t>::max());\n+  std::generate(out, out + n, [&d, &gen] { return static_cast<uint8_t>(d(gen)); });\n+}\n+\n+int32_t DecimalSize(int32_t precision) {\n+  DCHECK_GE(precision, 1) << \"decimal precision must be greater than or equal to 1, got \"\n+                          << precision;\n+  DCHECK_LE(precision, 38) << \"decimal precision must be less than or equal to 38, got \"\n+                           << precision;\n+\n+  switch (precision) {\n+    case 1:\n+    case 2:\n+      return 1;  // 127\n+    case 3:\n+    case 4:\n+      return 2;  // 32,767\n+    case 5:\n+    case 6:\n+      return 3;  // 8,388,607\n+    case 7:\n+    case 8:\n+    case 9:\n+      return 4;  // 2,147,483,427\n+    case 10:\n+    case 11:\n+      return 5;  // 549,755,813,887\n+    case 12:\n+    case 13:\n+    case 14:\n+      return 6;  // 140,737,488,355,327\n+    case 15:\n+    case 16:\n+      return 7;  // 36,028,797,018,963,967\n+    case 17:\n+    case 18:\n+      return 8;  // 9,223,372,036,854,775,807\n+    case 19:\n+    case 20:\n+    case 21:\n+      return 9;  // 2,361,183,241,434,822,606,847\n+    case 22:\n+    case 23:\n+      return 10;  // 604,462,909,807,314,587,353,087\n+    case 24:\n+    case 25:\n+    case 26:\n+      return 11;  // 154,742,504,910,672,534,362,390,527\n+    case 27:\n+    case 28:\n+      return 12;  // 39,614,081,257,132,168,796,771,975,167\n+    case 29:\n+    case 30:\n+    case 31:\n+      return 13;  // 10,141,204,801,825,835,211,973,625,643,007\n+    case 32:\n+    case 33:\n+      return 14;  // 2,596,148,429,267,413,814,265,248,164,610,047\n+    case 34:\n+    case 35:\n+      return 15;  // 664,613,997,892,457,936,451,903,530,140,172,287\n+    case 36:\n+    case 37:\n+    case 38:\n+      return 16;  // 170,141,183,460,469,231,731,687,303,715,884,105,727\n+    default:\n+      DCHECK(false);\n+      break;\n+  }\n+  return -1;\n+}\n+\n+void random_decimals(int64_t n, uint32_t seed, int32_t precision, uint8_t* out) {\n+  std::mt19937 gen(seed);\n+  std::uniform_int_distribution<uint32_t> d(0, std::numeric_limits<uint8_t>::max());\n+  const int32_t required_bytes = DecimalSize(precision);\n+  constexpr int32_t byte_width = 16;\n+  std::fill(out, out + byte_width * n, '\\0');\n+\n+  for (int64_t i = 0; i < n; ++i, out += byte_width) {\n+    std::generate(out, out + required_bytes,\n+                  [&d, &gen] { return static_cast<uint8_t>(d(gen)); });\n+\n+    // sign extend if the sign bit is set for the last byte generated\n+    // 0b10000000 == 0x80 == 128\n+    if ((out[required_bytes - 1] & '\\x80') != 0) {\n+      std::fill(out + required_bytes, out + byte_width, '\\xFF');\n+    }\n+  }\n+}\n+\n+void random_ascii(int64_t n, uint32_t seed, uint8_t* out) {\n+  rand_uniform_int(n, seed, static_cast<int32_t>('A'), static_cast<int32_t>('z'), out);\n+}\n+\n+int64_t CountNulls(const std::vector<uint8_t>& valid_bytes) {\n+  return static_cast<int64_t>(std::count(valid_bytes.cbegin(), valid_bytes.cend(), '\\0'));\n+}\n+\n+Status MakeRandomByteBuffer(int64_t length, MemoryPool* pool,\n+                            std::shared_ptr<ResizableBuffer>* out, uint32_t seed) {\n+  std::shared_ptr<ResizableBuffer> result;\n+  RETURN_NOT_OK(AllocateResizableBuffer(pool, length, &result));\n+  random_bytes(length, seed, result->mutable_data());\n+  *out = result;\n+  return Status::OK();\n+}\n+\n+void AssertArraysEqual(const Array& expected, const Array& actual) {\n+  ASSERT_ARRAYS_EQUAL(expected, actual);\n+}\n+\n+void AssertChunkedEqual(const ChunkedArray& expected, const ChunkedArray& actual) {\n+  ASSERT_EQ(expected.num_chunks(), actual.num_chunks()) << \"# chunks unequal\";\n+  if (!actual.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    for (int i = 0; i < actual.num_chunks(); ++i) {\n+      auto c1 = actual.chunk(i);\n+      auto c2 = expected.chunk(i);\n+      if (!c1->Equals(*c2)) {\n+        EXPECT_OK(::arrow::PrettyPrint(*c1, 0, &pp_result));\n+        EXPECT_OK(::arrow::PrettyPrint(*c2, 0, &pp_expected));\n+        FAIL() << \"Chunk \" << i << \" Got: \" << pp_result.str()\n+               << \"\\nExpected: \" << pp_expected.str();\n+      }\n+    }\n+  }\n+}\n+\n+void AssertChunkedEqual(const ChunkedArray& actual, const ArrayVector& expected) {\n+  AssertChunkedEqual(ChunkedArray(expected, actual.type()), actual);\n+}\n+\n+void AssertBufferEqual(const Buffer& buffer, const std::vector<uint8_t>& expected) {\n+  ASSERT_EQ(buffer.size(), expected.size()) << \"Mismatching buffer size\";\n+  const uint8_t* buffer_data = buffer.data();\n+  for (size_t i = 0; i < expected.size(); ++i) {\n+    ASSERT_EQ(buffer_data[i], expected[i]);\n+  }\n+}\n+\n+void AssertBufferEqual(const Buffer& buffer, const std::string& expected) {\n+  ASSERT_EQ(buffer.size(), expected.length()) << \"Mismatching buffer size\";\n+  const uint8_t* buffer_data = buffer.data();\n+  for (size_t i = 0; i < expected.size(); ++i) {\n+    ASSERT_EQ(buffer_data[i], expected[i]);\n+  }\n+}\n+\n+void AssertBufferEqual(const Buffer& buffer, const Buffer& expected) {\n+  ASSERT_EQ(buffer.size(), expected.size()) << \"Mismatching buffer size\";\n+  ASSERT_TRUE(buffer.Equals(expected));\n+}\n+\n+void AssertSchemaEqual(const Schema& lhs, const Schema& rhs) {\n+  if (!lhs.Equals(rhs)) {\n+    std::stringstream ss;\n+    ss << \"left schema: \" << lhs.ToString() << std::endl\n+       << \"right schema: \" << rhs.ToString() << std::endl;\n+    FAIL() << ss.str();\n+  }\n+}\n+\n+void PrintColumn(const Column& col, std::stringstream* ss) {\n+  const ChunkedArray& carr = *col.data();\n+  for (int i = 0; i < carr.num_chunks(); ++i) {\n+    auto c1 = carr.chunk(i);\n+    *ss << \"Chunk \" << i << std::endl;\n+    EXPECT_OK(::arrow::PrettyPrint(*c1, 0, ss));\n+    *ss << std::endl;\n+  }\n+}\n+\n+void AssertTablesEqual(const Table& expected, const Table& actual,\n+                       bool same_chunk_layout) {\n+  ASSERT_EQ(expected.num_columns(), actual.num_columns());\n+\n+  if (same_chunk_layout) {\n+    for (int i = 0; i < actual.num_columns(); ++i) {\n+      AssertChunkedEqual(*expected.column(i)->data(), *actual.column(i)->data());\n+    }\n+  } else {\n+    std::stringstream ss;\n+    if (!actual.Equals(expected)) {\n+      for (int i = 0; i < expected.num_columns(); ++i) {\n+        ss << \"Actual column \" << i << std::endl;\n+        PrintColumn(*actual.column(i), &ss);\n+\n+        ss << \"Expected column \" << i << std::endl;\n+        PrintColumn(*expected.column(i), &ss);\n+      }\n+      FAIL() << ss.str();\n+    }\n+  }\n+}\n+\n+void CompareBatch(const RecordBatch& left, const RecordBatch& right) {\n+  if (!left.schema()->Equals(*right.schema())) {\n+    FAIL() << \"Left schema: \" << left.schema()->ToString()\n+           << \"\\nRight schema: \" << right.schema()->ToString();\n+  }\n+  ASSERT_EQ(left.num_columns(), right.num_columns())\n+      << left.schema()->ToString() << \" result: \" << right.schema()->ToString();\n+  ASSERT_EQ(left.num_rows(), right.num_rows());\n+  for (int i = 0; i < left.num_columns(); ++i) {\n+    if (!left.column(i)->Equals(right.column(i))) {\n+      std::stringstream ss;\n+      ss << \"Idx: \" << i << \" Name: \" << left.column_name(i);\n+      ss << std::endl << \"Left: \";\n+      ASSERT_OK(PrettyPrint(*left.column(i), 0, &ss));\n+      ss << std::endl << \"Right: \";\n+      ASSERT_OK(PrettyPrint(*right.column(i), 0, &ss));\n+      FAIL() << ss.str();\n+    }\n+  }\n+}\n+\n+Status BatchIterator::ReadNext(std::shared_ptr<RecordBatch>* out) {\n+  if (position_ >= batches_.size()) {\n+    *out = nullptr;\n+  } else {\n+    *out = batches_[position_++];\n+  }\n+  return Status::OK();\n+}\n+\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/test-util.h b/cpp/src/arrow/util/testing.h\nsimilarity index 56%\nrename from cpp/src/arrow/test-util.h\nrename to cpp/src/arrow/util/testing.h\nindex c4ce57d2c0..afdd328e67 100644\n--- a/cpp/src/arrow/test-util.h\n+++ b/cpp/src/arrow/util/testing.h\n@@ -15,8 +15,7 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#ifndef ARROW_TEST_UTIL_H_\n-#define ARROW_TEST_UTIL_H_\n+#pragma once\n \n #ifndef _WIN32\n #include <sys/stat.h>\n@@ -52,10 +51,7 @@\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/logging.h\"\n \n-static inline void sleep_for(double seconds) {\n-  std::this_thread::sleep_for(\n-      std::chrono::nanoseconds(static_cast<int64_t>(seconds * 1e9)));\n-}\n+void sleep_for(double seconds);\n \n #define STRINGIFY(x) #x\n \n@@ -165,117 +161,11 @@ static inline Status GetBitmapFromVector(const std::vector<T>& is_valid,\n \n // Sets approximately pct_null of the first n bytes in null_bytes to zero\n // and the rest to non-zero (true) values.\n-static inline void random_null_bytes(int64_t n, double pct_null, uint8_t* null_bytes) {\n-  const int random_seed = 0;\n-  std::mt19937 gen(random_seed);\n-  std::uniform_real_distribution<double> d(0.0, 1.0);\n-  std::generate(null_bytes, null_bytes + n,\n-                [&d, &gen, &pct_null] { return d(gen) > pct_null; });\n-}\n-\n-static inline void random_is_valid(int64_t n, double pct_null,\n-                                   std::vector<bool>* is_valid) {\n-  const int random_seed = 0;\n-  std::mt19937 gen(random_seed);\n-  std::uniform_real_distribution<double> d(0.0, 1.0);\n-  is_valid->resize(n, false);\n-  std::generate(is_valid->begin(), is_valid->end(),\n-                [&d, &gen, &pct_null] { return d(gen) > pct_null; });\n-}\n-\n-static inline void random_bytes(int64_t n, uint32_t seed, uint8_t* out) {\n-  std::mt19937 gen(seed);\n-  std::uniform_int_distribution<uint32_t> d(0, std::numeric_limits<uint8_t>::max());\n-  std::generate(out, out + n, [&d, &gen] { return static_cast<uint8_t>(d(gen)); });\n-}\n-\n-static int32_t DecimalSize(int32_t precision) {\n-  DCHECK_GE(precision, 1) << \"decimal precision must be greater than or equal to 1, got \"\n-                          << precision;\n-  DCHECK_LE(precision, 38) << \"decimal precision must be less than or equal to 38, got \"\n-                           << precision;\n-\n-  switch (precision) {\n-    case 1:\n-    case 2:\n-      return 1;  // 127\n-    case 3:\n-    case 4:\n-      return 2;  // 32,767\n-    case 5:\n-    case 6:\n-      return 3;  // 8,388,607\n-    case 7:\n-    case 8:\n-    case 9:\n-      return 4;  // 2,147,483,427\n-    case 10:\n-    case 11:\n-      return 5;  // 549,755,813,887\n-    case 12:\n-    case 13:\n-    case 14:\n-      return 6;  // 140,737,488,355,327\n-    case 15:\n-    case 16:\n-      return 7;  // 36,028,797,018,963,967\n-    case 17:\n-    case 18:\n-      return 8;  // 9,223,372,036,854,775,807\n-    case 19:\n-    case 20:\n-    case 21:\n-      return 9;  // 2,361,183,241,434,822,606,847\n-    case 22:\n-    case 23:\n-      return 10;  // 604,462,909,807,314,587,353,087\n-    case 24:\n-    case 25:\n-    case 26:\n-      return 11;  // 154,742,504,910,672,534,362,390,527\n-    case 27:\n-    case 28:\n-      return 12;  // 39,614,081,257,132,168,796,771,975,167\n-    case 29:\n-    case 30:\n-    case 31:\n-      return 13;  // 10,141,204,801,825,835,211,973,625,643,007\n-    case 32:\n-    case 33:\n-      return 14;  // 2,596,148,429,267,413,814,265,248,164,610,047\n-    case 34:\n-    case 35:\n-      return 15;  // 664,613,997,892,457,936,451,903,530,140,172,287\n-    case 36:\n-    case 37:\n-    case 38:\n-      return 16;  // 170,141,183,460,469,231,731,687,303,715,884,105,727\n-    default:\n-      DCHECK(false);\n-      break;\n-  }\n-  return -1;\n-}\n-\n-static inline void random_decimals(int64_t n, uint32_t seed, int32_t precision,\n-                                   uint8_t* out) {\n-  std::mt19937 gen(seed);\n-  std::uniform_int_distribution<uint32_t> d(0, std::numeric_limits<uint8_t>::max());\n-  const int32_t required_bytes = DecimalSize(precision);\n-  constexpr int32_t byte_width = 16;\n-  std::fill(out, out + byte_width * n, '\\0');\n-\n-  for (int64_t i = 0; i < n; ++i, out += byte_width) {\n-    std::generate(out, out + required_bytes,\n-                  [&d, &gen] { return static_cast<uint8_t>(d(gen)); });\n-\n-    // sign extend if the sign bit is set for the last byte generated\n-    // 0b10000000 == 0x80 == 128\n-    if ((out[required_bytes - 1] & '\\x80') != 0) {\n-      std::fill(out + required_bytes, out + byte_width, '\\xFF');\n-    }\n-  }\n-}\n+void random_null_bytes(int64_t n, double pct_null, uint8_t* null_bytes);\n+void random_is_valid(int64_t n, double pct_null, std::vector<bool>* is_valid);\n+void random_bytes(int64_t n, uint32_t seed, uint8_t* out);\n+int32_t DecimalSize(int32_t precision);\n+void random_decimals(int64_t n, uint32_t seed, int32_t precision, uint8_t* out);\n \n template <typename T, typename U>\n void rand_uniform_int(int64_t n, uint32_t seed, T min_value, T max_value, U* out) {\n@@ -296,13 +186,8 @@ struct GenerateRandom<T, typename std::enable_if<std::is_integral<T>::value>::ty\n   }\n };\n \n-static inline void random_ascii(int64_t n, uint32_t seed, uint8_t* out) {\n-  rand_uniform_int(n, seed, static_cast<int32_t>('A'), static_cast<int32_t>('z'), out);\n-}\n-\n-static inline int64_t CountNulls(const std::vector<uint8_t>& valid_bytes) {\n-  return static_cast<int64_t>(std::count(valid_bytes.cbegin(), valid_bytes.cend(), '\\0'));\n-}\n+void random_ascii(int64_t n, uint32_t seed, uint8_t* out);\n+int64_t CountNulls(const std::vector<uint8_t>& valid_bytes);\n \n template <typename T>\n Status MakeRandomBuffer(int64_t length, MemoryPool* pool,\n@@ -316,108 +201,24 @@ Status MakeRandomBuffer(int64_t length, MemoryPool* pool,\n }\n \n Status MakeRandomByteBuffer(int64_t length, MemoryPool* pool,\n-                            std::shared_ptr<ResizableBuffer>* out, uint32_t seed = 0) {\n-  std::shared_ptr<ResizableBuffer> result;\n-  RETURN_NOT_OK(AllocateResizableBuffer(pool, length, &result));\n-  random_bytes(length, seed, result->mutable_data());\n-  *out = result;\n-  return Status::OK();\n-}\n-\n-void AssertArraysEqual(const Array& expected, const Array& actual) {\n-  ASSERT_ARRAYS_EQUAL(expected, actual);\n-}\n-\n-void AssertChunkedEqual(const ChunkedArray& expected, const ChunkedArray& actual) {\n-  ASSERT_EQ(expected.num_chunks(), actual.num_chunks()) << \"# chunks unequal\";\n-  if (!actual.Equals(expected)) {\n-    std::stringstream pp_result;\n-    std::stringstream pp_expected;\n-\n-    for (int i = 0; i < actual.num_chunks(); ++i) {\n-      auto c1 = actual.chunk(i);\n-      auto c2 = expected.chunk(i);\n-      if (!c1->Equals(*c2)) {\n-        EXPECT_OK(::arrow::PrettyPrint(*c1, 0, &pp_result));\n-        EXPECT_OK(::arrow::PrettyPrint(*c2, 0, &pp_expected));\n-        FAIL() << \"Chunk \" << i << \" Got: \" << pp_result.str()\n-               << \"\\nExpected: \" << pp_expected.str();\n-      }\n-    }\n-  }\n-}\n-\n-void AssertChunkedEqual(const ChunkedArray& actual, const ArrayVector& expected) {\n-  AssertChunkedEqual(ChunkedArray(expected, actual.type()), actual);\n-}\n-\n-void AssertBufferEqual(const Buffer& buffer, const std::vector<uint8_t>& expected) {\n-  ASSERT_EQ(buffer.size(), expected.size()) << \"Mismatching buffer size\";\n-  const uint8_t* buffer_data = buffer.data();\n-  for (size_t i = 0; i < expected.size(); ++i) {\n-    ASSERT_EQ(buffer_data[i], expected[i]);\n-  }\n-}\n-\n-void AssertBufferEqual(const Buffer& buffer, const std::string& expected) {\n-  ASSERT_EQ(buffer.size(), expected.length()) << \"Mismatching buffer size\";\n-  const uint8_t* buffer_data = buffer.data();\n-  for (size_t i = 0; i < expected.size(); ++i) {\n-    ASSERT_EQ(buffer_data[i], expected[i]);\n-  }\n-}\n-\n-void AssertBufferEqual(const Buffer& buffer, const Buffer& expected) {\n-  ASSERT_EQ(buffer.size(), expected.size()) << \"Mismatching buffer size\";\n-  ASSERT_TRUE(buffer.Equals(expected));\n-}\n-\n-static inline void AssertSchemaEqual(const Schema& lhs, const Schema& rhs) {\n-  if (!lhs.Equals(rhs)) {\n-    std::stringstream ss;\n-    ss << \"left schema: \" << lhs.ToString() << std::endl\n-       << \"right schema: \" << rhs.ToString() << std::endl;\n-    FAIL() << ss.str();\n-  }\n-}\n-\n-void PrintColumn(const Column& col, std::stringstream* ss) {\n-  const ChunkedArray& carr = *col.data();\n-  for (int i = 0; i < carr.num_chunks(); ++i) {\n-    auto c1 = carr.chunk(i);\n-    *ss << \"Chunk \" << i << std::endl;\n-    EXPECT_OK(::arrow::PrettyPrint(*c1, 0, ss));\n-    *ss << std::endl;\n-  }\n-}\n+                            std::shared_ptr<ResizableBuffer>* out, uint32_t seed = 0);\n+void AssertArraysEqual(const Array& expected, const Array& actual);\n+void AssertChunkedEqual(const ChunkedArray& expected, const ChunkedArray& actual);\n+void AssertChunkedEqual(const ChunkedArray& actual, const ArrayVector& expected);\n+void AssertBufferEqual(const Buffer& buffer, const std::vector<uint8_t>& expected);\n+void AssertBufferEqual(const Buffer& buffer, const std::string& expected);\n+void AssertBufferEqual(const Buffer& buffer, const Buffer& expected);\n+void AssertSchemaEqual(const Schema& lhs, const Schema& rhs);\n+void PrintColumn(const Column& col, std::stringstream* ss);\n \n void AssertTablesEqual(const Table& expected, const Table& actual,\n-                       bool same_chunk_layout = true) {\n-  ASSERT_EQ(expected.num_columns(), actual.num_columns());\n-\n-  if (same_chunk_layout) {\n-    for (int i = 0; i < actual.num_columns(); ++i) {\n-      AssertChunkedEqual(*expected.column(i)->data(), *actual.column(i)->data());\n-    }\n-  } else {\n-    std::stringstream ss;\n-    if (!actual.Equals(expected)) {\n-      for (int i = 0; i < expected.num_columns(); ++i) {\n-        ss << \"Actual column \" << i << std::endl;\n-        PrintColumn(*actual.column(i), &ss);\n-\n-        ss << \"Expected column \" << i << std::endl;\n-        PrintColumn(*expected.column(i), &ss);\n-      }\n-      FAIL() << ss.str();\n-    }\n-  }\n-}\n+                       bool same_chunk_layout = true);\n \n template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n-void ArrayFromVector(const std::shared_ptr<DataType>& type,\n-                     const std::vector<bool>& is_valid, const std::vector<C_TYPE>& values,\n-                     std::shared_ptr<Array>* out) {\n+inline void ArrayFromVector(const std::shared_ptr<DataType>& type,\n+                            const std::vector<bool>& is_valid,\n+                            const std::vector<C_TYPE>& values,\n+                            std::shared_ptr<Array>* out) {\n   DCHECK_EQ(TYPE::type_id, type->id())\n       << \"template parameter and concrete DataType instance don't agree\";\n \n@@ -437,8 +238,9 @@ void ArrayFromVector(const std::shared_ptr<DataType>& type,\n }\n \n template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n-void ArrayFromVector(const std::shared_ptr<DataType>& type,\n-                     const std::vector<C_TYPE>& values, std::shared_ptr<Array>* out) {\n+inline void ArrayFromVector(const std::shared_ptr<DataType>& type,\n+                            const std::vector<C_TYPE>& values,\n+                            std::shared_ptr<Array>* out) {\n   DCHECK_EQ(TYPE::type_id, type->id())\n       << \"template parameter and concrete DataType instance don't agree\";\n \n@@ -454,8 +256,9 @@ void ArrayFromVector(const std::shared_ptr<DataType>& type,\n }\n \n template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n-void ArrayFromVector(const std::vector<bool>& is_valid, const std::vector<C_TYPE>& values,\n-                     std::shared_ptr<Array>* out) {\n+inline void ArrayFromVector(const std::vector<bool>& is_valid,\n+                            const std::vector<C_TYPE>& values,\n+                            std::shared_ptr<Array>* out) {\n   typename TypeTraits<TYPE>::BuilderType builder;\n   DCHECK_EQ(is_valid.size(), values.size());\n   for (size_t i = 0; i < values.size(); ++i) {\n@@ -469,7 +272,8 @@ void ArrayFromVector(const std::vector<bool>& is_valid, const std::vector<C_TYPE\n }\n \n template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n-void ArrayFromVector(const std::vector<C_TYPE>& values, std::shared_ptr<Array>* out) {\n+inline void ArrayFromVector(const std::vector<C_TYPE>& values,\n+                            std::shared_ptr<Array>* out) {\n   typename TypeTraits<TYPE>::BuilderType builder;\n   for (auto& value : values) {\n     ASSERT_OK(builder.Append(value));\n@@ -478,9 +282,9 @@ void ArrayFromVector(const std::vector<C_TYPE>& values, std::shared_ptr<Array>*\n }\n \n template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n-void ChunkedArrayFromVector(const std::vector<std::vector<bool>>& is_valid,\n-                            const std::vector<std::vector<C_TYPE>>& values,\n-                            std::shared_ptr<ChunkedArray>* out) {\n+inline void ChunkedArrayFromVector(const std::vector<std::vector<bool>>& is_valid,\n+                                   const std::vector<std::vector<C_TYPE>>& values,\n+                                   std::shared_ptr<ChunkedArray>* out) {\n   ArrayVector chunks;\n   DCHECK_EQ(is_valid.size(), values.size());\n   for (size_t i = 0; i < values.size(); ++i) {\n@@ -492,8 +296,8 @@ void ChunkedArrayFromVector(const std::vector<std::vector<bool>>& is_valid,\n }\n \n template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n-void ChunkedArrayFromVector(const std::vector<std::vector<C_TYPE>>& values,\n-                            std::shared_ptr<ChunkedArray>* out) {\n+inline void ChunkedArrayFromVector(const std::vector<std::vector<C_TYPE>>& values,\n+                                   std::shared_ptr<ChunkedArray>* out) {\n   ArrayVector chunks;\n   for (size_t i = 0; i < values.size(); ++i) {\n     std::shared_ptr<Array> array;\n@@ -504,8 +308,9 @@ void ChunkedArrayFromVector(const std::vector<std::vector<C_TYPE>>& values,\n }\n \n template <class T, class Builder>\n-Status MakeArray(const std::vector<uint8_t>& valid_bytes, const std::vector<T>& values,\n-                 int64_t size, Builder* builder, std::shared_ptr<Array>* out) {\n+inline Status MakeArray(const std::vector<uint8_t>& valid_bytes,\n+                        const std::vector<T>& values, int64_t size, Builder* builder,\n+                        std::shared_ptr<Array>* out) {\n   // Append the first 1000\n   for (int64_t i = 0; i < size; ++i) {\n     if (valid_bytes[i] > 0) {\n@@ -534,26 +339,7 @@ Status MakeArray(const std::vector<uint8_t>& valid_bytes, const std::vector<T>&\n     }                                        \\\n   } while (false)\n \n-static inline void CompareBatch(const RecordBatch& left, const RecordBatch& right) {\n-  if (!left.schema()->Equals(*right.schema())) {\n-    FAIL() << \"Left schema: \" << left.schema()->ToString()\n-           << \"\\nRight schema: \" << right.schema()->ToString();\n-  }\n-  ASSERT_EQ(left.num_columns(), right.num_columns())\n-      << left.schema()->ToString() << \" result: \" << right.schema()->ToString();\n-  ASSERT_EQ(left.num_rows(), right.num_rows());\n-  for (int i = 0; i < left.num_columns(); ++i) {\n-    if (!left.column(i)->Equals(right.column(i))) {\n-      std::stringstream ss;\n-      ss << \"Idx: \" << i << \" Name: \" << left.column_name(i);\n-      ss << std::endl << \"Left: \";\n-      ASSERT_OK(PrettyPrint(*left.column(i), 0, &ss));\n-      ss << std::endl << \"Right: \";\n-      ASSERT_OK(PrettyPrint(*right.column(i), 0, &ss));\n-      FAIL() << ss.str();\n-    }\n-  }\n-}\n+void CompareBatch(const RecordBatch& left, const RecordBatch& right);\n \n // ----------------------------------------------------------------------\n // A RecordBatchReader for serving a sequence of in-memory record batches\n@@ -566,14 +352,7 @@ class BatchIterator : public RecordBatchReader {\n \n   std::shared_ptr<Schema> schema() const override { return schema_; }\n \n-  Status ReadNext(std::shared_ptr<RecordBatch>* out) override {\n-    if (position_ >= batches_.size()) {\n-      *out = nullptr;\n-    } else {\n-      *out = batches_[position_++];\n-    }\n-    return Status::OK();\n-  }\n+  Status ReadNext(std::shared_ptr<RecordBatch>* out) override;\n \n  private:\n   std::shared_ptr<Schema> schema_;\n@@ -582,5 +361,3 @@ class BatchIterator : public RecordBatchReader {\n };\n \n }  // namespace arrow\n-\n-#endif  // ARROW_TEST_UTIL_H_\ndiff --git a/cpp/src/arrow/util/thread-pool-test.cc b/cpp/src/arrow/util/thread-pool-test.cc\nindex 99d4de2f7d..009208ca43 100644\n--- a/cpp/src/arrow/util/thread-pool-test.cc\n+++ b/cpp/src/arrow/util/thread-pool-test.cc\n@@ -27,9 +27,9 @@\n #include <thread>\n #include <vector>\n \n-#include \"arrow/test-util.h\"\n #include \"arrow/util/io-util.h\"\n #include \"arrow/util/macros.h\"\n+#include \"arrow/util/testing.h\"\n #include \"arrow/util/thread-pool.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/gandiva/CMakeLists.txt b/cpp/src/gandiva/CMakeLists.txt\nindex a22c1cb2ec..91f851fb92 100644\n--- a/cpp/src/gandiva/CMakeLists.txt\n+++ b/cpp/src/gandiva/CMakeLists.txt\n@@ -71,7 +71,10 @@ set(SRC_FILES annotator.cc\n       ${SHARED_HELPER_FILES}\n       ${BC_FILE_PATH_CC})\n \n+# TODO(wesm): Replace this with ADD_ARROW_LIB which deals with objlib/no-objlib\n+# (not supported on Windows), dependencies, etc.\n add_library(gandiva_obj_lib OBJECT ${SRC_FILES})\n+add_dependencies(gandiva_obj_lib arrow_dependencies)\n \n # set PIC so that object library can be included in shared libs.\n set_target_properties(gandiva_obj_lib PROPERTIES POSITION_INDEPENDENT_CODE 1)\n@@ -104,6 +107,8 @@ add_library(gandiva_helpers SHARED\n   ${SHARED_HELPER_FILES}\n   function_holder_stubs.cc)\n \n+add_dependencies(gandiva_helpers arrow_dependencies)\n+\n target_compile_definitions(gandiva_helpers\n   PRIVATE -DGDV_HELPERS\n )\ndiff --git a/cpp/src/gandiva/tests/test_util.h b/cpp/src/gandiva/tests/test_util.h\nindex d24448727b..852bfc3880 100644\n--- a/cpp/src/gandiva/tests/test_util.h\n+++ b/cpp/src/gandiva/tests/test_util.h\n@@ -19,7 +19,7 @@\n #include <memory>\n #include <utility>\n #include <vector>\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n #include \"gandiva/arrow.h\"\n \n #ifndef GANDIVA_TEST_UTIL_H\n@@ -30,7 +30,7 @@ namespace gandiva {\n // Helper function to create an arrow-array of type ARROWTYPE\n // from primitive vectors of data & validity.\n //\n-// arrow/test-util.h has good utility classes for this purpose.\n+// arrow/util/testing.h has good utility classes for this purpose.\n // Using those\n template <typename TYPE, typename C_TYPE>\n static ArrayPtr MakeArrowArray(std::vector<C_TYPE> values, std::vector<bool> validity) {\ndiff --git a/cpp/src/parquet/CMakeLists.txt b/cpp/src/parquet/CMakeLists.txt\nindex 3d46674aca..4c5ec39992 100644\n--- a/cpp/src/parquet/CMakeLists.txt\n+++ b/cpp/src/parquet/CMakeLists.txt\n@@ -28,13 +28,14 @@ add_custom_target(parquet)\n function(ADD_PARQUET_TEST REL_TEST_NAME)\n   set(options NO_VALGRIND)\n   set(one_value_args)\n-  set(multi_value_args EXTRA_DEPENDENCIES LABELS)\n+  set(multi_value_args SOURCES EXTRA_DEPENDENCIES LABELS)\n   cmake_parse_arguments(ARG \"${options}\" \"${one_value_args}\" \"${multi_value_args}\" ${ARGN})\n   if(ARG_UNPARSED_ARGUMENTS)\n     message(SEND_ERROR \"Error: unrecognized arguments: ${ARG_UNPARSED_ARGUMENTS}\")\n   endif()\n \n   ADD_ARROW_TEST(${REL_TEST_NAME}\n+    SOURCES ${ARG_SOURCES}\n     STATIC_LINK_LIBS ${PARQUET_TEST_LINK_LIBS}\n     PREFIX \"parquet\"\n     LABELS \"unittest;parquet\")\n@@ -87,6 +88,7 @@ endif()\n \n set(PARQUET_TEST_LINK_LIBS\n   ${PARQUET_MIN_TEST_LIBS}\n+  arrow_testing_aux\n   ${PARQUET_ARROW_LINK_LIBS}\n   parquet_static\n   thriftstatic)\n@@ -254,19 +256,25 @@ install(FILES\n   DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig/\")\n \n ADD_PARQUET_TEST(bloom_filter-test)\n-ADD_PARQUET_TEST(column_reader-test)\n-ADD_PARQUET_TEST(column_scanner-test)\n-ADD_PARQUET_TEST(column_writer-test)\n-ADD_PARQUET_TEST(file-deserialize-test)\n-ADD_PARQUET_TEST(file-serialize-test)\n-ADD_PARQUET_TEST(properties-test)\n-ADD_PARQUET_TEST(statistics-test)\n-ADD_PARQUET_TEST(encoding-test)\n-ADD_PARQUET_TEST(metadata-test)\n-ADD_PARQUET_TEST(public-api-test)\n-ADD_PARQUET_TEST(types-test)\n-ADD_PARQUET_TEST(reader-test)\n-ADD_PARQUET_TEST(schema-test)\n+\n+ADD_PARQUET_TEST(column-test\n+  SOURCES column_reader-test.cc\n+  column_scanner-test.cc\n+  column_writer-test.cc)\n+ADD_PARQUET_TEST(internals-test\n+  SOURCES properties-test.cc\n+  statistics-test.cc\n+  encoding-test.cc\n+  metadata-test.cc\n+  public-api-test.cc\n+  types-test.cc\n+  schema-test.cc\n+  util/comparison-test.cc\n+  util/memory-test.cc)\n+ADD_PARQUET_TEST(file-test\n+  SOURCES file-deserialize-test.cc\n+  file-serialize-test.cc\n+  reader-test.cc)\n \n #############################################################\n # Benchmark linking\ndiff --git a/cpp/src/parquet/arrow/CMakeLists.txt b/cpp/src/parquet/arrow/CMakeLists.txt\nindex aa58a5d0d5..a0159e8097 100644\n--- a/cpp/src/parquet/arrow/CMakeLists.txt\n+++ b/cpp/src/parquet/arrow/CMakeLists.txt\n@@ -15,8 +15,9 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-ADD_PARQUET_TEST(arrow-schema-test)\n-ADD_PARQUET_TEST(arrow-reader-writer-test)\n+ADD_PARQUET_TEST(arrow-test\n+  SOURCES arrow-schema-test.cc\n+  arrow-reader-writer-test.cc)\n \n if(PARQUET_BUILD_BENCHMARKS)\n   ADD_ARROW_BENCHMARK(arrow-reader-writer-benchmark)\ndiff --git a/cpp/src/parquet/arrow/arrow-reader-writer-test.cc b/cpp/src/parquet/arrow/arrow-reader-writer-test.cc\nindex 0866727110..3e4fe543a3 100644\n--- a/cpp/src/parquet/arrow/arrow-reader-writer-test.cc\n+++ b/cpp/src/parquet/arrow/arrow-reader-writer-test.cc\n@@ -42,9 +42,9 @@\n #include \"parquet/util/test-common.h\"\n \n #include \"arrow/api.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/type_traits.h\"\n #include \"arrow/util/decimal.h\"\n+#include \"arrow/util/testing.h\"\n \n using arrow::Array;\n using arrow::ArrayVisitor;\ndiff --git a/cpp/src/parquet/arrow/arrow-schema-test.cc b/cpp/src/parquet/arrow/arrow-schema-test.cc\nindex cb2b8508e6..5a1a2934f5 100644\n--- a/cpp/src/parquet/arrow/arrow-schema-test.cc\n+++ b/cpp/src/parquet/arrow/arrow-schema-test.cc\n@@ -23,7 +23,7 @@\n #include \"parquet/arrow/schema.h\"\n \n #include \"arrow/api.h\"\n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n using arrow::ArrayFromVector;\n using arrow::Field;\ndiff --git a/cpp/src/parquet/arrow/test-util.h b/cpp/src/parquet/arrow/test-util.h\nindex d425cb0db7..2316723155 100644\n--- a/cpp/src/parquet/arrow/test-util.h\n+++ b/cpp/src/parquet/arrow/test-util.h\n@@ -22,9 +22,9 @@\n #include <vector>\n \n #include \"arrow/api.h\"\n-#include \"arrow/test-util.h\"\n #include \"arrow/type_traits.h\"\n #include \"arrow/util/decimal.h\"\n+#include \"arrow/util/testing.h\"\n \n #include \"parquet/arrow/record_reader.h\"\n \ndiff --git a/cpp/src/parquet/test-specialization.h b/cpp/src/parquet/test-specialization.h\nindex 3d88cfc9e3..ac68350c71 100644\n--- a/cpp/src/parquet/test-specialization.h\n+++ b/cpp/src/parquet/test-specialization.h\n@@ -122,10 +122,10 @@ class PrimitiveTypedTest : public ::testing::Test {\n };\n \n template <typename TestType>\n-void PrimitiveTypedTest<TestType>::SyncValuesOut() {}\n+inline void PrimitiveTypedTest<TestType>::SyncValuesOut() {}\n \n template <>\n-void PrimitiveTypedTest<BooleanType>::SyncValuesOut() {\n+inline void PrimitiveTypedTest<BooleanType>::SyncValuesOut() {\n   std::vector<uint8_t>::const_iterator source_iterator = bool_buffer_out_.begin();\n   std::vector<T>::iterator destination_iterator = values_out_.begin();\n   while (source_iterator != bool_buffer_out_.end()) {\n@@ -134,14 +134,14 @@ void PrimitiveTypedTest<BooleanType>::SyncValuesOut() {\n }\n \n template <typename TestType>\n-void PrimitiveTypedTest<TestType>::SetupValuesOut(int64_t num_values) {\n+inline void PrimitiveTypedTest<TestType>::SetupValuesOut(int64_t num_values) {\n   values_out_.clear();\n   values_out_.resize(num_values);\n   values_out_ptr_ = values_out_.data();\n }\n \n template <>\n-void PrimitiveTypedTest<BooleanType>::SetupValuesOut(int64_t num_values) {\n+inline void PrimitiveTypedTest<BooleanType>::SetupValuesOut(int64_t num_values) {\n   values_out_.clear();\n   values_out_.resize(num_values);\n \n@@ -154,7 +154,7 @@ void PrimitiveTypedTest<BooleanType>::SetupValuesOut(int64_t num_values) {\n }\n \n template <typename TestType>\n-void PrimitiveTypedTest<TestType>::GenerateData(int64_t num_values) {\n+inline void PrimitiveTypedTest<TestType>::GenerateData(int64_t num_values) {\n   def_levels_.resize(num_values);\n   values_.resize(num_values);\n \n@@ -165,7 +165,7 @@ void PrimitiveTypedTest<TestType>::GenerateData(int64_t num_values) {\n }\n \n template <>\n-void PrimitiveTypedTest<BooleanType>::GenerateData(int64_t num_values) {\n+inline void PrimitiveTypedTest<BooleanType>::GenerateData(int64_t num_values) {\n   def_levels_.resize(num_values);\n   values_.resize(num_values);\n \ndiff --git a/cpp/src/parquet/test-util.h b/cpp/src/parquet/test-util.h\nindex 3e74398b05..ef797a758e 100644\n--- a/cpp/src/parquet/test-util.h\n+++ b/cpp/src/parquet/test-util.h\n@@ -44,20 +44,20 @@ namespace parquet {\n \n static constexpr int FLBA_LENGTH = 12;\n \n-bool operator==(const FixedLenByteArray& a, const FixedLenByteArray& b) {\n+inline bool operator==(const FixedLenByteArray& a, const FixedLenByteArray& b) {\n   return 0 == memcmp(a.ptr, b.ptr, FLBA_LENGTH);\n }\n \n namespace test {\n \n template <typename T>\n-static void InitValues(int num_values, vector<T>& values, vector<uint8_t>& buffer) {\n+inline void InitValues(int num_values, vector<T>& values, vector<uint8_t>& buffer) {\n   random_numbers(num_values, 0, std::numeric_limits<T>::min(),\n                  std::numeric_limits<T>::max(), values.data());\n }\n \n template <typename T>\n-static void InitDictValues(int num_values, int num_dicts, vector<T>& values,\n+inline void InitDictValues(int num_values, int num_dicts, vector<T>& values,\n                            vector<uint8_t>& buffer) {\n   int repeat_factor = num_values / num_dicts;\n   InitValues<T>(num_dicts, values, buffer);\n@@ -189,9 +189,9 @@ class DataPageBuilder {\n };\n \n template <>\n-void DataPageBuilder<BooleanType>::AppendValues(const ColumnDescriptor* d,\n-                                                const vector<bool>& values,\n-                                                Encoding::type encoding) {\n+inline void DataPageBuilder<BooleanType>::AppendValues(const ColumnDescriptor* d,\n+                                                       const vector<bool>& values,\n+                                                       Encoding::type encoding) {\n   if (encoding != Encoding::PLAIN) {\n     ParquetException::NYI(\"only plain encoding currently implemented\");\n   }\n@@ -206,7 +206,7 @@ void DataPageBuilder<BooleanType>::AppendValues(const ColumnDescriptor* d,\n }\n \n template <typename Type>\n-static shared_ptr<DataPage> MakeDataPage(\n+inline shared_ptr<DataPage> MakeDataPage(\n     const ColumnDescriptor* d, const vector<typename Type::c_type>& values, int num_vals,\n     Encoding::type encoding, const uint8_t* indices, int indices_size,\n     const vector<int16_t>& def_levels, int16_t max_def_level,\n@@ -278,25 +278,26 @@ class DictionaryPageBuilder {\n };\n \n template <>\n-DictionaryPageBuilder<BooleanType>::DictionaryPageBuilder(const ColumnDescriptor* d) {\n+inline DictionaryPageBuilder<BooleanType>::DictionaryPageBuilder(\n+    const ColumnDescriptor* d) {\n   ParquetException::NYI(\"only plain encoding currently implemented for boolean\");\n }\n \n template <>\n-shared_ptr<Buffer> DictionaryPageBuilder<BooleanType>::WriteDict() {\n+inline shared_ptr<Buffer> DictionaryPageBuilder<BooleanType>::WriteDict() {\n   ParquetException::NYI(\"only plain encoding currently implemented for boolean\");\n   return nullptr;\n }\n \n template <>\n-shared_ptr<Buffer> DictionaryPageBuilder<BooleanType>::AppendValues(\n+inline shared_ptr<Buffer> DictionaryPageBuilder<BooleanType>::AppendValues(\n     const vector<TC>& values) {\n   ParquetException::NYI(\"only plain encoding currently implemented for boolean\");\n   return nullptr;\n }\n \n template <typename Type>\n-static shared_ptr<DictionaryPage> MakeDictPage(\n+inline shared_ptr<DictionaryPage> MakeDictPage(\n     const ColumnDescriptor* d, const vector<typename Type::c_type>& values,\n     const vector<int>& values_per_page, Encoding::type encoding,\n     vector<shared_ptr<Buffer>>& rle_indices) {\n@@ -319,7 +320,7 @@ static shared_ptr<DictionaryPage> MakeDictPage(\n \n // Given def/rep levels and values create multiple dict pages\n template <typename Type>\n-static void PaginateDict(const ColumnDescriptor* d,\n+inline void PaginateDict(const ColumnDescriptor* d,\n                          const vector<typename Type::c_type>& values,\n                          const vector<int16_t>& def_levels, int16_t max_def_level,\n                          const vector<int16_t>& rep_levels, int16_t max_rep_level,\n@@ -355,7 +356,7 @@ static void PaginateDict(const ColumnDescriptor* d,\n \n // Given def/rep levels and values create multiple plain pages\n template <typename Type>\n-static void PaginatePlain(const ColumnDescriptor* d,\n+inline void PaginatePlain(const ColumnDescriptor* d,\n                           const vector<typename Type::c_type>& values,\n                           const vector<int16_t>& def_levels, int16_t max_def_level,\n                           const vector<int16_t>& rep_levels, int16_t max_rep_level,\n@@ -389,7 +390,7 @@ static void PaginatePlain(const ColumnDescriptor* d,\n \n // Generates pages from randomly generated data\n template <typename Type>\n-static int MakePages(const ColumnDescriptor* d, int num_pages, int levels_per_page,\n+inline int MakePages(const ColumnDescriptor* d, int num_pages, int levels_per_page,\n                      vector<int16_t>& def_levels, vector<int16_t>& rep_levels,\n                      vector<typename Type::c_type>& values, vector<uint8_t>& buffer,\n                      vector<shared_ptr<Page>>& pages,\n@@ -441,7 +442,6 @@ static int MakePages(const ColumnDescriptor* d, int num_pages, int levels_per_pa\n }\n \n }  // namespace test\n-\n }  // namespace parquet\n \n #endif  // PARQUET_COLUMN_TEST_UTIL_H\ndiff --git a/cpp/src/parquet/util/CMakeLists.txt b/cpp/src/parquet/util/CMakeLists.txt\nindex 72d4ca28f9..0f86130ad7 100644\n--- a/cpp/src/parquet/util/CMakeLists.txt\n+++ b/cpp/src/parquet/util/CMakeLists.txt\n@@ -22,6 +22,3 @@ install(FILES\n   memory.h\n   visibility.h\n   DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/parquet/util\")\n-\n-ADD_PARQUET_TEST(comparison-test)\n-ADD_PARQUET_TEST(memory-test)\ndiff --git a/cpp/src/parquet/util/test-common.h b/cpp/src/parquet/util/test-common.h\nindex 4e95870025..8c1f19143b 100644\n--- a/cpp/src/parquet/util/test-common.h\n+++ b/cpp/src/parquet/util/test-common.h\n@@ -41,7 +41,7 @@ class ParquetTestException : public parquet::ParquetException {\n   using ParquetException::ParquetException;\n };\n \n-const char* get_data_dir() {\n+static inline const char* get_data_dir() {\n   const auto result = std::getenv(\"PARQUET_TEST_DATA\");\n   if (!result || !result[0]) {\n     throw ParquetTestException(\n@@ -52,7 +52,7 @@ const char* get_data_dir() {\n }\n \n template <typename T>\n-static inline void assert_vector_equal(const vector<T>& left, const vector<T>& right) {\n+inline void assert_vector_equal(const vector<T>& left, const vector<T>& right) {\n   ASSERT_EQ(left.size(), right.size());\n \n   for (size_t i = 0; i < left.size(); ++i) {\n@@ -61,7 +61,7 @@ static inline void assert_vector_equal(const vector<T>& left, const vector<T>& r\n }\n \n template <typename T>\n-static inline bool vector_equal(const vector<T>& left, const vector<T>& right) {\n+inline bool vector_equal(const vector<T>& left, const vector<T>& right) {\n   if (left.size() != right.size()) {\n     return false;\n   }\n@@ -78,7 +78,7 @@ static inline bool vector_equal(const vector<T>& left, const vector<T>& right) {\n }\n \n template <typename T>\n-static vector<T> slice(const vector<T>& values, int start, int end) {\n+inline vector<T> slice(const vector<T>& values, int start, int end) {\n   if (end < start) {\n     return vector<T>(0);\n   }\n@@ -114,7 +114,7 @@ static inline vector<bool> flip_coins(int n, double p) {\n   return draws;\n }\n \n-void random_bytes(int n, uint32_t seed, std::vector<uint8_t>* out) {\n+static inline void random_bytes(int n, uint32_t seed, std::vector<uint8_t>* out) {\n   std::mt19937 gen(seed);\n   std::uniform_int_distribution<int> d(0, 255);\n \n@@ -123,7 +123,7 @@ void random_bytes(int n, uint32_t seed, std::vector<uint8_t>* out) {\n   }\n }\n \n-void random_bools(int n, double p, uint32_t seed, bool* out) {\n+static inline void random_bools(int n, double p, uint32_t seed, bool* out) {\n   std::mt19937 gen(seed);\n   std::bernoulli_distribution d(p);\n   for (int i = 0; i < n; ++i) {\n@@ -132,7 +132,7 @@ void random_bools(int n, double p, uint32_t seed, bool* out) {\n }\n \n template <typename T>\n-void random_numbers(int n, uint32_t seed, T min_value, T max_value, T* out) {\n+inline void random_numbers(int n, uint32_t seed, T min_value, T max_value, T* out) {\n   std::mt19937 gen(seed);\n   std::uniform_int_distribution<T> d(min_value, max_value);\n   for (int i = 0; i < n; ++i) {\n@@ -141,7 +141,8 @@ void random_numbers(int n, uint32_t seed, T min_value, T max_value, T* out) {\n }\n \n template <>\n-void random_numbers(int n, uint32_t seed, float min_value, float max_value, float* out) {\n+inline void random_numbers(int n, uint32_t seed, float min_value, float max_value,\n+                           float* out) {\n   std::mt19937 gen(seed);\n   std::uniform_real_distribution<float> d(min_value, max_value);\n   for (int i = 0; i < n; ++i) {\n@@ -150,8 +151,8 @@ void random_numbers(int n, uint32_t seed, float min_value, float max_value, floa\n }\n \n template <>\n-void random_numbers(int n, uint32_t seed, double min_value, double max_value,\n-                    double* out) {\n+inline void random_numbers(int n, uint32_t seed, double min_value, double max_value,\n+                           double* out) {\n   std::mt19937 gen(seed);\n   std::uniform_real_distribution<double> d(min_value, max_value);\n   for (int i = 0; i < n; ++i) {\n@@ -159,8 +160,8 @@ void random_numbers(int n, uint32_t seed, double min_value, double max_value,\n   }\n }\n \n-void random_Int96_numbers(int n, uint32_t seed, int32_t min_value, int32_t max_value,\n-                          Int96* out) {\n+static inline void random_Int96_numbers(int n, uint32_t seed, int32_t min_value,\n+                                        int32_t max_value, Int96* out) {\n   std::mt19937 gen(seed);\n   std::uniform_int_distribution<int32_t> d(min_value, max_value);\n   for (int i = 0; i < n; ++i) {\n@@ -170,7 +171,8 @@ void random_Int96_numbers(int n, uint32_t seed, int32_t min_value, int32_t max_v\n   }\n }\n \n-void random_fixed_byte_array(int n, uint32_t seed, uint8_t* buf, int len, FLBA* out) {\n+static inline void random_fixed_byte_array(int n, uint32_t seed, uint8_t* buf, int len,\n+                                           FLBA* out) {\n   std::mt19937 gen(seed);\n   std::uniform_int_distribution<int> d(0, 255);\n   for (int i = 0; i < n; ++i) {\n@@ -182,8 +184,8 @@ void random_fixed_byte_array(int n, uint32_t seed, uint8_t* buf, int len, FLBA*\n   }\n }\n \n-void random_byte_array(int n, uint32_t seed, uint8_t* buf, ByteArray* out, int min_size,\n-                       int max_size) {\n+static inline void random_byte_array(int n, uint32_t seed, uint8_t* buf, ByteArray* out,\n+                                     int min_size, int max_size) {\n   std::mt19937 gen(seed);\n   std::uniform_int_distribution<int> d1(min_size, max_size);\n   std::uniform_int_distribution<int> d2(0, 255);\n@@ -198,7 +200,8 @@ void random_byte_array(int n, uint32_t seed, uint8_t* buf, ByteArray* out, int m\n   }\n }\n \n-void random_byte_array(int n, uint32_t seed, uint8_t* buf, ByteArray* out, int max_size) {\n+static inline void random_byte_array(int n, uint32_t seed, uint8_t* buf, ByteArray* out,\n+                                     int max_size) {\n   random_byte_array(n, seed, buf, out, 0, max_size);\n }\n \ndiff --git a/cpp/src/plasma/CMakeLists.txt b/cpp/src/plasma/CMakeLists.txt\nindex 116d534769..0ddf401a60 100644\n--- a/cpp/src/plasma/CMakeLists.txt\n+++ b/cpp/src/plasma/CMakeLists.txt\n@@ -201,8 +201,8 @@ endif()\n # Unit tests\n #######################################\n \n-ADD_ARROW_TEST(test/serialization_tests\n-  EXTRA_LINK_LIBS plasma_static ${PLASMA_LINK_LIBS})\n-ADD_ARROW_TEST(test/client_tests\n+ADD_ARROW_TEST(plasma-test\n+  SOURCES test/serialization_tests.cc\n+  test/client_tests.cc\n   EXTRA_LINK_LIBS plasma_static ${PLASMA_LINK_LIBS}\n   EXTRA_DEPENDENCIES plasma_store_server)\ndiff --git a/cpp/src/plasma/test-util.h b/cpp/src/plasma/test-util.h\nindex 6bd501ba2b..c82998d624 100644\n--- a/cpp/src/plasma/test-util.h\n+++ b/cpp/src/plasma/test-util.h\n@@ -26,7 +26,7 @@\n \n namespace plasma {\n \n-ObjectID random_object_id() {\n+static inline ObjectID random_object_id() {\n   static uint32_t random_seed = 0;\n   std::mt19937 gen(random_seed++);\n   std::uniform_int_distribution<uint32_t> d(0, std::numeric_limits<uint8_t>::max());\ndiff --git a/cpp/src/plasma/test/client_tests.cc b/cpp/src/plasma/test/client_tests.cc\nindex 1ad60396af..4908f1a9b6 100644\n--- a/cpp/src/plasma/test/client_tests.cc\n+++ b/cpp/src/plasma/test/client_tests.cc\n@@ -28,7 +28,7 @@\n \n #include <gtest/gtest.h>\n \n-#include \"arrow/test-util.h\"\n+#include \"arrow/util/testing.h\"\n \n #include \"plasma/client.h\"\n #include \"plasma/common.h\"\ndiff --git a/cpp/thirdparty/versions.txt b/cpp/thirdparty/versions.txt\nindex 4e96fcc9e7..8fbfb388e8 100644\n--- a/cpp/thirdparty/versions.txt\n+++ b/cpp/thirdparty/versions.txt\n@@ -35,3 +35,4 @@ SNAPPY_VERSION=1.1.3\n THRIFT_VERSION=0.11.0\n ZLIB_VERSION=1.2.8\n ZSTD_VERSION=v1.2.0\n+RE2_VERSION=2018-10-01\ndiff --git a/dev/release/02-source.sh b/dev/release/02-source.sh\nindex f60ee15244..f74fd81115 100755\n--- a/dev/release/02-source.sh\n+++ b/dev/release/02-source.sh\n@@ -132,7 +132,7 @@ cp -rf \"$artifact_dir\"/* tmp/${tagrc}/binaries/\n \n # commit to svn\n svn add tmp/${tagrc}\n-svn ci -m 'Apache Arrow ${version} RC${rc}' tmp/${tagrc}\n+svn ci -m \"Apache Arrow ${version} RC${rc}\" tmp/${tagrc}\n \n # clean up\n rm -rf tmp\ndiff --git a/dev/release/verify-release-candidate.sh b/dev/release/verify-release-candidate.sh\nindex 51ba871aac..378dca3865 100755\n--- a/dev/release/verify-release-candidate.sh\n+++ b/dev/release/verify-release-candidate.sh\n@@ -211,6 +211,8 @@ test_glib() {\n     gem install bundler\n   fi\n \n+  # Workaround for 0.11.0. 0.11.0 doesn't include c_glib/Gemfile.\n+  wget https://raw.githubusercontent.com/apache/arrow/master/c_glib/Gemfile\n   bundle install --path vendor/bundle\n   bundle exec ruby test/run-test.rb\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-19T21:56:01.769+0000",
                    "updated": "2018-11-19T21:56:01.769+0000",
                    "started": "2018-11-19T21:56:01.768+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167522",
                    "issueId": "13185597"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@536db7ba[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f625611[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@162f9906[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1bf0970c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24977f3d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@529d75f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fa49955[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@70732b5a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f82ccfe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@245a7d7e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f7f2691[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@63ff9df[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Aug 27 14:41:50 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-29T15:43:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3254/watchers",
            "watchCount": 2,
            "isWatching": true
        },
        "created": "2018-09-17T18:09:36.000+0000",
        "updated": "2022-08-27T14:41:50.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently there is a 1-1 correspondence between a .cc file containing unit tests to a test executable. There's good reasons (like readability, code organization) to split up a large test suite among many files. But there are downsides:\r\n\r\n* Linking test executables is slow, especially on Windows\r\n* Test executables take up quite a bit of space (the debug/ directory on Linux after a full build is ~1GB)\r\n\r\nI suggest enabling ADD_ARROW_TEST to accept a list of files which will be build together into a single test. This will allow us to combine a number of our unit tests and save time and space",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add option to ADD_ARROW_TEST to compose a test executable from multiple .cc files containing unit tests",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/comment/16702090",
                    "id": "16702090",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I'm adding this as part of the {{array-test}} split PR for ARROW-3169.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-28T16:20:33.861+0000",
                    "updated": "2018-11-28T16:20:33.861+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/comment/16703377",
                    "id": "16703377",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "The option was added as part of solving ARROW-3169.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-29T15:43:43.440+0000",
                    "updated": "2018-11-29T15:43:43.440+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185597/comment/17585872",
                    "id": "17585872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "Transitioning issue from Resolved to Closed to based on resolution field value.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-08-27T14:41:50.003+0000",
                    "updated": "2022-08-27T14:41:50.003+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3y6dj:",
        "customfield_12314139": null
    }
}