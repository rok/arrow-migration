{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13410317",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317",
    "key": "ARROW-14615",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12625916",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12625916",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13400871",
                    "key": "ARROW-13987",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400871",
                    "fields": {
                        "summary": "[C++] Support nested FieldRefs",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14615/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/worklog/678585",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11641:\nURL: https://github.com/apache/arrow/pull/11641#issuecomment-963315232\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-08T16:14:14.435+0000",
                    "updated": "2021-11-08T16:14:14.435+0000",
                    "started": "2021-11-08T16:14:14.434+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678585",
                    "issueId": "13410317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/worklog/679231",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11641:\nURL: https://github.com/apache/arrow/pull/11641#discussion_r745872869\n\n\n\n##########\nFile path: cpp/src/arrow/array/array_nested.cc\n##########\n@@ -650,6 +651,44 @@ SparseUnionArray::SparseUnionArray(std::shared_ptr<DataType> type, int64_t lengt\n   SetData(std::move(internal_data));\n }\n \n+Result<std::shared_ptr<Array>> SparseUnionArray::GetFlattenedField(\n+    int index, MemoryPool* pool) const {\n+  if (index < 0 || index >= num_fields()) {\n+    return Status::Invalid(\"Index out of range: \", index);\n+  }\n+  auto child_data = data_->child_data[index]->Copy();\n+  // Adjust the result offset/length to be absolute.\n+  if (data_->offset != 0 || data_->length != child_data->length) {\n+    child_data = child_data->Slice(data_->offset, data_->length);\n+  }\n+  std::shared_ptr<Buffer> child_null_bitmap = child_data->buffers[0];\n+  const int64_t child_offset = child_data->offset;\n+\n+  // Synthesize a null bitmap based on the union discriminant.\n+  // Make sure the bitmap has extra bits corresponding to the child offset.\n+  ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Buffer> flattened_null_bitmap,\n+                        AllocateEmptyBitmap(child_data->length + child_offset, pool));\n+  const int8_t type_code = union_type()->type_codes()[index];\n+  const int8_t* type_codes = raw_type_codes();\n+  int64_t offset = 0;\n+  internal::GenerateBitsUnrolled(flattened_null_bitmap->mutable_data(), child_offset,\n+                                 data_->length,\n+                                 [&] { return type_codes[offset++] == type_code; });\n+\n+  // The validity of a flattened datum is the logical AND of the synthesized\n+  // null bitmap buffer and the individual field element's validity.\n+  if (child_null_bitmap) {\n+    BitmapAnd(flattened_null_bitmap->data(), child_offset, child_null_bitmap->data(),\n+              child_offset, child_data->length, child_offset,\n+              flattened_null_bitmap->mutable_data());\n+  }\n+\n+  auto flattened_data = child_data->Copy();\n\nReview comment:\n       `child_data` was already a copy, so is this necessary?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested_test.cc\n##########\n@@ -107,6 +107,109 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+TEST(TestScalarNested, StructField) {\n+  StructFieldOptions trivial;\n+  StructFieldOptions extract0({0});\n+  StructFieldOptions extract20({2, 0});\n+  StructFieldOptions invalid1({-1});\n+  StructFieldOptions invalid2({2, 4});\n+  StructFieldOptions invalid3({0, 1});\n+  FieldVector fields = {field(\"a\", int32()), field(\"b\", utf8()),\n+                        field(\"c\", struct_({\n+                                       field(\"d\", int64()),\n+                                       field(\"e\", float64()),\n+                                   }))};\n+  {\n+    auto arr = ArrayFromJSON(struct_(fields), R\"([\n+      [1, \"a\", [10, 10.0]],\n+      [null, \"b\", [11, 11.0]],\n+      [3, null, [12, 12.0]],\n+      null\n+    ])\");\n+    CheckScalar(\"struct_field\", {arr}, arr, &trivial);\n+    CheckScalar(\"struct_field\", {arr}, ArrayFromJSON(int32(), \"[1, null, 3, null]\"),\n+                &extract0);\n+    CheckScalar(\"struct_field\", {arr}, ArrayFromJSON(int64(), \"[10, 11, 12, null]\"),\n+                &extract20);\n+    EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid,\n+                                    ::testing::HasSubstr(\"out-of-bounds field reference\"),\n+                                    CallFunction(\"struct_field\", {arr}, &invalid1));\n+    EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid,\n+                                    ::testing::HasSubstr(\"out-of-bounds field reference\"),\n+                                    CallFunction(\"struct_field\", {arr}, &invalid2));\n+    EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid, ::testing::HasSubstr(\"cannot subscript\"),\n\nReview comment:\n       Should it be `TypeError` in this case?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -187,6 +188,150 @@ const FunctionDoc list_element_doc(\n      \"is emitted. Null values emit a null in the output.\"),\n     {\"lists\", \"index\"});\n \n+struct StructFieldFunctor {\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<StructFieldOptions>::Get(ctx);\n+    std::shared_ptr<Array> current = batch[0].make_array();\n+    for (const auto& index : options.indices) {\n+      RETURN_NOT_OK(CheckIndex(index, *current->type()));\n+      switch (current->type()->id()) {\n+        case Type::STRUCT: {\n+          const auto& struct_array = checked_cast<const StructArray&>(*current);\n+          ARROW_ASSIGN_OR_RAISE(\n+              current, struct_array.GetFlattenedField(index, ctx->memory_pool()));\n+          break;\n+        }\n+        case Type::DENSE_UNION: {\n+          // We implement this here instead of in DenseUnionArray since it's\n+          // easiest to do via Take(), but DenseUnionArray can't rely on\n+          // arrow::compute. See ARROW-8891.\n+          const auto& union_array = checked_cast<const DenseUnionArray&>(*current);\n+\n+          // Generate a bitmap for the offsets buffer based on the type codes buffer.\n+          ARROW_ASSIGN_OR_RAISE(\n+              std::shared_ptr<Buffer> take_bitmap,\n+              ctx->AllocateBitmap(union_array.length() + union_array.offset()));\n+          const int8_t* type_codes = union_array.raw_type_codes();\n+          const int8_t type_code = union_array.union_type()->type_codes()[index];\n+          int64_t offset = 0;\n+          arrow::internal::GenerateBitsUnrolled(\n+              take_bitmap->mutable_data(), union_array.offset(), union_array.length(),\n+              [&] { return type_codes[offset++] == type_code; });\n+\n+          // Pass the combined buffer to Take().\n+          Datum take_indices(\n+              ArrayData(int32(), union_array.length(),\n+                        {std::move(take_bitmap), union_array.value_offsets()},\n+                        kUnknownNullCount, union_array.offset()));\n+          // Do not slice the child since the indices are relative to the unsliced array.\n+          ARROW_ASSIGN_OR_RAISE(\n+              Datum result,\n+              CallFunction(\"take\", {union_array.field(index), std::move(take_indices)}));\n+          current = result.make_array();\n+          break;\n+        }\n+        case Type::SPARSE_UNION: {\n+          const auto& union_array = checked_cast<const SparseUnionArray&>(*current);\n+          ARROW_ASSIGN_OR_RAISE(current,\n+                                union_array.GetFlattenedField(index, ctx->memory_pool()));\n+          break;\n+        }\n+        default:\n+          // Should have been checked in ResolveStructFieldType\n+          return Status::Invalid(\"struct_field: cannot reference child field of type \",\n+                                 *current->type());\n+      }\n+    }\n+    *out = current;\n+    return Status::OK();\n+  }\n+\n+  static Status ExecScalar(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<StructFieldOptions>::Get(ctx);\n+    const std::shared_ptr<Scalar>* current = &batch[0].scalar();\n+    for (const auto& index : options.indices) {\n+      RETURN_NOT_OK(CheckIndex(index, *(*current)->type));\n+      if (!(*current)->is_valid) {\n+        // out should already be a null scalar of the appropriate type\n+        return Status::OK();\n+      }\n+\n+      switch ((*current)->type->id()) {\n+        case Type::STRUCT: {\n+          current = &checked_cast<const StructScalar&>(**current).value[index];\n+          break;\n+        }\n+        case Type::DENSE_UNION:\n+        case Type::SPARSE_UNION: {\n+          const auto& union_scalar = checked_cast<const UnionScalar&>(**current);\n+          const auto& union_ty = checked_cast<const UnionType&>(*(*current)->type);\n+          if (union_scalar.type_code != union_ty.type_codes()[index]) {\n+            // out should already be a null scalar of the appropriate type\n+            return Status::OK();\n+          }\n+          current = &union_scalar.value;\n+          break;\n+        }\n+        default:\n+          // Should have been checked in ResolveStructFieldType\n+          return Status::Invalid(\"struct_field: cannot reference child field of type \",\n+                                 *(*current)->type);\n+      }\n+    }\n+    *out = *current;\n+    return Status::OK();\n+  }\n+\n+  static Status CheckIndex(int index, const DataType& type) {\n+    if (!ValidParentType(type)) {\n+      return Status::Invalid(\"struct_field: cannot subscript field of type \", type);\n+    } else if (index < 0 || index > type.num_fields()) {\n+      return Status::Invalid(\"struct_field: out-of-bounds field reference to field \",\n+                             index, \" in type \", type, \" with \", type.num_fields(),\n+                             \" fields\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  static bool ValidParentType(const DataType& type) {\n+    return type.id() == Type::STRUCT || type.id() == Type::DENSE_UNION ||\n+           type.id() == Type::SPARSE_UNION;\n+  }\n+};\n+\n+Result<ValueDescr> ResolveStructFieldType(KernelContext* ctx,\n+                                          const std::vector<ValueDescr>& descrs) {\n+  const auto& options = OptionsWrapper<StructFieldOptions>::Get(ctx);\n+  const std::shared_ptr<DataType>* type = &descrs.front().type;\n+  for (const auto& index : options.indices) {\n+    RETURN_NOT_OK(StructFieldFunctor::CheckIndex(index, **type));\n+    type = &(*type)->field(index)->type();\n+  }\n+  return ValueDescr(*type, descrs.front().shape);\n+}\n+\n+void AddStructFieldKernels(ScalarFunction* func) {\n+  for (const auto shape : {ValueDescr::ARRAY, ValueDescr::SCALAR}) {\n+    for (const auto in_type : {Type::STRUCT, Type::DENSE_UNION, Type::SPARSE_UNION}) {\n+      ScalarKernel kernel({InputType(in_type, shape)}, OutputType(ResolveStructFieldType),\n+                          shape == ValueDescr::ARRAY ? StructFieldFunctor::ExecArray\n+                                                     : StructFieldFunctor::ExecScalar,\n+                          OptionsWrapper<StructFieldOptions>::Init);\n+      kernel.null_handling = NullHandling::COMPUTED_NO_PREALLOCATE;\n+      kernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\n+      DCHECK_OK(func->AddKernel(std::move(kernel)));\n+    }\n+  }\n+}\n+\n+const FunctionDoc struct_field_doc(\n+    \"Extract children of a struct or union value by index.\",\n+    (\"Given a series of indices, extract the child array or scalar referenced \"\n+     \"by the index. For union values, mask the child based on the type codes \"\n+     \"of the union array. The indices are always the child index and not the \"\n+     \"type code (for unions) - so the first child is always index 0.\"),\n\nReview comment:\n       Mention that the indices are given in StructFieldOptions?\n\n##########\nFile path: cpp/src/arrow/array/array_union_test.cc\n##########\n@@ -68,6 +69,58 @@ TEST(TestUnionArray, TestSliceEquals) {\n   CheckUnion(batch->column(1));\n }\n \n+TEST(TestSparseUnionArray, GetFlattenedField) {\n+  auto ty = sparse_union({field(\"ints\", int64()), field(\"strs\", utf8())}, {2, 7});\n+  auto ints = ArrayFromJSON(int64(), \"[0, 1, 2, 3]\");\n+  auto strs = ArrayFromJSON(utf8(), R\"([\"a\", null, \"c\", \"d\"])\");\n+  auto ids = ArrayFromJSON(int8(), \"[2, 7, 2, 7]\")->data()->buffers[1];\n+  const int length = 4;\n+\n+  {\n+    SparseUnionArray arr(ty, length, {ints, strs}, ids);\n+    ASSERT_OK(arr.ValidateFull());\n+\n+    ASSERT_OK_AND_ASSIGN(auto flattened, arr.GetFlattenedField(0));\n+    AssertArraysEqual(*ArrayFromJSON(int64(), \"[0, null, 2, null]\"), *flattened,\n+                      /*verbose=*/true);\n+\n+    ASSERT_OK_AND_ASSIGN(flattened, arr.GetFlattenedField(1));\n+    AssertArraysEqual(*ArrayFromJSON(utf8(), R\"([null, null, null, \"d\"])\"), *flattened,\n+                      /*verbose=*/true);\n+\n+    const auto sliced = checked_pointer_cast<SparseUnionArray>(arr.Slice(1, 2));\n+\n+    ASSERT_OK_AND_ASSIGN(flattened, sliced->GetFlattenedField(0));\n+    AssertArraysEqual(*ArrayFromJSON(int64(), \"[null, 2]\"), *flattened, /*verbose=*/true);\n+\n+    ASSERT_OK_AND_ASSIGN(flattened, sliced->GetFlattenedField(1));\n+    AssertArraysEqual(*ArrayFromJSON(utf8(), R\"([null, null])\"), *flattened,\n+                      /*verbose=*/true);\n+\n+    ASSERT_RAISES(Invalid, arr.GetFlattenedField(-1));\n+    ASSERT_RAISES(Invalid, arr.GetFlattenedField(2));\n+  }\n+  {\n+    SparseUnionArray arr(ty, length - 2, {ints->Slice(1, 2), strs->Slice(1, 2)}, ids);\n+    ASSERT_OK(arr.ValidateFull());\n+\n+    ASSERT_OK_AND_ASSIGN(auto flattened, arr.GetFlattenedField(0));\n+    AssertArraysEqual(*ArrayFromJSON(int64(), \"[1, null]\"), *flattened, /*verbose=*/true);\n+\n+    ASSERT_OK_AND_ASSIGN(flattened, arr.GetFlattenedField(1));\n+    AssertArraysEqual(*ArrayFromJSON(utf8(), R\"([null, \"c\"])\"), *flattened,\n+                      /*verbose=*/true);\n+\n+    const auto sliced = checked_pointer_cast<SparseUnionArray>(arr.Slice(1, 1));\n+\n+    ASSERT_OK_AND_ASSIGN(flattened, sliced->GetFlattenedField(0));\n+    AssertArraysEqual(*ArrayFromJSON(int64(), \"[null]\"), *flattened, /*verbose=*/true);\n+\n+    ASSERT_OK_AND_ASSIGN(flattened, sliced->GetFlattenedField(1));\n+    AssertArraysEqual(*ArrayFromJSON(utf8(), R\"([\"c\"])\"), *flattened, /*verbose=*/true);\n+  }\n+}\n\nReview comment:\n       Also test with an empty union array?\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -223,6 +223,18 @@ class ARROW_EXPORT SetLookupOptions : public FunctionOptions {\n   bool skip_nulls;\n };\n \n+/// Options for struct_field function\n+class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n+ public:\n+  explicit StructFieldOptions(std::vector<int> indices);\n\nReview comment:\n       I wonder whether this should also accept a `FieldRef` or field resolution should be left to the caller.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested_test.cc\n##########\n@@ -107,6 +107,109 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+TEST(TestScalarNested, StructField) {\n+  StructFieldOptions trivial;\n+  StructFieldOptions extract0({0});\n+  StructFieldOptions extract20({2, 0});\n+  StructFieldOptions invalid1({-1});\n+  StructFieldOptions invalid2({2, 4});\n+  StructFieldOptions invalid3({0, 1});\n+  FieldVector fields = {field(\"a\", int32()), field(\"b\", utf8()),\n+                        field(\"c\", struct_({\n+                                       field(\"d\", int64()),\n+                                       field(\"e\", float64()),\n+                                   }))};\n+  {\n+    auto arr = ArrayFromJSON(struct_(fields), R\"([\n+      [1, \"a\", [10, 10.0]],\n+      [null, \"b\", [11, 11.0]],\n+      [3, null, [12, 12.0]],\n+      null\n+    ])\");\n+    CheckScalar(\"struct_field\", {arr}, arr, &trivial);\n+    CheckScalar(\"struct_field\", {arr}, ArrayFromJSON(int32(), \"[1, null, 3, null]\"),\n+                &extract0);\n+    CheckScalar(\"struct_field\", {arr}, ArrayFromJSON(int64(), \"[10, 11, 12, null]\"),\n+                &extract20);\n+    EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid,\n+                                    ::testing::HasSubstr(\"out-of-bounds field reference\"),\n+                                    CallFunction(\"struct_field\", {arr}, &invalid1));\n+    EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid,\n+                                    ::testing::HasSubstr(\"out-of-bounds field reference\"),\n+                                    CallFunction(\"struct_field\", {arr}, &invalid2));\n+    EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid, ::testing::HasSubstr(\"cannot subscript\"),\n+                                    CallFunction(\"struct_field\", {arr}, &invalid3));\n+  }\n+  {\n+    auto ty = dense_union(fields, {2, 5, 8});\n+    auto arr = ArrayFromJSON(ty, R\"([\n+      [2, 1],\n+      [5, \"foo\"],\n+      [8, null],\n+      [8, [10, 10.0]]\n+    ])\");\n+    CheckScalar(\"struct_field\", {arr}, arr, &trivial);\n+    CheckScalar(\"struct_field\", {arr}, ArrayFromJSON(int32(), \"[1, null, null, null]\"),\n+                &extract0);\n+    CheckScalar(\"struct_field\", {arr}, ArrayFromJSON(int64(), \"[null, null, null, 10]\"),\n+                &extract20);\n+    EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid,\n+                                    ::testing::HasSubstr(\"out-of-bounds field reference\"),\n+                                    CallFunction(\"struct_field\", {arr}, &invalid1));\n+    EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid,\n+                                    ::testing::HasSubstr(\"out-of-bounds field reference\"),\n+                                    CallFunction(\"struct_field\", {arr}, &invalid2));\n+    EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid, ::testing::HasSubstr(\"cannot subscript\"),\n+                                    CallFunction(\"struct_field\", {arr}, &invalid3));\n+\n+    // Test edge cases for union representation\n+    auto ints = ArrayFromJSON(fields[0]->type(), \"[null, 2, 3]\");\n+    auto strs = ArrayFromJSON(fields[1]->type(), R\"([null, \"bar\"])\");\n+    auto nested = ArrayFromJSON(fields[2]->type(), R\"([null, [10, 10.0]])\");\n+    auto type_ids = ArrayFromJSON(int8(), \"[2, 5, 8, 2, 5, 8]\")->data()->buffers[1];\n+    auto offsets = ArrayFromJSON(int32(), \"[0, 0, 0, 1, 1, 1]\")->data()->buffers[1];\n+\n+    arr = std::make_shared<DenseUnionArray>(ty, /*length=*/6,\n+                                            ArrayVector{ints, strs, nested}, type_ids,\n+                                            offsets, /*offset=*/0);\n+    // Sliced parent\n+    CheckScalar(\"struct_field\", {arr->Slice(3, 3)},\n+                ArrayFromJSON(int32(), \"[2, null, null]\"), &extract0);\n+    // Sliced child\n+    arr = std::make_shared<DenseUnionArray>(ty, /*length=*/6,\n+                                            ArrayVector{ints->Slice(1, 2), strs, nested},\n+                                            type_ids, offsets, /*offset=*/0);\n+    CheckScalar(\"struct_field\", {arr},\n+                ArrayFromJSON(int32(), \"[2, null, null, 3, null, null]\"), &extract0);\n+    // Sliced parent + sliced child\n+    CheckScalar(\"struct_field\", {arr->Slice(3, 3)},\n+                ArrayFromJSON(int32(), \"[3, null, null]\"), &extract0);\n+  }\n+  {\n+    // The underlying implementation is tested directly/more thoroughly in\n+    // array_union_test.cc.\n+    auto arr = ArrayFromJSON(sparse_union(fields, {2, 5, 8}), R\"([\n+      [2, 1],\n+      [5, \"foo\"],\n+      [8, null],\n+      [8, [10, 10.0]]\n+    ])\");\n+    CheckScalar(\"struct_field\", {arr}, arr, &trivial);\n+    CheckScalar(\"struct_field\", {arr}, ArrayFromJSON(int32(), \"[1, null, null, null]\"),\n+                &extract0);\n+    CheckScalar(\"struct_field\", {arr}, ArrayFromJSON(int64(), \"[null, null, null, 10]\"),\n+                &extract20);\n+    EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid,\n+                                    ::testing::HasSubstr(\"out-of-bounds field reference\"),\n+                                    CallFunction(\"struct_field\", {arr}, &invalid1));\n+    EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid,\n+                                    ::testing::HasSubstr(\"out-of-bounds field reference\"),\n+                                    CallFunction(\"struct_field\", {arr}, &invalid2));\n+    EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid, ::testing::HasSubstr(\"cannot subscript\"),\n+                                    CallFunction(\"struct_field\", {arr}, &invalid3));\n+  }\n\nReview comment:\n       What happens with non-nested `arr` and `trivial` options? Should it be tested here?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-09T18:23:33.406+0000",
                    "updated": "2021-11-09T18:23:33.406+0000",
                    "started": "2021-11-09T18:23:33.406+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679231",
                    "issueId": "13410317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/worklog/679249",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11641:\nURL: https://github.com/apache/arrow/pull/11641#discussion_r745925796\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -223,6 +223,18 @@ class ARROW_EXPORT SetLookupOptions : public FunctionOptions {\n   bool skip_nulls;\n };\n \n+/// Options for struct_field function\n+class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n+ public:\n+  explicit StructFieldOptions(std::vector<int> indices);\n\nReview comment:\n       FieldRef is relative to a schema so we'd want/need a variant of this function that operates on a RecordBatch.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-09T19:00:15.731+0000",
                    "updated": "2021-11-09T19:00:15.731+0000",
                    "started": "2021-11-09T19:00:15.731+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679249",
                    "issueId": "13410317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/worklog/679610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #11641:\nURL: https://github.com/apache/arrow/pull/11641#issuecomment-965136892\n\n\n   Benchmark runs are scheduled for baseline = a9f2091f8518590c72d25452dc60c8173ee6223c and contender = 140b0b201f3f6b922ff20000178c9f58b4ee2c09. 140b0b201f3f6b922ff20000178c9f58b4ee2c09 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/4ee9804638b5436bb5538319fa31a5ae...fb0745e45628409e95c28ce4e01b0c94/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/a2cd1a0c32314862b125c1d14493da73...a1bab023486b40a592f39a71cce64bc6/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/6e77919cdbfb4a96ae7c922a69bb0e3f...f1f864abdcd148da8f05795d4e0d1efb/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-10T13:27:17.715+0000",
                    "updated": "2021-11-10T13:27:17.715+0000",
                    "started": "2021-11-10T13:27:17.715+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679610",
                    "issueId": "13410317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/worklog/679611",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #11641:\nURL: https://github.com/apache/arrow/pull/11641\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-10T13:27:20.537+0000",
                    "updated": "2021-11-10T13:27:20.537+0000",
                    "started": "2021-11-10T13:27:20.536+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679611",
                    "issueId": "13410317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/worklog/679627",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11641:\nURL: https://github.com/apache/arrow/pull/11641#issuecomment-965136892\n\n\n   Benchmark runs are scheduled for baseline = a9f2091f8518590c72d25452dc60c8173ee6223c and contender = 140b0b201f3f6b922ff20000178c9f58b4ee2c09. 140b0b201f3f6b922ff20000178c9f58b4ee2c09 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/4ee9804638b5436bb5538319fa31a5ae...fb0745e45628409e95c28ce4e01b0c94/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/a2cd1a0c32314862b125c1d14493da73...a1bab023486b40a592f39a71cce64bc6/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/6e77919cdbfb4a96ae7c922a69bb0e3f...f1f864abdcd148da8f05795d4e0d1efb/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-10T13:57:20.183+0000",
                    "updated": "2021-11-10T13:57:20.183+0000",
                    "started": "2021-11-10T13:57:20.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679627",
                    "issueId": "13410317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/worklog/679823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11641:\nURL: https://github.com/apache/arrow/pull/11641#issuecomment-965136892\n\n\n   Benchmark runs are scheduled for baseline = a9f2091f8518590c72d25452dc60c8173ee6223c and contender = 140b0b201f3f6b922ff20000178c9f58b4ee2c09. 140b0b201f3f6b922ff20000178c9f58b4ee2c09 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/4ee9804638b5436bb5538319fa31a5ae...fb0745e45628409e95c28ce4e01b0c94/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/a2cd1a0c32314862b125c1d14493da73...a1bab023486b40a592f39a71cce64bc6/)\n   [Finished :arrow_down:0.44% :arrow_up:0.18%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/6e77919cdbfb4a96ae7c922a69bb0e3f...f1f864abdcd148da8f05795d4e0d1efb/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-10T18:40:30.274+0000",
                    "updated": "2021-11-10T18:40:30.274+0000",
                    "started": "2021-11-10T18:40:30.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679823",
                    "issueId": "13410317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/worklog/679838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11641:\nURL: https://github.com/apache/arrow/pull/11641#issuecomment-965136892\n\n\n   Benchmark runs are scheduled for baseline = a9f2091f8518590c72d25452dc60c8173ee6223c and contender = 140b0b201f3f6b922ff20000178c9f58b4ee2c09. 140b0b201f3f6b922ff20000178c9f58b4ee2c09 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/4ee9804638b5436bb5538319fa31a5ae...fb0745e45628409e95c28ce4e01b0c94/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/a2cd1a0c32314862b125c1d14493da73...a1bab023486b40a592f39a71cce64bc6/)\n   [Finished :arrow_down:0.44% :arrow_up:0.18%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/6e77919cdbfb4a96ae7c922a69bb0e3f...f1f864abdcd148da8f05795d4e0d1efb/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-10T19:09:28.440+0000",
                    "updated": "2021-11-10T19:09:28.440+0000",
                    "started": "2021-11-10T19:09:28.439+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679838",
                    "issueId": "13410317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/worklog/679910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11641:\nURL: https://github.com/apache/arrow/pull/11641#discussion_r746954187\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -223,6 +223,18 @@ class ARROW_EXPORT SetLookupOptions : public FunctionOptions {\n   bool skip_nulls;\n };\n \n+/// Options for struct_field function\n+class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n+ public:\n+  explicit StructFieldOptions(std::vector<int> indices);\n\nReview comment:\n       But a plain string name could be useful for a StructArray? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-10T20:17:23.570+0000",
                    "updated": "2021-11-10T20:17:23.570+0000",
                    "started": "2021-11-10T20:17:23.570+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679910",
                    "issueId": "13410317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/worklog/679923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11641:\nURL: https://github.com/apache/arrow/pull/11641#discussion_r746968421\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -223,6 +223,18 @@ class ARROW_EXPORT SetLookupOptions : public FunctionOptions {\n   bool skip_nulls;\n };\n \n+/// Options for struct_field function\n+class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n+ public:\n+  explicit StructFieldOptions(std::vector<int> indices);\n\nReview comment:\n       We'd still need a type to resolve it to an index, right? Unless you mean storing `std::vector<std::string>` or `std::string` directly? (Which might be reasonable.)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-10T20:39:41.587+0000",
                    "updated": "2021-11-10T20:39:41.587+0000",
                    "started": "2021-11-10T20:39:41.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679923",
                    "issueId": "13410317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/worklog/679930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11641:\nURL: https://github.com/apache/arrow/pull/11641#discussion_r746971253\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -223,6 +223,18 @@ class ARROW_EXPORT SetLookupOptions : public FunctionOptions {\n   bool skip_nulls;\n };\n \n+/// Options for struct_field function\n+class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n+ public:\n+  explicit StructFieldOptions(std::vector<int> indices);\n\nReview comment:\n       Yes, storing it as strings on the options, I meant. Because when actually executing the kernel, the struct array itself can perfectly resolve the name I think?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-10T20:44:09.975+0000",
                    "updated": "2021-11-10T20:44:09.975+0000",
                    "started": "2021-11-10T20:44:09.975+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679930",
                    "issueId": "13410317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/worklog/679931",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11641:\nURL: https://github.com/apache/arrow/pull/11641#discussion_r746971987\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -223,6 +223,18 @@ class ARROW_EXPORT SetLookupOptions : public FunctionOptions {\n   bool skip_nulls;\n };\n \n+/// Options for struct_field function\n+class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n+ public:\n+  explicit StructFieldOptions(std::vector<int> indices);\n\nReview comment:\n       That's fair. Want to file a followup? I think we can support having a FieldRef internally, basically. (Though the interpretation will be a little different - it'll be relative to an array, not a schema.)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-10T20:45:23.310+0000",
                    "updated": "2021-11-10T20:45:23.310+0000",
                    "started": "2021-11-10T20:45:23.310+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679931",
                    "issueId": "13410317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/worklog/679944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11641:\nURL: https://github.com/apache/arrow/pull/11641#discussion_r746990488\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -223,6 +223,18 @@ class ARROW_EXPORT SetLookupOptions : public FunctionOptions {\n   bool skip_nulls;\n };\n \n+/// Options for struct_field function\n+class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n+ public:\n+  explicit StructFieldOptions(std::vector<int> indices);\n\nReview comment:\n       Now that I think of it, it's probably better to resolve the field up front (using the schema) than pay the cost for every kernel invocation with the same schema.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-10T21:15:09.251+0000",
                    "updated": "2021-11-10T21:15:09.251+0000",
                    "started": "2021-11-10T21:15:09.251+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679944",
                    "issueId": "13410317"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@30c4860e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36a58345[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28dfbb5d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@32fabaa8[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f445619[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5ecb25ed[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b9b783a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6c53ac1b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@511adb16[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@56f97895[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67380d8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7731d779[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Nov 10 13:27:09 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-11-10T13:27:09.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14615/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-11-05T20:05:32.000+0000",
        "updated": "2021-11-10T21:15:10.000+0000",
        "timeoriginalestimate": null,
        "description": "Also move the implementation into a kernel so it can be more easily used. Follow-up to ARROW-13987.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Support nested field refs into unions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410317/comment/17441738",
                    "id": "17441738",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 11641\n[https://github.com/apache/arrow/pull/11641]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-11-10T13:27:09.789+0000",
                    "updated": "2021-11-10T13:27:09.789+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0whm0:",
        "customfield_12314139": null
    }
}