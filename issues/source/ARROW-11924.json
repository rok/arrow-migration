{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13363597",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597",
    "key": "ARROW-11924",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12610495",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12610495",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13363924",
                    "key": "ARROW-11935",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924",
                    "fields": {
                        "summary": "[C++] Add push generator",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                            "id": "3",
                            "description": "A task that needs to be done.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                            "name": "Task",
                            "subtask": false,
                            "avatarId": 21148
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 22800,
            "total": 22800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 22800,
            "total": 22800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11924/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 38,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/580961",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T13:02:01.647+0000",
                    "updated": "2021-04-12T13:02:01.647+0000",
                    "started": "2021-04-12T13:02:01.647+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "580961",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/580963",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#issuecomment-817791878\n\n\n   @westonpace I would welcome your review on this.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T13:02:17.657+0000",
                    "updated": "2021-04-12T13:02:17.657+0000",
                    "started": "2021-04-12T13:02:17.657+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "580963",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/580968",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611608411\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/filesystem.cc\n##########\n@@ -312,6 +315,23 @@ Result<std::vector<FileInfo>> SubTreeFileSystem::GetFileInfo(const FileSelector&\n   return infos;\n }\n \n+FileInfoGenerator SubTreeFileSystem::GetFileInfoGenerator(const FileSelector& select) {\n+  auto selector = select;\n+  selector.base_dir = PrependBase(selector.base_dir);\n+  auto gen = base_fs_->GetFileInfoGenerator(selector);\n+\n+  auto self = checked_pointer_cast<SubTreeFileSystem>(shared_from_this());\n+\n+  std::function<Result<std::vector<FileInfo>>(const std::vector<FileInfo>& infos)>\n+      fix_infos = [self](std::vector<FileInfo> infos) -> Result<std::vector<FileInfo>> {\n+    for (auto& info : infos) {\n+      RETURN_NOT_OK(self->FixInfo(&info));\n+    }\n+    return infos;\n+  };\n+  return MakeMappedGenerator(gen, fix_infos);\n\nReview comment:\n       @westonpace It would be nice if `MakeMappedGenerator` took an arbitrary callable ;-)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T13:03:35.372+0000",
                    "updated": "2021-04-12T13:03:35.372+0000",
                    "started": "2021-04-12T13:03:35.372+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "580968",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581068",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611706349\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/filesystem.cc\n##########\n@@ -312,6 +315,23 @@ Result<std::vector<FileInfo>> SubTreeFileSystem::GetFileInfo(const FileSelector&\n   return infos;\n }\n \n+FileInfoGenerator SubTreeFileSystem::GetFileInfoGenerator(const FileSelector& select) {\n+  auto selector = select;\n+  selector.base_dir = PrependBase(selector.base_dir);\n+  auto gen = base_fs_->GetFileInfoGenerator(selector);\n+\n+  auto self = checked_pointer_cast<SubTreeFileSystem>(shared_from_this());\n+\n+  std::function<Result<std::vector<FileInfo>>(const std::vector<FileInfo>& infos)>\n+      fix_infos = [self](std::vector<FileInfo> infos) -> Result<std::vector<FileInfo>> {\n+    for (auto& info : infos) {\n+      RETURN_NOT_OK(self->FixInfo(&info));\n+    }\n+    return infos;\n+  };\n+  return MakeMappedGenerator(gen, fix_infos);\n\nReview comment:\n       ARROW-12177 is one of the async quality of life issues I want to tackle when I wrap up `AsyncScanner`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T14:58:49.878+0000",
                    "updated": "2021-04-12T14:58:49.878+0000",
                    "started": "2021-04-12T14:58:49.878+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581068",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581120",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#issuecomment-817945059\n\n\n   https://issues.apache.org/jira/browse/ARROW-11924\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T16:20:17.677+0000",
                    "updated": "2021-04-12T16:20:17.677+0000",
                    "started": "2021-04-12T16:20:17.677+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581120",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581132",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611789226\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1332,4 +1332,49 @@ Result<Iterator<T>> MakeReadaheadIterator(Iterator<T> it, int readahead_queue_si\n   return MakeGeneratorIterator(std::move(owned_bg_generator));\n }\n \n+/// \\brief Make a generator that returns a single pre-generated future\n+template <typename T>\n+std::function<Future<T>()> MakeSingleFutureGenerator(Future<T> future) {\n\nReview comment:\n       Hmm... perhaps I should add simple tests for this one and for `MakeFailingGenerator`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T16:41:31.983+0000",
                    "updated": "2021-04-12T16:41:31.983+0000",
                    "started": "2021-04-12T16:41:31.983+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581132",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581149",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611712317\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1332,4 +1332,49 @@ Result<Iterator<T>> MakeReadaheadIterator(Iterator<T> it, int readahead_queue_si\n   return MakeGeneratorIterator(std::move(owned_bg_generator));\n }\n \n+/// \\brief Make a generator that returns a single pre-generated future\n+template <typename T>\n+std::function<Future<T>()> MakeSingleFutureGenerator(Future<T> future) {\n\nReview comment:\n       The Rx name for this is `of` but that's pretty peculiar and wouldn't fit here.  Also, we haven't been following their naming scheme too closely anyways since their names tend to be pretty unintuitive.  I think this name is pretty clear.  So this is just an FYI.\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1332,4 +1332,49 @@ Result<Iterator<T>> MakeReadaheadIterator(Iterator<T> it, int readahead_queue_si\n   return MakeGeneratorIterator(std::move(owned_bg_generator));\n }\n \n+/// \\brief Make a generator that returns a single pre-generated future\n\nReview comment:\n       Can you add a note that this generator is async-reentrant.  I hope no one would ever intentionally add readahead to this but I could see a situation where a generator is maybe created from a known (cached) value and maybe has to be fetched from a source that could use readahead.  Also, it just helps with the consistency of the `MakeXyz` functions.\n\n##########\nFile path: cpp/src/arrow/filesystem/filesystem.h\n##########\n@@ -141,6 +142,19 @@ struct ARROW_EXPORT FileLocator {\n   std::string path;\n };\n \n+using FileInfoVector = std::vector<FileInfo>;\n+using FileInfoGenerator = std::function<Future<FileInfoVector>()>;\n+\n+}  // namespace fs\n+\n+template <>\n+struct IterationTraits<fs::FileInfoVector> {\n\nReview comment:\n       Should we just bite the bullet and add `struct IterationTraits<std::vector<T>>`?\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1762,6 +1851,50 @@ Result<std::vector<FileInfo>> S3FileSystem::GetFileInfo(const FileSelector& sele\n   return results;\n }\n \n+FileInfoGenerator S3FileSystem::GetFileInfoGenerator(const FileSelector& select) {\n+  auto maybe_base_path = S3Path::FromString(select.base_dir);\n+  if (!maybe_base_path.ok()) {\n+    return MakeFailingGenerator<FileInfoVector>(maybe_base_path.status());\n+  }\n+  auto base_path = *std::move(maybe_base_path);\n+\n+  if (base_path.empty()) {\n+    // List all buckets, then possibly recurse\n+    PushGenerator<AsyncGenerator<FileInfoVector>> gen;\n+    auto producer = gen.producer();\n+\n+    auto fut = impl_->ListBucketsAsync(io_context());\n+    auto impl = impl_->shared_from_this();\n+    fut.AddCallback(\n+        [producer, select, impl](const Result<std::vector<std::string>>& res) mutable {\n+          if (!res.ok()) {\n+            producer.Push(res.status());\n+            producer.Close();\n+            return;\n+          }\n+          FileInfoVector buckets;\n+          for (const auto& bucket : *res) {\n+            buckets.push_back(FileInfo{bucket, FileType::Directory});\n+          }\n+          // Generate all bucket infos\n+          producer.Push(MakeVectorGenerator(std::vector<FileInfoVector>{buckets}));\n+          if (select.recursive) {\n+            // Generate recursive walk for each bucket in turn\n+            for (const auto& bucket : buckets) {\n+              producer.Push(impl->WalkAsync(select, bucket.path(), \"\"));\n+            }\n+          }\n+          producer.Close();\n+        });\n+\n+    return MakeConcatenatedGenerator(\n\nReview comment:\n       Why concatenated instead of merged?  Concatenated will run one bucket at a time while merged can run multiple.\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1332,4 +1332,49 @@ Result<Iterator<T>> MakeReadaheadIterator(Iterator<T> it, int readahead_queue_si\n   return MakeGeneratorIterator(std::move(owned_bg_generator));\n }\n \n+/// \\brief Make a generator that returns a single pre-generated future\n+template <typename T>\n+std::function<Future<T>()> MakeSingleFutureGenerator(Future<T> future) {\n+  assert(future.is_valid());\n+  struct Generator {\n+    Future<T> future;\n+\n+    Future<T> operator()() {\n+      if (future.is_valid()) {\n+        return std::move(future);\n+      } else {\n+        return IterationEnd<T>();\n\nReview comment:\n       I've been using `AsyncGeneratorEnd`.  I could probably consider merging `AsyncGeneratorEnd` into `IterationEnd`.  It ties back to the more general question about whether we want to support the implicit conversion from `T` to `Future<T>` via `Future<T>::MakeFinished`.\r\n   \r\n   I think when I asked earlier there was some preference to keep explicitly using `Future<T>::MakeFinished` when possible to be explicit but with the addition of the conversion constructor I've noticed a few spots where that has been missed.\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1762,6 +1851,50 @@ Result<std::vector<FileInfo>> S3FileSystem::GetFileInfo(const FileSelector& sele\n   return results;\n }\n \n+FileInfoGenerator S3FileSystem::GetFileInfoGenerator(const FileSelector& select) {\n+  auto maybe_base_path = S3Path::FromString(select.base_dir);\n+  if (!maybe_base_path.ok()) {\n+    return MakeFailingGenerator<FileInfoVector>(maybe_base_path.status());\n+  }\n+  auto base_path = *std::move(maybe_base_path);\n+\n+  if (base_path.empty()) {\n+    // List all buckets, then possibly recurse\n+    PushGenerator<AsyncGenerator<FileInfoVector>> gen;\n+    auto producer = gen.producer();\n\nReview comment:\n       Maybe make a future JIRA to abandon the walk if all references to `gen` are lost?\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1332,4 +1332,49 @@ Result<Iterator<T>> MakeReadaheadIterator(Iterator<T> it, int readahead_queue_si\n   return MakeGeneratorIterator(std::move(owned_bg_generator));\n }\n \n+/// \\brief Make a generator that returns a single pre-generated future\n+template <typename T>\n+std::function<Future<T>()> MakeSingleFutureGenerator(Future<T> future) {\n+  assert(future.is_valid());\n+  struct Generator {\n+    Future<T> future;\n+\n+    Future<T> operator()() {\n+      if (future.is_valid()) {\n+        return std::move(future);\n+      } else {\n+        return IterationEnd<T>();\n+      }\n+    }\n+  };\n+  return Generator{std::move(future)};\n+}\n+\n+/// \\brief Make a generator that always fails with a given error\n+template <typename T>\n+AsyncGenerator<T> MakeFailingGenerator(Status st) {\n\nReview comment:\n       Another FYI, this would be called `throw` in Rx.  We could name it `raise` but `raise` doesn't really combine with `Make` and I think consistency with `Make` would be nicer here.  No change recommended.\r\n   \r\n   Also, I've been tempted to create ARROW-12341 for a bit now.  It will use this.\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1762,6 +1851,50 @@ Result<std::vector<FileInfo>> S3FileSystem::GetFileInfo(const FileSelector& sele\n   return results;\n }\n \n+FileInfoGenerator S3FileSystem::GetFileInfoGenerator(const FileSelector& select) {\n+  auto maybe_base_path = S3Path::FromString(select.base_dir);\n+  if (!maybe_base_path.ok()) {\n+    return MakeFailingGenerator<FileInfoVector>(maybe_base_path.status());\n+  }\n+  auto base_path = *std::move(maybe_base_path);\n+\n+  if (base_path.empty()) {\n+    // List all buckets, then possibly recurse\n+    PushGenerator<AsyncGenerator<FileInfoVector>> gen;\n+    auto producer = gen.producer();\n+\n+    auto fut = impl_->ListBucketsAsync(io_context());\n+    auto impl = impl_->shared_from_this();\n+    fut.AddCallback(\n+        [producer, select, impl](const Result<std::vector<std::string>>& res) mutable {\n+          if (!res.ok()) {\n+            producer.Push(res.status());\n\nReview comment:\n       Does `PushGenerator` not auto-close on a failing status?  If not can we add a `Close(Status)`?\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1126,6 +1127,11 @@ struct TreeWalker : public std::enable_shared_from_this<TreeWalker> {\n \n   template <typename... Args>\n   static Status Walk(Args&&... args) {\n+    return WalkAsync(std::forward<Args>(args)...).status();\n\nReview comment:\n       This pattern got me in trouble with nested deadlock.  Imagine the thread pool has 8 threads and we are calling `Walk` 10 times.  One potential workaround is to feed this through the new `RunSerially` which will avoid nested deadlock but could impact performance (although should be ok here).\r\n   \r\n   Actually, I believe you are ok here.  All tasks spawned by this call will run on the I/O executor and do not transfer back.\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1762,6 +1851,50 @@ Result<std::vector<FileInfo>> S3FileSystem::GetFileInfo(const FileSelector& sele\n   return results;\n }\n \n+FileInfoGenerator S3FileSystem::GetFileInfoGenerator(const FileSelector& select) {\n+  auto maybe_base_path = S3Path::FromString(select.base_dir);\n+  if (!maybe_base_path.ok()) {\n+    return MakeFailingGenerator<FileInfoVector>(maybe_base_path.status());\n+  }\n+  auto base_path = *std::move(maybe_base_path);\n+\n+  if (base_path.empty()) {\n+    // List all buckets, then possibly recurse\n+    PushGenerator<AsyncGenerator<FileInfoVector>> gen;\n+    auto producer = gen.producer();\n+\n+    auto fut = impl_->ListBucketsAsync(io_context());\n+    auto impl = impl_->shared_from_this();\n+    fut.AddCallback(\n+        [producer, select, impl](const Result<std::vector<std::string>>& res) mutable {\n+          if (!res.ok()) {\n+            producer.Push(res.status());\n+            producer.Close();\n+            return;\n+          }\n+          FileInfoVector buckets;\n+          for (const auto& bucket : *res) {\n+            buckets.push_back(FileInfo{bucket, FileType::Directory});\n+          }\n+          // Generate all bucket infos\n+          producer.Push(MakeVectorGenerator(std::vector<FileInfoVector>{buckets}));\n\nReview comment:\n       Why not use `MakeSingleFutureGenerator`?\n\n##########\nFile path: cpp/src/arrow/filesystem/test_util.cc\n##########\n@@ -111,6 +113,12 @@ void SortInfos(std::vector<FileInfo>* infos) {\n   std::sort(infos->begin(), infos->end(), FileInfo::ByPath{});\n }\n \n+void AssertFileInfoGenerator(FileInfoGenerator gen, FileInfoVector* out_infos) {\n\nReview comment:\n       Naming nit: Perhaps don't name this `Assert` since it isn't actually asserting the contents but just collecting them?  I see ASSERT_FINISHES_OK_AND_ASSIGN as an analogue of ASSERT_OK_AND_ASSIGN which is more of a utility assertion and less of a test expectation. \n\n##########\nFile path: cpp/src/arrow/filesystem/filesystem.cc\n##########\n@@ -159,10 +161,11 @@ Future<std::vector<FileInfo>> FileSystem::GetFileInfoAsync(\n       [paths](std::shared_ptr<FileSystem> self) { return self->GetFileInfo(paths); });\n }\n \n-Future<std::vector<FileInfo>> FileSystem::GetFileInfoAsync(const FileSelector& select) {\n-  return FileSystemDefer(\n+FileInfoGenerator FileSystem::GetFileInfoGenerator(const FileSelector& select) {\n\nReview comment:\n       I'm not sure if this is right.  I would have expected `AsyncGenerator<FileInfo>` and not `AsyncGenerator<FileInfoVector>`.  The latter is still going to block until all results are available.  Is this meant to be a step towards the former?\r\n   \r\n   Nevermind.  I looked at the S3 generator now and I think I see.  You are generating multiple batches of `FileInfo`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:06:03.148+0000",
                    "updated": "2021-04-12T17:06:03.148+0000",
                    "started": "2021-04-12T17:06:03.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581149",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611809137\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1332,4 +1332,49 @@ Result<Iterator<T>> MakeReadaheadIterator(Iterator<T> it, int readahead_queue_si\n   return MakeGeneratorIterator(std::move(owned_bg_generator));\n }\n \n+/// \\brief Make a generator that returns a single pre-generated future\n+template <typename T>\n+std::function<Future<T>()> MakeSingleFutureGenerator(Future<T> future) {\n+  assert(future.is_valid());\n+  struct Generator {\n+    Future<T> future;\n+\n+    Future<T> operator()() {\n+      if (future.is_valid()) {\n+        return std::move(future);\n+      } else {\n+        return IterationEnd<T>();\n\nReview comment:\n       @lidavidm I think you were the one that had some opinion on this in the past (prefer `Future<T>::MakeFinished(t)` over implicit conversion from `t` to `Future<T>`)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:10:39.985+0000",
                    "updated": "2021-04-12T17:10:39.985+0000",
                    "started": "2021-04-12T17:10:39.984+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581153",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581166",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611816347\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1332,4 +1332,49 @@ Result<Iterator<T>> MakeReadaheadIterator(Iterator<T> it, int readahead_queue_si\n   return MakeGeneratorIterator(std::move(owned_bg_generator));\n }\n \n+/// \\brief Make a generator that returns a single pre-generated future\n+template <typename T>\n+std::function<Future<T>()> MakeSingleFutureGenerator(Future<T> future) {\n+  assert(future.is_valid());\n+  struct Generator {\n+    Future<T> future;\n+\n+    Future<T> operator()() {\n+      if (future.is_valid()) {\n+        return std::move(future);\n+      } else {\n+        return IterationEnd<T>();\n\nReview comment:\n       Right, in #9547 I added convenience constructors to enable `ARROW_ASSIGN_OR_RAISE` macros and the like to work but didn't intend for them to replace MakeFinished.\r\n   \r\n   That said I'm not too set on it and given we use the conveniences for Result, I'm not entirely opposed to using them for Future as well. Given we have a lot more async code now and will be adding a lot more in the future, if overall it's more convenient for people then we can go back and get rid of MakeFinished. We'd also need an implicit constructor for `Future<T>` from `T` in addition to the one from `Result<T>`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:21:39.170+0000",
                    "updated": "2021-04-12T17:21:39.170+0000",
                    "started": "2021-04-12T17:21:39.170+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581166",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581168",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611819107\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/filesystem.h\n##########\n@@ -141,6 +142,19 @@ struct ARROW_EXPORT FileLocator {\n   std::string path;\n };\n \n+using FileInfoVector = std::vector<FileInfo>;\n+using FileInfoGenerator = std::function<Future<FileInfoVector>()>;\n+\n+}  // namespace fs\n+\n+template <>\n+struct IterationTraits<fs::FileInfoVector> {\n\nReview comment:\n       I think this came up before on Zulip - is there a good definition of end value for vector<T>? (perhaps the empty vector but that's not going to apply in all situations).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:25:48.111+0000",
                    "updated": "2021-04-12T17:25:48.111+0000",
                    "started": "2021-04-12T17:25:48.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581168",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581178",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611830438\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1332,4 +1332,49 @@ Result<Iterator<T>> MakeReadaheadIterator(Iterator<T> it, int readahead_queue_si\n   return MakeGeneratorIterator(std::move(owned_bg_generator));\n }\n \n+/// \\brief Make a generator that returns a single pre-generated future\n+template <typename T>\n+std::function<Future<T>()> MakeSingleFutureGenerator(Future<T> future) {\n+  assert(future.is_valid());\n+  struct Generator {\n+    Future<T> future;\n+\n+    Future<T> operator()() {\n+      if (future.is_valid()) {\n+        return std::move(future);\n+      } else {\n+        return IterationEnd<T>();\n\nReview comment:\n       I can use `AsyncGeneratorEnd`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:42:40.006+0000",
                    "updated": "2021-04-12T17:42:40.006+0000",
                    "started": "2021-04-12T17:42:40.005+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581178",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581179",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611830662\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/filesystem.h\n##########\n@@ -141,6 +142,19 @@ struct ARROW_EXPORT FileLocator {\n   std::string path;\n };\n \n+using FileInfoVector = std::vector<FileInfo>;\n+using FileInfoGenerator = std::function<Future<FileInfoVector>()>;\n+\n+}  // namespace fs\n+\n+template <>\n+struct IterationTraits<fs::FileInfoVector> {\n\nReview comment:\n       Right, I don't think this is desirable in the general case.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:42:53.989+0000",
                    "updated": "2021-04-12T17:42:53.989+0000",
                    "started": "2021-04-12T17:42:53.989+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581179",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611831400\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/filesystem.cc\n##########\n@@ -159,10 +161,11 @@ Future<std::vector<FileInfo>> FileSystem::GetFileInfoAsync(\n       [paths](std::shared_ptr<FileSystem> self) { return self->GetFileInfo(paths); });\n }\n \n-Future<std::vector<FileInfo>> FileSystem::GetFileInfoAsync(const FileSelector& select) {\n-  return FileSystemDefer(\n+FileInfoGenerator FileSystem::GetFileInfoGenerator(const FileSelector& select) {\n\nReview comment:\n       Yes, you don't want to pay the cost of a function call and future unwrap for each `FileInfo` (imagine a situation where there are 10000 files).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:44:05.090+0000",
                    "updated": "2021-04-12T17:44:05.090+0000",
                    "started": "2021-04-12T17:44:05.090+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581181",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581182",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611831838\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1762,6 +1851,50 @@ Result<std::vector<FileInfo>> S3FileSystem::GetFileInfo(const FileSelector& sele\n   return results;\n }\n \n+FileInfoGenerator S3FileSystem::GetFileInfoGenerator(const FileSelector& select) {\n+  auto maybe_base_path = S3Path::FromString(select.base_dir);\n+  if (!maybe_base_path.ok()) {\n+    return MakeFailingGenerator<FileInfoVector>(maybe_base_path.status());\n+  }\n+  auto base_path = *std::move(maybe_base_path);\n+\n+  if (base_path.empty()) {\n+    // List all buckets, then possibly recurse\n+    PushGenerator<AsyncGenerator<FileInfoVector>> gen;\n+    auto producer = gen.producer();\n+\n+    auto fut = impl_->ListBucketsAsync(io_context());\n+    auto impl = impl_->shared_from_this();\n+    fut.AddCallback(\n+        [producer, select, impl](const Result<std::vector<std::string>>& res) mutable {\n+          if (!res.ok()) {\n+            producer.Push(res.status());\n\nReview comment:\n       I'd rather not mix `Push` and `Close`. However it may be reasonable to auto-close when the producer is destroyed.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:44:49.047+0000",
                    "updated": "2021-04-12T17:44:49.047+0000",
                    "started": "2021-04-12T17:44:49.047+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581182",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581185",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611832081\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1762,6 +1851,50 @@ Result<std::vector<FileInfo>> S3FileSystem::GetFileInfo(const FileSelector& sele\n   return results;\n }\n \n+FileInfoGenerator S3FileSystem::GetFileInfoGenerator(const FileSelector& select) {\n+  auto maybe_base_path = S3Path::FromString(select.base_dir);\n+  if (!maybe_base_path.ok()) {\n+    return MakeFailingGenerator<FileInfoVector>(maybe_base_path.status());\n+  }\n+  auto base_path = *std::move(maybe_base_path);\n+\n+  if (base_path.empty()) {\n+    // List all buckets, then possibly recurse\n+    PushGenerator<AsyncGenerator<FileInfoVector>> gen;\n+    auto producer = gen.producer();\n+\n+    auto fut = impl_->ListBucketsAsync(io_context());\n+    auto impl = impl_->shared_from_this();\n+    fut.AddCallback(\n+        [producer, select, impl](const Result<std::vector<std::string>>& res) mutable {\n+          if (!res.ok()) {\n+            producer.Push(res.status());\n+            producer.Close();\n+            return;\n+          }\n+          FileInfoVector buckets;\n+          for (const auto& bucket : *res) {\n+            buckets.push_back(FileInfo{bucket, FileType::Directory});\n+          }\n+          // Generate all bucket infos\n+          producer.Push(MakeVectorGenerator(std::vector<FileInfoVector>{buckets}));\n\nReview comment:\n       Hmm... because I didn't think about it :-)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:45:17.739+0000",
                    "updated": "2021-04-12T17:45:17.739+0000",
                    "started": "2021-04-12T17:45:17.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581185",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581187",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611832688\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1762,6 +1851,50 @@ Result<std::vector<FileInfo>> S3FileSystem::GetFileInfo(const FileSelector& sele\n   return results;\n }\n \n+FileInfoGenerator S3FileSystem::GetFileInfoGenerator(const FileSelector& select) {\n+  auto maybe_base_path = S3Path::FromString(select.base_dir);\n+  if (!maybe_base_path.ok()) {\n+    return MakeFailingGenerator<FileInfoVector>(maybe_base_path.status());\n+  }\n+  auto base_path = *std::move(maybe_base_path);\n+\n+  if (base_path.empty()) {\n+    // List all buckets, then possibly recurse\n+    PushGenerator<AsyncGenerator<FileInfoVector>> gen;\n+    auto producer = gen.producer();\n\nReview comment:\n       Good idea. Also perhaps the stop token can be examined (though the thread pool should fail the task if the stop token was cancelled).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:46:05.933+0000",
                    "updated": "2021-04-12T17:46:05.933+0000",
                    "started": "2021-04-12T17:46:05.933+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581187",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581190",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611833986\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1762,6 +1851,50 @@ Result<std::vector<FileInfo>> S3FileSystem::GetFileInfo(const FileSelector& sele\n   return results;\n }\n \n+FileInfoGenerator S3FileSystem::GetFileInfoGenerator(const FileSelector& select) {\n+  auto maybe_base_path = S3Path::FromString(select.base_dir);\n+  if (!maybe_base_path.ok()) {\n+    return MakeFailingGenerator<FileInfoVector>(maybe_base_path.status());\n+  }\n+  auto base_path = *std::move(maybe_base_path);\n+\n+  if (base_path.empty()) {\n+    // List all buckets, then possibly recurse\n+    PushGenerator<AsyncGenerator<FileInfoVector>> gen;\n+    auto producer = gen.producer();\n+\n+    auto fut = impl_->ListBucketsAsync(io_context());\n+    auto impl = impl_->shared_from_this();\n+    fut.AddCallback(\n+        [producer, select, impl](const Result<std::vector<std::string>>& res) mutable {\n+          if (!res.ok()) {\n+            producer.Push(res.status());\n+            producer.Close();\n+            return;\n+          }\n+          FileInfoVector buckets;\n+          for (const auto& bucket : *res) {\n+            buckets.push_back(FileInfo{bucket, FileType::Directory});\n+          }\n+          // Generate all bucket infos\n+          producer.Push(MakeVectorGenerator(std::vector<FileInfoVector>{buckets}));\n+          if (select.recursive) {\n+            // Generate recursive walk for each bucket in turn\n+            for (const auto& bucket : buckets) {\n+              producer.Push(impl->WalkAsync(select, bucket.path(), \"\"));\n+            }\n+          }\n+          producer.Close();\n+        });\n+\n+    return MakeConcatenatedGenerator(\n\nReview comment:\n       The first thing is that I don't understand the merged documentation (what does `max_subscriptions` mean?).\r\n   The second thing is that `WalkAsync` is called for each child directory above and schedules a walk, so I don't understand why this would run one bucket at a time.\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:48:02.418+0000",
                    "updated": "2021-04-12T17:48:02.418+0000",
                    "started": "2021-04-12T17:48:02.418+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581190",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611833986\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1762,6 +1851,50 @@ Result<std::vector<FileInfo>> S3FileSystem::GetFileInfo(const FileSelector& sele\n   return results;\n }\n \n+FileInfoGenerator S3FileSystem::GetFileInfoGenerator(const FileSelector& select) {\n+  auto maybe_base_path = S3Path::FromString(select.base_dir);\n+  if (!maybe_base_path.ok()) {\n+    return MakeFailingGenerator<FileInfoVector>(maybe_base_path.status());\n+  }\n+  auto base_path = *std::move(maybe_base_path);\n+\n+  if (base_path.empty()) {\n+    // List all buckets, then possibly recurse\n+    PushGenerator<AsyncGenerator<FileInfoVector>> gen;\n+    auto producer = gen.producer();\n+\n+    auto fut = impl_->ListBucketsAsync(io_context());\n+    auto impl = impl_->shared_from_this();\n+    fut.AddCallback(\n+        [producer, select, impl](const Result<std::vector<std::string>>& res) mutable {\n+          if (!res.ok()) {\n+            producer.Push(res.status());\n+            producer.Close();\n+            return;\n+          }\n+          FileInfoVector buckets;\n+          for (const auto& bucket : *res) {\n+            buckets.push_back(FileInfo{bucket, FileType::Directory});\n+          }\n+          // Generate all bucket infos\n+          producer.Push(MakeVectorGenerator(std::vector<FileInfoVector>{buckets}));\n+          if (select.recursive) {\n+            // Generate recursive walk for each bucket in turn\n+            for (const auto& bucket : buckets) {\n+              producer.Push(impl->WalkAsync(select, bucket.path(), \"\"));\n+            }\n+          }\n+          producer.Close();\n+        });\n+\n+    return MakeConcatenatedGenerator(\n\nReview comment:\n       The first thing is that I don't understand the merged documentation (what does `max_subscriptions` mean? how do I choose its value?).\r\n   The second thing is that `WalkAsync` is called for each child directory above and schedules a walk, so I don't understand why this would run one bucket at a time.\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:48:15.425+0000",
                    "updated": "2021-04-12T17:48:15.425+0000",
                    "started": "2021-04-12T17:48:15.425+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581191",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581193",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611834597\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/test_util.cc\n##########\n@@ -111,6 +113,12 @@ void SortInfos(std::vector<FileInfo>* infos) {\n   std::sort(infos->begin(), infos->end(), FileInfo::ByPath{});\n }\n \n+void AssertFileInfoGenerator(FileInfoGenerator gen, FileInfoVector* out_infos) {\n\nReview comment:\n       Perhaps `CollectFileInfoGenerator`?\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1332,4 +1332,49 @@ Result<Iterator<T>> MakeReadaheadIterator(Iterator<T> it, int readahead_queue_si\n   return MakeGeneratorIterator(std::move(owned_bg_generator));\n }\n \n+/// \\brief Make a generator that returns a single pre-generated future\n\nReview comment:\n       Will do.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:49:10.880+0000",
                    "updated": "2021-04-12T17:49:10.880+0000",
                    "started": "2021-04-12T17:49:10.880+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581193",
                    "issueId": "13363597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/worklog/581198",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9995:\nURL: https://github.com/apache/arrow/pull/9995#discussion_r611836438\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1126,6 +1127,11 @@ struct TreeWalker : public std::enable_shared_from_this<TreeWalker> {\n \n   template <typename... Args>\n   static Status Walk(Args&&... args) {\n+    return WalkAsync(std::forward<Args>(args)...).status();\n\nReview comment:\n       Note I'm not changing the internal implementation here, I'm just exposing an additional `WalkAsync` entrypoint.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T17:51:44.307+0000",
                    "updated": "2021-04-12T17:51:44.307+0000",
                    "started": "2021-04-12T17:51:44.307+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581198",
                    "issueId": "13363597"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 22800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@324d101[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7cf42c88[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@240cdd83[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@794135e6[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79d88e37[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@55b2b707[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@179098f7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@670e61e6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a1ae206[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1ad06ccd[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9940840[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1d0149c5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 22800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Apr 14 10:04:36 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-14T10:04:36.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11924/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-03-10T16:06:03.000+0000",
        "updated": "2021-04-14T10:04:53.000+0000",
        "timeoriginalestimate": null,
        "description": "For situations where a monolithic call to GetFileInfo will be slow, it would be useful to immediately receive any results which *are* ready through an {{AsyncGenerator<std::vector<FileInfo>>}} or so. This is probably a prerequisite of ARROW-8163, where the goal is to begin scanning known fragments while other fragments are still being discovered.\r\n\r\nIIUC, one concrete example would be paging through a long output from S3's ListObjectsV2.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 22800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Provide streaming output from GetFileInfo",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/comment/17299051",
                    "id": "17299051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Then it would probably be a non-reentrant {{AsyncGenerator}}. Is that ok?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-03-10T18:24:33.209+0000",
                    "updated": "2021-03-10T18:24:33.209+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/comment/17299062",
                    "id": "17299062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "That should be ok.\u00a0 If we get to a point that a consumer needs an async-reentrant input (e.g. we decide that the fragment generator should always be async-reentrant) then we can add a general purpose `buffer` operator that simply buffers incoming requests.\u00a0 Buffering requests is generally assumed to be cheap (it wouldn't be an unlimited buffer as we never pull with unlimited reentrancy) and doesn't add any real memory pressure.\r\n\r\nIf this is in the scanning we will need to change Dataset::GetFragmentsAsync to a FragmentGenerator instead of Future<FragmentVector> but that is not really a problem either.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-03-10T18:47:34.964+0000",
                    "updated": "2021-03-10T18:47:34.964+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/comment/17299081",
                    "id": "17299081",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Note that the implementation could very well be able to produce results in parallel. However, it's not known up front how many results will be produced. I'm not sure if that's a problem.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-03-10T19:01:41.871+0000",
                    "updated": "2021-03-10T19:01:41.871+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597/comment/17320872",
                    "id": "17320872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 9995\n[https://github.com/apache/arrow/pull/9995]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-04-14T10:04:36.935+0000",
                    "updated": "2021-04-14T10:04:36.935+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0oifs:",
        "customfield_12314139": null
    }
}