{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13183901",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901",
    "key": "ARROW-3200",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "flight",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12558793",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12558793",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13221981",
                    "key": "ARROW-4904",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13221981",
                    "fields": {
                        "summary": "[C++] Move implementations in arrow/ipc/test-common.h into libarrow_testing",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                            "id": "3",
                            "description": "A task that needs to be done.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                            "name": "Task",
                            "subtask": false,
                            "avatarId": 21148
                        }
                    }
                }
            },
            {
                "id": "12557698",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12557698",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13224579",
                    "key": "ARROW-5052",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13224579",
                    "fields": {
                        "summary": "[C++] Add an incomplete dictionary type",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 28200,
            "total": 28200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 28200,
            "total": 28200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3200/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 47,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223108",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T17:03:31.905+0000",
                    "updated": "2019-04-04T17:03:31.905+0000",
                    "started": "2019-04-04T17:03:31.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223108",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223110",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#issuecomment-479981977\n \n \n   @wesm There's some IPC refactoring here that deserves reviewing.\r\n   @lidavidm Also some Flight refactoring.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T17:04:07.359+0000",
                    "updated": "2019-04-04T17:04:07.359+0000",
                    "started": "2019-04-04T17:04:07.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223110",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#discussion_r272291486\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/writer.cc\n ##########\n @@ -1147,13 +1201,16 @@ Status SerializeSchema(const Schema& schema, MemoryPool* pool,\n   std::shared_ptr<io::BufferOutputStream> stream;\n   RETURN_NOT_OK(io::BufferOutputStream::Create(1024, pool, &stream));\n \n-  DictionaryMemo memo;\n-  SchemaWriter schema_writer(schema, &memo, pool, stream.get());\n+  // XXX: PayloadStreamWriter takes a std::shared_ptr<Schema> but we only got a\n+  // raw reference.  We fake it with a null deleter.\n+  auto deleter = [](Schema*) -> void {};\n+  std::shared_ptr<Schema> schema_ptr(const_cast<Schema*>(&schema), deleter);\n \n-  // Unused\n-  std::vector<FileBlock> dictionary_blocks;\n+  auto payload_writer = make_unique<PayloadStreamWriter>(stream.get());\n+  RecordBatchPayloadWriter writer(std::move(payload_writer), schema_ptr);\n \n Review comment:\n   `RecordBatchStreamWriter` takes `io::OutputStream*` as its first argument.\r\n   If `writer` should own `payload_writer`, then the parameter list should be modified to take `unique_ptr<io::OutputStream>`.\r\n   If `writer` doesn't own `payload_writer`:\r\n   ```suggestion\r\n     RecordBatchPayloadWriter writer(payload_writer.get(), schema_ptr);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T17:41:54.000+0000",
                    "updated": "2019-04-04T17:41:54.000+0000",
                    "started": "2019-04-04T17:41:53.999+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223150",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#discussion_r272291486\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/writer.cc\n ##########\n @@ -1147,13 +1201,16 @@ Status SerializeSchema(const Schema& schema, MemoryPool* pool,\n   std::shared_ptr<io::BufferOutputStream> stream;\n   RETURN_NOT_OK(io::BufferOutputStream::Create(1024, pool, &stream));\n \n-  DictionaryMemo memo;\n-  SchemaWriter schema_writer(schema, &memo, pool, stream.get());\n+  // XXX: PayloadStreamWriter takes a std::shared_ptr<Schema> but we only got a\n+  // raw reference.  We fake it with a null deleter.\n+  auto deleter = [](Schema*) -> void {};\n+  std::shared_ptr<Schema> schema_ptr(const_cast<Schema*>(&schema), deleter);\n \n-  // Unused\n-  std::vector<FileBlock> dictionary_blocks;\n+  auto payload_writer = make_unique<PayloadStreamWriter>(stream.get());\n+  RecordBatchPayloadWriter writer(std::move(payload_writer), schema_ptr);\n \n Review comment:\n   `RecordBatchStreamWriter` takes `io::OutputStream*` as its first argument.\r\n   \r\n   If `writer` should own `payload_writer`, then the parameter list should be modified to take `unique_ptr<io::OutputStream>`.\r\n   \r\n   If `writer` doesn't own `payload_writer`:\r\n   ```suggestion\r\n     RecordBatchPayloadWriter writer(payload_writer.get(), schema_ptr);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T17:42:49.368+0000",
                    "updated": "2019-04-04T17:42:49.368+0000",
                    "started": "2019-04-04T17:42:49.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223153",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223156",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#discussion_r272292432\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/writer.cc\n ##########\n @@ -1147,13 +1201,16 @@ Status SerializeSchema(const Schema& schema, MemoryPool* pool,\n   std::shared_ptr<io::BufferOutputStream> stream;\n   RETURN_NOT_OK(io::BufferOutputStream::Create(1024, pool, &stream));\n \n-  DictionaryMemo memo;\n-  SchemaWriter schema_writer(schema, &memo, pool, stream.get());\n+  // XXX: PayloadStreamWriter takes a std::shared_ptr<Schema> but we only got a\n+  // raw reference.  We fake it with a null deleter.\n+  auto deleter = [](Schema*) -> void {};\n+  std::shared_ptr<Schema> schema_ptr(const_cast<Schema*>(&schema), deleter);\n \n-  // Unused\n-  std::vector<FileBlock> dictionary_blocks;\n+  auto payload_writer = make_unique<PayloadStreamWriter>(stream.get());\n+  RecordBatchPayloadWriter writer(std::move(payload_writer), schema_ptr);\n \n Review comment:\n   This is `RecordBatchPayloadWriter`, not `RecordBatchStreamWriter`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T17:44:12.025+0000",
                    "updated": "2019-04-04T17:44:12.025+0000",
                    "started": "2019-04-04T17:44:12.024+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223156",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223164",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#discussion_r272295276\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/writer.cc\n ##########\n @@ -1147,13 +1201,16 @@ Status SerializeSchema(const Schema& schema, MemoryPool* pool,\n   std::shared_ptr<io::BufferOutputStream> stream;\n   RETURN_NOT_OK(io::BufferOutputStream::Create(1024, pool, &stream));\n \n-  DictionaryMemo memo;\n-  SchemaWriter schema_writer(schema, &memo, pool, stream.get());\n+  // XXX: PayloadStreamWriter takes a std::shared_ptr<Schema> but we only got a\n+  // raw reference.  We fake it with a null deleter.\n+  auto deleter = [](Schema*) -> void {};\n+  std::shared_ptr<Schema> schema_ptr(const_cast<Schema*>(&schema), deleter);\n \n Review comment:\n   This may work but it's highly irregular. For clarity it might be worthwhile to make a deep copy of the schema:\r\n   ```suggestion\r\n     auto schema_ptr = arrow::schema(schema.fields(), schema.metadata());\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T17:50:51.801+0000",
                    "updated": "2019-04-04T17:50:51.801+0000",
                    "started": "2019-04-04T17:50:51.800+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223164",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223169",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#discussion_r272291486\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/writer.cc\n ##########\n @@ -1147,13 +1201,16 @@ Status SerializeSchema(const Schema& schema, MemoryPool* pool,\n   std::shared_ptr<io::BufferOutputStream> stream;\n   RETURN_NOT_OK(io::BufferOutputStream::Create(1024, pool, &stream));\n \n-  DictionaryMemo memo;\n-  SchemaWriter schema_writer(schema, &memo, pool, stream.get());\n+  // XXX: PayloadStreamWriter takes a std::shared_ptr<Schema> but we only got a\n+  // raw reference.  We fake it with a null deleter.\n+  auto deleter = [](Schema*) -> void {};\n+  std::shared_ptr<Schema> schema_ptr(const_cast<Schema*>(&schema), deleter);\n \n-  // Unused\n-  std::vector<FileBlock> dictionary_blocks;\n+  auto payload_writer = make_unique<PayloadStreamWriter>(stream.get());\n+  RecordBatchPayloadWriter writer(std::move(payload_writer), schema_ptr);\n \n Review comment:\n   `RecordBatchStreamWriter` takes `io::OutputStream*` as its first argument.\r\n   \r\n   If `writer` should own `payload_writer`, then the parameter list should be modified to take `unique_ptr<io::OutputStream>`.\r\n   \r\n   If `writer` doesn't own `payload_writer`:\r\n   ```suggestion\r\n     RecordBatchPayloadWriter writer(payload_writer.get(), schema_ptr);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T17:58:35.121+0000",
                    "updated": "2019-04-04T17:58:35.121+0000",
                    "started": "2019-04-04T17:58:35.120+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223169",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#discussion_r272292432\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/writer.cc\n ##########\n @@ -1147,13 +1201,16 @@ Status SerializeSchema(const Schema& schema, MemoryPool* pool,\n   std::shared_ptr<io::BufferOutputStream> stream;\n   RETURN_NOT_OK(io::BufferOutputStream::Create(1024, pool, &stream));\n \n-  DictionaryMemo memo;\n-  SchemaWriter schema_writer(schema, &memo, pool, stream.get());\n+  // XXX: PayloadStreamWriter takes a std::shared_ptr<Schema> but we only got a\n+  // raw reference.  We fake it with a null deleter.\n+  auto deleter = [](Schema*) -> void {};\n+  std::shared_ptr<Schema> schema_ptr(const_cast<Schema*>(&schema), deleter);\n \n-  // Unused\n-  std::vector<FileBlock> dictionary_blocks;\n+  auto payload_writer = make_unique<PayloadStreamWriter>(stream.get());\n+  RecordBatchPayloadWriter writer(std::move(payload_writer), schema_ptr);\n \n Review comment:\n   This is `RecordBatchPayloadWriter`, not `RecordBatchStreamWriter`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T17:58:36.459+0000",
                    "updated": "2019-04-04T17:58:36.459+0000",
                    "started": "2019-04-04T17:58:36.458+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223170",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223227",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#issuecomment-480048373\n \n \n   I will try to spend a good amount of time reviewing this before I leave town on Monday\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T20:19:35.330+0000",
                    "updated": "2019-04-04T20:19:35.330+0000",
                    "started": "2019-04-04T20:19:35.330+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223227",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223269",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#discussion_r272378212\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.cc\n ##########\n @@ -58,86 +57,81 @@ struct ClientRpc {\n     /// XXX workaround until we have a handshake in Connect\n     context.set_wait_for_ready(true);\n   }\n+\n+  Status IOError(const std::string& error_message) {\n+    std::stringstream ss;\n+    ss << error_message << context.debug_error_string();\n+    return Status::IOError(ss.str());\n+  }\n };\n \n-class FlightStreamReader : public RecordBatchReader {\n+class FlightIpcMessageReader : public ipc::MessageReader {\n  public:\n-  FlightStreamReader(std::unique_ptr<ClientRpc> rpc,\n-                     const std::shared_ptr<Schema>& schema,\n-                     std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream)\n-      : rpc_(std::move(rpc)),\n-        stream_finished_(false),\n-        schema_(schema),\n-        stream_(std::move(stream)) {}\n-\n-  std::shared_ptr<Schema> schema() const override { return schema_; }\n-\n-  Status ReadNext(std::shared_ptr<RecordBatch>* out) override {\n-    internal::FlightData data;\n+  FlightIpcMessageReader(std::unique_ptr<ClientRpc> rpc,\n+                         std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream)\n+      : rpc_(std::move(rpc)), stream_(std::move(stream)), stream_finished_(false) {}\n \n+  Status ReadNextMessage(std::unique_ptr<ipc::Message>* out) override {\n     if (stream_finished_) {\n       *out = nullptr;\n       return Status::OK();\n     }\n-\n-    // Pretend to be pb::FlightData and intercept in SerializationTraits\n-    if (stream_->Read(reinterpret_cast<pb::FlightData*>(&data))) {\n-      std::unique_ptr<ipc::Message> message;\n-\n-      // Validate IPC message\n-      RETURN_NOT_OK(ipc::Message::Open(data.metadata, data.body, &message));\n-      if (message->type() == ipc::Message::Type::RECORD_BATCH) {\n-        return ipc::ReadRecordBatch(*message, schema_, out);\n-      } else if (message->type() == ipc::Message::Type::SCHEMA) {\n-        return Status(StatusCode::Invalid, \"Flight stream changed schema midway\");\n-      } else {\n-        return Status(StatusCode::Invalid, \"Unrecognized message in Flight stream\");\n-      }\n-    } else {\n+    internal::FlightData data;\n+    if (!internal::ReadPayload(stream_.get(), &data)) {\n       // Stream is completed\n       stream_finished_ = true;\n       *out = nullptr;\n-      return internal::FromGrpcStatus(stream_->Finish());\n+      return Status::OK();\n     }\n+    std::unique_ptr<ipc::Message> message;\n+    // Validate IPC message\n+    RETURN_NOT_OK(data.OpenMessage(&message));\n+    *out = std::move(message);\n+    return Status::OK();\n   }\n \n- private:\n+ protected:\n   // The RPC context lifetime must be coupled to the ClientReader\n   std::unique_ptr<ClientRpc> rpc_;\n-\n-  bool stream_finished_;\n-  std::shared_ptr<Schema> schema_;\n   std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream_;\n+  bool stream_finished_;\n };\n \n-/// \\brief A RecordBatchWriter implementation that writes to a Flight\n-/// DoPut stream.\n-class FlightPutWriter::FlightPutWriterImpl : public ipc::RecordBatchWriter {\n+/// A IpcPayloadWriter implementation that writes to a DoPut stream\n+class DoPutPayloadWriter : public ipc::internal::IpcPayloadWriter {\n  public:\n-  explicit FlightPutWriterImpl(std::unique_ptr<ClientRpc> rpc,\n-                               const FlightDescriptor& descriptor,\n-                               const std::shared_ptr<Schema>& schema,\n-                               MemoryPool* pool = default_memory_pool())\n-      : rpc_(std::move(rpc)), descriptor_(descriptor), schema_(schema), pool_(pool) {}\n+  DoPutPayloadWriter(const FlightDescriptor& descriptor, std::unique_ptr<ClientRpc> rpc,\n+                     std::unique_ptr<protocol::PutResult> response,\n+                     std::unique_ptr<grpc::ClientWriter<pb::FlightData>> writer)\n+      : descriptor_(descriptor),\n+        rpc_(std::move(rpc)),\n+        response_(std::move(response)),\n+        writer_(std::move(writer)),\n+        first_payload_(true) {}\n+\n+  ~DoPutPayloadWriter() override = default;\n+\n+  Status Start() override { return Status::OK(); }\n \n-  Status WriteRecordBatch(const RecordBatch& batch, bool allow_64bit = false) override {\n+  Status WritePayload(const ipc::internal::IpcPayload& ipc_payload) override {\n     FlightPayload payload;\n-    RETURN_NOT_OK(\n-        ipc::internal::GetRecordBatchPayload(batch, pool_, &payload.ipc_message));\n+    payload.ipc_message = ipc_payload;\n+\n+    if (first_payload_) {\n+      // First Flight message needs to encore the Flight descriptor\n+      DCHECK_EQ(ipc_payload.type, ipc::Message::SCHEMA);\n+      std::string str_descr;\n+      {\n+        pb::FlightDescriptor pb_descr;\n+        RETURN_NOT_OK(internal::ToProto(descriptor_, &pb_descr));\n+        pb_descr.SerializeToString(&str_descr);\n+      }\n+      RETURN_NOT_OK(Buffer::FromString(str_descr, &payload.descriptor));\n+      first_payload_ = false;\n+    }\n \n-#ifndef _WIN32\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wstrict-aliasing\"\n-#endif\n-    if (!writer_->Write(*reinterpret_cast<const pb::FlightData*>(&payload),\n-                        grpc::WriteOptions())) {\n-#ifndef _WIN32\n-#pragma GCC diagnostic pop\n-#endif\n-      std::stringstream ss;\n-      ss << \"Could not write record batch to stream: \"\n-         << rpc_->context.debug_error_string();\n-      return Status::IOError(ss.str());\n+    if (!internal::WritePayload(payload, writer_.get())) {\n+      return rpc_->IOError(\"Could not write record batch to stream: \");\n \n Review comment:\n   You can get the underlying gRPC error via `ClientWriter.Finish`: https://grpc.io/grpc/cpp/classgrpc_1_1_client_writer.html#ab6c58e110c289ac0f76ae1fdb8fe24a3\r\n   \r\n   As documented, it will return right away if writing failed (as it would have here): https://grpc.io/grpc/cpp/classgrpc_1_1internal_1_1_client_streaming_interface.html#a47321b8c130947bcef5c793329a54619\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T21:39:18.312+0000",
                    "updated": "2019-04-04T21:39:18.312+0000",
                    "started": "2019-04-04T21:39:18.311+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223269",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#issuecomment-480212157\n \n \n   > looks like now schema messages can carry body buffers?\r\n   \r\n   That sounds unexpected. What do the body buffers contain?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-05T09:35:07.234+0000",
                    "updated": "2019-04-05T09:35:07.234+0000",
                    "started": "2019-04-05T09:35:07.233+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223510",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223569",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on issue #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#issuecomment-480257441\n \n \n   It is a single empty buffer. It's the same problem as [ARROW-4213](https://issues.apache.org/jira/browse/ARROW-4213) - the body tag gets written even though there is not a body. It looks like the IpcPayload's body length field is corrupted - when the IpcPayload is allocated in `GetSchemaPayload`, the fields aren't zero-initialized.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-05T12:28:49.823+0000",
                    "updated": "2019-04-05T12:28:49.823+0000",
                    "started": "2019-04-05T12:28:49.823+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223569",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on issue #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#issuecomment-480257441\n \n \n   It is a single empty buffer. It's the same problem as [ARROW-4213](https://issues.apache.org/jira/browse/ARROW-4213) - the body tag gets written even though there is not a body. It looks like the IpcPayload's body length field is corrupted - when the IpcPayload is allocated in `GetSchemaPayload`, the fields aren't zero-initialized.\r\n   \r\n   This diff fixes it:\r\n   \r\n   ```diff\r\n   --- a/cpp/src/arrow/ipc/writer.cc\r\n   +++ b/cpp/src/arrow/ipc/writer.cc\r\n   @@ -535,7 +535,7 @@ Status WriteIpcPayload(const IpcPayload& payload, io::OutputStream* dst,\r\n    Status GetSchemaPayloads(const Schema& schema, MemoryPool* pool, DictionaryMemo* out_memo,\r\n                             std::vector<IpcPayload>* out_payloads) {\r\n      DictionaryMemo dictionary_memo;\r\n   -  IpcPayload payload;\r\n   +  IpcPayload payload{};\r\n    \r\n      out_payloads->clear();\r\n      payload.type = Message::SCHEMA;\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-05T12:29:36.761+0000",
                    "updated": "2019-04-05T12:29:36.761+0000",
                    "started": "2019-04-05T12:29:36.761+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223570",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/223572",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#issuecomment-480258222\n \n \n   Thanks @lihalite. I'll try it out.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-05T12:31:33.979+0000",
                    "updated": "2019-04-05T12:31:33.979+0000",
                    "started": "2019-04-05T12:31:33.979+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223572",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/224304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#issuecomment-480808045\n \n \n   I have a lull in the airport today so I'll spend a some time reviewing this since it's important\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-08T12:19:26.107+0000",
                    "updated": "2019-04-08T12:19:26.107+0000",
                    "started": "2019-04-08T12:19:26.107+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "224304",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/224319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#issuecomment-480831017\n \n \n   Rebased and hopefully fixed the schema-message-with-body issue.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-08T13:27:23.043+0000",
                    "updated": "2019-04-08T13:27:23.043+0000",
                    "started": "2019-04-08T13:27:23.042+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "224319",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/224321",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#discussion_r273017454\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.cc\n ##########\n @@ -58,86 +57,81 @@ struct ClientRpc {\n     /// XXX workaround until we have a handshake in Connect\n     context.set_wait_for_ready(true);\n   }\n+\n+  Status IOError(const std::string& error_message) {\n+    std::stringstream ss;\n+    ss << error_message << context.debug_error_string();\n+    return Status::IOError(ss.str());\n+  }\n };\n \n-class FlightStreamReader : public RecordBatchReader {\n+class FlightIpcMessageReader : public ipc::MessageReader {\n  public:\n-  FlightStreamReader(std::unique_ptr<ClientRpc> rpc,\n-                     const std::shared_ptr<Schema>& schema,\n-                     std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream)\n-      : rpc_(std::move(rpc)),\n-        stream_finished_(false),\n-        schema_(schema),\n-        stream_(std::move(stream)) {}\n-\n-  std::shared_ptr<Schema> schema() const override { return schema_; }\n-\n-  Status ReadNext(std::shared_ptr<RecordBatch>* out) override {\n-    internal::FlightData data;\n+  FlightIpcMessageReader(std::unique_ptr<ClientRpc> rpc,\n+                         std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream)\n+      : rpc_(std::move(rpc)), stream_(std::move(stream)), stream_finished_(false) {}\n \n+  Status ReadNextMessage(std::unique_ptr<ipc::Message>* out) override {\n     if (stream_finished_) {\n       *out = nullptr;\n       return Status::OK();\n     }\n-\n-    // Pretend to be pb::FlightData and intercept in SerializationTraits\n-    if (stream_->Read(reinterpret_cast<pb::FlightData*>(&data))) {\n-      std::unique_ptr<ipc::Message> message;\n-\n-      // Validate IPC message\n-      RETURN_NOT_OK(ipc::Message::Open(data.metadata, data.body, &message));\n-      if (message->type() == ipc::Message::Type::RECORD_BATCH) {\n-        return ipc::ReadRecordBatch(*message, schema_, out);\n-      } else if (message->type() == ipc::Message::Type::SCHEMA) {\n-        return Status(StatusCode::Invalid, \"Flight stream changed schema midway\");\n-      } else {\n-        return Status(StatusCode::Invalid, \"Unrecognized message in Flight stream\");\n-      }\n-    } else {\n+    internal::FlightData data;\n+    if (!internal::ReadPayload(stream_.get(), &data)) {\n       // Stream is completed\n       stream_finished_ = true;\n       *out = nullptr;\n-      return internal::FromGrpcStatus(stream_->Finish());\n+      return Status::OK();\n     }\n+    std::unique_ptr<ipc::Message> message;\n+    // Validate IPC message\n+    RETURN_NOT_OK(data.OpenMessage(&message));\n+    *out = std::move(message);\n \n Review comment:\n   could also have done `data.OpenMessage(out)`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-08T13:28:17.871+0000",
                    "updated": "2019-04-08T13:28:17.871+0000",
                    "started": "2019-04-08T13:28:17.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "224321",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/224322",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#discussion_r273017843\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.cc\n ##########\n @@ -58,86 +57,81 @@ struct ClientRpc {\n     /// XXX workaround until we have a handshake in Connect\n     context.set_wait_for_ready(true);\n   }\n+\n+  Status IOError(const std::string& error_message) {\n+    std::stringstream ss;\n+    ss << error_message << context.debug_error_string();\n+    return Status::IOError(ss.str());\n+  }\n };\n \n-class FlightStreamReader : public RecordBatchReader {\n+class FlightIpcMessageReader : public ipc::MessageReader {\n  public:\n-  FlightStreamReader(std::unique_ptr<ClientRpc> rpc,\n-                     const std::shared_ptr<Schema>& schema,\n-                     std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream)\n-      : rpc_(std::move(rpc)),\n-        stream_finished_(false),\n-        schema_(schema),\n-        stream_(std::move(stream)) {}\n-\n-  std::shared_ptr<Schema> schema() const override { return schema_; }\n-\n-  Status ReadNext(std::shared_ptr<RecordBatch>* out) override {\n-    internal::FlightData data;\n+  FlightIpcMessageReader(std::unique_ptr<ClientRpc> rpc,\n+                         std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream)\n+      : rpc_(std::move(rpc)), stream_(std::move(stream)), stream_finished_(false) {}\n \n+  Status ReadNextMessage(std::unique_ptr<ipc::Message>* out) override {\n     if (stream_finished_) {\n       *out = nullptr;\n       return Status::OK();\n     }\n-\n-    // Pretend to be pb::FlightData and intercept in SerializationTraits\n-    if (stream_->Read(reinterpret_cast<pb::FlightData*>(&data))) {\n-      std::unique_ptr<ipc::Message> message;\n-\n-      // Validate IPC message\n-      RETURN_NOT_OK(ipc::Message::Open(data.metadata, data.body, &message));\n-      if (message->type() == ipc::Message::Type::RECORD_BATCH) {\n-        return ipc::ReadRecordBatch(*message, schema_, out);\n-      } else if (message->type() == ipc::Message::Type::SCHEMA) {\n-        return Status(StatusCode::Invalid, \"Flight stream changed schema midway\");\n-      } else {\n-        return Status(StatusCode::Invalid, \"Unrecognized message in Flight stream\");\n-      }\n-    } else {\n+    internal::FlightData data;\n+    if (!internal::ReadPayload(stream_.get(), &data)) {\n       // Stream is completed\n       stream_finished_ = true;\n       *out = nullptr;\n-      return internal::FromGrpcStatus(stream_->Finish());\n+      return Status::OK();\n     }\n+    std::unique_ptr<ipc::Message> message;\n+    // Validate IPC message\n+    RETURN_NOT_OK(data.OpenMessage(&message));\n+    *out = std::move(message);\n+    return Status::OK();\n   }\n \n- private:\n+ protected:\n   // The RPC context lifetime must be coupled to the ClientReader\n   std::unique_ptr<ClientRpc> rpc_;\n-\n-  bool stream_finished_;\n-  std::shared_ptr<Schema> schema_;\n   std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream_;\n+  bool stream_finished_;\n };\n \n-/// \\brief A RecordBatchWriter implementation that writes to a Flight\n-/// DoPut stream.\n-class FlightPutWriter::FlightPutWriterImpl : public ipc::RecordBatchWriter {\n+/// A IpcPayloadWriter implementation that writes to a DoPut stream\n+class DoPutPayloadWriter : public ipc::internal::IpcPayloadWriter {\n  public:\n-  explicit FlightPutWriterImpl(std::unique_ptr<ClientRpc> rpc,\n-                               const FlightDescriptor& descriptor,\n-                               const std::shared_ptr<Schema>& schema,\n-                               MemoryPool* pool = default_memory_pool())\n-      : rpc_(std::move(rpc)), descriptor_(descriptor), schema_(schema), pool_(pool) {}\n+  DoPutPayloadWriter(const FlightDescriptor& descriptor, std::unique_ptr<ClientRpc> rpc,\n+                     std::unique_ptr<protocol::PutResult> response,\n+                     std::unique_ptr<grpc::ClientWriter<pb::FlightData>> writer)\n+      : descriptor_(descriptor),\n+        rpc_(std::move(rpc)),\n+        response_(std::move(response)),\n+        writer_(std::move(writer)),\n+        first_payload_(true) {}\n+\n+  ~DoPutPayloadWriter() override = default;\n+\n+  Status Start() override { return Status::OK(); }\n \n-  Status WriteRecordBatch(const RecordBatch& batch, bool allow_64bit = false) override {\n+  Status WritePayload(const ipc::internal::IpcPayload& ipc_payload) override {\n     FlightPayload payload;\n-    RETURN_NOT_OK(\n-        ipc::internal::GetRecordBatchPayload(batch, pool_, &payload.ipc_message));\n+    payload.ipc_message = ipc_payload;\n+\n+    if (first_payload_) {\n+      // First Flight message needs to encore the Flight descriptor\n+      DCHECK_EQ(ipc_payload.type, ipc::Message::SCHEMA);\n+      std::string str_descr;\n+      {\n+        pb::FlightDescriptor pb_descr;\n+        RETURN_NOT_OK(internal::ToProto(descriptor_, &pb_descr));\n+        pb_descr.SerializeToString(&str_descr);\n \n Review comment:\n   doesn't this return `bool`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-08T13:28:18.766+0000",
                    "updated": "2019-04-08T13:28:18.766+0000",
                    "started": "2019-04-08T13:28:18.765+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "224322",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/224323",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#discussion_r273020874\n \n \n\n ##########\n File path: cpp/src/arrow/flight/flight-test.cc\n ##########\n @@ -158,66 +222,56 @@ TEST_F(TestFlightClient, ListFlights) {\n   ASSERT_TRUE(info == nullptr);\n \n   ASSERT_OK(listing->Next(&info));\n+  ASSERT_TRUE(info == nullptr);\n }\n \n TEST_F(TestFlightClient, GetFlightInfo) {\n-  FlightDescriptor descr{FlightDescriptor::PATH, \"\", {\"foo\", \"bar\"}};\n+  auto descr = FlightDescriptor::Path({\"examples\", \"ints\"});\n   std::unique_ptr<FlightInfo> info;\n-  ASSERT_OK(client_->GetFlightInfo(descr, &info));\n \n-  ASSERT_TRUE(info != nullptr);\n+  ASSERT_OK(client_->GetFlightInfo(descr, &info));\n+  ASSERT_NE(info, nullptr);\n \n   std::vector<FlightInfo> flights = ExampleFlightInfo();\n   AssertEqual(flights[0], *info);\n }\n \n-TEST(TestFlightProtocol, FlightDescriptor) {\n-  FlightDescriptor descr_test;\n-  pb::FlightDescriptor pb_descr;\n-\n-  FlightDescriptor descr1{FlightDescriptor::PATH, \"\", {\"foo\", \"bar\"}};\n-  ASSERT_OK(internal::ToProto(descr1, &pb_descr));\n-  ASSERT_OK(internal::FromProto(pb_descr, &descr_test));\n-  AssertEqual(descr1, descr_test);\n-\n-  FlightDescriptor descr2{FlightDescriptor::CMD, \"command\", {}};\n-  ASSERT_OK(internal::ToProto(descr2, &pb_descr));\n-  ASSERT_OK(internal::FromProto(pb_descr, &descr_test));\n-  AssertEqual(descr2, descr_test);\n-}\n-\n-TEST_F(TestFlightClient, DoGet) {\n-  FlightDescriptor descr{FlightDescriptor::PATH, \"\", {\"foo\", \"bar\"}};\n+TEST_F(TestFlightClient, GetFlightInfoNotFound) {\n+  auto descr = FlightDescriptor::Path({\"examples\", \"things\"});\n   std::unique_ptr<FlightInfo> info;\n-  ASSERT_OK(client_->GetFlightInfo(descr, &info));\n-\n-  // Two endpoints in the example FlightInfo\n-  ASSERT_EQ(2, info->endpoints().size());\n-\n-  Ticket ticket = info->endpoints()[0].ticket;\n-  AssertEqual(Ticket{\"ticket-id-1\"}, ticket);\n+  // XXX Ideally should be Invalid (or KeyError), but gRPC doesn't support\n+  // multiple error codes.\n \n Review comment:\n   we could theoretically encode some standardized structure in the error messages so that the actual problem can be \"unboxed\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-08T13:28:18.787+0000",
                    "updated": "2019-04-08T13:28:18.787+0000",
                    "started": "2019-04-08T13:28:18.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "224323",
                    "issueId": "13183901"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/worklog/224324",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4113: ARROW-3200: [C++] Support dictionaries in Flight streams\nURL: https://github.com/apache/arrow/pull/4113#discussion_r273021957\n \n \n\n ##########\n File path: cpp/src/arrow/flight/server.cc\n ##########\n @@ -210,47 +201,45 @@ class FlightServiceImpl : public FlightService::Service {\n       return grpc::Status(grpc::StatusCode::NOT_FOUND, \"No data in this flight\");\n     }\n \n-    // Write the schema as the first message in the stream\n-    FlightPayload schema_payload;\n+    // Write the schema as the first message(s) in the stream\n+    // (several messages may be required if there are dictionaries)\n     MemoryPool* pool = default_memory_pool();\n-    ipc::DictionaryMemo dictionary_memo;\n-    GRPC_RETURN_NOT_OK(ipc::internal::GetSchemaPayload(\n-        *data_stream->schema(), pool, &dictionary_memo, &schema_payload.ipc_message));\n-\n-    // Pretend to be pb::FlightData, we cast back to FlightPayload in\n-    // SerializationTraits\n-#ifndef _WIN32\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wstrict-aliasing\"\n-#endif\n-    writer->Write(*reinterpret_cast<const pb::FlightData*>(&schema_payload),\n-                  grpc::WriteOptions());\n+    std::vector<ipc::internal::IpcPayload> ipc_payloads;\n+    GRPC_RETURN_NOT_OK(\n+        ipc::internal::GetSchemaPayloads(*data_stream->schema(), pool, &ipc_payloads));\n+\n+    for (auto& ipc_payload : ipc_payloads) {\n+      // For DoGet, descriptor doesn't need to be written out\n+      FlightPayload schema_payload;\n+      schema_payload.ipc_message = std::move(ipc_payload);\n+\n+      if (!internal::WritePayload(schema_payload, writer)) {\n+        // Connection terminated?  XXX return error code?\n \n Review comment:\n   does Finish() return it here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-08T13:28:18.932+0000",
                    "updated": "2019-04-08T13:28:18.932+0000",
                    "started": "2019-04-08T13:28:18.931+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "224324",
                    "issueId": "13183901"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 28200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4098fed7[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@34ccb345[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e16e815[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2f912a09[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d8e6bb7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6a0be33a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2394f82e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5734f37[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b3e5ffd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2e197d93[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a48a5f6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@355d5d7f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 28200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Apr 09 09:52:59 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-04-09T09:52:59.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3200/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-09-09T17:50:07.000+0000",
        "updated": "2019-04-11T17:00:04.000+0000",
        "timeoriginalestimate": null,
        "description": "Some work is needed to handle schemas sent separately from their dictionaries, i.e. ARROW-3144. I'm going to punt on implementing support for this in the initial C++ Flight client",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 28200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add support for reading Flight streams with dictionaries",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/comment/16761811",
                    "id": "16761811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "cc [~pitrou], for thoughts. My opinion is that we should make {{arrow::DictionaryType}} into a virtual interface and define a {{MutableDictionary}} subclass to permit the Flight client or server to add the dictionary when the message comes across the wire. This will require some refactoring in the IPC code to permit schemas to be decoded while leaving the dictionaries temporarily null",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-06T15:02:03.263+0000",
                    "updated": "2019-02-06T15:02:03.263+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/comment/16803876",
                    "id": "16803876",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Some kind of \"IncompleteDictionary\" would probably be useful for ARROW-3408 as well, to denote a dictionary whose values are still (partially?) unknown.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-03-28T12:23:22.427+0000",
                    "updated": "2019-03-28T12:23:22.427+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183901/comment/16813198",
                    "id": "16813198",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 4113\n[https://github.com/apache/arrow/pull/4113]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-04-09T09:52:59.355+0000",
                    "updated": "2019-04-09T09:52:59.355+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3xw0n:",
        "customfield_12314139": null
    }
}