{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13086623",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623",
    "key": "ARROW-1209",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12554766",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12554766",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13217576",
                    "key": "ARROW-4668",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217576",
                    "fields": {
                        "summary": "[C++] Support GCP BigQuery Storage API",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [
            {
                "id": "13238940",
                "key": "ARROW-5569",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13238940",
                "fields": {
                    "summary": "[C++] import avro C++ code to code base.",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                        "description": "The issue is open and ready for the assignee to start work on it.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                        "name": "Open",
                        "id": "1",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                            "id": 2,
                            "key": "new",
                            "colorName": "blue-gray",
                            "name": "To Do"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13238942",
                "key": "ARROW-5570",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13238942",
                "fields": {
                    "summary": "[C++] Update Avro C++ code to conform to Arrow style guide and get it compiling.",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                        "description": "The issue is open and ready for the assignee to start work on it.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                        "name": "Open",
                        "id": "1",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                            "id": 2,
                            "key": "new",
                            "colorName": "blue-gray",
                            "name": "To Do"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            }
        ],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 25800,
            "total": 25800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1209/votes",
            "votes": 2,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/worklog/195563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-461359639\n \n \n   Would (@mariusvniekerk @wesm @cpcloud @xhochy ) anybody mind if I try to pick this up?  It seems to have lost momentum...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-07T10:13:17.904+0000",
                    "updated": "2019-02-07T10:13:17.904+0000",
                    "started": "2019-02-07T10:13:17.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "195563",
                    "issueId": "13086623"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/worklog/195631",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-461401420\n \n \n   @emkornfield Feel free to pick this up. Highly appreciated!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-07T12:33:25.414+0000",
                    "updated": "2019-02-07T12:33:25.414+0000",
                    "started": "2019-02-07T12:33:25.413+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "195631",
                    "issueId": "13086623"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/worklog/196062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mariusvniekerk commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-461657082\n \n \n   Yeah I sadly no longer have time to work on this. There have been some prs landed on avro in the cpp implementation that should allow us to make our own datafile variants for things that aren't FILE*.  Not entirely sure if that is in a released version yet. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-08T01:18:44.850+0000",
                    "updated": "2019-02-08T01:18:44.850+0000",
                    "started": "2019-02-08T01:18:44.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196062",
                    "issueId": "13086623"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/worklog/196063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mariusvniekerk commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-461657276\n \n \n   I can see if I can rebase this to give you a cleaner state to work from. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-08T01:19:45.369+0000",
                    "updated": "2019-02-08T01:19:45.369+0000",
                    "started": "2019-02-08T01:19:45.369+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196063",
                    "issueId": "13086623"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/worklog/196106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-461706718\n \n \n   @mariusvniekerk if you haven't had a chance to rebase, that is OK, I'll probably start looking at this over the weekend.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-08T06:41:15.951+0000",
                    "updated": "2019-02-08T06:41:15.951+0000",
                    "started": "2019-02-08T06:41:15.950+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196106",
                    "issueId": "13086623"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/worklog/196256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mariusvniekerk commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-461837152\n \n \n   okay, rebased it,  probably doesn't compile right now.  good luck!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-08T15:21:05.966+0000",
                    "updated": "2019-02-08T15:21:05.966+0000",
                    "started": "2019-02-08T15:21:05.965+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196256",
                    "issueId": "13086623"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/worklog/243638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-493233499\n \n \n   Closing this for now since it needs someone to pick it up (maybe @emkornfield?)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-16T21:11:34.795+0000",
                    "updated": "2019-05-16T21:11:34.795+0000",
                    "started": "2019-05-16T21:11:34.794+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "243638",
                    "issueId": "13086623"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/worklog/243639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-16T21:11:36.780+0000",
                    "updated": "2019-05-16T21:11:36.780+0000",
                    "started": "2019-05-16T21:11:36.780+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "243639",
                    "issueId": "13086623"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@10070332[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@152bc5a0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7577139c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3ebade57[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a0076bf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5b3c27d7[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@161a34df[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7e3a082d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@77062cdb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4dbebf73[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a45d6d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2410dcd2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 25800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Dec 19 15:15:28 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1209/watchers",
            "watchCount": 12,
            "isWatching": false
        },
        "created": "2017-07-12T16:05:02.000+0000",
        "updated": "2021-08-04T08:32:49.000+0000",
        "timeoriginalestimate": null,
        "description": "This would be useful for streaming systems that need to consume or produce Avro in C/C++",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement converter between Arrow record batches and Avro records",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16144701",
                    "id": "16144701",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mariusvniekerk",
                        "name": "mariusvniekerk",
                        "key": "mariusvniekerk",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Marius van Niekerk",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I can take a stab at this.  Most of the work is similar to what i've previously done for cyavro.\n\nIs the intention to make Arrow optionally depend on libavro?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mariusvniekerk",
                        "name": "mariusvniekerk",
                        "key": "mariusvniekerk",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Marius van Niekerk",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-08-29T03:54:04.878+0000",
                    "updated": "2017-08-29T03:54:04.878+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16144913",
                    "id": "16144913",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "This depends on where the code shall live. I guess for a first start, we should develop it inside of Arrow and in the long-term interact with the Avro project and see if we should move it there.\n\nFor a start: yes, the intention is to make Arrow optionally dependent on {{libarrow}}.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2017-08-29T08:25:16.771+0000",
                    "updated": "2017-08-29T08:25:16.771+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16145385",
                    "id": "16145385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "We should create an {{src/arrow/adapters}} directory where we can add child libraries for adapting to external data sources. As far as the build system is concerned, we can make each adapter optional, similar to how {{libarrow_python}} and {{libarrow_gpu}} are optional. So we can have {{libarrow_avro}}. It'll probably be simplest to maintain this code in Arrow for the foreseeable future until it isn't changing very much (since Avro isn't releasing as often as Arrow). \n\nFWIW at some point in the next year I'm going to build a {{libarrow_sqlite}}, {{libarrow_postgres}}, and some other DB connector child libraries. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-08-29T14:34:32.328+0000",
                    "updated": "2017-08-29T14:37:12.773+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16171666",
                    "id": "16171666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user mariusvniekerk commented on the issue:\n\n    https://github.com/apache/arrow/pull/1026\n  \n    Some more investigation.\n    \n    There are two kinds of avro.  Avro memory buffers (streams) and Avro datafiles.\n    \n    Most of the implementation of the Avro datafile handling is locked up in the private implementation of `avro-c`  (header reading, compression codecs, Avro sync markers).  As such the only way we can interact with that short of reimplementing large parts of it is to restrict ourselves to things that can provide a c `FILE*` reference to the datafile.\n    \n    The second case is much simpler to handle since it assumes a preshared Avro schema.\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-09-19T13:18:23.561+0000",
                    "updated": "2017-09-19T13:18:23.561+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16171759",
                    "id": "16171759",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user wesm commented on the issue:\n\n    https://github.com/apache/arrow/pull/1026\n  \n    Wow, providing a `FILE*`! That is incredibly restrictive. I will have to poke around at the C implementation and also look in other Avro users like Impala https://github.com/apache/incubator-impala/blob/master/be/src/exec/hdfs-avro-scanner.cc\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-09-19T14:04:16.438+0000",
                    "updated": "2017-09-19T14:04:16.438+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16172609",
                    "id": "16172609",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user mariusvniekerk commented on the issue:\n\n    https://github.com/apache/arrow/pull/1026\n  \n    Yeah the implementation in impala seems to provide its own codecs.  The cpp implementation in libavro-cpp doesn't support all the codecs yet so i can see why impala/kudu reimplemented these.  \n    \n    I assume that the impala cpp implementation is too tied to LLVM to be easily moved upstream to avro-cpp itself?\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-09-20T01:58:44.862+0000",
                    "updated": "2017-09-20T01:58:44.862+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16172610",
                    "id": "16172610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user mariusvniekerk commented on the issue:\n\n    https://github.com/apache/arrow/pull/1026\n  \n    cyavro provides support for python file-like objects by basically making a void* and using fmemopen on it to get the FILE*\n\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-09-20T01:59:39.592+0000",
                    "updated": "2017-09-20T01:59:39.592+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16172621",
                    "id": "16172621",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user wesm commented on the issue:\n\n    https://github.com/apache/arrow/pull/1026\n  \n    Hm, yeah I'm looking at avro-c and it's not very Windows-friendly. We can use FILE* on Windows in Arrow but that won't work on files over 2GB. But maybe that's OK. \n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-09-20T02:12:43.325+0000",
                    "updated": "2017-09-20T02:12:43.325+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16217392",
                    "id": "16217392",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-339084150\n \n \n   Now that ARROW-1114 has been merged we should clean up the toolchain here and get a first cut of this adapter built\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-24T18:19:40.107+0000",
                    "updated": "2017-10-24T18:19:40.107+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16218641",
                    "id": "16218641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "mariusvniekerk commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-339332258\n \n \n   yeah i'll rebase this and see what needs to change.  Think we were missing libjansson last time i touched this.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-25T13:37:14.106+0000",
                    "updated": "2017-10-25T13:37:14.106+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16235607",
                    "id": "16235607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-341398163\n \n \n   Is Jansson a dependency of AVRO or why are we pulling it in here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-02T11:51:51.761+0000",
                    "updated": "2017-11-02T11:51:51.761+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16235723",
                    "id": "16235723",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-341420592\n \n \n   Since this is an optional dependency, I would be OK with not having an ExternalProject from Avro and instead using a system library or one from conda-forge when building \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-02T13:28:43.497+0000",
                    "updated": "2017-11-02T13:28:43.497+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16236240",
                    "id": "16236240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "mariusvniekerk commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-341503699\n \n \n   Jansson is a dep of avro\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-02T17:46:14.259+0000",
                    "updated": "2017-11-02T17:46:14.259+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16236342",
                    "id": "16236342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "mariusvniekerk commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-341517359\n \n \n   @wesm is there an example in that repo of how to do the correct cmake stuff for this optional dep?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-02T18:31:59.261+0000",
                    "updated": "2017-11-02T18:31:59.261+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16236471",
                    "id": "16236471",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on a change in pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#discussion_r148509332\n \n \n\n ##########\n File path: cpp/cmake_modules/FindJansson.cmake\n ##########\n @@ -0,0 +1,94 @@\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+# Tries to find Snappy headers and libraries.\n \n Review comment:\n   Snappy ;)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-02T19:40:18.064+0000",
                    "updated": "2017-11-02T19:40:18.064+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16236474",
                    "id": "16236474",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-341535712\n \n \n   @mariusvniekerk `arrow_gpu` is a good example: https://github.com/apache/arrow/blob/master/cpp/src/arrow/CMakeLists.txt#L58-L62 but looking at the PR, everything seems to be done exactly the same. So I would say: Keep it as it is.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-02T19:41:24.040+0000",
                    "updated": "2017-11-02T19:41:24.040+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16238932",
                    "id": "16238932",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on a change in pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#discussion_r148928462\n \n \n\n ##########\n File path: cpp/cmake_modules/ThirdpartyToolchain.cmake\n ##########\n @@ -645,6 +646,58 @@ endif()\n \n if (ARROW_AVRO)\n   # ----------------------------------------------------------------------\n+  # Jansson\n+  if(\"${JANNSON_HOME}\" STREQUAL \"\")\n+    set(JANNSON_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/jannson_ep/src/jannson_ep-install\")\n+    set(JANNSON_HOME \"${JANNSON_PREFIX}\")\n+    set(JANNSON_INCLUDE_DIR \"${JANNSON_PREFIX}/include\")\n+    if (MSVC)\n+      set(JANNSON_STATIC_LIB_NAME jannson_static)\n+    else()\n+      set(JANNSON_STATIC_LIB_NAME jannson)\n+    endif()\n+    set(JANNSON_STATIC_LIB \"${JANNSON_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}${JANNSON_STATIC_LIB_NAME}${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n+    set(JANNSON_SRC_URL \"http://www.digip.org/jansson/releases/jansson-${JANNSON_VERSION}.tar.gz\")\n+\n+    if (${UPPERCASE_BUILD_TYPE} EQUAL \"RELEASE\")\n+      if (APPLE)\n+        set(JANNSON_CXXFLAGS \"CXXFLAGS='-DNDEBUG -O1'\")\n \n Review comment:\n   Why this differentiation? Maybe copy/paste from snappy? (There we need this because of a compiler bug).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T11:37:08.516+0000",
                    "updated": "2017-11-04T11:37:08.516+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16239239",
                    "id": "16239239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "mariusvniekerk commented on a change in pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#discussion_r148941385\n \n \n\n ##########\n File path: cpp/cmake_modules/ThirdpartyToolchain.cmake\n ##########\n @@ -645,6 +646,58 @@ endif()\n \n if (ARROW_AVRO)\n   # ----------------------------------------------------------------------\n+  # Jansson\n+  if(\"${JANNSON_HOME}\" STREQUAL \"\")\n+    set(JANNSON_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/jannson_ep/src/jannson_ep-install\")\n+    set(JANNSON_HOME \"${JANNSON_PREFIX}\")\n+    set(JANNSON_INCLUDE_DIR \"${JANNSON_PREFIX}/include\")\n+    if (MSVC)\n+      set(JANNSON_STATIC_LIB_NAME jannson_static)\n+    else()\n+      set(JANNSON_STATIC_LIB_NAME jannson)\n+    endif()\n+    set(JANNSON_STATIC_LIB \"${JANNSON_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}${JANNSON_STATIC_LIB_NAME}${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n+    set(JANNSON_SRC_URL \"http://www.digip.org/jansson/releases/jansson-${JANNSON_VERSION}.tar.gz\")\n+\n+    if (${UPPERCASE_BUILD_TYPE} EQUAL \"RELEASE\")\n+      if (APPLE)\n+        set(JANNSON_CXXFLAGS \"CXXFLAGS='-DNDEBUG -O1'\")\n \n Review comment:\n   oh completely copy paste from snappy\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T21:07:09.994+0000",
                    "updated": "2017-11-04T21:07:09.994+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16239241",
                    "id": "16239241",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "mariusvniekerk commented on a change in pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#discussion_r148941385\n \n \n\n ##########\n File path: cpp/cmake_modules/ThirdpartyToolchain.cmake\n ##########\n @@ -645,6 +646,58 @@ endif()\n \n if (ARROW_AVRO)\n   # ----------------------------------------------------------------------\n+  # Jansson\n+  if(\"${JANNSON_HOME}\" STREQUAL \"\")\n+    set(JANNSON_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/jannson_ep/src/jannson_ep-install\")\n+    set(JANNSON_HOME \"${JANNSON_PREFIX}\")\n+    set(JANNSON_INCLUDE_DIR \"${JANNSON_PREFIX}/include\")\n+    if (MSVC)\n+      set(JANNSON_STATIC_LIB_NAME jannson_static)\n+    else()\n+      set(JANNSON_STATIC_LIB_NAME jannson)\n+    endif()\n+    set(JANNSON_STATIC_LIB \"${JANNSON_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}${JANNSON_STATIC_LIB_NAME}${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n+    set(JANNSON_SRC_URL \"http://www.digip.org/jansson/releases/jansson-${JANNSON_VERSION}.tar.gz\")\n+\n+    if (${UPPERCASE_BUILD_TYPE} EQUAL \"RELEASE\")\n+      if (APPLE)\n+        set(JANNSON_CXXFLAGS \"CXXFLAGS='-DNDEBUG -O1'\")\n \n Review comment:\n   oh completely copy paste from snappy :P\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T21:07:34.393+0000",
                    "updated": "2017-11-04T21:07:34.393+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16239250",
                    "id": "16239250",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#discussion_r148941970\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/avro/adapter.cc\n ##########\n @@ -0,0 +1,325 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <sstream>\n+#include <arrow/util/logging.h>\n+\n+#include \"arrow/adapters/avro/adapter.h\"\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"avro.h\"\n+\n+namespace arrow {\n+namespace adapters {\n+namespace avro {\n+\n+class AvroArrowReader::AvroArrowReaderImpl {\n+public:\n+  Status GenerateAvroSchema(avro_file_reader_t *file_reader,\n+                            std::shared_ptr<DataType> *out) {\n+    auto wschema = avro_file_reader_get_writer_schema(*file_reader);\n+    std::shared_ptr<DataType> arrow_schema = get_arrow_type(wschema);\n+    // make array builder\n+    out = &arrow_schema;\n \n Review comment:\n   This will not work and probably falls under the umbrella of \"undefined behavior\" somewhere in the standard. `arrow_schema` is a stack allocated variable and it will be deallocated upon scope exit which in this case is when the function returns. That means that `out` will be pointing to an invalid memory location.\r\n   \r\n   What you want to do is:\r\n   \r\n   ```\r\n   *out = get_arrow_type(wschema);\r\n   ```\r\n   this operation's behavior is documented here: http://en.cppreference.com/w/cpp/memory/shared_ptr/operator%3D.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T21:36:53.513+0000",
                    "updated": "2017-11-04T21:36:53.513+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16239251",
                    "id": "16239251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#discussion_r148941970\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/avro/adapter.cc\n ##########\n @@ -0,0 +1,325 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <sstream>\n+#include <arrow/util/logging.h>\n+\n+#include \"arrow/adapters/avro/adapter.h\"\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"avro.h\"\n+\n+namespace arrow {\n+namespace adapters {\n+namespace avro {\n+\n+class AvroArrowReader::AvroArrowReaderImpl {\n+public:\n+  Status GenerateAvroSchema(avro_file_reader_t *file_reader,\n+                            std::shared_ptr<DataType> *out) {\n+    auto wschema = avro_file_reader_get_writer_schema(*file_reader);\n+    std::shared_ptr<DataType> arrow_schema = get_arrow_type(wschema);\n+    // make array builder\n+    out = &arrow_schema;\n \n Review comment:\n   This will not work and probably falls under the umbrella of \"undefined behavior\" somewhere in the standard. `arrow_schema` is a stack allocated variable and it will be deallocated upon scope exit which in this case is when the function returns. That means that `out` will be pointing to an invalid memory location when this function returns.\r\n   \r\n   What you want to do is:\r\n   \r\n   ```\r\n   *out = get_arrow_type(wschema);\r\n   ```\r\n   this operation's behavior is documented here: http://en.cppreference.com/w/cpp/memory/shared_ptr/operator%3D.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T21:37:10.792+0000",
                    "updated": "2017-11-04T21:37:10.792+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16239254",
                    "id": "16239254",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#discussion_r148942055\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/avro/adapter.cc\n ##########\n @@ -0,0 +1,325 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <sstream>\n+#include <arrow/util/logging.h>\n+\n+#include \"arrow/adapters/avro/adapter.h\"\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"avro.h\"\n+\n+namespace arrow {\n+namespace adapters {\n+namespace avro {\n+\n+class AvroArrowReader::AvroArrowReaderImpl {\n+public:\n+  Status GenerateAvroSchema(avro_file_reader_t *file_reader,\n+                            std::shared_ptr<DataType> *out) {\n+    auto wschema = avro_file_reader_get_writer_schema(*file_reader);\n+    std::shared_ptr<DataType> arrow_schema = get_arrow_type(wschema);\n+    // make array builder\n+    out = &arrow_schema;\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> get_arrow_type(avro_schema_t schema) {\n+    avro_schema_t child;\n+    size_t size, idx;\n+    int64_t length;\n+    const char *name;\n \n Review comment:\n   There's no need to define these variables at the top of the function since wherever you use them you always return early. Also, I think it's easier to follow if variables are declared as close as possible to where they are used.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T21:38:46.468+0000",
                    "updated": "2017-11-04T21:38:46.468+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16239258",
                    "id": "16239258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#discussion_r148942080\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/avro/adapter.cc\n ##########\n @@ -0,0 +1,325 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <sstream>\n+#include <arrow/util/logging.h>\n+\n+#include \"arrow/adapters/avro/adapter.h\"\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"avro.h\"\n+\n+namespace arrow {\n+namespace adapters {\n+namespace avro {\n+\n+class AvroArrowReader::AvroArrowReaderImpl {\n+public:\n+  Status GenerateAvroSchema(avro_file_reader_t *file_reader,\n+                            std::shared_ptr<DataType> *out) {\n+    auto wschema = avro_file_reader_get_writer_schema(*file_reader);\n+    std::shared_ptr<DataType> arrow_schema = get_arrow_type(wschema);\n+    // make array builder\n+    out = &arrow_schema;\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> get_arrow_type(avro_schema_t schema) {\n+    avro_schema_t child;\n+    size_t size, idx;\n+    int64_t length;\n+    const char *name;\n+\n+    auto avro_type = schema->type;\n+    switch (avro_type) {\n+      case AVRO_BOOLEAN:\n+        return boolean();\n+      case AVRO_INT32:\n+        return int32();\n+      case AVRO_INT64:\n+        return int64();\n+      case AVRO_FLOAT:\n+        return float32();\n+      case AVRO_DOUBLE:\n+        return float64();\n+      case AVRO_STRING:\n+        return utf8();\n+      case AVRO_BYTES:\n+        return binary();\n+      case AVRO_FIXED: {\n+        length = avro_schema_fixed_size(schema);\n+        return fixed_size_binary(length);\n+      }\n+      case AVRO_ARRAY: {\n+        auto elem_type = get_arrow_type(avro_schema_array_items(schema));\n+        return list(elem_type);\n+      }\n+\n+      case AVRO_MAP: {\n+        auto value_type = get_arrow_type(avro_schema_map_values(schema));\n+        auto fields = {field(\"key\", utf8()), field(\"value\", value_type)};\n+        return list(struct_(fields));\n+      }\n+\n+      case AVRO_UNION: {\n+        size = avro_schema_union_size(schema);\n+        auto fields = std::vector<std::shared_ptr<Field>>();\n+        std::vector<uint8_t> type_codes;\n+\n+        for (idx = 0; idx < size; idx++) {\n+          child = avro_schema_union_branch(schema, idx);\n+          auto f = field(\"_union_\" + std::to_string(idx),\n+                         get_arrow_type(child));\n+          fields.push_back(f);\n+          type_codes.push_back((uint8_t) idx);\n+        };\n+        return union_(fields, type_codes);\n+      }\n+\n+      case AVRO_RECORD: {\n+        size = avro_schema_record_size(schema);\n+        auto fields = std::vector<std::shared_ptr<Field>>();\n+        for (idx = 0; idx < size; idx++) {\n+          child = avro_schema_record_field_get_by_index(schema, idx);\n+          auto elem_type = get_arrow_type(child);\n+          name = avro_schema_record_field_name(schema, idx);\n+          auto f = field(name, elem_type);\n+          fields.insert(fields.end(), f);\n+        }\n+        return struct_(fields);\n+      }\n+    }\n \n Review comment:\n   You'll need a `default:` case here, otherwise you should get a compiler warning on at least one of the compilers we test against (which will cause a failure due to compiling with warnings-as-errors).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T21:39:58.756+0000",
                    "updated": "2017-11-04T21:39:58.756+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16239259",
                    "id": "16239259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#discussion_r148942111\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/avro/adapter.cc\n ##########\n @@ -0,0 +1,325 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <sstream>\n+#include <arrow/util/logging.h>\n+\n+#include \"arrow/adapters/avro/adapter.h\"\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"avro.h\"\n+\n+namespace arrow {\n+namespace adapters {\n+namespace avro {\n+\n+class AvroArrowReader::AvroArrowReaderImpl {\n+public:\n+  Status GenerateAvroSchema(avro_file_reader_t *file_reader,\n+                            std::shared_ptr<DataType> *out) {\n+    auto wschema = avro_file_reader_get_writer_schema(*file_reader);\n+    std::shared_ptr<DataType> arrow_schema = get_arrow_type(wschema);\n+    // make array builder\n+    out = &arrow_schema;\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> get_arrow_type(avro_schema_t schema) {\n+    avro_schema_t child;\n+    size_t size, idx;\n+    int64_t length;\n+    const char *name;\n+\n+    auto avro_type = schema->type;\n+    switch (avro_type) {\n+      case AVRO_BOOLEAN:\n+        return boolean();\n+      case AVRO_INT32:\n+        return int32();\n+      case AVRO_INT64:\n+        return int64();\n+      case AVRO_FLOAT:\n+        return float32();\n+      case AVRO_DOUBLE:\n+        return float64();\n+      case AVRO_STRING:\n+        return utf8();\n+      case AVRO_BYTES:\n+        return binary();\n+      case AVRO_FIXED: {\n+        length = avro_schema_fixed_size(schema);\n+        return fixed_size_binary(length);\n+      }\n+      case AVRO_ARRAY: {\n+        auto elem_type = get_arrow_type(avro_schema_array_items(schema));\n+        return list(elem_type);\n+      }\n+\n+      case AVRO_MAP: {\n+        auto value_type = get_arrow_type(avro_schema_map_values(schema));\n+        auto fields = {field(\"key\", utf8()), field(\"value\", value_type)};\n+        return list(struct_(fields));\n+      }\n+\n+      case AVRO_UNION: {\n+        size = avro_schema_union_size(schema);\n+        auto fields = std::vector<std::shared_ptr<Field>>();\n+        std::vector<uint8_t> type_codes;\n+\n+        for (idx = 0; idx < size; idx++) {\n+          child = avro_schema_union_branch(schema, idx);\n+          auto f = field(\"_union_\" + std::to_string(idx),\n+                         get_arrow_type(child));\n+          fields.push_back(f);\n+          type_codes.push_back((uint8_t) idx);\n+        };\n+        return union_(fields, type_codes);\n+      }\n+\n+      case AVRO_RECORD: {\n+        size = avro_schema_record_size(schema);\n+        auto fields = std::vector<std::shared_ptr<Field>>();\n+        for (idx = 0; idx < size; idx++) {\n+          child = avro_schema_record_field_get_by_index(schema, idx);\n+          auto elem_type = get_arrow_type(child);\n+          name = avro_schema_record_field_name(schema, idx);\n+          auto f = field(name, elem_type);\n+          fields.insert(fields.end(), f);\n+        }\n+        return struct_(fields);\n+      }\n+    }\n+  }\n+\n+  Status generic_read(const avro_value_t val, ArrayBuilder *builder) {\n+    // Generic avro type read dispatcher. Dispatches to the various specializations by AVRO_TYPE.\n+    // This is used by the various readers for complex types\"\"\"\n+    avro_type_t avro_type;\n+    avro_type = avro_value_get_type(&val);\n+\n+    switch (avro_type) {\n+      case AVRO_BOOLEAN:\n+        return this->read_bool(val, builder);\n+      case AVRO_INT32:\n+        return this->read_int32(val, builder);\n+      case AVRO_INT64:\n+        return this->read_int64(val, builder);\n+      case AVRO_FLOAT:\n+        return this->read_float32(val, builder);\n+      case AVRO_DOUBLE:\n+        return this->read_float64(val, builder);\n+      case AVRO_STRING:\n+        return this->read_string(val, builder);\n+      case AVRO_BYTES:\n+        return this->read_binary(val, builder);\n+      case AVRO_FIXED:\n+        return this->read_fixed(val, builder);\n+      case AVRO_MAP:\n+        return this->read_map(val, builder);\n+      case AVRO_RECORD:\n+        return this->read_record(val, builder);\n+      case AVRO_ARRAY:\n+        return this->read_array(val, builder);\n+      default:\n+        std::stringstream ss;\n+        ss << \"Unhandled avro type: \" << avro_type;\n+        return Status::NotImplemented(ss.str());\n+    }\n+  }\n+\n+  Status read_string(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t strlen;\n \n Review comment:\n   You should call these something else besides `strlen` since that's the name of a function that ships with the C stdlib.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T21:41:30.057+0000",
                    "updated": "2017-11-04T21:41:30.057+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16239263",
                    "id": "16239263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#discussion_r148942232\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/avro/adapter.cc\n ##########\n @@ -0,0 +1,325 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <sstream>\n+#include <arrow/util/logging.h>\n+\n+#include \"arrow/adapters/avro/adapter.h\"\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"avro.h\"\n+\n+namespace arrow {\n+namespace adapters {\n+namespace avro {\n+\n+class AvroArrowReader::AvroArrowReaderImpl {\n+public:\n+  Status GenerateAvroSchema(avro_file_reader_t *file_reader,\n+                            std::shared_ptr<DataType> *out) {\n+    auto wschema = avro_file_reader_get_writer_schema(*file_reader);\n+    std::shared_ptr<DataType> arrow_schema = get_arrow_type(wschema);\n+    // make array builder\n+    out = &arrow_schema;\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> get_arrow_type(avro_schema_t schema) {\n+    avro_schema_t child;\n+    size_t size, idx;\n+    int64_t length;\n+    const char *name;\n+\n+    auto avro_type = schema->type;\n+    switch (avro_type) {\n+      case AVRO_BOOLEAN:\n+        return boolean();\n+      case AVRO_INT32:\n+        return int32();\n+      case AVRO_INT64:\n+        return int64();\n+      case AVRO_FLOAT:\n+        return float32();\n+      case AVRO_DOUBLE:\n+        return float64();\n+      case AVRO_STRING:\n+        return utf8();\n+      case AVRO_BYTES:\n+        return binary();\n+      case AVRO_FIXED: {\n+        length = avro_schema_fixed_size(schema);\n+        return fixed_size_binary(length);\n+      }\n+      case AVRO_ARRAY: {\n+        auto elem_type = get_arrow_type(avro_schema_array_items(schema));\n+        return list(elem_type);\n+      }\n+\n+      case AVRO_MAP: {\n+        auto value_type = get_arrow_type(avro_schema_map_values(schema));\n+        auto fields = {field(\"key\", utf8()), field(\"value\", value_type)};\n+        return list(struct_(fields));\n+      }\n+\n+      case AVRO_UNION: {\n+        size = avro_schema_union_size(schema);\n+        auto fields = std::vector<std::shared_ptr<Field>>();\n+        std::vector<uint8_t> type_codes;\n+\n+        for (idx = 0; idx < size; idx++) {\n+          child = avro_schema_union_branch(schema, idx);\n+          auto f = field(\"_union_\" + std::to_string(idx),\n+                         get_arrow_type(child));\n+          fields.push_back(f);\n+          type_codes.push_back((uint8_t) idx);\n+        };\n+        return union_(fields, type_codes);\n+      }\n+\n+      case AVRO_RECORD: {\n+        size = avro_schema_record_size(schema);\n+        auto fields = std::vector<std::shared_ptr<Field>>();\n+        for (idx = 0; idx < size; idx++) {\n+          child = avro_schema_record_field_get_by_index(schema, idx);\n+          auto elem_type = get_arrow_type(child);\n+          name = avro_schema_record_field_name(schema, idx);\n+          auto f = field(name, elem_type);\n+          fields.insert(fields.end(), f);\n+        }\n+        return struct_(fields);\n+      }\n+    }\n+  }\n+\n+  Status generic_read(const avro_value_t val, ArrayBuilder *builder) {\n+    // Generic avro type read dispatcher. Dispatches to the various specializations by AVRO_TYPE.\n+    // This is used by the various readers for complex types\"\"\"\n+    avro_type_t avro_type;\n+    avro_type = avro_value_get_type(&val);\n+\n+    switch (avro_type) {\n+      case AVRO_BOOLEAN:\n+        return this->read_bool(val, builder);\n+      case AVRO_INT32:\n+        return this->read_int32(val, builder);\n+      case AVRO_INT64:\n+        return this->read_int64(val, builder);\n+      case AVRO_FLOAT:\n+        return this->read_float32(val, builder);\n+      case AVRO_DOUBLE:\n+        return this->read_float64(val, builder);\n+      case AVRO_STRING:\n+        return this->read_string(val, builder);\n+      case AVRO_BYTES:\n+        return this->read_binary(val, builder);\n+      case AVRO_FIXED:\n+        return this->read_fixed(val, builder);\n+      case AVRO_MAP:\n+        return this->read_map(val, builder);\n+      case AVRO_RECORD:\n+        return this->read_record(val, builder);\n+      case AVRO_ARRAY:\n+        return this->read_array(val, builder);\n+      default:\n+        std::stringstream ss;\n+        ss << \"Unhandled avro type: \" << avro_type;\n+        return Status::NotImplemented(ss.str());\n+    }\n+  }\n+\n+  Status read_string(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t strlen;\n+    const char *c_str = NULL;\n+    avro_value_get_string(&val, &c_str, &strlen);\n+    return static_cast<StringBuilder *>(builder)->Append(c_str);\n+  }\n+\n+  Status read_binary(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t strlen;\n+    const char *c_str = NULL;\n+    avro_value_get_bytes(&val, (const void **) &c_str, &strlen);\n \n Review comment:\n   Hm, if `avro_value_get_bytes`'s second argument is `void**` then you shouldn't have to cast, but if you definitely do need to then you should do this with `reinterpret_cast<void**>(&c_str)`.\r\n   \r\n   This should also fail because you can't mutate anything of type `const void**` unless someone is doing something nasty like casting away the `const` with `const_cast`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T21:45:30.107+0000",
                    "updated": "2017-11-04T21:45:30.107+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16239266",
                    "id": "16239266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#discussion_r148942314\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/avro/adapter.cc\n ##########\n @@ -0,0 +1,325 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <sstream>\n+#include <arrow/util/logging.h>\n+\n+#include \"arrow/adapters/avro/adapter.h\"\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"avro.h\"\n+\n+namespace arrow {\n+namespace adapters {\n+namespace avro {\n+\n+class AvroArrowReader::AvroArrowReaderImpl {\n+public:\n+  Status GenerateAvroSchema(avro_file_reader_t *file_reader,\n+                            std::shared_ptr<DataType> *out) {\n+    auto wschema = avro_file_reader_get_writer_schema(*file_reader);\n+    std::shared_ptr<DataType> arrow_schema = get_arrow_type(wschema);\n+    // make array builder\n+    out = &arrow_schema;\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> get_arrow_type(avro_schema_t schema) {\n+    avro_schema_t child;\n+    size_t size, idx;\n+    int64_t length;\n+    const char *name;\n+\n+    auto avro_type = schema->type;\n+    switch (avro_type) {\n+      case AVRO_BOOLEAN:\n+        return boolean();\n+      case AVRO_INT32:\n+        return int32();\n+      case AVRO_INT64:\n+        return int64();\n+      case AVRO_FLOAT:\n+        return float32();\n+      case AVRO_DOUBLE:\n+        return float64();\n+      case AVRO_STRING:\n+        return utf8();\n+      case AVRO_BYTES:\n+        return binary();\n+      case AVRO_FIXED: {\n+        length = avro_schema_fixed_size(schema);\n+        return fixed_size_binary(length);\n+      }\n+      case AVRO_ARRAY: {\n+        auto elem_type = get_arrow_type(avro_schema_array_items(schema));\n+        return list(elem_type);\n+      }\n+\n+      case AVRO_MAP: {\n+        auto value_type = get_arrow_type(avro_schema_map_values(schema));\n+        auto fields = {field(\"key\", utf8()), field(\"value\", value_type)};\n+        return list(struct_(fields));\n+      }\n+\n+      case AVRO_UNION: {\n+        size = avro_schema_union_size(schema);\n+        auto fields = std::vector<std::shared_ptr<Field>>();\n+        std::vector<uint8_t> type_codes;\n+\n+        for (idx = 0; idx < size; idx++) {\n+          child = avro_schema_union_branch(schema, idx);\n+          auto f = field(\"_union_\" + std::to_string(idx),\n+                         get_arrow_type(child));\n+          fields.push_back(f);\n+          type_codes.push_back((uint8_t) idx);\n+        };\n+        return union_(fields, type_codes);\n+      }\n+\n+      case AVRO_RECORD: {\n+        size = avro_schema_record_size(schema);\n+        auto fields = std::vector<std::shared_ptr<Field>>();\n+        for (idx = 0; idx < size; idx++) {\n+          child = avro_schema_record_field_get_by_index(schema, idx);\n+          auto elem_type = get_arrow_type(child);\n+          name = avro_schema_record_field_name(schema, idx);\n+          auto f = field(name, elem_type);\n+          fields.insert(fields.end(), f);\n+        }\n+        return struct_(fields);\n+      }\n+    }\n+  }\n+\n+  Status generic_read(const avro_value_t val, ArrayBuilder *builder) {\n+    // Generic avro type read dispatcher. Dispatches to the various specializations by AVRO_TYPE.\n+    // This is used by the various readers for complex types\"\"\"\n+    avro_type_t avro_type;\n+    avro_type = avro_value_get_type(&val);\n+\n+    switch (avro_type) {\n+      case AVRO_BOOLEAN:\n+        return this->read_bool(val, builder);\n+      case AVRO_INT32:\n+        return this->read_int32(val, builder);\n+      case AVRO_INT64:\n+        return this->read_int64(val, builder);\n+      case AVRO_FLOAT:\n+        return this->read_float32(val, builder);\n+      case AVRO_DOUBLE:\n+        return this->read_float64(val, builder);\n+      case AVRO_STRING:\n+        return this->read_string(val, builder);\n+      case AVRO_BYTES:\n+        return this->read_binary(val, builder);\n+      case AVRO_FIXED:\n+        return this->read_fixed(val, builder);\n+      case AVRO_MAP:\n+        return this->read_map(val, builder);\n+      case AVRO_RECORD:\n+        return this->read_record(val, builder);\n+      case AVRO_ARRAY:\n+        return this->read_array(val, builder);\n+      default:\n+        std::stringstream ss;\n+        ss << \"Unhandled avro type: \" << avro_type;\n+        return Status::NotImplemented(ss.str());\n+    }\n+  }\n+\n+  Status read_string(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t strlen;\n+    const char *c_str = NULL;\n+    avro_value_get_string(&val, &c_str, &strlen);\n+    return static_cast<StringBuilder *>(builder)->Append(c_str);\n+  }\n+\n+  Status read_binary(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t strlen;\n+    const char *c_str = NULL;\n+    avro_value_get_bytes(&val, (const void **) &c_str, &strlen);\n+    return static_cast<BinaryBuilder *>(builder)->Append(c_str);\n+  };\n+\n+  Status read_fixed(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t strlen;\n+    const char *c_str = NULL;\n+    std::string buffer;\n+    avro_value_get_fixed(&val, (const void **) &c_str, &strlen);\n+    buffer = c_str;\n+    return static_cast<FixedSizeBinaryBuilder *>(builder)->Append(buffer);\n+  }\n+\n+  Status read_int32(const avro_value_t val, ArrayBuilder *builder) {\n+    int32_t out;\n+    avro_value_get_int(&val, &out);\n+    return static_cast<Int32Builder *>(builder)->Append(out);\n+  }\n+\n+  Status read_int64(const avro_value_t val, ArrayBuilder *builder) {\n+    int64_t out;\n+    avro_value_get_long(&val, &out);\n+    return static_cast<Int64Builder *>(builder)->Append(out);\n+  }\n+\n+  Status read_float64(const avro_value_t val, ArrayBuilder *builder) {\n+    double out;\n+    avro_value_get_double(&val, &out);\n+    return static_cast<DoubleBuilder *>(builder)->Append(out);\n+  }\n+\n+  Status read_float32(avro_value_t val, ArrayBuilder *builder) {\n+    float out\n+        avro_value_get_float(&val, &out);\n+    return static_cast<FloatBuilder *>(builder)->Append(out);\n+  }\n+\n+  Status read_bool(const avro_value_t val, ArrayBuilder *builder) {\n+    int temp;\n+    avro_value_get_boolean(&val, &temp);\n+    bool out = temp;\n+    return static_cast<BooleanBuilder *>(builder)->Append(out);\n+  }\n+\n+  Status read_array(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t actual_size;\n+    size_t i;\n+    const char *map_key = NULL;\n+    avro_value_t child;\n+    ArrayBuilder *child_builder;\n+    Status result;\n+\n+    avro_value_get_size(&val, &actual_size);\n+    static_cast<ListBuilder *>(builder)->Append(true);\n+    child_builder = static_cast<ListBuilder *>(builder)->value_builder();\n+    for (i = 0; i < actual_size; i++) {\n+      avro_value_get_by_index(&val, i, &child, &map_key);\n+      result = generic_read(child, child_builder);\n+    }\n+    return result;\n+  };\n+\n+  Status read_map(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t num_values, i;\n+    auto listB = static_cast<ListBuilder *>(builder);\n+    auto structB = static_cast<StructBuilder *>(listB->child(0));\n+    auto keyBuilder = static_cast<StringBuilder *>(structB->child(0));\n+    auto valueBuilder = structB->child(1);\n+    avro_value_t child;\n+    const char *map_key;\n+\n+    avro_value_get_size(&val, &num_values);\n+\n+    listB->Append(true);\n+    for (i = 0; i < num_values; i++) {\n+      structB->Append(true);\n+      avro_value_get_by_index(&val, i, &child, &map_key);\n+      keyBuilder->Append(map_key);\n+      generic_read(child, valueBuilder);\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status read_record(const avro_value_t val, ArrayBuilder *builder) {\n+    avro_value_t child;\n+    ArrayBuilder *child_builder;\n+    StructBuilder *typed_builder;\n+    Status result;\n+\n+    int container_length = builder->num_children();\n+    typed_builder = static_cast<StructBuilder *>(builder);\n+    typed_builder->Append();\n+\n+    for (auto i = 0; i < container_length; i++) {\n+      avro_value_get_by_index(&val, i, &child, NULL);\n+      child_builder = typed_builder->child(i);\n+      result = generic_read(child, child_builder);\n+    }\n+    return result;\n+  }\n+\n+};\n+\n+// Public API\n+\n+AvroArrowReader::AvroArrowReader() {\n+  impl_.reset(new AvroArrowReaderImpl());\n+  pool_ = default_memory_pool();\n+}\n+\n+Status AvroArrowReader::ReadFromFileName(std::string filename, std::shared_ptr<Array> *out) {\n+  avro_file_reader_t reader = NULL;\n+  avro_file_reader(filename.c_str(), &reader);\n+  return this->ReadFromAvroFile(&reader, out);\n+}\n+\n+Status AvroArrowReader::ReadFromAvroFile(avro_file_reader_t *file_reader,\n+                                         std::shared_ptr<Array> *out) {\n+\n+  std::unique_ptr<ArrayBuilder> builder;\n+  std::shared_ptr<Array> res;\n+  std::shared_ptr<DataType> datatype;\n+  Status status;\n+  int rval;\n+  avro_value_iface_t *iface;\n+  avro_value_t record;\n+  ARROW_CHECK_OK(impl_->GenerateAvroSchema(file_reader, &datatype));\n+  ARROW_CHECK_OK(MakeBuilder(this->pool_, datatype, &builder));\n+\n+  auto wschema = avro_file_reader_get_writer_schema(*file_reader);\n+  iface = avro_generic_class_from_schema(wschema);\n+  avro_generic_value_new(iface, &record);\n+\n+  while (true) {\n+    rval = avro_file_reader_read_value(*file_reader, &record);\n+    if (rval != 0)\n+      break;\n+    // decompose record into Python types\n+    status = impl_->generic_read(record, std::move(builder).get());\n \n Review comment:\n   Instead of assigning the result to `status` you should call `RETURN_NOT_OK(impl_->...)` which will cause the function to return if a non `Status::OK()` value was returned when reading.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T21:48:54.973+0000",
                    "updated": "2017-11-04T21:48:54.973+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16239268",
                    "id": "16239268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#discussion_r148942327\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/avro/adapter.cc\n ##########\n @@ -0,0 +1,325 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <sstream>\n+#include <arrow/util/logging.h>\n+\n+#include \"arrow/adapters/avro/adapter.h\"\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"avro.h\"\n+\n+namespace arrow {\n+namespace adapters {\n+namespace avro {\n+\n+class AvroArrowReader::AvroArrowReaderImpl {\n+public:\n+  Status GenerateAvroSchema(avro_file_reader_t *file_reader,\n+                            std::shared_ptr<DataType> *out) {\n+    auto wschema = avro_file_reader_get_writer_schema(*file_reader);\n+    std::shared_ptr<DataType> arrow_schema = get_arrow_type(wschema);\n+    // make array builder\n+    out = &arrow_schema;\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> get_arrow_type(avro_schema_t schema) {\n+    avro_schema_t child;\n+    size_t size, idx;\n+    int64_t length;\n+    const char *name;\n+\n+    auto avro_type = schema->type;\n+    switch (avro_type) {\n+      case AVRO_BOOLEAN:\n+        return boolean();\n+      case AVRO_INT32:\n+        return int32();\n+      case AVRO_INT64:\n+        return int64();\n+      case AVRO_FLOAT:\n+        return float32();\n+      case AVRO_DOUBLE:\n+        return float64();\n+      case AVRO_STRING:\n+        return utf8();\n+      case AVRO_BYTES:\n+        return binary();\n+      case AVRO_FIXED: {\n+        length = avro_schema_fixed_size(schema);\n+        return fixed_size_binary(length);\n+      }\n+      case AVRO_ARRAY: {\n+        auto elem_type = get_arrow_type(avro_schema_array_items(schema));\n+        return list(elem_type);\n+      }\n+\n+      case AVRO_MAP: {\n+        auto value_type = get_arrow_type(avro_schema_map_values(schema));\n+        auto fields = {field(\"key\", utf8()), field(\"value\", value_type)};\n+        return list(struct_(fields));\n+      }\n+\n+      case AVRO_UNION: {\n+        size = avro_schema_union_size(schema);\n+        auto fields = std::vector<std::shared_ptr<Field>>();\n+        std::vector<uint8_t> type_codes;\n+\n+        for (idx = 0; idx < size; idx++) {\n+          child = avro_schema_union_branch(schema, idx);\n+          auto f = field(\"_union_\" + std::to_string(idx),\n+                         get_arrow_type(child));\n+          fields.push_back(f);\n+          type_codes.push_back((uint8_t) idx);\n+        };\n+        return union_(fields, type_codes);\n+      }\n+\n+      case AVRO_RECORD: {\n+        size = avro_schema_record_size(schema);\n+        auto fields = std::vector<std::shared_ptr<Field>>();\n+        for (idx = 0; idx < size; idx++) {\n+          child = avro_schema_record_field_get_by_index(schema, idx);\n+          auto elem_type = get_arrow_type(child);\n+          name = avro_schema_record_field_name(schema, idx);\n+          auto f = field(name, elem_type);\n+          fields.insert(fields.end(), f);\n+        }\n+        return struct_(fields);\n+      }\n+    }\n+  }\n+\n+  Status generic_read(const avro_value_t val, ArrayBuilder *builder) {\n+    // Generic avro type read dispatcher. Dispatches to the various specializations by AVRO_TYPE.\n+    // This is used by the various readers for complex types\"\"\"\n+    avro_type_t avro_type;\n+    avro_type = avro_value_get_type(&val);\n+\n+    switch (avro_type) {\n+      case AVRO_BOOLEAN:\n+        return this->read_bool(val, builder);\n+      case AVRO_INT32:\n+        return this->read_int32(val, builder);\n+      case AVRO_INT64:\n+        return this->read_int64(val, builder);\n+      case AVRO_FLOAT:\n+        return this->read_float32(val, builder);\n+      case AVRO_DOUBLE:\n+        return this->read_float64(val, builder);\n+      case AVRO_STRING:\n+        return this->read_string(val, builder);\n+      case AVRO_BYTES:\n+        return this->read_binary(val, builder);\n+      case AVRO_FIXED:\n+        return this->read_fixed(val, builder);\n+      case AVRO_MAP:\n+        return this->read_map(val, builder);\n+      case AVRO_RECORD:\n+        return this->read_record(val, builder);\n+      case AVRO_ARRAY:\n+        return this->read_array(val, builder);\n+      default:\n+        std::stringstream ss;\n+        ss << \"Unhandled avro type: \" << avro_type;\n+        return Status::NotImplemented(ss.str());\n+    }\n+  }\n+\n+  Status read_string(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t strlen;\n+    const char *c_str = NULL;\n+    avro_value_get_string(&val, &c_str, &strlen);\n+    return static_cast<StringBuilder *>(builder)->Append(c_str);\n+  }\n+\n+  Status read_binary(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t strlen;\n+    const char *c_str = NULL;\n+    avro_value_get_bytes(&val, (const void **) &c_str, &strlen);\n+    return static_cast<BinaryBuilder *>(builder)->Append(c_str);\n+  };\n+\n+  Status read_fixed(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t strlen;\n+    const char *c_str = NULL;\n+    std::string buffer;\n+    avro_value_get_fixed(&val, (const void **) &c_str, &strlen);\n+    buffer = c_str;\n+    return static_cast<FixedSizeBinaryBuilder *>(builder)->Append(buffer);\n+  }\n+\n+  Status read_int32(const avro_value_t val, ArrayBuilder *builder) {\n+    int32_t out;\n+    avro_value_get_int(&val, &out);\n+    return static_cast<Int32Builder *>(builder)->Append(out);\n+  }\n+\n+  Status read_int64(const avro_value_t val, ArrayBuilder *builder) {\n+    int64_t out;\n+    avro_value_get_long(&val, &out);\n+    return static_cast<Int64Builder *>(builder)->Append(out);\n+  }\n+\n+  Status read_float64(const avro_value_t val, ArrayBuilder *builder) {\n+    double out;\n+    avro_value_get_double(&val, &out);\n+    return static_cast<DoubleBuilder *>(builder)->Append(out);\n+  }\n+\n+  Status read_float32(avro_value_t val, ArrayBuilder *builder) {\n+    float out\n+        avro_value_get_float(&val, &out);\n+    return static_cast<FloatBuilder *>(builder)->Append(out);\n+  }\n+\n+  Status read_bool(const avro_value_t val, ArrayBuilder *builder) {\n+    int temp;\n+    avro_value_get_boolean(&val, &temp);\n+    bool out = temp;\n+    return static_cast<BooleanBuilder *>(builder)->Append(out);\n+  }\n+\n+  Status read_array(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t actual_size;\n+    size_t i;\n+    const char *map_key = NULL;\n+    avro_value_t child;\n+    ArrayBuilder *child_builder;\n+    Status result;\n+\n+    avro_value_get_size(&val, &actual_size);\n+    static_cast<ListBuilder *>(builder)->Append(true);\n+    child_builder = static_cast<ListBuilder *>(builder)->value_builder();\n+    for (i = 0; i < actual_size; i++) {\n+      avro_value_get_by_index(&val, i, &child, &map_key);\n+      result = generic_read(child, child_builder);\n+    }\n+    return result;\n+  };\n+\n+  Status read_map(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t num_values, i;\n+    auto listB = static_cast<ListBuilder *>(builder);\n+    auto structB = static_cast<StructBuilder *>(listB->child(0));\n+    auto keyBuilder = static_cast<StringBuilder *>(structB->child(0));\n+    auto valueBuilder = structB->child(1);\n+    avro_value_t child;\n+    const char *map_key;\n+\n+    avro_value_get_size(&val, &num_values);\n+\n+    listB->Append(true);\n+    for (i = 0; i < num_values; i++) {\n+      structB->Append(true);\n+      avro_value_get_by_index(&val, i, &child, &map_key);\n+      keyBuilder->Append(map_key);\n+      generic_read(child, valueBuilder);\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status read_record(const avro_value_t val, ArrayBuilder *builder) {\n+    avro_value_t child;\n+    ArrayBuilder *child_builder;\n+    StructBuilder *typed_builder;\n+    Status result;\n+\n+    int container_length = builder->num_children();\n+    typed_builder = static_cast<StructBuilder *>(builder);\n+    typed_builder->Append();\n+\n+    for (auto i = 0; i < container_length; i++) {\n+      avro_value_get_by_index(&val, i, &child, NULL);\n+      child_builder = typed_builder->child(i);\n+      result = generic_read(child, child_builder);\n+    }\n+    return result;\n+  }\n+\n+};\n+\n+// Public API\n+\n+AvroArrowReader::AvroArrowReader() {\n+  impl_.reset(new AvroArrowReaderImpl());\n+  pool_ = default_memory_pool();\n+}\n+\n+Status AvroArrowReader::ReadFromFileName(std::string filename, std::shared_ptr<Array> *out) {\n+  avro_file_reader_t reader = NULL;\n+  avro_file_reader(filename.c_str(), &reader);\n+  return this->ReadFromAvroFile(&reader, out);\n+}\n+\n+Status AvroArrowReader::ReadFromAvroFile(avro_file_reader_t *file_reader,\n+                                         std::shared_ptr<Array> *out) {\n+\n+  std::unique_ptr<ArrayBuilder> builder;\n+  std::shared_ptr<Array> res;\n+  std::shared_ptr<DataType> datatype;\n+  Status status;\n+  int rval;\n+  avro_value_iface_t *iface;\n+  avro_value_t record;\n+  ARROW_CHECK_OK(impl_->GenerateAvroSchema(file_reader, &datatype));\n+  ARROW_CHECK_OK(MakeBuilder(this->pool_, datatype, &builder));\n \n Review comment:\n   This should be `RETURN_NOT_OK` I believe.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T21:49:39.197+0000",
                    "updated": "2017-11-04T21:49:39.197+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16239271",
                    "id": "16239271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#discussion_r148942523\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/avro/adapter.cc\n ##########\n @@ -0,0 +1,325 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <sstream>\n+#include <arrow/util/logging.h>\n+\n+#include \"arrow/adapters/avro/adapter.h\"\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"avro.h\"\n+\n+namespace arrow {\n+namespace adapters {\n+namespace avro {\n+\n+class AvroArrowReader::AvroArrowReaderImpl {\n+public:\n+  Status GenerateAvroSchema(avro_file_reader_t *file_reader,\n+                            std::shared_ptr<DataType> *out) {\n+    auto wschema = avro_file_reader_get_writer_schema(*file_reader);\n+    std::shared_ptr<DataType> arrow_schema = get_arrow_type(wschema);\n+    // make array builder\n+    out = &arrow_schema;\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> get_arrow_type(avro_schema_t schema) {\n+    avro_schema_t child;\n+    size_t size, idx;\n+    int64_t length;\n+    const char *name;\n+\n+    auto avro_type = schema->type;\n+    switch (avro_type) {\n+      case AVRO_BOOLEAN:\n+        return boolean();\n+      case AVRO_INT32:\n+        return int32();\n+      case AVRO_INT64:\n+        return int64();\n+      case AVRO_FLOAT:\n+        return float32();\n+      case AVRO_DOUBLE:\n+        return float64();\n+      case AVRO_STRING:\n+        return utf8();\n+      case AVRO_BYTES:\n+        return binary();\n+      case AVRO_FIXED: {\n+        length = avro_schema_fixed_size(schema);\n+        return fixed_size_binary(length);\n+      }\n+      case AVRO_ARRAY: {\n+        auto elem_type = get_arrow_type(avro_schema_array_items(schema));\n+        return list(elem_type);\n+      }\n+\n+      case AVRO_MAP: {\n+        auto value_type = get_arrow_type(avro_schema_map_values(schema));\n+        auto fields = {field(\"key\", utf8()), field(\"value\", value_type)};\n+        return list(struct_(fields));\n+      }\n+\n+      case AVRO_UNION: {\n+        size = avro_schema_union_size(schema);\n+        auto fields = std::vector<std::shared_ptr<Field>>();\n+        std::vector<uint8_t> type_codes;\n+\n+        for (idx = 0; idx < size; idx++) {\n+          child = avro_schema_union_branch(schema, idx);\n+          auto f = field(\"_union_\" + std::to_string(idx),\n+                         get_arrow_type(child));\n+          fields.push_back(f);\n+          type_codes.push_back((uint8_t) idx);\n+        };\n+        return union_(fields, type_codes);\n+      }\n+\n+      case AVRO_RECORD: {\n+        size = avro_schema_record_size(schema);\n+        auto fields = std::vector<std::shared_ptr<Field>>();\n+        for (idx = 0; idx < size; idx++) {\n+          child = avro_schema_record_field_get_by_index(schema, idx);\n+          auto elem_type = get_arrow_type(child);\n+          name = avro_schema_record_field_name(schema, idx);\n+          auto f = field(name, elem_type);\n+          fields.insert(fields.end(), f);\n+        }\n+        return struct_(fields);\n+      }\n+    }\n+  }\n+\n+  Status generic_read(const avro_value_t val, ArrayBuilder *builder) {\n+    // Generic avro type read dispatcher. Dispatches to the various specializations by AVRO_TYPE.\n+    // This is used by the various readers for complex types\"\"\"\n+    avro_type_t avro_type;\n+    avro_type = avro_value_get_type(&val);\n+\n+    switch (avro_type) {\n+      case AVRO_BOOLEAN:\n+        return this->read_bool(val, builder);\n+      case AVRO_INT32:\n+        return this->read_int32(val, builder);\n+      case AVRO_INT64:\n+        return this->read_int64(val, builder);\n+      case AVRO_FLOAT:\n+        return this->read_float32(val, builder);\n+      case AVRO_DOUBLE:\n+        return this->read_float64(val, builder);\n+      case AVRO_STRING:\n+        return this->read_string(val, builder);\n+      case AVRO_BYTES:\n+        return this->read_binary(val, builder);\n+      case AVRO_FIXED:\n+        return this->read_fixed(val, builder);\n+      case AVRO_MAP:\n+        return this->read_map(val, builder);\n+      case AVRO_RECORD:\n+        return this->read_record(val, builder);\n+      case AVRO_ARRAY:\n+        return this->read_array(val, builder);\n+      default:\n+        std::stringstream ss;\n+        ss << \"Unhandled avro type: \" << avro_type;\n+        return Status::NotImplemented(ss.str());\n+    }\n+  }\n+\n+  Status read_string(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t strlen;\n+    const char *c_str = NULL;\n+    avro_value_get_string(&val, &c_str, &strlen);\n+    return static_cast<StringBuilder *>(builder)->Append(c_str);\n+  }\n+\n+  Status read_binary(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t strlen;\n+    const char *c_str = NULL;\n+    avro_value_get_bytes(&val, (const void **) &c_str, &strlen);\n+    return static_cast<BinaryBuilder *>(builder)->Append(c_str);\n+  };\n+\n+  Status read_fixed(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t strlen;\n+    const char *c_str = NULL;\n+    std::string buffer;\n+    avro_value_get_fixed(&val, (const void **) &c_str, &strlen);\n+    buffer = c_str;\n+    return static_cast<FixedSizeBinaryBuilder *>(builder)->Append(buffer);\n+  }\n+\n+  Status read_int32(const avro_value_t val, ArrayBuilder *builder) {\n+    int32_t out;\n+    avro_value_get_int(&val, &out);\n+    return static_cast<Int32Builder *>(builder)->Append(out);\n+  }\n+\n+  Status read_int64(const avro_value_t val, ArrayBuilder *builder) {\n+    int64_t out;\n+    avro_value_get_long(&val, &out);\n+    return static_cast<Int64Builder *>(builder)->Append(out);\n+  }\n+\n+  Status read_float64(const avro_value_t val, ArrayBuilder *builder) {\n+    double out;\n+    avro_value_get_double(&val, &out);\n+    return static_cast<DoubleBuilder *>(builder)->Append(out);\n+  }\n+\n+  Status read_float32(avro_value_t val, ArrayBuilder *builder) {\n+    float out\n+        avro_value_get_float(&val, &out);\n+    return static_cast<FloatBuilder *>(builder)->Append(out);\n+  }\n+\n+  Status read_bool(const avro_value_t val, ArrayBuilder *builder) {\n+    int temp;\n+    avro_value_get_boolean(&val, &temp);\n+    bool out = temp;\n+    return static_cast<BooleanBuilder *>(builder)->Append(out);\n+  }\n+\n+  Status read_array(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t actual_size;\n+    size_t i;\n+    const char *map_key = NULL;\n+    avro_value_t child;\n+    ArrayBuilder *child_builder;\n+    Status result;\n+\n+    avro_value_get_size(&val, &actual_size);\n+    static_cast<ListBuilder *>(builder)->Append(true);\n+    child_builder = static_cast<ListBuilder *>(builder)->value_builder();\n+    for (i = 0; i < actual_size; i++) {\n+      avro_value_get_by_index(&val, i, &child, &map_key);\n+      result = generic_read(child, child_builder);\n+    }\n+    return result;\n+  };\n+\n+  Status read_map(const avro_value_t val, ArrayBuilder *builder) {\n+    size_t num_values, i;\n+    auto listB = static_cast<ListBuilder *>(builder);\n+    auto structB = static_cast<StructBuilder *>(listB->child(0));\n+    auto keyBuilder = static_cast<StringBuilder *>(structB->child(0));\n+    auto valueBuilder = structB->child(1);\n+    avro_value_t child;\n+    const char *map_key;\n+\n+    avro_value_get_size(&val, &num_values);\n+\n+    listB->Append(true);\n+    for (i = 0; i < num_values; i++) {\n+      structB->Append(true);\n+      avro_value_get_by_index(&val, i, &child, &map_key);\n+      keyBuilder->Append(map_key);\n+      generic_read(child, valueBuilder);\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status read_record(const avro_value_t val, ArrayBuilder *builder) {\n+    avro_value_t child;\n+    ArrayBuilder *child_builder;\n+    StructBuilder *typed_builder;\n+    Status result;\n+\n+    int container_length = builder->num_children();\n+    typed_builder = static_cast<StructBuilder *>(builder);\n+    typed_builder->Append();\n+\n+    for (auto i = 0; i < container_length; i++) {\n+      avro_value_get_by_index(&val, i, &child, NULL);\n+      child_builder = typed_builder->child(i);\n+      result = generic_read(child, child_builder);\n+    }\n+    return result;\n+  }\n+\n+};\n+\n+// Public API\n+\n+AvroArrowReader::AvroArrowReader() {\n+  impl_.reset(new AvroArrowReaderImpl());\n+  pool_ = default_memory_pool();\n+}\n+\n+Status AvroArrowReader::ReadFromFileName(std::string filename, std::shared_ptr<Array> *out) {\n+  avro_file_reader_t reader = NULL;\n+  avro_file_reader(filename.c_str(), &reader);\n+  return this->ReadFromAvroFile(&reader, out);\n+}\n+\n+Status AvroArrowReader::ReadFromAvroFile(avro_file_reader_t *file_reader,\n+                                         std::shared_ptr<Array> *out) {\n+\n+  std::unique_ptr<ArrayBuilder> builder;\n+  std::shared_ptr<Array> res;\n+  std::shared_ptr<DataType> datatype;\n+  Status status;\n+  int rval;\n+  avro_value_iface_t *iface;\n+  avro_value_t record;\n+  ARROW_CHECK_OK(impl_->GenerateAvroSchema(file_reader, &datatype));\n+  ARROW_CHECK_OK(MakeBuilder(this->pool_, datatype, &builder));\n+\n+  auto wschema = avro_file_reader_get_writer_schema(*file_reader);\n+  iface = avro_generic_class_from_schema(wschema);\n+  avro_generic_value_new(iface, &record);\n+\n+  while (true) {\n \n Review comment:\n   I think you can restructure this loop to use `do {} while ()` and avoid the `break`. `do {} while ()` performs one iteration of the loop before evaluating the loop condition.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-04T21:57:09.963+0000",
                    "updated": "2017-11-04T21:57:09.963+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16296931",
                    "id": "16296931",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "mariusvniekerk commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-352785752\n \n \n   ref: https://github.com/apache/avro/pull/270\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-19T15:07:53.242+0000",
                    "updated": "2017-12-19T15:07:53.242+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13086623/comment/16296939",
                    "id": "16296939",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "mariusvniekerk commented on issue #1026: ARROW-1209: [C++] [WIP] Support for reading avro from an AvroFileReader\nURL: https://github.com/apache/arrow/pull/1026#issuecomment-352785752\n \n \n   ref: https://github.com/apache/avro/pull/270\r\n   \r\n   Given how much pain is involved in using the avro c-api i'm going to take a stab at using avro-cpp for this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-19T15:15:28.739+0000",
                    "updated": "2017-12-19T15:15:28.739+0000"
                }
            ],
            "maxResults": 30,
            "total": 30,
            "startAt": 0
        },
        "customfield_12311820": "0|i3hfnr:",
        "customfield_12314139": null
    }
}