{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13312518",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518",
    "key": "ARROW-9189",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332543",
                "id": "12332543",
                "name": "Website"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9189/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/449524",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson opened a new pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-22T22:13:30.262+0000",
                    "updated": "2020-06-22T22:13:30.262+0000",
                    "started": "2020-06-22T22:13:30.262+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "449524",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/449525",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520#issuecomment-647796781\n\n\n   https://issues.apache.org/jira/browse/ARROW-9189\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-22T22:17:06.511+0000",
                    "updated": "2020-06-22T22:17:06.511+0000",
                    "started": "2020-06-22T22:17:06.511+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "449525",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/449585",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520#discussion_r443914793\n\n\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -17,53 +17,73 @@\n \n .. _contributing:\n \n-***********************\n-Contribution Guidelines\n-***********************\n+****************************\n+Contributing to Apache Arrow\n+****************************\n \n-There are many ways to contribute to Apache Arrow:\n+Thanks for your interest in the Apache Arrow project. Arrow is a large project\n+and may seem overwhelming when you're first getting involved.\n+Contributing code is great, but that's probably not the first place to start.\n+There are lots of ways to make valuable contributions to the project and\n+community.\n \n-* Contributing code (we call them \"patches\")\n-* Writing documentation (another form of code, in a way)\n-* Participating in discussions on `JIRA <https://issues.apache.org/jira/projects/ARROW/issues>`_ or the `mailing list <https://lists.apache.org/list.html?dev@arrow.apache.org>`_\n-* Helping users of the libraries\n-* Reporting bugs and asking questions\n+This page provides some orientation for how to get involved. It also offers\n+some recommendations on how to get best results when engaging with the\n+community.\n \n-Mailing List\n-============\n+Join the mailing lists\n+======================\n \n+A good first step to getting involved in the Arrow project is to join the\n+mailing lists and participate in discussions where you can.\n Projects in The Apache Software Foundation (\"the ASF\") use public, archived\n mailing lists to create a public record of each project's development\n-activities and decision-making process. As such, all contributors generally\n-must be subscribed to the dev@arrow.apache.org mailing list to participate in\n-the community.\n+activities and decision-making process.\n+While lacking the immediacy of chat or other forms of communication,\n+the mailing lists give participants the opportunity to slow down and be\n+thoughtful in their responses, and they help developers who are spread across\n+many timezones to participate more equally.\n\nReview comment:\n       Good. \n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -76,46 +96,83 @@ visibility. They may add a \"Fix version\" to indicate that they're considering\n it for inclusion in the next release, though adding that tag is not a\n commitment that it will be done in the next release.\n \n-Advanced use\n-------------\n-\n-Once you are involved in the project and want to do more on JIRA, such as\n-assign yourself an issue, you will need \"Contributor\" permissions on the\n-Apache Arrow JIRA. To get this role, ask on the mailing list for a project\n-maintainer's help.\n-\n-GitHub issues\n--------------\n-\n-We support `GitHub issues <https://github.com/apache/arrow/issues>`_ as a\n-lightweight way to ask questions and engage with\n-the Arrow developer community. We use JIRA for maintaining a queue of\n-development work and as the public record for work on the project. So, feel\n-free to open GitHub issues, but bugs and feature requests will eventually need\n-to end up in JIRA, either before or after completing a pull request. Don't be\n-surprised if you are immediately asked by a project maintainer to open a JIRA\n-issue.\n-\n-How to contribute patches\n-=========================\n-\n-We prefer to receive contributions in the form of GitHub pull requests. Please\n-send pull requests against the `github.com/apache/arrow\n-<https://github.com/apache/arrow>`_ repository following the procedure below.\n-\n-If you are looking for some ideas on what to contribute, check out the JIRA\n-issues for the Apache Arrow project. Comment on the issue and/or contact\n-dev@arrow.apache.org with your questions and ideas.\n-\n-If you\u2019d like to report a bug but don\u2019t have time to fix it, you can still post\n-it on JIRA, or email the mailing list dev@arrow.apache.org.\n+Tips for successful bug reports\n++++++++++++++++++++++++++++++++\n+\n+No one likes having bugs in their software, and in an ideal world, all bugs\n+would get fixed as soon as they were reported. However, time and attention are\n+finite, especially in an open-source project where most contributors are\n+participating in their spare time. In order for your bug to get prompt\n\nReview comment:\n       May be worth emphasizing here that all contributors in Apache projects are volunteers and act as individuals, even if they are contributing to the project as part of their job responsibilities. \n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -17,53 +17,73 @@\n \n .. _contributing:\n \n-***********************\n-Contribution Guidelines\n-***********************\n+****************************\n+Contributing to Apache Arrow\n+****************************\n \n-There are many ways to contribute to Apache Arrow:\n+Thanks for your interest in the Apache Arrow project. Arrow is a large project\n+and may seem overwhelming when you're first getting involved.\n+Contributing code is great, but that's probably not the first place to start.\n+There are lots of ways to make valuable contributions to the project and\n+community.\n \n-* Contributing code (we call them \"patches\")\n-* Writing documentation (another form of code, in a way)\n-* Participating in discussions on `JIRA <https://issues.apache.org/jira/projects/ARROW/issues>`_ or the `mailing list <https://lists.apache.org/list.html?dev@arrow.apache.org>`_\n-* Helping users of the libraries\n-* Reporting bugs and asking questions\n+This page provides some orientation for how to get involved. It also offers\n+some recommendations on how to get best results when engaging with the\n+community.\n \n-Mailing List\n-============\n+Join the mailing lists\n+======================\n \n+A good first step to getting involved in the Arrow project is to join the\n+mailing lists and participate in discussions where you can.\n Projects in The Apache Software Foundation (\"the ASF\") use public, archived\n mailing lists to create a public record of each project's development\n-activities and decision-making process. As such, all contributors generally\n-must be subscribed to the dev@arrow.apache.org mailing list to participate in\n-the community.\n+activities and decision-making process.\n+While lacking the immediacy of chat or other forms of communication,\n+the mailing lists give participants the opportunity to slow down and be\n+thoughtful in their responses, and they help developers who are spread across\n+many timezones to participate more equally.\n \n-Note that you must be subscribed to the mailing list in order to post to it. To\n-subscribe, send a blank email to dev-subscribe@arrow.apache.org.\n+See `the community page <https://arrow.apache.org/community/>`_ for links to\n+subscribe to the mailing lists and to view archives.\n \n-Mailing list archives can be found `here <https://lists.apache.org/list.html?dev@arrow.apache.org>`_.\n+Report bugs and request features\n+================================\n \n-Issue Tracking\n-==============\n+Using the software and sharing your experience is a very helpful contribution\n+itself. Those who actively develop Arrow need feedback from users on what\n+works and what doesn't. Alerting us to unexpected behavior and missing features,\n+even if you can't solve the problems yourself, help us understand and prioritize\n+work to improve the libraries.\n \n-We use the `ASF JIRA <https://issues.apache.org/jira/projects/ARROW/issues>`_\n+We use `JIRA <https://issues.apache.org/jira/projects/ARROW/issues>`_\n to manage our development \"todo\" list and to maintain changelogs for releases.\n In addition, the project's `Confluence site <https://cwiki.apache.org/confluence/display/ARROW>`_\n has some useful higher-level views of the JIRA issues.\n \n To create a JIRA issue, you'll need to have an account on the ASF JIRA, which\n you can `sign yourself up for <https://issues.apache.org/jira/secure/Signup!default.jspa>`_.\n-The JIRA server hosts bugs and issues for multiple Apache projects.  The JIRA\n+The JIRA server hosts bugs and issues for multiple Apache projects. The JIRA\n project name for Arrow is \"ARROW\".\n \n-Before you create a new bug entry, we recommend you first\n-`search <https://issues.apache.org/jira/projects/ARROW/issues/ARROW-5140?filter=allopenissues>`_\n+You don't need any special permissions on JIRA to be able to create issues.\n+Once you are more involved in the project and want to do more on JIRA, such as\n+assign yourself an issue, you will need \"Contributor\" permissions on the\n+Apache Arrow JIRA. To get this role, ask on the mailing list for a project\n+maintainer's help.\n+\n+Tips for using JIRA\n++++++++++++++++++++\n+\n+Before you create a new issue, we recommend you first\n+`search <https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20resolution%20%3D%20Unresolved>`_\n among existing Arrow issues.\n \n When reporting a new issue, follow these conventions to help make sure the\n right people see it:\n \n-* Enter the component your issue pertains to (for example \"Python\" or \"C++\").\n+* Use the **Component** field to indicate the area of the project that your\n+  issue pertains to (for example \"Python\" or \"C++\").\n * Also prefix the issue title with the component name in brackets, for example\n   ``[Python] issue name`` ; this helps when navigating lists of open issues.\n\nReview comment:\n       May want to mention here that the component name helps generate more readable changelogs when we release\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n\nReview comment:\n       Mention here that the merge tool includes the PR description in the commit message while excluding any comments from the individual commits, so they should put the information about what is in the patch in the GitHub PR description. \n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n\nReview comment:\n       link to the committer page on the website?\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n\nReview comment:\n       Mention that the commit message of the merged commit contains the name of the contributor along with any co-authors and a reference to the pull request number on GitHub\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n+\n+Local git conventions\n++++++++++++++++++++++\n+\n+If you are tracking the Arrow source repository locally, here are some tips\n+for using ``git``.\n+\n+All Arrow contributors work off of their personal fork of ``apache/arrow``\n+and submit pull requests \"upstream\". Once you've cloned your fork of Arrow,\n+be sure to::\n+\n+    $ git remote add upstream https://github.com/apache/arrow\n+\n+to set the \"upstream\" repository.\n+\n+You are encouraged to develop on branches, rather than your own \"master\" branch,\n+and it helps to keep your fork's master branch synced with ``upstream/master``.\n \n-Thank you in advance for your contributions!\n+To start a new branch, pull the latest from upstream first::\n \n-Common Git conventions followed within the project\n---------------------------------------------------\n+   $ git fetch upstream\n+   $ git checkout master\n+   $ git reset --hard upstream/master\n+   $ git checkout -b $NEW_BRANCH_NAME\n \n-If you are tracking the Arrow source repository locally, following some common Git\n-conventions would make everyone's workflow compatible.  These recommendations along with\n-their rationale are outlined below.\n+It does not matter what you call your branch. Some people like to use the JIRA\n+number as branch name, others use descriptive names.\n \n-It is strongly discouraged to use a regular ``git merge``, as a linear commit history is\n-prefered by the project.  It is much easier to maintain, and makes for easier\n-``cherry-picking`` of features; useful for backporting fixes to maintenance releases.\n+Once you have a branch going, you should sync with ``upstream/master``\n+regularly, as many commits merge to master every day.\n\nReview comment:\n       \"are merged\"\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -168,11 +274,15 @@ remote repo still holds the old history, you would need to do a force push. ::\n look at your updates, please ensure you comment on the PR on GitHub as simply force\n pushing does not trigger a notification in the GitHub user interface.\n \n-Simplifying ``rebase``\n-++++++++++++++++++++++\n+Also, once you have a pull request up, be sure you pull from ``origin``\n+before rebasing and force-pushing. Arrow maintainers can push commits directly\n+to your branch, which they sometimes do to help move a pull request along.\n+In addition, the GitHub PR \"suggestion\" feature can also add commits to\n+your branch, so it is possible that your local copy of your branch is missing\n+some additions.\n\nReview comment:\n       I'm not a fan of the \"suggestion\" feature and don't want to encourage its use\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n\nReview comment:\n       May also want to mention that it makes it easier for maintainers to prepare patch releases by cherry-picking patches into maintenance branches. There are still some people out there who aren't convinced by the squash-merge-linear-history paradigm so it helps to offer as many justifications as possible =)\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -168,11 +274,15 @@ remote repo still holds the old history, you would need to do a force push. ::\n look at your updates, please ensure you comment on the PR on GitHub as simply force\n pushing does not trigger a notification in the GitHub user interface.\n \n-Simplifying ``rebase``\n-++++++++++++++++++++++\n+Also, once you have a pull request up, be sure you pull from ``origin``\n+before rebasing and force-pushing. Arrow maintainers can push commits directly\n+to your branch, which they sometimes do to help move a pull request along.\n+In addition, the GitHub PR \"suggestion\" feature can also add commits to\n+your branch, so it is possible that your local copy of your branch is missing\n+some additions.\n \n-If you set the following in your repo's ``.git/config``, the ``--rebase`` option can be\n-ommitted from the ``git pull`` command, as it is implied by default. ::\n+Code of Conduct\n\nReview comment:\n       Can you put this at the top of the document?\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n+\n+Local git conventions\n++++++++++++++++++++++\n+\n+If you are tracking the Arrow source repository locally, here are some tips\n+for using ``git``.\n+\n+All Arrow contributors work off of their personal fork of ``apache/arrow``\n+and submit pull requests \"upstream\". Once you've cloned your fork of Arrow,\n+be sure to::\n+\n+    $ git remote add upstream https://github.com/apache/arrow\n+\n+to set the \"upstream\" repository.\n+\n+You are encouraged to develop on branches, rather than your own \"master\" branch,\n+and it helps to keep your fork's master branch synced with ``upstream/master``.\n \n-Thank you in advance for your contributions!\n+To start a new branch, pull the latest from upstream first::\n \n-Common Git conventions followed within the project\n---------------------------------------------------\n+   $ git fetch upstream\n+   $ git checkout master\n+   $ git reset --hard upstream/master\n\nReview comment:\n       I use `pull --ff-only upstream master`. `reset --hard` should only ever be necessary if you did something wrong before, and `reset` could actually be destructive (of course everything is preserved in `git reflog`)\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n+\n+Local git conventions\n++++++++++++++++++++++\n+\n+If you are tracking the Arrow source repository locally, here are some tips\n+for using ``git``.\n+\n+All Arrow contributors work off of their personal fork of ``apache/arrow``\n+and submit pull requests \"upstream\". Once you've cloned your fork of Arrow,\n+be sure to::\n+\n+    $ git remote add upstream https://github.com/apache/arrow\n+\n+to set the \"upstream\" repository.\n+\n+You are encouraged to develop on branches, rather than your own \"master\" branch,\n+and it helps to keep your fork's master branch synced with ``upstream/master``.\n \n-Thank you in advance for your contributions!\n+To start a new branch, pull the latest from upstream first::\n \n-Common Git conventions followed within the project\n---------------------------------------------------\n+   $ git fetch upstream\n+   $ git checkout master\n+   $ git reset --hard upstream/master\n+   $ git checkout -b $NEW_BRANCH_NAME\n \n-If you are tracking the Arrow source repository locally, following some common Git\n-conventions would make everyone's workflow compatible.  These recommendations along with\n-their rationale are outlined below.\n+It does not matter what you call your branch. Some people like to use the JIRA\n+number as branch name, others use descriptive names.\n \n-It is strongly discouraged to use a regular ``git merge``, as a linear commit history is\n-prefered by the project.  It is much easier to maintain, and makes for easier\n-``cherry-picking`` of features; useful for backporting fixes to maintenance releases.\n+Once you have a branch going, you should sync with ``upstream/master``\n+regularly, as many commits merge to master every day.\n+It is recommended to use ``git rebase`` rather than ``git merge``.\n To sync your local copy of a branch, you may do the following::\n \n     $ git pull upstream branch --rebase\n\nReview comment:\n       maybe write `$BRANCH` here for clarity\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-23T01:56:20.177+0000",
                    "updated": "2020-06-23T01:56:20.177+0000",
                    "started": "2020-06-23T01:56:20.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "449585",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/449834",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520#discussion_r444268553\n\n\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n+\n+Local git conventions\n++++++++++++++++++++++\n+\n+If you are tracking the Arrow source repository locally, here are some tips\n+for using ``git``.\n+\n+All Arrow contributors work off of their personal fork of ``apache/arrow``\n+and submit pull requests \"upstream\". Once you've cloned your fork of Arrow,\n+be sure to::\n+\n+    $ git remote add upstream https://github.com/apache/arrow\n+\n+to set the \"upstream\" repository.\n+\n+You are encouraged to develop on branches, rather than your own \"master\" branch,\n+and it helps to keep your fork's master branch synced with ``upstream/master``.\n \n-Thank you in advance for your contributions!\n+To start a new branch, pull the latest from upstream first::\n \n-Common Git conventions followed within the project\n---------------------------------------------------\n+   $ git fetch upstream\n+   $ git checkout master\n+   $ git reset --hard upstream/master\n+   $ git checkout -b $NEW_BRANCH_NAME\n \n-If you are tracking the Arrow source repository locally, following some common Git\n-conventions would make everyone's workflow compatible.  These recommendations along with\n-their rationale are outlined below.\n+It does not matter what you call your branch. Some people like to use the JIRA\n+number as branch name, others use descriptive names.\n \n-It is strongly discouraged to use a regular ``git merge``, as a linear commit history is\n-prefered by the project.  It is much easier to maintain, and makes for easier\n-``cherry-picking`` of features; useful for backporting fixes to maintenance releases.\n+Once you have a branch going, you should sync with ``upstream/master``\n+regularly, as many commits merge to master every day.\n+It is recommended to use ``git rebase`` rather than ``git merge``.\n To sync your local copy of a branch, you may do the following::\n \n     $ git pull upstream branch --rebase\n\nReview comment:\n       Is this doing the same as `git rebase upstream/master` ? (I am used to doing this)\r\n   \r\n   EDIT: ah, I suppose my suggestion needs a `git fetch upstream/master` first, so the above is probably the one-liner to do this\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -17,53 +17,73 @@\n \n .. _contributing:\n \n-***********************\n-Contribution Guidelines\n-***********************\n+****************************\n+Contributing to Apache Arrow\n+****************************\n \n-There are many ways to contribute to Apache Arrow:\n+Thanks for your interest in the Apache Arrow project. Arrow is a large project\n+and may seem overwhelming when you're first getting involved.\n+Contributing code is great, but that's probably not the first place to start.\n+There are lots of ways to make valuable contributions to the project and\n+community.\n \n-* Contributing code (we call them \"patches\")\n-* Writing documentation (another form of code, in a way)\n-* Participating in discussions on `JIRA <https://issues.apache.org/jira/projects/ARROW/issues>`_ or the `mailing list <https://lists.apache.org/list.html?dev@arrow.apache.org>`_\n-* Helping users of the libraries\n-* Reporting bugs and asking questions\n+This page provides some orientation for how to get involved. It also offers\n+some recommendations on how to get best results when engaging with the\n+community.\n \n-Mailing List\n-============\n+Join the mailing lists\n+======================\n \n+A good first step to getting involved in the Arrow project is to join the\n+mailing lists and participate in discussions where you can.\n Projects in The Apache Software Foundation (\"the ASF\") use public, archived\n mailing lists to create a public record of each project's development\n-activities and decision-making process. As such, all contributors generally\n-must be subscribed to the dev@arrow.apache.org mailing list to participate in\n-the community.\n+activities and decision-making process.\n+While lacking the immediacy of chat or other forms of communication,\n+the mailing lists give participants the opportunity to slow down and be\n+thoughtful in their responses, and they help developers who are spread across\n+many timezones to participate more equally.\n \n-Note that you must be subscribed to the mailing list in order to post to it. To\n-subscribe, send a blank email to dev-subscribe@arrow.apache.org.\n+See `the community page <https://arrow.apache.org/community/>`_ for links to\n+subscribe to the mailing lists and to view archives.\n \n-Mailing list archives can be found `here <https://lists.apache.org/list.html?dev@arrow.apache.org>`_.\n+Report bugs and request features\n\nReview comment:\n       ```suggestion\r\n   Report bugs and propose features\r\n   ```\r\n   \r\n   (not necessarily better language, but just needed to think about how we sometimes complain about users gratuituously \"requesting\" features in the meaning of expecting them to be implemented)\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -76,46 +96,83 @@ visibility. They may add a \"Fix version\" to indicate that they're considering\n it for inclusion in the next release, though adding that tag is not a\n commitment that it will be done in the next release.\n \n-Advanced use\n-------------\n-\n-Once you are involved in the project and want to do more on JIRA, such as\n-assign yourself an issue, you will need \"Contributor\" permissions on the\n-Apache Arrow JIRA. To get this role, ask on the mailing list for a project\n-maintainer's help.\n-\n-GitHub issues\n--------------\n-\n-We support `GitHub issues <https://github.com/apache/arrow/issues>`_ as a\n-lightweight way to ask questions and engage with\n-the Arrow developer community. We use JIRA for maintaining a queue of\n-development work and as the public record for work on the project. So, feel\n-free to open GitHub issues, but bugs and feature requests will eventually need\n-to end up in JIRA, either before or after completing a pull request. Don't be\n-surprised if you are immediately asked by a project maintainer to open a JIRA\n-issue.\n-\n-How to contribute patches\n-=========================\n-\n-We prefer to receive contributions in the form of GitHub pull requests. Please\n-send pull requests against the `github.com/apache/arrow\n-<https://github.com/apache/arrow>`_ repository following the procedure below.\n-\n-If you are looking for some ideas on what to contribute, check out the JIRA\n-issues for the Apache Arrow project. Comment on the issue and/or contact\n-dev@arrow.apache.org with your questions and ideas.\n-\n-If you\u2019d like to report a bug but don\u2019t have time to fix it, you can still post\n-it on JIRA, or email the mailing list dev@arrow.apache.org.\n+Tips for successful bug reports\n++++++++++++++++++++++++++++++++\n+\n+No one likes having bugs in their software, and in an ideal world, all bugs\n+would get fixed as soon as they were reported. However, time and attention are\n+finite, especially in an open-source project where most contributors are\n+participating in their spare time. In order for your bug to get prompt\n+attention, there are things you can do to make it easier for contributors to\n+reproduce and fix it.\n+\n+When you're reporting a bug, please help us understand the issue by providing,\n+to the best of your ability,\n+\n+* Clear, minimal steps to reproduce the issue, with as few non-Arrow\n+  dependencies as possible. If there's a problem on reading a file, try to\n+  provide as small of an example file as possible, or code to create one.\n+  If your bug report says \"it crashes trying to read my file, but I can't\n+  share it with you,\" it's really hard for us to debug.\n+* Any relevant operating system, language, and library version information\n+* If it isn't obvious, clearly state the expected behavior and what actually\n+  happened.\n+\n+If a developer can't get a failing unit test, they won't be able to know that\n+the issue has been identified, and they won't know when it has been fixed.\n+Try to anticipate the questions you might be asked by someone working to\n+understand the issue and provide those supporting details up front.\n+\n\nReview comment:\n       Would it be helpful to link here to some resources about this that are language specific (eg reprex in R), although we want to keep it general here I suppose.\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -168,11 +274,15 @@ remote repo still holds the old history, you would need to do a force push. ::\n look at your updates, please ensure you comment on the PR on GitHub as simply force\n pushing does not trigger a notification in the GitHub user interface.\n \n-Simplifying ``rebase``\n-++++++++++++++++++++++\n+Also, once you have a pull request up, be sure you pull from ``origin``\n+before rebasing and force-pushing. Arrow maintainers can push commits directly\n+to your branch, which they sometimes do to help move a pull request along.\n+In addition, the GitHub PR \"suggestion\" feature can also add commits to\n+your branch, so it is possible that your local copy of your branch is missing\n+some additions.\n\nReview comment:\n       I don't think this paragraph is necessarily encouraging it, just mentioning how to resolve it if some reviewers use it\r\n   \r\n   (I personally like the feature, not necessarily to then commit through the github interface, but just as a means to give a much more concrete review comment, instead of trying to describe in words what you would propose to change)\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n+\n+Local git conventions\n++++++++++++++++++++++\n+\n+If you are tracking the Arrow source repository locally, here are some tips\n+for using ``git``.\n+\n+All Arrow contributors work off of their personal fork of ``apache/arrow``\n+and submit pull requests \"upstream\". Once you've cloned your fork of Arrow,\n+be sure to::\n+\n+    $ git remote add upstream https://github.com/apache/arrow\n+\n+to set the \"upstream\" repository.\n+\n+You are encouraged to develop on branches, rather than your own \"master\" branch,\n+and it helps to keep your fork's master branch synced with ``upstream/master``.\n \n-Thank you in advance for your contributions!\n+To start a new branch, pull the latest from upstream first::\n \n-Common Git conventions followed within the project\n---------------------------------------------------\n+   $ git fetch upstream\n+   $ git checkout master\n+   $ git reset --hard upstream/master\n+   $ git checkout -b $NEW_BRANCH_NAME\n \n-If you are tracking the Arrow source repository locally, following some common Git\n-conventions would make everyone's workflow compatible.  These recommendations along with\n-their rationale are outlined below.\n+It does not matter what you call your branch. Some people like to use the JIRA\n+number as branch name, others use descriptive names.\n \n-It is strongly discouraged to use a regular ``git merge``, as a linear commit history is\n-prefered by the project.  It is much easier to maintain, and makes for easier\n-``cherry-picking`` of features; useful for backporting fixes to maintenance releases.\n+Once you have a branch going, you should sync with ``upstream/master``\n+regularly, as many commits merge to master every day.\n+It is recommended to use ``git rebase`` rather than ``git merge``.\n\nReview comment:\n       Should this \"recommended\" be a bit stronger? \r\n   \r\n   As I think quite some people are used to a merge-workflow rather than a rebase-workflow (including myself), and my understanding was that we really prefer the rebasing workflow (for reasons that I don't understand ;)).\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n+\n+Local git conventions\n++++++++++++++++++++++\n+\n+If you are tracking the Arrow source repository locally, here are some tips\n+for using ``git``.\n+\n+All Arrow contributors work off of their personal fork of ``apache/arrow``\n+and submit pull requests \"upstream\". Once you've cloned your fork of Arrow,\n+be sure to::\n+\n+    $ git remote add upstream https://github.com/apache/arrow\n+\n+to set the \"upstream\" repository.\n+\n+You are encouraged to develop on branches, rather than your own \"master\" branch,\n+and it helps to keep your fork's master branch synced with ``upstream/master``.\n \n-Thank you in advance for your contributions!\n+To start a new branch, pull the latest from upstream first::\n \n-Common Git conventions followed within the project\n---------------------------------------------------\n+   $ git fetch upstream\n+   $ git checkout master\n+   $ git reset --hard upstream/master\n\nReview comment:\n       I typically also do `git pull --ff-only` to update my master branch. \r\n   But mentioning that you might need `git reset --hard upstream/master` (typically after a release) can be useful, as it is something I always have to look for myself after each release ..\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-23T14:36:20.048+0000",
                    "updated": "2020-06-23T14:36:20.048+0000",
                    "started": "2020-06-23T14:36:20.048+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "449834",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/449839",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520#discussion_r444285972\n\n\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n+\n+Local git conventions\n++++++++++++++++++++++\n+\n+If you are tracking the Arrow source repository locally, here are some tips\n+for using ``git``.\n+\n+All Arrow contributors work off of their personal fork of ``apache/arrow``\n+and submit pull requests \"upstream\". Once you've cloned your fork of Arrow,\n+be sure to::\n+\n+    $ git remote add upstream https://github.com/apache/arrow\n+\n+to set the \"upstream\" repository.\n+\n+You are encouraged to develop on branches, rather than your own \"master\" branch,\n+and it helps to keep your fork's master branch synced with ``upstream/master``.\n \n-Thank you in advance for your contributions!\n+To start a new branch, pull the latest from upstream first::\n \n-Common Git conventions followed within the project\n---------------------------------------------------\n+   $ git fetch upstream\n+   $ git checkout master\n+   $ git reset --hard upstream/master\n+   $ git checkout -b $NEW_BRANCH_NAME\n \n-If you are tracking the Arrow source repository locally, following some common Git\n-conventions would make everyone's workflow compatible.  These recommendations along with\n-their rationale are outlined below.\n+It does not matter what you call your branch. Some people like to use the JIRA\n+number as branch name, others use descriptive names.\n \n-It is strongly discouraged to use a regular ``git merge``, as a linear commit history is\n-prefered by the project.  It is much easier to maintain, and makes for easier\n-``cherry-picking`` of features; useful for backporting fixes to maintenance releases.\n+Once you have a branch going, you should sync with ``upstream/master``\n+regularly, as many commits merge to master every day.\n+It is recommended to use ``git rebase`` rather than ``git merge``.\n\nReview comment:\n       Resolving conflicts in a PR with merge commits can be a nightmare, whereas resolving the same conflicts in a PR that doesn't have the merges is, to me, relatively straightforward. Maybe I'm doing something wrong. Very rarely have I seen anything good come out of `git merge`\r\n   \r\n   So I think we can say \"The project maintainers prefer to handle conflict resolution from a rebase standpoint rather than from a merge standpoint. If a PR contains merge commits and contains conflicts, then a maintainer may squash the changes and rebase them to remove the merge commits.\"\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-23T14:51:29.369+0000",
                    "updated": "2020-06-23T14:51:29.369+0000",
                    "started": "2020-06-23T14:51:29.368+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "449839",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/449840",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520#discussion_r444288120\n\n\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n+\n+Local git conventions\n++++++++++++++++++++++\n+\n+If you are tracking the Arrow source repository locally, here are some tips\n+for using ``git``.\n+\n+All Arrow contributors work off of their personal fork of ``apache/arrow``\n+and submit pull requests \"upstream\". Once you've cloned your fork of Arrow,\n+be sure to::\n+\n+    $ git remote add upstream https://github.com/apache/arrow\n+\n+to set the \"upstream\" repository.\n+\n+You are encouraged to develop on branches, rather than your own \"master\" branch,\n+and it helps to keep your fork's master branch synced with ``upstream/master``.\n \n-Thank you in advance for your contributions!\n+To start a new branch, pull the latest from upstream first::\n \n-Common Git conventions followed within the project\n---------------------------------------------------\n+   $ git fetch upstream\n+   $ git checkout master\n+   $ git reset --hard upstream/master\n+   $ git checkout -b $NEW_BRANCH_NAME\n \n-If you are tracking the Arrow source repository locally, following some common Git\n-conventions would make everyone's workflow compatible.  These recommendations along with\n-their rationale are outlined below.\n+It does not matter what you call your branch. Some people like to use the JIRA\n+number as branch name, others use descriptive names.\n \n-It is strongly discouraged to use a regular ``git merge``, as a linear commit history is\n-prefered by the project.  It is much easier to maintain, and makes for easier\n-``cherry-picking`` of features; useful for backporting fixes to maintenance releases.\n+Once you have a branch going, you should sync with ``upstream/master``\n+regularly, as many commits merge to master every day.\n+It is recommended to use ``git rebase`` rather than ``git merge``.\n\nReview comment:\n       FWIW at large organizations like Google, PRs (which are called \"changelists\") with more than one commit are not accepted. Every proposed patch must be a single rebased commit (this is tightly integrated with Gerrit, Google's code review system). I would be much happier using Gerrit than GitHub PRs because of the incremental code diffing system -- once you experience it, it is difficult to go back. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-23T14:54:04.475+0000",
                    "updated": "2020-06-23T14:54:04.475+0000",
                    "started": "2020-06-23T14:54:04.475+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "449840",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/449843",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520#discussion_r444293158\n\n\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n+\n+Local git conventions\n++++++++++++++++++++++\n+\n+If you are tracking the Arrow source repository locally, here are some tips\n+for using ``git``.\n+\n+All Arrow contributors work off of their personal fork of ``apache/arrow``\n+and submit pull requests \"upstream\". Once you've cloned your fork of Arrow,\n+be sure to::\n+\n+    $ git remote add upstream https://github.com/apache/arrow\n+\n+to set the \"upstream\" repository.\n+\n+You are encouraged to develop on branches, rather than your own \"master\" branch,\n+and it helps to keep your fork's master branch synced with ``upstream/master``.\n \n-Thank you in advance for your contributions!\n+To start a new branch, pull the latest from upstream first::\n \n-Common Git conventions followed within the project\n---------------------------------------------------\n+   $ git fetch upstream\n+   $ git checkout master\n+   $ git reset --hard upstream/master\n+   $ git checkout -b $NEW_BRANCH_NAME\n \n-If you are tracking the Arrow source repository locally, following some common Git\n-conventions would make everyone's workflow compatible.  These recommendations along with\n-their rationale are outlined below.\n+It does not matter what you call your branch. Some people like to use the JIRA\n+number as branch name, others use descriptive names.\n \n-It is strongly discouraged to use a regular ``git merge``, as a linear commit history is\n-prefered by the project.  It is much easier to maintain, and makes for easier\n-``cherry-picking`` of features; useful for backporting fixes to maintenance releases.\n+Once you have a branch going, you should sync with ``upstream/master``\n+regularly, as many commits merge to master every day.\n+It is recommended to use ``git rebase`` rather than ``git merge``.\n\nReview comment:\n       > Resolving conflicts in a PR with merge commits can be a nightmare\r\n   \r\n   If you only `merge upstream/master`, then that is in my experience never a nightmare (you should of course never mix rebasing and merging, as that indeed will give nightmares). \r\n   \r\n   Also, when merging master instead of rebasing, you only need to fix merge conflicts once. While now we have here a complicated section about how to simplify the conflict resolution by squashing your commits while rebasing. This is never needed in a merging workflow (which IMO is also nicer because it preserves that you can see what has been changed since a last review on github).\r\n   \r\n   Anyway, we are not going to resolve that discussion here ;) (and both workflows have its pros/cons). I was mainly wondering to what extent we want to push contributors to a chosen workflow.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-23T15:00:49.017+0000",
                    "updated": "2020-06-23T15:00:49.017+0000",
                    "started": "2020-06-23T15:00:49.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "449843",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/449844",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520#discussion_r444295036\n\n\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n+\n+Local git conventions\n++++++++++++++++++++++\n+\n+If you are tracking the Arrow source repository locally, here are some tips\n+for using ``git``.\n+\n+All Arrow contributors work off of their personal fork of ``apache/arrow``\n+and submit pull requests \"upstream\". Once you've cloned your fork of Arrow,\n+be sure to::\n+\n+    $ git remote add upstream https://github.com/apache/arrow\n+\n+to set the \"upstream\" repository.\n+\n+You are encouraged to develop on branches, rather than your own \"master\" branch,\n+and it helps to keep your fork's master branch synced with ``upstream/master``.\n \n-Thank you in advance for your contributions!\n+To start a new branch, pull the latest from upstream first::\n \n-Common Git conventions followed within the project\n---------------------------------------------------\n+   $ git fetch upstream\n+   $ git checkout master\n+   $ git reset --hard upstream/master\n+   $ git checkout -b $NEW_BRANCH_NAME\n \n-If you are tracking the Arrow source repository locally, following some common Git\n-conventions would make everyone's workflow compatible.  These recommendations along with\n-their rationale are outlined below.\n+It does not matter what you call your branch. Some people like to use the JIRA\n+number as branch name, others use descriptive names.\n \n-It is strongly discouraged to use a regular ``git merge``, as a linear commit history is\n-prefered by the project.  It is much easier to maintain, and makes for easier\n-``cherry-picking`` of features; useful for backporting fixes to maintenance releases.\n+Once you have a branch going, you should sync with ``upstream/master``\n+regularly, as many commits merge to master every day.\n+It is recommended to use ``git rebase`` rather than ``git merge``.\n\nReview comment:\n       Yes, it's partly a lack of GitHub's reviewing functionalities, but *when* using GitHub (which is the case right now), my feeling is that a merging workflow works better with it.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-23T15:03:26.473+0000",
                    "updated": "2020-06-23T15:03:26.473+0000",
                    "started": "2020-06-23T15:03:26.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "449844",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/449862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520#discussion_r444318497\n\n\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n+\n+Local git conventions\n++++++++++++++++++++++\n+\n+If you are tracking the Arrow source repository locally, here are some tips\n+for using ``git``.\n+\n+All Arrow contributors work off of their personal fork of ``apache/arrow``\n+and submit pull requests \"upstream\". Once you've cloned your fork of Arrow,\n+be sure to::\n+\n+    $ git remote add upstream https://github.com/apache/arrow\n+\n+to set the \"upstream\" repository.\n+\n+You are encouraged to develop on branches, rather than your own \"master\" branch,\n+and it helps to keep your fork's master branch synced with ``upstream/master``.\n \n-Thank you in advance for your contributions!\n+To start a new branch, pull the latest from upstream first::\n \n-Common Git conventions followed within the project\n---------------------------------------------------\n+   $ git fetch upstream\n+   $ git checkout master\n+   $ git reset --hard upstream/master\n+   $ git checkout -b $NEW_BRANCH_NAME\n \n-If you are tracking the Arrow source repository locally, following some common Git\n-conventions would make everyone's workflow compatible.  These recommendations along with\n-their rationale are outlined below.\n+It does not matter what you call your branch. Some people like to use the JIRA\n+number as branch name, others use descriptive names.\n \n-It is strongly discouraged to use a regular ``git merge``, as a linear commit history is\n-prefered by the project.  It is much easier to maintain, and makes for easier\n-``cherry-picking`` of features; useful for backporting fixes to maintenance releases.\n+Once you have a branch going, you should sync with ``upstream/master``\n+regularly, as many commits merge to master every day.\n+It is recommended to use ``git rebase`` rather than ``git merge``.\n To sync your local copy of a branch, you may do the following::\n \n     $ git pull upstream branch --rebase\n\nReview comment:\n       IDK personally, and IMO it's hard to give `git` advice because everyone has slightly different workflows that work for them\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-23T15:36:14.970+0000",
                    "updated": "2020-06-23T15:36:14.970+0000",
                    "started": "2020-06-23T15:36:14.970+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "449862",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/449867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520#discussion_r444320449\n\n\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -168,11 +274,15 @@ remote repo still holds the old history, you would need to do a force push. ::\n look at your updates, please ensure you comment on the PR on GitHub as simply force\n pushing does not trigger a notification in the GitHub user interface.\n \n-Simplifying ``rebase``\n-++++++++++++++++++++++\n+Also, once you have a pull request up, be sure you pull from ``origin``\n+before rebasing and force-pushing. Arrow maintainers can push commits directly\n+to your branch, which they sometimes do to help move a pull request along.\n+In addition, the GitHub PR \"suggestion\" feature can also add commits to\n+your branch, so it is possible that your local copy of your branch is missing\n+some additions.\n\nReview comment:\n       FWIW I too like the suggestion feature: I find it makes for a better being-reviewed experience because trivial or pedantic suggestions can just be accepted. In any case, I agree with Joris that I don't read this paragraph as an endorsement, just an acknowledgement of a way that `origin` may have commits that you don't have locally, even though it is \"your\" branch.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-23T15:39:19.606+0000",
                    "updated": "2020-06-23T15:39:19.606+0000",
                    "started": "2020-06-23T15:39:19.606+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "449867",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/449872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520#discussion_r444322251\n\n\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -76,46 +96,83 @@ visibility. They may add a \"Fix version\" to indicate that they're considering\n it for inclusion in the next release, though adding that tag is not a\n commitment that it will be done in the next release.\n \n-Advanced use\n-------------\n-\n-Once you are involved in the project and want to do more on JIRA, such as\n-assign yourself an issue, you will need \"Contributor\" permissions on the\n-Apache Arrow JIRA. To get this role, ask on the mailing list for a project\n-maintainer's help.\n-\n-GitHub issues\n--------------\n-\n-We support `GitHub issues <https://github.com/apache/arrow/issues>`_ as a\n-lightweight way to ask questions and engage with\n-the Arrow developer community. We use JIRA for maintaining a queue of\n-development work and as the public record for work on the project. So, feel\n-free to open GitHub issues, but bugs and feature requests will eventually need\n-to end up in JIRA, either before or after completing a pull request. Don't be\n-surprised if you are immediately asked by a project maintainer to open a JIRA\n-issue.\n-\n-How to contribute patches\n-=========================\n-\n-We prefer to receive contributions in the form of GitHub pull requests. Please\n-send pull requests against the `github.com/apache/arrow\n-<https://github.com/apache/arrow>`_ repository following the procedure below.\n-\n-If you are looking for some ideas on what to contribute, check out the JIRA\n-issues for the Apache Arrow project. Comment on the issue and/or contact\n-dev@arrow.apache.org with your questions and ideas.\n-\n-If you\u2019d like to report a bug but don\u2019t have time to fix it, you can still post\n-it on JIRA, or email the mailing list dev@arrow.apache.org.\n+Tips for successful bug reports\n++++++++++++++++++++++++++++++++\n+\n+No one likes having bugs in their software, and in an ideal world, all bugs\n+would get fixed as soon as they were reported. However, time and attention are\n+finite, especially in an open-source project where most contributors are\n+participating in their spare time. In order for your bug to get prompt\n+attention, there are things you can do to make it easier for contributors to\n+reproduce and fix it.\n+\n+When you're reporting a bug, please help us understand the issue by providing,\n+to the best of your ability,\n+\n+* Clear, minimal steps to reproduce the issue, with as few non-Arrow\n+  dependencies as possible. If there's a problem on reading a file, try to\n+  provide as small of an example file as possible, or code to create one.\n+  If your bug report says \"it crashes trying to read my file, but I can't\n+  share it with you,\" it's really hard for us to debug.\n+* Any relevant operating system, language, and library version information\n+* If it isn't obvious, clearly state the expected behavior and what actually\n+  happened.\n+\n+If a developer can't get a failing unit test, they won't be able to know that\n+the issue has been identified, and they won't know when it has been fixed.\n+Try to anticipate the questions you might be asked by someone working to\n+understand the issue and provide those supporting details up front.\n+\n\nReview comment:\n       Clearly there is lots of prior art out there on how to write a good bug report. I hesitated to add links for the reason you mentioned, but I'll see if I can collect a few links that say the same things but in different (programming) languages.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-23T15:41:53.222+0000",
                    "updated": "2020-06-23T15:41:53.222+0000",
                    "started": "2020-06-23T15:41:53.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "449872",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/449882",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520#discussion_r444330998\n\n\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n+\n+Local git conventions\n++++++++++++++++++++++\n+\n+If you are tracking the Arrow source repository locally, here are some tips\n+for using ``git``.\n+\n+All Arrow contributors work off of their personal fork of ``apache/arrow``\n+and submit pull requests \"upstream\". Once you've cloned your fork of Arrow,\n+be sure to::\n+\n+    $ git remote add upstream https://github.com/apache/arrow\n+\n+to set the \"upstream\" repository.\n+\n+You are encouraged to develop on branches, rather than your own \"master\" branch,\n+and it helps to keep your fork's master branch synced with ``upstream/master``.\n \n-Thank you in advance for your contributions!\n+To start a new branch, pull the latest from upstream first::\n \n-Common Git conventions followed within the project\n---------------------------------------------------\n+   $ git fetch upstream\n+   $ git checkout master\n+   $ git reset --hard upstream/master\n\nReview comment:\n       Learn something new every day. \r\n   \r\n   I generally treat `origin/master` as disposable and wish GitHub had a way to keep it automatically in sync with `upstream/master`, but that's neither here nor there.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-23T15:54:24.443+0000",
                    "updated": "2020-06-23T15:54:24.443+0000",
                    "started": "2020-06-23T15:54:24.443+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "449882",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/449884",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520#discussion_r444333447\n\n\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -124,29 +181,72 @@ To contribute a patch:\n   `ARROW-767: [C++] Filesystem abstraction <https://github.com/apache/arrow/pull/4225>`_).\n * Make sure that your code passes the unit tests. You can find instructions how\n   to run the unit tests for each Arrow component in its respective README file.\n+\n+Core developers and others with a stake in the part of the project your change\n+affects will review, request changes, and hopefully indicate their approval\n+in the end. To make the review process smooth for everyone, try to\n+\n+* Break your work into small, single-purpose patches if possible. It\u2019s much\n+  harder to merge in a large change with a lot of disjoint features, and\n+  particularly if you're new to the project, smaller changes are much easier\n+  for maintainers to accept.\n * Add new unit tests for your code.\n+* Follow the style guides for the part(s) of the project you're modifying.\n+  Some languages (C++, Python, and Rust, for example) run a lint check in\n+  continuous integration. For all languages, see their respective developer\n+  documentation and READMEs for style guidance. In general, try to make it look\n+  as if the codebase has a single author, and emulate any conventions you see,\n+  whether or not they are officially documented or checked.\n+\n+When tests are passing and the pull request has been approved by the interested\n+parties, a committer will merge the pull request. This is done with a\n+command-line utility that does a squash merge, so all of your commits will be\n+registered as a single commit to the master branch; this simplifies the\n+connection between JIRA issues and commits, and it makes it easier to bisect\n+history to identify where changes were introduced. A side effect of this way of\n+merging is that your pull request will appear in the GitHub interface to have\n+been \"closed without merge\". Do not be alarmed: if you look at the bottom, you\n+will see a message that says \"@user closed this in $COMMIT\".\n+\n+Local git conventions\n++++++++++++++++++++++\n+\n+If you are tracking the Arrow source repository locally, here are some tips\n+for using ``git``.\n+\n+All Arrow contributors work off of their personal fork of ``apache/arrow``\n+and submit pull requests \"upstream\". Once you've cloned your fork of Arrow,\n+be sure to::\n+\n+    $ git remote add upstream https://github.com/apache/arrow\n+\n+to set the \"upstream\" repository.\n+\n+You are encouraged to develop on branches, rather than your own \"master\" branch,\n+and it helps to keep your fork's master branch synced with ``upstream/master``.\n \n-Thank you in advance for your contributions!\n+To start a new branch, pull the latest from upstream first::\n \n-Common Git conventions followed within the project\n---------------------------------------------------\n+   $ git fetch upstream\n+   $ git checkout master\n+   $ git reset --hard upstream/master\n+   $ git checkout -b $NEW_BRANCH_NAME\n \n-If you are tracking the Arrow source repository locally, following some common Git\n-conventions would make everyone's workflow compatible.  These recommendations along with\n-their rationale are outlined below.\n+It does not matter what you call your branch. Some people like to use the JIRA\n+number as branch name, others use descriptive names.\n \n-It is strongly discouraged to use a regular ``git merge``, as a linear commit history is\n-prefered by the project.  It is much easier to maintain, and makes for easier\n-``cherry-picking`` of features; useful for backporting fixes to maintenance releases.\n+Once you have a branch going, you should sync with ``upstream/master``\n+regularly, as many commits merge to master every day.\n+It is recommended to use ``git rebase`` rather than ``git merge``.\n\nReview comment:\n       Honestly I don't think it matters what people do on their branches since we squash merge in the end, right?\r\n   \r\n   The last thing I want out of this document is to spark a flame war between `rebase` and `merge` partisans. I wouldn't have added this section myself but there was a JIRA requesting it and someone else added it this weekend.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-23T15:57:51.231+0000",
                    "updated": "2020-06-23T15:57:51.231+0000",
                    "started": "2020-06-23T15:57:51.231+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "449884",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/450041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520#discussion_r444533246\n\n\n\n##########\nFile path: docs/source/developers/contributing.rst\n##########\n@@ -76,46 +96,83 @@ visibility. They may add a \"Fix version\" to indicate that they're considering\n it for inclusion in the next release, though adding that tag is not a\n commitment that it will be done in the next release.\n \n-Advanced use\n-------------\n-\n-Once you are involved in the project and want to do more on JIRA, such as\n-assign yourself an issue, you will need \"Contributor\" permissions on the\n-Apache Arrow JIRA. To get this role, ask on the mailing list for a project\n-maintainer's help.\n-\n-GitHub issues\n--------------\n-\n-We support `GitHub issues <https://github.com/apache/arrow/issues>`_ as a\n-lightweight way to ask questions and engage with\n-the Arrow developer community. We use JIRA for maintaining a queue of\n-development work and as the public record for work on the project. So, feel\n-free to open GitHub issues, but bugs and feature requests will eventually need\n-to end up in JIRA, either before or after completing a pull request. Don't be\n-surprised if you are immediately asked by a project maintainer to open a JIRA\n-issue.\n-\n-How to contribute patches\n-=========================\n-\n-We prefer to receive contributions in the form of GitHub pull requests. Please\n-send pull requests against the `github.com/apache/arrow\n-<https://github.com/apache/arrow>`_ repository following the procedure below.\n-\n-If you are looking for some ideas on what to contribute, check out the JIRA\n-issues for the Apache Arrow project. Comment on the issue and/or contact\n-dev@arrow.apache.org with your questions and ideas.\n-\n-If you\u2019d like to report a bug but don\u2019t have time to fix it, you can still post\n-it on JIRA, or email the mailing list dev@arrow.apache.org.\n+Tips for successful bug reports\n++++++++++++++++++++++++++++++++\n+\n+No one likes having bugs in their software, and in an ideal world, all bugs\n+would get fixed as soon as they were reported. However, time and attention are\n+finite, especially in an open-source project where most contributors are\n+participating in their spare time. In order for your bug to get prompt\n+attention, there are things you can do to make it easier for contributors to\n+reproduce and fix it.\n+\n+When you're reporting a bug, please help us understand the issue by providing,\n+to the best of your ability,\n+\n+* Clear, minimal steps to reproduce the issue, with as few non-Arrow\n+  dependencies as possible. If there's a problem on reading a file, try to\n+  provide as small of an example file as possible, or code to create one.\n+  If your bug report says \"it crashes trying to read my file, but I can't\n+  share it with you,\" it's really hard for us to debug.\n+* Any relevant operating system, language, and library version information\n+* If it isn't obvious, clearly state the expected behavior and what actually\n+  happened.\n+\n+If a developer can't get a failing unit test, they won't be able to know that\n+the issue has been identified, and they won't know when it has been fixed.\n+Try to anticipate the questions you might be asked by someone working to\n+understand the issue and provide those supporting details up front.\n+\n\nReview comment:\n       I added a couple of links; feel free to add others if you have favorites\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-23T22:00:56.668+0000",
                    "updated": "2020-06-23T22:00:56.668+0000",
                    "started": "2020-06-23T22:00:56.668+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450041",
                    "issueId": "13312518"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/worklog/450641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #7520:\nURL: https://github.com/apache/arrow/pull/7520\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-24T21:12:48.339+0000",
                    "updated": "2020-06-24T21:12:48.339+0000",
                    "started": "2020-06-24T21:12:48.339+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450641",
                    "issueId": "13312518"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@58e472e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@246e3bbf[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b4eb54b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3e28c85e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@69879179[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4d29aa4[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a288398[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@62bac2bb[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37639bcc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2774303e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@799e530b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4d85e999[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jun 24 21:12:50 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-24T21:12:50.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9189/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2020-06-19T16:38:31.000+0000",
        "updated": "2020-06-24T21:12:50.000+0000",
        "timeoriginalestimate": null,
        "description": "https://spark.apache.org/contributing.html is much richer and welcoming than ours, for example. We probably don't need everything on that page but we can do better.\r\n\r\nIncludes ARROW-4429",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Website] Improve contributor guide",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312518/comment/17144403",
                    "id": "17144403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7520\n[https://github.com/apache/arrow/pull/7520]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-24T21:12:50.533+0000",
                    "updated": "2020-06-24T21:12:50.533+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0g19c:",
        "customfield_12314139": null
    }
}