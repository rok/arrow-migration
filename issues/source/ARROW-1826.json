{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13118833",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118833",
    "key": "ARROW-1826",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=siddteotia",
            "name": "siddteotia",
            "key": "siddteotia",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=siddteotia&avatarId=32343",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=siddteotia&avatarId=32343",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=siddteotia&avatarId=32343",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=siddteotia&avatarId=32343"
            },
            "displayName": "Siddharth Teotia",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=siddteotia",
            "name": "siddteotia",
            "key": "siddteotia",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=siddteotia&avatarId=32343",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=siddteotia&avatarId=32343",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=siddteotia&avatarId=32343",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=siddteotia&avatarId=32343"
            },
            "displayName": "Siddharth Teotia",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=siddteotia",
            "name": "siddteotia",
            "key": "siddteotia",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=siddteotia&avatarId=32343",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=siddteotia&avatarId=32343",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=siddteotia&avatarId=32343",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=siddteotia&avatarId=32343"
            },
            "displayName": "Siddharth Teotia",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1826/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@703ca627[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36c65ef9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@988035b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@dbdb505[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60290ea7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@78ba9ad1[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31e1cc46[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@519442e2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79602241[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@552043ae[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a9c26b0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@19ecea53[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Nov 20 19:22:14 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-11-21T23:56:19.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1826/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-11-16T08:10:05.000+0000",
        "updated": "2019-06-03T12:44:00.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JAVA] Avoid branching at cell level (copyFrom)",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118833/comment/16254925",
                    "id": "16254925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia opened a new pull request #1325: ARROW-1826: [JAVA] Avoid branching in copyFrom for fixed width scalars\nURL: https://github.com/apache/arrow/pull/1325\n \n \n   cc @jacques-n , @BryanCutler , @icexelloss \r\n   \r\n   Note: there was no performance regression or different behavior introduced as part of refactor patches.\r\n   \r\n   This is something I had noticed in the old code during refactoring but lost track of it. copyFrom function for fixed width scalars does a double check if the cell in the source vector is NULL or not. The old code used to do the same.\r\n   \r\n   There is a straightforward way to avoid double check but the new changes avoid branch all-together; since it is fine to copy garbage from source vector as long as the validity bit is copied correctly to indicate NULL or non-NULL value in the target cell.\r\n   \r\n   Will add unit tests. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-16T08:20:13.109+0000",
                    "updated": "2017-11-16T08:20:13.109+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118833/comment/16255726",
                    "id": "16255726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1325: ARROW-1826: [JAVA] Avoid branching in copyFrom for fixed width scalars\nURL: https://github.com/apache/arrow/pull/1325#issuecomment-345011489\n \n \n   Looks good. Please add unit test.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-16T18:18:16.616+0000",
                    "updated": "2017-11-16T18:18:16.616+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118833/comment/16255964",
                    "id": "16255964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "jacques-n commented on issue #1325: ARROW-1826: [JAVA] Avoid branching in copyFrom for fixed width scalars\nURL: https://github.com/apache/arrow/pull/1325#issuecomment-345062181\n \n \n   lgtm. Agree that unit test would be good if we don't already have them.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-16T21:05:37.884+0000",
                    "updated": "2017-11-16T21:05:37.884+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118833/comment/16259602",
                    "id": "16259602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on issue #1325: ARROW-1826: [JAVA] Avoid branching in copyFrom for fixed width scalars\nURL: https://github.com/apache/arrow/pull/1325#issuecomment-345783869\n \n \n   This can be merged. Added unit tests as necessary.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-20T18:23:59.732+0000",
                    "updated": "2017-11-20T18:23:59.732+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118833/comment/16259609",
                    "id": "16259609",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "jacques-n commented on issue #1325: ARROW-1826: [JAVA] Avoid branching in copyFrom for fixed width scalars\nURL: https://github.com/apache/arrow/pull/1325#issuecomment-345785472\n \n \n   Looks good +1\r\n   \r\n   @siddharthteotia, can you merge this? No need to rely on Wes to do these things.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-20T18:29:36.134+0000",
                    "updated": "2017-11-20T18:29:36.134+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118833/comment/16259645",
                    "id": "16259645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on issue #1325: ARROW-1826: [JAVA] Avoid branching in copyFrom for fixed width scalars\nURL: https://github.com/apache/arrow/pull/1325#issuecomment-345790467\n \n \n   +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-20T18:48:24.942+0000",
                    "updated": "2017-11-20T18:48:24.942+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118833/comment/16259702",
                    "id": "16259702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1325: ARROW-1826: [JAVA] Avoid branching in copyFrom for fixed width scalars\nURL: https://github.com/apache/arrow/pull/1325#issuecomment-345800163\n \n \n   Merging in case Sidd hasn't got the Gitbox stuff set up yet\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-20T19:21:18.532+0000",
                    "updated": "2017-11-20T19:21:18.532+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118833/comment/16259705",
                    "id": "16259705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1325\n[https://github.com/apache/arrow/pull/1325]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-11-20T19:21:48.761+0000",
                    "updated": "2017-11-20T19:21:48.761+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118833/comment/16259706",
                    "id": "16259706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1325: ARROW-1826: [JAVA] Avoid branching in copyFrom for fixed width scalars\nURL: https://github.com/apache/arrow/pull/1325\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableBigIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableBigIntVector.java\nindex eca6592c5..8d44c92e4 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableBigIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableBigIntVector.java\n@@ -137,11 +137,9 @@ public Long getObject(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableBigIntVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final long value = from.valueBuffer.getLong(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setLong(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableBitVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableBitVector.java\nindex bd363f5b7..086331e13 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableBitVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableBitVector.java\n@@ -286,11 +286,8 @@ public Boolean getObject(int index) {\n    * @param from      source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableBitVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    BitVectorHelper.setValidityBit(valueBuffer, thisIndex, from.getBit(fromIndex));\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableDateDayVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableDateDayVector.java\nindex c5ddc9e87..bb14d1ac0 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableDateDayVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableDateDayVector.java\n@@ -139,11 +139,9 @@ public Integer getObject(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableDateDayVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final int value = from.valueBuffer.getInt(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setInt(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableDateMilliVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableDateMilliVector.java\nindex 7e37055da..97205c318 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableDateMilliVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableDateMilliVector.java\n@@ -144,11 +144,9 @@ public LocalDateTime getObject(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableDateMilliVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final long value = from.valueBuffer.getLong(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setLong(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableDecimalVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableDecimalVector.java\nindex dcc551094..5d2782a4c 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableDecimalVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableDecimalVector.java\n@@ -151,13 +151,9 @@ public BigDecimal getObject(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableDecimalVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      from.valueBuffer.getBytes(fromIndex * TYPE_WIDTH, valueBuffer,\n-              thisIndex * TYPE_WIDTH, TYPE_WIDTH);\n-      BitVectorHelper.setValidityBitToOne(validityBuffer, thisIndex);\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    from.valueBuffer.getBytes(fromIndex * TYPE_WIDTH, valueBuffer,\n+            thisIndex * TYPE_WIDTH, TYPE_WIDTH);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat4Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat4Vector.java\nindex 834f16c21..5d7128d2b 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat4Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat4Vector.java\n@@ -138,11 +138,9 @@ public Float getObject(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableFloat4Vector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final float value = from.valueBuffer.getFloat(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setFloat(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat8Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat8Vector.java\nindex b054d9b05..7aa546150 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat8Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat8Vector.java\n@@ -138,11 +138,9 @@ public Double getObject(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableFloat8Vector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final double value = from.valueBuffer.getDouble(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setDouble(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableIntVector.java\nindex e5dfbcedc..7c6f29ad7 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableIntVector.java\n@@ -143,11 +143,9 @@ public Integer getObject(int index) {\n    * @param from      source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableIntVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final int value = from.valueBuffer.getInt(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setInt(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableIntervalDayVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableIntervalDayVector.java\nindex 8d2fb5661..862f6429c 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableIntervalDayVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableIntervalDayVector.java\n@@ -186,13 +186,9 @@ private StringBuilder getAsStringBuilderHelper(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableIntervalDayVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      BitVectorHelper.setValidityBitToOne(validityBuffer, thisIndex);\n-      from.valueBuffer.getBytes(fromIndex * TYPE_WIDTH, this.valueBuffer,\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    from.valueBuffer.getBytes(fromIndex * TYPE_WIDTH, this.valueBuffer,\n               thisIndex * TYPE_WIDTH, TYPE_WIDTH);\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableIntervalYearVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableIntervalYearVector.java\nindex ac121d2f0..3fba5bfee 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableIntervalYearVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableIntervalYearVector.java\n@@ -170,11 +170,9 @@ private StringBuilder getAsStringBuilderHelper(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableIntervalYearVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final int value = from.valueBuffer.getInt(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setInt(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableSmallIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableSmallIntVector.java\nindex 5dd1492a3..d5c66b115 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableSmallIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableSmallIntVector.java\n@@ -138,11 +138,9 @@ public Short getObject(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableSmallIntVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final short value = from.valueBuffer.getShort(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setShort(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMicroVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMicroVector.java\nindex 25da4f68d..ca8e1aacf 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMicroVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMicroVector.java\n@@ -139,11 +139,9 @@ public Long getObject(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableTimeMicroVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final long value = from.valueBuffer.getLong(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setLong(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMilliVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMilliVector.java\nindex 7d2d5d1f1..a28ccfe00 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMilliVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMilliVector.java\n@@ -140,11 +140,9 @@ public LocalDateTime getObject(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableTimeMilliVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final int value = from.valueBuffer.getInt(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setInt(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeNanoVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeNanoVector.java\nindex e93a63fe2..e6903c011 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeNanoVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeNanoVector.java\n@@ -138,11 +138,9 @@ public Long getObject(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableTimeNanoVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final long value = from.valueBuffer.getLong(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setLong(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeSecVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeSecVector.java\nindex 8329fa781..85426a369 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeSecVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeSecVector.java\n@@ -138,11 +138,9 @@ public Integer getObject(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableTimeSecVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final int value = from.valueBuffer.getInt(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setInt(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeStampVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeStampVector.java\nindex d65cb83e1..e1b719f66 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeStampVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeStampVector.java\n@@ -70,11 +70,9 @@ public long get(int index) throws IllegalStateException {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableTimeStampVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final long value = from.valueBuffer.getLong(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setLong(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableTinyIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableTinyIntVector.java\nindex 106359ddd..cadfe6085 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableTinyIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableTinyIntVector.java\n@@ -138,11 +138,9 @@ public Byte getObject(int index) {\n    * @param from source vector\n    */\n   public void copyFrom(int fromIndex, int thisIndex, NullableTinyIntVector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final byte value = from.valueBuffer.getByte(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setByte(thisIndex * TYPE_WIDTH, value);\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt1Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt1Vector.java\nindex 52f6c151b..ebd9b5699 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt1Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt1Vector.java\n@@ -108,11 +108,9 @@ public Byte getObject(int index) {\n   }\n \n   public void copyFrom(int fromIndex, int thisIndex, NullableUInt1Vector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final byte value = from.valueBuffer.getByte(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setByte(thisIndex * TYPE_WIDTH, value);\n   }\n \n   public void copyFromSafe(int fromIndex, int thisIndex, NullableUInt1Vector from) {\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt2Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt2Vector.java\nindex 42ba6e139..bedb3f35e 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt2Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt2Vector.java\n@@ -109,11 +109,9 @@ public Character getObject(int index) {\n   }\n \n   public void copyFrom(int fromIndex, int thisIndex, NullableUInt2Vector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final char value = from.valueBuffer.getChar(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setChar(thisIndex * TYPE_WIDTH, value);\n   }\n \n   public void copyFromSafe(int fromIndex, int thisIndex, NullableUInt2Vector from) {\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt4Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt4Vector.java\nindex 1ec21490d..99b547ca4 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt4Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt4Vector.java\n@@ -109,11 +109,9 @@ public Integer getObject(int index) {\n   }\n \n   public void copyFrom(int fromIndex, int thisIndex, NullableUInt4Vector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final int value = from.valueBuffer.getInt(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setInt(thisIndex * TYPE_WIDTH, value);\n   }\n \n   public void copyFromSafe(int fromIndex, int thisIndex, NullableUInt4Vector from) {\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt8Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt8Vector.java\nindex 408a810cf..e6664a092 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt8Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableUInt8Vector.java\n@@ -109,11 +109,9 @@ public Long getObject(int index) {\n   }\n \n   public void copyFrom(int fromIndex, int thisIndex, NullableUInt8Vector from) {\n-    if (from.isSet(fromIndex) != 0) {\n-      set(thisIndex, from.get(fromIndex));\n-    } else {\n-      BitVectorHelper.setValidityBit(validityBuffer, thisIndex, 0);\n-    }\n+    BitVectorHelper.setValidityBit(validityBuffer, thisIndex, from.isSet(fromIndex));\n+    final long value = from.valueBuffer.getLong(fromIndex * TYPE_WIDTH);\n+    valueBuffer.setLong(thisIndex * TYPE_WIDTH, value);\n   }\n \n   public void copyFromSafe(int fromIndex, int thisIndex, NullableUInt8Vector from) {\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java b/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\nnew file mode 100644\nindex 000000000..7cdfbdf45\n--- /dev/null\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\n@@ -0,0 +1,1037 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.types.Types;\n+import org.joda.time.Period;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.math.BigDecimal;\n+\n+import static org.apache.arrow.vector.TestUtils.newVector;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+/**\n+ * Tested field types:\n+ *\n+ * NullableInt\n+ * NullableBigInt\n+ * NullableFloat4\n+ * NullableFloat8\n+ * NullableBit\n+ * NullableDecimal\n+ * NullableIntervalDay\n+ * NullableIntervalYear\n+ * NullableSmallInt\n+ * NullableTinyInt\n+ * NullableVarChar\n+ * NullableTimeMicro\n+ * NullableTimeMilli\n+ * NullableTimeStamp*\n+ */\n+\n+public class TestCopyFrom {\n+\n+  private final static String EMPTY_SCHEMA_PATH = \"\";\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void init() {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+  }\n+\n+  @After\n+  public void terminate() throws Exception {\n+    allocator.close();\n+  }\n+\n+  @Test /* NullableVarChar */\n+  public void testCopyFromWithNulls() {\n+    try (final NullableVarCharVector vector = newVector(NullableVarCharVector.class, EMPTY_SCHEMA_PATH, Types.MinorType.VARCHAR, allocator);\n+         final NullableVarCharVector vector2 = newVector(NullableVarCharVector.class, EMPTY_SCHEMA_PATH, Types.MinorType.VARCHAR, allocator)) {\n+\n+      vector.allocateNew();\n+      int capacity = vector.getValueCapacity();\n+      assertEquals(4095, capacity);\n+\n+      for (int i = 0; i < 4095; i++) {\n+        if (i % 3 == 0) {\n+          continue;\n+        }\n+        byte[] b = Integer.toString(i).getBytes();\n+        vector.setSafe(i, b, 0, b.length);\n+      }\n+\n+      /* NO reAlloc() should have happened in setSafe() */\n+      capacity = vector.getValueCapacity();\n+      assertEquals(4095, capacity);\n+\n+      vector.setValueCount(4095);\n+\n+      for (int i = 0; i < 4095; i++) {\n+        if (i % 3 == 0) {\n+          assertNull(vector.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i, Integer.toString(i), vector.getObject(i).toString());\n+        }\n+      }\n+\n+      vector2.allocateNew();\n+      capacity = vector2.getValueCapacity();\n+      assertEquals(4095, capacity);\n+\n+      for (int i = 0; i < 4095; i++) {\n+        vector2.copyFromSafe(i, i, vector);\n+        if (i % 3 == 0) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i, Integer.toString(i), vector2.getObject(i).toString());\n+        }\n+      }\n+\n+      /* NO reAlloc() should have happened in copyFrom */\n+      capacity = vector2.getValueCapacity();\n+      assertEquals(4095, capacity);\n+\n+      vector2.setValueCount(4095);\n+\n+      for (int i = 0; i < 4095; i++) {\n+        if (i % 3 == 0) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i, Integer.toString(i), vector2.getObject(i).toString());\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableVarChar */\n+  public void testCopyFromWithNulls1() {\n+    try (final NullableVarCharVector vector = newVector(NullableVarCharVector.class, EMPTY_SCHEMA_PATH, Types.MinorType.VARCHAR, allocator);\n+         final NullableVarCharVector vector2 = newVector(NullableVarCharVector.class, EMPTY_SCHEMA_PATH, Types.MinorType.VARCHAR, allocator)) {\n+\n+      vector.allocateNew();\n+      int capacity = vector.getValueCapacity();\n+      assertEquals(4095, capacity);\n+\n+      for (int i = 0; i < 4095; i++) {\n+        if (i % 3 == 0) {\n+          continue;\n+        }\n+        byte[] b = Integer.toString(i).getBytes();\n+        vector.setSafe(i, b, 0, b.length);\n+      }\n+\n+      /* NO reAlloc() should have happened in setSafe() */\n+      capacity = vector.getValueCapacity();\n+      assertEquals(4095, capacity);\n+\n+      vector.setValueCount(4095);\n+\n+      for (int i = 0; i < 4095; i++) {\n+        if (i % 3 == 0) {\n+          assertNull(vector.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i, Integer.toString(i), vector.getObject(i).toString());\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024 * 10, 1024);\n+\n+      capacity = vector2.getValueCapacity();\n+      assertEquals(1024, capacity);\n+\n+      for (int i = 0; i < 4095; i++) {\n+        vector2.copyFromSafe(i, i, vector);\n+        if (i % 3 == 0) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i, Integer.toString(i), vector2.getObject(i).toString());\n+        }\n+      }\n+\n+      /* 2 reAllocs should have happened in copyFromSafe() */\n+      capacity = vector2.getValueCapacity();\n+      assertEquals(4096, capacity);\n+\n+      vector2.setValueCount(4095);\n+\n+      for (int i = 0; i < 4095; i++) {\n+        if (i % 3 == 0) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i, Integer.toString(i), vector2.getObject(i).toString());\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableIntVector */\n+  public void testCopyFromWithNulls2() {\n+    try (final NullableIntVector vector1 = new NullableIntVector(EMPTY_SCHEMA_PATH, allocator);\n+         final NullableIntVector vector2 = new NullableIntVector(EMPTY_SCHEMA_PATH, allocator)) {\n+\n+      vector1.allocateNew();\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(0, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          continue;\n+        }\n+        vector1.setSafe(i, 1000 + i);\n+      }\n+\n+      vector1.setValueCount(4096);\n+\n+      /* No realloc should have happened in setSafe or\n+       * setValueCount\n+       */\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(4096, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          assertNull(vector1.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i, 1000 + i, vector1.get(i));\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024);\n+      assertEquals(1024, vector2.getValueCapacity());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        vector2.copyFromSafe(i, i, vector1);\n+      }\n+\n+      /* 2 realloc should have happened in copyFromSafe() */\n+      assertEquals(4096, vector2.getValueCapacity());\n+      vector2.setValueCount(8192);\n+      /* setValueCount() should have done another realloc */\n+      assertEquals(8192, vector2.getValueCount());\n+      assertEquals(8192, vector2.getValueCapacity());\n+\n+      /* check vector data after copy and realloc */\n+      for (int i = 0; i < 8192; i++) {\n+        if (((i&1) == 0) || (i >= 4096)) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i, 1000 + i, vector2.get(i));\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableBigIntVector */\n+  public void testCopyFromWithNulls3() {\n+    try (final NullableBigIntVector vector1 = new NullableBigIntVector(EMPTY_SCHEMA_PATH, allocator);\n+         final NullableBigIntVector vector2 = new NullableBigIntVector(EMPTY_SCHEMA_PATH, allocator)) {\n+\n+      vector1.allocateNew();\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(0, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          continue;\n+        }\n+        vector1.setSafe(i, 10000000000L + (long)i);\n+      }\n+\n+      vector1.setValueCount(4096);\n+\n+      /* No realloc should have happened in setSafe or\n+       * setValueCount\n+       */\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(4096, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          assertNull(vector1.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  10000000000L + (long)i, vector1.get(i));\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024);\n+      assertEquals(1024, vector2.getValueCapacity());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        vector2.copyFromSafe(i, i, vector1);\n+      }\n+\n+      /* 2 realloc should have happened in copyFromSafe() */\n+      assertEquals(4096, vector2.getValueCapacity());\n+      vector2.setValueCount(8192);\n+      /* setValueCount() should have done another realloc */\n+      assertEquals(8192, vector2.getValueCount());\n+      assertEquals(8192, vector2.getValueCapacity());\n+\n+      /* check vector data after copy and realloc */\n+      for (int i = 0; i < 8192; i++) {\n+        if (((i&1) == 0) || (i >= 4096)) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  10000000000L + (long)i, vector2.get(i));\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableBitVector */\n+  public void testCopyFromWithNulls4() {\n+    try (final NullableBitVector vector1 = new NullableBitVector(EMPTY_SCHEMA_PATH, allocator);\n+         final NullableBitVector vector2 = new NullableBitVector(EMPTY_SCHEMA_PATH, allocator)) {\n+\n+      vector1.allocateNew();\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(0, vector1.getValueCount());\n+\n+      int counter = 0;\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          continue;\n+        }\n+        if ((counter&1) == 0) {\n+          vector1.setSafe(i, 1);\n+        } else {\n+          vector1.setSafe(i, 0);\n+        }\n+        counter++;\n+      }\n+\n+      vector1.setValueCount(4096);\n+\n+      /* No realloc should have happened in setSafe or\n+       * setValueCount\n+       */\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(4096, vector1.getValueCount());\n+\n+      counter = 0;\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          assertNull(vector1.getObject(i));\n+        } else {\n+          if ((counter&1) == 0) {\n+            assertTrue(vector1.getObject(i));\n+          } else {\n+            assertFalse(vector1.getObject(i));\n+          }\n+          counter++;\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024);\n+      assertEquals(1024, vector2.getValueCapacity());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        vector2.copyFromSafe(i, i, vector1);\n+      }\n+\n+      /* 2 realloc should have happened in copyFromSafe() */\n+      assertEquals(4096, vector2.getValueCapacity());\n+      vector2.setValueCount(8192);\n+      /* setValueCount() should have done another realloc */\n+      assertEquals(8192, vector2.getValueCount());\n+      assertEquals(8192, vector2.getValueCapacity());\n+\n+      /* check vector data after copy and realloc */\n+      counter = 0;\n+      for (int i = 0; i < 8192; i++) {\n+        if (((i&1) == 0) || (i >= 4096)) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          if ((counter&1) == 0) {\n+            assertTrue(vector2.getObject(i));\n+          } else {\n+            assertFalse(vector2.getObject(i));\n+          }\n+          counter++;\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableFloat4Vector */\n+  public void testCopyFromWithNulls5() {\n+    try (final NullableFloat4Vector vector1 = new NullableFloat4Vector(EMPTY_SCHEMA_PATH, allocator);\n+         final NullableFloat4Vector vector2 = new NullableFloat4Vector(EMPTY_SCHEMA_PATH, allocator)) {\n+\n+      vector1.allocateNew();\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(0, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          continue;\n+        }\n+        vector1.setSafe(i, 100.25f + (float)i);\n+      }\n+\n+      vector1.setValueCount(4096);\n+\n+      /* No realloc should have happened in setSafe or\n+       * setValueCount\n+       */\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(4096, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          assertNull(vector1.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  100.25f + (float)i, vector1.get(i), 0);\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024);\n+      assertEquals(1024, vector2.getValueCapacity());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        vector2.copyFromSafe(i, i, vector1);\n+      }\n+\n+      /* 2 realloc should have happened in copyFromSafe() */\n+      assertEquals(4096, vector2.getValueCapacity());\n+      vector2.setValueCount(8192);\n+      /* setValueCount() should have done another realloc */\n+      assertEquals(8192, vector2.getValueCount());\n+      assertEquals(8192, vector2.getValueCapacity());\n+\n+      /* check vector data after copy and realloc */\n+      for (int i = 0; i < 8192; i++) {\n+        if (((i&1) == 0) || (i >= 4096)) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  100.25f + i*1.0f, vector2.get(i), 0);\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableFloat8Vector */\n+  public void testCopyFromWithNulls6() {\n+    try (final NullableFloat8Vector vector1 = new NullableFloat8Vector(EMPTY_SCHEMA_PATH, allocator);\n+         final NullableFloat8Vector vector2 = new NullableFloat8Vector(EMPTY_SCHEMA_PATH, allocator)) {\n+\n+      vector1.allocateNew();\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(0, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          continue;\n+        }\n+        vector1.setSafe(i, 123456.7865 + (double) i);\n+      }\n+\n+      vector1.setValueCount(4096);\n+\n+      /* No realloc should have happened in setSafe or\n+       * setValueCount\n+       */\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(4096, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          assertNull(vector1.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  123456.7865 + (double) i, vector1.get(i), 0);\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024);\n+      assertEquals(1024, vector2.getValueCapacity());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        vector2.copyFromSafe(i, i, vector1);\n+      }\n+\n+      /* 2 realloc should have happened in copyFromSafe() */\n+      assertEquals(4096, vector2.getValueCapacity());\n+      vector2.setValueCount(8192);\n+      /* setValueCount() should have done another realloc */\n+      assertEquals(8192, vector2.getValueCount());\n+      assertEquals(8192, vector2.getValueCapacity());\n+\n+      /* check vector data after copy and realloc */\n+      for (int i = 0; i < 8192; i++) {\n+        if (((i&1) == 0) || (i >= 4096)) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  123456.7865 + (double) i, vector2.get(i), 0);\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableIntervalDayVector */\n+  public void testCopyFromWithNulls7() {\n+    try (final NullableIntervalDayVector vector1 = new NullableIntervalDayVector(EMPTY_SCHEMA_PATH, allocator);\n+         final NullableIntervalDayVector vector2 = new NullableIntervalDayVector(EMPTY_SCHEMA_PATH, allocator)) {\n+\n+      vector1.allocateNew();\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(0, vector1.getValueCount());\n+\n+      final int days = 10;\n+      final int milliseconds = 10000;\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          continue;\n+        }\n+        vector1.setSafe(i, days + i, milliseconds + i);\n+      }\n+\n+      vector1.setValueCount(4096);\n+\n+      /* No realloc should have happened in setSafe or\n+       * setValueCount\n+       */\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(4096, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          assertNull(vector1.getObject(i));\n+        } else {\n+          final Period p = vector1.getObject(i);\n+          assertEquals(days + i, p.getDays());\n+          assertEquals(milliseconds + i, p.getMillis());\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024);\n+      assertEquals(1024, vector2.getValueCapacity());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        vector2.copyFromSafe(i, i, vector1);\n+      }\n+\n+      /* 2 realloc should have happened in copyFromSafe() */\n+      assertEquals(4096, vector2.getValueCapacity());\n+      vector2.setValueCount(8192);\n+      /* setValueCount() should have done another realloc */\n+      assertEquals(8192, vector2.getValueCount());\n+      assertEquals(8192, vector2.getValueCapacity());\n+\n+      /* check vector data after copy and realloc */\n+      for (int i = 0; i < 8192; i++) {\n+        if (((i&1) == 0) || (i >= 4096)) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          final Period p = vector2.getObject(i);\n+          assertEquals(days + i, p.getDays());\n+          assertEquals(milliseconds + i, p.getMillis());\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableIntervalYearVector */\n+  public void testCopyFromWithNulls8() {\n+    try (final NullableIntervalYearVector vector1 = new NullableIntervalYearVector(EMPTY_SCHEMA_PATH, allocator);\n+         final NullableIntervalYearVector vector2 = new NullableIntervalYearVector(EMPTY_SCHEMA_PATH, allocator)) {\n+\n+      vector1.allocateNew();\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(0, vector1.getValueCount());\n+\n+      final int interval = 30; /* 2 years 6 months */\n+      final Period[]  periods = new Period[4096];\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          continue;\n+        }\n+        vector1.setSafe(i, interval + i);\n+        final Period p = new Period();\n+        final int years = (interval + i) / org.apache.arrow.vector.util.DateUtility.yearsToMonths;\n+        final int months = (interval + i) % org.apache.arrow.vector.util.DateUtility.yearsToMonths;\n+        periods[i] = p.plusYears(years).plusMonths(months);;\n+      }\n+\n+      vector1.setValueCount(4096);\n+\n+      /* No realloc should have happened in setSafe or\n+       * setValueCount\n+       */\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(4096, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          assertNull(vector1.getObject(i));\n+        } else {\n+          final Period p = vector1.getObject(i);\n+          assertEquals(interval + i, vector1.get(i));\n+          assertEquals(periods[i], p);\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024);\n+      assertEquals(1024, vector2.getValueCapacity());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        vector2.copyFromSafe(i, i, vector1);\n+      }\n+\n+      /* 2 realloc should have happened in copyFromSafe() */\n+      assertEquals(4096, vector2.getValueCapacity());\n+      vector2.setValueCount(8192);\n+      /* setValueCount() should have done another realloc */\n+      assertEquals(8192, vector2.getValueCount());\n+      assertEquals(8192, vector2.getValueCapacity());\n+\n+      /* check vector data after copy and realloc */\n+      for (int i = 0; i < 8192; i++) {\n+        if (((i&1) == 0) || (i >= 4096)) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          final Period p = vector2.getObject(i);\n+          assertEquals(periods[i], p);\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableSmallIntVector */\n+  public void testCopyFromWithNulls9() {\n+    try (final NullableSmallIntVector vector1 = new NullableSmallIntVector(EMPTY_SCHEMA_PATH, allocator);\n+         final NullableSmallIntVector vector2 = new NullableSmallIntVector(EMPTY_SCHEMA_PATH, allocator)) {\n+\n+      vector1.allocateNew();\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(0, vector1.getValueCount());\n+\n+      final short val = 1000;\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          continue;\n+        }\n+        vector1.setSafe(i, val + (short)i);\n+      }\n+\n+      vector1.setValueCount(4096);\n+\n+      /* No realloc should have happened in setSafe or\n+       * setValueCount\n+       */\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(4096, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          assertNull(vector1.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  val + (short)i, vector1.get(i));\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024);\n+      assertEquals(1024, vector2.getValueCapacity());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        vector2.copyFromSafe(i, i, vector1);\n+      }\n+\n+      /* 2 realloc should have happened in copyFromSafe() */\n+      assertEquals(4096, vector2.getValueCapacity());\n+      vector2.setValueCount(8192);\n+      /* setValueCount() should have done another realloc */\n+      assertEquals(8192, vector2.getValueCount());\n+      assertEquals(8192, vector2.getValueCapacity());\n+\n+      /* check vector data after copy and realloc */\n+      for (int i = 0; i < 8192; i++) {\n+        if (((i&1) == 0) || (i >= 4096)) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  val + (short)i, vector2.get(i));\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableTimeMicroVector */\n+  public void testCopyFromWithNulls10() {\n+    try (final NullableTimeMicroVector vector1 = new NullableTimeMicroVector(EMPTY_SCHEMA_PATH, allocator);\n+         final NullableTimeMicroVector vector2 = new NullableTimeMicroVector(EMPTY_SCHEMA_PATH, allocator)) {\n+\n+      vector1.allocateNew();\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(0, vector1.getValueCount());\n+\n+      final long val = 100485765432L;\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          continue;\n+        }\n+        vector1.setSafe(i, val + (long)i);\n+      }\n+\n+      vector1.setValueCount(4096);\n+\n+      /* No realloc should have happened in setSafe or\n+       * setValueCount\n+       */\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(4096, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          assertNull(vector1.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  val + (long)i, vector1.get(i));\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024);\n+      assertEquals(1024, vector2.getValueCapacity());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        vector2.copyFromSafe(i, i, vector1);\n+      }\n+\n+      /* 2 realloc should have happened in copyFromSafe() */\n+      assertEquals(4096, vector2.getValueCapacity());\n+      vector2.setValueCount(8192);\n+      /* setValueCount() should have done another realloc */\n+      assertEquals(8192, vector2.getValueCount());\n+      assertEquals(8192, vector2.getValueCapacity());\n+\n+      /* check vector data after copy and realloc */\n+      for (int i = 0; i < 8192; i++) {\n+        if (((i&1) == 0) || (i >= 4096)) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  val + (long) i, vector2.get(i));\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableTimeMilliVector */\n+  public void testCopyFromWithNulls11() {\n+    try (final NullableTimeMilliVector vector1 = new NullableTimeMilliVector(EMPTY_SCHEMA_PATH, allocator);\n+         final NullableTimeMilliVector vector2 = new NullableTimeMilliVector(EMPTY_SCHEMA_PATH, allocator)) {\n+\n+      vector1.allocateNew();\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(0, vector1.getValueCount());\n+\n+      final int val = 1000;\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          continue;\n+        }\n+        vector1.setSafe(i, val + i);\n+      }\n+\n+      vector1.setValueCount(4096);\n+\n+      /* No realloc should have happened in setSafe or\n+       * setValueCount\n+       */\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(4096, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          assertNull(vector1.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  val + i, vector1.get(i));\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024);\n+      assertEquals(1024, vector2.getValueCapacity());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        vector2.copyFromSafe(i, i, vector1);\n+      }\n+\n+      /* 2 realloc should have happened in copyFromSafe() */\n+      assertEquals(4096, vector2.getValueCapacity());\n+      vector2.setValueCount(8192);\n+      /* setValueCount() should have done another realloc */\n+      assertEquals(8192, vector2.getValueCount());\n+      assertEquals(8192, vector2.getValueCapacity());\n+\n+      /* check vector data after copy and realloc */\n+      for (int i = 0; i < 8192; i++) {\n+        if (((i&1) == 0) || (i >= 4096)) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  val + i, vector2.get(i));\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableTinyIntVector */\n+  public void testCopyFromWithNulls12() {\n+    try (final NullableTinyIntVector vector1 = new NullableTinyIntVector(EMPTY_SCHEMA_PATH, allocator);\n+         final NullableTinyIntVector vector2 = new NullableTinyIntVector(EMPTY_SCHEMA_PATH, allocator)) {\n+\n+      vector1.allocateNew();\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(0, vector1.getValueCount());\n+\n+      byte val = -128;\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          continue;\n+        }\n+        vector1.setSafe(i, val);\n+        val++;\n+      }\n+\n+      vector1.setValueCount(4096);\n+\n+      /* No realloc should have happened in setSafe or\n+       * setValueCount\n+       */\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(4096, vector1.getValueCount());\n+\n+      val = -128;\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          assertNull(vector1.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i, val, vector1.get(i));\n+          val++;\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024);\n+      assertEquals(1024, vector2.getValueCapacity());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        vector2.copyFromSafe(i, i, vector1);\n+      }\n+\n+      /* 2 realloc should have happened in copyFromSafe() */\n+      assertEquals(4096, vector2.getValueCapacity());\n+      vector2.setValueCount(8192);\n+      /* setValueCount() should have done another realloc */\n+      assertEquals(8192, vector2.getValueCount());\n+      assertEquals(8192, vector2.getValueCapacity());\n+\n+      /* check vector data after copy and realloc */\n+      val = -128;\n+      for (int i = 0; i < 8192; i++) {\n+        if (((i&1) == 0) || (i >= 4096)) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i, val, vector2.get(i));\n+          val++;\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableDecimalVector */\n+  public void testCopyFromWithNulls13() {\n+    try (final NullableDecimalVector vector1 = new NullableDecimalVector(EMPTY_SCHEMA_PATH, allocator, 30, 16);\n+         final NullableDecimalVector vector2 = new NullableDecimalVector(EMPTY_SCHEMA_PATH, allocator, 30, 16)) {\n+\n+      vector1.allocateNew();\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(0, vector1.getValueCount());\n+\n+      final double baseValue = 104567897654.876543654;\n+      final BigDecimal[] decimals = new BigDecimal[4096];\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          continue;\n+        }\n+        BigDecimal decimal = new BigDecimal(baseValue + (double)i);\n+        vector1.setSafe(i, decimal);\n+        decimals[i] = decimal;\n+      }\n+\n+      vector1.setValueCount(4096);\n+\n+      /* No realloc should have happened in setSafe or\n+       * setValueCount\n+       */\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(4096, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          assertNull(vector1.getObject(i));\n+        } else {\n+          final BigDecimal decimal = vector1.getObject(i);\n+          assertEquals(decimals[i], decimal);\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024);\n+      assertEquals(1024, vector2.getValueCapacity());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        vector2.copyFromSafe(i, i, vector1);\n+      }\n+\n+      /* 2 realloc should have happened in copyFromSafe() */\n+      assertEquals(4096, vector2.getValueCapacity());\n+      vector2.setValueCount(8192);\n+      /* setValueCount() should have done another realloc */\n+      assertEquals(8192, vector2.getValueCount());\n+      assertEquals(8192, vector2.getValueCapacity());\n+\n+      /* check vector data after copy and realloc */\n+      for (int i = 0; i < 8192; i++) {\n+        if (((i&1) == 0) || (i >= 4096)) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          final BigDecimal decimal = vector2.getObject(i);\n+          assertEquals(decimals[i], decimal);\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test /* NullableTimeStampVector */\n+  public void testCopyFromWithNulls14() {\n+    try (final NullableTimeStampVector vector1 = new NullableTimeStampMicroVector(EMPTY_SCHEMA_PATH, allocator);\n+         final NullableTimeStampVector vector2 = new NullableTimeStampMicroVector(EMPTY_SCHEMA_PATH, allocator)) {\n+\n+      vector1.allocateNew();\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(0, vector1.getValueCount());\n+\n+      final long val = 20145678912L;\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          continue;\n+        }\n+        vector1.setSafe(i, val + (long)i);\n+      }\n+\n+      vector1.setValueCount(4096);\n+\n+      /* No realloc should have happened in setSafe or\n+       * setValueCount\n+       */\n+      assertEquals(4096, vector1.getValueCapacity());\n+      assertEquals(4096, vector1.getValueCount());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        if ((i&1) == 0) {\n+          assertNull(vector1.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  val + (long)i, vector1.get(i));\n+        }\n+      }\n+\n+      /* set lesser initial capacity than actually needed\n+       * to trigger reallocs in copyFromSafe()\n+       */\n+      vector2.allocateNew(1024);\n+      assertEquals(1024, vector2.getValueCapacity());\n+\n+      for (int i = 0; i < 4096; i++) {\n+        vector2.copyFromSafe(i, i, vector1);\n+      }\n+\n+      /* 2 realloc should have happened in copyFromSafe() */\n+      assertEquals(4096, vector2.getValueCapacity());\n+      vector2.setValueCount(8192);\n+      /* setValueCount() should have done another realloc */\n+      assertEquals(8192, vector2.getValueCount());\n+      assertEquals(8192, vector2.getValueCapacity());\n+\n+      /* check vector data after copy and realloc */\n+      for (int i = 0; i < 8192; i++) {\n+        if (((i&1) == 0) || (i >= 4096)) {\n+          assertNull(vector2.getObject(i));\n+        } else {\n+          assertEquals(\"unexpected value at index: \" + i,\n+                  val + (long) i, vector2.get(i));\n+        }\n+      }\n+    }\n+  }\n+}\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-20T19:21:48.907+0000",
                    "updated": "2017-11-20T19:21:48.907+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118833/comment/16259707",
                    "id": "16259707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on issue #1325: ARROW-1826: [JAVA] Avoid branching in copyFrom for fixed width scalars\nURL: https://github.com/apache/arrow/pull/1325#issuecomment-345800395\n \n \n   @wesm , just finished that setup\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-20T19:22:01.164+0000",
                    "updated": "2017-11-20T19:22:01.164+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118833/comment/16259708",
                    "id": "16259708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on issue #1325: ARROW-1826: [JAVA] Avoid branching in copyFrom for fixed width scalars\nURL: https://github.com/apache/arrow/pull/1325#issuecomment-345800457\n \n \n   I was late by a few milli seconds I guess :)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-20T19:22:14.937+0000",
                    "updated": "2017-11-20T19:22:14.937+0000"
                }
            ],
            "maxResults": 11,
            "total": 11,
            "startAt": 0
        },
        "customfield_12311820": "0|i3muzj:",
        "customfield_12314139": null
    }
}