{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13286860",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860",
    "key": "ARROW-7916",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7916/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/worklog/390825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6474: ARROW-7916: [C++] Project IPC batches to materialized fields only\nURL: https://github.com/apache/arrow/pull/6474\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T18:12:23.398+0000",
                    "updated": "2020-02-21T18:12:23.398+0000",
                    "started": "2020-02-21T18:12:23.397+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390825",
                    "issueId": "13286860"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/worklog/390834",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6474: ARROW-7916: [C++] Project IPC batches to materialized fields only\nURL: https://github.com/apache/arrow/pull/6474#issuecomment-589771337\n \n \n   https://issues.apache.org/jira/browse/ARROW-7916\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T18:27:34.726+0000",
                    "updated": "2020-02-21T18:27:34.726+0000",
                    "started": "2020-02-21T18:27:34.725+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390834",
                    "issueId": "13286860"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/worklog/390852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6474: ARROW-7916: [C++] Project IPC batches to materialized fields only\nURL: https://github.com/apache/arrow/pull/6474#discussion_r382749299\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_ipc.cc\n ##########\n @@ -57,22 +57,36 @@ class IpcScanTask : public ScanTask {\n       : ScanTask(std::move(options), std::move(context)), source_(std::move(source)) {}\n \n   Result<RecordBatchIterator> Execute() override {\n-    struct {\n+    struct Impl {\n+      static Result<Impl> Make(const FileSource& source,\n+                               std::vector<std::string> materialized_fields,\n+                               MemoryPool* pool) {\n+        ARROW_ASSIGN_OR_RAISE(auto reader, OpenReader(source));\n+        auto materialized_schema =\n \n Review comment:\n   Can't this fail?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T18:55:21.744+0000",
                    "updated": "2020-02-21T18:55:21.744+0000",
                    "started": "2020-02-21T18:55:21.744+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390852",
                    "issueId": "13286860"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/worklog/390892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6474: ARROW-7916: [C++] Project IPC batches to materialized fields only\nURL: https://github.com/apache/arrow/pull/6474#discussion_r382795433\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_ipc.cc\n ##########\n @@ -57,22 +57,36 @@ class IpcScanTask : public ScanTask {\n       : ScanTask(std::move(options), std::move(context)), source_(std::move(source)) {}\n \n   Result<RecordBatchIterator> Execute() override {\n-    struct {\n+    struct Impl {\n+      static Result<Impl> Make(const FileSource& source,\n+                               std::vector<std::string> materialized_fields,\n+                               MemoryPool* pool) {\n+        ARROW_ASSIGN_OR_RAISE(auto reader, OpenReader(source));\n+        auto materialized_schema =\n \n Review comment:\n   I'm not sure what you mean\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T20:40:58.159+0000",
                    "updated": "2020-02-21T20:40:58.159+0000",
                    "started": "2020-02-21T20:40:58.159+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390892",
                    "issueId": "13286860"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/worklog/393410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6474: ARROW-7916: [C++] Project IPC batches to materialized fields only\nURL: https://github.com/apache/arrow/pull/6474#discussion_r384469098\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_ipc_test.cc\n ##########\n @@ -151,9 +145,80 @@ TEST_F(TestIpcFileFormat, OpenFailureWithRelevantError) {\n                                   result.status());\n }\n \n-// TODO(bkietz) extend IpcFileFormat to support projection pushdown\n-// TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjected)\n-// TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjectedMissingCols)\n+TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjected) {\n+  schema_ = schema({field(\"f64\", float64()), field(\"i64\", int64()),\n+                    field(\"f32\", float32()), field(\"i32\", int32())});\n+\n+  opts_ = ScanOptions::Make(schema_);\n+  opts_->projector = RecordBatchProjector(SchemaFromColumnNames(schema_, {\"f64\"}));\n+  opts_->filter = equal(field_ref(\"i32\"), scalar(0));\n+\n+  // NB: projector is applied by the scanner; IpcFragment does not evaluate it so\n+  // we will not drop \"i32\" even though it is not in the projector's schema\n+  auto expected_schema = schema({field(\"f64\", float64()), field(\"i32\", int32())});\n+\n+  auto reader = GetRecordBatchReader();\n+  auto source = GetFileSource(reader.get());\n+  auto fragment = std::make_shared<IpcFragment>(*source, opts_);\n+\n+  int64_t row_count = 0;\n+\n+  for (auto maybe_batch : Batches(fragment.get())) {\n+    ASSERT_OK_AND_ASSIGN(auto batch, std::move(maybe_batch));\n+    row_count += batch->num_rows();\n+    AssertSchemaEqual(*batch->schema(), *expected_schema,\n+                      /*check_metadata=*/false);\n+  }\n+\n+  ASSERT_EQ(row_count, kNumRows);\n+}\n+\n+TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjectedMissingCols) {\n+  schema_ =\n+      schema({field(\"f64\", float64()), field(\"i64\", int64()), field(\"f32\", float32())});\n+  auto reader_without_i32 = GetRecordBatchReader();\n \n Review comment:\n   Make `schema` an optional null-default to GetRecordBatchReader() that will fallback to property `schema_`, this way you don't need to set the field.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-26T12:46:28.738+0000",
                    "updated": "2020-02-26T12:46:28.738+0000",
                    "started": "2020-02-26T12:46:28.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393410",
                    "issueId": "13286860"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/worklog/393413",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6474: ARROW-7916: [C++] Project IPC batches to materialized fields only\nURL: https://github.com/apache/arrow/pull/6474#discussion_r384474841\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_ipc.cc\n ##########\n @@ -57,22 +58,40 @@ class IpcScanTask : public ScanTask {\n       : ScanTask(std::move(options), std::move(context)), source_(std::move(source)) {}\n \n   Result<RecordBatchIterator> Execute() override {\n-    struct {\n+    struct Impl {\n+      static Result<Impl> Make(const FileSource& source,\n+                               const std::vector<std::string>& materialized_fields,\n+                               MemoryPool* pool) {\n+        ARROW_ASSIGN_OR_RAISE(auto reader, OpenReader(source));\n+        auto materialized_schema =\n+            SchemaFromColumnNames(reader->schema(), materialized_fields);\n+        return Impl{std::move(reader),\n+                    RecordBatchProjector(std::move(materialized_schema)), pool, 0};\n+      }\n+\n       Result<std::shared_ptr<RecordBatch>> Next() {\n         if (i_ == reader_->num_record_batches()) {\n           return nullptr;\n         }\n \n         std::shared_ptr<RecordBatch> batch;\n         RETURN_NOT_OK(reader_->ReadRecordBatch(i_++, &batch));\n-        return batch;\n+        return projector_.Project(*batch, pool_);\n       }\n \n       std::shared_ptr<ipc::RecordBatchFileReader> reader_;\n-      int i_ = 0;\n-    } batch_it;\n-\n-    ARROW_ASSIGN_OR_RAISE(batch_it.reader_, OpenReader(source_));\n+      RecordBatchProjector projector_;\n+      MemoryPool* pool_;\n+      int i_;\n+    };\n+\n+    // get names of fields explicitly projected or referenced by filter\n+    auto fields = options_->MaterializedFields();\n+    std::sort(fields.begin(), fields.end());\n \n Review comment:\n   We shouldn't do this, it will break when we start support columns with the same name but different index. I'd leave it as-is from `MaterializedFields`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-26T12:59:09.901+0000",
                    "updated": "2020-02-26T12:59:09.901+0000",
                    "started": "2020-02-26T12:59:09.901+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393413",
                    "issueId": "13286860"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/worklog/393414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6474: ARROW-7916: [C++] Project IPC batches to materialized fields only\nURL: https://github.com/apache/arrow/pull/6474#discussion_r384469496\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_ipc_test.cc\n ##########\n @@ -151,9 +145,80 @@ TEST_F(TestIpcFileFormat, OpenFailureWithRelevantError) {\n                                   result.status());\n }\n \n-// TODO(bkietz) extend IpcFileFormat to support projection pushdown\n-// TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjected)\n-// TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjectedMissingCols)\n+TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjected) {\n+  schema_ = schema({field(\"f64\", float64()), field(\"i64\", int64()),\n+                    field(\"f32\", float32()), field(\"i32\", int32())});\n+\n+  opts_ = ScanOptions::Make(schema_);\n+  opts_->projector = RecordBatchProjector(SchemaFromColumnNames(schema_, {\"f64\"}));\n+  opts_->filter = equal(field_ref(\"i32\"), scalar(0));\n+\n+  // NB: projector is applied by the scanner; IpcFragment does not evaluate it so\n+  // we will not drop \"i32\" even though it is not in the projector's schema\n+  auto expected_schema = schema({field(\"f64\", float64()), field(\"i32\", int32())});\n+\n+  auto reader = GetRecordBatchReader();\n+  auto source = GetFileSource(reader.get());\n+  auto fragment = std::make_shared<IpcFragment>(*source, opts_);\n+\n+  int64_t row_count = 0;\n+\n+  for (auto maybe_batch : Batches(fragment.get())) {\n+    ASSERT_OK_AND_ASSIGN(auto batch, std::move(maybe_batch));\n+    row_count += batch->num_rows();\n+    AssertSchemaEqual(*batch->schema(), *expected_schema,\n+                      /*check_metadata=*/false);\n+  }\n+\n+  ASSERT_EQ(row_count, kNumRows);\n+}\n+\n+TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjectedMissingCols) {\n+  schema_ =\n+      schema({field(\"f64\", float64()), field(\"i64\", int64()), field(\"f32\", float32())});\n+  auto reader_without_i32 = GetRecordBatchReader();\n+\n+  schema_ =\n+      schema({field(\"i64\", int64()), field(\"f32\", float32()), field(\"i32\", int32())});\n+  auto reader_without_f64 = GetRecordBatchReader();\n+\n+  schema_ = schema({field(\"f64\", float64()), field(\"i64\", int64()),\n+                    field(\"f32\", float32()), field(\"i32\", int32())});\n+  auto reader = GetRecordBatchReader();\n+\n+  opts_ = ScanOptions::Make(schema_);\n+  opts_->projector = RecordBatchProjector(SchemaFromColumnNames(schema_, {\"f64\"}));\n+  opts_->filter = equal(field_ref(\"i32\"), scalar(0));\n+\n+  for (auto reader : {reader.get(), reader_without_i32.get(), reader_without_f64.get()}) {\n+    auto source = GetFileSource(reader);\n+    auto fragment = std::make_shared<IpcFragment>(*source, opts_);\n+\n+    int64_t row_count = 0;\n+\n+    for (auto maybe_batch : Batches(fragment.get())) {\n+      ASSERT_OK_AND_ASSIGN(auto batch, std::move(maybe_batch));\n+      row_count += batch->num_rows();\n+      // NB: projector is applied by the scanner; ParquetFragment does not evaluate it.\n+      // We will not drop \"i32\" even though it is not in the projector's schema.\n+      //\n+      // in the case where a file doesn't contain a referenced field, we won't\n+      // materialize it (the filter/projector will populate it with nulls later)\n+      std::shared_ptr<Schema> expected_schema;\n+      if (reader == reader_without_i32.get()) {\n \n Review comment:\n   The schema should be set out of this loop.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-26T12:59:09.958+0000",
                    "updated": "2020-02-26T12:59:09.958+0000",
                    "started": "2020-02-26T12:59:09.957+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393414",
                    "issueId": "13286860"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/worklog/393415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6474: ARROW-7916: [C++] Project IPC batches to materialized fields only\nURL: https://github.com/apache/arrow/pull/6474#discussion_r384469796\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_ipc_test.cc\n ##########\n @@ -151,9 +145,80 @@ TEST_F(TestIpcFileFormat, OpenFailureWithRelevantError) {\n                                   result.status());\n }\n \n-// TODO(bkietz) extend IpcFileFormat to support projection pushdown\n-// TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjected)\n-// TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjectedMissingCols)\n+TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjected) {\n+  schema_ = schema({field(\"f64\", float64()), field(\"i64\", int64()),\n+                    field(\"f32\", float32()), field(\"i32\", int32())});\n+\n+  opts_ = ScanOptions::Make(schema_);\n+  opts_->projector = RecordBatchProjector(SchemaFromColumnNames(schema_, {\"f64\"}));\n+  opts_->filter = equal(field_ref(\"i32\"), scalar(0));\n+\n+  // NB: projector is applied by the scanner; IpcFragment does not evaluate it so\n+  // we will not drop \"i32\" even though it is not in the projector's schema\n+  auto expected_schema = schema({field(\"f64\", float64()), field(\"i32\", int32())});\n+\n+  auto reader = GetRecordBatchReader();\n+  auto source = GetFileSource(reader.get());\n+  auto fragment = std::make_shared<IpcFragment>(*source, opts_);\n+\n+  int64_t row_count = 0;\n+\n+  for (auto maybe_batch : Batches(fragment.get())) {\n+    ASSERT_OK_AND_ASSIGN(auto batch, std::move(maybe_batch));\n+    row_count += batch->num_rows();\n+    AssertSchemaEqual(*batch->schema(), *expected_schema,\n+                      /*check_metadata=*/false);\n+  }\n+\n+  ASSERT_EQ(row_count, kNumRows);\n+}\n+\n+TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjectedMissingCols) {\n+  schema_ =\n+      schema({field(\"f64\", float64()), field(\"i64\", int64()), field(\"f32\", float32())});\n+  auto reader_without_i32 = GetRecordBatchReader();\n+\n+  schema_ =\n+      schema({field(\"i64\", int64()), field(\"f32\", float32()), field(\"i32\", int32())});\n+  auto reader_without_f64 = GetRecordBatchReader();\n+\n+  schema_ = schema({field(\"f64\", float64()), field(\"i64\", int64()),\n+                    field(\"f32\", float32()), field(\"i32\", int32())});\n+  auto reader = GetRecordBatchReader();\n+\n+  opts_ = ScanOptions::Make(schema_);\n+  opts_->projector = RecordBatchProjector(SchemaFromColumnNames(schema_, {\"f64\"}));\n+  opts_->filter = equal(field_ref(\"i32\"), scalar(0));\n+\n+  for (auto reader : {reader.get(), reader_without_i32.get(), reader_without_f64.get()}) {\n+    auto source = GetFileSource(reader);\n+    auto fragment = std::make_shared<IpcFragment>(*source, opts_);\n+\n+    int64_t row_count = 0;\n+\n+    for (auto maybe_batch : Batches(fragment.get())) {\n+      ASSERT_OK_AND_ASSIGN(auto batch, std::move(maybe_batch));\n+      row_count += batch->num_rows();\n+      // NB: projector is applied by the scanner; ParquetFragment does not evaluate it.\n \n Review comment:\n   ```suggestion\r\n         // NB: projector is applied by the scanner; Fragment does not evaluate it.\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-26T12:59:09.996+0000",
                    "updated": "2020-02-26T12:59:09.996+0000",
                    "started": "2020-02-26T12:59:09.995+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393415",
                    "issueId": "13286860"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/worklog/393589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6474: ARROW-7916: [C++] Project IPC batches to materialized fields only\nURL: https://github.com/apache/arrow/pull/6474#discussion_r384592185\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_ipc_test.cc\n ##########\n @@ -151,9 +145,80 @@ TEST_F(TestIpcFileFormat, OpenFailureWithRelevantError) {\n                                   result.status());\n }\n \n-// TODO(bkietz) extend IpcFileFormat to support projection pushdown\n-// TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjected)\n-// TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjectedMissingCols)\n+TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjected) {\n+  schema_ = schema({field(\"f64\", float64()), field(\"i64\", int64()),\n+                    field(\"f32\", float32()), field(\"i32\", int32())});\n+\n+  opts_ = ScanOptions::Make(schema_);\n+  opts_->projector = RecordBatchProjector(SchemaFromColumnNames(schema_, {\"f64\"}));\n+  opts_->filter = equal(field_ref(\"i32\"), scalar(0));\n+\n+  // NB: projector is applied by the scanner; IpcFragment does not evaluate it so\n+  // we will not drop \"i32\" even though it is not in the projector's schema\n+  auto expected_schema = schema({field(\"f64\", float64()), field(\"i32\", int32())});\n+\n+  auto reader = GetRecordBatchReader();\n+  auto source = GetFileSource(reader.get());\n+  auto fragment = std::make_shared<IpcFragment>(*source, opts_);\n+\n+  int64_t row_count = 0;\n+\n+  for (auto maybe_batch : Batches(fragment.get())) {\n+    ASSERT_OK_AND_ASSIGN(auto batch, std::move(maybe_batch));\n+    row_count += batch->num_rows();\n+    AssertSchemaEqual(*batch->schema(), *expected_schema,\n+                      /*check_metadata=*/false);\n+  }\n+\n+  ASSERT_EQ(row_count, kNumRows);\n+}\n+\n+TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjectedMissingCols) {\n+  schema_ =\n+      schema({field(\"f64\", float64()), field(\"i64\", int64()), field(\"f32\", float32())});\n+  auto reader_without_i32 = GetRecordBatchReader();\n \n Review comment:\n   will do\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-26T16:03:00.513+0000",
                    "updated": "2020-02-26T16:03:00.513+0000",
                    "started": "2020-02-26T16:03:00.513+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393589",
                    "issueId": "13286860"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/worklog/393597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6474: ARROW-7916: [C++] Project IPC batches to materialized fields only\nURL: https://github.com/apache/arrow/pull/6474#discussion_r384598246\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_ipc_test.cc\n ##########\n @@ -151,9 +145,80 @@ TEST_F(TestIpcFileFormat, OpenFailureWithRelevantError) {\n                                   result.status());\n }\n \n-// TODO(bkietz) extend IpcFileFormat to support projection pushdown\n-// TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjected)\n-// TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjectedMissingCols)\n+TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjected) {\n+  schema_ = schema({field(\"f64\", float64()), field(\"i64\", int64()),\n+                    field(\"f32\", float32()), field(\"i32\", int32())});\n+\n+  opts_ = ScanOptions::Make(schema_);\n+  opts_->projector = RecordBatchProjector(SchemaFromColumnNames(schema_, {\"f64\"}));\n+  opts_->filter = equal(field_ref(\"i32\"), scalar(0));\n+\n+  // NB: projector is applied by the scanner; IpcFragment does not evaluate it so\n+  // we will not drop \"i32\" even though it is not in the projector's schema\n+  auto expected_schema = schema({field(\"f64\", float64()), field(\"i32\", int32())});\n+\n+  auto reader = GetRecordBatchReader();\n+  auto source = GetFileSource(reader.get());\n+  auto fragment = std::make_shared<IpcFragment>(*source, opts_);\n+\n+  int64_t row_count = 0;\n+\n+  for (auto maybe_batch : Batches(fragment.get())) {\n+    ASSERT_OK_AND_ASSIGN(auto batch, std::move(maybe_batch));\n+    row_count += batch->num_rows();\n+    AssertSchemaEqual(*batch->schema(), *expected_schema,\n+                      /*check_metadata=*/false);\n+  }\n+\n+  ASSERT_EQ(row_count, kNumRows);\n+}\n+\n+TEST_F(TestIpcFileFormat, ScanRecordBatchReaderProjectedMissingCols) {\n+  schema_ =\n+      schema({field(\"f64\", float64()), field(\"i64\", int64()), field(\"f32\", float32())});\n+  auto reader_without_i32 = GetRecordBatchReader();\n+\n+  schema_ =\n+      schema({field(\"i64\", int64()), field(\"f32\", float32()), field(\"i32\", int32())});\n+  auto reader_without_f64 = GetRecordBatchReader();\n+\n+  schema_ = schema({field(\"f64\", float64()), field(\"i64\", int64()),\n+                    field(\"f32\", float32()), field(\"i32\", int32())});\n+  auto reader = GetRecordBatchReader();\n+\n+  opts_ = ScanOptions::Make(schema_);\n+  opts_->projector = RecordBatchProjector(SchemaFromColumnNames(schema_, {\"f64\"}));\n+  opts_->filter = equal(field_ref(\"i32\"), scalar(0));\n+\n+  for (auto reader : {reader.get(), reader_without_i32.get(), reader_without_f64.get()}) {\n+    auto source = GetFileSource(reader);\n+    auto fragment = std::make_shared<IpcFragment>(*source, opts_);\n+\n+    int64_t row_count = 0;\n+\n+    for (auto maybe_batch : Batches(fragment.get())) {\n+      ASSERT_OK_AND_ASSIGN(auto batch, std::move(maybe_batch));\n+      row_count += batch->num_rows();\n+      // NB: projector is applied by the scanner; ParquetFragment does not evaluate it.\n+      // We will not drop \"i32\" even though it is not in the projector's schema.\n+      //\n+      // in the case where a file doesn't contain a referenced field, we won't\n+      // materialize it (the filter/projector will populate it with nulls later)\n+      std::shared_ptr<Schema> expected_schema;\n+      if (reader == reader_without_i32.get()) {\n \n Review comment:\n   will do\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-26T16:11:24.378+0000",
                    "updated": "2020-02-26T16:11:24.378+0000",
                    "started": "2020-02-26T16:11:24.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393597",
                    "issueId": "13286860"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/worklog/393637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6474: ARROW-7916: [C++] Project IPC batches to materialized fields only\nURL: https://github.com/apache/arrow/pull/6474#discussion_r384649236\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_ipc.cc\n ##########\n @@ -57,22 +58,40 @@ class IpcScanTask : public ScanTask {\n       : ScanTask(std::move(options), std::move(context)), source_(std::move(source)) {}\n \n   Result<RecordBatchIterator> Execute() override {\n-    struct {\n+    struct Impl {\n+      static Result<Impl> Make(const FileSource& source,\n+                               const std::vector<std::string>& materialized_fields,\n+                               MemoryPool* pool) {\n+        ARROW_ASSIGN_OR_RAISE(auto reader, OpenReader(source));\n+        auto materialized_schema =\n+            SchemaFromColumnNames(reader->schema(), materialized_fields);\n+        return Impl{std::move(reader),\n+                    RecordBatchProjector(std::move(materialized_schema)), pool, 0};\n+      }\n+\n       Result<std::shared_ptr<RecordBatch>> Next() {\n         if (i_ == reader_->num_record_batches()) {\n           return nullptr;\n         }\n \n         std::shared_ptr<RecordBatch> batch;\n         RETURN_NOT_OK(reader_->ReadRecordBatch(i_++, &batch));\n-        return batch;\n+        return projector_.Project(*batch, pool_);\n       }\n \n       std::shared_ptr<ipc::RecordBatchFileReader> reader_;\n-      int i_ = 0;\n-    } batch_it;\n-\n-    ARROW_ASSIGN_OR_RAISE(batch_it.reader_, OpenReader(source_));\n+      RecordBatchProjector projector_;\n+      MemoryPool* pool_;\n+      int i_;\n+    };\n+\n+    // get names of fields explicitly projected or referenced by filter\n+    auto fields = options_->MaterializedFields();\n+    std::sort(fields.begin(), fields.end());\n \n Review comment:\n   @fsaintjacques since a non trivial filter will reference a field in the fragment's physical schema, that will result in a schema with duplicate field names. That breaks filter evaluation and other parts of our code which rely on `Schema::GetFieldIndex` (which returns \"not found\" if the name is repeated). I'll reintroduce the unique-ing and we can address this more robustly in https://issues.apache.org/jira/browse/ARROW-7412\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-26T17:30:45.942+0000",
                    "updated": "2020-02-26T17:30:45.942+0000",
                    "started": "2020-02-26T17:30:45.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393637",
                    "issueId": "13286860"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/worklog/394417",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #6474: ARROW-7916: [C++] Project IPC batches to materialized fields only\nURL: https://github.com/apache/arrow/pull/6474#discussion_r385319074\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_ipc.cc\n ##########\n @@ -57,22 +58,40 @@ class IpcScanTask : public ScanTask {\n       : ScanTask(std::move(options), std::move(context)), source_(std::move(source)) {}\n \n   Result<RecordBatchIterator> Execute() override {\n-    struct {\n+    struct Impl {\n+      static Result<Impl> Make(const FileSource& source,\n+                               const std::vector<std::string>& materialized_fields,\n+                               MemoryPool* pool) {\n+        ARROW_ASSIGN_OR_RAISE(auto reader, OpenReader(source));\n+        auto materialized_schema =\n+            SchemaFromColumnNames(reader->schema(), materialized_fields);\n+        return Impl{std::move(reader),\n+                    RecordBatchProjector(std::move(materialized_schema)), pool, 0};\n+      }\n+\n       Result<std::shared_ptr<RecordBatch>> Next() {\n         if (i_ == reader_->num_record_batches()) {\n           return nullptr;\n         }\n \n         std::shared_ptr<RecordBatch> batch;\n         RETURN_NOT_OK(reader_->ReadRecordBatch(i_++, &batch));\n-        return batch;\n+        return projector_.Project(*batch, pool_);\n       }\n \n       std::shared_ptr<ipc::RecordBatchFileReader> reader_;\n-      int i_ = 0;\n-    } batch_it;\n-\n-    ARROW_ASSIGN_OR_RAISE(batch_it.reader_, OpenReader(source_));\n+      RecordBatchProjector projector_;\n+      MemoryPool* pool_;\n+      int i_;\n+    };\n+\n+    // get names of fields explicitly projected or referenced by filter\n+    auto fields = options_->MaterializedFields();\n+    std::sort(fields.begin(), fields.end());\n \n Review comment:\n   Indeed, ok for now!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-27T19:19:49.685+0000",
                    "updated": "2020-02-27T19:19:49.685+0000",
                    "started": "2020-02-27T19:19:49.685+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "394417",
                    "issueId": "13286860"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/worklog/394418",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6474: ARROW-7916: [C++] Project IPC batches to materialized fields only\nURL: https://github.com/apache/arrow/pull/6474\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-27T19:21:32.139+0000",
                    "updated": "2020-02-27T19:21:32.139+0000",
                    "started": "2020-02-27T19:21:32.138+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "394418",
                    "issueId": "13286860"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3fc67c3c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40cb7704[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a367ea7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1de59b2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@bde55fe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@730580a6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a6f0b27[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@290fca11[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50070b6b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@f58a17d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2dccb582[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7a44ad68[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Feb 27 19:21:34 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-02-27T19:21:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7916/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-02-21T18:09:11.000+0000",
        "updated": "2020-04-10T15:31:52.000+0000",
        "timeoriginalestimate": null,
        "description": "If batches mmaped from disk are projected before post filtering, unreferenced columns will never be accessed (so the memory map shouldn't do I/O on them).\r\n\r\nAt the same time, it'd probably be wise to explicitly document that batches yielded directly from fragments rather than from a Scanner will not be filtered or projected (so they will not match the fragment's schema and will include columns referenced by the filter even if they were not projected).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] Project IPC record batches to materialized fields",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286860/comment/17046925",
                    "id": "17046925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 6474\n[https://github.com/apache/arrow/pull/6474]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-02-27T19:21:34.169+0000",
                    "updated": "2020-02-27T19:21:34.169+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0brhc:",
        "customfield_12314139": null
    }
}