{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13192834",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192834",
    "key": "ARROW-3562",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3562/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 6,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192834/worklog/156319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2795: ARROW-3562: [R] Disallow creation of objects with shared_ptr<T>(nullptr), use bits64::integer64\nURL: https://github.com/apache/arrow/pull/2795#issuecomment-431349312\n \n \n   This is enough meaningful work to merit an entry in the changelog, so I made a JIRA\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T12:40:10.131+0000",
                    "updated": "2018-10-19T12:40:10.131+0000",
                    "started": "2018-10-19T12:40:10.130+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156319",
                    "issueId": "13192834"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192834/worklog/156343",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2795: ARROW-3562: [R] Disallow creation of objects with shared_ptr<T>(nullptr), use bits64::integer64\nURL: https://github.com/apache/arrow/pull/2795#issuecomment-431376087\n \n \n   The Rcpp output is non-alphabetical again. Is this a bug or an old version?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T14:09:53.161+0000",
                    "updated": "2018-10-19T14:09:53.161+0000",
                    "started": "2018-10-19T14:09:53.161+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156343",
                    "issueId": "13192834"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192834/worklog/156347",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #2795: ARROW-3562: [R] Disallow creation of objects with shared_ptr<T>(nullptr), use bits64::integer64\nURL: https://github.com/apache/arrow/pull/2795#issuecomment-431381730\n \n \n   \ud83e\udd37\u200d\u2642\ufe0f here is the order the files are seen when I run `Rcpp::compileAttributes()`: \r\n   \r\n   ```\r\n   Browse[2]> cppFiles\r\n    [1] \"ArrayData.cpp\"         \"ChunkedArray.cpp\"      \"Column.cpp\"            \"DataType.cpp\"          \"MemoryPool.cpp\"        \"RcppExports.cpp\"       \"RecordBatch.cpp\"       \"RecordBatchReader.cpp\" \"RecordBatchWriter.cpp\" \"Table.cpp\"             \"array.cpp\"             \"arrow_types.h\"         \"buffer.cpp\"            \"field.cpp\"            \r\n   [15] \"io.cpp\"               \r\n   Browse[2]> \r\n   debug at /Users/romain/git/RcppCore/Rcpp/R/Attributes.R#429: Sys.setlocale(category = \"LC_COLLATE\", locale = \"C\")\r\n   Browse[2]> \r\n   debug at /Users/romain/git/RcppCore/Rcpp/R/Attributes.R#430: cppFiles <- sort(cppFiles)\r\n   Browse[2]> \r\n   debug at /Users/romain/git/RcppCore/Rcpp/R/Attributes.R#431: Sys.setlocale(category = \"LC_COLLATE\", locale = locale)\r\n   Browse[2]> cppFiles\r\n    [1] \"ArrayData.cpp\"         \"ChunkedArray.cpp\"      \"Column.cpp\"            \"DataType.cpp\"          \"MemoryPool.cpp\"        \"RcppExports.cpp\"       \"RecordBatch.cpp\"       \"RecordBatchReader.cpp\" \"RecordBatchWriter.cpp\" \"Table.cpp\"             \"array.cpp\"             \"arrow_types.h\"         \"buffer.cpp\"            \"field.cpp\"            \r\n   [15] \"io.cpp\"\r\n   ```\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T14:27:16.004+0000",
                    "updated": "2018-10-19T14:27:16.004+0000",
                    "started": "2018-10-19T14:27:16.004+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156347",
                    "issueId": "13192834"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192834/worklog/156348",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2795: ARROW-3562: [R] Disallow creation of objects with shared_ptr<T>(nullptr), use bits64::integer64\nURL: https://github.com/apache/arrow/pull/2795#issuecomment-431384025\n \n \n   I guess it could help to use lowercase filenames\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T14:34:10.737+0000",
                    "updated": "2018-10-19T14:34:10.737+0000",
                    "started": "2018-10-19T14:34:10.736+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156348",
                    "issueId": "13192834"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192834/worklog/156383",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #2795: ARROW-3562: [R] Disallow creation of objects with shared_ptr<T>(nullptr), use bits64::integer64\nURL: https://github.com/apache/arrow/pull/2795#issuecomment-431412177\n \n \n   The build failure is spurious. Related to https://github.com/r-lib/remotes/issues/210#issuecomment-430643547\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-19T15:58:51.819+0000",
                    "updated": "2018-10-19T15:58:51.819+0000",
                    "started": "2018-10-19T15:58:51.819+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156383",
                    "issueId": "13192834"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192834/worklog/156523",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2795: ARROW-3562: [R] Disallow creation of objects with shared_ptr<T>(nullptr), use bits64::integer64\nURL: https://github.com/apache/arrow/pull/2795\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/r/DESCRIPTION b/r/DESCRIPTION\nindex 66fc42a9b3..1ab47ccef9 100644\n--- a/r/DESCRIPTION\n+++ b/r/DESCRIPTION\n@@ -27,14 +27,15 @@ Imports:\n     crayon,\n     withr\n Remotes:\n-    r-lib/vctrs, \n+    romainfrancois/vctrs@bit64, \n     RcppCore/Rcpp, \n-    romainfrancois/withr@bug-79/defer\n+    r-lib/withr\n Roxygen: list(markdown = TRUE)\n RoxygenNote: 6.1.0.9000\n Suggests:\n     testthat, \n-    lubridate\n+    lubridate, \n+    bit64\n Collate:\n     'enums.R'\n     'R6.R'\ndiff --git a/r/R/ChunkedArray.R b/r/R/ChunkedArray.R\nindex a93e7f86a8..56bf198368 100644\n--- a/r/R/ChunkedArray.R\n+++ b/r/R/ChunkedArray.R\n@@ -22,15 +22,15 @@\n     length = function() ChunkedArray__length(self),\n     null_count = function() ChunkedArray__null_count(self),\n     num_chunks = function() ChunkedArray__num_chunks(self),\n-    chunk = function(i) `arrow::Array`$new(ChunkedArray__chunk(self, i)),\n-    chunks = function() purrr::map(ChunkedArray__chunks(self), `arrow::Array`$new),\n+    chunk = function(i) construct(`arrow::Array`, ChunkedArray__chunk(self, i)),\n+    chunks = function() purrr::map(ChunkedArray__chunks(self), construct, class = `arrow::Array`),\n     type = function() `arrow::DataType`$dispatch(ChunkedArray__type(self)),\n     as_vector = function() ChunkedArray__as_vector(self),\n     Slice = function(offset, length = NULL){\n       if (is.null(length)) {\n-        `arrow::ChunkedArray`$new(ChunkArray__Slice1(self, offset))\n+        construct(`arrow::ChunkedArray`, ChunkArray__Slice1(self, offset))\n       } else {\n-        `arrow::ChunkedArray`$new(ChunkArray__Slice2(self, offset, length))\n+        construct(`arrow::ChunkedArray`, ChunkArray__Slice2(self, offset, length))\n       }\n     }\n   )\n@@ -42,5 +42,5 @@\n #'\n #' @export\n chunked_array <- function(...){\n-  `arrow::ChunkedArray`$new(ChunkedArray__from_list(rlang::list2(...)))\n+  construct(`arrow::ChunkedArray`, ChunkedArray__from_list(rlang::list2(...)))\n }\ndiff --git a/r/R/Column.R b/r/R/Column.R\nindex bab6f170a3..86edade620 100644\n--- a/r/R/Column.R\n+++ b/r/R/Column.R\n@@ -22,6 +22,6 @@\n     length = function() Column__length(self),\n     null_count = function() Column__null_count(self),\n     type = function() `arrow::DataType`$dispatch(Column__type(self)),\n-    data = function() `arrow::ChunkedArray`$new(Column__data(self))\n+    data = function() construct(`arrow::ChunkedArray`, Column__data(self))\n   )\n )\ndiff --git a/r/R/Field.R b/r/R/Field.R\nindex e01eb1a50f..e2f01b124e 100644\n--- a/r/R/Field.R\n+++ b/r/R/Field.R\n@@ -41,7 +41,7 @@\n }\n \n field <- function(name, type) {\n-  `arrow::Field`$new(Field__initialize(name, type))\n+  construct(`arrow::Field`, Field__initialize(name, type))\n }\n \n .fields <- function(.list){\ndiff --git a/r/R/List.R b/r/R/List.R\nindex 5360401900..68bcd0fdfd 100644\n--- a/r/R/List.R\n+++ b/r/R/List.R\n@@ -23,4 +23,4 @@\n \n #' @rdname DataType\n #' @export\n-list_of <- function(type) `arrow::ListType`$new(list__(type))\n+list_of <- function(type) construct(`arrow::ListType`, list__(type))\ndiff --git a/r/R/R6.R b/r/R/R6.R\nindex 752ad59f90..5687daaed9 100644\n--- a/r/R/R6.R\n+++ b/r/R/R6.R\n@@ -40,14 +40,14 @@\n     },\n     pointer_address = function(){\n       Object__pointer_address(self$pointer())\n-    },\n-\n-    is_null = function(){\n-      Object__is_null(self)\n     }\n   )\n )\n \n+construct <- function(class, xp) {\n+  if (!xptr_is_null(xp)) class$new(xp)\n+}\n+\n #' @export\n `!=.arrow::Object` <- function(lhs, rhs){\n   !(lhs == rhs)\n@@ -70,7 +70,7 @@\n       DataType__num_children(self)\n     },\n     children = function() {\n-      map(DataType__children_pointer(self), ~`arrow::Field`$new(xp=.x))\n+      map(DataType__children_pointer(self), construct, class= `arrow::Field`)\n     },\n     id = function(){\n       DataType__id(self)\n@@ -94,13 +94,13 @@\n         BINARY = stop(\"Type BINARY not implemented yet\"),\n         DATE32 = date32(),\n         DATE64 = date64(),\n-        TIMESTAMP = `arrow::Timestamp`$new(self$pointer()),\n+        TIMESTAMP = construct(`arrow::Timestamp`,self$pointer()),\n         INTERVAL = stop(\"Type INTERVAL not implemented yet\"),\n-        DECIMAL = `arrow::Decimal128Type`$new(self$pointer()),\n-        LIST = `arrow::ListType`$new(self$pointer()),\n-        STRUCT = `arrow::StructType`$new(self$pointer()),\n+        DECIMAL = construct(`arrow::Decimal128Type`, self$pointer()),\n+        LIST = construct(`arrow::ListType`, self$pointer()),\n+        STRUCT = construct(`arrow::StructType`, self$pointer()),\n         UNION = stop(\"Type UNION not implemented yet\"),\n-        DICTIONARY = `arrow::DictionaryType`$new(self$pointer()),\n+        DICTIONARY = construct(`arrow::DictionaryType`, self$pointer()),\n         MAP = stop(\"Type MAP not implemented yet\")\n       )\n     }\n@@ -108,7 +108,7 @@\n )\n \n `arrow::DataType`$dispatch <- function(xp){\n-  `arrow::DataType`$new(xp)$..dispatch()\n+  construct(`arrow::DataType`, xp)$..dispatch()\n }\n \n #----- metadata\n@@ -241,90 +241,88 @@\n #'\n #' @rdname DataType\n #' @export\n-int8 <- function() `arrow::Int8`$new(Int8__initialize())\n+int8 <- function() construct(`arrow::Int8`, Int8__initialize())\n \n #' @rdname DataType\n #' @export\n-int16 <- function() `arrow::Int16`$new(Int16__initialize())\n+int16 <- function() construct(`arrow::Int16`, Int16__initialize())\n \n #' @rdname DataType\n #' @export\n-int32 <- function() `arrow::Int32`$new(Int32__initialize())\n+int32 <- function() construct(`arrow::Int32`, Int32__initialize())\n \n #' @rdname DataType\n #' @export\n-int64 <- function() `arrow::Int64`$new(Int64__initialize())\n+int64 <- function() construct(`arrow::Int64`, Int64__initialize())\n \n #' @rdname DataType\n #' @export\n-uint8 <- function() `arrow::UInt8`$new(UInt8__initialize())\n+uint8 <- function() construct(`arrow::UInt8`, UInt8__initialize())\n \n #' @rdname DataType\n #' @export\n-uint16 <- function() `arrow::UInt16`$new(UInt16__initialize())\n+uint16 <- function() construct(`arrow::UInt16`, UInt16__initialize())\n \n #' @rdname DataType\n #' @export\n-uint32 <- function() `arrow::UInt32`$new(UInt32__initialize())\n+uint32 <- function() construct(`arrow::UInt32`, UInt32__initialize())\n \n #' @rdname DataType\n #' @export\n-uint64 <- function() `arrow::UInt64`$new(UInt64__initialize())\n+uint64 <- function() construct(`arrow::UInt64`, UInt64__initialize())\n \n #' @rdname DataType\n #' @export\n-float16 <- function() `arrow::Float16`$new(Float16__initialize())\n+float16 <- function() construct(`arrow::Float16`,  Float16__initialize())\n \n #' @rdname DataType\n #' @export\n-float32 <- function() `arrow::Float32`$new(Float32__initialize())\n+float32 <- function() construct(`arrow::Float32`, Float32__initialize())\n \n #' @rdname DataType\n #' @export\n-float64 <- function() `arrow::Float64`$new(Float64__initialize())\n+float64 <- function() construct(`arrow::Float64`, Float64__initialize())\n \n #' @rdname DataType\n #' @export\n-boolean <- function() `arrow::Boolean`$new(Boolean__initialize())\n+boolean <- function() construct(`arrow::Boolean`, Boolean__initialize())\n \n #' @rdname DataType\n #' @export\n-utf8 <- function() `arrow::Utf8`$new(Utf8__initialize())\n+utf8 <- function() construct(`arrow::Utf8`, Utf8__initialize())\n \n #' @rdname DataType\n #' @export\n-date32 <- function() `arrow::Date32`$new(Date32__initialize())\n+date32 <- function() construct(`arrow::Date32`, Date32__initialize())\n \n #' @rdname DataType\n #' @export\n-date64 <- function() `arrow::Date64`$new(Date64__initialize())\n+date64 <- function() construct(`arrow::Date64`, Date64__initialize())\n \n #' @rdname DataType\n #' @export\n-time32 <- function(unit) {\n-  `arrow::Time32`$new(Time32__initialize(unit))\n-}\n+time32 <- function(unit) construct(`arrow::Time32`, Time32__initialize(unit))\n \n #' @rdname DataType\n #' @export\n-time64 <- function(unit) `arrow::Time64`$new(Time64__initialize(unit))\n+time64 <- function(unit) construct(`arrow::Time64`, Time64__initialize(unit))\n \n #' @rdname DataType\n #' @export\n-null <- function() `arrow::Null`$new(Null__initialize())\n+null <- function() construct(`arrow::Null`, Null__initialize())\n \n #' @rdname DataType\n #' @export\n timestamp <- function(unit, timezone) {\n   if (missing(timezone)) {\n-    `arrow::Timestamp`$new(Timestamp__initialize1(unit))\n+    construct(`arrow::Timestamp`, Timestamp__initialize1(unit))\n   } else {\n-    `arrow::Timestamp`$new(Timestamp__initialize2(unit, timezone))\n+    construct(`arrow::Timestamp`, Timestamp__initialize2(unit, timezone))\n   }\n }\n \n #' @rdname DataType\n #' @export\n-decimal <- function(precision, scale) `arrow::Decimal128Type`$new(Decimal128Type__initialize(precision, scale))\n+decimal <- function(precision, scale) construct(`arrow::Decimal128Type`, Decimal128Type__initialize(precision, scale))\n \n `arrow::NestedType` <- R6Class(\"arrow::NestedType\", inherit = `arrow::DataType`)\ndiff --git a/r/R/RcppExports.R b/r/R/RcppExports.R\nindex 915cd4dcf1..7a9f8725e8 100644\n--- a/r/R/RcppExports.R\n+++ b/r/R/RcppExports.R\n@@ -169,6 +169,10 @@ Column__data <- function(column) {\n     .Call(`_arrow_Column__data`, column)\n }\n \n+xptr_is_null <- function(xp) {\n+    .Call(`_arrow_xptr_is_null`, xp)\n+}\n+\n Int8__initialize <- function() {\n     .Call(`_arrow_Int8__initialize`)\n }\n@@ -333,10 +337,6 @@ Object__pointer_address <- function(obj) {\n     .Call(`_arrow_Object__pointer_address`, obj)\n }\n \n-Object__is_null <- function(obj) {\n-    .Call(`_arrow_Object__is_null`, obj)\n-}\n-\n DictionaryType__initialize <- function(type, array, ordered) {\n     .Call(`_arrow_DictionaryType__initialize`, type, array, ordered)\n }\ndiff --git a/r/R/RecordBatch.R b/r/R/RecordBatch.R\nindex e0866f6e69..4ac8213a9f 100644\n--- a/r/R/RecordBatch.R\n+++ b/r/R/RecordBatch.R\n@@ -21,8 +21,8 @@\n   public = list(\n     num_columns = function() RecordBatch__num_columns(self),\n     num_rows = function() RecordBatch__num_rows(self),\n-    schema = function() `arrow::Schema`$new(RecordBatch__schema(self)),\n-    column = function(i) `arrow::Array`$new(RecordBatch__column(self, i)),\n+    schema = function() construct(`arrow::Schema`, RecordBatch__schema(self)),\n+    column = function(i) construct(`arrow::Array`, RecordBatch__column(self, i)),\n     column_name = function(i) RecordBatch__column_name(self, i),\n     names = function() RecordBatch__names(self),\n     Equals = function(other) {\n@@ -30,13 +30,13 @@\n       RecordBatch__Equals(self, other)\n     },\n     RemoveColumn = function(i){\n-      `arrow::RecordBatch`$new(RecordBatch__RemoveColumn(self, i))\n+      construct(`arrow::RecordBatch`, RecordBatch__RemoveColumn(self, i))\n     },\n     Slice = function(offset, length = NULL) {\n       if (is.null(length)) {\n-        `arrow::RecordBatch`$new(RecordBatch__Slice1(self, offset))\n+        construct(`arrow::RecordBatch`, RecordBatch__Slice1(self, offset))\n       } else {\n-        `arrow::RecordBatch`$new(RecordBatch__Slice2(self, offset, length))\n+        construct(`arrow::RecordBatch`, RecordBatch__Slice2(self, offset, length))\n       }\n     },\n \n@@ -65,5 +65,5 @@\n #'\n #' @export\n record_batch <- function(.data){\n-  `arrow::RecordBatch`$new(RecordBatch__from_dataframe(.data))\n+  construct(`arrow::RecordBatch`, RecordBatch__from_dataframe(.data))\n }\ndiff --git a/r/R/RecordBatchReader.R b/r/R/RecordBatchReader.R\nindex b7c8b0058e..4232b73c09 100644\n--- a/r/R/RecordBatchReader.R\n+++ b/r/R/RecordBatchReader.R\n@@ -19,9 +19,9 @@\n \n `arrow::RecordBatchReader` <- R6Class(\"arrow::RecordBatchReader\", inherit = `arrow::Object`,\n   public = list(\n-    schema = function() `arrow::Schema`$new(RecordBatchReader__schema(self)),\n+    schema = function() construct(`arrow::Schema`, RecordBatchReader__schema(self)),\n     ReadNext = function() {\n-      `arrow::RecordBatch`$new(RecordBatchReader__ReadNext(self))\n+      construct(`arrow::RecordBatch`, RecordBatchReader__ReadNext(self))\n     }\n   )\n )\n@@ -30,9 +30,9 @@\n \n `arrow::ipc::RecordBatchFileReader` <- R6Class(\"arrow::ipc::RecordBatchFileReader\", inherit = `arrow::Object`,\n   public = list(\n-    schema = function() `arrow::Schema`$new(ipc___RecordBatchFileReader__schema(self)),\n+    schema = function() construct(`arrow::Schema`, ipc___RecordBatchFileReader__schema(self)),\n     num_record_batches = function() ipc___RecordBatchFileReader__num_record_batches(self),\n-    ReadRecordBatch = function(i) `arrow::RecordBatch`$new(ipc___RecordBatchFileReader__ReadRecordBatch(self, i))\n+    ReadRecordBatch = function(i) construct(`arrow::RecordBatch`, ipc___RecordBatchFileReader__ReadRecordBatch(self, i))\n   )\n )\n \n@@ -47,7 +47,7 @@ record_batch_stream_reader <- function(stream){\n \n #' @export\n `record_batch_stream_reader.arrow::io::InputStream` <- function(stream) {\n-  `arrow::ipc::RecordBatchStreamReader`$new(ipc___RecordBatchStreamReader__Open(stream))\n+  construct(`arrow::ipc::RecordBatchStreamReader`, ipc___RecordBatchStreamReader__Open(stream))\n }\n \n #' @export\n@@ -67,7 +67,7 @@ record_batch_file_reader <- function(file) {\n \n #' @export\n `record_batch_file_reader.arrow::io::RandomAccessFile` <- function(file) {\n-  `arrow::ipc::RecordBatchFileReader`$new(ipc___RecordBatchFileReader__Open(file))\n+  construct(`arrow::ipc::RecordBatchFileReader`, ipc___RecordBatchFileReader__Open(file))\n }\n \n #' @export\n@@ -166,12 +166,12 @@ read_table.fs_path <- function(stream) {\n \n #' @export\n `read_table.arrow::ipc::RecordBatchFileReader` <- function(stream) {\n-  `arrow::Table`$new(Table__from_RecordBatchFileReader(stream))\n+  construct(`arrow::Table`, Table__from_RecordBatchFileReader(stream))\n }\n \n #' @export\n `read_table.arrow::ipc::RecordBatchStreamReader` <- function(stream) {\n-  `arrow::Table`$new(Table__from_RecordBatchStreamReader(stream))\n+  construct(`arrow::Table`, Table__from_RecordBatchStreamReader(stream))\n }\n \n #' @export\ndiff --git a/r/R/RecordBatchWriter.R b/r/R/RecordBatchWriter.R\nindex f1ab29dd1f..687c83086d 100644\n--- a/r/R/RecordBatchWriter.R\n+++ b/r/R/RecordBatchWriter.R\n@@ -41,7 +41,7 @@ record_batch_file_writer <- function(stream, schema) {\n     inherits(stream, \"arrow::io::OutputStream\"),\n     inherits(schema, \"arrow::Schema\")\n   )\n-  `arrow::ipc::RecordBatchFileWriter`$new(ipc___RecordBatchFileWriter__Open(stream, schema))\n+  construct(`arrow::ipc::RecordBatchFileWriter`, ipc___RecordBatchFileWriter__Open(stream, schema))\n }\n \n #' Create a record batch stream writer\n@@ -55,7 +55,7 @@ record_batch_stream_writer <- function(stream, schema) {\n     inherits(stream, \"arrow::io::OutputStream\"),\n     inherits(schema, \"arrow::Schema\")\n   )\n-  `arrow::ipc::RecordBatchStreamWriter`$new(ipc___RecordBatchStreamWriter__Open(stream, schema))\n+  construct(`arrow::ipc::RecordBatchStreamWriter`, ipc___RecordBatchStreamWriter__Open(stream, schema))\n }\n \n #-------- write_record_batch\ndiff --git a/r/R/Schema.R b/r/R/Schema.R\nindex 7f1635de55..064a7f0bd9 100644\n--- a/r/R/Schema.R\n+++ b/r/R/Schema.R\n@@ -27,5 +27,5 @@\n #' @rdname DataType\n #' @export\n schema <- function(...){\n-  `arrow::Schema`$new(schema_(.fields(list(...))))\n+  construct(`arrow::Schema`, schema_(.fields(list(...))))\n }\ndiff --git a/r/R/Struct.R b/r/R/Struct.R\nindex 52e7d6f99b..047cddc669 100644\n--- a/r/R/Struct.R\n+++ b/r/R/Struct.R\n@@ -24,5 +24,5 @@\n #' @rdname DataType\n #' @export\n struct <- function(...){\n-  `arrow::StructType`$new(struct_(.fields(list(...))))\n+  construct(`arrow::StructType`, struct_(.fields(list(...))))\n }\ndiff --git a/r/R/Table.R b/r/R/Table.R\nindex 62011fc2c9..0d401b9876 100644\n--- a/r/R/Table.R\n+++ b/r/R/Table.R\n@@ -21,8 +21,8 @@\n   public = list(\n     num_columns = function() Table__num_columns(self),\n     num_rows = function() Table__num_rows(self),\n-    schema = function() `arrow::Schema`$new(Table__schema(self)),\n-    column = function(i) `arrow::Column`$new(Table__column(self, i)),\n+    schema = function() construct(`arrow::Schema`, Table__schema(self)),\n+    column = function(i) construct(`arrow::Column`, Table__column(self, i)),\n \n     serialize = function(output_stream, ...) write_table(self, output_stream, ...)\n   )\n@@ -34,7 +34,7 @@\n #'\n #' @export\n table <- function(.data){\n-  `arrow::Table`$new(Table__from_dataframe(.data))\n+  construct(`arrow::Table`, Table__from_dataframe(.data))\n }\n \n #' @export\ndiff --git a/r/R/array.R b/r/R/array.R\nindex 7e64daffc1..a514df2e15 100644\n--- a/r/R/array.R\n+++ b/r/R/array.R\n@@ -29,14 +29,14 @@\n     type_id = function() Array__type_id(self),\n     Equals = function(other) Array__Equals(self, other),\n     ApproxEquals = function(othet) Array__ApproxEquals(self, other),\n-    data = function() `arrow::ArrayData`$new(Array__data(self)),\n+    data = function() construct(`arrow::ArrayData`, Array__data(self)),\n     as_vector = function() Array__as_vector(self),\n     ToString = function() Array__ToString(self),\n     Slice = function(offset, length = NULL){\n       if (is.null(length)) {\n-        `arrow::Array`$new(Array__Slice1(self, offset))\n+        construct(`arrow::Array`, Array__Slice1(self, offset))\n       } else {\n-        `arrow::Array`$new(Array__Slice2(self, offset, length))\n+        construct(`arrow::Array`, Array__Slice2(self, offset, length))\n       }\n     },\n     RangeEquals = function(other, start_idx, end_idx, other_start_idx) {\n@@ -47,9 +47,9 @@\n )\n \n `arrow::Array`$dispatch <- function(xp){\n-  a <- `arrow::Array`$new(xp)\n+  a <- construct(`arrow::Array`, xp)\n   if(a$type_id() == Type$DICTIONARY){\n-    a <- `arrow::DictionaryArray`$new(xp)\n+    a <- construct(`arrow::DictionaryArray`, xp)\n   }\n   a\n }\ndiff --git a/r/R/buffer.R b/r/R/buffer.R\nindex 5f65721853..3c012d8a95 100644\n--- a/r/R/buffer.R\n+++ b/r/R/buffer.R\n@@ -47,15 +47,15 @@ buffer.default <- function(x) {\n \n #' @export\n buffer.raw <- function(x) {\n-  `arrow::Buffer`$new(r___RBuffer__initialize(x))\n+  construct(`arrow::Buffer`, r___RBuffer__initialize(x))\n }\n \n #' @export\n buffer.numeric <- function(x) {\n-  `arrow::Buffer`$new(r___RBuffer__initialize(x))\n+  construct(`arrow::Buffer`, r___RBuffer__initialize(x))\n }\n \n #' @export\n buffer.integer <- function(x) {\n-  `arrow::Buffer`$new(r___RBuffer__initialize(x))\n+  construct(`arrow::Buffer`, r___RBuffer__initialize(x))\n }\ndiff --git a/r/R/dictionary.R b/r/R/dictionary.R\nindex 4dea59cbdc..28147f8fba 100644\n--- a/r/R/dictionary.R\n+++ b/r/R/dictionary.R\n@@ -22,7 +22,7 @@\n   public = list(\n     index_type = function() `arrow::DataType`$dispatch(DictionaryType__index_type(self)),\n     name = function() DictionaryType__name(self),\n-    dictionary = function() `arrow::Array`$new(DictionaryType__dictionary(self)),\n+    dictionary = function() construct(`arrow::Array`, DictionaryType__dictionary(self)),\n     ordered = function() DictionaryType__ordered(self)\n   )\n \n@@ -40,5 +40,5 @@ dictionary <- function(type, values, ordered = FALSE) {\n     inherits(type, \"arrow::DataType\"),\n     inherits(values, \"arrow::Array\")\n   )\n-  `arrow::DictionaryType`$new(DictionaryType__initialize(type, values, ordered))\n+  construct(`arrow::DictionaryType`, DictionaryType__initialize(type, values, ordered))\n }\ndiff --git a/r/R/io.R b/r/R/io.R\nindex 1516bd3701..9b0c2cdc7f 100644\n--- a/r/R/io.R\n+++ b/r/R/io.R\n@@ -21,7 +21,7 @@\n \n `arrow::io::Readable` <- R6Class(\"arrow::io::Readable\", inherit = `arrow::Object`,\n   public = list(\n-    Read = function(nbytes) `arrow::Buffer`$new(io___Readable__Read(self, nbytes))\n+    Read = function(nbytes) construct(`arrow::Buffer`, io___Readable__Read(self, nbytes))\n   )\n )\n \n@@ -50,7 +50,7 @@\n `arrow::io::BufferOutputStream` <- R6Class(\"arrow::io::BufferOutputStream\", inherit = `arrow::io::OutputStream`,\n   public = list(\n     capacity = function() io___BufferOutputStream__capacity(self),\n-    Finish = function() `arrow::Buffer`$new(io___BufferOutputStream__Finish(self)),\n+    Finish = function() construct(`arrow::Buffer`, io___BufferOutputStream__Finish(self)),\n     Write = function(bytes) io___BufferOutputStream__Write(self, bytes),\n     Tell = function() io___BufferOutputStream__Tell(self)\n   )\n@@ -88,38 +88,38 @@\n #' @rdname io\n #' @export\n mmap_create <- `arrow::io::MemoryMappedFile`$create <- function(path, size) {\n-  `arrow::io::MemoryMappedFile`$new(io___MemoryMappedFile__Create(fs::path_abs(path), size))\n+  construct(`arrow::io::MemoryMappedFile`, io___MemoryMappedFile__Create(fs::path_abs(path), size))\n }\n \n #' @rdname io\n #' @export\n mmap_open <- `arrow::io::MemoryMappedFile`$open <- function(path, mode = c(\"read\", \"write\", \"readwrite\")) {\n   mode <- match(match.arg(mode), c(\"read\", \"write\", \"readwrite\")) - 1L\n-  `arrow::io::MemoryMappedFile`$new(io___MemoryMappedFile__Open(fs::path_abs(path), mode))\n+  construct(`arrow::io::MemoryMappedFile`, io___MemoryMappedFile__Open(fs::path_abs(path), mode))\n }\n \n #' @rdname io\n #' @export\n file_open <- `arrow::io::ReadableFile`$open <- function(path) {\n-  `arrow::io::ReadableFile`$new(io___ReadableFile__Open(fs::path_abs(path)))\n+  construct(`arrow::io::ReadableFile`, io___ReadableFile__Open(fs::path_abs(path)))\n }\n \n #' @rdname io\n #' @export\n file_output_stream <- function(path) {\n-  `arrow::io::FileOutputStream`$new(io___FileOutputStream__Open(path))\n+  construct(`arrow::io::FileOutputStream`, io___FileOutputStream__Open(path))\n }\n \n #' @rdname io\n #' @export\n mock_output_stream <- function() {\n-  `arrow::io::MockOutputStream`$new(io___MockOutputStream__initialize())\n+  construct(`arrow::io::MockOutputStream`, io___MockOutputStream__initialize())\n }\n \n #' @rdname io\n #' @export\n buffer_output_stream <- function(initial_capacity = 0L) {\n-  `arrow::io::BufferOutputStream`$new(io___BufferOutputStream__Create(initial_capacity))\n+  construct(`arrow::io::BufferOutputStream`, io___BufferOutputStream__Create(initial_capacity))\n }\n \n #' @rdname io\n@@ -136,7 +136,7 @@ fixed_size_buffer_writer.default <- function(buffer){\n #' @export\n `fixed_size_buffer_writer.arrow::Buffer` <- function(buffer){\n   assert_that(buffer$is_mutable())\n-  `arrow::io::FixedSizeBufferWriter`$new(io___FixedSizeBufferWriter__initialize(buffer))\n+  construct(`arrow::io::FixedSizeBufferWriter`, io___FixedSizeBufferWriter__initialize(buffer))\n }\n \n #' Create a `arrow::BufferReader`\n@@ -150,7 +150,7 @@ buffer_reader <- function(x) {\n \n #' @export\n `buffer_reader.arrow::Buffer` <- function(x) {\n-  `arrow::io::BufferReader`$new(io___BufferReader__initialize(x))\n+  construct(`arrow::io::BufferReader`, io___BufferReader__initialize(x))\n }\n \n #' @export\ndiff --git a/r/R/memory_pool.R b/r/R/memory_pool.R\nindex c738c00b9b..cc2fcc72ec 100644\n--- a/r/R/memory_pool.R\n+++ b/r/R/memory_pool.R\n@@ -29,5 +29,5 @@\n )\n \n default_memory_pool <- function() {\n-  `arrow::MemoryPool`$new(MemoryPool__default())\n+  construct(`arrow::MemoryPool`, MemoryPool__default())\n }\ndiff --git a/r/src/RcppExports.cpp b/r/src/RcppExports.cpp\nindex 8b4c89aa01..949ce71d71 100644\n--- a/r/src/RcppExports.cpp\n+++ b/r/src/RcppExports.cpp\n@@ -482,6 +482,17 @@ BEGIN_RCPP\n     return rcpp_result_gen;\n END_RCPP\n }\n+// xptr_is_null\n+bool xptr_is_null(SEXP xp);\n+RcppExport SEXP _arrow_xptr_is_null(SEXP xpSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);\n+    rcpp_result_gen = Rcpp::wrap(xptr_is_null(xp));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n // Int8__initialize\n std::shared_ptr<arrow::DataType> Int8__initialize();\n RcppExport SEXP _arrow_Int8__initialize() {\n@@ -920,17 +931,6 @@ BEGIN_RCPP\n     return rcpp_result_gen;\n END_RCPP\n }\n-// Object__is_null\n-bool Object__is_null(const std::shared_ptr<void>& obj);\n-RcppExport SEXP _arrow_Object__is_null(SEXP objSEXP) {\n-BEGIN_RCPP\n-    Rcpp::RObject rcpp_result_gen;\n-    Rcpp::RNGScope rcpp_rngScope_gen;\n-    Rcpp::traits::input_parameter< const std::shared_ptr<void>& >::type obj(objSEXP);\n-    rcpp_result_gen = Rcpp::wrap(Object__is_null(obj));\n-    return rcpp_result_gen;\n-END_RCPP\n-}\n // DictionaryType__initialize\n std::shared_ptr<arrow::DataType> DictionaryType__initialize(const std::shared_ptr<arrow::DataType>& type, const std::shared_ptr<arrow::Array>& array, bool ordered);\n RcppExport SEXP _arrow_DictionaryType__initialize(SEXP typeSEXP, SEXP arraySEXP, SEXP orderedSEXP) {\n@@ -1704,6 +1704,7 @@ static const R_CallMethodDef CallEntries[] = {\n     {\"_arrow_Column__null_count\", (DL_FUNC) &_arrow_Column__null_count, 1},\n     {\"_arrow_Column__type\", (DL_FUNC) &_arrow_Column__type, 1},\n     {\"_arrow_Column__data\", (DL_FUNC) &_arrow_Column__data, 1},\n+    {\"_arrow_xptr_is_null\", (DL_FUNC) &_arrow_xptr_is_null, 1},\n     {\"_arrow_Int8__initialize\", (DL_FUNC) &_arrow_Int8__initialize, 0},\n     {\"_arrow_Int16__initialize\", (DL_FUNC) &_arrow_Int16__initialize, 0},\n     {\"_arrow_Int32__initialize\", (DL_FUNC) &_arrow_Int32__initialize, 0},\n@@ -1745,7 +1746,6 @@ static const R_CallMethodDef CallEntries[] = {\n     {\"_arrow_TimestampType__timezone\", (DL_FUNC) &_arrow_TimestampType__timezone, 1},\n     {\"_arrow_TimestampType__unit\", (DL_FUNC) &_arrow_TimestampType__unit, 1},\n     {\"_arrow_Object__pointer_address\", (DL_FUNC) &_arrow_Object__pointer_address, 1},\n-    {\"_arrow_Object__is_null\", (DL_FUNC) &_arrow_Object__is_null, 1},\n     {\"_arrow_DictionaryType__initialize\", (DL_FUNC) &_arrow_DictionaryType__initialize, 3},\n     {\"_arrow_DictionaryType__index_type\", (DL_FUNC) &_arrow_DictionaryType__index_type, 1},\n     {\"_arrow_DictionaryType__name\", (DL_FUNC) &_arrow_DictionaryType__name, 1},\ndiff --git a/r/src/array.cpp b/r/src/array.cpp\nindex 71bdb5272f..e885b6646d 100644\n--- a/r/src/array.cpp\n+++ b/r/src/array.cpp\n@@ -23,6 +23,9 @@ using namespace arrow;\n namespace arrow {\n namespace r {\n \n+// the integer64 sentinel\n+static const int64_t NA_INT64 = std::numeric_limits<int64_t>::min();\n+\n template <int RTYPE, typename Type>\n std::shared_ptr<Array> SimpleArray(SEXP x) {\n   Rcpp::Vector<RTYPE> vec(x);\n@@ -329,6 +332,47 @@ std::shared_ptr<Array> Date64Array_From_POSIXct(SEXP x) {\n   return std::make_shared<Date64Array>(data);\n }\n \n+std::shared_ptr<arrow::Array> Int64Array(SEXP x) {\n+  auto p_vec_start = reinterpret_cast<int64_t*>(REAL(x));\n+  auto n = Rf_xlength(x);\n+  int64_t null_count = 0;\n+\n+  std::vector<std::shared_ptr<Buffer>> buffers{nullptr,\n+                                               std::make_shared<RBuffer<REALSXP>>(x)};\n+\n+  auto p_vec = std::find(p_vec_start, p_vec_start + n, NA_INT64);\n+  auto first_na = p_vec - p_vec_start;\n+  if (first_na < n) {\n+    R_ERROR_NOT_OK(AllocateBuffer(BitUtil::BytesForBits(n), &buffers[0]));\n+    internal::FirstTimeBitmapWriter bitmap_writer(buffers[0]->mutable_data(), 0, n);\n+\n+    // first loop to clear all the bits before the first NA\n+    int i = 0;\n+    for (; i < first_na; i++, bitmap_writer.Next()) {\n+      bitmap_writer.Set();\n+    }\n+\n+    // then finish\n+    for (; i < n; i++, bitmap_writer.Next(), ++p_vec) {\n+      if (*p_vec == NA_INT64) {\n+        bitmap_writer.Clear();\n+        null_count++;\n+      } else {\n+        bitmap_writer.Set();\n+      }\n+    }\n+\n+    bitmap_writer.Finish();\n+  }\n+\n+  auto data = ArrayData::Make(\n+      std::make_shared<Int64Type>(), n, std::move(buffers), null_count, 0 /*offset*/\n+  );\n+\n+  // return the right Array class\n+  return std::make_shared<typename TypeTraits<Int64Type>::ArrayType>(data);\n+}\n+\n }  // namespace r\n }  // namespace arrow\n \n@@ -355,6 +399,9 @@ std::shared_ptr<arrow::Array> Array__from_vector(SEXP x) {\n       if (Rf_inherits(x, \"POSIXct\")) {\n         return arrow::r::Date64Array_From_POSIXct<REALSXP>(x);\n       }\n+      if (Rf_inherits(x, \"integer64\")) {\n+        return arrow::r::Int64Array(x);\n+      }\n       return arrow::r::SimpleArray<REALSXP, arrow::DoubleType>(x);\n     case RAWSXP:\n       return arrow::r::SimpleArray<RAWSXP, arrow::Int8Type>(x);\n@@ -596,11 +643,19 @@ SEXP promotion_Array_to_Vector(const std::shared_ptr<Array>& array) {\n   using value_type = typename TypeTraits<Type>::ArrayType::value_type;\n \n   auto n = array->length();\n-  auto start = reinterpret_cast<const value_type*>(array->data()->buffers[1]->data()) +\n-               array->offset();\n-\n   Rcpp::Vector<RTYPE> vec(no_init(n));\n-  if (array->null_count()) {\n+  if (n == 0) {\n+    return vec;\n+  }\n+  auto null_count = array->null_count();\n+  if (null_count == n) {\n+    std::fill(vec.begin(), vec.end(), NA_REAL);\n+    return vec;\n+  }\n+\n+  auto start = GetValuesSafely<value_type>(array->data(), 1, array->offset());\n+\n+  if (null_count) {\n     internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n                                          n);\n     for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n@@ -615,6 +670,34 @@ SEXP promotion_Array_to_Vector(const std::shared_ptr<Array>& array) {\n   return vec;\n }\n \n+SEXP Int64Array(const std::shared_ptr<Array>& array) {\n+  auto n = array->length();\n+  NumericVector vec(n);\n+  vec.attr(\"class\") = \"integer64\";\n+  if (n == 0) {\n+    return vec;\n+  }\n+  auto null_count = array->null_count();\n+  if (null_count == n) {\n+    std::fill(vec.begin(), vec.end(), NA_REAL);\n+    return vec;\n+  }\n+  auto p_values = GetValuesSafely<int64_t>(array->data(), 1, array->offset());\n+  auto p_vec = reinterpret_cast<int64_t*>(vec.begin());\n+\n+  if (array->null_count()) {\n+    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n+                                         n);\n+    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n+      p_vec[i] = bitmap_reader.IsNotSet() ? NA_INT64 : p_values[i];\n+    }\n+  } else {\n+    std::copy_n(p_values, n, p_vec);\n+  }\n+\n+  return vec;\n+}\n+\n }  // namespace r\n }  // namespace arrow\n \n@@ -664,9 +747,7 @@ SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array) {\n \n     // lossy promotions to numeric vector\n     case Type::INT64:\n-      return arrow::r::promotion_Array_to_Vector<REALSXP, arrow::Int64Type>(array);\n-    case Type::UINT64:\n-      return arrow::r::promotion_Array_to_Vector<REALSXP, arrow::UInt64Type>(array);\n+      return arrow::r::Int64Array(array);\n \n     default:\n       break;\ndiff --git a/r/src/ArrayData.cpp b/r/src/arraydata.cpp\nsimilarity index 100%\nrename from r/src/ArrayData.cpp\nrename to r/src/arraydata.cpp\ndiff --git a/r/src/ChunkedArray.cpp b/r/src/chunkedarray.cpp\nsimilarity index 100%\nrename from r/src/ChunkedArray.cpp\nrename to r/src/chunkedarray.cpp\ndiff --git a/r/src/Column.cpp b/r/src/column.cpp\nsimilarity index 100%\nrename from r/src/Column.cpp\nrename to r/src/column.cpp\ndiff --git a/r/src/DataType.cpp b/r/src/datatype.cpp\nsimilarity index 98%\nrename from r/src/DataType.cpp\nrename to r/src/datatype.cpp\nindex 595dee3a65..90378f7875 100644\n--- a/r/src/DataType.cpp\n+++ b/r/src/datatype.cpp\n@@ -19,6 +19,11 @@\n \n using namespace Rcpp;\n \n+// [[Rcpp::export]]\n+bool xptr_is_null(SEXP xp) {\n+  return reinterpret_cast<std::shared_ptr<void>*>(EXTPTR_PTR(xp))->get() == nullptr;\n+}\n+\n // [[Rcpp::export]]\n std::shared_ptr<arrow::DataType> Int8__initialize() { return arrow::int8(); }\n \n@@ -214,9 +219,6 @@ std::string Object__pointer_address(SEXP obj) {\n   return tfm::format(\"%p\", EXTPTR_PTR(obj));\n }\n \n-// [[Rcpp::export]]\n-bool Object__is_null(const std::shared_ptr<void>& obj) { return obj.get() == nullptr; }\n-\n // [[Rcpp::export]]\n std::shared_ptr<arrow::DataType> DictionaryType__initialize(\n     const std::shared_ptr<arrow::DataType>& type,\ndiff --git a/r/src/MemoryPool.cpp b/r/src/memorypool.cpp\nsimilarity index 100%\nrename from r/src/MemoryPool.cpp\nrename to r/src/memorypool.cpp\ndiff --git a/r/src/RecordBatch.cpp b/r/src/recordbatch.cpp\nsimilarity index 100%\nrename from r/src/RecordBatch.cpp\nrename to r/src/recordbatch.cpp\ndiff --git a/r/src/RecordBatchReader.cpp b/r/src/recordbatchreader.cpp\nsimilarity index 97%\nrename from r/src/RecordBatchReader.cpp\nrename to r/src/recordbatchreader.cpp\nindex 1ddc397e96..9ab31c8099 100644\n--- a/r/src/RecordBatchReader.cpp\n+++ b/r/src/recordbatchreader.cpp\n@@ -59,7 +59,9 @@ int ipc___RecordBatchFileReader__num_record_batches(\n std::shared_ptr<arrow::RecordBatch> ipc___RecordBatchFileReader__ReadRecordBatch(\n     const std::shared_ptr<arrow::ipc::RecordBatchFileReader>& reader, int i) {\n   std::shared_ptr<arrow::RecordBatch> batch;\n-  R_ERROR_NOT_OK(reader->ReadRecordBatch(i, &batch));\n+  if (i >= 0 && i < reader->num_record_batches()) {\n+    R_ERROR_NOT_OK(reader->ReadRecordBatch(i, &batch));\n+  }\n   return batch;\n }\n \ndiff --git a/r/src/RecordBatchWriter.cpp b/r/src/recordbatchwriter.cpp\nsimilarity index 100%\nrename from r/src/RecordBatchWriter.cpp\nrename to r/src/recordbatchwriter.cpp\ndiff --git a/r/src/Table.cpp b/r/src/table.cpp\nsimilarity index 100%\nrename from r/src/Table.cpp\nrename to r/src/table.cpp\ndiff --git a/r/tests/testthat/test-Array.R b/r/tests/testthat/test-Array.R\nindex d5624355d4..0bcc935479 100644\n--- a/r/tests/testthat/test-Array.R\n+++ b/r/tests/testthat/test-Array.R\n@@ -242,3 +242,17 @@ test_that(\"array supports POSIXct (ARROW-3340)\", {\n   expect_true(a$IsNull(4))\n })\n \n+test_that(\"array supports integer64\", {\n+  x <- bit64::as.integer64(1:10)\n+  a <- array(x)\n+  expect_equal(a$type(), int64())\n+  expect_equal(a$length(), 10L)\n+  expect_equal(a$as_vector(), x)\n+\n+  x[4] <- NA\n+  a <- array(x)\n+  expect_equal(a$type(), int64())\n+  expect_equal(a$length(), 10L)\n+  expect_equal(a$as_vector(), x)\n+  expect_true(a$IsNull(3L))\n+})\ndiff --git a/r/tests/testthat/test-RecordBatch.R b/r/tests/testthat/test-RecordBatch.R\nindex c6a31bb6b9..2f535c343f 100644\n--- a/r/tests/testthat/test-RecordBatch.R\n+++ b/r/tests/testthat/test-RecordBatch.R\n@@ -135,15 +135,17 @@ test_that(\"read_record_batch handles various streams (ARROW-3450, ARROW-3505)\",\n \n   mmap_file <- close_on_exit(mmap_open(tf))\n   batch4 <- read_record_batch(mmap_file)\n-\n   batch5 <- read_record_batch(bytes)\n   batch6 <- read_record_batch(buf_reader)\n+  expect_error(read_record_batch(buf_reader))\n \n   stream_reader <- record_batch_stream_reader(bytes)\n   batch7 <- read_record_batch(stream_reader)\n+  expect_null(read_record_batch(stream_reader))\n \n   file_reader <- record_batch_file_reader(tf)\n   batch8 <- read_record_batch(file_reader)\n+  expect_null(read_record_batch(file_reader, i = 2))\n \n   expect_equal(batch, batch1)\n   expect_equal(batch, batch2)\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-20T13:53:29.551+0000",
                    "updated": "2018-10-20T13:53:29.551+0000",
                    "started": "2018-10-20T13:53:29.550+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156523",
                    "issueId": "13192834"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4664ca3a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ffd1c2a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c81d8d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@46934dd2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5476aa36[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5c9707e8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1df24d82[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@41d37e33[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20154b25[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@44d9b088[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b486bcc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@11b0b670[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3600,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Oct 20 13:53:12 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-20T13:53:12.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3562/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-19T12:39:10.000+0000",
        "updated": "2018-10-20T13:53:29.000+0000",
        "timeoriginalestimate": null,
        "description": "Follow up work to ARROW-3490",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Disallow creation of objects with null shared_ptr<T>",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192834/comment/16657866",
                    "id": "16657866",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2795\n[https://github.com/apache/arrow/pull/2795]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-20T13:53:12.702+0000",
                    "updated": "2018-10-20T13:53:12.702+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zet3:",
        "customfield_12314139": null
    }
}