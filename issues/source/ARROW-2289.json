{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13143616",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13143616",
    "key": "ARROW-2289",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2289/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7c66eb55[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3900b20a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ed9ef28[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@72f5941b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60fe70e4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@11a59eb8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1084930b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4e8f984c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d65a829[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6008ad63[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54a076a2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@665fd982[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Mar 09 04:22:08 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-03-09T04:22:04.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2289/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-03-08T17:12:35.000+0000",
        "updated": "2018-03-09T04:22:08.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add  Numeric, Integer and FloatingPoint data types",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13143616/comment/16391540",
                    "id": "16391540",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "kou opened a new pull request #1726: ARROW-2289: [GLib] Add Numeric, Integer, FloatingPoint data types\nURL: https://github.com/apache/arrow/pull/1726\n \n \n   They are useful to detect numeric data types.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-08T17:12:55.589+0000",
                    "updated": "2018-03-08T17:12:55.589+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13143616/comment/16392385",
                    "id": "16392385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1726\n[https://github.com/apache/arrow/pull/1726]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-09T04:22:04.307+0000",
                    "updated": "2018-03-09T04:22:04.307+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13143616/comment/16392386",
                    "id": "16392386",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1726: ARROW-2289: [GLib] Add Numeric, Integer, FloatingPoint data types\nURL: https://github.com/apache/arrow/pull/1726\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/basic-data-type.cpp b/c_glib/arrow-glib/basic-data-type.cpp\nindex a5f7aed1b..82abfa35c 100644\n--- a/c_glib/arrow-glib/basic-data-type.cpp\n+++ b/c_glib/arrow-glib/basic-data-type.cpp\n@@ -315,9 +315,39 @@ garrow_boolean_data_type_new(void)\n }\n \n \n+G_DEFINE_ABSTRACT_TYPE(GArrowNumericDataType,                    \\\n+                       garrow_numeric_data_type,                 \\\n+                       GARROW_TYPE_FIXED_WIDTH_DATA_TYPE)\n+\n+static void\n+garrow_numeric_data_type_init(GArrowNumericDataType *object)\n+{\n+}\n+\n+static void\n+garrow_numeric_data_type_class_init(GArrowNumericDataTypeClass *klass)\n+{\n+}\n+\n+\n+G_DEFINE_ABSTRACT_TYPE(GArrowIntegerDataType,                    \\\n+                       garrow_integer_data_type,                 \\\n+                       GARROW_TYPE_NUMERIC_DATA_TYPE)\n+\n+static void\n+garrow_integer_data_type_init(GArrowIntegerDataType *object)\n+{\n+}\n+\n+static void\n+garrow_integer_data_type_class_init(GArrowIntegerDataTypeClass *klass)\n+{\n+}\n+\n+\n G_DEFINE_TYPE(GArrowInt8DataType,                \\\n               garrow_int8_data_type,             \\\n-              GARROW_TYPE_DATA_TYPE)\n+              GARROW_TYPE_INTEGER_DATA_TYPE)\n \n static void\n garrow_int8_data_type_init(GArrowInt8DataType *object)\n@@ -349,7 +379,7 @@ garrow_int8_data_type_new(void)\n \n G_DEFINE_TYPE(GArrowUInt8DataType,                \\\n               garrow_uint8_data_type,             \\\n-              GARROW_TYPE_DATA_TYPE)\n+              GARROW_TYPE_INTEGER_DATA_TYPE)\n \n static void\n garrow_uint8_data_type_init(GArrowUInt8DataType *object)\n@@ -381,7 +411,7 @@ garrow_uint8_data_type_new(void)\n \n G_DEFINE_TYPE(GArrowInt16DataType,                \\\n               garrow_int16_data_type,             \\\n-              GARROW_TYPE_DATA_TYPE)\n+              GARROW_TYPE_INTEGER_DATA_TYPE)\n \n static void\n garrow_int16_data_type_init(GArrowInt16DataType *object)\n@@ -413,7 +443,7 @@ garrow_int16_data_type_new(void)\n \n G_DEFINE_TYPE(GArrowUInt16DataType,                \\\n               garrow_uint16_data_type,             \\\n-              GARROW_TYPE_DATA_TYPE)\n+              GARROW_TYPE_INTEGER_DATA_TYPE)\n \n static void\n garrow_uint16_data_type_init(GArrowUInt16DataType *object)\n@@ -445,7 +475,7 @@ garrow_uint16_data_type_new(void)\n \n G_DEFINE_TYPE(GArrowInt32DataType,                \\\n               garrow_int32_data_type,             \\\n-              GARROW_TYPE_DATA_TYPE)\n+              GARROW_TYPE_INTEGER_DATA_TYPE)\n \n static void\n garrow_int32_data_type_init(GArrowInt32DataType *object)\n@@ -477,7 +507,7 @@ garrow_int32_data_type_new(void)\n \n G_DEFINE_TYPE(GArrowUInt32DataType,                \\\n               garrow_uint32_data_type,             \\\n-              GARROW_TYPE_DATA_TYPE)\n+              GARROW_TYPE_INTEGER_DATA_TYPE)\n \n static void\n garrow_uint32_data_type_init(GArrowUInt32DataType *object)\n@@ -509,7 +539,7 @@ garrow_uint32_data_type_new(void)\n \n G_DEFINE_TYPE(GArrowInt64DataType,                \\\n               garrow_int64_data_type,             \\\n-              GARROW_TYPE_DATA_TYPE)\n+              GARROW_TYPE_INTEGER_DATA_TYPE)\n \n static void\n garrow_int64_data_type_init(GArrowInt64DataType *object)\n@@ -541,7 +571,7 @@ garrow_int64_data_type_new(void)\n \n G_DEFINE_TYPE(GArrowUInt64DataType,                \\\n               garrow_uint64_data_type,             \\\n-              GARROW_TYPE_DATA_TYPE)\n+              GARROW_TYPE_INTEGER_DATA_TYPE)\n \n static void\n garrow_uint64_data_type_init(GArrowUInt64DataType *object)\n@@ -571,9 +601,24 @@ garrow_uint64_data_type_new(void)\n }\n \n \n+G_DEFINE_ABSTRACT_TYPE(GArrowFloatingPointDataType,                    \\\n+                       garrow_floating_point_data_type,                \\\n+                       GARROW_TYPE_NUMERIC_DATA_TYPE)\n+\n+static void\n+garrow_floating_point_data_type_init(GArrowFloatingPointDataType *object)\n+{\n+}\n+\n+static void\n+garrow_floating_point_data_type_class_init(GArrowFloatingPointDataTypeClass *klass)\n+{\n+}\n+\n+\n G_DEFINE_TYPE(GArrowFloatDataType,                \\\n               garrow_float_data_type,             \\\n-              GARROW_TYPE_DATA_TYPE)\n+              GARROW_TYPE_FLOATING_POINT_DATA_TYPE)\n \n static void\n garrow_float_data_type_init(GArrowFloatDataType *object)\n@@ -605,7 +650,7 @@ garrow_float_data_type_new(void)\n \n G_DEFINE_TYPE(GArrowDoubleDataType,                \\\n               garrow_double_data_type,             \\\n-              GARROW_TYPE_DATA_TYPE)\n+              GARROW_TYPE_FLOATING_POINT_DATA_TYPE)\n \n static void\n garrow_double_data_type_init(GArrowDoubleDataType *object)\ndiff --git a/c_glib/arrow-glib/basic-data-type.h b/c_glib/arrow-glib/basic-data-type.h\nindex 469590191..478c905e9 100644\n--- a/c_glib/arrow-glib/basic-data-type.h\n+++ b/c_glib/arrow-glib/basic-data-type.h\n@@ -116,443 +116,180 @@ struct _GArrowBooleanDataTypeClass\n GArrowBooleanDataType *garrow_boolean_data_type_new      (void);\n \n \n-#define GARROW_TYPE_INT8_DATA_TYPE            \\\n-  (garrow_int8_data_type_get_type())\n-#define GARROW_INT8_DATA_TYPE(obj)                            \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                          \\\n-                              GARROW_TYPE_INT8_DATA_TYPE,     \\\n-                              GArrowInt8DataType))\n-#define GARROW_INT8_DATA_TYPE_CLASS(klass)                    \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),                           \\\n-                           GARROW_TYPE_INT8_DATA_TYPE,        \\\n-                           GArrowInt8DataTypeClass))\n-#define GARROW_IS_INT8_DATA_TYPE(obj)                         \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                          \\\n-                              GARROW_TYPE_INT8_DATA_TYPE))\n-#define GARROW_IS_INT8_DATA_TYPE_CLASS(klass)                 \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),                           \\\n-                           GARROW_TYPE_INT8_DATA_TYPE))\n-#define GARROW_INT8_DATA_TYPE_GET_CLASS(obj)                  \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                           \\\n-                             GARROW_TYPE_INT8_DATA_TYPE,      \\\n-                             GArrowInt8DataTypeClass))\n-\n-typedef struct _GArrowInt8DataType         GArrowInt8DataType;\n-typedef struct _GArrowInt8DataTypeClass    GArrowInt8DataTypeClass;\n+#define GARROW_TYPE_NUMERIC_DATA_TYPE (garrow_numeric_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowNumericDataType,\n+                         garrow_numeric_data_type,\n+                         GARROW,\n+                         NUMERIC_DATA_TYPE,\n+                         GArrowFixedWidthDataType)\n+struct _GArrowNumericDataTypeClass\n+{\n+  GArrowFixedWidthDataTypeClass parent_class;\n+};\n \n-/**\n- * GArrowInt8DataType:\n- *\n- * It wraps `arrow::Int8Type`.\n- */\n-struct _GArrowInt8DataType\n+\n+#define GARROW_TYPE_INTEGER_DATA_TYPE (garrow_integer_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowIntegerDataType,\n+                         garrow_integer_data_type,\n+                         GARROW,\n+                         INTEGER_DATA_TYPE,\n+                         GArrowNumericDataType)\n+struct _GArrowIntegerDataTypeClass\n {\n-  /*< private >*/\n-  GArrowDataType parent_instance;\n+  GArrowNumericDataTypeClass parent_class;\n };\n \n+\n+#define GARROW_TYPE_INT8_DATA_TYPE (garrow_int8_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowInt8DataType,\n+                         garrow_int8_data_type,\n+                         GARROW,\n+                         INT8_DATA_TYPE,\n+                         GArrowIntegerDataType)\n struct _GArrowInt8DataTypeClass\n {\n-  GArrowDataTypeClass parent_class;\n+  GArrowIntegerDataTypeClass parent_class;\n };\n \n-GType                 garrow_int8_data_type_get_type (void) G_GNUC_CONST;\n GArrowInt8DataType   *garrow_int8_data_type_new      (void);\n \n \n-#define GARROW_TYPE_UINT8_DATA_TYPE            \\\n-  (garrow_uint8_data_type_get_type())\n-#define GARROW_UINT8_DATA_TYPE(obj)                            \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                           \\\n-                              GARROW_TYPE_UINT8_DATA_TYPE,     \\\n-                              GArrowUInt8DataType))\n-#define GARROW_UINT8_DATA_TYPE_CLASS(klass)                    \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),                            \\\n-                           GARROW_TYPE_UINT8_DATA_TYPE,        \\\n-                           GArrowUInt8DataTypeClass))\n-#define GARROW_IS_UINT8_DATA_TYPE(obj)                         \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                           \\\n-                              GARROW_TYPE_UINT8_DATA_TYPE))\n-#define GARROW_IS_UINT8_DATA_TYPE_CLASS(klass)                 \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),                            \\\n-                           GARROW_TYPE_UINT8_DATA_TYPE))\n-#define GARROW_UINT8_DATA_TYPE_GET_CLASS(obj)                  \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                            \\\n-                             GARROW_TYPE_UINT8_DATA_TYPE,      \\\n-                             GArrowUInt8DataTypeClass))\n-\n-typedef struct _GArrowUInt8DataType         GArrowUInt8DataType;\n-typedef struct _GArrowUInt8DataTypeClass    GArrowUInt8DataTypeClass;\n-\n-/**\n- * GArrowUInt8DataType:\n- *\n- * It wraps `arrow::UInt8Type`.\n- */\n-struct _GArrowUInt8DataType\n-{\n-  /*< private >*/\n-  GArrowDataType parent_instance;\n-};\n-\n+#define GARROW_TYPE_UINT8_DATA_TYPE (garrow_uint8_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowUInt8DataType,\n+                         garrow_uint8_data_type,\n+                         GARROW,\n+                         UINT8_DATA_TYPE,\n+                         GArrowIntegerDataType)\n struct _GArrowUInt8DataTypeClass\n {\n-  GArrowDataTypeClass parent_class;\n+  GArrowIntegerDataTypeClass parent_class;\n };\n \n-GType                 garrow_uint8_data_type_get_type (void) G_GNUC_CONST;\n GArrowUInt8DataType  *garrow_uint8_data_type_new      (void);\n \n \n-#define GARROW_TYPE_INT16_DATA_TYPE            \\\n-  (garrow_int16_data_type_get_type())\n-#define GARROW_INT16_DATA_TYPE(obj)                            \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                           \\\n-                              GARROW_TYPE_INT16_DATA_TYPE,     \\\n-                              GArrowInt16DataType))\n-#define GARROW_INT16_DATA_TYPE_CLASS(klass)                    \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),                            \\\n-                           GARROW_TYPE_INT16_DATA_TYPE,        \\\n-                           GArrowInt16DataTypeClass))\n-#define GARROW_IS_INT16_DATA_TYPE(obj)                         \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                           \\\n-                              GARROW_TYPE_INT16_DATA_TYPE))\n-#define GARROW_IS_INT16_DATA_TYPE_CLASS(klass)                 \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),                            \\\n-                           GARROW_TYPE_INT16_DATA_TYPE))\n-#define GARROW_INT16_DATA_TYPE_GET_CLASS(obj)                  \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                            \\\n-                             GARROW_TYPE_INT16_DATA_TYPE,      \\\n-                             GArrowInt16DataTypeClass))\n-\n-typedef struct _GArrowInt16DataType         GArrowInt16DataType;\n-typedef struct _GArrowInt16DataTypeClass    GArrowInt16DataTypeClass;\n-\n-/**\n- * GArrowInt16DataType:\n- *\n- * It wraps `arrow::Int16Type`.\n- */\n-struct _GArrowInt16DataType\n-{\n-  /*< private >*/\n-  GArrowDataType parent_instance;\n-};\n-\n+#define GARROW_TYPE_INT16_DATA_TYPE (garrow_int16_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowInt16DataType,\n+                         garrow_int16_data_type,\n+                         GARROW,\n+                         INT16_DATA_TYPE,\n+                         GArrowIntegerDataType)\n struct _GArrowInt16DataTypeClass\n {\n-  GArrowDataTypeClass parent_class;\n+  GArrowIntegerDataTypeClass parent_class;\n };\n \n-GType                 garrow_int16_data_type_get_type (void) G_GNUC_CONST;\n GArrowInt16DataType  *garrow_int16_data_type_new      (void);\n \n \n-#define GARROW_TYPE_UINT16_DATA_TYPE            \\\n-  (garrow_uint16_data_type_get_type())\n-#define GARROW_UINT16_DATA_TYPE(obj)                            \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                            \\\n-                              GARROW_TYPE_UINT16_DATA_TYPE,     \\\n-                              GArrowUInt16DataType))\n-#define GARROW_UINT16_DATA_TYPE_CLASS(klass)                    \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),                             \\\n-                           GARROW_TYPE_UINT16_DATA_TYPE,        \\\n-                           GArrowUInt16DataTypeClass))\n-#define GARROW_IS_UINT16_DATA_TYPE(obj)                         \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                            \\\n-                              GARROW_TYPE_UINT16_DATA_TYPE))\n-#define GARROW_IS_UINT16_DATA_TYPE_CLASS(klass)                 \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),                             \\\n-                           GARROW_TYPE_UINT16_DATA_TYPE))\n-#define GARROW_UINT16_DATA_TYPE_GET_CLASS(obj)                  \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                             \\\n-                             GARROW_TYPE_UINT16_DATA_TYPE,      \\\n-                             GArrowUInt16DataTypeClass))\n-\n-typedef struct _GArrowUInt16DataType         GArrowUInt16DataType;\n-typedef struct _GArrowUInt16DataTypeClass    GArrowUInt16DataTypeClass;\n-\n-/**\n- * GArrowUInt16DataType:\n- *\n- * It wraps `arrow::UInt16Type`.\n- */\n-struct _GArrowUInt16DataType\n-{\n-  /*< private >*/\n-  GArrowDataType parent_instance;\n-};\n-\n+#define GARROW_TYPE_UINT16_DATA_TYPE (garrow_uint16_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowUInt16DataType,\n+                         garrow_uint16_data_type,\n+                         GARROW,\n+                         UINT16_DATA_TYPE,\n+                         GArrowIntegerDataType)\n struct _GArrowUInt16DataTypeClass\n {\n-  GArrowDataTypeClass parent_class;\n+  GArrowIntegerDataTypeClass parent_class;\n };\n \n-GType                 garrow_uint16_data_type_get_type (void) G_GNUC_CONST;\n GArrowUInt16DataType *garrow_uint16_data_type_new      (void);\n \n \n-#define GARROW_TYPE_INT32_DATA_TYPE            \\\n-  (garrow_int32_data_type_get_type())\n-#define GARROW_INT32_DATA_TYPE(obj)                             \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                            \\\n-                              GARROW_TYPE_INT32_DATA_TYPE,      \\\n-                              GArrowInt32DataType))\n-#define GARROW_INT32_DATA_TYPE_CLASS(klass)             \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),                     \\\n-                           GARROW_TYPE_INT32_DATA_TYPE, \\\n-                           GArrowInt32DataTypeClass))\n-#define GARROW_IS_INT32_DATA_TYPE(obj)                          \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                            \\\n-                              GARROW_TYPE_INT32_DATA_TYPE))\n-#define GARROW_IS_INT32_DATA_TYPE_CLASS(klass)                  \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),                             \\\n-                           GARROW_TYPE_INT32_DATA_TYPE))\n-#define GARROW_INT32_DATA_TYPE_GET_CLASS(obj)                   \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                             \\\n-                             GARROW_TYPE_INT32_DATA_TYPE,       \\\n-                             GArrowInt32DataTypeClass))\n-\n-typedef struct _GArrowInt32DataType         GArrowInt32DataType;\n-typedef struct _GArrowInt32DataTypeClass    GArrowInt32DataTypeClass;\n-\n-/**\n- * GArrowInt32DataType:\n- *\n- * It wraps `arrow::Int32Type`.\n- */\n-struct _GArrowInt32DataType\n-{\n-  /*< private >*/\n-  GArrowDataType parent_instance;\n-};\n-\n+#define GARROW_TYPE_INT32_DATA_TYPE (garrow_int32_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowInt32DataType,\n+                         garrow_int32_data_type,\n+                         GARROW,\n+                         INT32_DATA_TYPE,\n+                         GArrowIntegerDataType)\n struct _GArrowInt32DataTypeClass\n {\n-  GArrowDataTypeClass parent_class;\n+  GArrowIntegerDataTypeClass parent_class;\n };\n \n-GType                 garrow_int32_data_type_get_type (void) G_GNUC_CONST;\n GArrowInt32DataType  *garrow_int32_data_type_new      (void);\n \n \n-#define GARROW_TYPE_UINT32_DATA_TYPE            \\\n-  (garrow_uint32_data_type_get_type())\n-#define GARROW_UINT32_DATA_TYPE(obj)                            \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                            \\\n-                              GARROW_TYPE_UINT32_DATA_TYPE,     \\\n-                              GArrowUInt32DataType))\n-#define GARROW_UINT32_DATA_TYPE_CLASS(klass)                    \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),                             \\\n-                           GARROW_TYPE_UINT32_DATA_TYPE,        \\\n-                           GArrowUInt32DataTypeClass))\n-#define GARROW_IS_UINT32_DATA_TYPE(obj)                         \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                            \\\n-                              GARROW_TYPE_UINT32_DATA_TYPE))\n-#define GARROW_IS_UINT32_DATA_TYPE_CLASS(klass)                 \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),                             \\\n-                           GARROW_TYPE_UINT32_DATA_TYPE))\n-#define GARROW_UINT32_DATA_TYPE_GET_CLASS(obj)                  \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                             \\\n-                             GARROW_TYPE_UINT32_DATA_TYPE,      \\\n-                             GArrowUInt32DataTypeClass))\n-\n-typedef struct _GArrowUInt32DataType         GArrowUInt32DataType;\n-typedef struct _GArrowUInt32DataTypeClass    GArrowUInt32DataTypeClass;\n-\n-/**\n- * GArrowUInt32DataType:\n- *\n- * It wraps `arrow::UInt32Type`.\n- */\n-struct _GArrowUInt32DataType\n-{\n-  /*< private >*/\n-  GArrowDataType parent_instance;\n-};\n-\n+#define GARROW_TYPE_UINT32_DATA_TYPE (garrow_uint32_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowUInt32DataType,\n+                         garrow_uint32_data_type,\n+                         GARROW,\n+                         UINT32_DATA_TYPE,\n+                         GArrowIntegerDataType)\n struct _GArrowUInt32DataTypeClass\n {\n-  GArrowDataTypeClass parent_class;\n+  GArrowIntegerDataTypeClass parent_class;\n };\n \n-GType                 garrow_uint32_data_type_get_type (void) G_GNUC_CONST;\n GArrowUInt32DataType *garrow_uint32_data_type_new      (void);\n \n \n-#define GARROW_TYPE_INT64_DATA_TYPE            \\\n-  (garrow_int64_data_type_get_type())\n-#define GARROW_INT64_DATA_TYPE(obj)                             \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                            \\\n-                              GARROW_TYPE_INT64_DATA_TYPE,      \\\n-                              GArrowInt64DataType))\n-#define GARROW_INT64_DATA_TYPE_CLASS(klass)             \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),                     \\\n-                           GARROW_TYPE_INT64_DATA_TYPE, \\\n-                           GArrowInt64DataTypeClass))\n-#define GARROW_IS_INT64_DATA_TYPE(obj)                          \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                            \\\n-                              GARROW_TYPE_INT64_DATA_TYPE))\n-#define GARROW_IS_INT64_DATA_TYPE_CLASS(klass)                  \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),                             \\\n-                           GARROW_TYPE_INT64_DATA_TYPE))\n-#define GARROW_INT64_DATA_TYPE_GET_CLASS(obj)                   \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                             \\\n-                             GARROW_TYPE_INT64_DATA_TYPE,       \\\n-                             GArrowInt64DataTypeClass))\n-\n-typedef struct _GArrowInt64DataType         GArrowInt64DataType;\n-typedef struct _GArrowInt64DataTypeClass    GArrowInt64DataTypeClass;\n-\n-/**\n- * GArrowInt64DataType:\n- *\n- * It wraps `arrow::Int64Type`.\n- */\n-struct _GArrowInt64DataType\n-{\n-  /*< private >*/\n-  GArrowDataType parent_instance;\n-};\n-\n+#define GARROW_TYPE_INT64_DATA_TYPE (garrow_int64_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowInt64DataType,\n+                         garrow_int64_data_type,\n+                         GARROW,\n+                         INT64_DATA_TYPE,\n+                         GArrowIntegerDataType)\n struct _GArrowInt64DataTypeClass\n {\n-  GArrowDataTypeClass parent_class;\n+  GArrowIntegerDataTypeClass parent_class;\n };\n \n-GType                 garrow_int64_data_type_get_type (void) G_GNUC_CONST;\n GArrowInt64DataType  *garrow_int64_data_type_new      (void);\n \n \n-#define GARROW_TYPE_UINT64_DATA_TYPE            \\\n-  (garrow_uint64_data_type_get_type())\n-#define GARROW_UINT64_DATA_TYPE(obj)                            \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                            \\\n-                              GARROW_TYPE_UINT64_DATA_TYPE,     \\\n-                              GArrowUInt64DataType))\n-#define GARROW_UINT64_DATA_TYPE_CLASS(klass)                    \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),                             \\\n-                           GARROW_TYPE_UINT64_DATA_TYPE,        \\\n-                           GArrowUInt64DataTypeClass))\n-#define GARROW_IS_UINT64_DATA_TYPE(obj)                         \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                            \\\n-                              GARROW_TYPE_UINT64_DATA_TYPE))\n-#define GARROW_IS_UINT64_DATA_TYPE_CLASS(klass)                 \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),                             \\\n-                           GARROW_TYPE_UINT64_DATA_TYPE))\n-#define GARROW_UINT64_DATA_TYPE_GET_CLASS(obj)                  \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                             \\\n-                             GARROW_TYPE_UINT64_DATA_TYPE,      \\\n-                             GArrowUInt64DataTypeClass))\n-\n-typedef struct _GArrowUInt64DataType         GArrowUInt64DataType;\n-typedef struct _GArrowUInt64DataTypeClass    GArrowUInt64DataTypeClass;\n-\n-/**\n- * GArrowUInt64DataType:\n- *\n- * It wraps `arrow::UInt64Type`.\n- */\n-struct _GArrowUInt64DataType\n-{\n-  /*< private >*/\n-  GArrowDataType parent_instance;\n-};\n-\n+#define GARROW_TYPE_UINT64_DATA_TYPE (garrow_uint64_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowUInt64DataType,\n+                         garrow_uint64_data_type,\n+                         GARROW,\n+                         UINT64_DATA_TYPE,\n+                         GArrowIntegerDataType)\n struct _GArrowUInt64DataTypeClass\n {\n-  GArrowDataTypeClass parent_class;\n+  GArrowIntegerDataTypeClass parent_class;\n };\n \n-GType                 garrow_uint64_data_type_get_type (void) G_GNUC_CONST;\n GArrowUInt64DataType *garrow_uint64_data_type_new      (void);\n \n \n-#define GARROW_TYPE_FLOAT_DATA_TYPE           \\\n-  (garrow_float_data_type_get_type())\n-#define GARROW_FLOAT_DATA_TYPE(obj)                           \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                          \\\n-                              GARROW_TYPE_FLOAT_DATA_TYPE,    \\\n-                              GArrowFloatDataType))\n-#define GARROW_FLOAT_DATA_TYPE_CLASS(klass)                   \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),                           \\\n-                           GARROW_TYPE_FLOAT_DATA_TYPE,       \\\n-                           GArrowFloatDataTypeClass))\n-#define GARROW_IS_FLOAT_DATA_TYPE(obj)                        \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                          \\\n-                              GARROW_TYPE_FLOAT_DATA_TYPE))\n-#define GARROW_IS_FLOAT_DATA_TYPE_CLASS(klass)                \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),                           \\\n-                           GARROW_TYPE_FLOAT_DATA_TYPE))\n-#define GARROW_FLOAT_DATA_TYPE_GET_CLASS(obj)                 \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                           \\\n-                             GARROW_TYPE_FLOAT_DATA_TYPE,     \\\n-                             GArrowFloatDataTypeClass))\n-\n-typedef struct _GArrowFloatDataType         GArrowFloatDataType;\n-typedef struct _GArrowFloatDataTypeClass    GArrowFloatDataTypeClass;\n-\n-/**\n- * GArrowFloatDataType:\n- *\n- * It wraps `arrow::FloatType`.\n- */\n-struct _GArrowFloatDataType\n+#define GARROW_TYPE_FLOATING_POINT_DATA_TYPE    \\\n+  (garrow_floating_point_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowFloatingPointDataType,\n+                         garrow_floating_point_data_type,\n+                         GARROW,\n+                         FLOATING_POINT_DATA_TYPE,\n+                         GArrowNumericDataType)\n+struct _GArrowFloatingPointDataTypeClass\n {\n-  /*< private >*/\n-  GArrowDataType parent_instance;\n+  GArrowNumericDataTypeClass parent_class;\n };\n \n+\n+#define GARROW_TYPE_FLOAT_DATA_TYPE (garrow_float_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowFloatDataType,\n+                         garrow_float_data_type,\n+                         GARROW,\n+                         FLOAT_DATA_TYPE,\n+                         GArrowFloatingPointDataType)\n struct _GArrowFloatDataTypeClass\n {\n-  GArrowDataTypeClass parent_class;\n+  GArrowFloatingPointDataTypeClass parent_class;\n };\n \n-GType                garrow_float_data_type_get_type (void) G_GNUC_CONST;\n GArrowFloatDataType *garrow_float_data_type_new      (void);\n \n \n-#define GARROW_TYPE_DOUBLE_DATA_TYPE           \\\n-  (garrow_double_data_type_get_type())\n-#define GARROW_DOUBLE_DATA_TYPE(obj)                            \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                            \\\n-                              GARROW_TYPE_DOUBLE_DATA_TYPE,     \\\n-                              GArrowDoubleDataType))\n-#define GARROW_DOUBLE_DATA_TYPE_CLASS(klass)                    \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),                             \\\n-                           GARROW_TYPE_DOUBLE_DATA_TYPE,        \\\n-                           GArrowDoubleDataTypeClass))\n-#define GARROW_IS_DOUBLE_DATA_TYPE(obj)                         \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                            \\\n-                              GARROW_TYPE_DOUBLE_DATA_TYPE))\n-#define GARROW_IS_DOUBLE_DATA_TYPE_CLASS(klass)                 \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),                             \\\n-                           GARROW_TYPE_DOUBLE_DATA_TYPE))\n-#define GARROW_DOUBLE_DATA_TYPE_GET_CLASS(obj)                  \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                             \\\n-                             GARROW_TYPE_DOUBLE_DATA_TYPE,      \\\n-                             GArrowDoubleDataTypeClass))\n-\n-typedef struct _GArrowDoubleDataType         GArrowDoubleDataType;\n-typedef struct _GArrowDoubleDataTypeClass    GArrowDoubleDataTypeClass;\n-\n-/**\n- * GArrowDoubleDataType:\n- *\n- * It wraps `arrow::DoubleType`.\n- */\n-struct _GArrowDoubleDataType\n-{\n-  /*< private >*/\n-  GArrowDataType parent_instance;\n-};\n-\n+#define GARROW_TYPE_DOUBLE_DATA_TYPE (garrow_double_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowDoubleDataType,\n+                         garrow_double_data_type,\n+                         GARROW,\n+                         DOUBLE_DATA_TYPE,\n+                         GArrowFloatingPointDataType)\n struct _GArrowDoubleDataTypeClass\n {\n-  GArrowDataTypeClass parent_class;\n+  GArrowFloatingPointDataTypeClass parent_class;\n };\n \n-GType                 garrow_double_data_type_get_type (void) G_GNUC_CONST;\n GArrowDoubleDataType *garrow_double_data_type_new      (void);\n \n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-09T04:22:08.152+0000",
                    "updated": "2018-03-09T04:22:08.152+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3r20v:",
        "customfield_12314139": null
    }
}