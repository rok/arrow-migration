{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13400809",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809",
    "key": "ARROW-13984",
    "fields": {
        "parent": {
            "id": "13286806",
            "key": "ARROW-7905",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13286806",
            "fields": {
                "summary": "[Go][Parquet] Port the C++ Parquet implementation to Go",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                    "name": "Minor",
                    "id": "4"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12622933",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12622933",
                "type": {
                    "id": "10020",
                    "name": "Cloners",
                    "inward": "is cloned by",
                    "outward": "is a clone of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10020"
                },
                "inwardIssue": {
                    "id": "13400825",
                    "key": "ARROW-13986",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400825",
                    "fields": {
                        "summary": "[Go][Parquet] Add File Package - writers",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12337837",
                "id": "12337837",
                "name": "Parquet"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 59400,
            "total": 59400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 59400,
            "total": 59400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13984/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 99,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/650169",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade opened a new pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146\n\n\n   This implements the file/column and page readers for Parquet files. In order to keep this smaller, I've only included what was necessary for the readers and will make a separate PR for the file and column writers after this. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T18:01:52.206+0000",
                    "updated": "2021-09-13T18:01:52.206+0000",
                    "started": "2021-09-13T18:01:52.205+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650169",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/650170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#issuecomment-918439969\n\n\n   https://issues.apache.org/jira/browse/ARROW-13984\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T18:02:06.044+0000",
                    "updated": "2021-09-13T18:02:06.044+0000",
                    "started": "2021-09-13T18:02:06.043+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650170",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/650171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#issuecomment-918439976\n\n\n   For visibility: @emkornfield @nickpoorman @fsaintjacques @sbinet \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T18:02:09.362+0000",
                    "updated": "2021-09-13T18:02:09.362+0000",
                    "started": "2021-09-13T18:02:09.362+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650171",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/650176",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#issuecomment-918448664\n\n\n   Looking into the MacOS failure\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T18:11:14.257+0000",
                    "updated": "2021-09-13T18:11:14.257+0000",
                    "started": "2021-09-13T18:11:14.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650176",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/650192",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#issuecomment-918475554\n\n\n   issue was in the `extractBitsGo` function in the `bmi` package, looks like the MacOS tests are the only ones being run on a machine that isn't supporting BMI2 and thus uses the noasm implementation which caught the issue. All fixed now and ready for review.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T18:44:53.105+0000",
                    "updated": "2021-09-13T18:44:53.105+0000",
                    "started": "2021-09-13T18:44:53.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650192",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/658479",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#issuecomment-931482017\n\n\n   @emkornfield any chance for a review or someone else I could tag to ask for a review here?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T16:33:50.081+0000",
                    "updated": "2021-09-30T16:33:50.081+0000",
                    "started": "2021-09-30T16:33:50.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658479",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/658483",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#issuecomment-931486204\n\n\n   Sorry, will try to get to it over the weekend of next week.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T16:40:06.004+0000",
                    "updated": "2021-09-30T16:40:06.004+0000",
                    "started": "2021-09-30T16:40:06.003+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658483",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/662489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#discussion_r724682708\n\n\n\n##########\nFile path: go/parquet/file/column_reader.go\n##########\n@@ -0,0 +1,542 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package file\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encryption\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+const (\n+\t// 4 MB is the default maximum page header size\n+\tdefaultMaxPageHeaderSize = 4 * 1024 * 1024\n+\t// 16 KB is the default expected page header size\n+\tdefaultPageHeaderSize = 16 * 1024\n+)\n+\n+//go:generate go run ../../arrow/_tools/tmpl/main.go -i -data=../internal/encoding/physical_types.tmpldata column_reader_types.gen.go.tmpl\n+\n+func isDictIndexEncoding(e format.Encoding) bool {\n\nReview comment:\n       why the index name?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T03:54:26.880+0000",
                    "updated": "2021-10-08T03:54:26.880+0000",
                    "started": "2021-10-08T03:54:26.879+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662489",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/662490",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#discussion_r724682708\n\n\n\n##########\nFile path: go/parquet/file/column_reader.go\n##########\n@@ -0,0 +1,542 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package file\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encryption\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+const (\n+\t// 4 MB is the default maximum page header size\n+\tdefaultMaxPageHeaderSize = 4 * 1024 * 1024\n+\t// 16 KB is the default expected page header size\n+\tdefaultPageHeaderSize = 16 * 1024\n+)\n+\n+//go:generate go run ../../arrow/_tools/tmpl/main.go -i -data=../internal/encoding/physical_types.tmpldata column_reader_types.gen.go.tmpl\n+\n+func isDictIndexEncoding(e format.Encoding) bool {\n\nReview comment:\n       why the index in the method name?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T03:55:31.681+0000",
                    "updated": "2021-10-08T03:55:31.681+0000",
                    "started": "2021-10-08T03:55:31.681+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662490",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/662492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#discussion_r724683731\n\n\n\n##########\nFile path: go/parquet/file/column_reader.go\n##########\n@@ -0,0 +1,542 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package file\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encryption\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+const (\n+\t// 4 MB is the default maximum page header size\n+\tdefaultMaxPageHeaderSize = 4 * 1024 * 1024\n+\t// 16 KB is the default expected page header size\n+\tdefaultPageHeaderSize = 16 * 1024\n+)\n+\n+//go:generate go run ../../arrow/_tools/tmpl/main.go -i -data=../internal/encoding/physical_types.tmpldata column_reader_types.gen.go.tmpl\n+\n+func isDictIndexEncoding(e format.Encoding) bool {\n+\treturn e == format.Encoding_RLE_DICTIONARY || e == format.Encoding_PLAIN_DICTIONARY\n+}\n+\n+func colHasSpacedValues(c *schema.Column) bool {\n+\tif c.MaxRepetitionLevel() > 0 {\n+\t\t// repeated + flat case\n\nReview comment:\n       I think this comment is copy pasted but it isn't particularly clear, could you expand it.  Also maybe mention why Repeated is not a valid option here?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T03:58:02.566+0000",
                    "updated": "2021-10-08T03:58:02.566+0000",
                    "started": "2021-10-08T03:58:02.565+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662492",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/662493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#discussion_r724684285\n\n\n\n##########\nFile path: go/parquet/file/column_reader.go\n##########\n@@ -0,0 +1,542 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package file\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encryption\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+const (\n+\t// 4 MB is the default maximum page header size\n+\tdefaultMaxPageHeaderSize = 4 * 1024 * 1024\n+\t// 16 KB is the default expected page header size\n+\tdefaultPageHeaderSize = 16 * 1024\n+)\n+\n+//go:generate go run ../../arrow/_tools/tmpl/main.go -i -data=../internal/encoding/physical_types.tmpldata column_reader_types.gen.go.tmpl\n+\n+func isDictIndexEncoding(e format.Encoding) bool {\n+\treturn e == format.Encoding_RLE_DICTIONARY || e == format.Encoding_PLAIN_DICTIONARY\n+}\n+\n+func colHasSpacedValues(c *schema.Column) bool {\n\nReview comment:\n       this logic is possibly out of date.\r\n   \r\n   A column has spaced values if it or any non-repeated columns above it are not required (up until the first repeated column).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T04:00:23.053+0000",
                    "updated": "2021-10-08T04:00:23.053+0000",
                    "started": "2021-10-08T04:00:23.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662493",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/662494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#discussion_r724685540\n\n\n\n##########\nFile path: go/parquet/file/column_reader.go\n##########\n@@ -0,0 +1,542 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package file\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encryption\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+const (\n+\t// 4 MB is the default maximum page header size\n+\tdefaultMaxPageHeaderSize = 4 * 1024 * 1024\n+\t// 16 KB is the default expected page header size\n+\tdefaultPageHeaderSize = 16 * 1024\n+)\n+\n+//go:generate go run ../../arrow/_tools/tmpl/main.go -i -data=../internal/encoding/physical_types.tmpldata column_reader_types.gen.go.tmpl\n+\n+func isDictIndexEncoding(e format.Encoding) bool {\n+\treturn e == format.Encoding_RLE_DICTIONARY || e == format.Encoding_PLAIN_DICTIONARY\n+}\n+\n+func colHasSpacedValues(c *schema.Column) bool {\n+\tif c.MaxRepetitionLevel() > 0 {\n+\t\t// repeated + flat case\n+\t\treturn c.SchemaNode().RepetitionType() != parquet.Repetitions.Required\n+\t}\n+\n+\t// non-repeated+nested case\n+\t// find if a node forces nulls in the lowest level along the hierarchy\n+\tn := c.SchemaNode()\n+\tfor n != nil {\n+\t\tif n.RepetitionType() == parquet.Repetitions.Optional {\n+\t\t\treturn true\n+\t\t}\n+\t\tn = n.Parent()\n+\t}\n+\treturn false\n+}\n+\n+// CryptoContext is a context for keeping track of the current methods for decrypting.\n+// It keeps track of the row group and column numbers along with references to the\n+// decryptor objects.\n+type CryptoContext struct {\n+\tStartDecryptWithDictionaryPage bool\n+\tRowGroupOrdinal                int16\n+\tColumnOrdinal                  int16\n+\tMetaDecryptor                  encryption.Decryptor\n+\tDataDecryptor                  encryption.Decryptor\n+}\n+\n+// ColumnReader is the basic interface for all column readers.\n+//\n+// To actually Read out the column data, you need to convert to the properly\n+// typed ColumnReader type such as *BooleanColumnReader etc.\n+type ColumnReader interface {\n+\t// HasNext returns whether there is more data to be read in this column\n+\t// and row group.\n+\tHasNext() bool\n+\t// Type returns the underlying physical type of the column\n+\tType() parquet.Type\n+\t// Descriptor returns the column schema container\n+\tDescriptor() *schema.Column\n+\t// if HasNext returns false because of an error, this will return the error\n+\t// it encountered. Otherwise this will be nil if it's just the end of the\n+\t// column\n+\tErr() error\n+\t// Skip buffered values\n\nReview comment:\n       I think we have done  not great job in C++ of making it clear the difference rows and values clear.  I don't know if if  method rename is necessary (maybe something like consumeBufferedStoredValues, consumeBufferedPresentValues) or if there is another way to make this distinction. But something to consider. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T04:04:50.382+0000",
                    "updated": "2021-10-08T04:04:50.382+0000",
                    "started": "2021-10-08T04:04:50.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662494",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/662496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#discussion_r724686137\n\n\n\n##########\nFile path: go/parquet/file/column_reader.go\n##########\n@@ -0,0 +1,542 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package file\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encryption\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+const (\n+\t// 4 MB is the default maximum page header size\n+\tdefaultMaxPageHeaderSize = 4 * 1024 * 1024\n+\t// 16 KB is the default expected page header size\n+\tdefaultPageHeaderSize = 16 * 1024\n+)\n+\n+//go:generate go run ../../arrow/_tools/tmpl/main.go -i -data=../internal/encoding/physical_types.tmpldata column_reader_types.gen.go.tmpl\n+\n+func isDictIndexEncoding(e format.Encoding) bool {\n+\treturn e == format.Encoding_RLE_DICTIONARY || e == format.Encoding_PLAIN_DICTIONARY\n+}\n+\n+func colHasSpacedValues(c *schema.Column) bool {\n+\tif c.MaxRepetitionLevel() > 0 {\n+\t\t// repeated + flat case\n+\t\treturn c.SchemaNode().RepetitionType() != parquet.Repetitions.Required\n+\t}\n+\n+\t// non-repeated+nested case\n+\t// find if a node forces nulls in the lowest level along the hierarchy\n+\tn := c.SchemaNode()\n+\tfor n != nil {\n+\t\tif n.RepetitionType() == parquet.Repetitions.Optional {\n+\t\t\treturn true\n+\t\t}\n+\t\tn = n.Parent()\n+\t}\n+\treturn false\n+}\n+\n+// CryptoContext is a context for keeping track of the current methods for decrypting.\n+// It keeps track of the row group and column numbers along with references to the\n+// decryptor objects.\n+type CryptoContext struct {\n+\tStartDecryptWithDictionaryPage bool\n+\tRowGroupOrdinal                int16\n+\tColumnOrdinal                  int16\n+\tMetaDecryptor                  encryption.Decryptor\n+\tDataDecryptor                  encryption.Decryptor\n+}\n+\n+// ColumnReader is the basic interface for all column readers.\n+//\n+// To actually Read out the column data, you need to convert to the properly\n+// typed ColumnReader type such as *BooleanColumnReader etc.\n+type ColumnReader interface {\n+\t// HasNext returns whether there is more data to be read in this column\n+\t// and row group.\n+\tHasNext() bool\n+\t// Type returns the underlying physical type of the column\n+\tType() parquet.Type\n+\t// Descriptor returns the column schema container\n+\tDescriptor() *schema.Column\n+\t// if HasNext returns false because of an error, this will return the error\n+\t// it encountered. Otherwise this will be nil if it's just the end of the\n+\t// column\n+\tErr() error\n+\t// Skip buffered values\n+\tconsumeBufferedValues(int64)\n+\t// number of available values left\n+\tnumAvail() int64\n\nReview comment:\n       please add \"values\" to this method name.  An maybe expand the doc, to better illustrate what numAvail contains (is this buffered or not?)  maybe an example of expect usage to show how to consume everything?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T04:07:16.676+0000",
                    "updated": "2021-10-08T04:07:16.676+0000",
                    "started": "2021-10-08T04:07:16.675+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662496",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/662497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#discussion_r724686343\n\n\n\n##########\nFile path: go/parquet/file/column_reader.go\n##########\n@@ -0,0 +1,542 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package file\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encryption\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+const (\n+\t// 4 MB is the default maximum page header size\n+\tdefaultMaxPageHeaderSize = 4 * 1024 * 1024\n+\t// 16 KB is the default expected page header size\n+\tdefaultPageHeaderSize = 16 * 1024\n+)\n+\n+//go:generate go run ../../arrow/_tools/tmpl/main.go -i -data=../internal/encoding/physical_types.tmpldata column_reader_types.gen.go.tmpl\n+\n+func isDictIndexEncoding(e format.Encoding) bool {\n+\treturn e == format.Encoding_RLE_DICTIONARY || e == format.Encoding_PLAIN_DICTIONARY\n+}\n+\n+func colHasSpacedValues(c *schema.Column) bool {\n+\tif c.MaxRepetitionLevel() > 0 {\n+\t\t// repeated + flat case\n+\t\treturn c.SchemaNode().RepetitionType() != parquet.Repetitions.Required\n+\t}\n+\n+\t// non-repeated+nested case\n+\t// find if a node forces nulls in the lowest level along the hierarchy\n+\tn := c.SchemaNode()\n+\tfor n != nil {\n+\t\tif n.RepetitionType() == parquet.Repetitions.Optional {\n+\t\t\treturn true\n+\t\t}\n+\t\tn = n.Parent()\n+\t}\n+\treturn false\n+}\n+\n+// CryptoContext is a context for keeping track of the current methods for decrypting.\n+// It keeps track of the row group and column numbers along with references to the\n+// decryptor objects.\n+type CryptoContext struct {\n+\tStartDecryptWithDictionaryPage bool\n+\tRowGroupOrdinal                int16\n+\tColumnOrdinal                  int16\n+\tMetaDecryptor                  encryption.Decryptor\n+\tDataDecryptor                  encryption.Decryptor\n+}\n+\n+// ColumnReader is the basic interface for all column readers.\n+//\n+// To actually Read out the column data, you need to convert to the properly\n+// typed ColumnReader type such as *BooleanColumnReader etc.\n+type ColumnReader interface {\n+\t// HasNext returns whether there is more data to be read in this column\n+\t// and row group.\n+\tHasNext() bool\n+\t// Type returns the underlying physical type of the column\n+\tType() parquet.Type\n+\t// Descriptor returns the column schema container\n+\tDescriptor() *schema.Column\n+\t// if HasNext returns false because of an error, this will return the error\n+\t// it encountered. Otherwise this will be nil if it's just the end of the\n+\t// column\n+\tErr() error\n+\t// Skip buffered values\n+\tconsumeBufferedValues(int64)\n+\t// number of available values left\n+\tnumAvail() int64\n+\t// read the definition levels and return the number of definitions,\n+\t// and the number of values to be read (number of def levels == maxdef level)\n\nReview comment:\n       the definition of values here would be good to clarify at the interface level and distinguish it from total number of elements in the column and total number of rows.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T04:07:59.986+0000",
                    "updated": "2021-10-08T04:07:59.986+0000",
                    "started": "2021-10-08T04:07:59.986+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662497",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/662498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#discussion_r724686466\n\n\n\n##########\nFile path: go/parquet/file/column_reader.go\n##########\n@@ -0,0 +1,542 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package file\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encryption\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+const (\n+\t// 4 MB is the default maximum page header size\n+\tdefaultMaxPageHeaderSize = 4 * 1024 * 1024\n+\t// 16 KB is the default expected page header size\n+\tdefaultPageHeaderSize = 16 * 1024\n+)\n+\n+//go:generate go run ../../arrow/_tools/tmpl/main.go -i -data=../internal/encoding/physical_types.tmpldata column_reader_types.gen.go.tmpl\n+\n+func isDictIndexEncoding(e format.Encoding) bool {\n+\treturn e == format.Encoding_RLE_DICTIONARY || e == format.Encoding_PLAIN_DICTIONARY\n+}\n+\n+func colHasSpacedValues(c *schema.Column) bool {\n+\tif c.MaxRepetitionLevel() > 0 {\n+\t\t// repeated + flat case\n+\t\treturn c.SchemaNode().RepetitionType() != parquet.Repetitions.Required\n+\t}\n+\n+\t// non-repeated+nested case\n+\t// find if a node forces nulls in the lowest level along the hierarchy\n+\tn := c.SchemaNode()\n+\tfor n != nil {\n+\t\tif n.RepetitionType() == parquet.Repetitions.Optional {\n+\t\t\treturn true\n+\t\t}\n+\t\tn = n.Parent()\n+\t}\n+\treturn false\n+}\n+\n+// CryptoContext is a context for keeping track of the current methods for decrypting.\n+// It keeps track of the row group and column numbers along with references to the\n+// decryptor objects.\n+type CryptoContext struct {\n+\tStartDecryptWithDictionaryPage bool\n+\tRowGroupOrdinal                int16\n+\tColumnOrdinal                  int16\n+\tMetaDecryptor                  encryption.Decryptor\n+\tDataDecryptor                  encryption.Decryptor\n+}\n+\n+// ColumnReader is the basic interface for all column readers.\n+//\n+// To actually Read out the column data, you need to convert to the properly\n+// typed ColumnReader type such as *BooleanColumnReader etc.\n+type ColumnReader interface {\n+\t// HasNext returns whether there is more data to be read in this column\n+\t// and row group.\n+\tHasNext() bool\n+\t// Type returns the underlying physical type of the column\n+\tType() parquet.Type\n+\t// Descriptor returns the column schema container\n+\tDescriptor() *schema.Column\n+\t// if HasNext returns false because of an error, this will return the error\n+\t// it encountered. Otherwise this will be nil if it's just the end of the\n+\t// column\n+\tErr() error\n+\t// Skip buffered values\n+\tconsumeBufferedValues(int64)\n+\t// number of available values left\n+\tnumAvail() int64\n+\t// read the definition levels and return the number of definitions,\n+\t// and the number of values to be read (number of def levels == maxdef level)\n+\t// it also populates the passed in slice which should be sized appropriately.\n+\treadDefinitionLevels(levels []int16) (int, int64)\n+\t// read the repetition levels and return the number of repetition levels read\n+\t// also populates the passed in slice, which should be sized appropriately.\n+\treadRepetitionLevels(levels []int16) int\n\nReview comment:\n       will this throw if max repetition level is 0?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T04:08:33.536+0000",
                    "updated": "2021-10-08T04:08:33.536+0000",
                    "started": "2021-10-08T04:08:33.536+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662498",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/662499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#discussion_r724686944\n\n\n\n##########\nFile path: go/parquet/file/column_reader.go\n##########\n@@ -0,0 +1,542 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package file\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encryption\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+const (\n+\t// 4 MB is the default maximum page header size\n+\tdefaultMaxPageHeaderSize = 4 * 1024 * 1024\n+\t// 16 KB is the default expected page header size\n+\tdefaultPageHeaderSize = 16 * 1024\n+)\n+\n+//go:generate go run ../../arrow/_tools/tmpl/main.go -i -data=../internal/encoding/physical_types.tmpldata column_reader_types.gen.go.tmpl\n+\n+func isDictIndexEncoding(e format.Encoding) bool {\n+\treturn e == format.Encoding_RLE_DICTIONARY || e == format.Encoding_PLAIN_DICTIONARY\n+}\n+\n+func colHasSpacedValues(c *schema.Column) bool {\n+\tif c.MaxRepetitionLevel() > 0 {\n+\t\t// repeated + flat case\n+\t\treturn c.SchemaNode().RepetitionType() != parquet.Repetitions.Required\n+\t}\n+\n+\t// non-repeated+nested case\n+\t// find if a node forces nulls in the lowest level along the hierarchy\n+\tn := c.SchemaNode()\n+\tfor n != nil {\n+\t\tif n.RepetitionType() == parquet.Repetitions.Optional {\n+\t\t\treturn true\n+\t\t}\n+\t\tn = n.Parent()\n+\t}\n+\treturn false\n+}\n+\n+// CryptoContext is a context for keeping track of the current methods for decrypting.\n+// It keeps track of the row group and column numbers along with references to the\n+// decryptor objects.\n+type CryptoContext struct {\n+\tStartDecryptWithDictionaryPage bool\n+\tRowGroupOrdinal                int16\n+\tColumnOrdinal                  int16\n+\tMetaDecryptor                  encryption.Decryptor\n+\tDataDecryptor                  encryption.Decryptor\n+}\n+\n+// ColumnReader is the basic interface for all column readers.\n+//\n+// To actually Read out the column data, you need to convert to the properly\n+// typed ColumnReader type such as *BooleanColumnReader etc.\n+type ColumnReader interface {\n+\t// HasNext returns whether there is more data to be read in this column\n+\t// and row group.\n+\tHasNext() bool\n+\t// Type returns the underlying physical type of the column\n+\tType() parquet.Type\n+\t// Descriptor returns the column schema container\n+\tDescriptor() *schema.Column\n+\t// if HasNext returns false because of an error, this will return the error\n+\t// it encountered. Otherwise this will be nil if it's just the end of the\n+\t// column\n+\tErr() error\n+\t// Skip buffered values\n+\tconsumeBufferedValues(int64)\n+\t// number of available values left\n+\tnumAvail() int64\n+\t// read the definition levels and return the number of definitions,\n+\t// and the number of values to be read (number of def levels == maxdef level)\n+\t// it also populates the passed in slice which should be sized appropriately.\n+\treadDefinitionLevels(levels []int16) (int, int64)\n+\t// read the repetition levels and return the number of repetition levels read\n+\t// also populates the passed in slice, which should be sized appropriately.\n+\treadRepetitionLevels(levels []int16) int\n+\t// get the current page reader\n\nReview comment:\n       it probably pays to provide more explanation here how pages relate to columns and when it might be reset?  Also does resetting the page reader reset hasNext, etc?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T04:10:08.327+0000",
                    "updated": "2021-10-08T04:10:08.327+0000",
                    "started": "2021-10-08T04:10:08.327+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662499",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/662501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#discussion_r724687258\n\n\n\n##########\nFile path: go/parquet/file/column_reader.go\n##########\n@@ -0,0 +1,542 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package file\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encryption\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+const (\n+\t// 4 MB is the default maximum page header size\n+\tdefaultMaxPageHeaderSize = 4 * 1024 * 1024\n+\t// 16 KB is the default expected page header size\n+\tdefaultPageHeaderSize = 16 * 1024\n+)\n+\n+//go:generate go run ../../arrow/_tools/tmpl/main.go -i -data=../internal/encoding/physical_types.tmpldata column_reader_types.gen.go.tmpl\n+\n+func isDictIndexEncoding(e format.Encoding) bool {\n+\treturn e == format.Encoding_RLE_DICTIONARY || e == format.Encoding_PLAIN_DICTIONARY\n+}\n+\n+func colHasSpacedValues(c *schema.Column) bool {\n+\tif c.MaxRepetitionLevel() > 0 {\n+\t\t// repeated + flat case\n+\t\treturn c.SchemaNode().RepetitionType() != parquet.Repetitions.Required\n+\t}\n+\n+\t// non-repeated+nested case\n+\t// find if a node forces nulls in the lowest level along the hierarchy\n+\tn := c.SchemaNode()\n+\tfor n != nil {\n+\t\tif n.RepetitionType() == parquet.Repetitions.Optional {\n+\t\t\treturn true\n+\t\t}\n+\t\tn = n.Parent()\n+\t}\n+\treturn false\n+}\n+\n+// CryptoContext is a context for keeping track of the current methods for decrypting.\n+// It keeps track of the row group and column numbers along with references to the\n+// decryptor objects.\n+type CryptoContext struct {\n+\tStartDecryptWithDictionaryPage bool\n+\tRowGroupOrdinal                int16\n+\tColumnOrdinal                  int16\n+\tMetaDecryptor                  encryption.Decryptor\n+\tDataDecryptor                  encryption.Decryptor\n+}\n+\n+// ColumnReader is the basic interface for all column readers.\n+//\n+// To actually Read out the column data, you need to convert to the properly\n+// typed ColumnReader type such as *BooleanColumnReader etc.\n+type ColumnReader interface {\n\nReview comment:\n       Does one ColumnReader only apply to one row group?  If so ColumnChunkReader might be a better name.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T04:11:25.625+0000",
                    "updated": "2021-10-08T04:11:25.625+0000",
                    "started": "2021-10-08T04:11:25.624+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662501",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/662504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#discussion_r724687610\n\n\n\n##########\nFile path: go/parquet/file/column_reader.go\n##########\n@@ -0,0 +1,542 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package file\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encryption\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+const (\n+\t// 4 MB is the default maximum page header size\n+\tdefaultMaxPageHeaderSize = 4 * 1024 * 1024\n+\t// 16 KB is the default expected page header size\n+\tdefaultPageHeaderSize = 16 * 1024\n+)\n+\n+//go:generate go run ../../arrow/_tools/tmpl/main.go -i -data=../internal/encoding/physical_types.tmpldata column_reader_types.gen.go.tmpl\n+\n+func isDictIndexEncoding(e format.Encoding) bool {\n+\treturn e == format.Encoding_RLE_DICTIONARY || e == format.Encoding_PLAIN_DICTIONARY\n+}\n+\n+func colHasSpacedValues(c *schema.Column) bool {\n+\tif c.MaxRepetitionLevel() > 0 {\n+\t\t// repeated + flat case\n+\t\treturn c.SchemaNode().RepetitionType() != parquet.Repetitions.Required\n+\t}\n+\n+\t// non-repeated+nested case\n+\t// find if a node forces nulls in the lowest level along the hierarchy\n+\tn := c.SchemaNode()\n+\tfor n != nil {\n+\t\tif n.RepetitionType() == parquet.Repetitions.Optional {\n+\t\t\treturn true\n+\t\t}\n+\t\tn = n.Parent()\n+\t}\n+\treturn false\n+}\n+\n+// CryptoContext is a context for keeping track of the current methods for decrypting.\n+// It keeps track of the row group and column numbers along with references to the\n+// decryptor objects.\n+type CryptoContext struct {\n+\tStartDecryptWithDictionaryPage bool\n+\tRowGroupOrdinal                int16\n+\tColumnOrdinal                  int16\n+\tMetaDecryptor                  encryption.Decryptor\n+\tDataDecryptor                  encryption.Decryptor\n+}\n+\n+// ColumnReader is the basic interface for all column readers.\n+//\n+// To actually Read out the column data, you need to convert to the properly\n+// typed ColumnReader type such as *BooleanColumnReader etc.\n+type ColumnReader interface {\n+\t// HasNext returns whether there is more data to be read in this column\n+\t// and row group.\n+\tHasNext() bool\n+\t// Type returns the underlying physical type of the column\n+\tType() parquet.Type\n+\t// Descriptor returns the column schema container\n+\tDescriptor() *schema.Column\n+\t// if HasNext returns false because of an error, this will return the error\n+\t// it encountered. Otherwise this will be nil if it's just the end of the\n+\t// column\n+\tErr() error\n+\t// Skip buffered values\n+\tconsumeBufferedValues(int64)\n+\t// number of available values left\n+\tnumAvail() int64\n+\t// read the definition levels and return the number of definitions,\n+\t// and the number of values to be read (number of def levels == maxdef level)\n+\t// it also populates the passed in slice which should be sized appropriately.\n+\treadDefinitionLevels(levels []int16) (int, int64)\n+\t// read the repetition levels and return the number of repetition levels read\n+\t// also populates the passed in slice, which should be sized appropriately.\n+\treadRepetitionLevels(levels []int16) int\n+\t// get the current page reader\n+\tpager() PageReader\n+\t// set a page reader into the columnreader so it can be reused.\n+\tsetPageReader(PageReader)\n+}\n+\n+type columnReader struct {\n+\tdescr             *schema.Column\n+\trdr               PageReader\n+\trepetitionDecoder encoding.LevelDecoder\n+\tdefinitionDecoder encoding.LevelDecoder\n+\n+\tcurPage     Page\n+\tcurEncoding format.Encoding\n+\tcurDecoder  encoding.TypedDecoder\n+\n+\t// number of currently buffered values in the current page\n+\tnumBuffered int64\n+\t// the number of values we've decoded so far\n+\tnumDecoded int64\n+\t// will be true if we have read in a new dictionary page\n+\tnewDict bool\n+\tmem     memory.Allocator\n+\n+\tdecoders      map[format.Encoding]encoding.TypedDecoder\n+\tdecoderTraits encoding.DecoderTraits\n+\n+\t// is set when an error is encountered\n+\terr          error\n+\tdefLvlBuffer []int16\n\nReview comment:\n       is one not needed for repLvls?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T04:12:35.566+0000",
                    "updated": "2021-10-08T04:12:35.566+0000",
                    "started": "2021-10-08T04:12:35.566+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662504",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/662505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#discussion_r724687695\n\n\n\n##########\nFile path: go/parquet/file/column_reader.go\n##########\n@@ -0,0 +1,542 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package file\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encryption\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+const (\n+\t// 4 MB is the default maximum page header size\n+\tdefaultMaxPageHeaderSize = 4 * 1024 * 1024\n+\t// 16 KB is the default expected page header size\n+\tdefaultPageHeaderSize = 16 * 1024\n+)\n+\n+//go:generate go run ../../arrow/_tools/tmpl/main.go -i -data=../internal/encoding/physical_types.tmpldata column_reader_types.gen.go.tmpl\n+\n+func isDictIndexEncoding(e format.Encoding) bool {\n+\treturn e == format.Encoding_RLE_DICTIONARY || e == format.Encoding_PLAIN_DICTIONARY\n+}\n+\n+func colHasSpacedValues(c *schema.Column) bool {\n+\tif c.MaxRepetitionLevel() > 0 {\n+\t\t// repeated + flat case\n+\t\treturn c.SchemaNode().RepetitionType() != parquet.Repetitions.Required\n+\t}\n+\n+\t// non-repeated+nested case\n+\t// find if a node forces nulls in the lowest level along the hierarchy\n+\tn := c.SchemaNode()\n+\tfor n != nil {\n+\t\tif n.RepetitionType() == parquet.Repetitions.Optional {\n+\t\t\treturn true\n+\t\t}\n+\t\tn = n.Parent()\n+\t}\n+\treturn false\n+}\n+\n+// CryptoContext is a context for keeping track of the current methods for decrypting.\n+// It keeps track of the row group and column numbers along with references to the\n+// decryptor objects.\n+type CryptoContext struct {\n+\tStartDecryptWithDictionaryPage bool\n+\tRowGroupOrdinal                int16\n+\tColumnOrdinal                  int16\n+\tMetaDecryptor                  encryption.Decryptor\n+\tDataDecryptor                  encryption.Decryptor\n+}\n+\n+// ColumnReader is the basic interface for all column readers.\n+//\n+// To actually Read out the column data, you need to convert to the properly\n+// typed ColumnReader type such as *BooleanColumnReader etc.\n+type ColumnReader interface {\n+\t// HasNext returns whether there is more data to be read in this column\n+\t// and row group.\n+\tHasNext() bool\n+\t// Type returns the underlying physical type of the column\n+\tType() parquet.Type\n+\t// Descriptor returns the column schema container\n+\tDescriptor() *schema.Column\n+\t// if HasNext returns false because of an error, this will return the error\n+\t// it encountered. Otherwise this will be nil if it's just the end of the\n+\t// column\n+\tErr() error\n+\t// Skip buffered values\n+\tconsumeBufferedValues(int64)\n+\t// number of available values left\n+\tnumAvail() int64\n+\t// read the definition levels and return the number of definitions,\n+\t// and the number of values to be read (number of def levels == maxdef level)\n+\t// it also populates the passed in slice which should be sized appropriately.\n+\treadDefinitionLevels(levels []int16) (int, int64)\n+\t// read the repetition levels and return the number of repetition levels read\n+\t// also populates the passed in slice, which should be sized appropriately.\n+\treadRepetitionLevels(levels []int16) int\n+\t// get the current page reader\n+\tpager() PageReader\n+\t// set a page reader into the columnreader so it can be reused.\n+\tsetPageReader(PageReader)\n+}\n+\n+type columnReader struct {\n+\tdescr             *schema.Column\n+\trdr               PageReader\n+\trepetitionDecoder encoding.LevelDecoder\n+\tdefinitionDecoder encoding.LevelDecoder\n+\n+\tcurPage     Page\n+\tcurEncoding format.Encoding\n+\tcurDecoder  encoding.TypedDecoder\n+\n+\t// number of currently buffered values in the current page\n+\tnumBuffered int64\n+\t// the number of values we've decoded so far\n+\tnumDecoded int64\n+\t// will be true if we have read in a new dictionary page\n\nReview comment:\n       a new dictionary page indicates a new rowGroup?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T04:12:59.020+0000",
                    "updated": "2021-10-08T04:12:59.020+0000",
                    "started": "2021-10-08T04:12:59.019+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662505",
                    "issueId": "13400809"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/worklog/662506",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #11146:\nURL: https://github.com/apache/arrow/pull/11146#discussion_r724688094\n\n\n\n##########\nFile path: go/parquet/file/column_reader.go\n##########\n@@ -0,0 +1,542 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package file\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encoding\"\n+\t\"github.com/apache/arrow/go/parquet/internal/encryption\"\n+\tformat \"github.com/apache/arrow/go/parquet/internal/gen-go/parquet\"\n+\t\"github.com/apache/arrow/go/parquet/internal/utils\"\n+\t\"github.com/apache/arrow/go/parquet/schema\"\n+\t\"golang.org/x/xerrors\"\n+)\n+\n+const (\n+\t// 4 MB is the default maximum page header size\n+\tdefaultMaxPageHeaderSize = 4 * 1024 * 1024\n+\t// 16 KB is the default expected page header size\n+\tdefaultPageHeaderSize = 16 * 1024\n+)\n+\n+//go:generate go run ../../arrow/_tools/tmpl/main.go -i -data=../internal/encoding/physical_types.tmpldata column_reader_types.gen.go.tmpl\n+\n+func isDictIndexEncoding(e format.Encoding) bool {\n+\treturn e == format.Encoding_RLE_DICTIONARY || e == format.Encoding_PLAIN_DICTIONARY\n+}\n+\n+func colHasSpacedValues(c *schema.Column) bool {\n+\tif c.MaxRepetitionLevel() > 0 {\n+\t\t// repeated + flat case\n+\t\treturn c.SchemaNode().RepetitionType() != parquet.Repetitions.Required\n+\t}\n+\n+\t// non-repeated+nested case\n+\t// find if a node forces nulls in the lowest level along the hierarchy\n+\tn := c.SchemaNode()\n+\tfor n != nil {\n+\t\tif n.RepetitionType() == parquet.Repetitions.Optional {\n+\t\t\treturn true\n+\t\t}\n+\t\tn = n.Parent()\n+\t}\n+\treturn false\n+}\n+\n+// CryptoContext is a context for keeping track of the current methods for decrypting.\n+// It keeps track of the row group and column numbers along with references to the\n+// decryptor objects.\n+type CryptoContext struct {\n+\tStartDecryptWithDictionaryPage bool\n+\tRowGroupOrdinal                int16\n+\tColumnOrdinal                  int16\n+\tMetaDecryptor                  encryption.Decryptor\n+\tDataDecryptor                  encryption.Decryptor\n+}\n+\n+// ColumnReader is the basic interface for all column readers.\n+//\n+// To actually Read out the column data, you need to convert to the properly\n+// typed ColumnReader type such as *BooleanColumnReader etc.\n+type ColumnReader interface {\n+\t// HasNext returns whether there is more data to be read in this column\n+\t// and row group.\n+\tHasNext() bool\n+\t// Type returns the underlying physical type of the column\n+\tType() parquet.Type\n+\t// Descriptor returns the column schema container\n+\tDescriptor() *schema.Column\n+\t// if HasNext returns false because of an error, this will return the error\n+\t// it encountered. Otherwise this will be nil if it's just the end of the\n+\t// column\n+\tErr() error\n+\t// Skip buffered values\n+\tconsumeBufferedValues(int64)\n+\t// number of available values left\n+\tnumAvail() int64\n+\t// read the definition levels and return the number of definitions,\n+\t// and the number of values to be read (number of def levels == maxdef level)\n+\t// it also populates the passed in slice which should be sized appropriately.\n+\treadDefinitionLevels(levels []int16) (int, int64)\n+\t// read the repetition levels and return the number of repetition levels read\n+\t// also populates the passed in slice, which should be sized appropriately.\n+\treadRepetitionLevels(levels []int16) int\n+\t// get the current page reader\n+\tpager() PageReader\n+\t// set a page reader into the columnreader so it can be reused.\n+\tsetPageReader(PageReader)\n+}\n+\n+type columnReader struct {\n+\tdescr             *schema.Column\n+\trdr               PageReader\n+\trepetitionDecoder encoding.LevelDecoder\n+\tdefinitionDecoder encoding.LevelDecoder\n+\n+\tcurPage     Page\n+\tcurEncoding format.Encoding\n+\tcurDecoder  encoding.TypedDecoder\n+\n+\t// number of currently buffered values in the current page\n+\tnumBuffered int64\n+\t// the number of values we've decoded so far\n+\tnumDecoded int64\n+\t// will be true if we have read in a new dictionary page\n+\tnewDict bool\n+\tmem     memory.Allocator\n+\n+\tdecoders      map[format.Encoding]encoding.TypedDecoder\n+\tdecoderTraits encoding.DecoderTraits\n+\n+\t// is set when an error is encountered\n+\terr          error\n+\tdefLvlBuffer []int16\n+}\n+\n+// NewColumnReader returns a column reader for the provided column initialized with the given pagereader that will\n+// provide the pages of data for this column. The type is determined from the column passed in.\n+func NewColumnReader(descr *schema.Column, pageReader PageReader, mem memory.Allocator) ColumnReader {\n+\tbase := columnReader{descr: descr, rdr: pageReader, mem: mem, decoders: make(map[format.Encoding]encoding.TypedDecoder)}\n+\tswitch descr.PhysicalType() {\n+\tcase parquet.Types.FixedLenByteArray:\n+\t\tbase.decoderTraits = &encoding.FixedLenByteArrayDecoderTraits\n+\t\treturn &FixedLenByteArrayColumnReader{base}\n+\tcase parquet.Types.Float:\n+\t\tbase.decoderTraits = &encoding.Float32DecoderTraits\n+\t\treturn &Float32ColumnReader{base}\n+\tcase parquet.Types.Double:\n+\t\tbase.decoderTraits = &encoding.Float64DecoderTraits\n+\t\treturn &Float64ColumnReader{base}\n+\tcase parquet.Types.ByteArray:\n+\t\tbase.decoderTraits = &encoding.ByteArrayDecoderTraits\n+\t\treturn &ByteArrayColumnReader{base}\n+\tcase parquet.Types.Int32:\n+\t\tbase.decoderTraits = &encoding.Int32DecoderTraits\n+\t\treturn &Int32ColumnReader{base}\n+\tcase parquet.Types.Int64:\n+\t\tbase.decoderTraits = &encoding.Int64DecoderTraits\n+\t\treturn &Int64ColumnReader{base}\n+\tcase parquet.Types.Int96:\n+\t\tbase.decoderTraits = &encoding.Int96DecoderTraits\n+\t\treturn &Int96ColumnReader{base}\n+\tcase parquet.Types.Boolean:\n+\t\tbase.decoderTraits = &encoding.BooleanDecoderTraits\n+\t\treturn &BooleanColumnReader{base}\n+\t}\n+\treturn nil\n+}\n+\n+func (c *columnReader) Err() error                    { return c.err }\n+func (c *columnReader) Type() parquet.Type            { return c.descr.PhysicalType() }\n+func (c *columnReader) Descriptor() *schema.Column    { return c.descr }\n+func (c *columnReader) consumeBufferedValues(n int64) { c.numDecoded += n }\n+func (c *columnReader) numAvail() int64               { return c.numBuffered - c.numDecoded }\n+func (c *columnReader) pager() PageReader             { return c.rdr }\n+func (c *columnReader) setPageReader(rdr PageReader) {\n+\tc.rdr = rdr\n+\tc.decoders = make(map[format.Encoding]encoding.TypedDecoder)\n+\tc.err = nil\n\nReview comment:\n       reset newDict?  What about buffered values and numBuffered/numDecoded?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-08T04:14:32.851+0000",
                    "updated": "2021-10-08T04:14:32.851+0000",
                    "started": "2021-10-08T04:14:32.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662506",
                    "issueId": "13400809"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 59400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3167180a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7180a1f0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56592ff[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@711e3c82[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f704be[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@510ae298[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78d1602c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@782ba998[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@464790d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@40dfa4a5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@337c6c92[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@16be740c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 59400,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Oct 23 18:12:49 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-10-23T18:12:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13984/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-09-13T14:46:57.000+0000",
        "updated": "2021-10-24T19:58:30.000+0000",
        "timeoriginalestimate": null,
        "description": "Add the package for manipulating files directly, column reader/writer, file reader/writer",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "16.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 59400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go][Parquet] Add File Package - readers",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/comment/17426312",
                    "id": "17426312",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rickard%40x14.se",
                        "name": "rickard@x14.se",
                        "key": "rickard@x14.se",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=rickard%40x14.se&avatarId=47933",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rickard%40x14.se&avatarId=47933",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rickard%40x14.se&avatarId=47933",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rickard%40x14.se&avatarId=47933"
                        },
                        "displayName": "Rickard Lundin",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "This is bigger than to see see a Panda being born!I wish i could figure out how to test it. Is it just clone from git and build the whole arrow package? I will try to find the branch name.\n\n/Rickard a newborn Golanger",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rickard%40x14.se",
                        "name": "rickard@x14.se",
                        "key": "rickard@x14.se",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=rickard%40x14.se&avatarId=47933",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rickard%40x14.se&avatarId=47933",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rickard%40x14.se&avatarId=47933",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rickard%40x14.se&avatarId=47933"
                        },
                        "displayName": "Rickard Lundin",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-10-08T17:50:41.085+0000",
                    "updated": "2021-10-08T17:50:41.085+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/comment/17426314",
                    "id": "17426314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~rickard@x14.se] as long as you are in a module (a directory that has a go.mod or whose parent up the chain has a go.mod, you can create a module by running `go mod init <package name>` in a directory) you should be able to run `go get github.com/apache/arrow/go/parquet` to download the parquet package.\r\n\r\nAfter that, you'll need to use a replace directive in order to test my branch with the reader which you can do by running `go mod edit -replace=github.com/apache/arrow/go/parquet=github.com/zeroshade/arrow/go/parquet@goparquet-file` i believe. After that you should be able to just import it normally in a .go file by using `import \"github.com/apache/arrow/go/parquet\"` and so on. Let me know if you run into any issues.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-10-08T17:58:03.266+0000",
                    "updated": "2021-10-08T17:58:03.266+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400809/comment/17433353",
                    "id": "17433353",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 11146\n[https://github.com/apache/arrow/pull/11146]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-10-23T18:12:49.671+0000",
                    "updated": "2021-10-23T18:12:49.671+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0uuzk:",
        "customfield_12314139": null
    }
}