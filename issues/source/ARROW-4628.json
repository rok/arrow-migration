{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13216669",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669",
    "key": "ARROW-4628",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4628/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/214260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939\n \n \n   This PR refactors the existing type coercion logic, to remove it from the SQL query planner and into an optimizer rule and also makes it more complete, with improved unit tests.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-16T17:05:40.409+0000",
                    "updated": "2019-03-16T17:05:40.409+0000",
                    "started": "2019-03-16T17:05:40.408+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214260",
                    "issueId": "13216669"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/214263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939#issuecomment-473567891\n \n \n   @sunchao @paddyhoran @nevi-me Please take a look when you can. This is mostly refactoring existing code.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-16T17:30:40.042+0000",
                    "updated": "2019-03-16T17:30:40.042+0000",
                    "started": "2019-03-16T17:30:40.042+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214263",
                    "issueId": "13216669"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/214268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939#issuecomment-473572322\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=h1) Report\n   > Merging [#3939](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/100dab0cb7e61e3871023a95cd26037ff08fdca7?src=pr&el=desc) will **increase** coverage by `0.81%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3939/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3939      +/-   ##\n   ==========================================\n   + Coverage   87.75%   88.56%   +0.81%     \n   ==========================================\n     Files         727      593     -134     \n     Lines       89499    79913    -9586     \n     Branches     1252        0    -1252     \n   ==========================================\n   - Hits        78536    70774    -7762     \n   + Misses      10845     9139    -1706     \n   + Partials      118        0     -118\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/util/bpacking.h](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JwYWNraW5nLmg=) | `99.81% <0%> (-0.01%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | [js/src/enum.ts](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-anMvc3JjL2VudW0udHM=) | | |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | | |\n   | [js/src/Arrow.node.ts](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-anMvc3JjL0Fycm93Lm5vZGUudHM=) | | |\n   | [js/src/schema.ts](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-anMvc3JjL3NjaGVtYS50cw==) | | |\n   | [go/arrow/type\\_traits\\_boolean.go](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV90cmFpdHNfYm9vbGVhbi5nbw==) | | |\n   | [js/src/ipc/node/writer.ts](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-anMvc3JjL2lwYy9ub2RlL3dyaXRlci50cw==) | | |\n   | [js/src/visitor/vectorloader.ts](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-anMvc3JjL3Zpc2l0b3IvdmVjdG9ybG9hZGVyLnRz) | | |\n   | ... and [125 more](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=footer). Last update [100dab0...1eb83b5](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-16T18:23:44.025+0000",
                    "updated": "2019-03-16T18:23:44.025+0000",
                    "started": "2019-03-16T18:23:44.024+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214268",
                    "issueId": "13216669"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/214276",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939#issuecomment-473572322\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=h1) Report\n   > Merging [#3939](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/100dab0cb7e61e3871023a95cd26037ff08fdca7?src=pr&el=desc) will **increase** coverage by `0.81%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3939/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3939      +/-   ##\n   ==========================================\n   + Coverage   87.75%   88.56%   +0.81%     \n   ==========================================\n     Files         727      593     -134     \n     Lines       89499    79916    -9583     \n     Branches     1252        0    -1252     \n   ==========================================\n   - Hits        78536    70780    -7756     \n   + Misses      10845     9136    -1709     \n   + Partials      118        0     -118\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | [js/src/enum.ts](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-anMvc3JjL2VudW0udHM=) | | |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | | |\n   | [js/src/Arrow.node.ts](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-anMvc3JjL0Fycm93Lm5vZGUudHM=) | | |\n   | [js/src/schema.ts](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-anMvc3JjL3NjaGVtYS50cw==) | | |\n   | [go/arrow/type\\_traits\\_boolean.go](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV90cmFpdHNfYm9vbGVhbi5nbw==) | | |\n   | [js/src/ipc/node/writer.ts](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-anMvc3JjL2lwYy9ub2RlL3dyaXRlci50cw==) | | |\n   | [js/src/visitor/vectorloader.ts](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-anMvc3JjL3Zpc2l0b3IvdmVjdG9ybG9hZGVyLnRz) | | |\n   | [js/src/visitor.ts](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree#diff-anMvc3JjL3Zpc2l0b3IudHM=) | | |\n   | ... and [125 more](https://codecov.io/gh/apache/arrow/pull/3939/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=footer). Last update [100dab0...3517959](https://codecov.io/gh/apache/arrow/pull/3939?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-16T20:14:34.326+0000",
                    "updated": "2019-03-16T20:14:34.326+0000",
                    "started": "2019-03-16T20:14:34.326+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214276",
                    "issueId": "13216669"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/214313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939#discussion_r266217467\n \n \n\n ##########\n File path: rust/datafusion/src/logicalplan.rs\n ##########\n @@ -178,54 +174,43 @@ pub enum Expr {\n }\n \n impl Expr {\n-    pub fn get_type(&self, schema: &Schema) -> DataType {\n+    pub fn get_type(&self, schema: &Schema) -> Result<DataType> {\n         match self {\n-            Expr::Column(n) => schema.field(*n).data_type().clone(),\n+            Expr::Column(n) => Ok(schema.field(*n).data_type().clone()),\n             Expr::Literal(l) => l.get_datatype(),\n-            Expr::Cast { data_type, .. } => data_type.clone(),\n-            Expr::ScalarFunction { return_type, .. } => return_type.clone(),\n-            Expr::AggregateFunction { return_type, .. } => return_type.clone(),\n-            Expr::IsNull(_) => DataType::Boolean,\n-            Expr::IsNotNull(_) => DataType::Boolean,\n+            Expr::Cast { data_type, .. } => Ok(data_type.clone()),\n+            Expr::ScalarFunction { return_type, .. } => Ok(return_type.clone()),\n+            Expr::AggregateFunction { return_type, .. } => Ok(return_type.clone()),\n+            Expr::IsNull(_) => Ok(DataType::Boolean),\n+            Expr::IsNotNull(_) => Ok(DataType::Boolean),\n             Expr::BinaryExpr {\n                 ref left,\n                 ref right,\n                 ref op,\n-            } => {\n-                match op {\n-                    Operator::Eq | Operator::NotEq => DataType::Boolean,\n-                    Operator::Lt | Operator::LtEq => DataType::Boolean,\n-                    Operator::Gt | Operator::GtEq => DataType::Boolean,\n-                    Operator::And | Operator::Or => DataType::Boolean,\n-                    _ => {\n-                        let left_type = left.get_type(schema);\n-                        let right_type = right.get_type(schema);\n-                        get_supertype(&left_type, &right_type).unwrap_or(DataType::Utf8) //TODO ???\n-                    }\n+            } => match op {\n+                Operator::Eq | Operator::NotEq => Ok(DataType::Boolean),\n+                Operator::Lt | Operator::LtEq => Ok(DataType::Boolean),\n+                Operator::Gt | Operator::GtEq => Ok(DataType::Boolean),\n+                Operator::And | Operator::Or => Ok(DataType::Boolean),\n+                _ => {\n+                    let left_type = left.get_type(schema)?;\n+                    let right_type = right.get_type(schema)?;\n+                    utils::get_supertype(&left_type, &right_type)\n                 }\n-            }\n+            },\n             Expr::Sort { ref expr, .. } => expr.get_type(schema),\n         }\n     }\n \n-    pub fn cast_to(\n-        &self,\n-        cast_to_type: &DataType,\n-        schema: &Schema,\n-    ) -> Result<Expr, String> {\n-        let this_type = self.get_type(schema);\n+    pub fn cast_to(&self, cast_to_type: &DataType, schema: &Schema) -> Result<Expr> {\n+        let this_type = self.get_type(schema)?;\n         if this_type == *cast_to_type {\n             Ok(self.clone())\n-        } else if can_coerce_from(cast_to_type, &this_type) {\n+        } else {\n             Ok(Expr::Cast {\n                 expr: Arc::new(self.clone()),\n                 data_type: cast_to_type.clone(),\n             })\n-        } else {\n \n Review comment:\n   Did you remove this check because casts support wider types?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-16T22:43:44.818+0000",
                    "updated": "2019-03-16T22:43:44.818+0000",
                    "started": "2019-03-16T22:43:44.817+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214313",
                    "issueId": "13216669"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/214314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939#discussion_r266217450\n \n \n\n ##########\n File path: rust/datafusion/src/logicalplan.rs\n ##########\n @@ -119,22 +113,24 @@ pub enum ScalarValue {\n }\n \n impl ScalarValue {\n-    pub fn get_datatype(&self) -> DataType {\n+    pub fn get_datatype(&self) -> Result<DataType> {\n \n Review comment:\n   Aside: It would be great if we could evolve `ScalarValue` in future releases, to behave like an `arrow::Array` that always has a value of 1. It would make situations like `computation(array, scalar {e.g. literal})` easier as our computation kernels would be able to handle literal values.\r\n   Wes worked on the C++ implementation a few weeks ago, I want to mimic it in the coming weeks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-16T22:43:44.824+0000",
                    "updated": "2019-03-16T22:43:44.824+0000",
                    "started": "2019-03-16T22:43:44.823+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214314",
                    "issueId": "13216669"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/214315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939#discussion_r266217467\n \n \n\n ##########\n File path: rust/datafusion/src/logicalplan.rs\n ##########\n @@ -178,54 +174,43 @@ pub enum Expr {\n }\n \n impl Expr {\n-    pub fn get_type(&self, schema: &Schema) -> DataType {\n+    pub fn get_type(&self, schema: &Schema) -> Result<DataType> {\n         match self {\n-            Expr::Column(n) => schema.field(*n).data_type().clone(),\n+            Expr::Column(n) => Ok(schema.field(*n).data_type().clone()),\n             Expr::Literal(l) => l.get_datatype(),\n-            Expr::Cast { data_type, .. } => data_type.clone(),\n-            Expr::ScalarFunction { return_type, .. } => return_type.clone(),\n-            Expr::AggregateFunction { return_type, .. } => return_type.clone(),\n-            Expr::IsNull(_) => DataType::Boolean,\n-            Expr::IsNotNull(_) => DataType::Boolean,\n+            Expr::Cast { data_type, .. } => Ok(data_type.clone()),\n+            Expr::ScalarFunction { return_type, .. } => Ok(return_type.clone()),\n+            Expr::AggregateFunction { return_type, .. } => Ok(return_type.clone()),\n+            Expr::IsNull(_) => Ok(DataType::Boolean),\n+            Expr::IsNotNull(_) => Ok(DataType::Boolean),\n             Expr::BinaryExpr {\n                 ref left,\n                 ref right,\n                 ref op,\n-            } => {\n-                match op {\n-                    Operator::Eq | Operator::NotEq => DataType::Boolean,\n-                    Operator::Lt | Operator::LtEq => DataType::Boolean,\n-                    Operator::Gt | Operator::GtEq => DataType::Boolean,\n-                    Operator::And | Operator::Or => DataType::Boolean,\n-                    _ => {\n-                        let left_type = left.get_type(schema);\n-                        let right_type = right.get_type(schema);\n-                        get_supertype(&left_type, &right_type).unwrap_or(DataType::Utf8) //TODO ???\n-                    }\n+            } => match op {\n+                Operator::Eq | Operator::NotEq => Ok(DataType::Boolean),\n+                Operator::Lt | Operator::LtEq => Ok(DataType::Boolean),\n+                Operator::Gt | Operator::GtEq => Ok(DataType::Boolean),\n+                Operator::And | Operator::Or => Ok(DataType::Boolean),\n+                _ => {\n+                    let left_type = left.get_type(schema)?;\n+                    let right_type = right.get_type(schema)?;\n+                    utils::get_supertype(&left_type, &right_type)\n                 }\n-            }\n+            },\n             Expr::Sort { ref expr, .. } => expr.get_type(schema),\n         }\n     }\n \n-    pub fn cast_to(\n-        &self,\n-        cast_to_type: &DataType,\n-        schema: &Schema,\n-    ) -> Result<Expr, String> {\n-        let this_type = self.get_type(schema);\n+    pub fn cast_to(&self, cast_to_type: &DataType, schema: &Schema) -> Result<Expr> {\n+        let this_type = self.get_type(schema)?;\n         if this_type == *cast_to_type {\n             Ok(self.clone())\n-        } else if can_coerce_from(cast_to_type, &this_type) {\n+        } else {\n             Ok(Expr::Cast {\n                 expr: Arc::new(self.clone()),\n                 data_type: cast_to_type.clone(),\n             })\n-        } else {\n \n Review comment:\n   Did you remove this check because casts now support more types?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-16T22:44:52.769+0000",
                    "updated": "2019-03-16T22:44:52.769+0000",
                    "started": "2019-03-16T22:44:52.769+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214315",
                    "issueId": "13216669"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/215465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939#discussion_r266893843\n \n \n\n ##########\n File path: rust/datafusion/src/logicalplan.rs\n ##########\n @@ -178,54 +174,43 @@ pub enum Expr {\n }\n \n impl Expr {\n-    pub fn get_type(&self, schema: &Schema) -> DataType {\n+    pub fn get_type(&self, schema: &Schema) -> Result<DataType> {\n         match self {\n-            Expr::Column(n) => schema.field(*n).data_type().clone(),\n+            Expr::Column(n) => Ok(schema.field(*n).data_type().clone()),\n             Expr::Literal(l) => l.get_datatype(),\n-            Expr::Cast { data_type, .. } => data_type.clone(),\n-            Expr::ScalarFunction { return_type, .. } => return_type.clone(),\n-            Expr::AggregateFunction { return_type, .. } => return_type.clone(),\n-            Expr::IsNull(_) => DataType::Boolean,\n-            Expr::IsNotNull(_) => DataType::Boolean,\n+            Expr::Cast { data_type, .. } => Ok(data_type.clone()),\n+            Expr::ScalarFunction { return_type, .. } => Ok(return_type.clone()),\n+            Expr::AggregateFunction { return_type, .. } => Ok(return_type.clone()),\n+            Expr::IsNull(_) => Ok(DataType::Boolean),\n+            Expr::IsNotNull(_) => Ok(DataType::Boolean),\n             Expr::BinaryExpr {\n                 ref left,\n                 ref right,\n                 ref op,\n-            } => {\n-                match op {\n-                    Operator::Eq | Operator::NotEq => DataType::Boolean,\n-                    Operator::Lt | Operator::LtEq => DataType::Boolean,\n-                    Operator::Gt | Operator::GtEq => DataType::Boolean,\n-                    Operator::And | Operator::Or => DataType::Boolean,\n-                    _ => {\n-                        let left_type = left.get_type(schema);\n-                        let right_type = right.get_type(schema);\n-                        get_supertype(&left_type, &right_type).unwrap_or(DataType::Utf8) //TODO ???\n-                    }\n+            } => match op {\n+                Operator::Eq | Operator::NotEq => Ok(DataType::Boolean),\n+                Operator::Lt | Operator::LtEq => Ok(DataType::Boolean),\n+                Operator::Gt | Operator::GtEq => Ok(DataType::Boolean),\n+                Operator::And | Operator::Or => Ok(DataType::Boolean),\n+                _ => {\n+                    let left_type = left.get_type(schema)?;\n+                    let right_type = right.get_type(schema)?;\n+                    utils::get_supertype(&left_type, &right_type)\n                 }\n-            }\n+            },\n             Expr::Sort { ref expr, .. } => expr.get_type(schema),\n         }\n     }\n \n-    pub fn cast_to(\n-        &self,\n-        cast_to_type: &DataType,\n-        schema: &Schema,\n-    ) -> Result<Expr, String> {\n-        let this_type = self.get_type(schema);\n+    pub fn cast_to(&self, cast_to_type: &DataType, schema: &Schema) -> Result<Expr> {\n+        let this_type = self.get_type(schema)?;\n         if this_type == *cast_to_type {\n             Ok(self.clone())\n-        } else if can_coerce_from(cast_to_type, &this_type) {\n+        } else {\n             Ok(Expr::Cast {\n                 expr: Arc::new(self.clone()),\n                 data_type: cast_to_type.clone(),\n             })\n-        } else {\n \n Review comment:\n   Added this back in now\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-19T13:47:05.344+0000",
                    "updated": "2019-03-19T13:47:05.344+0000",
                    "started": "2019-03-19T13:47:05.343+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215465",
                    "issueId": "13216669"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/215467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939#issuecomment-474377833\n \n \n   @kszucs @sunchao @paddyhoran This is rebased on master now that my other PR was merged (the one to remove unimplemented). This is the last significant PR I want to get into 0.13.0. Thanks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-19T13:48:25.749+0000",
                    "updated": "2019-03-19T13:48:25.749+0000",
                    "started": "2019-03-19T13:48:25.749+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215467",
                    "issueId": "13216669"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/216074",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939#discussion_r267250634\n \n \n\n ##########\n File path: rust/datafusion/src/logicalplan.rs\n ##########\n @@ -178,54 +174,43 @@ pub enum Expr {\n }\n \n impl Expr {\n-    pub fn get_type(&self, schema: &Schema) -> DataType {\n+    pub fn get_type(&self, schema: &Schema) -> Result<DataType> {\n         match self {\n-            Expr::Column(n) => schema.field(*n).data_type().clone(),\n+            Expr::Column(n) => Ok(schema.field(*n).data_type().clone()),\n             Expr::Literal(l) => l.get_datatype(),\n-            Expr::Cast { data_type, .. } => data_type.clone(),\n-            Expr::ScalarFunction { return_type, .. } => return_type.clone(),\n-            Expr::AggregateFunction { return_type, .. } => return_type.clone(),\n-            Expr::IsNull(_) => DataType::Boolean,\n-            Expr::IsNotNull(_) => DataType::Boolean,\n+            Expr::Cast { data_type, .. } => Ok(data_type.clone()),\n+            Expr::ScalarFunction { return_type, .. } => Ok(return_type.clone()),\n+            Expr::AggregateFunction { return_type, .. } => Ok(return_type.clone()),\n+            Expr::IsNull(_) => Ok(DataType::Boolean),\n+            Expr::IsNotNull(_) => Ok(DataType::Boolean),\n             Expr::BinaryExpr {\n                 ref left,\n                 ref right,\n                 ref op,\n-            } => {\n-                match op {\n-                    Operator::Eq | Operator::NotEq => DataType::Boolean,\n-                    Operator::Lt | Operator::LtEq => DataType::Boolean,\n-                    Operator::Gt | Operator::GtEq => DataType::Boolean,\n-                    Operator::And | Operator::Or => DataType::Boolean,\n-                    _ => {\n-                        let left_type = left.get_type(schema);\n-                        let right_type = right.get_type(schema);\n-                        get_supertype(&left_type, &right_type).unwrap_or(DataType::Utf8) //TODO ???\n-                    }\n+            } => match op {\n+                Operator::Eq | Operator::NotEq => Ok(DataType::Boolean),\n+                Operator::Lt | Operator::LtEq => Ok(DataType::Boolean),\n+                Operator::Gt | Operator::GtEq => Ok(DataType::Boolean),\n+                Operator::And | Operator::Or => Ok(DataType::Boolean),\n+                _ => {\n+                    let left_type = left.get_type(schema)?;\n+                    let right_type = right.get_type(schema)?;\n+                    utils::get_supertype(&left_type, &right_type)\n                 }\n-            }\n+            },\n             Expr::Sort { ref expr, .. } => expr.get_type(schema),\n         }\n     }\n \n-    pub fn cast_to(\n-        &self,\n-        cast_to_type: &DataType,\n-        schema: &Schema,\n-    ) -> Result<Expr, String> {\n-        let this_type = self.get_type(schema);\n+    pub fn cast_to(&self, cast_to_type: &DataType, schema: &Schema) -> Result<Expr> {\n+        let this_type = self.get_type(schema)?;\n         if this_type == *cast_to_type {\n             Ok(self.clone())\n-        } else if can_coerce_from(cast_to_type, &this_type) {\n+        } else {\n             Ok(Expr::Cast {\n                 expr: Arc::new(self.clone()),\n                 data_type: cast_to_type.clone(),\n             })\n-        } else {\n \n Review comment:\n   I think it was fine to remove, which I like better because the user gets the specific reason why the cast failed, as returned by the `cast()` function. My question was more out of curiousity :)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-20T09:37:10.512+0000",
                    "updated": "2019-03-20T09:37:10.512+0000",
                    "started": "2019-03-20T09:37:10.511+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "216074",
                    "issueId": "13216669"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/216819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939#issuecomment-475293836\n \n \n   Hi @kszucs @sunchao @paddyhoran ... any objection to me merging this so I can close out my final 0.13.0 issues? Thanks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-21T16:05:38.184+0000",
                    "updated": "2019-03-21T16:05:38.184+0000",
                    "started": "2019-03-21T16:05:38.184+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "216819",
                    "issueId": "13216669"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/216841",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939#discussion_r267853180\n \n \n\n ##########\n File path: rust/datafusion/src/optimizer/type_coercion.rs\n ##########\n @@ -0,0 +1,211 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! The type_coercion optimizer rule ensures that all binary operators are operating on\n+//! compatible types by adding explicit cast operations to expressions. For example,\n+//! the operation `c_float + c_int` would be rewritten as `c_float + CAST(c_int AS float)`.\n+//! This keeps the runtime query execution code much simpler.\n+\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+\n+use crate::error::{ExecutionError, Result};\n+use crate::logicalplan::Expr;\n+use crate::logicalplan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::optimizer::utils;\n+\n+/// Implementation of type coercion optimizer rule\n+pub struct TypeCoercionRule {}\n+\n+impl OptimizerRule for TypeCoercionRule {\n+    fn optimize(&mut self, plan: &LogicalPlan) -> Result<Arc<LogicalPlan>> {\n \n Review comment:\n   Since we are going to have multiple optimizers, it might be better to implement some general visitor or graph walker on a logical plan. Different optimizers can use that to implement their specific actions. This of course doesn't need to be done in this PR.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-21T16:56:28.156+0000",
                    "updated": "2019-03-21T16:56:28.156+0000",
                    "started": "2019-03-21T16:56:28.155+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "216841",
                    "issueId": "13216669"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/216910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939#discussion_r267892682\n \n \n\n ##########\n File path: rust/datafusion/src/optimizer/type_coercion.rs\n ##########\n @@ -0,0 +1,211 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! The type_coercion optimizer rule ensures that all binary operators are operating on\n+//! compatible types by adding explicit cast operations to expressions. For example,\n+//! the operation `c_float + c_int` would be rewritten as `c_float + CAST(c_int AS float)`.\n+//! This keeps the runtime query execution code much simpler.\n+\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+\n+use crate::error::{ExecutionError, Result};\n+use crate::logicalplan::Expr;\n+use crate::logicalplan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::optimizer::utils;\n+\n+/// Implementation of type coercion optimizer rule\n+pub struct TypeCoercionRule {}\n+\n+impl OptimizerRule for TypeCoercionRule {\n+    fn optimize(&mut self, plan: &LogicalPlan) -> Result<Arc<LogicalPlan>> {\n \n Review comment:\n   Yes, I agree. I like the way that is implemented in Spark using partial functions in Scala. It will fun to explore a nice way to do this in Rust.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-21T18:11:42.196+0000",
                    "updated": "2019-03-21T18:11:42.196+0000",
                    "started": "2019-03-21T18:11:42.195+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "216910",
                    "issueId": "13216669"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/worklog/216959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #3939: ARROW-4628: [Rust] [DataFusion] Implement type coercion query optimizer rule\nURL: https://github.com/apache/arrow/pull/3939\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-21T19:11:47.866+0000",
                    "updated": "2019-03-21T19:11:47.866+0000",
                    "started": "2019-03-21T19:11:47.865+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "216959",
                    "issueId": "13216669"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@9b54c28[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2cf32eda[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e2cd479[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1b9caa98[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bb23076[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1ed3a0db[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56143064[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@28229854[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72493ca6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@711f8f4c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67f061b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3a23ceb8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 21 19:11:47 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-03-21T19:11:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4628/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-02-19T15:09:53.000+0000",
        "updated": "2019-03-21T19:11:47.000+0000",
        "timeoriginalestimate": null,
        "description": "Now that we have a query optimizer, we should re-implement type coercion as an optimizer rule that rewrites expressions with explicit casts where required, so that at runtime we are only comparing like types.\r\n\r\nFor example, the expression {{float_column < int_column}}\u00a0would be rewritten as {{float_column < CAST(int_column AS float)}}.\r\n\r\nDataFusion already has this logic but the current implementation is somewhat hacky and incomplete. Moving it to the optimizer will allow us to implement this correctly.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Implement type coercion query optimizer rule",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216669/comment/16798354",
                    "id": "16798354",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
                        "name": "paddyhoran",
                        "key": "paddyhoran",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paddy Horan",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3939\n[https://github.com/apache/arrow/pull/3939]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
                        "name": "paddyhoran",
                        "key": "paddyhoran",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paddy Horan",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-03-21T19:11:47.862+0000",
                    "updated": "2019-03-21T19:11:47.862+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|yi1528:",
        "customfield_12314139": null
    }
}