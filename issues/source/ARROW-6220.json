{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13250412",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412",
    "key": "ARROW-6220",
    "fields": {
        "parent": {
            "id": "13243176",
            "key": "ARROW-5845",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13243176",
            "fields": {
                "summary": "[Java] Implement converter between Arrow record batches and Avro records",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/4",
                    "description": "This issue was once resolved, but the resolution was deemed incorrect. From here issues are either marked assigned or resolved.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/reopened.png",
                    "name": "Reopened",
                    "id": "4",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "avro",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12569311",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12569311",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13254913",
                    "key": "ARROW-6460",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13254913",
                    "fields": {
                        "summary": "[Java] Add benchmark and large fake data UT for avro adapter",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                            "name": "Critical",
                            "id": "2"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
            "name": "tianchen92",
            "key": "tianchen92",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
            },
            "displayName": "Ji Liu",
            "active": true,
            "timeZone": "Asia/Gaza"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6220/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 37,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245\n \n \n   Related to [ARROW-6220](https://issues.apache.org/jira/browse/ARROW-6220).\r\n   We can either let clients iterate or ideally provide an iterator interface.  This is important for large avro data and was also discussed as something readers/adapters should haven.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T04:11:00.623+0000",
                    "updated": "2019-08-31T04:11:00.623+0000",
                    "started": "2019-08-31T04:11:00.622+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304745",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on issue #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#issuecomment-526797895\n \n \n   I have already created a issue to trace StructConsumer(ARROW-6356), I need to think about Enum type and then provide a follow-up PR.  @emkornfield \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T04:13:13.304+0000",
                    "updated": "2019-08-31T04:13:13.304+0000",
                    "started": "2019-08-31T04:13:13.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304746",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304764",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319711799\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowVectorIterator.java\n ##########\n @@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import java.io.EOFException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.consumers.CompositeAvroConsumer;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.avro.Schema;\n+import org.apache.avro.io.Decoder;\n+\n+/**\n+ * VectorSchemaRoot iterator for partially converting avro data.\n+ */\n+public class AvroToArrowVectorIterator implements Iterator<VectorSchemaRoot> {\n \n Review comment:\n   make this autocloseable\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T05:37:17.528+0000",
                    "updated": "2019-08-31T05:37:17.528+0000",
                    "started": "2019-08-31T05:37:17.528+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304764",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319712255\n \n \n\n ##########\n File path: java/adapter/avro/src/test/java/org/apache/arrow/AvroTestBase.java\n ##########\n @@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.apache.arrow.memory.BaseAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.util.JsonStringArrayList;\n+import org.apache.arrow.vector.util.Text;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class AvroTestBase {\n+\n+  @ClassRule\n+  public static final TemporaryFolder TMP = new TemporaryFolder();\n+\n+  protected BaseAllocator allocator;\n+\n+  @Before\n+  public void init() {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+  }\n+\n+  protected Schema getSchema(String schemaName) throws Exception {\n+    Path schemaPath = Paths.get(TestWriteReadAvroRecord.class.getResource(\"/\").getPath(),\n+        \"schema\", schemaName);\n+    return new Schema.Parser().parse(schemaPath.toFile());\n+  }\n+\n+  protected void checkArrayResult(List<List> expected, ListVector vector) {\n+    assertEquals(expected.size(), vector.getValueCount());\n+    for (int i = 0; i < expected.size(); i++) {\n+      checkArrayElement(expected.get(i), (JsonStringArrayList) vector.getObject(i));\n+    }\n+  }\n+\n+  protected void checkArrayElement(List expected, List actual) {\n+    assertEquals(expected.size(), actual.size());\n+    for (int i = 0; i < expected.size(); i++) {\n+      Object value1 = expected.get(i);\n+      Object value2 = actual.get(i);\n+      if (value1 == null) {\n+        assertTrue(value2 == null);\n+        continue;\n+      }\n+      if (value2 instanceof byte[]) {\n+        value2 = ByteBuffer.wrap((byte[]) value2);\n+      } else if (value2 instanceof Text) {\n+        value2 = value2.toString();\n+      }\n+      assertTrue(Objects.equals(value1, value2));\n+    }\n+  }\n+\n+  protected void checkPrimitiveResult(List data, FieldVector vector) {\n+    assertEquals(data.size(), vector.getValueCount());\n+    for (int i = 0; i < data.size(); i++) {\n+      Object value1 = data.get(i);\n+      Object value2 = vector.getObject(i);\n+      if (value1 == null) {\n+        assertTrue(value2 == null);\n+        continue;\n+      }\n+      if (value2 instanceof byte[]) {\n+        value2 = ByteBuffer.wrap((byte[]) value2);\n+        if (value1 instanceof byte[]) {\n+          value1 = ByteBuffer.wrap((byte[]) value1);\n+        }\n+      } else if (value2 instanceof Text) {\n+        value2 = value2.toString();\n+      }\n+      assertTrue(Objects.equals(value1, value2));\n+    }\n+  }\n+\n+  protected void checkRecordResult(Schema schema, ArrayList<GenericRecord> data, VectorSchemaRoot root) {\n+    assertEquals(data.size(), root.getRowCount());\n+    assertEquals(schema.getFields().size(), root.getFieldVectors().size());\n+\n+    for (int i = 0; i < schema.getFields().size(); i++) {\n+      ArrayList fieldData = new ArrayList();\n+      for (GenericRecord record : data) {\n+        fieldData.add(record.get(i));\n+      }\n+\n+      checkPrimitiveResult(fieldData, root.getFieldVectors().get(i));\n+    }\n+\n+  }\n+\n+\n+  // belows are for iterator api\n+\n+  protected void checkArrayResult(List<List> expected, List<ListVector> vectors) {\n+    int index = 0;\n \n Review comment:\n   you probably want to check the total sizes are equal.  Otherwise if expected has more elements they would never get tested?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T05:37:17.801+0000",
                    "updated": "2019-08-31T05:37:17.801+0000",
                    "started": "2019-08-31T05:37:17.801+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304765",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304767",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319711971\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrow.java\n ##########\n @@ -32,15 +31,57 @@\n public class AvroToArrow {\n \n   /**\n-   * Fetch the data from {@link GenericDatumReader} and convert it to Arrow objects.\n+   * Fetch the data from {@link Decoder} and convert it to Arrow objects.\n    * @param schema avro schema.\n+   * @param decoder avro decoder\n    * @param allocator Memory allocator to use.\n    * @return Arrow Data Objects {@link VectorSchemaRoot}\n    */\n   public static VectorSchemaRoot avroToArrow(Schema schema, Decoder decoder, BaseAllocator allocator)\n \n Review comment:\n   I think we should make this package private, and comment that it is only meant for testing.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T05:37:17.804+0000",
                    "updated": "2019-08-31T05:37:17.804+0000",
                    "started": "2019-08-31T05:37:17.804+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304767",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304766",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319712037\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/consumers/AvroStringConsumer.java\n ##########\n @@ -28,9 +28,9 @@\n  * Consumer which consume string type values from avro decoder.\n  * Write the data to {@link VarCharVector}.\n  */\n-public class AvroStringConsumer implements Consumer {\n+public class AvroStringConsumer implements Consumer<VarCharVector> {\n \n Review comment:\n   does making these Generic actually help in anyway?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T05:37:17.804+0000",
                    "updated": "2019-08-31T05:37:17.804+0000",
                    "started": "2019-08-31T05:37:17.804+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304766",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319711984\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowVectorIterator.java\n ##########\n @@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import java.io.EOFException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.consumers.CompositeAvroConsumer;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.avro.Schema;\n+import org.apache.avro.io.Decoder;\n+\n+/**\n+ * VectorSchemaRoot iterator for partially converting avro data.\n+ */\n+public class AvroToArrowVectorIterator implements Iterator<VectorSchemaRoot> {\n+\n+  public static final int NO_LIMIT_BATCH_SIZE = -1;\n+  public static final int DEFAULT_BATCH_SIZE = 1024;\n+\n+  private final Decoder decoder;\n+  private final Schema schema;\n+\n+  private final BufferAllocator allocator;\n+\n+  private CompositeAvroConsumer compositeConsumer;\n+\n+  private org.apache.arrow.vector.types.pojo.Schema rootSchema;\n+\n+  private VectorSchemaRoot nextBatch;\n+\n+  private final int targetBatchSize;\n+\n+  /**\n+   * Construct an instance.\n+   */\n+  private AvroToArrowVectorIterator(\n+      Decoder decoder,\n+      Schema schema,\n+      BufferAllocator allocator,\n+      int targetBatchSize) {\n+\n+    this.decoder = decoder;\n+    this.schema = schema;\n+    this.allocator = allocator;\n+    this.targetBatchSize = targetBatchSize;\n+\n+  }\n+\n+  /**\n+   * Create a ArrowVectorIterator to partially convert data.\n+   */\n+  public static AvroToArrowVectorIterator create(\n+      Decoder decoder,\n+      Schema schema,\n+      BufferAllocator allocator,\n+      int targetBatchSize) {\n+\n+    AvroToArrowVectorIterator iterator = new AvroToArrowVectorIterator(decoder, schema, allocator, targetBatchSize);\n+    try {\n+      iterator.initialize();\n+      return iterator;\n+    } catch (Exception e) {\n+      iterator.close();\n+      throw new RuntimeException(\"Error occurs while creating iterator.\", e);\n+    }\n+  }\n+\n+  private void initialize() {\n+    // create consumers\n+    compositeConsumer = AvroToArrowUtils.createCompositeConsumer(schema, allocator);\n+    List<FieldVector> vectors = new ArrayList<>();\n+    compositeConsumer.getConsumers().forEach(c -> vectors.add(c.getVector()));\n+    List<Field> fields = vectors.stream().map(t -> t.getField()).collect(Collectors.toList());\n+    VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, 0);\n+    rootSchema = root.getSchema();\n+\n+    load(root);\n+  }\n+\n+  private void consumeData(VectorSchemaRoot root) {\n+    int readRowCount = 0;\n+    try {\n+      while ((targetBatchSize == NO_LIMIT_BATCH_SIZE || readRowCount < targetBatchSize)) {\n+        compositeConsumer.consume(decoder, root);\n+        readRowCount++;\n+      }\n+      root.setRowCount(readRowCount);\n+    } catch (EOFException eof) {\n+      // reach the end of encoder stream.\n+      root.setRowCount(readRowCount);\n+    } catch (Exception e) {\n+      compositeConsumer.close();\n+      throw new RuntimeException(\"Error occurs while consuming data.\", e);\n+    }\n+  }\n+\n+  // Loads the next schema root or null if no more rows are available.\n+  private void load(VectorSchemaRoot root) {\n+\n+    Preconditions.checkArgument(root.getFieldVectors().size() == compositeConsumer.getConsumers().size(),\n+        \"Schema root vectors size not equals to consumers size.\");\n+\n+    for (int i = 0; i < root.getFieldVectors().size(); i++) {\n+      compositeConsumer.getConsumers().get(i).resetValueVector(root.getFieldVectors().get(i));\n+    }\n+\n+    // consume data\n+    consumeData(root);\n+\n+    if (root.getRowCount() == 0) {\n+      root.close();\n+      nextBatch = null;\n+    } else {\n+      nextBatch = root;\n+    }\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    return nextBatch != null;\n+  }\n+\n+  /**\n+   * Gets the next vector. The user is responsible for freeing its resources.\n+   */\n+  public VectorSchemaRoot next() {\n+    Preconditions.checkArgument(hasNext());\n+    VectorSchemaRoot returned = nextBatch;\n+    try {\n+      load(VectorSchemaRoot.create(rootSchema, allocator));\n+    } catch (Exception e) {\n+      close();\n \n Review comment:\n   I think we should rely on the user of the interface to close it (unless close is idempotent).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T05:37:17.860+0000",
                    "updated": "2019-08-31T05:37:17.860+0000",
                    "started": "2019-08-31T05:37:17.860+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304768",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304769",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319712262\n \n \n\n ##########\n File path: java/adapter/avro/src/test/java/org/apache/arrow/AvroTestBase.java\n ##########\n @@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.apache.arrow.memory.BaseAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.util.JsonStringArrayList;\n+import org.apache.arrow.vector.util.Text;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class AvroTestBase {\n+\n+  @ClassRule\n+  public static final TemporaryFolder TMP = new TemporaryFolder();\n+\n+  protected BaseAllocator allocator;\n+\n+  @Before\n+  public void init() {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+  }\n+\n+  protected Schema getSchema(String schemaName) throws Exception {\n+    Path schemaPath = Paths.get(TestWriteReadAvroRecord.class.getResource(\"/\").getPath(),\n+        \"schema\", schemaName);\n+    return new Schema.Parser().parse(schemaPath.toFile());\n+  }\n+\n+  protected void checkArrayResult(List<List> expected, ListVector vector) {\n+    assertEquals(expected.size(), vector.getValueCount());\n+    for (int i = 0; i < expected.size(); i++) {\n+      checkArrayElement(expected.get(i), (JsonStringArrayList) vector.getObject(i));\n+    }\n+  }\n+\n+  protected void checkArrayElement(List expected, List actual) {\n+    assertEquals(expected.size(), actual.size());\n+    for (int i = 0; i < expected.size(); i++) {\n+      Object value1 = expected.get(i);\n+      Object value2 = actual.get(i);\n+      if (value1 == null) {\n+        assertTrue(value2 == null);\n+        continue;\n+      }\n+      if (value2 instanceof byte[]) {\n+        value2 = ByteBuffer.wrap((byte[]) value2);\n+      } else if (value2 instanceof Text) {\n+        value2 = value2.toString();\n+      }\n+      assertTrue(Objects.equals(value1, value2));\n+    }\n+  }\n+\n+  protected void checkPrimitiveResult(List data, FieldVector vector) {\n+    assertEquals(data.size(), vector.getValueCount());\n+    for (int i = 0; i < data.size(); i++) {\n+      Object value1 = data.get(i);\n+      Object value2 = vector.getObject(i);\n+      if (value1 == null) {\n+        assertTrue(value2 == null);\n+        continue;\n+      }\n+      if (value2 instanceof byte[]) {\n+        value2 = ByteBuffer.wrap((byte[]) value2);\n+        if (value1 instanceof byte[]) {\n+          value1 = ByteBuffer.wrap((byte[]) value1);\n+        }\n+      } else if (value2 instanceof Text) {\n+        value2 = value2.toString();\n+      }\n+      assertTrue(Objects.equals(value1, value2));\n+    }\n+  }\n+\n+  protected void checkRecordResult(Schema schema, ArrayList<GenericRecord> data, VectorSchemaRoot root) {\n+    assertEquals(data.size(), root.getRowCount());\n+    assertEquals(schema.getFields().size(), root.getFieldVectors().size());\n+\n+    for (int i = 0; i < schema.getFields().size(); i++) {\n+      ArrayList fieldData = new ArrayList();\n+      for (GenericRecord record : data) {\n+        fieldData.add(record.get(i));\n+      }\n+\n+      checkPrimitiveResult(fieldData, root.getFieldVectors().get(i));\n+    }\n+\n+  }\n+\n+\n+  // belows are for iterator api\n+\n+  protected void checkArrayResult(List<List> expected, List<ListVector> vectors) {\n \n Review comment:\n   please use List<List<?>>\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T05:37:17.872+0000",
                    "updated": "2019-08-31T05:37:17.872+0000",
                    "started": "2019-08-31T05:37:17.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304769",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304770",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319712217\n \n \n\n ##########\n File path: java/adapter/avro/src/test/java/org/apache/arrow/AvroToArrowIteratorTest.java\n ##########\n @@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.BinaryDecoder;\n+import org.apache.avro.io.BinaryEncoder;\n+import org.apache.avro.io.DatumWriter;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.io.EncoderFactory;\n+import org.junit.Test;\n+\n+public class AvroToArrowIteratorTest extends AvroTestBase {\n+\n+  private AvroToArrowVectorIterator writeAndRead(Schema schema, List data) throws Exception {\n+    File dataFile = TMP.newFile();\n+\n+    BinaryEncoder\n+        encoder = new EncoderFactory().directBinaryEncoder(new FileOutputStream(dataFile), null);\n+    DatumWriter writer = new GenericDatumWriter(schema);\n+    BinaryDecoder\n+        decoder = new DecoderFactory().directBinaryDecoder(new FileInputStream(dataFile), null);\n+\n+    for (Object value : data) {\n+      writer.write(value, encoder);\n+    }\n+\n+    return AvroToArrow.avroToArrowIterator(schema, decoder, allocator, 3);\n \n Review comment:\n   provider a comment on what 3 is.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T05:37:17.880+0000",
                    "updated": "2019-08-31T05:37:17.880+0000",
                    "started": "2019-08-31T05:37:17.879+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304770",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319712231\n \n \n\n ##########\n File path: java/adapter/avro/src/test/java/org/apache/arrow/AvroToArrowIteratorTest.java\n ##########\n @@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.BinaryDecoder;\n+import org.apache.avro.io.BinaryEncoder;\n+import org.apache.avro.io.DatumWriter;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.io.EncoderFactory;\n+import org.junit.Test;\n+\n+public class AvroToArrowIteratorTest extends AvroTestBase {\n+\n+  private AvroToArrowVectorIterator writeAndRead(Schema schema, List data) throws Exception {\n+    File dataFile = TMP.newFile();\n+\n+    BinaryEncoder\n+        encoder = new EncoderFactory().directBinaryEncoder(new FileOutputStream(dataFile), null);\n+    DatumWriter writer = new GenericDatumWriter(schema);\n+    BinaryDecoder\n+        decoder = new DecoderFactory().directBinaryDecoder(new FileInputStream(dataFile), null);\n+\n+    for (Object value : data) {\n+      writer.write(value, encoder);\n+    }\n+\n+    return AvroToArrow.avroToArrowIterator(schema, decoder, allocator, 3);\n+  }\n+\n+  @Test\n+  public void testStringType() throws Exception {\n+    Schema schema = getSchema(\"test_primitive_string.avsc\");\n+    ArrayList<String> data = new ArrayList(Arrays.asList(\"v1\", \"v2\", \"v3\", \"v4\", \"v5\"));\n \n Review comment:\n   can this just be List<String> data = Arrays.asList(...)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T05:37:17.887+0000",
                    "updated": "2019-08-31T05:37:17.887+0000",
                    "started": "2019-08-31T05:37:17.887+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304771",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319712050\n \n \n\n ##########\n File path: java/adapter/avro/src/test/java/org/apache/arrow/AvroTestBase.java\n ##########\n @@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.apache.arrow.memory.BaseAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.util.JsonStringArrayList;\n+import org.apache.arrow.vector.util.Text;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class AvroTestBase {\n+\n+  @ClassRule\n+  public static final TemporaryFolder TMP = new TemporaryFolder();\n+\n+  protected BaseAllocator allocator;\n+\n+  @Before\n+  public void init() {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+  }\n+\n+  protected Schema getSchema(String schemaName) throws Exception {\n+    Path schemaPath = Paths.get(TestWriteReadAvroRecord.class.getResource(\"/\").getPath(),\n+        \"schema\", schemaName);\n+    return new Schema.Parser().parse(schemaPath.toFile());\n+  }\n+\n+  protected void checkArrayResult(List<List> expected, ListVector vector) {\n+    assertEquals(expected.size(), vector.getValueCount());\n+    for (int i = 0; i < expected.size(); i++) {\n+      checkArrayElement(expected.get(i), (JsonStringArrayList) vector.getObject(i));\n+    }\n+  }\n+\n+  protected void checkArrayElement(List expected, List actual) {\n+    assertEquals(expected.size(), actual.size());\n+    for (int i = 0; i < expected.size(); i++) {\n+      Object value1 = expected.get(i);\n+      Object value2 = actual.get(i);\n+      if (value1 == null) {\n+        assertTrue(value2 == null);\n+        continue;\n+      }\n+      if (value2 instanceof byte[]) {\n+        value2 = ByteBuffer.wrap((byte[]) value2);\n+      } else if (value2 instanceof Text) {\n+        value2 = value2.toString();\n+      }\n+      assertTrue(Objects.equals(value1, value2));\n+    }\n+  }\n+\n+  protected void checkPrimitiveResult(List data, FieldVector vector) {\n+    assertEquals(data.size(), vector.getValueCount());\n+    for (int i = 0; i < data.size(); i++) {\n+      Object value1 = data.get(i);\n+      Object value2 = vector.getObject(i);\n+      if (value1 == null) {\n+        assertTrue(value2 == null);\n+        continue;\n+      }\n+      if (value2 instanceof byte[]) {\n+        value2 = ByteBuffer.wrap((byte[]) value2);\n+        if (value1 instanceof byte[]) {\n+          value1 = ByteBuffer.wrap((byte[]) value1);\n+        }\n+      } else if (value2 instanceof Text) {\n+        value2 = value2.toString();\n+      }\n+      assertTrue(Objects.equals(value1, value2));\n+    }\n+  }\n+\n+  protected void checkRecordResult(Schema schema, ArrayList<GenericRecord> data, VectorSchemaRoot root) {\n+    assertEquals(data.size(), root.getRowCount());\n+    assertEquals(schema.getFields().size(), root.getFieldVectors().size());\n+\n+    for (int i = 0; i < schema.getFields().size(); i++) {\n+      ArrayList fieldData = new ArrayList();\n+      for (GenericRecord record : data) {\n+        fieldData.add(record.get(i));\n+      }\n+\n+      checkPrimitiveResult(fieldData, root.getFieldVectors().get(i));\n+    }\n+\n+  }\n+\n+\n+  // belows are for iterator api\n+\n+  protected void checkArrayResult(List<List> expected, List<ListVector> vectors) {\n+    int index = 0;\n+    for (ListVector vector : vectors) {\n+      for (int i = 0; i < vector.getValueCount(); i++) {\n+        checkArrayElement(expected.get(index++), (JsonStringArrayList) vector.getObject(i));\n+      }\n+    }\n+  }\n+\n+  protected void checkRecordResult(Schema schema, ArrayList<GenericRecord> data, List<VectorSchemaRoot> roots) {\n+    roots.forEach(root -> {\n+      assertEquals(schema.getFields().size(), root.getFieldVectors().size());\n+    });\n+\n+    for (int i = 0; i < schema.getFields().size(); i++) {\n+      List fieldData = new ArrayList();\n+      List<FieldVector> vectors = new ArrayList<>();\n+      for (GenericRecord record : data) {\n+        fieldData.add(record.get(i));\n+      }\n+      final int columnIndex = i;\n+      roots.forEach(root -> vectors.add(root.getFieldVectors().get(columnIndex)));\n+\n+      checkPrimitiveResult(fieldData, vectors);\n+    }\n+\n+  }\n+\n+  protected void checkPrimitiveResult(List data, List<FieldVector> vectors) {\n+    int valueCount = vectors.stream().mapToInt(v -> v.getValueCount()).sum();\n+    assertEquals(data.size(), valueCount);\n+\n+    int index = 0;\n+    for (FieldVector vector : vectors) {\n+      for (int i = 0; i < vector.getValueCount(); i++) {\n+        Object value1 = data.get(index++);\n+        Object value2 = vector.getObject(i);\n+        if (value1 == null) {\n+          assertTrue(value2 == null);\n+          continue;\n+        }\n+        if (value2 instanceof byte[]) {\n+          value2 = ByteBuffer.wrap((byte[]) value2);\n+          if (value1 instanceof byte[]) {\n+            value1 = ByteBuffer.wrap((byte[]) value1);\n+          }\n+        } else if (value2 instanceof Text) {\n+          value2 = value2.toString();\n+        }\n+        assertTrue(Objects.equals(value1, value2));\n \n Review comment:\n   can't you use assertEquals?  The same applies to other places where you use this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T05:37:17.909+0000",
                    "updated": "2019-08-31T05:37:17.909+0000",
                    "started": "2019-08-31T05:37:17.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304772",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319712393\n \n \n\n ##########\n File path: java/adapter/avro/src/test/java/org/apache/arrow/AvroToArrowIteratorTest.java\n ##########\n @@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.BinaryDecoder;\n+import org.apache.avro.io.BinaryEncoder;\n+import org.apache.avro.io.DatumWriter;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.io.EncoderFactory;\n+import org.junit.Test;\n+\n+public class AvroToArrowIteratorTest extends AvroTestBase {\n+\n+  private AvroToArrowVectorIterator writeAndRead(Schema schema, List data) throws Exception {\n+    File dataFile = TMP.newFile();\n+\n+    BinaryEncoder\n+        encoder = new EncoderFactory().directBinaryEncoder(new FileOutputStream(dataFile), null);\n+    DatumWriter writer = new GenericDatumWriter(schema);\n+    BinaryDecoder\n+        decoder = new DecoderFactory().directBinaryDecoder(new FileInputStream(dataFile), null);\n+\n+    for (Object value : data) {\n+      writer.write(value, encoder);\n+    }\n+\n+    return AvroToArrow.avroToArrowIterator(schema, decoder, allocator, 3);\n+  }\n+\n+  @Test\n+  public void testStringType() throws Exception {\n+    Schema schema = getSchema(\"test_primitive_string.avsc\");\n+    ArrayList<String> data = new ArrayList(Arrays.asList(\"v1\", \"v2\", \"v3\", \"v4\", \"v5\"));\n+\n+    AvroToArrowVectorIterator iterator = writeAndRead(schema, data);\n+    List<VectorSchemaRoot> roots = new ArrayList<>();\n+    List<FieldVector> vectors = new ArrayList<>();\n+    while (iterator.hasNext()) {\n+      VectorSchemaRoot root = iterator.next();\n+      FieldVector vector = root.getFieldVectors().get(0);\n+      roots.add(root);\n+      vectors.add(vector);\n+    }\n+    checkPrimitiveResult(data, vectors);\n+    roots.forEach(root -> root.close());\n+  }\n+\n+  @Test\n+  public void testNullableStringType() throws Exception {\n+    Schema schema = getSchema(\"test_nullable_string.avsc\");\n+\n+    List<GenericRecord> data = new ArrayList<>();\n+    List<String> expected = new ArrayList<>();\n+    for (int i = 0; i < 5; i++) {\n+      GenericRecord record = new GenericData.Record(schema);\n+      String value = i % 2 == 0 ? \"test\" + i : null;\n+      record.put(0, value);\n+      expected.add(value);\n+      data.add(record);\n+    }\n+\n+    AvroToArrowVectorIterator iterator = writeAndRead(schema, data);\n \n Review comment:\n   once it is autocloseable, use try-with-resources.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T05:37:17.912+0000",
                    "updated": "2019-08-31T05:37:17.912+0000",
                    "started": "2019-08-31T05:37:17.912+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304773",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319711838\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowVectorIterator.java\n ##########\n @@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import java.io.EOFException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.consumers.CompositeAvroConsumer;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.avro.Schema;\n+import org.apache.avro.io.Decoder;\n+\n+/**\n+ * VectorSchemaRoot iterator for partially converting avro data.\n+ */\n+public class AvroToArrowVectorIterator implements Iterator<VectorSchemaRoot> {\n+\n+  public static final int NO_LIMIT_BATCH_SIZE = -1;\n+  public static final int DEFAULT_BATCH_SIZE = 1024;\n+\n+  private final Decoder decoder;\n+  private final Schema schema;\n+\n+  private final BufferAllocator allocator;\n+\n+  private CompositeAvroConsumer compositeConsumer;\n+\n+  private org.apache.arrow.vector.types.pojo.Schema rootSchema;\n+\n+  private VectorSchemaRoot nextBatch;\n+\n+  private final int targetBatchSize;\n+\n+  /**\n+   * Construct an instance.\n+   */\n+  private AvroToArrowVectorIterator(\n+      Decoder decoder,\n+      Schema schema,\n+      BufferAllocator allocator,\n+      int targetBatchSize) {\n+\n+    this.decoder = decoder;\n+    this.schema = schema;\n+    this.allocator = allocator;\n+    this.targetBatchSize = targetBatchSize;\n+\n+  }\n+\n+  /**\n+   * Create a ArrowVectorIterator to partially convert data.\n+   */\n+  public static AvroToArrowVectorIterator create(\n+      Decoder decoder,\n+      Schema schema,\n+      BufferAllocator allocator,\n+      int targetBatchSize) {\n+\n+    AvroToArrowVectorIterator iterator = new AvroToArrowVectorIterator(decoder, schema, allocator, targetBatchSize);\n+    try {\n+      iterator.initialize();\n+      return iterator;\n+    } catch (Exception e) {\n+      iterator.close();\n+      throw new RuntimeException(\"Error occurs while creating iterator.\", e);\n+    }\n+  }\n+\n+  private void initialize() {\n+    // create consumers\n+    compositeConsumer = AvroToArrowUtils.createCompositeConsumer(schema, allocator);\n+    List<FieldVector> vectors = new ArrayList<>();\n+    compositeConsumer.getConsumers().forEach(c -> vectors.add(c.getVector()));\n+    List<Field> fields = vectors.stream().map(t -> t.getField()).collect(Collectors.toList());\n+    VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, 0);\n+    rootSchema = root.getSchema();\n+\n+    load(root);\n+  }\n+\n+  private void consumeData(VectorSchemaRoot root) {\n+    int readRowCount = 0;\n+    try {\n+      while ((targetBatchSize == NO_LIMIT_BATCH_SIZE || readRowCount < targetBatchSize)) {\n+        compositeConsumer.consume(decoder, root);\n+        readRowCount++;\n+      }\n+      root.setRowCount(readRowCount);\n+    } catch (EOFException eof) {\n+      // reach the end of encoder stream.\n+      root.setRowCount(readRowCount);\n+    } catch (Exception e) {\n+      compositeConsumer.close();\n+      throw new RuntimeException(\"Error occurs while consuming data.\", e);\n+    }\n+  }\n+\n+  // Loads the next schema root or null if no more rows are available.\n+  private void load(VectorSchemaRoot root) {\n+\n+    Preconditions.checkArgument(root.getFieldVectors().size() == compositeConsumer.getConsumers().size(),\n+        \"Schema root vectors size not equals to consumers size.\");\n+\n+    for (int i = 0; i < root.getFieldVectors().size(); i++) {\n \n Review comment:\n   I think this should probably be pushed down as a method on CompositeConsumer.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T05:37:18.011+0000",
                    "updated": "2019-08-31T05:37:18.011+0000",
                    "started": "2019-08-31T05:37:18.010+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304774",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319712002\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowVectorIterator.java\n ##########\n @@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import java.io.EOFException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.consumers.CompositeAvroConsumer;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.avro.Schema;\n+import org.apache.avro.io.Decoder;\n+\n+/**\n+ * VectorSchemaRoot iterator for partially converting avro data.\n+ */\n+public class AvroToArrowVectorIterator implements Iterator<VectorSchemaRoot> {\n \n Review comment:\n   probably not until we are sure the API has settled down (i.e. not any time sson) but it might be nice to factor out common elements so this can be shared with JDBC.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T05:37:18.045+0000",
                    "updated": "2019-08-31T05:37:18.045+0000",
                    "started": "2019-08-31T05:37:18.045+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304775",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319713707\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrowVectorIterator.java\n ##########\n @@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow;\n+\n+import java.io.EOFException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.consumers.CompositeAvroConsumer;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.avro.Schema;\n+import org.apache.avro.io.Decoder;\n+\n+/**\n+ * VectorSchemaRoot iterator for partially converting avro data.\n+ */\n+public class AvroToArrowVectorIterator implements Iterator<VectorSchemaRoot> {\n \n Review comment:\n   Sure, I think when we finish both adapters we could look back to do this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T06:36:49.215+0000",
                    "updated": "2019-08-31T06:36:49.215+0000",
                    "started": "2019-08-31T06:36:49.214+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304797",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r319713781\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/consumers/AvroStringConsumer.java\n ##########\n @@ -28,9 +28,9 @@\n  * Consumer which consume string type values from avro decoder.\n  * Write the data to {@link VarCharVector}.\n  */\n-public class AvroStringConsumer implements Consumer {\n+public class AvroStringConsumer implements Consumer<VarCharVector> {\n \n Review comment:\n   Now mainly used in resetValueVector, this could ensure the vector type is correct I think.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T06:39:23.512+0000",
                    "updated": "2019-08-31T06:39:23.512+0000",
                    "started": "2019-08-31T06:39:23.511+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304799",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on issue #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#issuecomment-526805896\n \n \n   @emkornfield Thanks for careful review, revised according to your comments.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T06:40:07.869+0000",
                    "updated": "2019-08-31T06:40:07.869+0000",
                    "started": "2019-08-31T06:40:07.869+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304800",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/304830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#issuecomment-526815963\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5245?src=pr&el=h1) Report\n   > :exclamation: No coverage uploaded for pull request base (`master@f104f2d`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5245/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5245?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##             master    #5245   +/-   ##\n   =========================================\n     Coverage          ?   89.68%           \n   =========================================\n     Files             ?      693           \n     Lines             ?   104293           \n     Branches          ?        0           \n   =========================================\n     Hits              ?    93539           \n     Misses            ?    10754           \n     Partials          ?        0\n   ```\n   \n   \n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5245?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5245?src=pr&el=footer). Last update [f104f2d...3c85b6f](https://codecov.io/gh/apache/arrow/pull/5245?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T09:28:25.429+0000",
                    "updated": "2019-08-31T09:28:25.429+0000",
                    "started": "2019-08-31T09:28:25.429+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304830",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/306149",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r320609510\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/AvroToArrow.java\n ##########\n @@ -32,15 +31,58 @@\n public class AvroToArrow {\n \n   /**\n-   * Fetch the data from {@link GenericDatumReader} and convert it to Arrow objects.\n+   * Fetch the data from {@link Decoder} and convert it to Arrow objects.\n+   * Only for testing purpose.\n    * @param schema avro schema.\n+   * @param decoder avro decoder\n    * @param allocator Memory allocator to use.\n    * @return Arrow Data Objects {@link VectorSchemaRoot}\n    */\n-  public static VectorSchemaRoot avroToArrow(Schema schema, Decoder decoder, BaseAllocator allocator)\n+  static VectorSchemaRoot avroToArrow(Schema schema, Decoder decoder, BaseAllocator allocator)\n       throws IOException {\n     Preconditions.checkNotNull(schema, \"Avro schema object can not be null\");\n+    Preconditions.checkNotNull(decoder, \"Avro decoder object can not be null\");\n+    Preconditions.checkNotNull(allocator, \"allocator can not be null\");\n \n     return AvroToArrowUtils.avroToArrowVectors(schema, decoder, allocator);\n   }\n+\n+  /**\n+   * Fetch the data from {@link Decoder} and iteratively convert it to Arrow objects.\n+   * @param schema avro schema\n+   * @param decoder avro decoder\n+   * @param allocator the allocator\n+   * @throws IOException on error\n+   */\n+  public static AvroToArrowVectorIterator avroToArrowIterator(\n+      Schema schema,\n+      Decoder decoder,\n+      BaseAllocator allocator)\n+      throws IOException {\n+\n+    return avroToArrowIterator(schema, decoder, allocator, AvroToArrowVectorIterator.DEFAULT_BATCH_SIZE);\n+  }\n+\n+  /**\n+   * Fetch the data from {@link Decoder} and iteratively convert it to Arrow objects.\n+   * @param schema avro schema\n+   * @param decoder avro decoder\n+   * @param allocator the allocator\n+   * @param targetBatchSize the max value count for a vector.\n+   * @throws IOException on error\n+   */\n+  public static AvroToArrowVectorIterator avroToArrowIterator(\n+      Schema schema,\n+      Decoder decoder,\n+      BaseAllocator allocator,\n+      int targetBatchSize) throws IOException {\n+\n+    Preconditions.checkNotNull(schema, \"Avro schema object can not be null\");\n+    Preconditions.checkNotNull(decoder, \"Avro decoder object can not be null\");\n+    Preconditions.checkNotNull(allocator, \"allocator can not be null\");\n+    Preconditions.checkArgument(targetBatchSize == AvroToArrowVectorIterator.NO_LIMIT_BATCH_SIZE ||\n+        targetBatchSize > 0, \"invalid targetBatchSize:\" + targetBatchSize);\n \n Review comment:\n   use %s, instead of appending.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-04T07:27:57.336+0000",
                    "updated": "2019-09-04T07:27:57.336+0000",
                    "started": "2019-09-04T07:27:57.336+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "306149",
                    "issueId": "13250412"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/worklog/306154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5245: ARROW-6220: [Java] Add API to avro adapter to limit number of rows returned at a time.\nURL: https://github.com/apache/arrow/pull/5245#discussion_r320610511\n \n \n\n ##########\n File path: java/adapter/avro/src/main/java/org/apache/arrow/consumers/AvroStringConsumer.java\n ##########\n @@ -28,9 +28,9 @@\n  * Consumer which consume string type values from avro decoder.\n  * Write the data to {@link VarCharVector}.\n  */\n-public class AvroStringConsumer implements Consumer {\n+public class AvroStringConsumer implements Consumer<VarCharVector> {\n \n Review comment:\n   I guess we can leave it for now.   but it essentially is the same thing as making resetValueVector take ValueVector and casting within the function.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-04T07:30:47.265+0000",
                    "updated": "2019-09-04T07:30:47.265+0000",
                    "started": "2019-09-04T07:30:47.264+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "306154",
                    "issueId": "13250412"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 16200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@216b0e67[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3799bb77[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2429fd6d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5e91b89c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@639319a0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@788469b7[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@132d315f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@402b3efe[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b0e7142[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@609c6e45[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a410cc0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3841db8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 26 03:15:16 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-09-26T03:17:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6220/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-08-13T03:52:50.000+0000",
        "updated": "2019-09-26T03:17:34.000+0000",
        "timeoriginalestimate": null,
        "description": "We can either let clients iterate or ideally provide an iterator interface.\u00a0 This is important for large avro data and was also discussed as something readers/adapters should haven.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Add API to avro adapter to limit number of rows returned at a time.",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/comment/16924720",
                    "id": "16924720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "body": "Issue resolved by pull request 5305\r\n[https://github.com/apache/arrow/pull/5305]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "created": "2019-09-07T04:43:17.198+0000",
                    "updated": "2019-09-07T04:43:17.198+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250412/comment/16938210",
                    "id": "16938210",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "reopening to assign version fix.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-09-26T03:15:16.396+0000",
                    "updated": "2019-09-26T03:15:16.396+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z05lh4:",
        "customfield_12314139": null
    }
}