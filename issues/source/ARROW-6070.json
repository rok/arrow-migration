{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13247843",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843",
    "key": "ARROW-6070",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6070/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 30,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/284925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968\n \n \n   If a dictionary is attached to a schema, it may need to be converted before IPC sending. When this is not the case (which is most likely in practice), there is no need to do the conversion and no need to create a new schema. \r\n   \r\n   We solve the above problem by quickly determining if conversion is required, and if not, we avoid creating a new schema and return the original one immediately.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T12:22:15.928+0000",
                    "updated": "2019-07-30T12:22:15.928+0000",
                    "started": "2019-07-30T12:22:15.927+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284925",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/285460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#issuecomment-516672802\n \n \n   > Looks good to me. I admit I'm not very familiar with how Java handles dictionaries, and referenced `ArrowReader.java` for much of this. Should we at some point consolidate the various dictionary-handling helpers in one place?\r\n   \r\n   @lidavidm Thanks a lot for your comments. I think it is a good idea to consolidate dictionary/schema helpers in one place. \r\n   \r\n   However, maybe we need some refactoring work before we can do that. The helper in flight module references some classes in the flight module, and the helper in vector module are used by other classes in the vector module. So for now, either we consolidate them in the vector module or light module, we will have some problems. \r\n   \r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T02:53:15.770+0000",
                    "updated": "2019-07-31T02:53:15.770+0000",
                    "started": "2019-07-31T02:53:15.769+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "285460",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/291765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#discussion_r312319077\n \n \n\n ##########\n File path: java/flight/src/main/java/org/apache/arrow/flight/DictionaryUtils.java\n ##########\n @@ -74,4 +70,33 @@ static Schema generateSchemaMessages(final Schema originalSchema, final FlightDe\n     }\n     return schema;\n   }\n+\n+  /**\n+   * Generate the schema to send with flight messages.\n \n Review comment:\n   it might be good to describe  a little big what this does with the inputs\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-09T03:36:39.708+0000",
                    "updated": "2019-08-09T03:36:39.708+0000",
                    "started": "2019-08-09T03:36:39.707+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "291765",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/291805",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#discussion_r312327341\n \n \n\n ##########\n File path: java/flight/src/main/java/org/apache/arrow/flight/DictionaryUtils.java\n ##########\n @@ -74,4 +70,33 @@ static Schema generateSchemaMessages(final Schema originalSchema, final FlightDe\n     }\n     return schema;\n   }\n+\n+  /**\n+   * Generate the schema to send with flight messages.\n \n Review comment:\n   Sure. I have added more comments to it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-09T04:44:42.895+0000",
                    "updated": "2019-08-09T04:44:42.895+0000",
                    "started": "2019-08-09T04:44:42.894+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "291805",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/291806",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#issuecomment-519775647\n \n \n   > it would be good to have a unit test or two to show intended behavior.\r\n   \r\n   Good suggestion. I have provided new UTs for cases when a schema is created/reused.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-09T04:45:37.293+0000",
                    "updated": "2019-08-09T04:45:37.293+0000",
                    "started": "2019-08-09T04:45:37.292+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "291806",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/292454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#discussion_r312692075\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestDictionaryUtils.java\n ##########\n @@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.TreeSet;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.dictionary.Dictionary;\n+import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Test cases for {@link DictionaryUtils}.\n+ */\n+public class TestDictionaryUtils {\n+\n+  @Test\n+  public void testReuseSchema() {\n+    FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), null);\n+    FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+    ImmutableList<Field> build = ImmutableList.<Field>builder()\n+            .add(new Field(\"stringCol\", varcharType, null))\n+            .add(new Field(\"intCol\", intType, null)).build();\n+\n+    Schema schema = new Schema(build);\n+    Schema newSchema = DictionaryUtils.generateSchema(schema, null, new TreeSet<>());\n+\n+    // assert that no new schema is created.\n+    assertTrue(schema == newSchema);\n+  }\n+\n+  @Test\n+  public void testCreateSchema() {\n+    try (BufferAllocator allocator = new RootAllocator(1024)) {\n+      DictionaryEncoding dictionaryEncoding =\n+              new DictionaryEncoding(0, true, new ArrowType.Int(8, true));\n+      TinyIntVector dictVec = new TinyIntVector(\"dict vector\", allocator);\n+      Dictionary dictionary = new Dictionary(dictVec, dictionaryEncoding);\n+      DictionaryProvider dictProvider = new DictionaryProvider.MapDictionaryProvider(dictionary);\n+      TreeSet<Long> dictionaryUsed = new TreeSet<>();\n+\n+      FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), dictionaryEncoding);\n+      FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+      ImmutableList<Field> build = ImmutableList.<Field>builder()\n+              .add(new Field(\"stringCol\", varcharType, null))\n+              .add(new Field(\"intCol\", intType, null)).build();\n+\n+      Schema schema = new Schema(build);\n+      Schema newSchema = DictionaryUtils.generateSchema(schema, dictProvider, dictionaryUsed);\n+\n+      // assert that a new schema is created.\n+      assertTrue(schema != newSchema);\n+\n+      // assert the column is converted as expected\n+      ArrowType newColType = newSchema.getFields().get(0).getType();\n+      assertEquals(new ArrowType.Int(8, true), newColType);\n \n Review comment:\n   I might be missreading this but this doesn't seem correct to me.  https://github.com/apache/arrow/blob/master/format/Schema.fbs#L299 indicates the type shouldn't change if it is dictionary encoded?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-10T06:08:00.264+0000",
                    "updated": "2019-08-10T06:08:00.264+0000",
                    "started": "2019-08-10T06:08:00.264+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292454",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/292455",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#discussion_r312692008\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestDictionaryUtils.java\n ##########\n @@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.TreeSet;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.dictionary.Dictionary;\n+import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Test cases for {@link DictionaryUtils}.\n+ */\n+public class TestDictionaryUtils {\n+\n+  @Test\n+  public void testReuseSchema() {\n+    FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), null);\n+    FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+    ImmutableList<Field> build = ImmutableList.<Field>builder()\n+            .add(new Field(\"stringCol\", varcharType, null))\n+            .add(new Field(\"intCol\", intType, null)).build();\n+\n+    Schema schema = new Schema(build);\n+    Schema newSchema = DictionaryUtils.generateSchema(schema, null, new TreeSet<>());\n+\n+    // assert that no new schema is created.\n+    assertTrue(schema == newSchema);\n+  }\n+\n+  @Test\n+  public void testCreateSchema() {\n+    try (BufferAllocator allocator = new RootAllocator(1024)) {\n+      DictionaryEncoding dictionaryEncoding =\n+              new DictionaryEncoding(0, true, new ArrowType.Int(8, true));\n+      TinyIntVector dictVec = new TinyIntVector(\"dict vector\", allocator);\n+      Dictionary dictionary = new Dictionary(dictVec, dictionaryEncoding);\n+      DictionaryProvider dictProvider = new DictionaryProvider.MapDictionaryProvider(dictionary);\n+      TreeSet<Long> dictionaryUsed = new TreeSet<>();\n+\n+      FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), dictionaryEncoding);\n+      FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+      ImmutableList<Field> build = ImmutableList.<Field>builder()\n \n Review comment:\n   can ImmutableList.of be used here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-10T06:08:00.292+0000",
                    "updated": "2019-08-10T06:08:00.292+0000",
                    "started": "2019-08-10T06:08:00.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292455",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/292467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#discussion_r312693299\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestDictionaryUtils.java\n ##########\n @@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.TreeSet;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.dictionary.Dictionary;\n+import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Test cases for {@link DictionaryUtils}.\n+ */\n+public class TestDictionaryUtils {\n+\n+  @Test\n+  public void testReuseSchema() {\n+    FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), null);\n+    FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+    ImmutableList<Field> build = ImmutableList.<Field>builder()\n+            .add(new Field(\"stringCol\", varcharType, null))\n+            .add(new Field(\"intCol\", intType, null)).build();\n+\n+    Schema schema = new Schema(build);\n+    Schema newSchema = DictionaryUtils.generateSchema(schema, null, new TreeSet<>());\n+\n+    // assert that no new schema is created.\n+    assertTrue(schema == newSchema);\n+  }\n+\n+  @Test\n+  public void testCreateSchema() {\n+    try (BufferAllocator allocator = new RootAllocator(1024)) {\n+      DictionaryEncoding dictionaryEncoding =\n+              new DictionaryEncoding(0, true, new ArrowType.Int(8, true));\n+      TinyIntVector dictVec = new TinyIntVector(\"dict vector\", allocator);\n+      Dictionary dictionary = new Dictionary(dictVec, dictionaryEncoding);\n+      DictionaryProvider dictProvider = new DictionaryProvider.MapDictionaryProvider(dictionary);\n+      TreeSet<Long> dictionaryUsed = new TreeSet<>();\n+\n+      FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), dictionaryEncoding);\n+      FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+      ImmutableList<Field> build = ImmutableList.<Field>builder()\n+              .add(new Field(\"stringCol\", varcharType, null))\n+              .add(new Field(\"intCol\", intType, null)).build();\n+\n+      Schema schema = new Schema(build);\n+      Schema newSchema = DictionaryUtils.generateSchema(schema, dictProvider, dictionaryUsed);\n+\n+      // assert that a new schema is created.\n+      assertTrue(schema != newSchema);\n+\n+      // assert the column is converted as expected\n+      ArrowType newColType = newSchema.getFields().get(0).getType();\n+      assertEquals(new ArrowType.Int(8, true), newColType);\n \n Review comment:\n   I see, I think my misunderstanding comes from the setup of this test.  The dictVector above should be VarCharVector and the stringCol, should probably reflect the encoding type (at least that seems to be the difference between the toMemoryFormat type).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-10T06:56:37.484+0000",
                    "updated": "2019-08-10T06:56:37.484+0000",
                    "started": "2019-08-10T06:56:37.483+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292467",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/292674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#discussion_r312730779\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestDictionaryUtils.java\n ##########\n @@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.TreeSet;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.dictionary.Dictionary;\n+import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Test cases for {@link DictionaryUtils}.\n+ */\n+public class TestDictionaryUtils {\n+\n+  @Test\n+  public void testReuseSchema() {\n+    FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), null);\n+    FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+    ImmutableList<Field> build = ImmutableList.<Field>builder()\n+            .add(new Field(\"stringCol\", varcharType, null))\n+            .add(new Field(\"intCol\", intType, null)).build();\n+\n+    Schema schema = new Schema(build);\n+    Schema newSchema = DictionaryUtils.generateSchema(schema, null, new TreeSet<>());\n+\n+    // assert that no new schema is created.\n+    assertTrue(schema == newSchema);\n+  }\n+\n+  @Test\n+  public void testCreateSchema() {\n+    try (BufferAllocator allocator = new RootAllocator(1024)) {\n+      DictionaryEncoding dictionaryEncoding =\n+              new DictionaryEncoding(0, true, new ArrowType.Int(8, true));\n+      TinyIntVector dictVec = new TinyIntVector(\"dict vector\", allocator);\n+      Dictionary dictionary = new Dictionary(dictVec, dictionaryEncoding);\n+      DictionaryProvider dictProvider = new DictionaryProvider.MapDictionaryProvider(dictionary);\n+      TreeSet<Long> dictionaryUsed = new TreeSet<>();\n+\n+      FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), dictionaryEncoding);\n+      FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+      ImmutableList<Field> build = ImmutableList.<Field>builder()\n \n Review comment:\n   Revised. Thank you.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-11T09:21:10.483+0000",
                    "updated": "2019-08-11T09:21:10.483+0000",
                    "started": "2019-08-11T09:21:10.483+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292674",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/292675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#discussion_r312730808\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestDictionaryUtils.java\n ##########\n @@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.TreeSet;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.dictionary.Dictionary;\n+import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Test cases for {@link DictionaryUtils}.\n+ */\n+public class TestDictionaryUtils {\n+\n+  @Test\n+  public void testReuseSchema() {\n+    FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), null);\n+    FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+    ImmutableList<Field> build = ImmutableList.<Field>builder()\n+            .add(new Field(\"stringCol\", varcharType, null))\n+            .add(new Field(\"intCol\", intType, null)).build();\n+\n+    Schema schema = new Schema(build);\n+    Schema newSchema = DictionaryUtils.generateSchema(schema, null, new TreeSet<>());\n+\n+    // assert that no new schema is created.\n+    assertTrue(schema == newSchema);\n+  }\n+\n+  @Test\n+  public void testCreateSchema() {\n+    try (BufferAllocator allocator = new RootAllocator(1024)) {\n+      DictionaryEncoding dictionaryEncoding =\n+              new DictionaryEncoding(0, true, new ArrowType.Int(8, true));\n+      TinyIntVector dictVec = new TinyIntVector(\"dict vector\", allocator);\n+      Dictionary dictionary = new Dictionary(dictVec, dictionaryEncoding);\n+      DictionaryProvider dictProvider = new DictionaryProvider.MapDictionaryProvider(dictionary);\n+      TreeSet<Long> dictionaryUsed = new TreeSet<>();\n+\n+      FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), dictionaryEncoding);\n+      FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+      ImmutableList<Field> build = ImmutableList.<Field>builder()\n+              .add(new Field(\"stringCol\", varcharType, null))\n+              .add(new Field(\"intCol\", intType, null)).build();\n+\n+      Schema schema = new Schema(build);\n+      Schema newSchema = DictionaryUtils.generateSchema(schema, dictProvider, dictionaryUsed);\n+\n+      // assert that a new schema is created.\n+      assertTrue(schema != newSchema);\n+\n+      // assert the column is converted as expected\n+      ArrowType newColType = newSchema.getFields().get(0).getType();\n+      assertEquals(new ArrowType.Int(8, true), newColType);\n \n Review comment:\n   You are right. VarCharVector is the raw type, and TinyInt is the encoded type.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-11T09:22:08.230+0000",
                    "updated": "2019-08-11T09:22:08.230+0000",
                    "started": "2019-08-11T09:22:08.230+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292675",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/292686",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#issuecomment-520220123\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=h1) Report\n   > Merging [#4968](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/34dd3edece64c2268047db626fbfa967e36370a4?src=pr&el=desc) will **increase** coverage by `1.12%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4968/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master   #4968      +/-   ##\n   =========================================\n   + Coverage   88.58%   89.7%   +1.12%     \n   =========================================\n     Files         805     670     -135     \n     Lines       94407   99383    +4976     \n     Branches     1418       0    -1418     \n   =========================================\n   + Hits        83627   89149    +5522     \n   + Misses      10418   10234     -184     \n   + Partials      362       0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [r/R/Table.R](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-ci9SL1RhYmxlLlI=) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | [r/R/Column.R](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-ci9SL0NvbHVtbi5S) | | |\n   | [js/src/builder/interval.ts](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-anMvc3JjL2J1aWxkZXIvaW50ZXJ2YWwudHM=) | | |\n   | [go/arrow/ipc/file\\_reader.go](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGVfcmVhZGVyLmdv) | | |\n   | [js/src/builder/index.ts](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-anMvc3JjL2J1aWxkZXIvaW5kZXgudHM=) | | |\n   | [r/src/arrow\\_types.h](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-ci9zcmMvYXJyb3dfdHlwZXMuaA==) | | |\n   | [js/src/enum.ts](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-anMvc3JjL2VudW0udHM=) | | |\n   | ... and [425 more](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=footer). Last update [34dd3ed...df939bf](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-11T11:20:33.100+0000",
                    "updated": "2019-08-11T11:20:33.100+0000",
                    "started": "2019-08-11T11:20:33.100+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292686",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/292829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#discussion_r312773069\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestDictionaryUtils.java\n ##########\n @@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.TreeSet;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.dictionary.Dictionary;\n+import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Test cases for {@link DictionaryUtils}.\n+ */\n+public class TestDictionaryUtils {\n+\n+  @Test\n+  public void testReuseSchema() {\n+    FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), null);\n+    FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+    ImmutableList<Field> build = ImmutableList.<Field>builder()\n+            .add(new Field(\"stringCol\", varcharType, null))\n+            .add(new Field(\"intCol\", intType, null)).build();\n+\n+    Schema schema = new Schema(build);\n+    Schema newSchema = DictionaryUtils.generateSchema(schema, null, new TreeSet<>());\n+\n+    // assert that no new schema is created.\n+    assertTrue(schema == newSchema);\n+  }\n+\n+  @Test\n+  public void testCreateSchema() {\n+    try (BufferAllocator allocator = new RootAllocator(1024)) {\n+      DictionaryEncoding dictionaryEncoding =\n+              new DictionaryEncoding(0, true, new ArrowType.Int(8, true));\n+      TinyIntVector dictVec = new TinyIntVector(\"dict vector\", allocator);\n+      Dictionary dictionary = new Dictionary(dictVec, dictionaryEncoding);\n+      DictionaryProvider dictProvider = new DictionaryProvider.MapDictionaryProvider(dictionary);\n+      TreeSet<Long> dictionaryUsed = new TreeSet<>();\n+\n+      FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), dictionaryEncoding);\n+      FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+      ImmutableList<Field> build = ImmutableList.<Field>builder()\n+              .add(new Field(\"stringCol\", varcharType, null))\n+              .add(new Field(\"intCol\", intType, null)).build();\n+\n+      Schema schema = new Schema(build);\n+      Schema newSchema = DictionaryUtils.generateSchema(schema, dictProvider, dictionaryUsed);\n+\n+      // assert that a new schema is created.\n+      assertTrue(schema != newSchema);\n+\n+      // assert the column is converted as expected\n+      ArrowType newColType = newSchema.getFields().get(0).getType();\n+      assertEquals(new ArrowType.Int(8, true), newColType);\n \n Review comment:\n   But that scenario would never happen in practice?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-12T03:30:51.209+0000",
                    "updated": "2019-08-12T03:30:51.209+0000",
                    "started": "2019-08-12T03:30:51.208+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292829",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/292833",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#discussion_r312774444\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestDictionaryUtils.java\n ##########\n @@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.TreeSet;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.dictionary.Dictionary;\n+import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Test cases for {@link DictionaryUtils}.\n+ */\n+public class TestDictionaryUtils {\n+\n+  @Test\n+  public void testReuseSchema() {\n+    FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), null);\n+    FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+    ImmutableList<Field> build = ImmutableList.<Field>builder()\n+            .add(new Field(\"stringCol\", varcharType, null))\n+            .add(new Field(\"intCol\", intType, null)).build();\n+\n+    Schema schema = new Schema(build);\n+    Schema newSchema = DictionaryUtils.generateSchema(schema, null, new TreeSet<>());\n+\n+    // assert that no new schema is created.\n+    assertTrue(schema == newSchema);\n+  }\n+\n+  @Test\n+  public void testCreateSchema() {\n+    try (BufferAllocator allocator = new RootAllocator(1024)) {\n+      DictionaryEncoding dictionaryEncoding =\n+              new DictionaryEncoding(0, true, new ArrowType.Int(8, true));\n+      TinyIntVector dictVec = new TinyIntVector(\"dict vector\", allocator);\n+      Dictionary dictionary = new Dictionary(dictVec, dictionaryEncoding);\n+      DictionaryProvider dictProvider = new DictionaryProvider.MapDictionaryProvider(dictionary);\n+      TreeSet<Long> dictionaryUsed = new TreeSet<>();\n+\n+      FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), dictionaryEncoding);\n+      FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+      ImmutableList<Field> build = ImmutableList.<Field>builder()\n+              .add(new Field(\"stringCol\", varcharType, null))\n+              .add(new Field(\"intCol\", intType, null)).build();\n+\n+      Schema schema = new Schema(build);\n+      Schema newSchema = DictionaryUtils.generateSchema(schema, dictProvider, dictionaryUsed);\n+\n+      // assert that a new schema is created.\n+      assertTrue(schema != newSchema);\n+\n+      // assert the column is converted as expected\n+      ArrowType newColType = newSchema.getFields().get(0).getType();\n+      assertEquals(new ArrowType.Int(8, true), newColType);\n \n Review comment:\n   Why not? If we have only a few distinct strings, we can encode them with a TinyIntVector.\r\n   \r\n   Maybe the name \"dictVec\" is misleading? I will change it to \"encodedVec\".\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-12T03:48:44.480+0000",
                    "updated": "2019-08-12T03:48:44.480+0000",
                    "started": "2019-08-12T03:48:44.479+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292833",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/292836",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#discussion_r312774444\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestDictionaryUtils.java\n ##########\n @@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.TreeSet;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.dictionary.Dictionary;\n+import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Test cases for {@link DictionaryUtils}.\n+ */\n+public class TestDictionaryUtils {\n+\n+  @Test\n+  public void testReuseSchema() {\n+    FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), null);\n+    FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+    ImmutableList<Field> build = ImmutableList.<Field>builder()\n+            .add(new Field(\"stringCol\", varcharType, null))\n+            .add(new Field(\"intCol\", intType, null)).build();\n+\n+    Schema schema = new Schema(build);\n+    Schema newSchema = DictionaryUtils.generateSchema(schema, null, new TreeSet<>());\n+\n+    // assert that no new schema is created.\n+    assertTrue(schema == newSchema);\n+  }\n+\n+  @Test\n+  public void testCreateSchema() {\n+    try (BufferAllocator allocator = new RootAllocator(1024)) {\n+      DictionaryEncoding dictionaryEncoding =\n+              new DictionaryEncoding(0, true, new ArrowType.Int(8, true));\n+      TinyIntVector dictVec = new TinyIntVector(\"dict vector\", allocator);\n+      Dictionary dictionary = new Dictionary(dictVec, dictionaryEncoding);\n+      DictionaryProvider dictProvider = new DictionaryProvider.MapDictionaryProvider(dictionary);\n+      TreeSet<Long> dictionaryUsed = new TreeSet<>();\n+\n+      FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), dictionaryEncoding);\n+      FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+      ImmutableList<Field> build = ImmutableList.<Field>builder()\n+              .add(new Field(\"stringCol\", varcharType, null))\n+              .add(new Field(\"intCol\", intType, null)).build();\n+\n+      Schema schema = new Schema(build);\n+      Schema newSchema = DictionaryUtils.generateSchema(schema, dictProvider, dictionaryUsed);\n+\n+      // assert that a new schema is created.\n+      assertTrue(schema != newSchema);\n+\n+      // assert the column is converted as expected\n+      ArrowType newColType = newSchema.getFields().get(0).getType();\n+      assertEquals(new ArrowType.Int(8, true), newColType);\n \n Review comment:\n   Sorry. It is my fault. In practice, we rarely encode a byte vector with a string vector.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-12T03:59:20.882+0000",
                    "updated": "2019-08-12T03:59:20.882+0000",
                    "started": "2019-08-12T03:59:20.881+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292836",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/292850",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#discussion_r312779553\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestDictionaryUtils.java\n ##########\n @@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.TreeSet;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.dictionary.Dictionary;\n+import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Test cases for {@link DictionaryUtils}.\n+ */\n+public class TestDictionaryUtils {\n+\n+  @Test\n+  public void testReuseSchema() {\n+    FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), null);\n+    FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+    ImmutableList<Field> build = ImmutableList.<Field>builder()\n+            .add(new Field(\"stringCol\", varcharType, null))\n+            .add(new Field(\"intCol\", intType, null)).build();\n+\n+    Schema schema = new Schema(build);\n+    Schema newSchema = DictionaryUtils.generateSchema(schema, null, new TreeSet<>());\n+\n+    // assert that no new schema is created.\n+    assertTrue(schema == newSchema);\n+  }\n+\n+  @Test\n+  public void testCreateSchema() {\n+    try (BufferAllocator allocator = new RootAllocator(1024)) {\n+      DictionaryEncoding dictionaryEncoding =\n+              new DictionaryEncoding(0, true, new ArrowType.Int(8, true));\n+      TinyIntVector dictVec = new TinyIntVector(\"dict vector\", allocator);\n+      Dictionary dictionary = new Dictionary(dictVec, dictionaryEncoding);\n+      DictionaryProvider dictProvider = new DictionaryProvider.MapDictionaryProvider(dictionary);\n+      TreeSet<Long> dictionaryUsed = new TreeSet<>();\n+\n+      FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), dictionaryEncoding);\n+      FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+      ImmutableList<Field> build = ImmutableList.<Field>builder()\n+              .add(new Field(\"stringCol\", varcharType, null))\n+              .add(new Field(\"intCol\", intType, null)).build();\n+\n+      Schema schema = new Schema(build);\n+      Schema newSchema = DictionaryUtils.generateSchema(schema, dictProvider, dictionaryUsed);\n+\n+      // assert that a new schema is created.\n+      assertTrue(schema != newSchema);\n+\n+      // assert the column is converted as expected\n+      ArrowType newColType = newSchema.getFields().get(0).getType();\n+      assertEquals(new ArrowType.Int(8, true), newColType);\n \n Review comment:\n   @emkornfield The ut is fixed. Please take a look. Thank you.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-12T04:54:41.065+0000",
                    "updated": "2019-08-12T04:54:41.065+0000",
                    "started": "2019-08-12T04:54:41.064+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292850",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/292884",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#issuecomment-520220123\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=h1) Report\n   > Merging [#4968](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/5daba72aef8810940b5bfadb807851f87c219020?src=pr&el=desc) will **increase** coverage by `1.67%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4968/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master   #4968      +/-   ##\n   =========================================\n   + Coverage   88.02%   89.7%   +1.67%     \n   =========================================\n     Files         919     670     -249     \n     Lines      135068   99383   -35685     \n     Branches     1418       0    -1418     \n   =========================================\n   - Hits       118895   89149   -29746     \n   + Misses      16163   10234    -5929     \n   + Partials       10       0      -10\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [r/R/Table.R](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-ci9SL1RhYmxlLlI=) | | |\n   | [js/src/util/fn.ts](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-anMvc3JjL3V0aWwvZm4udHM=) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | [rust/datafusion/src/execution/projection.rs](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vcHJvamVjdGlvbi5ycw==) | | |\n   | [rust/datafusion/src/execution/filter.rs](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vZmlsdGVyLnJz) | | |\n   | [rust/arrow/src/csv/writer.rs](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY3N2L3dyaXRlci5ycw==) | | |\n   | [rust/datafusion/src/bin/main.rs](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9iaW4vbWFpbi5ycw==) | | |\n   | [js/src/builder/index.ts](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-anMvc3JjL2J1aWxkZXIvaW5kZXgudHM=) | | |\n   | [r/src/arrow\\_types.h](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-ci9zcmMvYXJyb3dfdHlwZXMuaA==) | | |\n   | ... and [241 more](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=footer). Last update [5daba72...4d8f38e](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-12T05:46:57.060+0000",
                    "updated": "2019-08-12T05:46:57.060+0000",
                    "started": "2019-08-12T05:46:57.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292884",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/292900",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#issuecomment-520220123\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=h1) Report\n   > Merging [#4968](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/5daba72aef8810940b5bfadb807851f87c219020?src=pr&el=desc) will **increase** coverage by `1.67%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4968/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master   #4968      +/-   ##\n   =========================================\n   + Coverage   88.02%   89.7%   +1.67%     \n   =========================================\n     Files         919     670     -249     \n     Lines      135068   99383   -35685     \n     Branches     1418       0    -1418     \n   =========================================\n   - Hits       118895   89148   -29747     \n   + Misses      16163   10235    -5928     \n   + Partials       10       0      -10\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [r/R/Table.R](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-ci9SL1RhYmxlLlI=) | | |\n   | [js/src/util/fn.ts](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-anMvc3JjL3V0aWwvZm4udHM=) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | [rust/datafusion/src/execution/projection.rs](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vcHJvamVjdGlvbi5ycw==) | | |\n   | [rust/datafusion/src/execution/filter.rs](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vZmlsdGVyLnJz) | | |\n   | [rust/arrow/src/csv/writer.rs](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY3N2L3dyaXRlci5ycw==) | | |\n   | [rust/datafusion/src/bin/main.rs](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9iaW4vbWFpbi5ycw==) | | |\n   | [js/src/builder/index.ts](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-anMvc3JjL2J1aWxkZXIvaW5kZXgudHM=) | | |\n   | [r/src/arrow\\_types.h](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree#diff-ci9zcmMvYXJyb3dfdHlwZXMuaA==) | | |\n   | ... and [241 more](https://codecov.io/gh/apache/arrow/pull/4968/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=footer). Last update [5daba72...4d8f38e](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-12T06:23:02.414+0000",
                    "updated": "2019-08-12T06:23:02.414+0000",
                    "started": "2019-08-12T06:23:02.414+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292900",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/294525",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#discussion_r313726374\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestDictionaryUtils.java\n ##########\n @@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.TreeSet;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.dictionary.Dictionary;\n+import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Test cases for {@link DictionaryUtils}.\n+ */\n+public class TestDictionaryUtils {\n+\n+  @Test\n+  public void testReuseSchema() {\n+    FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), null);\n+    FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+    ImmutableList<Field> build = ImmutableList.of(\n+            new Field(\"stringCol\", varcharType, null),\n+            new Field(\"intCol\", intType, null));\n+\n+    Schema schema = new Schema(build);\n+    Schema newSchema = DictionaryUtils.generateSchema(schema, null, new TreeSet<>());\n+\n+    // assert that no new schema is created.\n+    assertTrue(schema == newSchema);\n+  }\n+\n+  @Test\n+  public void testCreateSchema() {\n+    try (BufferAllocator allocator = new RootAllocator(1024)) {\n+      DictionaryEncoding dictionaryEncoding =\n+              new DictionaryEncoding(0, true, new ArrowType.Int(8, true));\n+      VarCharVector dictVec = new VarCharVector(\"dict vector\", allocator);\n+      Dictionary dictionary = new Dictionary(dictVec, dictionaryEncoding);\n+      DictionaryProvider dictProvider = new DictionaryProvider.MapDictionaryProvider(dictionary);\n+      TreeSet<Long> dictionaryUsed = new TreeSet<>();\n+\n+      FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), dictionaryEncoding);\n \n Review comment:\n   ```suggestion\r\n         FieldType encodedVarcharType = new FieldType(true, new ArrowType.Int(32, true)(), dictionaryEncoding);\r\n   ```\r\n   I think this is consistent with what DictionaryUtility.toMemoryFormat does\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T06:51:06.146+0000",
                    "updated": "2019-08-14T06:51:06.146+0000",
                    "started": "2019-08-14T06:51:06.146+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294525",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/294656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#discussion_r313797869\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestDictionaryUtils.java\n ##########\n @@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.TreeSet;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.dictionary.Dictionary;\n+import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Test cases for {@link DictionaryUtils}.\n+ */\n+public class TestDictionaryUtils {\n+\n+  @Test\n+  public void testReuseSchema() {\n+    FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), null);\n+    FieldType intType = new FieldType(true, new ArrowType.Int(32, true), null);\n+\n+    ImmutableList<Field> build = ImmutableList.of(\n+            new Field(\"stringCol\", varcharType, null),\n+            new Field(\"intCol\", intType, null));\n+\n+    Schema schema = new Schema(build);\n+    Schema newSchema = DictionaryUtils.generateSchema(schema, null, new TreeSet<>());\n+\n+    // assert that no new schema is created.\n+    assertTrue(schema == newSchema);\n+  }\n+\n+  @Test\n+  public void testCreateSchema() {\n+    try (BufferAllocator allocator = new RootAllocator(1024)) {\n+      DictionaryEncoding dictionaryEncoding =\n+              new DictionaryEncoding(0, true, new ArrowType.Int(8, true));\n+      VarCharVector dictVec = new VarCharVector(\"dict vector\", allocator);\n+      Dictionary dictionary = new Dictionary(dictVec, dictionaryEncoding);\n+      DictionaryProvider dictProvider = new DictionaryProvider.MapDictionaryProvider(dictionary);\n+      TreeSet<Long> dictionaryUsed = new TreeSet<>();\n+\n+      FieldType varcharType = new FieldType(true, new ArrowType.Utf8(), dictionaryEncoding);\n \n Review comment:\n   Thanks for your kind reminder. \r\n   The type here should be the encoded data type. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T10:03:03.051+0000",
                    "updated": "2019-08-14T10:03:03.051+0000",
                    "started": "2019-08-14T10:03:03.050+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294656",
                    "issueId": "13247843"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/worklog/294768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4968: ARROW-6070: [Java] Avoid creating new schema before IPC sending\nURL: https://github.com/apache/arrow/pull/4968#issuecomment-520220123\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=h1) Report\n   > :exclamation: No coverage uploaded for pull request base (`master@6eae790`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4968/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##             master    #4968   +/-   ##\n   =========================================\n     Coverage          ?   89.73%           \n   =========================================\n     Files             ?      674           \n     Lines             ?   100381           \n     Branches          ?        0           \n   =========================================\n     Hits              ?    90081           \n     Misses            ?    10300           \n     Partials          ?        0\n   ```\n   \n   \n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=footer). Last update [6eae790...3d948cf](https://codecov.io/gh/apache/arrow/pull/4968?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T14:19:28.528+0000",
                    "updated": "2019-08-14T14:19:28.528+0000",
                    "started": "2019-08-14T14:19:28.527+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294768",
                    "issueId": "13247843"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@45099c7c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@387b0f49[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39a865e4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@594924df[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d43ac19[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@62484441[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@18b59aa9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@84a3abc[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@18797cc8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@38b359ca[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ce7fca7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5521a85d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Aug 22 04:15:41 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-08-22T04:15:41.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6070/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-07-30T12:17:16.000+0000",
        "updated": "2019-08-22T04:15:41.000+0000",
        "timeoriginalestimate": null,
        "description": "If a dictionary is attached to a schema, it\u00a0may need to be converted before IPC sending. When this is not the case (which is most likely in practice), there is no need to do the conversion and no need to create a new schema.\u00a0\r\n\r\nWe solve the above problem by quickly determining if conversion is required, and if not, we\u00a0avoid creating a new schema and return the original one immediately.\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Avoid creating new schema before IPC sending",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247843/comment/16912953",
                    "id": "16912953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 4968\n[https://github.com/apache/arrow/pull/4968]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-08-22T04:15:41.339+0000",
                    "updated": "2019-08-22T04:15:41.339+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z055n4:",
        "customfield_12314139": null
    }
}