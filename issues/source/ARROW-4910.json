{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13222020",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020",
    "key": "ARROW-4910",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4910/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/worklog/214765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3961: ARROW-4910: [Rust] [DataFusion] Remove all uses of unimplemented!\nURL: https://github.com/apache/arrow/pull/3961\n \n \n   This PR removes all uses of `unimplemented!` in DataFusion.\r\n   \r\n   It also refactors to replace two copies of `expr_to_field` and `exprlist_to_fields` with one copy in a new file `optimizer::utils` and also removes some dead code.\r\n   \r\n   There are no functional changes in this PR.\r\n   \r\n   Note that I had already made these changes under the larger PR https://github.com/apache/arrow/pull/3939 but I felt it would be better to break this up into smaller PRs.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T13:36:22.531+0000",
                    "updated": "2019-03-18T13:36:22.531+0000",
                    "started": "2019-03-18T13:36:22.531+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214765",
                    "issueId": "13222020"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/worklog/214800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #3961: ARROW-4910: [Rust] [DataFusion] Remove all uses of unimplemented!\nURL: https://github.com/apache/arrow/pull/3961#discussion_r266472350\n \n \n\n ##########\n File path: rust/datafusion/src/logicalplan.rs\n ##########\n @@ -119,22 +113,24 @@ pub enum ScalarValue {\n }\n \n impl ScalarValue {\n-    pub fn get_datatype(&self) -> DataType {\n+    pub fn get_datatype(&self) -> Result<DataType> {\n \n Review comment:\n   I liked the previous implementation better. Is there a reason why Struct and Null variants should be disallowed? How about List?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T14:40:35.274+0000",
                    "updated": "2019-03-18T14:40:35.274+0000",
                    "started": "2019-03-18T14:40:35.273+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214800",
                    "issueId": "13222020"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/worklog/214802",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #3961: ARROW-4910: [Rust] [DataFusion] Remove all uses of unimplemented!\nURL: https://github.com/apache/arrow/pull/3961#discussion_r266475169\n \n \n\n ##########\n File path: rust/datafusion/src/optimizer/utils.rs\n ##########\n @@ -0,0 +1,184 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Collection of utility functions that are leveraged by the query optimizer rules\n+\n+use arrow::datatypes::{DataType, Field, Schema};\n+\n+use crate::error::{ExecutionError, Result};\n+use crate::logicalplan::Expr;\n+\n+/// Create field meta-data from an expression, for use in a result set schema\n+pub fn expr_to_field(e: &Expr, input_schema: &Schema) -> Result<Field> {\n+    match e {\n+        Expr::Column(i) => Ok(input_schema.fields()[*i].clone()),\n+        Expr::Literal(ref lit) => Ok(Field::new(\"lit\", lit.get_datatype()?, true)),\n+        Expr::ScalarFunction {\n+            ref name,\n+            ref return_type,\n+            ..\n+        } => Ok(Field::new(&name, return_type.clone(), true)),\n+        Expr::AggregateFunction {\n+            ref name,\n+            ref return_type,\n+            ..\n+        } => Ok(Field::new(&name, return_type.clone(), true)),\n+        Expr::Cast { ref data_type, .. } => {\n+            Ok(Field::new(\"cast\", data_type.clone(), true))\n+        }\n+        Expr::BinaryExpr {\n+            ref left,\n+            ref right,\n+            ..\n+        } => {\n+            let left_type = left.get_type(input_schema)?;\n+            let right_type = right.get_type(input_schema)?;\n+            Ok(Field::new(\n+                \"binary_expr\",\n+                get_supertype(&left_type, &right_type).unwrap(),\n+                true,\n+            ))\n+        }\n+        _ => Err(ExecutionError::NotImplemented(format!(\n+            \"Cannot determine schema type for expression {:?}\",\n+            e\n+        ))),\n+    }\n+}\n+\n+/// Create field meta-data from an expression, for use in a result set schema\n+pub fn exprlist_to_fields(expr: &Vec<Expr>, input_schema: &Schema) -> Result<Vec<Field>> {\n+    expr.iter()\n+        .map(|e| expr_to_field(e, input_schema))\n+        .collect()\n+}\n+\n+/// Given two datatypes, determine the supertype that both types can safely be cast to\n+pub fn get_supertype(l: &DataType, r: &DataType) -> Result<DataType> {\n+    match _get_supertype(l, r) {\n+        Some(dt) => Ok(dt),\n+        None => match _get_supertype(r, l) {\n+            Some(dt) => Ok(dt),\n+            None => Err(ExecutionError::InternalError(format!(\n+                \"Failed to determine supertype of {:?} and {:?}\",\n+                l, r\n+            ))),\n+        },\n+    }\n+}\n+\n+/// Given two datatypes, determine the supertype that both types can safely be cast to\n+fn _get_supertype(l: &DataType, r: &DataType) -> Option<DataType> {\n \n Review comment:\n   This is pretty error prone. Something like [this](https://github.com/ibis-project/ibis/blob/master/ibis/expr/datatypes.py#L1445-L1477) would be better.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T14:45:40.515+0000",
                    "updated": "2019-03-18T14:45:40.515+0000",
                    "started": "2019-03-18T14:45:40.514+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214802",
                    "issueId": "13222020"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/worklog/214804",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #3961: ARROW-4910: [Rust] [DataFusion] Remove all uses of unimplemented!\nURL: https://github.com/apache/arrow/pull/3961#discussion_r266475590\n \n \n\n ##########\n File path: rust/datafusion/src/optimizer/utils.rs\n ##########\n @@ -0,0 +1,184 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Collection of utility functions that are leveraged by the query optimizer rules\n+\n+use arrow::datatypes::{DataType, Field, Schema};\n+\n+use crate::error::{ExecutionError, Result};\n+use crate::logicalplan::Expr;\n+\n+/// Create field meta-data from an expression, for use in a result set schema\n+pub fn expr_to_field(e: &Expr, input_schema: &Schema) -> Result<Field> {\n+    match e {\n+        Expr::Column(i) => Ok(input_schema.fields()[*i].clone()),\n+        Expr::Literal(ref lit) => Ok(Field::new(\"lit\", lit.get_datatype()?, true)),\n+        Expr::ScalarFunction {\n+            ref name,\n+            ref return_type,\n+            ..\n+        } => Ok(Field::new(&name, return_type.clone(), true)),\n+        Expr::AggregateFunction {\n+            ref name,\n+            ref return_type,\n+            ..\n+        } => Ok(Field::new(&name, return_type.clone(), true)),\n+        Expr::Cast { ref data_type, .. } => {\n+            Ok(Field::new(\"cast\", data_type.clone(), true))\n+        }\n+        Expr::BinaryExpr {\n+            ref left,\n+            ref right,\n+            ..\n+        } => {\n+            let left_type = left.get_type(input_schema)?;\n+            let right_type = right.get_type(input_schema)?;\n+            Ok(Field::new(\n+                \"binary_expr\",\n+                get_supertype(&left_type, &right_type).unwrap(),\n+                true,\n+            ))\n+        }\n+        _ => Err(ExecutionError::NotImplemented(format!(\n+            \"Cannot determine schema type for expression {:?}\",\n+            e\n+        ))),\n+    }\n+}\n+\n+/// Create field meta-data from an expression, for use in a result set schema\n+pub fn exprlist_to_fields(expr: &Vec<Expr>, input_schema: &Schema) -> Result<Vec<Field>> {\n+    expr.iter()\n+        .map(|e| expr_to_field(e, input_schema))\n+        .collect()\n+}\n+\n+/// Given two datatypes, determine the supertype that both types can safely be cast to\n+pub fn get_supertype(l: &DataType, r: &DataType) -> Result<DataType> {\n+    match _get_supertype(l, r) {\n+        Some(dt) => Ok(dt),\n+        None => match _get_supertype(r, l) {\n+            Some(dt) => Ok(dt),\n+            None => Err(ExecutionError::InternalError(format!(\n+                \"Failed to determine supertype of {:?} and {:?}\",\n+                l, r\n+            ))),\n+        },\n+    }\n+}\n+\n+/// Given two datatypes, determine the supertype that both types can safely be cast to\n+fn _get_supertype(l: &DataType, r: &DataType) -> Option<DataType> {\n \n Review comment:\n   This should't block this PR, but We should have a ticket about it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T14:46:30.366+0000",
                    "updated": "2019-03-18T14:46:30.366+0000",
                    "started": "2019-03-18T14:46:30.365+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214804",
                    "issueId": "13222020"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/worklog/214805",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #3961: ARROW-4910: [Rust] [DataFusion] Remove all uses of unimplemented!\nURL: https://github.com/apache/arrow/pull/3961#discussion_r266476470\n \n \n\n ##########\n File path: rust/datafusion/src/logicalplan.rs\n ##########\n @@ -178,42 +174,36 @@ pub enum Expr {\n }\n \n impl Expr {\n-    pub fn get_type(&self, schema: &Schema) -> DataType {\n+    pub fn get_type(&self, schema: &Schema) -> Result<DataType> {\n \n Review comment:\n   Every `Expr` should have a `DataType` associated with it, so it feels weird to return a `Result`. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T14:48:14.198+0000",
                    "updated": "2019-03-18T14:48:14.198+0000",
                    "started": "2019-03-18T14:48:14.198+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214805",
                    "issueId": "13222020"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/worklog/214817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3961: ARROW-4910: [Rust] [DataFusion] Remove all uses of unimplemented!\nURL: https://github.com/apache/arrow/pull/3961#discussion_r266489688\n \n \n\n ##########\n File path: rust/datafusion/src/optimizer/utils.rs\n ##########\n @@ -0,0 +1,184 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Collection of utility functions that are leveraged by the query optimizer rules\n+\n+use arrow::datatypes::{DataType, Field, Schema};\n+\n+use crate::error::{ExecutionError, Result};\n+use crate::logicalplan::Expr;\n+\n+/// Create field meta-data from an expression, for use in a result set schema\n+pub fn expr_to_field(e: &Expr, input_schema: &Schema) -> Result<Field> {\n+    match e {\n+        Expr::Column(i) => Ok(input_schema.fields()[*i].clone()),\n+        Expr::Literal(ref lit) => Ok(Field::new(\"lit\", lit.get_datatype()?, true)),\n+        Expr::ScalarFunction {\n+            ref name,\n+            ref return_type,\n+            ..\n+        } => Ok(Field::new(&name, return_type.clone(), true)),\n+        Expr::AggregateFunction {\n+            ref name,\n+            ref return_type,\n+            ..\n+        } => Ok(Field::new(&name, return_type.clone(), true)),\n+        Expr::Cast { ref data_type, .. } => {\n+            Ok(Field::new(\"cast\", data_type.clone(), true))\n+        }\n+        Expr::BinaryExpr {\n+            ref left,\n+            ref right,\n+            ..\n+        } => {\n+            let left_type = left.get_type(input_schema)?;\n+            let right_type = right.get_type(input_schema)?;\n+            Ok(Field::new(\n+                \"binary_expr\",\n+                get_supertype(&left_type, &right_type).unwrap(),\n+                true,\n+            ))\n+        }\n+        _ => Err(ExecutionError::NotImplemented(format!(\n+            \"Cannot determine schema type for expression {:?}\",\n+            e\n+        ))),\n+    }\n+}\n+\n+/// Create field meta-data from an expression, for use in a result set schema\n+pub fn exprlist_to_fields(expr: &Vec<Expr>, input_schema: &Schema) -> Result<Vec<Field>> {\n+    expr.iter()\n+        .map(|e| expr_to_field(e, input_schema))\n+        .collect()\n+}\n+\n+/// Given two datatypes, determine the supertype that both types can safely be cast to\n+pub fn get_supertype(l: &DataType, r: &DataType) -> Result<DataType> {\n+    match _get_supertype(l, r) {\n+        Some(dt) => Ok(dt),\n+        None => match _get_supertype(r, l) {\n+            Some(dt) => Ok(dt),\n+            None => Err(ExecutionError::InternalError(format!(\n+                \"Failed to determine supertype of {:?} and {:?}\",\n+                l, r\n+            ))),\n+        },\n+    }\n+}\n+\n+/// Given two datatypes, determine the supertype that both types can safely be cast to\n+fn _get_supertype(l: &DataType, r: &DataType) -> Option<DataType> {\n \n Review comment:\n   I agree. That is much nicer.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:12:29.264+0000",
                    "updated": "2019-03-18T15:12:29.264+0000",
                    "started": "2019-03-18T15:12:29.264+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214817",
                    "issueId": "13222020"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/worklog/214818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3961: ARROW-4910: [Rust] [DataFusion] Remove all uses of unimplemented!\nURL: https://github.com/apache/arrow/pull/3961#discussion_r266490160\n \n \n\n ##########\n File path: rust/datafusion/src/logicalplan.rs\n ##########\n @@ -119,22 +113,24 @@ pub enum ScalarValue {\n }\n \n impl ScalarValue {\n-    pub fn get_datatype(&self) -> DataType {\n+    pub fn get_datatype(&self) -> Result<DataType> {\n \n Review comment:\n   They just aren't implemented yet ... and I thought Result was better than a kernel panic. Maybe we just leave this one as a panic?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:13:18.695+0000",
                    "updated": "2019-03-18T15:13:18.695+0000",
                    "started": "2019-03-18T15:13:18.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214818",
                    "issueId": "13222020"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/worklog/214819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3961: ARROW-4910: [Rust] [DataFusion] Remove all uses of unimplemented!\nURL: https://github.com/apache/arrow/pull/3961#discussion_r266490440\n \n \n\n ##########\n File path: rust/datafusion/src/logicalplan.rs\n ##########\n @@ -178,42 +174,36 @@ pub enum Expr {\n }\n \n impl Expr {\n-    pub fn get_type(&self, schema: &Schema) -> DataType {\n+    pub fn get_type(&self, schema: &Schema) -> Result<DataType> {\n \n Review comment:\n   Again this is a case of some things just not being implemented yet. Maybe I should revert this one to still panic as well.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:13:53.660+0000",
                    "updated": "2019-03-18T15:13:53.660+0000",
                    "started": "2019-03-18T15:13:53.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214819",
                    "issueId": "13222020"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/worklog/214895",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3961: ARROW-4910: [Rust] [DataFusion] Remove all uses of unimplemented!\nURL: https://github.com/apache/arrow/pull/3961#discussion_r266555498\n \n \n\n ##########\n File path: rust/datafusion/src/optimizer/utils.rs\n ##########\n @@ -0,0 +1,184 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Collection of utility functions that are leveraged by the query optimizer rules\n+\n+use arrow::datatypes::{DataType, Field, Schema};\n+\n+use crate::error::{ExecutionError, Result};\n+use crate::logicalplan::Expr;\n+\n+/// Create field meta-data from an expression, for use in a result set schema\n+pub fn expr_to_field(e: &Expr, input_schema: &Schema) -> Result<Field> {\n+    match e {\n+        Expr::Column(i) => Ok(input_schema.fields()[*i].clone()),\n+        Expr::Literal(ref lit) => Ok(Field::new(\"lit\", lit.get_datatype()?, true)),\n+        Expr::ScalarFunction {\n+            ref name,\n+            ref return_type,\n+            ..\n+        } => Ok(Field::new(&name, return_type.clone(), true)),\n+        Expr::AggregateFunction {\n+            ref name,\n+            ref return_type,\n+            ..\n+        } => Ok(Field::new(&name, return_type.clone(), true)),\n+        Expr::Cast { ref data_type, .. } => {\n+            Ok(Field::new(\"cast\", data_type.clone(), true))\n+        }\n+        Expr::BinaryExpr {\n+            ref left,\n+            ref right,\n+            ..\n+        } => {\n+            let left_type = left.get_type(input_schema)?;\n+            let right_type = right.get_type(input_schema)?;\n+            Ok(Field::new(\n+                \"binary_expr\",\n+                get_supertype(&left_type, &right_type).unwrap(),\n+                true,\n+            ))\n+        }\n+        _ => Err(ExecutionError::NotImplemented(format!(\n+            \"Cannot determine schema type for expression {:?}\",\n+            e\n+        ))),\n+    }\n+}\n+\n+/// Create field meta-data from an expression, for use in a result set schema\n+pub fn exprlist_to_fields(expr: &Vec<Expr>, input_schema: &Schema) -> Result<Vec<Field>> {\n+    expr.iter()\n+        .map(|e| expr_to_field(e, input_schema))\n+        .collect()\n+}\n+\n+/// Given two datatypes, determine the supertype that both types can safely be cast to\n+pub fn get_supertype(l: &DataType, r: &DataType) -> Result<DataType> {\n+    match _get_supertype(l, r) {\n+        Some(dt) => Ok(dt),\n+        None => match _get_supertype(r, l) {\n+            Some(dt) => Ok(dt),\n+            None => Err(ExecutionError::InternalError(format!(\n+                \"Failed to determine supertype of {:?} and {:?}\",\n+                l, r\n+            ))),\n+        },\n+    }\n+}\n+\n+/// Given two datatypes, determine the supertype that both types can safely be cast to\n+fn _get_supertype(l: &DataType, r: &DataType) -> Option<DataType> {\n \n Review comment:\n   Can we put all these types in an array or other kind of data structure and do lookups to determine the least-common-ancestor?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T17:26:25.688+0000",
                    "updated": "2019-03-18T17:26:25.688+0000",
                    "started": "2019-03-18T17:26:25.687+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214895",
                    "issueId": "13222020"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/worklog/215141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3961: ARROW-4910: [Rust] [DataFusion] Remove all uses of unimplemented!\nURL: https://github.com/apache/arrow/pull/3961#discussion_r266693071\n \n \n\n ##########\n File path: rust/datafusion/src/optimizer/utils.rs\n ##########\n @@ -0,0 +1,184 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Collection of utility functions that are leveraged by the query optimizer rules\n+\n+use arrow::datatypes::{DataType, Field, Schema};\n+\n+use crate::error::{ExecutionError, Result};\n+use crate::logicalplan::Expr;\n+\n+/// Create field meta-data from an expression, for use in a result set schema\n+pub fn expr_to_field(e: &Expr, input_schema: &Schema) -> Result<Field> {\n+    match e {\n+        Expr::Column(i) => Ok(input_schema.fields()[*i].clone()),\n+        Expr::Literal(ref lit) => Ok(Field::new(\"lit\", lit.get_datatype()?, true)),\n+        Expr::ScalarFunction {\n+            ref name,\n+            ref return_type,\n+            ..\n+        } => Ok(Field::new(&name, return_type.clone(), true)),\n+        Expr::AggregateFunction {\n+            ref name,\n+            ref return_type,\n+            ..\n+        } => Ok(Field::new(&name, return_type.clone(), true)),\n+        Expr::Cast { ref data_type, .. } => {\n+            Ok(Field::new(\"cast\", data_type.clone(), true))\n+        }\n+        Expr::BinaryExpr {\n+            ref left,\n+            ref right,\n+            ..\n+        } => {\n+            let left_type = left.get_type(input_schema)?;\n+            let right_type = right.get_type(input_schema)?;\n+            Ok(Field::new(\n+                \"binary_expr\",\n+                get_supertype(&left_type, &right_type).unwrap(),\n+                true,\n+            ))\n+        }\n+        _ => Err(ExecutionError::NotImplemented(format!(\n+            \"Cannot determine schema type for expression {:?}\",\n+            e\n+        ))),\n+    }\n+}\n+\n+/// Create field meta-data from an expression, for use in a result set schema\n+pub fn exprlist_to_fields(expr: &Vec<Expr>, input_schema: &Schema) -> Result<Vec<Field>> {\n+    expr.iter()\n+        .map(|e| expr_to_field(e, input_schema))\n+        .collect()\n+}\n+\n+/// Given two datatypes, determine the supertype that both types can safely be cast to\n+pub fn get_supertype(l: &DataType, r: &DataType) -> Result<DataType> {\n+    match _get_supertype(l, r) {\n+        Some(dt) => Ok(dt),\n+        None => match _get_supertype(r, l) {\n+            Some(dt) => Ok(dt),\n+            None => Err(ExecutionError::InternalError(format!(\n+                \"Failed to determine supertype of {:?} and {:?}\",\n+                l, r\n+            ))),\n+        },\n+    }\n+}\n+\n+/// Given two datatypes, determine the supertype that both types can safely be cast to\n+fn _get_supertype(l: &DataType, r: &DataType) -> Option<DataType> {\n \n Review comment:\n   Filed https://issues.apache.org/jira/browse/ARROW-4957 to track this\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-19T00:32:06.031+0000",
                    "updated": "2019-03-19T00:32:06.031+0000",
                    "started": "2019-03-19T00:32:06.030+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215141",
                    "issueId": "13222020"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/worklog/215144",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #3961: ARROW-4910: [Rust] [DataFusion] Remove all uses of unimplemented!\nURL: https://github.com/apache/arrow/pull/3961#issuecomment-474153344\n \n \n   @kszucs I reduced the scope of this PR. I will leave the panic in place for the missing logic in get_type rather than return a Result. I will file another JIRA for actually adding the missing logic.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-19T00:36:05.120+0000",
                    "updated": "2019-03-19T00:36:05.120+0000",
                    "started": "2019-03-19T00:36:05.120+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215144",
                    "issueId": "13222020"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/worklog/215300",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #3961: ARROW-4910: [Rust] [DataFusion] Remove all uses of unimplemented!\nURL: https://github.com/apache/arrow/pull/3961#issuecomment-474236804\n \n \n   Thanks @andygrove!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-19T08:04:02.594+0000",
                    "updated": "2019-03-19T08:04:02.594+0000",
                    "started": "2019-03-19T08:04:02.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215300",
                    "issueId": "13222020"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/worklog/215301",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #3961: ARROW-4910: [Rust] [DataFusion] Remove all uses of unimplemented!\nURL: https://github.com/apache/arrow/pull/3961\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-19T08:04:56.681+0000",
                    "updated": "2019-03-19T08:04:56.681+0000",
                    "started": "2019-03-19T08:04:56.681+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215301",
                    "issueId": "13222020"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@46d27631[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24ed6095[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b83febd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@24a5c290[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1601213b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@384f78b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@77068750[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7dbd7a62[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@62aa8417[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@46361f66[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5493cf7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@13b12856[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Mar 19 08:04:49 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-03-19T08:04:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4910/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-03-15T22:53:50.000+0000",
        "updated": "2019-03-19T08:04:56.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Remove all uses of unimplemented!",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/comment/16794316",
                    "id": "16794316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Handled in https://github.com/apache/arrow/pull/3939",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2019-03-16T17:40:08.401+0000",
                    "updated": "2019-03-16T17:40:08.401+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222020/comment/16795809",
                    "id": "16795809",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Issue resolved by pull request 3961\n[https://github.com/apache/arrow/pull/3961]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2019-03-19T08:04:49.630+0000",
                    "updated": "2019-03-19T08:04:49.630+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z00rm0:",
        "customfield_12314139": null
    }
}