{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13297771",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771",
    "key": "ARROW-8402",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8402/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/436430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 opened a new pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248\n\n\n   In this PR, we provide the validateFull functionalities, and refactor the validate logic. We separate the validation logic into 3 visitors:\r\n   \r\n   1. Type validation: validate vector type information (O(1) time complexity).\r\n   2. Buffer validation: validate buffer count/size, etc. (O(1) time complexity).\r\n   3. Data validation: validate content of data buffers. (O(n) time complexity).\r\n   \r\n   For the `validate` method, we perform validations 1 and 2, while for the `validateFull` method, we perform validations 1, 2, and 3.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-22T07:19:25.345+0000",
                    "updated": "2020-05-22T07:19:25.345+0000",
                    "started": "2020-05-22T07:19:25.345+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "436430",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/436433",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#issuecomment-632542028\n\n\n   https://issues.apache.org/jira/browse/ARROW-8402\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-22T07:32:12.573+0000",
                    "updated": "2020-05-22T07:32:12.573+0000",
                    "started": "2020-05-22T07:32:12.573+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "436433",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/441769",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rymurr commented on a change in pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#discussion_r435819400\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/util/ValueVectorUtility.java\n##########\n@@ -90,42 +90,59 @@ public static String getToString(ValueVector vector, int start, int end) {\n   }\n \n   /**\n-   * Validate field vector.\n+   * Utility to validate vector in O(1) time.\n    */\n-  public static void validate(FieldVector vector) {\n+  public static void validate(ValueVector vector) {\n     Preconditions.checkNotNull(vector);\n \n-    ArrowType arrowType = vector.getField().getType();\n-    int typeBufferCount = TypeLayout.getTypeBufferCount(arrowType);\n-    TypeLayout typeLayout = TypeLayout.getTypeLayout(arrowType);\n+    ValidateVectorTypeVisitor typeVisitor = new ValidateVectorTypeVisitor();\n+    vector.accept(typeVisitor, null);\n \n-    if (vector.getValueCount() < 0) {\n-      throw new IllegalArgumentException(\"vector valueCount is negative\");\n-    }\n+    ValidateVectorBufferVisitor bufferVisitor = new ValidateVectorBufferVisitor();\n+    vector.accept(bufferVisitor, null);\n+  }\n \n-    if (vector.getFieldBuffers().size() != typeBufferCount) {\n-      throw new IllegalArgumentException(String.format(\"Expected %s buffers in vector of type %s, got %s\",\n-          typeBufferCount, vector.getField().getType().toString(), vector.getBufferSize()));\n-    }\n+  /**\n+   * Utility to validate vector in O(n) time, where n is the value count.\n+   */\n+  public static void validateFull(ValueVector vector) {\n+    Preconditions.checkNotNull(vector);\n\nReview comment:\n       nit: call validate here and avoid a few lines of duplication\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-05T10:03:46.475+0000",
                    "updated": "2020-06-05T10:03:46.475+0000",
                    "started": "2020-06-05T10:03:46.474+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "441769",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/442596",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#discussion_r436521920\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/util/ValueVectorUtility.java\n##########\n@@ -90,42 +90,59 @@ public static String getToString(ValueVector vector, int start, int end) {\n   }\n \n   /**\n-   * Validate field vector.\n+   * Utility to validate vector in O(1) time.\n    */\n-  public static void validate(FieldVector vector) {\n+  public static void validate(ValueVector vector) {\n     Preconditions.checkNotNull(vector);\n \n-    ArrowType arrowType = vector.getField().getType();\n-    int typeBufferCount = TypeLayout.getTypeBufferCount(arrowType);\n-    TypeLayout typeLayout = TypeLayout.getTypeLayout(arrowType);\n+    ValidateVectorTypeVisitor typeVisitor = new ValidateVectorTypeVisitor();\n+    vector.accept(typeVisitor, null);\n \n-    if (vector.getValueCount() < 0) {\n-      throw new IllegalArgumentException(\"vector valueCount is negative\");\n-    }\n+    ValidateVectorBufferVisitor bufferVisitor = new ValidateVectorBufferVisitor();\n+    vector.accept(bufferVisitor, null);\n+  }\n \n-    if (vector.getFieldBuffers().size() != typeBufferCount) {\n-      throw new IllegalArgumentException(String.format(\"Expected %s buffers in vector of type %s, got %s\",\n-          typeBufferCount, vector.getField().getType().toString(), vector.getBufferSize()));\n-    }\n+  /**\n+   * Utility to validate vector in O(n) time, where n is the value count.\n+   */\n+  public static void validateFull(ValueVector vector) {\n+    Preconditions.checkNotNull(vector);\n\nReview comment:\n       I have revised the code accordingly. Thanks a lot for the good suggestion. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-08T08:06:57.513+0000",
                    "updated": "2020-06-08T08:06:57.513+0000",
                    "started": "2020-06-08T08:06:57.513+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442596",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/465350",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#issuecomment-667621329\n\n\n   @liyafan82 looks like CI is failing from this change?  \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-02T03:35:51.405+0000",
                    "updated": "2020-08-02T03:35:51.405+0000",
                    "started": "2020-08-02T03:35:51.404+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "465350",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/465652",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#issuecomment-667985790\n\n\n   > @liyafan82 looks like CI is failing from this change?\r\n   \r\n   @emkornfield Thanks a lot for your kind reminder.\r\n   The CI was failing because we did not support LargeListVector in the previous PR. Now we have revised the PR to support it.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-03T12:05:59.680+0000",
                    "updated": "2020-08-03T12:05:59.680+0000",
                    "started": "2020-08-03T12:05:59.680+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "465652",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/466755",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#issuecomment-669150653\n\n\n   @rymurr Thanks a lot for your feedback. \r\n   We have added support for LargeList. Do you have any more comments?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-05T11:56:34.203+0000",
                    "updated": "2020-08-05T11:56:34.203+0000",
                    "started": "2020-08-05T11:56:34.203+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "466755",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/467198",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#issuecomment-669837093\n\n\n   @rymurr @emkornfield Thanks a lot for your feedback. \r\n   If there are no more comments, I will merge it tomorrow. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-06T10:04:13.089+0000",
                    "updated": "2020-08-06T10:04:13.089+0000",
                    "started": "2020-08-06T10:04:13.088+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "467198",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/467211",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rymurr commented on a change in pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#discussion_r466313682\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/validate/ValidateVectorBufferVisitor.java\n##########\n@@ -0,0 +1,221 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.validate;\n+\n+import static org.apache.arrow.vector.validate.ValidateUtility.validateOrThrow;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseLargeVariableWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.TypeLayout;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.compare.VectorVisitor;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.NonNullableStructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+\n+/**\n+ * Visitor to validate vector buffers.\n+ */\n+public class ValidateVectorBufferVisitor implements VectorVisitor<Void, Void> {\n+\n+  private void validateVectorCommon(ValueVector vector) {\n+    ArrowType arrowType = vector.getField().getType();\n+    validateOrThrow(vector.getValueCount() >= 0, \"vector valueCount is negative\");\n+\n+    if (vector instanceof FieldVector) {\n+      FieldVector fieldVector = (FieldVector) vector;\n+      int typeBufferCount = TypeLayout.getTypeBufferCount(arrowType);\n+      validateOrThrow(fieldVector.getFieldBuffers().size() == typeBufferCount,\n+          String.format(\"Expected %s buffers in vector of type %s, got %s\",\n+              typeBufferCount, vector.getField().getType().toString(), fieldVector.getFieldBuffers().size()));\n+    }\n+  }\n+\n+  private void validateValidityBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf validityBuffer = vector.getValidityBuffer();\n+    validateOrThrow(validityBuffer != null, \"The validity buffer is null.\");\n+    validateOrThrow(validityBuffer.capacity() * 8 >= valueCount, \"No enough capacity for the validity buffer.\");\n+  }\n+\n+  private void validateOffsetBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+    validateOrThrow(offsetBuffer != null, \"The offset buffer is null.\");\n+    if (valueCount > 0) {\n+      validateOrThrow(offsetBuffer.capacity() >= (valueCount + 1) * 4, \"No enough capacity for the offset buffer.\");\n+    }\n+  }\n+\n+  private void validateLargeOffsetBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+    validateOrThrow(offsetBuffer != null, \"The large offset buffer is null.\");\n+    if (valueCount > 0) {\n+      validateOrThrow(offsetBuffer.capacity() >= (valueCount + 1) * 8,\n+          \"No enough capacity for the large offset buffer.\");\n+    }\n+  }\n+\n+  private void validateFixedWidthDataBuffer(ValueVector vector, int valueCount, int bitWidth) {\n+    ArrowBuf dataBuffer = vector.getDataBuffer();\n+    validateOrThrow(dataBuffer != null, \"The fixed width data buffer is null.\");\n+    validateOrThrow((long) bitWidth * valueCount <= dataBuffer.capacity() * 8L,\n+        \"No enough capacity for fixed width data buffer\");\n+  }\n+\n+  private void validateDataBuffer(ValueVector vector, long minCapacity) {\n+    ArrowBuf dataBuffer = vector.getDataBuffer();\n+    validateOrThrow(dataBuffer != null, \"The data buffer is null.\");\n+    validateOrThrow(dataBuffer.capacity() >= minCapacity, \"No enough capacity for data buffer\");\n+  }\n+\n+  @Override\n+  public Void visit(BaseFixedWidthVector vector, Void value) {\n+    int bitWidth = (vector instanceof BitVector) ? 1 : vector.getTypeWidth() * 8;\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateFixedWidthDataBuffer(vector, valueCount, bitWidth);\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(BaseVariableWidthVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateOffsetBuffer(vector, valueCount);\n+    int lastOffset = valueCount == 0 ? 0 :\n+        vector.getOffsetBuffer().getInt(valueCount * BaseVariableWidthVector.OFFSET_WIDTH);\n+    validateDataBuffer(vector, lastOffset);\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(BaseLargeVariableWidthVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateLargeOffsetBuffer(vector, valueCount);\n+    long lastOffset = valueCount == 0 ? 0L :\n+        vector.getOffsetBuffer().getLong((long) valueCount * BaseLargeVariableWidthVector.OFFSET_WIDTH);\n+    validateDataBuffer(vector, lastOffset);\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(ListVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateOffsetBuffer(vector, valueCount);\n+\n+    FieldVector dataVector = vector.getDataVector();\n+    int lastOffset = valueCount == 0 ? 0 :\n+        vector.getOffsetBuffer().getInt(valueCount * BaseVariableWidthVector.OFFSET_WIDTH);\n+    int dataVectorLength = dataVector == null ? 0 : dataVector.getValueCount();\n+    validateOrThrow(dataVectorLength >= lastOffset,\n+        \"Inner vector does not contain enough elements.\");\n+\n+    if (dataVector != null) {\n+      dataVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(FixedSizeListVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    FieldVector dataVector = vector.getDataVector();\n+    int dataVectorLength = dataVector == null ? 0 : dataVector.getValueCount();\n+    validateOrThrow(dataVectorLength >= valueCount * vector.getListSize(),\n+        \"Inner vector does not contain enough elements.\");\n+    if (dataVector != null) {\n+      dataVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(LargeListVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateLargeOffsetBuffer(vector, valueCount);\n+\n+    FieldVector dataVector = vector.getDataVector();\n+    long lastOffset = valueCount == 0 ? 0 :\n+        vector.getOffsetBuffer().getLong(valueCount * BaseLargeVariableWidthVector.OFFSET_WIDTH);\n+    int dataVectorLength = dataVector == null ? 0 : dataVector.getValueCount();\n+    validateOrThrow(dataVectorLength >= lastOffset,\n+        \"Inner vector does not contain enough elements.\");\n+\n+    if (dataVector != null) {\n+      dataVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(NonNullableStructVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    for (ValueVector subVector : vector.getChildrenFromFields()) {\n+      validateOrThrow(valueCount == subVector.getValueCount(),\n+          \"Struct vector length not equal to child vector length\");\n+      subVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(UnionVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    for (ValueVector subVector : vector.getChildrenFromFields()) {\n\nReview comment:\n       should we validate type buffers?\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/validate/ValidateVectorBufferVisitor.java\n##########\n@@ -0,0 +1,221 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.validate;\n+\n+import static org.apache.arrow.vector.validate.ValidateUtility.validateOrThrow;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseLargeVariableWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.TypeLayout;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.compare.VectorVisitor;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.NonNullableStructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+\n+/**\n+ * Visitor to validate vector buffers.\n+ */\n+public class ValidateVectorBufferVisitor implements VectorVisitor<Void, Void> {\n+\n+  private void validateVectorCommon(ValueVector vector) {\n+    ArrowType arrowType = vector.getField().getType();\n+    validateOrThrow(vector.getValueCount() >= 0, \"vector valueCount is negative\");\n+\n+    if (vector instanceof FieldVector) {\n+      FieldVector fieldVector = (FieldVector) vector;\n+      int typeBufferCount = TypeLayout.getTypeBufferCount(arrowType);\n+      validateOrThrow(fieldVector.getFieldBuffers().size() == typeBufferCount,\n+          String.format(\"Expected %s buffers in vector of type %s, got %s\",\n+              typeBufferCount, vector.getField().getType().toString(), fieldVector.getFieldBuffers().size()));\n+    }\n+  }\n+\n+  private void validateValidityBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf validityBuffer = vector.getValidityBuffer();\n+    validateOrThrow(validityBuffer != null, \"The validity buffer is null.\");\n+    validateOrThrow(validityBuffer.capacity() * 8 >= valueCount, \"No enough capacity for the validity buffer.\");\n+  }\n+\n+  private void validateOffsetBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+    validateOrThrow(offsetBuffer != null, \"The offset buffer is null.\");\n+    if (valueCount > 0) {\n+      validateOrThrow(offsetBuffer.capacity() >= (valueCount + 1) * 4, \"No enough capacity for the offset buffer.\");\n+    }\n+  }\n+\n+  private void validateLargeOffsetBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+    validateOrThrow(offsetBuffer != null, \"The large offset buffer is null.\");\n+    if (valueCount > 0) {\n+      validateOrThrow(offsetBuffer.capacity() >= (valueCount + 1) * 8,\n+          \"No enough capacity for the large offset buffer.\");\n+    }\n+  }\n+\n+  private void validateFixedWidthDataBuffer(ValueVector vector, int valueCount, int bitWidth) {\n+    ArrowBuf dataBuffer = vector.getDataBuffer();\n+    validateOrThrow(dataBuffer != null, \"The fixed width data buffer is null.\");\n+    validateOrThrow((long) bitWidth * valueCount <= dataBuffer.capacity() * 8L,\n+        \"No enough capacity for fixed width data buffer\");\n+  }\n+\n+  private void validateDataBuffer(ValueVector vector, long minCapacity) {\n+    ArrowBuf dataBuffer = vector.getDataBuffer();\n+    validateOrThrow(dataBuffer != null, \"The data buffer is null.\");\n+    validateOrThrow(dataBuffer.capacity() >= minCapacity, \"No enough capacity for data buffer\");\n+  }\n+\n+  @Override\n+  public Void visit(BaseFixedWidthVector vector, Void value) {\n+    int bitWidth = (vector instanceof BitVector) ? 1 : vector.getTypeWidth() * 8;\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateFixedWidthDataBuffer(vector, valueCount, bitWidth);\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(BaseVariableWidthVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateOffsetBuffer(vector, valueCount);\n+    int lastOffset = valueCount == 0 ? 0 :\n+        vector.getOffsetBuffer().getInt(valueCount * BaseVariableWidthVector.OFFSET_WIDTH);\n+    validateDataBuffer(vector, lastOffset);\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(BaseLargeVariableWidthVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateLargeOffsetBuffer(vector, valueCount);\n+    long lastOffset = valueCount == 0 ? 0L :\n+        vector.getOffsetBuffer().getLong((long) valueCount * BaseLargeVariableWidthVector.OFFSET_WIDTH);\n+    validateDataBuffer(vector, lastOffset);\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(ListVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateOffsetBuffer(vector, valueCount);\n+\n+    FieldVector dataVector = vector.getDataVector();\n+    int lastOffset = valueCount == 0 ? 0 :\n+        vector.getOffsetBuffer().getInt(valueCount * BaseVariableWidthVector.OFFSET_WIDTH);\n+    int dataVectorLength = dataVector == null ? 0 : dataVector.getValueCount();\n+    validateOrThrow(dataVectorLength >= lastOffset,\n+        \"Inner vector does not contain enough elements.\");\n+\n+    if (dataVector != null) {\n+      dataVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(FixedSizeListVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    FieldVector dataVector = vector.getDataVector();\n+    int dataVectorLength = dataVector == null ? 0 : dataVector.getValueCount();\n+    validateOrThrow(dataVectorLength >= valueCount * vector.getListSize(),\n+        \"Inner vector does not contain enough elements.\");\n+    if (dataVector != null) {\n+      dataVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(LargeListVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateLargeOffsetBuffer(vector, valueCount);\n+\n+    FieldVector dataVector = vector.getDataVector();\n+    long lastOffset = valueCount == 0 ? 0 :\n+        vector.getOffsetBuffer().getLong(valueCount * BaseLargeVariableWidthVector.OFFSET_WIDTH);\n+    int dataVectorLength = dataVector == null ? 0 : dataVector.getValueCount();\n+    validateOrThrow(dataVectorLength >= lastOffset,\n+        \"Inner vector does not contain enough elements.\");\n+\n+    if (dataVector != null) {\n+      dataVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(NonNullableStructVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    for (ValueVector subVector : vector.getChildrenFromFields()) {\n+      validateOrThrow(valueCount == subVector.getValueCount(),\n+          \"Struct vector length not equal to child vector length\");\n+      subVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(UnionVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    for (ValueVector subVector : vector.getChildrenFromFields()) {\n+      validateOrThrow(valueCount == subVector.getValueCount(),\n+          \"Union vector length not equal to child vector length\");\n+      subVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(DenseUnionVector vector, Void value) {\n+    validateVectorCommon(vector);\n+    for (ValueVector subVector : vector.getChildrenFromFields()) {\n\nReview comment:\n       I think the dense union should have its offsets validated\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/validate/ValidateVectorDataVisitor.java\n##########\n@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.validate;\n+\n+import static org.apache.arrow.vector.validate.ValidateUtility.validateOrThrow;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseLargeVariableWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.compare.VectorVisitor;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.NonNullableStructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+\n+/**\n+ * Utility for validating vector data.\n+ */\n+public class ValidateVectorDataVisitor implements VectorVisitor<Void, Void> {\n+\n+  private void validateOffsetBuffer(ValueVector vector, int valueCount) {\n+    if (valueCount == 0) {\n+      return;\n+    }\n+    ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+\n+    // verify that the values in the offset buffer is non-decreasing\n+    int prevValue = offsetBuffer.getInt(0);\n+    for (int i = 1; i <= valueCount; i++) {\n\nReview comment:\n       this wouldn't work for the union offset buffer which has `valueCount`  items\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/validate/TestValidateVectorFull.java\n##########\n@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.validate;\n+\n+import static org.apache.arrow.vector.testing.ValueVectorDataPopulator.setVector;\n+import static org.apache.arrow.vector.util.ValueVectorUtility.validateFull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.Arrays;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.LargeVarCharVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.testing.ValueVectorDataPopulator;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestValidateVectorFull {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void init() {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+  }\n+\n+  @After\n+  public void terminate() throws Exception {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testBaseVariableWidthVector() {\n+    try (final VarCharVector vector = new VarCharVector(\"v\", allocator)) {\n+      validateFull(vector);\n+      setVector(vector, \"aaa\", \"bbb\", \"ccc\");\n+      validateFull(vector);\n+\n+      ArrowBuf offsetBuf = vector.getOffsetBuffer();\n+      offsetBuf.setInt(0, 100);\n+      offsetBuf.setInt(4, 50);\n+\n+      ValidateUtility.ValidateException e = assertThrows(ValidateUtility.ValidateException.class,\n+          () -> validateFull(vector));\n+      assertTrue(e.getMessage().contains(\"The values in the offset buffer are decreasing\"));\n+    }\n+  }\n+\n+  @Test\n+  public void testBaseLargeVariableWidthVector() {\n+    try (final LargeVarCharVector vector = new LargeVarCharVector(\"v\", allocator)) {\n+      validateFull(vector);\n+      setVector(vector, \"aaa\", \"bbb\", null, \"ccc\");\n+      validateFull(vector);\n+\n+      ArrowBuf offsetBuf = vector.getOffsetBuffer();\n+      offsetBuf.setInt(0, 100);\n+      offsetBuf.setInt(4, 50);\n+\n+      ValidateUtility.ValidateException e = assertThrows(ValidateUtility.ValidateException.class,\n+          () -> validateFull(vector));\n+      assertTrue(e.getMessage().contains(\"The values in the large offset buffer are decreasing\"));\n+    }\n+  }\n+\n+  @Test\n+  public void testListVector() {\n+    try (final ListVector vector = ListVector.empty(\"v\", allocator)) {\n+      validateFull(vector);\n+      setVector(vector, Arrays.asList(1, 2, 3), Arrays.asList(4, 5), Arrays.asList(6, 7, 8, 9));\n+      validateFull(vector);\n+\n+      ArrowBuf offsetBuf = vector.getOffsetBuffer();\n+      offsetBuf.setInt(0, 100);\n+      offsetBuf.setInt(8, 50);\n+\n+      ValidateUtility.ValidateException e = assertThrows(ValidateUtility.ValidateException.class,\n+          () -> validateFull(vector));\n+      assertTrue(e.getMessage().contains(\"The values in the offset buffer are decreasing\"));\n+    }\n+  }\n+\n+  @Test\n+  public void testLargeListVector() {\n+    try (final LargeListVector vector = LargeListVector.empty(\"v\", allocator)) {\n+      validateFull(vector);\n+      setVector(vector, Arrays.asList(1, 2, 3), Arrays.asList(4, 5), Arrays.asList(6, 7, 8, 9));\n+      validateFull(vector);\n+\n+      ArrowBuf offsetBuf = vector.getOffsetBuffer();\n+      offsetBuf.setLong(0, 100);\n+      offsetBuf.setLong(16, 50);\n+\n+      ValidateUtility.ValidateException e = assertThrows(ValidateUtility.ValidateException.class,\n+          () -> validateFull(vector));\n+      assertTrue(e.getMessage().contains(\"The values in the large offset buffer are decreasing\"));\n+    }\n+  }\n+\n+  @Test\n+  public void testStructVectorRangeEquals() {\n+    try (final StructVector vector = StructVector.empty(\"struct\", allocator)) {\n+      IntVector intVector =\n+          vector.addOrGet(\"f0\", FieldType.nullable(new ArrowType.Int(32, true)), IntVector.class);\n+      VarCharVector strVector =\n+          vector.addOrGet(\"f1\", FieldType.nullable(new ArrowType.Utf8()), VarCharVector.class);\n+\n+      validateFull(vector);\n+      validateFull(intVector);\n+      validateFull(strVector);\n+\n+      ValueVectorDataPopulator.setVector(intVector, 1, 2, 3, 4, 5);\n+      ValueVectorDataPopulator.setVector(strVector, \"a\", \"b\", \"c\", \"d\", \"e\");\n+      vector.setValueCount(5);\n+\n+      validateFull(vector);\n+      validateFull(intVector);\n+      validateFull(strVector);\n+\n+      ArrowBuf offsetBuf = strVector.getOffsetBuffer();\n+      offsetBuf.setInt(0, 100);\n+      offsetBuf.setInt(8, 50);\n+\n+      ValidateUtility.ValidateException e = assertThrows(ValidateUtility.ValidateException.class,\n+          () -> validateFull(strVector));\n+      assertTrue(e.getMessage().contains(\"The values in the offset buffer are decreasing\"));\n+\n+      e = assertThrows(ValidateUtility.ValidateException.class,\n+          () -> validateFull(vector));\n+      assertTrue(e.getMessage().contains(\"The values in the offset buffer are decreasing\"));\n+    }\n+  }\n+}\n\nReview comment:\n       Should we test Unions?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-06T10:27:00.456+0000",
                    "updated": "2020-08-06T10:27:00.456+0000",
                    "started": "2020-08-06T10:27:00.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "467211",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/467256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#issuecomment-669891358\n\n\n   @rymurr Thanks again for your comments. I will carefully examine each one, and revise the PR accordingly. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-06T12:15:59.506+0000",
                    "updated": "2020-08-06T12:15:59.506+0000",
                    "started": "2020-08-06T12:15:59.506+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "467256",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/467825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#discussion_r467003950\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/validate/ValidateVectorBufferVisitor.java\n##########\n@@ -0,0 +1,221 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.validate;\n+\n+import static org.apache.arrow.vector.validate.ValidateUtility.validateOrThrow;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseLargeVariableWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.TypeLayout;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.compare.VectorVisitor;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.NonNullableStructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+\n+/**\n+ * Visitor to validate vector buffers.\n+ */\n+public class ValidateVectorBufferVisitor implements VectorVisitor<Void, Void> {\n+\n+  private void validateVectorCommon(ValueVector vector) {\n+    ArrowType arrowType = vector.getField().getType();\n+    validateOrThrow(vector.getValueCount() >= 0, \"vector valueCount is negative\");\n+\n+    if (vector instanceof FieldVector) {\n+      FieldVector fieldVector = (FieldVector) vector;\n+      int typeBufferCount = TypeLayout.getTypeBufferCount(arrowType);\n+      validateOrThrow(fieldVector.getFieldBuffers().size() == typeBufferCount,\n+          String.format(\"Expected %s buffers in vector of type %s, got %s\",\n+              typeBufferCount, vector.getField().getType().toString(), fieldVector.getFieldBuffers().size()));\n+    }\n+  }\n+\n+  private void validateValidityBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf validityBuffer = vector.getValidityBuffer();\n+    validateOrThrow(validityBuffer != null, \"The validity buffer is null.\");\n+    validateOrThrow(validityBuffer.capacity() * 8 >= valueCount, \"No enough capacity for the validity buffer.\");\n+  }\n+\n+  private void validateOffsetBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+    validateOrThrow(offsetBuffer != null, \"The offset buffer is null.\");\n+    if (valueCount > 0) {\n+      validateOrThrow(offsetBuffer.capacity() >= (valueCount + 1) * 4, \"No enough capacity for the offset buffer.\");\n+    }\n+  }\n+\n+  private void validateLargeOffsetBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+    validateOrThrow(offsetBuffer != null, \"The large offset buffer is null.\");\n+    if (valueCount > 0) {\n+      validateOrThrow(offsetBuffer.capacity() >= (valueCount + 1) * 8,\n+          \"No enough capacity for the large offset buffer.\");\n+    }\n+  }\n+\n+  private void validateFixedWidthDataBuffer(ValueVector vector, int valueCount, int bitWidth) {\n+    ArrowBuf dataBuffer = vector.getDataBuffer();\n+    validateOrThrow(dataBuffer != null, \"The fixed width data buffer is null.\");\n+    validateOrThrow((long) bitWidth * valueCount <= dataBuffer.capacity() * 8L,\n+        \"No enough capacity for fixed width data buffer\");\n+  }\n+\n+  private void validateDataBuffer(ValueVector vector, long minCapacity) {\n+    ArrowBuf dataBuffer = vector.getDataBuffer();\n+    validateOrThrow(dataBuffer != null, \"The data buffer is null.\");\n+    validateOrThrow(dataBuffer.capacity() >= minCapacity, \"No enough capacity for data buffer\");\n+  }\n+\n+  @Override\n+  public Void visit(BaseFixedWidthVector vector, Void value) {\n+    int bitWidth = (vector instanceof BitVector) ? 1 : vector.getTypeWidth() * 8;\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateFixedWidthDataBuffer(vector, valueCount, bitWidth);\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(BaseVariableWidthVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateOffsetBuffer(vector, valueCount);\n+    int lastOffset = valueCount == 0 ? 0 :\n+        vector.getOffsetBuffer().getInt(valueCount * BaseVariableWidthVector.OFFSET_WIDTH);\n+    validateDataBuffer(vector, lastOffset);\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(BaseLargeVariableWidthVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateLargeOffsetBuffer(vector, valueCount);\n+    long lastOffset = valueCount == 0 ? 0L :\n+        vector.getOffsetBuffer().getLong((long) valueCount * BaseLargeVariableWidthVector.OFFSET_WIDTH);\n+    validateDataBuffer(vector, lastOffset);\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(ListVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateOffsetBuffer(vector, valueCount);\n+\n+    FieldVector dataVector = vector.getDataVector();\n+    int lastOffset = valueCount == 0 ? 0 :\n+        vector.getOffsetBuffer().getInt(valueCount * BaseVariableWidthVector.OFFSET_WIDTH);\n+    int dataVectorLength = dataVector == null ? 0 : dataVector.getValueCount();\n+    validateOrThrow(dataVectorLength >= lastOffset,\n+        \"Inner vector does not contain enough elements.\");\n+\n+    if (dataVector != null) {\n+      dataVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(FixedSizeListVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    FieldVector dataVector = vector.getDataVector();\n+    int dataVectorLength = dataVector == null ? 0 : dataVector.getValueCount();\n+    validateOrThrow(dataVectorLength >= valueCount * vector.getListSize(),\n+        \"Inner vector does not contain enough elements.\");\n+    if (dataVector != null) {\n+      dataVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(LargeListVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateLargeOffsetBuffer(vector, valueCount);\n+\n+    FieldVector dataVector = vector.getDataVector();\n+    long lastOffset = valueCount == 0 ? 0 :\n+        vector.getOffsetBuffer().getLong(valueCount * BaseLargeVariableWidthVector.OFFSET_WIDTH);\n+    int dataVectorLength = dataVector == null ? 0 : dataVector.getValueCount();\n+    validateOrThrow(dataVectorLength >= lastOffset,\n+        \"Inner vector does not contain enough elements.\");\n+\n+    if (dataVector != null) {\n+      dataVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(NonNullableStructVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    for (ValueVector subVector : vector.getChildrenFromFields()) {\n+      validateOrThrow(valueCount == subVector.getValueCount(),\n+          \"Struct vector length not equal to child vector length\");\n+      subVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(UnionVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    for (ValueVector subVector : vector.getChildrenFromFields()) {\n+      validateOrThrow(valueCount == subVector.getValueCount(),\n+          \"Union vector length not equal to child vector length\");\n+      subVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(DenseUnionVector vector, Void value) {\n+    validateVectorCommon(vector);\n+    for (ValueVector subVector : vector.getChildrenFromFields()) {\n\nReview comment:\n       Agreed. We have added checks for the type buffer of union vectors, and checks for type & offset buffers for dense union vectors. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-07T12:18:18.976+0000",
                    "updated": "2020-08-07T12:18:18.976+0000",
                    "started": "2020-08-07T12:18:18.975+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "467825",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/467826",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#discussion_r467004312\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/validate/ValidateVectorBufferVisitor.java\n##########\n@@ -0,0 +1,221 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.validate;\n+\n+import static org.apache.arrow.vector.validate.ValidateUtility.validateOrThrow;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseLargeVariableWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.TypeLayout;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.compare.VectorVisitor;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.NonNullableStructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+\n+/**\n+ * Visitor to validate vector buffers.\n+ */\n+public class ValidateVectorBufferVisitor implements VectorVisitor<Void, Void> {\n+\n+  private void validateVectorCommon(ValueVector vector) {\n+    ArrowType arrowType = vector.getField().getType();\n+    validateOrThrow(vector.getValueCount() >= 0, \"vector valueCount is negative\");\n+\n+    if (vector instanceof FieldVector) {\n+      FieldVector fieldVector = (FieldVector) vector;\n+      int typeBufferCount = TypeLayout.getTypeBufferCount(arrowType);\n+      validateOrThrow(fieldVector.getFieldBuffers().size() == typeBufferCount,\n+          String.format(\"Expected %s buffers in vector of type %s, got %s\",\n+              typeBufferCount, vector.getField().getType().toString(), fieldVector.getFieldBuffers().size()));\n+    }\n+  }\n+\n+  private void validateValidityBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf validityBuffer = vector.getValidityBuffer();\n+    validateOrThrow(validityBuffer != null, \"The validity buffer is null.\");\n+    validateOrThrow(validityBuffer.capacity() * 8 >= valueCount, \"No enough capacity for the validity buffer.\");\n+  }\n+\n+  private void validateOffsetBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+    validateOrThrow(offsetBuffer != null, \"The offset buffer is null.\");\n+    if (valueCount > 0) {\n+      validateOrThrow(offsetBuffer.capacity() >= (valueCount + 1) * 4, \"No enough capacity for the offset buffer.\");\n+    }\n+  }\n+\n+  private void validateLargeOffsetBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+    validateOrThrow(offsetBuffer != null, \"The large offset buffer is null.\");\n+    if (valueCount > 0) {\n+      validateOrThrow(offsetBuffer.capacity() >= (valueCount + 1) * 8,\n+          \"No enough capacity for the large offset buffer.\");\n+    }\n+  }\n+\n+  private void validateFixedWidthDataBuffer(ValueVector vector, int valueCount, int bitWidth) {\n+    ArrowBuf dataBuffer = vector.getDataBuffer();\n+    validateOrThrow(dataBuffer != null, \"The fixed width data buffer is null.\");\n+    validateOrThrow((long) bitWidth * valueCount <= dataBuffer.capacity() * 8L,\n+        \"No enough capacity for fixed width data buffer\");\n+  }\n+\n+  private void validateDataBuffer(ValueVector vector, long minCapacity) {\n+    ArrowBuf dataBuffer = vector.getDataBuffer();\n+    validateOrThrow(dataBuffer != null, \"The data buffer is null.\");\n+    validateOrThrow(dataBuffer.capacity() >= minCapacity, \"No enough capacity for data buffer\");\n+  }\n+\n+  @Override\n+  public Void visit(BaseFixedWidthVector vector, Void value) {\n+    int bitWidth = (vector instanceof BitVector) ? 1 : vector.getTypeWidth() * 8;\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateFixedWidthDataBuffer(vector, valueCount, bitWidth);\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(BaseVariableWidthVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateOffsetBuffer(vector, valueCount);\n+    int lastOffset = valueCount == 0 ? 0 :\n+        vector.getOffsetBuffer().getInt(valueCount * BaseVariableWidthVector.OFFSET_WIDTH);\n+    validateDataBuffer(vector, lastOffset);\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(BaseLargeVariableWidthVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateLargeOffsetBuffer(vector, valueCount);\n+    long lastOffset = valueCount == 0 ? 0L :\n+        vector.getOffsetBuffer().getLong((long) valueCount * BaseLargeVariableWidthVector.OFFSET_WIDTH);\n+    validateDataBuffer(vector, lastOffset);\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(ListVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateOffsetBuffer(vector, valueCount);\n+\n+    FieldVector dataVector = vector.getDataVector();\n+    int lastOffset = valueCount == 0 ? 0 :\n+        vector.getOffsetBuffer().getInt(valueCount * BaseVariableWidthVector.OFFSET_WIDTH);\n+    int dataVectorLength = dataVector == null ? 0 : dataVector.getValueCount();\n+    validateOrThrow(dataVectorLength >= lastOffset,\n+        \"Inner vector does not contain enough elements.\");\n+\n+    if (dataVector != null) {\n+      dataVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(FixedSizeListVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    FieldVector dataVector = vector.getDataVector();\n+    int dataVectorLength = dataVector == null ? 0 : dataVector.getValueCount();\n+    validateOrThrow(dataVectorLength >= valueCount * vector.getListSize(),\n+        \"Inner vector does not contain enough elements.\");\n+    if (dataVector != null) {\n+      dataVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(LargeListVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    validateLargeOffsetBuffer(vector, valueCount);\n+\n+    FieldVector dataVector = vector.getDataVector();\n+    long lastOffset = valueCount == 0 ? 0 :\n+        vector.getOffsetBuffer().getLong(valueCount * BaseLargeVariableWidthVector.OFFSET_WIDTH);\n+    int dataVectorLength = dataVector == null ? 0 : dataVector.getValueCount();\n+    validateOrThrow(dataVectorLength >= lastOffset,\n+        \"Inner vector does not contain enough elements.\");\n+\n+    if (dataVector != null) {\n+      dataVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(NonNullableStructVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    validateValidityBuffer(vector, valueCount);\n+    for (ValueVector subVector : vector.getChildrenFromFields()) {\n+      validateOrThrow(valueCount == subVector.getValueCount(),\n+          \"Struct vector length not equal to child vector length\");\n+      subVector.accept(this, null);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Void visit(UnionVector vector, Void value) {\n+    int valueCount = vector.getValueCount();\n+    validateVectorCommon(vector);\n+    for (ValueVector subVector : vector.getChildrenFromFields()) {\n\nReview comment:\n       Sure. We have added checks for types buffers for union and dense vectors. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-07T12:19:12.202+0000",
                    "updated": "2020-08-07T12:19:12.202+0000",
                    "started": "2020-08-07T12:19:12.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "467826",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/467827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#discussion_r467004875\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/validate/ValidateVectorDataVisitor.java\n##########\n@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.validate;\n+\n+import static org.apache.arrow.vector.validate.ValidateUtility.validateOrThrow;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseLargeVariableWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.compare.VectorVisitor;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.NonNullableStructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+\n+/**\n+ * Utility for validating vector data.\n+ */\n+public class ValidateVectorDataVisitor implements VectorVisitor<Void, Void> {\n+\n+  private void validateOffsetBuffer(ValueVector vector, int valueCount) {\n+    if (valueCount == 0) {\n+      return;\n+    }\n+    ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+\n+    // verify that the values in the offset buffer is non-decreasing\n+    int prevValue = offsetBuffer.getInt(0);\n+    for (int i = 1; i <= valueCount; i++) {\n\nReview comment:\n       Sure. Thanks for your kind reminder.\r\n   We provide separate check logic for  dense union vectors in the revised PR. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-07T12:20:25.837+0000",
                    "updated": "2020-08-07T12:20:25.837+0000",
                    "started": "2020-08-07T12:20:25.837+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "467827",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/467828",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#discussion_r467005269\n\n\n\n##########\nFile path: java/vector/src/test/java/org/apache/arrow/vector/validate/TestValidateVectorFull.java\n##########\n@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.validate;\n+\n+import static org.apache.arrow.vector.testing.ValueVectorDataPopulator.setVector;\n+import static org.apache.arrow.vector.util.ValueVectorUtility.validateFull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.Arrays;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.LargeVarCharVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.testing.ValueVectorDataPopulator;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestValidateVectorFull {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void init() {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+  }\n+\n+  @After\n+  public void terminate() throws Exception {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testBaseVariableWidthVector() {\n+    try (final VarCharVector vector = new VarCharVector(\"v\", allocator)) {\n+      validateFull(vector);\n+      setVector(vector, \"aaa\", \"bbb\", \"ccc\");\n+      validateFull(vector);\n+\n+      ArrowBuf offsetBuf = vector.getOffsetBuffer();\n+      offsetBuf.setInt(0, 100);\n+      offsetBuf.setInt(4, 50);\n+\n+      ValidateUtility.ValidateException e = assertThrows(ValidateUtility.ValidateException.class,\n+          () -> validateFull(vector));\n+      assertTrue(e.getMessage().contains(\"The values in the offset buffer are decreasing\"));\n+    }\n+  }\n+\n+  @Test\n+  public void testBaseLargeVariableWidthVector() {\n+    try (final LargeVarCharVector vector = new LargeVarCharVector(\"v\", allocator)) {\n+      validateFull(vector);\n+      setVector(vector, \"aaa\", \"bbb\", null, \"ccc\");\n+      validateFull(vector);\n+\n+      ArrowBuf offsetBuf = vector.getOffsetBuffer();\n+      offsetBuf.setInt(0, 100);\n+      offsetBuf.setInt(4, 50);\n+\n+      ValidateUtility.ValidateException e = assertThrows(ValidateUtility.ValidateException.class,\n+          () -> validateFull(vector));\n+      assertTrue(e.getMessage().contains(\"The values in the large offset buffer are decreasing\"));\n+    }\n+  }\n+\n+  @Test\n+  public void testListVector() {\n+    try (final ListVector vector = ListVector.empty(\"v\", allocator)) {\n+      validateFull(vector);\n+      setVector(vector, Arrays.asList(1, 2, 3), Arrays.asList(4, 5), Arrays.asList(6, 7, 8, 9));\n+      validateFull(vector);\n+\n+      ArrowBuf offsetBuf = vector.getOffsetBuffer();\n+      offsetBuf.setInt(0, 100);\n+      offsetBuf.setInt(8, 50);\n+\n+      ValidateUtility.ValidateException e = assertThrows(ValidateUtility.ValidateException.class,\n+          () -> validateFull(vector));\n+      assertTrue(e.getMessage().contains(\"The values in the offset buffer are decreasing\"));\n+    }\n+  }\n+\n+  @Test\n+  public void testLargeListVector() {\n+    try (final LargeListVector vector = LargeListVector.empty(\"v\", allocator)) {\n+      validateFull(vector);\n+      setVector(vector, Arrays.asList(1, 2, 3), Arrays.asList(4, 5), Arrays.asList(6, 7, 8, 9));\n+      validateFull(vector);\n+\n+      ArrowBuf offsetBuf = vector.getOffsetBuffer();\n+      offsetBuf.setLong(0, 100);\n+      offsetBuf.setLong(16, 50);\n+\n+      ValidateUtility.ValidateException e = assertThrows(ValidateUtility.ValidateException.class,\n+          () -> validateFull(vector));\n+      assertTrue(e.getMessage().contains(\"The values in the large offset buffer are decreasing\"));\n+    }\n+  }\n+\n+  @Test\n+  public void testStructVectorRangeEquals() {\n+    try (final StructVector vector = StructVector.empty(\"struct\", allocator)) {\n+      IntVector intVector =\n+          vector.addOrGet(\"f0\", FieldType.nullable(new ArrowType.Int(32, true)), IntVector.class);\n+      VarCharVector strVector =\n+          vector.addOrGet(\"f1\", FieldType.nullable(new ArrowType.Utf8()), VarCharVector.class);\n+\n+      validateFull(vector);\n+      validateFull(intVector);\n+      validateFull(strVector);\n+\n+      ValueVectorDataPopulator.setVector(intVector, 1, 2, 3, 4, 5);\n+      ValueVectorDataPopulator.setVector(strVector, \"a\", \"b\", \"c\", \"d\", \"e\");\n+      vector.setValueCount(5);\n+\n+      validateFull(vector);\n+      validateFull(intVector);\n+      validateFull(strVector);\n+\n+      ArrowBuf offsetBuf = strVector.getOffsetBuffer();\n+      offsetBuf.setInt(0, 100);\n+      offsetBuf.setInt(8, 50);\n+\n+      ValidateUtility.ValidateException e = assertThrows(ValidateUtility.ValidateException.class,\n+          () -> validateFull(strVector));\n+      assertTrue(e.getMessage().contains(\"The values in the offset buffer are decreasing\"));\n+\n+      e = assertThrows(ValidateUtility.ValidateException.class,\n+          () -> validateFull(vector));\n+      assertTrue(e.getMessage().contains(\"The values in the offset buffer are decreasing\"));\n+    }\n+  }\n+}\n\nReview comment:\n       We have added tests for union and dense union vectors. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-07T12:21:09.778+0000",
                    "updated": "2020-08-07T12:21:09.778+0000",
                    "started": "2020-08-07T12:21:09.778+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "467828",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/468170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#discussion_r467354214\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/validate/ValidateVectorBufferVisitor.java\n##########\n@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.validate;\n+\n+import static org.apache.arrow.vector.validate.ValidateUtility.validateOrThrow;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseLargeVariableWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.TypeLayout;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.compare.VectorVisitor;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.NonNullableStructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+\n+/**\n+ * Visitor to validate vector buffers.\n+ */\n+public class ValidateVectorBufferVisitor implements VectorVisitor<Void, Void> {\n+\n+  private void validateVectorCommon(ValueVector vector) {\n+    ArrowType arrowType = vector.getField().getType();\n+    validateOrThrow(vector.getValueCount() >= 0, \"vector valueCount is negative\");\n+\n+    if (vector instanceof FieldVector) {\n+      FieldVector fieldVector = (FieldVector) vector;\n+      int typeBufferCount = TypeLayout.getTypeBufferCount(arrowType);\n+      validateOrThrow(fieldVector.getFieldBuffers().size() == typeBufferCount,\n+          String.format(\"Expected %s buffers in vector of type %s, got %s\",\n+              typeBufferCount, vector.getField().getType().toString(), fieldVector.getFieldBuffers().size()));\n+    }\n+  }\n+\n+  private void validateValidityBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf validityBuffer = vector.getValidityBuffer();\n+    validateOrThrow(validityBuffer != null, \"The validity buffer is null.\");\n+    validateOrThrow(validityBuffer.capacity() * 8 >= valueCount, \"No enough capacity for the validity buffer.\");\n+  }\n+\n+  private void validateOffsetBuffer(ValueVector vector, long minCapacity) {\n+    ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+    validateOrThrow(offsetBuffer != null, \"The offset buffer is null.\");\n+    validateOrThrow(offsetBuffer.capacity() >= minCapacity, \"No enough capacity for the offset buffer.\");\n+  }\n+\n+  private void validateFixedWidthDataBuffer(ValueVector vector, int valueCount, int bitWidth) {\n+    ArrowBuf dataBuffer = vector.getDataBuffer();\n+    validateOrThrow(dataBuffer != null, \"The fixed width data buffer is null.\");\n+    validateOrThrow((long) bitWidth * valueCount <= dataBuffer.capacity() * 8L,\n+        \"No enough capacity for fixed width data buffer\");\n\nReview comment:\n       for most error messages it would be useful to include actual numbers.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-08T03:13:47.265+0000",
                    "updated": "2020-08-08T03:13:47.265+0000",
                    "started": "2020-08-08T03:13:47.265+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468170",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/468453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on a change in pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#discussion_r467740638\n\n\n\n##########\nFile path: java/vector/src/main/java/org/apache/arrow/vector/validate/ValidateVectorBufferVisitor.java\n##########\n@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.validate;\n+\n+import static org.apache.arrow.vector.validate.ValidateUtility.validateOrThrow;\n+\n+import org.apache.arrow.memory.ArrowBuf;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseLargeVariableWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.TypeLayout;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.compare.VectorVisitor;\n+import org.apache.arrow.vector.complex.DenseUnionVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.LargeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.NonNullableStructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+\n+/**\n+ * Visitor to validate vector buffers.\n+ */\n+public class ValidateVectorBufferVisitor implements VectorVisitor<Void, Void> {\n+\n+  private void validateVectorCommon(ValueVector vector) {\n+    ArrowType arrowType = vector.getField().getType();\n+    validateOrThrow(vector.getValueCount() >= 0, \"vector valueCount is negative\");\n+\n+    if (vector instanceof FieldVector) {\n+      FieldVector fieldVector = (FieldVector) vector;\n+      int typeBufferCount = TypeLayout.getTypeBufferCount(arrowType);\n+      validateOrThrow(fieldVector.getFieldBuffers().size() == typeBufferCount,\n+          String.format(\"Expected %s buffers in vector of type %s, got %s\",\n+              typeBufferCount, vector.getField().getType().toString(), fieldVector.getFieldBuffers().size()));\n+    }\n+  }\n+\n+  private void validateValidityBuffer(ValueVector vector, int valueCount) {\n+    ArrowBuf validityBuffer = vector.getValidityBuffer();\n+    validateOrThrow(validityBuffer != null, \"The validity buffer is null.\");\n+    validateOrThrow(validityBuffer.capacity() * 8 >= valueCount, \"No enough capacity for the validity buffer.\");\n+  }\n+\n+  private void validateOffsetBuffer(ValueVector vector, long minCapacity) {\n+    ArrowBuf offsetBuffer = vector.getOffsetBuffer();\n+    validateOrThrow(offsetBuffer != null, \"The offset buffer is null.\");\n+    validateOrThrow(offsetBuffer.capacity() >= minCapacity, \"No enough capacity for the offset buffer.\");\n+  }\n+\n+  private void validateFixedWidthDataBuffer(ValueVector vector, int valueCount, int bitWidth) {\n+    ArrowBuf dataBuffer = vector.getDataBuffer();\n+    validateOrThrow(dataBuffer != null, \"The fixed width data buffer is null.\");\n+    validateOrThrow((long) bitWidth * valueCount <= dataBuffer.capacity() * 8L,\n+        \"No enough capacity for fixed width data buffer\");\n\nReview comment:\n       @emkornfield Thanks for the good suggestion. I have revised the PR to provide more details to the error messages. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-10T07:56:44.695+0000",
                    "updated": "2020-08-10T07:56:44.695+0000",
                    "started": "2020-08-10T07:56:44.695+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468453",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/471001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248#issuecomment-674347275\n\n\n   +1, thanks @liyafan82 \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-15T04:29:32.263+0000",
                    "updated": "2020-08-15T04:29:32.263+0000",
                    "started": "2020-08-15T04:29:32.262+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471001",
                    "issueId": "13297771"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/worklog/471002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield closed pull request #7248:\nURL: https://github.com/apache/arrow/pull/7248\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-15T04:29:55.363+0000",
                    "updated": "2020-08-15T04:29:55.363+0000",
                    "started": "2020-08-15T04:29:55.363+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471002",
                    "issueId": "13297771"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7b2c2629[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1195738e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5fab4210[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@65185368[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@34f7aa51[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@10b06614[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@158e1dd0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@32aa9f1a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b061e3c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@28155f8e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d90b7c1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2ba4a326[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Aug 15 04:30:07 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-08-15T04:30:07.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8402/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-04-11T13:56:15.000+0000",
        "updated": "2020-08-15T04:30:07.000+0000",
        "timeoriginalestimate": null,
        "description": "We need to support ValidateFull methods in Java, just like we do in C++. \r\nThis is required by ARROW-5926.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Support ValidateFull methods in Java",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/comment/17109964",
                    "id": "17109964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "body": "The validate method was merged, I would like to take this issue as a follow-up if you don't mind :)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "created": "2020-05-18T07:13:53.912+0000",
                    "updated": "2020-05-18T07:13:53.912+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/comment/17110259",
                    "id": "17110259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "Oh sorry, I have already started working on this over the weekend. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2020-05-18T13:04:12.305+0000",
                    "updated": "2020-05-18T13:04:12.305+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13297771/comment/17178153",
                    "id": "17178153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 7248\n[https://github.com/apache/arrow/pull/7248]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-08-15T04:30:07.674+0000",
                    "updated": "2020-08-15T04:30:07.674+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0dj1c:",
        "customfield_12314139": null
    }
}