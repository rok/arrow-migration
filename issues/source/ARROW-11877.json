{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13362676",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362676",
    "key": "ARROW-11877",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "benchmark",
            "benchmarks",
            "dataset",
            "datasets",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12610003",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12610003",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13360956",
                    "key": "ARROW-11781",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360956",
                    "fields": {
                        "summary": "[Python] Reading small amount of files from a partitioned dataset is unexpectedly slow",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11877/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 5,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362676/worklog/561532",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #9638:\nURL: https://github.com/apache/arrow/pull/9638\n\n\n   This adds a microbenchmark for SimplifyWithGuarantee which, especially for a large dataset, can contribute a significant amount of time to reading a dataset, as it's used to evaluate partition expressions against the filter.\r\n   \r\n   Two different filters are tested: one is fully simplified, and one has had casts inserted (which will happen if you Bind() against a schema with different types).\r\n   Two different partition expressions are tested: one is fully simplified, and one compares against dictionary-encoded values (which will happen by default if you infer the schema for a Hive-partitioned, for example).\r\n   \r\n   All 4 combinations are additionally tested both when the filter matches the expression and when it does not match. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T19:00:30.959+0000",
                    "updated": "2021-03-05T19:00:30.959+0000",
                    "started": "2021-03-05T19:00:30.959+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561532",
                    "issueId": "13362676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362676/worklog/561533",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9638:\nURL: https://github.com/apache/arrow/pull/9638#issuecomment-791617925\n\n\n   Results\r\n   \r\n   ```\r\n   --------------------------------------------------------------------------------------------------------------\r\n   Benchmark                                                                    Time             CPU   Iterations\r\n   --------------------------------------------------------------------------------------------------------------\r\n   SimplifyQueryWithGuarantee/negative_lhs_simple_guarantee_simple           7729 ns         7729 ns        88034\r\n   SimplifyQueryWithGuarantee/negative_lhs_cast_guarantee_simple            10769 ns        10769 ns        64463\r\n   SimplifyQueryWithGuarantee/negative_lhs_simple_guarantee_dictionary      17703 ns        17703 ns        39026\r\n   SimplifyQueryWithGuarantee/negative_lhs_cast_guarantee_dictionary        21208 ns        21207 ns        32716\r\n   SimplifyQueryWithGuarantee/positive_lhs_simple_guarantee_simple           7689 ns         7689 ns        88028\r\n   SimplifyQueryWithGuarantee/positive_lhs_cast_guarantee_simple            10793 ns        10793 ns        63819\r\n   SimplifyQueryWithGuarantee/positive_lhs_simple_guarantee_dictionary      18147 ns        18146 ns        39027\r\n   SimplifyQueryWithGuarantee/positive_lhs_cast_guarantee_dictionary        21193 ns        21193 ns        33022\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T19:00:55.733+0000",
                    "updated": "2021-03-05T19:00:55.733+0000",
                    "started": "2021-03-05T19:00:55.733+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561533",
                    "issueId": "13362676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362676/worklog/561534",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9638:\nURL: https://github.com/apache/arrow/pull/9638#issuecomment-791618041\n\n\n   https://issues.apache.org/jira/browse/ARROW-11877\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T19:01:08.595+0000",
                    "updated": "2021-03-05T19:01:08.595+0000",
                    "started": "2021-03-05T19:01:08.594+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561534",
                    "issueId": "13362676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362676/worklog/563093",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9638:\nURL: https://github.com/apache/arrow/pull/9638#discussion_r590395994\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/expression_benchmark.cc\n##########\n@@ -0,0 +1,105 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <iostream>\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/dataset/expression.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/range.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+static std::shared_ptr<Partitioning> MakePartitioning() {\n+  auto schema = arrow::schema({\n+      arrow::field(\"a\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+      arrow::field(\"b\", arrow::dictionary(arrow::int32(), arrow::int64())),\n\nReview comment:\n       nit: we don't need to be explicit about the arrow namespace here\r\n   ```suggestion\r\n     auto schema = schema({\r\n         field(\"a\", dictionary(int32(), int64())),\r\n         feld(\"b\", dictionary(int32(), int64())),\r\n   ```\n\n##########\nFile path: cpp/src/arrow/dataset/expression_benchmark.cc\n##########\n@@ -0,0 +1,105 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <iostream>\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/dataset/expression.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/range.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+static std::shared_ptr<Partitioning> MakePartitioning() {\n+  auto schema = arrow::schema({\n+      arrow::field(\"a\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+      arrow::field(\"b\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+  });\n+  std::shared_ptr<Array> a_dict, b_dict;\n+  auto values = internal::Iota<int64_t>(100);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &a_dict);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &b_dict);\n+  ArrayVector dictionaries = {a_dict, b_dict};\n+  return std::make_shared<HivePartitioning>(schema, dictionaries);\n+}\n+\n+static Expression GetPartitionExpression(const std::string& path) {\n+  static std::shared_ptr<Partitioning> partitioning = MakePartitioning();\n+  ASSIGN_OR_ABORT(auto expr, partitioning->Parse(path));\n+  return expr;\n+}\n+\n+// A benchmark of SimplifyWithGuarantee using expressions arising from partitioning.\n+static void SimplifyQueryWithGuarantee(benchmark::State& state, Expression lhs,\n+                                       Expression guarantee) {\n+  auto schema = arrow::schema(\n+      {arrow::field(\"a\", arrow::int64()), arrow::field(\"b\", arrow::int64())});\n+  ASSIGN_OR_ABORT(lhs, lhs.Bind(*schema));\n+\n+  // std::cerr << \"LHS: \" << lhs.ToString() << std::endl;\n+  // std::cerr << \"Guarantee: \" << guarantee.ToString() << std::endl;\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(SimplifyWithGuarantee(lhs, guarantee));\n+  }\n+}\n+\n+auto cast_options = compute::CastOptions::Safe(arrow::int64());\n\nReview comment:\n       For readability:\r\n   ```suggestion\r\n   auto to_int64 = compute::CastOptions::Safe(arrow::int64());\r\n   ```\r\n   alternatively, we could promote the [cast convenience factory](https://github.com/apache/arrow/blob/af8e312121fb9c2c4825d540c7e735329ed7f30c/cpp/src/arrow/dataset/expression_test.cc#L46-L49) to expression.h\n\n##########\nFile path: cpp/src/arrow/dataset/expression_benchmark.cc\n##########\n@@ -0,0 +1,105 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <iostream>\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/dataset/expression.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/range.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+static std::shared_ptr<Partitioning> MakePartitioning() {\n+  auto schema = arrow::schema({\n+      arrow::field(\"a\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+      arrow::field(\"b\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+  });\n+  std::shared_ptr<Array> a_dict, b_dict;\n+  auto values = internal::Iota<int64_t>(100);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &a_dict);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &b_dict);\n+  ArrayVector dictionaries = {a_dict, b_dict};\n+  return std::make_shared<HivePartitioning>(schema, dictionaries);\n+}\n+\n+static Expression GetPartitionExpression(const std::string& path) {\n+  static std::shared_ptr<Partitioning> partitioning = MakePartitioning();\n+  ASSIGN_OR_ABORT(auto expr, partitioning->Parse(path));\n+  return expr;\n+}\n+\n+// A benchmark of SimplifyWithGuarantee using expressions arising from partitioning.\n+static void SimplifyQueryWithGuarantee(benchmark::State& state, Expression lhs,\n+                                       Expression guarantee) {\n+  auto schema = arrow::schema(\n+      {arrow::field(\"a\", arrow::int64()), arrow::field(\"b\", arrow::int64())});\n+  ASSIGN_OR_ABORT(lhs, lhs.Bind(*schema));\n+\n+  // std::cerr << \"LHS: \" << lhs.ToString() << std::endl;\n+  // std::cerr << \"Guarantee: \" << guarantee.ToString() << std::endl;\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(SimplifyWithGuarantee(lhs, guarantee));\n+  }\n+}\n+\n+auto cast_options = compute::CastOptions::Safe(arrow::int64());\n+// A fully simplified filter.\n+auto lhs_simple_negative = and_(equal(field_ref(FieldRef(\"a\")), literal(99)),\n+                                equal(field_ref(FieldRef(\"b\")), literal(98)));\n\nReview comment:\n       Nit: it's not necessary to explicitly construct a FieldRef here\r\n   ```suggestion\r\n   auto lhs_simple_negative = and_(equal(field_ref(\"a\"), literal(99)),\r\n                                   equal(field_ref(\"b\"), literal(98)));\r\n   ```\n\n##########\nFile path: cpp/src/arrow/dataset/expression_benchmark.cc\n##########\n@@ -0,0 +1,105 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <iostream>\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/dataset/expression.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/range.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+static std::shared_ptr<Partitioning> MakePartitioning() {\n+  auto schema = arrow::schema({\n+      arrow::field(\"a\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+      arrow::field(\"b\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+  });\n+  std::shared_ptr<Array> a_dict, b_dict;\n+  auto values = internal::Iota<int64_t>(100);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &a_dict);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &b_dict);\n+  ArrayVector dictionaries = {a_dict, b_dict};\n+  return std::make_shared<HivePartitioning>(schema, dictionaries);\n+}\n+\n+static Expression GetPartitionExpression(const std::string& path) {\n+  static std::shared_ptr<Partitioning> partitioning = MakePartitioning();\n+  ASSIGN_OR_ABORT(auto expr, partitioning->Parse(path));\n+  return expr;\n+}\n\nReview comment:\n       To maintain parity with the python case which motivated this benchmark (and to keep the boilerplate of constructing a `Partitioning` minimal), let's use a `PartitioningFactory` here:\r\n   \r\n   ```suggestion\r\n   static Expression GetPartitionExpression(const std::string& path, bool infer_dictionary) {\r\n     auto options = HivePartitioningFactoryOptions();\r\n     options.infer_dictionary = infer_dictionary;\r\n     auto factory = HivePartitioning::MakeFactory(options);\r\n   \r\n     ASSIGN_OR_ABORT(auto schema, factory->Inspect({path}));\r\n     ASSIGN_OR_ABORT(auto partitioning, factory->Finish(schema));\r\n     ASSIGN_OR_ABORT(auto expr, partitioning->Parse(path));\r\n     return expr;\r\n   }\r\n   ```\r\n   \r\n   This way the dict and non-dict partition expressions are derived equivalently\n\n##########\nFile path: cpp/src/arrow/dataset/expression_benchmark.cc\n##########\n@@ -0,0 +1,105 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <iostream>\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/dataset/expression.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/range.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+static std::shared_ptr<Partitioning> MakePartitioning() {\n+  auto schema = arrow::schema({\n+      arrow::field(\"a\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+      arrow::field(\"b\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+  });\n+  std::shared_ptr<Array> a_dict, b_dict;\n+  auto values = internal::Iota<int64_t>(100);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &a_dict);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &b_dict);\n+  ArrayVector dictionaries = {a_dict, b_dict};\n+  return std::make_shared<HivePartitioning>(schema, dictionaries);\n+}\n+\n+static Expression GetPartitionExpression(const std::string& path) {\n+  static std::shared_ptr<Partitioning> partitioning = MakePartitioning();\n+  ASSIGN_OR_ABORT(auto expr, partitioning->Parse(path));\n+  return expr;\n+}\n+\n+// A benchmark of SimplifyWithGuarantee using expressions arising from partitioning.\n+static void SimplifyQueryWithGuarantee(benchmark::State& state, Expression lhs,\n+                                       Expression guarantee) {\n+  auto schema = arrow::schema(\n+      {arrow::field(\"a\", arrow::int64()), arrow::field(\"b\", arrow::int64())});\n+  ASSIGN_OR_ABORT(lhs, lhs.Bind(*schema));\n\nReview comment:\n       ```suggestion\r\n     auto dataset_schema = schema(\r\n         {field(\"a\", int64()), field(\"b\", int64())});\r\n     ASSIGN_OR_ABORT(filter, filter.Bind(*dataset_schema));\r\n   ```\n\n##########\nFile path: cpp/src/arrow/dataset/expression_benchmark.cc\n##########\n@@ -0,0 +1,105 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <iostream>\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/dataset/expression.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/range.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+static std::shared_ptr<Partitioning> MakePartitioning() {\n+  auto schema = arrow::schema({\n+      arrow::field(\"a\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+      arrow::field(\"b\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+  });\n+  std::shared_ptr<Array> a_dict, b_dict;\n+  auto values = internal::Iota<int64_t>(100);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &a_dict);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &b_dict);\n+  ArrayVector dictionaries = {a_dict, b_dict};\n+  return std::make_shared<HivePartitioning>(schema, dictionaries);\n+}\n+\n+static Expression GetPartitionExpression(const std::string& path) {\n+  static std::shared_ptr<Partitioning> partitioning = MakePartitioning();\n+  ASSIGN_OR_ABORT(auto expr, partitioning->Parse(path));\n+  return expr;\n+}\n+\n+// A benchmark of SimplifyWithGuarantee using expressions arising from partitioning.\n+static void SimplifyQueryWithGuarantee(benchmark::State& state, Expression lhs,\n\nReview comment:\n       ```suggestion\r\n   static void SimplifyFilterWithGuarantee(benchmark::State& state, Expression filter,\r\n   ```\n\n##########\nFile path: cpp/src/arrow/dataset/expression_benchmark.cc\n##########\n@@ -0,0 +1,105 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <iostream>\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/dataset/expression.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/range.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+static std::shared_ptr<Partitioning> MakePartitioning() {\n+  auto schema = arrow::schema({\n+      arrow::field(\"a\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+      arrow::field(\"b\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+  });\n+  std::shared_ptr<Array> a_dict, b_dict;\n+  auto values = internal::Iota<int64_t>(100);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &a_dict);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &b_dict);\n+  ArrayVector dictionaries = {a_dict, b_dict};\n+  return std::make_shared<HivePartitioning>(schema, dictionaries);\n+}\n+\n+static Expression GetPartitionExpression(const std::string& path) {\n+  static std::shared_ptr<Partitioning> partitioning = MakePartitioning();\n+  ASSIGN_OR_ABORT(auto expr, partitioning->Parse(path));\n+  return expr;\n+}\n+\n+// A benchmark of SimplifyWithGuarantee using expressions arising from partitioning.\n+static void SimplifyQueryWithGuarantee(benchmark::State& state, Expression lhs,\n+                                       Expression guarantee) {\n+  auto schema = arrow::schema(\n+      {arrow::field(\"a\", arrow::int64()), arrow::field(\"b\", arrow::int64())});\n+  ASSIGN_OR_ABORT(lhs, lhs.Bind(*schema));\n+\n+  // std::cerr << \"LHS: \" << lhs.ToString() << std::endl;\n+  // std::cerr << \"Guarantee: \" << guarantee.ToString() << std::endl;\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(SimplifyWithGuarantee(lhs, guarantee));\n+  }\n+}\n+\n+auto cast_options = compute::CastOptions::Safe(arrow::int64());\n+// A fully simplified filter.\n+auto lhs_simple_negative = and_(equal(field_ref(FieldRef(\"a\")), literal(99)),\n+                                equal(field_ref(FieldRef(\"b\")), literal(98)));\n\nReview comment:\n       Additionally, note that since your dataset_schema specifies that both fields are int64 your fully simplified filters should include correctly typed literals: `literal(int64_t(99))`\n\n##########\nFile path: cpp/src/arrow/dataset/expression_benchmark.cc\n##########\n@@ -0,0 +1,105 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <iostream>\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/dataset/expression.h\"\n+#include \"arrow/dataset/partition.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/range.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+static std::shared_ptr<Partitioning> MakePartitioning() {\n+  auto schema = arrow::schema({\n+      arrow::field(\"a\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+      arrow::field(\"b\", arrow::dictionary(arrow::int32(), arrow::int64())),\n+  });\n+  std::shared_ptr<Array> a_dict, b_dict;\n+  auto values = internal::Iota<int64_t>(100);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &a_dict);\n+  ArrayFromVector<Int64Type>(arrow::int64(), values, &b_dict);\n+  ArrayVector dictionaries = {a_dict, b_dict};\n+  return std::make_shared<HivePartitioning>(schema, dictionaries);\n+}\n+\n+static Expression GetPartitionExpression(const std::string& path) {\n+  static std::shared_ptr<Partitioning> partitioning = MakePartitioning();\n+  ASSIGN_OR_ABORT(auto expr, partitioning->Parse(path));\n+  return expr;\n+}\n+\n+// A benchmark of SimplifyWithGuarantee using expressions arising from partitioning.\n+static void SimplifyQueryWithGuarantee(benchmark::State& state, Expression lhs,\n+                                       Expression guarantee) {\n+  auto schema = arrow::schema(\n+      {arrow::field(\"a\", arrow::int64()), arrow::field(\"b\", arrow::int64())});\n+  ASSIGN_OR_ABORT(lhs, lhs.Bind(*schema));\n+\n+  // std::cerr << \"LHS: \" << lhs.ToString() << std::endl;\n+  // std::cerr << \"Guarantee: \" << guarantee.ToString() << std::endl;\n+\n\nReview comment:\n       ```suggestion\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T14:29:13.625+0000",
                    "updated": "2021-03-09T14:29:13.625+0000",
                    "started": "2021-03-09T14:29:13.624+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563093",
                    "issueId": "13362676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362676/worklog/563845",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz closed pull request #9638:\nURL: https://github.com/apache/arrow/pull/9638\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T15:53:21.980+0000",
                    "updated": "2021-03-10T15:53:21.980+0000",
                    "started": "2021-03-10T15:53:21.980+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563845",
                    "issueId": "13362676"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@17881026[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26f70460[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e63de28[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@50291780[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f9b1fcb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@59702b1d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9322c85[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@11bfbf34[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66ad8f8f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3e5d7884[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26132dce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4a397027[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Mar 10 15:53:20 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-10T15:53:20.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11877/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-03-05T18:46:39.000+0000",
        "updated": "2021-03-10T15:53:22.000+0000",
        "timeoriginalestimate": null,
        "description": "A quick investigation of ARROW-11781 showed much of the overhead lies in evaluating partition expressions against the filter. While much of this is just kernel evaluation, we should have benchmarks of key Datasets internals like SimplifyWithGuarantee.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add initial microbenchmarks for Dataset internals",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13362676/comment/17298922",
                    "id": "17298922",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9638\n[https://github.com/apache/arrow/pull/9638]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-03-10T15:53:20.240+0000",
                    "updated": "2021-03-10T15:53:20.240+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ocrc:",
        "customfield_12314139": null
    }
}