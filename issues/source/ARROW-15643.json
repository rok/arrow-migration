{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13427734",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734",
    "key": "ARROW-15643",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12633379",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12633379",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13123027",
                    "key": "ARROW-1888",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123027",
                    "fields": {
                        "summary": "[C++] Implement casts from one struct type to another (with same field names and number of fields)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12633378",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12633378",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13265911",
                    "key": "ARROW-7051",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265911",
                    "fields": {
                        "summary": "[C++] Improve MakeArrayOfNull to support creation of multiple arrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
                            "description": "This issue is being actively worked on at the moment by the assignee.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
                            "name": "In Progress",
                            "id": "3",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                                "id": 4,
                                "key": "indeterminate",
                                "colorName": "yellow",
                                "name": "In Progress"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12633377",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12633377",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13411063",
                    "key": "ARROW-14658",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063",
                    "fields": {
                        "summary": "[C++] Add basic support for nested field refs in scanning",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12637130",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12637130",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13437657",
                    "key": "ARROW-16112",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13437657",
                    "fields": {
                        "summary": "[C++] Allow reordering fields of a StructArray via casting",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dhruv9vats",
            "name": "dhruv9vats",
            "key": "dhruv9vats",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Dhruv Vats",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15643/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/748262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats opened a new pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724\n\n\n   Provide the ability to select a subset of the fields of a StructArray array by casting it to the required fields, provided the fields exist in the StructArray.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-26T20:02:21.336+0000",
                    "updated": "2022-03-26T20:02:21.336+0000",
                    "started": "2022-03-26T20:02:21.336+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748262",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/748263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#issuecomment-1079765424\n\n\n   https://issues.apache.org/jira/browse/ARROW-15643\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-26T20:02:43.893+0000",
                    "updated": "2022-03-26T20:02:43.893+0000",
                    "started": "2022-03-26T20:02:43.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748263",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/748266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#discussion_r835806658\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -228,6 +228,107 @@ void AddStructToStructCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n }\n \n+struct CastStructSubset {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto& in_type = checked_cast<const StructType&>(*batch[0].type());\n+    const auto& out_type = checked_cast<const StructType&>(*out->type());\n+    const int in_field_count = in_type.num_fields();\n+    const int out_field_count = out_type.num_fields();\n+\n+    std::vector<bool> fields_to_select(in_field_count, false);\n+\n+    int out_field_index = 0;\n+    for (int in_field_index = 0;\n+         in_field_index < in_field_count && out_field_index < out_field_count;\n+         ++in_field_index) {\n+      const auto in_field = in_type.field(in_field_index);\n+      const auto out_field = out_type.field(out_field_index);\n+      if (in_field->name() == out_field->name()) {\n+        if (in_field->nullable() && !out_field->nullable()) {\n+          return Status::TypeError(\"cannot cast nullable struct to non-nullable struct: \",\n+                                   in_type.ToString(), \" \", out_type.ToString());\n+        }\n+        fields_to_select[in_field_index] = true;\n+        ++out_field_index;\n+      }\n+    }\n+\n+    if (out_field_index < out_field_count - 1) {\n+      return Status::TypeError(\n+          \"struct subfields names don't match or are in the wrong order: \",\n+          in_type.ToString(), \" \", out_type.ToString());\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      DCHECK(!out_scalar->is_valid);\n+      if (in_scalar.is_valid) {\n+        out_field_index = 0;\n+        for (int in_field_index = 0; in_field_index < in_field_count; in_field_index++) {\n+          if (fields_to_select[in_field_index]) {\n+            auto values = in_scalar.value[in_field_index];\n+            auto target_type = out->type()->field(out_field_index++)->type();\n+            ARROW_ASSIGN_OR_RAISE(Datum cast_values, Cast(values, target_type, options,\n+                                                          ctx->exec_context()));\n+            DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+            out_scalar->value.push_back(cast_values.scalar());\n+          }\n+        }\n+        out_scalar->is_valid = true;\n+      }\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    if (in_array.GetNullCount() > 0) {\n+      auto out_bitmap_builder = TypedBufferBuilder<bool>(ctx->memory_pool());\n+      const auto in_bitmap = in_array.buffers[0]->data();\n+\n+      for (int in_field_index = 0; in_field_index < in_field_count; in_field_index++) {\n+        if (fields_to_select[in_field_index]) {\n+          if (bit_util::GetBit(in_bitmap, in_array.offset + in_field_index)) {\n+            ARROW_RETURN_NOT_OK(out_bitmap_builder.Append(true));\n+          } else {\n+            ARROW_RETURN_NOT_OK(out_bitmap_builder.Append(false));\n+          }\n+        }\n+      }\n+      ARROW_ASSIGN_OR_RAISE(out_array->buffers[0], out_bitmap_builder.Finish());\n+    }\n+\n+    out_field_index = 0;\n+    for (int in_field_index = 0; in_field_index < in_field_count; in_field_index++) {\n+      if (fields_to_select[in_field_index]) {\n+        auto values =\n+            in_array.child_data[in_field_index]->Slice(in_array.offset, in_array.length);\n+        auto target_type = out->type()->field(out_field_index++)->type();\n+\n+        ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                              Cast(values, target_type, options, ctx->exec_context()));\n+\n+        DCHECK_EQ(Datum::ARRAY, cast_values.kind());\n+        out_array->child_data.push_back(cast_values.array());\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+};\n+\n+void AddStructToStructSubsetCast(CastFunction* func) {\n+  ScalarKernel kernel;\n+  kernel.exec = CastStructSubset::Exec;\n+  kernel.signature =\n+      KernelSignature::Make({InputType(StructType::type_id)}, kOutputTargetType);\n+  kernel.null_handling = NullHandling::COMPUTED_NO_PREALLOCATE;\n+  DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n+}\n\nReview comment:\n       What would be the way to select this casting mechanism over the one that already exists for StructType? Will it include checking `out_type.num_fields()`? And selecting the current mechanism if `out_type.num_fields() < in_type.num_fields()`? If so, how could this be achieved?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -228,6 +228,107 @@ void AddStructToStructCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n }\n \n+struct CastStructSubset {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto& in_type = checked_cast<const StructType&>(*batch[0].type());\n+    const auto& out_type = checked_cast<const StructType&>(*out->type());\n+    const int in_field_count = in_type.num_fields();\n+    const int out_field_count = out_type.num_fields();\n+\n+    std::vector<bool> fields_to_select(in_field_count, false);\n+\n+    int out_field_index = 0;\n+    for (int in_field_index = 0;\n+         in_field_index < in_field_count && out_field_index < out_field_count;\n+         ++in_field_index) {\n+      const auto in_field = in_type.field(in_field_index);\n+      const auto out_field = out_type.field(out_field_index);\n+      if (in_field->name() == out_field->name()) {\n+        if (in_field->nullable() && !out_field->nullable()) {\n+          return Status::TypeError(\"cannot cast nullable struct to non-nullable struct: \",\n+                                   in_type.ToString(), \" \", out_type.ToString());\n+        }\n+        fields_to_select[in_field_index] = true;\n+        ++out_field_index;\n+      }\n+    }\n+\n+    if (out_field_index < out_field_count - 1) {\n+      return Status::TypeError(\n+          \"struct subfields names don't match or are in the wrong order: \",\n+          in_type.ToString(), \" \", out_type.ToString());\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      DCHECK(!out_scalar->is_valid);\n+      if (in_scalar.is_valid) {\n+        out_field_index = 0;\n+        for (int in_field_index = 0; in_field_index < in_field_count; in_field_index++) {\n+          if (fields_to_select[in_field_index]) {\n+            auto values = in_scalar.value[in_field_index];\n+            auto target_type = out->type()->field(out_field_index++)->type();\n+            ARROW_ASSIGN_OR_RAISE(Datum cast_values, Cast(values, target_type, options,\n+                                                          ctx->exec_context()));\n+            DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+            out_scalar->value.push_back(cast_values.scalar());\n+          }\n+        }\n+        out_scalar->is_valid = true;\n+      }\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    if (in_array.GetNullCount() > 0) {\n+      auto out_bitmap_builder = TypedBufferBuilder<bool>(ctx->memory_pool());\n+      const auto in_bitmap = in_array.buffers[0]->data();\n+\n+      for (int in_field_index = 0; in_field_index < in_field_count; in_field_index++) {\n+        if (fields_to_select[in_field_index]) {\n+          if (bit_util::GetBit(in_bitmap, in_array.offset + in_field_index)) {\n\nReview comment:\n       Does the `in_array.offset + in_field_index` part in the line make sense?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -252,6 +353,7 @@ std::vector<std::shared_ptr<CastFunction>> GetNestedCasts() {\n   // So is struct\n   auto cast_struct = std::make_shared<CastFunction>(\"cast_struct\", Type::STRUCT);\n   AddCommonCasts(Type::STRUCT, kOutputTargetType, cast_struct.get());\n+  AddStructToStructSubsetCast(cast_struct.get());\n\nReview comment:\n       (Just a hacky way to temporarily call the current casting mechanism to test its output). Needs overhaul.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -228,6 +228,107 @@ void AddStructToStructCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n }\n \n+struct CastStructSubset {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto& in_type = checked_cast<const StructType&>(*batch[0].type());\n+    const auto& out_type = checked_cast<const StructType&>(*out->type());\n+    const int in_field_count = in_type.num_fields();\n+    const int out_field_count = out_type.num_fields();\n+\n+    std::vector<bool> fields_to_select(in_field_count, false);\n+\n+    int out_field_index = 0;\n+    for (int in_field_index = 0;\n+         in_field_index < in_field_count && out_field_index < out_field_count;\n+         ++in_field_index) {\n+      const auto in_field = in_type.field(in_field_index);\n+      const auto out_field = out_type.field(out_field_index);\n+      if (in_field->name() == out_field->name()) {\n+        if (in_field->nullable() && !out_field->nullable()) {\n+          return Status::TypeError(\"cannot cast nullable struct to non-nullable struct: \",\n+                                   in_type.ToString(), \" \", out_type.ToString());\n+        }\n+        fields_to_select[in_field_index] = true;\n+        ++out_field_index;\n+      }\n+    }\n+\n+    if (out_field_index < out_field_count - 1) {\n+      return Status::TypeError(\n+          \"struct subfields names don't match or are in the wrong order: \",\n+          in_type.ToString(), \" \", out_type.ToString());\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      DCHECK(!out_scalar->is_valid);\n+      if (in_scalar.is_valid) {\n+        out_field_index = 0;\n+        for (int in_field_index = 0; in_field_index < in_field_count; in_field_index++) {\n+          if (fields_to_select[in_field_index]) {\n+            auto values = in_scalar.value[in_field_index];\n+            auto target_type = out->type()->field(out_field_index++)->type();\n+            ARROW_ASSIGN_OR_RAISE(Datum cast_values, Cast(values, target_type, options,\n+                                                          ctx->exec_context()));\n+            DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+            out_scalar->value.push_back(cast_values.scalar());\n+          }\n+        }\n+        out_scalar->is_valid = true;\n+      }\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    if (in_array.GetNullCount() > 0) {\n+      auto out_bitmap_builder = TypedBufferBuilder<bool>(ctx->memory_pool());\n+      const auto in_bitmap = in_array.buffers[0]->data();\n+\n+      for (int in_field_index = 0; in_field_index < in_field_count; in_field_index++) {\n\nReview comment:\n       Have separated the null bitmap construction from the main loop to avoid unnecessary branching when there are no nulls. Is this okay?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2329,6 +2329,43 @@ TEST(Cast, StructToSameSizedButDifferentNullabilityStruct) {\n       Cast(src2, options));\n }\n \n+TEST(Cats, StructSubset) {\n\nReview comment:\n       ```suggestion\r\n   TEST(Cast, StructSubset) {\r\n   ```\r\n   \ud83d\udc31 \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-26T20:30:27.487+0000",
                    "updated": "2022-03-26T20:30:27.487+0000",
                    "started": "2022-03-26T20:30:27.487+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748266",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/748267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#discussion_r835808742\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -252,6 +353,7 @@ std::vector<std::shared_ptr<CastFunction>> GetNestedCasts() {\n   // So is struct\n   auto cast_struct = std::make_shared<CastFunction>(\"cast_struct\", Type::STRUCT);\n   AddCommonCasts(Type::STRUCT, kOutputTargetType, cast_struct.get());\n+  AddStructToStructSubsetCast(cast_struct.get());\n\nReview comment:\n       (CI fails because of this.)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-26T20:31:00.048+0000",
                    "updated": "2022-03-26T20:31:00.048+0000",
                    "started": "2022-03-26T20:31:00.047+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748267",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/748310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#discussion_r835808742\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -252,6 +353,7 @@ std::vector<std::shared_ptr<CastFunction>> GetNestedCasts() {\n   // So is struct\n   auto cast_struct = std::make_shared<CastFunction>(\"cast_struct\", Type::STRUCT);\n   AddCommonCasts(Type::STRUCT, kOutputTargetType, cast_struct.get());\n+  AddStructToStructSubsetCast(cast_struct.get());\n\nReview comment:\n       ~~(CI fails because of this.)~~\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-27T08:34:17.716+0000",
                    "updated": "2022-03-27T08:34:17.716+0000",
                    "started": "2022-03-27T08:34:17.716+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748310",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/748311",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#discussion_r835872552\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2262,8 +2262,7 @@ TEST(Cast, StructToSameSizedButDifferentNamedStruct) {\n \n   EXPECT_RAISES_WITH_MESSAGE_THAT(\n       TypeError,\n-      ::testing::HasSubstr(\"Type error: struct field names do not match: struct<a: int8, \"\n-                           \"b: int8> struct<c: int8, d: int8>\"),\n+      ::testing::HasSubstr(\"struct (sub)fields don't match or are in the wrong order\"),\n\nReview comment:\n       This makes me think, should we just extend the already existing `CastStruct` implementation?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2262,8 +2262,7 @@ TEST(Cast, StructToSameSizedButDifferentNamedStruct) {\n \n   EXPECT_RAISES_WITH_MESSAGE_THAT(\n       TypeError,\n-      ::testing::HasSubstr(\"Type error: struct field names do not match: struct<a: int8, \"\n-                           \"b: int8> struct<c: int8, d: int8>\"),\n+      ::testing::HasSubstr(\"struct (sub)fields don't match or are in the wrong order\"),\n\nReview comment:\n       To make the tests pass, because this kind of extends the already implemented `CastStruct`.\r\n   (Ditto below and in `dataset/scanner_test.cc`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-27T08:39:10.960+0000",
                    "updated": "2022-03-27T08:39:10.960+0000",
                    "started": "2022-03-27T08:39:10.960+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748311",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/748565",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#discussion_r836377718\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -228,6 +228,107 @@ void AddStructToStructCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n }\n \n+struct CastStructSubset {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto& in_type = checked_cast<const StructType&>(*batch[0].type());\n+    const auto& out_type = checked_cast<const StructType&>(*out->type());\n+    const int in_field_count = in_type.num_fields();\n+    const int out_field_count = out_type.num_fields();\n+\n+    std::vector<bool> fields_to_select(in_field_count, false);\n+\n+    int out_field_index = 0;\n+    for (int in_field_index = 0;\n+         in_field_index < in_field_count && out_field_index < out_field_count;\n+         ++in_field_index) {\n+      const auto in_field = in_type.field(in_field_index);\n+      const auto out_field = out_type.field(out_field_index);\n+      if (in_field->name() == out_field->name()) {\n+        if (in_field->nullable() && !out_field->nullable()) {\n+          return Status::TypeError(\"cannot cast nullable struct to non-nullable struct: \",\n+                                   in_type.ToString(), \" \", out_type.ToString());\n+        }\n+        fields_to_select[in_field_index] = true;\n+        ++out_field_index;\n+      }\n+    }\n+\n+    if (out_field_index < out_field_count - 1) {\n+      return Status::TypeError(\n+          \"struct subfields names don't match or are in the wrong order: \",\n+          in_type.ToString(), \" \", out_type.ToString());\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      DCHECK(!out_scalar->is_valid);\n+      if (in_scalar.is_valid) {\n+        out_field_index = 0;\n+        for (int in_field_index = 0; in_field_index < in_field_count; in_field_index++) {\n+          if (fields_to_select[in_field_index]) {\n+            auto values = in_scalar.value[in_field_index];\n+            auto target_type = out->type()->field(out_field_index++)->type();\n+            ARROW_ASSIGN_OR_RAISE(Datum cast_values, Cast(values, target_type, options,\n+                                                          ctx->exec_context()));\n+            DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+            out_scalar->value.push_back(cast_values.scalar());\n+          }\n+        }\n+        out_scalar->is_valid = true;\n+      }\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    if (in_array.GetNullCount() > 0) {\n+      auto out_bitmap_builder = TypedBufferBuilder<bool>(ctx->memory_pool());\n+      const auto in_bitmap = in_array.buffers[0]->data();\n+\n+      for (int in_field_index = 0; in_field_index < in_field_count; in_field_index++) {\n+        if (fields_to_select[in_field_index]) {\n+          if (bit_util::GetBit(in_bitmap, in_array.offset + in_field_index)) {\n+            ARROW_RETURN_NOT_OK(out_bitmap_builder.Append(true));\n+          } else {\n+            ARROW_RETURN_NOT_OK(out_bitmap_builder.Append(false));\n+          }\n+        }\n+      }\n+      ARROW_ASSIGN_OR_RAISE(out_array->buffers[0], out_bitmap_builder.Finish());\n+    }\n+\n+    out_field_index = 0;\n+    for (int in_field_index = 0; in_field_index < in_field_count; in_field_index++) {\n+      if (fields_to_select[in_field_index]) {\n+        auto values =\n+            in_array.child_data[in_field_index]->Slice(in_array.offset, in_array.length);\n+        auto target_type = out->type()->field(out_field_index++)->type();\n+\n+        ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                              Cast(values, target_type, options, ctx->exec_context()));\n+\n+        DCHECK_EQ(Datum::ARRAY, cast_values.kind());\n+        out_array->child_data.push_back(cast_values.array());\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+};\n+\n+void AddStructToStructSubsetCast(CastFunction* func) {\n+  ScalarKernel kernel;\n+  kernel.exec = CastStructSubset::Exec;\n+  kernel.signature =\n+      KernelSignature::Make({InputType(StructType::type_id)}, kOutputTargetType);\n+  kernel.null_handling = NullHandling::COMPUTED_NO_PREALLOCATE;\n+  DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n+}\n\nReview comment:\n       Why can't we implement it as part of the existing cast instead of having a separate one?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T12:33:07.466+0000",
                    "updated": "2022-03-28T12:33:07.466+0000",
                    "started": "2022-03-28T12:33:07.466+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748565",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/748582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#discussion_r836399857\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -228,6 +228,107 @@ void AddStructToStructCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n }\n \n+struct CastStructSubset {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+    const auto& in_type = checked_cast<const StructType&>(*batch[0].type());\n+    const auto& out_type = checked_cast<const StructType&>(*out->type());\n+    const int in_field_count = in_type.num_fields();\n+    const int out_field_count = out_type.num_fields();\n+\n+    std::vector<bool> fields_to_select(in_field_count, false);\n+\n+    int out_field_index = 0;\n+    for (int in_field_index = 0;\n+         in_field_index < in_field_count && out_field_index < out_field_count;\n+         ++in_field_index) {\n+      const auto in_field = in_type.field(in_field_index);\n+      const auto out_field = out_type.field(out_field_index);\n+      if (in_field->name() == out_field->name()) {\n+        if (in_field->nullable() && !out_field->nullable()) {\n+          return Status::TypeError(\"cannot cast nullable struct to non-nullable struct: \",\n+                                   in_type.ToString(), \" \", out_type.ToString());\n+        }\n+        fields_to_select[in_field_index] = true;\n+        ++out_field_index;\n+      }\n+    }\n+\n+    if (out_field_index < out_field_count - 1) {\n+      return Status::TypeError(\n+          \"struct subfields names don't match or are in the wrong order: \",\n+          in_type.ToString(), \" \", out_type.ToString());\n+    }\n+\n+    if (out->kind() == Datum::SCALAR) {\n+      const auto& in_scalar = checked_cast<const StructScalar&>(*batch[0].scalar());\n+      auto out_scalar = checked_cast<StructScalar*>(out->scalar().get());\n+\n+      DCHECK(!out_scalar->is_valid);\n+      if (in_scalar.is_valid) {\n+        out_field_index = 0;\n+        for (int in_field_index = 0; in_field_index < in_field_count; in_field_index++) {\n+          if (fields_to_select[in_field_index]) {\n+            auto values = in_scalar.value[in_field_index];\n+            auto target_type = out->type()->field(out_field_index++)->type();\n+            ARROW_ASSIGN_OR_RAISE(Datum cast_values, Cast(values, target_type, options,\n+                                                          ctx->exec_context()));\n+            DCHECK_EQ(Datum::SCALAR, cast_values.kind());\n+            out_scalar->value.push_back(cast_values.scalar());\n+          }\n+        }\n+        out_scalar->is_valid = true;\n+      }\n+      return Status::OK();\n+    }\n+\n+    const ArrayData& in_array = *batch[0].array();\n+    ArrayData* out_array = out->mutable_array();\n+\n+    if (in_array.GetNullCount() > 0) {\n+      auto out_bitmap_builder = TypedBufferBuilder<bool>(ctx->memory_pool());\n+      const auto in_bitmap = in_array.buffers[0]->data();\n+\n+      for (int in_field_index = 0; in_field_index < in_field_count; in_field_index++) {\n+        if (fields_to_select[in_field_index]) {\n+          if (bit_util::GetBit(in_bitmap, in_array.offset + in_field_index)) {\n+            ARROW_RETURN_NOT_OK(out_bitmap_builder.Append(true));\n+          } else {\n+            ARROW_RETURN_NOT_OK(out_bitmap_builder.Append(false));\n+          }\n+        }\n+      }\n+      ARROW_ASSIGN_OR_RAISE(out_array->buffers[0], out_bitmap_builder.Finish());\n+    }\n+\n+    out_field_index = 0;\n+    for (int in_field_index = 0; in_field_index < in_field_count; in_field_index++) {\n+      if (fields_to_select[in_field_index]) {\n+        auto values =\n+            in_array.child_data[in_field_index]->Slice(in_array.offset, in_array.length);\n+        auto target_type = out->type()->field(out_field_index++)->type();\n+\n+        ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                              Cast(values, target_type, options, ctx->exec_context()));\n+\n+        DCHECK_EQ(Datum::ARRAY, cast_values.kind());\n+        out_array->child_data.push_back(cast_values.array());\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+};\n+\n+void AddStructToStructSubsetCast(CastFunction* func) {\n+  ScalarKernel kernel;\n+  kernel.exec = CastStructSubset::Exec;\n+  kernel.signature =\n+      KernelSignature::Make({InputType(StructType::type_id)}, kOutputTargetType);\n+  kernel.null_handling = NullHandling::COMPUTED_NO_PREALLOCATE;\n+  DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n+}\n\nReview comment:\n       That is what I was thinking: https://github.com/apache/arrow/pull/12724/files#r835872552,\r\n   Just wasn't super clear if that is what was needed. I'll update to extend the existing cast.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T12:57:10.830+0000",
                    "updated": "2022-03-28T12:57:10.830+0000",
                    "started": "2022-03-28T12:57:10.829+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748582",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/748956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#discussion_r836869051\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -153,27 +153,32 @@ void AddListCast(CastFunction* func) {\n struct CastStruct {\n   static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n     const CastOptions& options = CastState::Get(ctx);\n-    const StructType& in_type = checked_cast<const StructType&>(*batch[0].type());\n-    const StructType& out_type = checked_cast<const StructType&>(*out->type());\n-    const auto in_field_count = in_type.num_fields();\n-\n-    if (in_field_count != out_type.num_fields()) {\n-      return Status::TypeError(\"struct field sizes do not match: \", in_type.ToString(),\n-                               \" \", out_type.ToString());\n-    }\n-\n-    for (int i = 0; i < in_field_count; ++i) {\n-      const auto in_field = in_type.field(i);\n-      const auto out_field = out_type.field(i);\n-      if (in_field->name() != out_field->name()) {\n-        return Status::TypeError(\"struct field names do not match: \", in_type.ToString(),\n-                                 \" \", out_type.ToString());\n+    const auto& in_type = checked_cast<const StructType&>(*batch[0].type());\n+    const auto& out_type = checked_cast<const StructType&>(*out->type());\n+    const int in_field_count = in_type.num_fields();\n+    const int out_field_count = out_type.num_fields();\n+\n+    std::vector<int> fields_to_select(out_field_count, -1);\n+\n+    int out_field_index = 0;\n+    for (int in_field_index = 0;\n+         in_field_index < in_field_count && out_field_index < out_field_count;\n+         ++in_field_index) {\n+      const auto in_field = in_type.field(in_field_index);\n+      const auto out_field = out_type.field(out_field_index);\n+      if (in_field->name() == out_field->name()) {\n+        if (in_field->nullable() && !out_field->nullable()) {\n+          return Status::TypeError(\"cannot cast nullable struct to non-nullable struct: \",\n+                                   in_type.ToString(), \" \", out_type.ToString());\n+        }\n+        fields_to_select[out_field_index++] = in_field_index;\n       }\n+    }\n \n-      if (in_field->nullable() && !out_field->nullable()) {\n-        return Status::TypeError(\"cannot cast nullable struct to non-nullable struct: \",\n-                                 in_type.ToString(), \" \", out_type.ToString());\n-      }\n+    if (out_field_index < out_field_count) {\n+      return Status::TypeError(\n+          \"struct (sub)fields don't match or are in the wrong order: Input fields: \",\n\nReview comment:\n       nit, but we can just say \"struct fields\"\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -153,27 +153,32 @@ void AddListCast(CastFunction* func) {\n struct CastStruct {\n   static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n     const CastOptions& options = CastState::Get(ctx);\n-    const StructType& in_type = checked_cast<const StructType&>(*batch[0].type());\n-    const StructType& out_type = checked_cast<const StructType&>(*out->type());\n-    const auto in_field_count = in_type.num_fields();\n-\n-    if (in_field_count != out_type.num_fields()) {\n-      return Status::TypeError(\"struct field sizes do not match: \", in_type.ToString(),\n-                               \" \", out_type.ToString());\n-    }\n-\n-    for (int i = 0; i < in_field_count; ++i) {\n-      const auto in_field = in_type.field(i);\n-      const auto out_field = out_type.field(i);\n-      if (in_field->name() != out_field->name()) {\n-        return Status::TypeError(\"struct field names do not match: \", in_type.ToString(),\n-                                 \" \", out_type.ToString());\n+    const auto& in_type = checked_cast<const StructType&>(*batch[0].type());\n+    const auto& out_type = checked_cast<const StructType&>(*out->type());\n+    const int in_field_count = in_type.num_fields();\n+    const int out_field_count = out_type.num_fields();\n+\n+    std::vector<int> fields_to_select(out_field_count, -1);\n+\n+    int out_field_index = 0;\n+    for (int in_field_index = 0;\n+         in_field_index < in_field_count && out_field_index < out_field_count;\n+         ++in_field_index) {\n+      const auto in_field = in_type.field(in_field_index);\n+      const auto out_field = out_type.field(out_field_index);\n+      if (in_field->name() == out_field->name()) {\n+        if (in_field->nullable() && !out_field->nullable()) {\n+          return Status::TypeError(\"cannot cast nullable struct to non-nullable struct: \",\n\nReview comment:\n       ```suggestion\r\n             return Status::TypeError(\"cannot cast nullable field to non-nullable field: \",\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2245,10 +2245,132 @@ static void CheckStructToStruct(\n   }\n }\n \n-TEST(Cast, StructToSameSizedAndNamedStruct) {\n-  CheckStructToStruct({int32(), float32(), int64()});\n+static void CheckStructToStructSubset(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n+    for (const auto& dest_value_type : value_types) {\n+      std::vector<std::string> field_names = {\"a\", \"b\", \"c\", \"d\", \"e\"};\n+\n+      std::shared_ptr<Array> a1, b1, c1, d1, e1;\n+      a1 = ArrayFromJSON(src_value_type, \"[1, 2, 5]\");\n+      b1 = ArrayFromJSON(src_value_type, \"[3, 4, 7]\");\n+      c1 = ArrayFromJSON(src_value_type, \"[9, 11, 44]\");\n+      d1 = ArrayFromJSON(src_value_type, \"[6, 51, 49]\");\n+      e1 = ArrayFromJSON(src_value_type, \"[19, 17, 74]\");\n+\n+      std::shared_ptr<Array> a2, b2, c2, d2, e2;\n+      a2 = ArrayFromJSON(dest_value_type, \"[1, 2, 5]\");\n+      b2 = ArrayFromJSON(dest_value_type, \"[3, 4, 7]\");\n+      c2 = ArrayFromJSON(dest_value_type, \"[9, 11, 44]\");\n+      d2 = ArrayFromJSON(dest_value_type, \"[6, 51, 49]\");\n+      e2 = ArrayFromJSON(dest_value_type, \"[19, 17, 74]\");\n+\n+      ASSERT_OK_AND_ASSIGN(auto src,\n+                           StructArray::Make({a1, b1, c1, d1, e1}, field_names));\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest1, StructArray::Make({a2, c2}, std::vector<std::string>{\"a\", \"c\"}));\n+      CheckCast(src, dest1);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest2, StructArray::Make({b2, d2}, std::vector<std::string>{\"b\", \"d\"}));\n+      CheckCast(src, dest2);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest3, StructArray::Make({c2, e2}, std::vector<std::string>{\"c\", \"e\"}));\n+      CheckCast(src, dest3);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest4,\n+          StructArray::Make({a2, d2, e2}, std::vector<std::string>{\"a\", \"d\", \"e\"}));\n+      CheckCast(src, dest4);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest5,\n+          StructArray::Make({b2, c2, e2}, std::vector<std::string>{\"b\", \"c\", \"e\"}));\n+      CheckCast(src, dest5);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest6, StructArray::Make({a2, b2, c2, e2},\n+                                        std::vector<std::string>{\"a\", \"b\", \"c\", \"e\"}));\n+      CheckCast(src, dest6);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest7, StructArray::Make({a2, b2, c2, d2, e2}, {\"a\", \"b\", \"c\", \"d\", \"e\"}));\n+      CheckCast(src, dest7);\n+\n+      const auto dest8 = arrow::struct_({std::make_shared<Field>(\"a\", int8()),\n+                                         std::make_shared<Field>(\"d\", int16()),\n+                                         std::make_shared<Field>(\"f\", int64())});\n+      const auto options = CastOptions::Safe(dest8);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\n+              \"struct (sub)fields don't match or are in the wrong order\"),\n+          Cast(src, options));\n+\n+      // With nulls\n+      std::shared_ptr<Buffer> null_bitmap;\n+      BitmapFromVector<int>({0, 1, 0}, &null_bitmap);\n+\n+      ASSERT_OK_AND_ASSIGN(auto src_null, StructArray::Make({a1, b1, c1, d1, e1},\n+                                                            field_names, null_bitmap));\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest1_null,\n+          StructArray::Make({a2, c2}, std::vector<std::string>{\"a\", \"c\"}, null_bitmap));\n+      CheckCast(src_null, dest1_null);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest2_null,\n+          StructArray::Make({b2, d2}, std::vector<std::string>{\"b\", \"d\"}, null_bitmap));\n+      CheckCast(src_null, dest2_null);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest3_null,\n+          StructArray::Make({c2, e2}, std::vector<std::string>{\"c\", \"e\"}, null_bitmap));\n+      CheckCast(src_null, dest3_null);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest4_null,\n+          StructArray::Make({a2, d2, e2}, std::vector<std::string>{\"a\", \"d\", \"e\"},\n+                            null_bitmap));\n+      CheckCast(src_null, dest4_null);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest5_null,\n+          StructArray::Make({b2, c2, e2}, std::vector<std::string>{\"b\", \"c\", \"e\"},\n+                            null_bitmap));\n+      CheckCast(src_null, dest5_null);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest6_null,\n+          StructArray::Make({a2, b2, c2, e2},\n+                            std::vector<std::string>{\"a\", \"b\", \"c\", \"e\"}, null_bitmap));\n+      CheckCast(src_null, dest6_null);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest7_null,\n+          StructArray::Make({a2, b2, c2, d2, e2},\n+                            std::vector<std::string>{\"a\", \"b\", \"c\", \"d\", \"e\"},\n+                            null_bitmap));\n+      CheckCast(src_null, dest7_null);\n+\n+      const auto dest8_null = arrow::struct_({std::make_shared<Field>(\"a\", int8()),\n+                                              std::make_shared<Field>(\"d\", int16()),\n+                                              std::make_shared<Field>(\"f\", int64())});\n+      const auto options_null = CastOptions::Safe(dest8_null);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\n+              \"struct (sub)fields don't match or are in the wrong order\"),\n+          Cast(src_null, options_null));\n\nReview comment:\n       Can we also add a case or two dealing with duplicate field names on either side? (It looks like the implementation will handle this sensibly.)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2245,10 +2245,132 @@ static void CheckStructToStruct(\n   }\n }\n \n-TEST(Cast, StructToSameSizedAndNamedStruct) {\n-  CheckStructToStruct({int32(), float32(), int64()});\n+static void CheckStructToStructSubset(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n\nReview comment:\n       and ditto for the destination type\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2262,12 +2384,11 @@ TEST(Cast, StructToSameSizedButDifferentNamedStruct) {\n \n   EXPECT_RAISES_WITH_MESSAGE_THAT(\n       TypeError,\n-      ::testing::HasSubstr(\"Type error: struct field names do not match: struct<a: int8, \"\n-                           \"b: int8> struct<c: int8, d: int8>\"),\n+      ::testing::HasSubstr(\"struct (sub)fields don't match or are in the wrong order\"),\n       Cast(src, options));\n }\n \n-TEST(Cast, StructToDifferentSizeStruct) {\n+TEST(Cast, StructToLargerSizeStruct) {\n\nReview comment:\n       just a nit\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2245,10 +2245,132 @@ static void CheckStructToStruct(\n   }\n }\n \n-TEST(Cast, StructToSameSizedAndNamedStruct) {\n-  CheckStructToStruct({int32(), float32(), int64()});\n+static void CheckStructToStructSubset(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n\nReview comment:\n       ```suggestion\r\n     for (const auto& src_value_type : value_types) {\r\n       ARROW_SCOPED_TRACE(\"From type: \", src_value_type->ToString());\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2245,10 +2245,132 @@ static void CheckStructToStruct(\n   }\n }\n \n-TEST(Cast, StructToSameSizedAndNamedStruct) {\n-  CheckStructToStruct({int32(), float32(), int64()});\n+static void CheckStructToStructSubset(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n+    for (const auto& dest_value_type : value_types) {\n+      std::vector<std::string> field_names = {\"a\", \"b\", \"c\", \"d\", \"e\"};\n+\n+      std::shared_ptr<Array> a1, b1, c1, d1, e1;\n+      a1 = ArrayFromJSON(src_value_type, \"[1, 2, 5]\");\n+      b1 = ArrayFromJSON(src_value_type, \"[3, 4, 7]\");\n+      c1 = ArrayFromJSON(src_value_type, \"[9, 11, 44]\");\n+      d1 = ArrayFromJSON(src_value_type, \"[6, 51, 49]\");\n+      e1 = ArrayFromJSON(src_value_type, \"[19, 17, 74]\");\n+\n+      std::shared_ptr<Array> a2, b2, c2, d2, e2;\n+      a2 = ArrayFromJSON(dest_value_type, \"[1, 2, 5]\");\n+      b2 = ArrayFromJSON(dest_value_type, \"[3, 4, 7]\");\n+      c2 = ArrayFromJSON(dest_value_type, \"[9, 11, 44]\");\n+      d2 = ArrayFromJSON(dest_value_type, \"[6, 51, 49]\");\n+      e2 = ArrayFromJSON(dest_value_type, \"[19, 17, 74]\");\n+\n+      ASSERT_OK_AND_ASSIGN(auto src,\n+                           StructArray::Make({a1, b1, c1, d1, e1}, field_names));\n+      ASSERT_OK_AND_ASSIGN(\n\nReview comment:\n       I think some of these cases are a little redundant.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2245,10 +2245,132 @@ static void CheckStructToStruct(\n   }\n }\n \n-TEST(Cast, StructToSameSizedAndNamedStruct) {\n-  CheckStructToStruct({int32(), float32(), int64()});\n+static void CheckStructToStructSubset(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n+    for (const auto& dest_value_type : value_types) {\n+      std::vector<std::string> field_names = {\"a\", \"b\", \"c\", \"d\", \"e\"};\n+\n+      std::shared_ptr<Array> a1, b1, c1, d1, e1;\n+      a1 = ArrayFromJSON(src_value_type, \"[1, 2, 5]\");\n+      b1 = ArrayFromJSON(src_value_type, \"[3, 4, 7]\");\n+      c1 = ArrayFromJSON(src_value_type, \"[9, 11, 44]\");\n+      d1 = ArrayFromJSON(src_value_type, \"[6, 51, 49]\");\n+      e1 = ArrayFromJSON(src_value_type, \"[19, 17, 74]\");\n+\n+      std::shared_ptr<Array> a2, b2, c2, d2, e2;\n+      a2 = ArrayFromJSON(dest_value_type, \"[1, 2, 5]\");\n+      b2 = ArrayFromJSON(dest_value_type, \"[3, 4, 7]\");\n+      c2 = ArrayFromJSON(dest_value_type, \"[9, 11, 44]\");\n+      d2 = ArrayFromJSON(dest_value_type, \"[6, 51, 49]\");\n+      e2 = ArrayFromJSON(dest_value_type, \"[19, 17, 74]\");\n+\n+      ASSERT_OK_AND_ASSIGN(auto src,\n+                           StructArray::Make({a1, b1, c1, d1, e1}, field_names));\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest1, StructArray::Make({a2, c2}, std::vector<std::string>{\"a\", \"c\"}));\n+      CheckCast(src, dest1);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest2, StructArray::Make({b2, d2}, std::vector<std::string>{\"b\", \"d\"}));\n+      CheckCast(src, dest2);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest3, StructArray::Make({c2, e2}, std::vector<std::string>{\"c\", \"e\"}));\n+      CheckCast(src, dest3);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest4,\n+          StructArray::Make({a2, d2, e2}, std::vector<std::string>{\"a\", \"d\", \"e\"}));\n+      CheckCast(src, dest4);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest5,\n+          StructArray::Make({b2, c2, e2}, std::vector<std::string>{\"b\", \"c\", \"e\"}));\n+      CheckCast(src, dest5);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest6, StructArray::Make({a2, b2, c2, e2},\n+                                        std::vector<std::string>{\"a\", \"b\", \"c\", \"e\"}));\n+      CheckCast(src, dest6);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest7, StructArray::Make({a2, b2, c2, d2, e2}, {\"a\", \"b\", \"c\", \"d\", \"e\"}));\n+      CheckCast(src, dest7);\n+\n+      const auto dest8 = arrow::struct_({std::make_shared<Field>(\"a\", int8()),\n+                                         std::make_shared<Field>(\"d\", int16()),\n+                                         std::make_shared<Field>(\"f\", int64())});\n+      const auto options = CastOptions::Safe(dest8);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\n+              \"struct (sub)fields don't match or are in the wrong order\"),\n+          Cast(src, options));\n+\n+      // With nulls\n+      std::shared_ptr<Buffer> null_bitmap;\n+      BitmapFromVector<int>({0, 1, 0}, &null_bitmap);\n+\n+      ASSERT_OK_AND_ASSIGN(auto src_null, StructArray::Make({a1, b1, c1, d1, e1},\n+                                                            field_names, null_bitmap));\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest1_null,\n+          StructArray::Make({a2, c2}, std::vector<std::string>{\"a\", \"c\"}, null_bitmap));\n+      CheckCast(src_null, dest1_null);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest2_null,\n+          StructArray::Make({b2, d2}, std::vector<std::string>{\"b\", \"d\"}, null_bitmap));\n+      CheckCast(src_null, dest2_null);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest3_null,\n+          StructArray::Make({c2, e2}, std::vector<std::string>{\"c\", \"e\"}, null_bitmap));\n+      CheckCast(src_null, dest3_null);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest4_null,\n+          StructArray::Make({a2, d2, e2}, std::vector<std::string>{\"a\", \"d\", \"e\"},\n+                            null_bitmap));\n+      CheckCast(src_null, dest4_null);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest5_null,\n+          StructArray::Make({b2, c2, e2}, std::vector<std::string>{\"b\", \"c\", \"e\"},\n+                            null_bitmap));\n+      CheckCast(src_null, dest5_null);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest6_null,\n+          StructArray::Make({a2, b2, c2, e2},\n+                            std::vector<std::string>{\"a\", \"b\", \"c\", \"e\"}, null_bitmap));\n+      CheckCast(src_null, dest6_null);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest7_null,\n+          StructArray::Make({a2, b2, c2, d2, e2},\n+                            std::vector<std::string>{\"a\", \"b\", \"c\", \"d\", \"e\"},\n+                            null_bitmap));\n+      CheckCast(src_null, dest7_null);\n+\n+      const auto dest8_null = arrow::struct_({std::make_shared<Field>(\"a\", int8()),\n+                                              std::make_shared<Field>(\"d\", int16()),\n+                                              std::make_shared<Field>(\"f\", int64())});\n\nReview comment:\n       Can we also add a case where the fields exist, but are reversed?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2281,8 +2402,7 @@ TEST(Cast, StructToDifferentSizeStruct) {\n \n   EXPECT_RAISES_WITH_MESSAGE_THAT(\n       TypeError,\n-      ::testing::HasSubstr(\"Type error: struct field sizes do not match: struct<a: int8, \"\n-                           \"b: int8> struct<a: int8, b: int8, c: int8>\"),\n+      ::testing::HasSubstr(\"struct (sub)fields don't match or are in the wrong order\"),\n       Cast(src, options));\n }\n\nReview comment:\n       Can we extend the nullability test below with a couple cases as well?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2262,12 +2384,11 @@ TEST(Cast, StructToSameSizedButDifferentNamedStruct) {\n \n   EXPECT_RAISES_WITH_MESSAGE_THAT(\n       TypeError,\n-      ::testing::HasSubstr(\"Type error: struct field names do not match: struct<a: int8, \"\n-                           \"b: int8> struct<c: int8, d: int8>\"),\n+      ::testing::HasSubstr(\"struct (sub)fields don't match or are in the wrong order\"),\n       Cast(src, options));\n }\n \n-TEST(Cast, StructToDifferentSizeStruct) {\n+TEST(Cast, StructToLargerSizeStruct) {\n\nReview comment:\n       ```suggestion\r\n   TEST(Cast, StructToBiggerStruct) {\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T21:38:43.262+0000",
                    "updated": "2022-03-28T21:38:43.262+0000",
                    "started": "2022-03-28T21:38:43.261+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748956",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/749292",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#discussion_r837407292\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -153,27 +153,32 @@ void AddListCast(CastFunction* func) {\n struct CastStruct {\n   static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n     const CastOptions& options = CastState::Get(ctx);\n-    const StructType& in_type = checked_cast<const StructType&>(*batch[0].type());\n-    const StructType& out_type = checked_cast<const StructType&>(*out->type());\n-    const auto in_field_count = in_type.num_fields();\n-\n-    if (in_field_count != out_type.num_fields()) {\n-      return Status::TypeError(\"struct field sizes do not match: \", in_type.ToString(),\n-                               \" \", out_type.ToString());\n-    }\n-\n-    for (int i = 0; i < in_field_count; ++i) {\n-      const auto in_field = in_type.field(i);\n-      const auto out_field = out_type.field(i);\n-      if (in_field->name() != out_field->name()) {\n-        return Status::TypeError(\"struct field names do not match: \", in_type.ToString(),\n-                                 \" \", out_type.ToString());\n+    const auto& in_type = checked_cast<const StructType&>(*batch[0].type());\n+    const auto& out_type = checked_cast<const StructType&>(*out->type());\n+    const int in_field_count = in_type.num_fields();\n+    const int out_field_count = out_type.num_fields();\n+\n+    std::vector<int> fields_to_select(out_field_count, -1);\n+\n+    int out_field_index = 0;\n+    for (int in_field_index = 0;\n+         in_field_index < in_field_count && out_field_index < out_field_count;\n+         ++in_field_index) {\n+      const auto in_field = in_type.field(in_field_index);\n+      const auto out_field = out_type.field(out_field_index);\n\nReview comment:\n       ```suggestion\r\n         const auto& in_field = in_type.field(in_field_index);\r\n         const auto& out_field = out_type.field(out_field_index);\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -204,9 +210,11 @@ struct CastStruct {\n                                        in_array.offset, in_array.length));\n     }\n \n-    for (int i = 0; i < in_field_count; ++i) {\n-      auto values = in_array.child_data[i]->Slice(in_array.offset, in_array.length);\n-      auto target_type = out->type()->field(i)->type();\n+    out_field_index = 0;\n+    for (int field_index : fields_to_select) {\n+      auto values =\n+          in_array.child_data[field_index]->Slice(in_array.offset, in_array.length);\n+      auto target_type = out->type()->field(out_field_index++)->type();\n\nReview comment:\n       ```suggestion\r\n         const auto& values =\r\n             in_array.child_data[field_index]->Slice(in_array.offset, in_array.length);\r\n         const auto& target_type = out->type()->field(out_field_index++)->type();\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2245,8 +2245,182 @@ static void CheckStructToStruct(\n   }\n }\n \n-TEST(Cast, StructToSameSizedAndNamedStruct) {\n-  CheckStructToStruct({int32(), float32(), int64()});\n+static void CheckStructToStructSubset(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n+    ARROW_SCOPED_TRACE(\"From type: \", src_value_type->ToString());\n+    for (const auto& dest_value_type : value_types) {\n+      ARROW_SCOPED_TRACE(\"To type: \", dest_value_type->ToString());\n+\n+      std::vector<std::string> field_names = {\"a\", \"b\", \"c\", \"d\", \"e\"};\n+\n+      std::shared_ptr<Array> a1, b1, c1, d1, e1;\n+      a1 = ArrayFromJSON(src_value_type, \"[1, 2, 5]\");\n+      b1 = ArrayFromJSON(src_value_type, \"[3, 4, 7]\");\n+      c1 = ArrayFromJSON(src_value_type, \"[9, 11, 44]\");\n+      d1 = ArrayFromJSON(src_value_type, \"[6, 51, 49]\");\n+      e1 = ArrayFromJSON(src_value_type, \"[19, 17, 74]\");\n+\n+      std::shared_ptr<Array> a2, b2, c2, d2, e2;\n+      a2 = ArrayFromJSON(dest_value_type, \"[1, 2, 5]\");\n+      b2 = ArrayFromJSON(dest_value_type, \"[3, 4, 7]\");\n+      c2 = ArrayFromJSON(dest_value_type, \"[9, 11, 44]\");\n+      d2 = ArrayFromJSON(dest_value_type, \"[6, 51, 49]\");\n+      e2 = ArrayFromJSON(dest_value_type, \"[19, 17, 74]\");\n+\n+      ASSERT_OK_AND_ASSIGN(auto src,\n+                           StructArray::Make({a1, b1, c1, d1, e1}, field_names));\n+      ASSERT_OK_AND_ASSIGN(auto dest1,\n+                           StructArray::Make({a2}, std::vector<std::string>{\"a\"}));\n+      CheckCast(src, dest1);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest2, StructArray::Make({b2, c2}, std::vector<std::string>{\"b\", \"c\"}));\n+      CheckCast(src, dest2);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest3,\n+          StructArray::Make({c2, d2, e2}, std::vector<std::string>{\"c\", \"d\", \"e\"}));\n+      CheckCast(src, dest3);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest4, StructArray::Make({a2, b2, c2, e2},\n+                                        std::vector<std::string>{\"a\", \"b\", \"c\", \"e\"}));\n+      CheckCast(src, dest4);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest5, StructArray::Make({a2, b2, c2, d2, e2}, {\"a\", \"b\", \"c\", \"d\", \"e\"}));\n+      CheckCast(src, dest5);\n+\n+      // field does not exist\n+      const auto dest6 = arrow::struct_({std::make_shared<Field>(\"a\", int8()),\n+                                         std::make_shared<Field>(\"d\", int16()),\n+                                         std::make_shared<Field>(\"f\", int64())});\n+      const auto options6 = CastOptions::Safe(dest6);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\"struct fields don't match or are in the wrong order\"),\n+          Cast(src, options6));\n+\n+      // fields in wrong order\n+      const auto dest7 = arrow::struct_({std::make_shared<Field>(\"a\", int8()),\n+                                         std::make_shared<Field>(\"c\", int16()),\n+                                         std::make_shared<Field>(\"b\", int64())});\n+      const auto options7 = CastOptions::Safe(dest7);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\"struct fields don't match or are in the wrong order\"),\n+          Cast(src, options7));\n+\n+      // duplicate field names\n+      const auto dest8 = arrow::struct_(\n+          {std::make_shared<Field>(\"a\", int8()), std::make_shared<Field>(\"c\", int16()),\n+           std::make_shared<Field>(\"d\", int32()), std::make_shared<Field>(\"a\", int64())});\n+      const auto options8 = CastOptions::Safe(dest8);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\"struct fields don't match or are in the wrong order\"),\n+          Cast(src, options8));\n+    }\n+  }\n+}\n+\n+static void CheckStructToStructSubsetWithNulls(\n\nReview comment:\n       I would expect \"with nulls\" to have (some) children with nulls\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2281,52 +2454,102 @@ TEST(Cast, StructToDifferentSizeStruct) {\n \n   EXPECT_RAISES_WITH_MESSAGE_THAT(\n       TypeError,\n-      ::testing::HasSubstr(\"Type error: struct field sizes do not match: struct<a: int8, \"\n-                           \"b: int8> struct<a: int8, b: int8, c: int8>\"),\n+      ::testing::HasSubstr(\"struct fields don't match or are in the wrong order\"),\n       Cast(src, options));\n }\n \n-TEST(Cast, StructToSameSizedButDifferentNullabilityStruct) {\n-  // OK to go from not-nullable to nullable...\n-  std::vector<std::shared_ptr<Field>> fields1 = {\n-      std::make_shared<Field>(\"a\", int8(), false),\n-      std::make_shared<Field>(\"b\", int8(), false)};\n-  std::shared_ptr<Array> a1, b1;\n-  a1 = ArrayFromJSON(int8(), \"[1, 2]\");\n-  b1 = ArrayFromJSON(int8(), \"[3, 4]\");\n-  ASSERT_OK_AND_ASSIGN(auto src1, StructArray::Make({a1, b1}, fields1));\n-\n-  std::vector<std::shared_ptr<Field>> fields2 = {\n-      std::make_shared<Field>(\"a\", int8(), true),\n-      std::make_shared<Field>(\"b\", int8(), true)};\n-  std::shared_ptr<Array> a2, b2;\n-  a2 = ArrayFromJSON(int8(), \"[1, 2]\");\n-  b2 = ArrayFromJSON(int8(), \"[3, 4]\");\n-  ASSERT_OK_AND_ASSIGN(auto dest1, StructArray::Make({a2, b2}, fields2));\n-\n-  CheckCast(src1, dest1);\n-\n-  // But not the other way around\n-  std::vector<std::shared_ptr<Field>> fields3 = {\n-      std::make_shared<Field>(\"a\", int8(), true),\n-      std::make_shared<Field>(\"b\", int8(), true)};\n-  std::shared_ptr<Array> a3, b3;\n-  a3 = ArrayFromJSON(int8(), \"[1, null]\");\n-  b3 = ArrayFromJSON(int8(), \"[3, 4]\");\n-  ASSERT_OK_AND_ASSIGN(auto src2, StructArray::Make({a3, b3}, fields3));\n-\n-  std::vector<std::shared_ptr<Field>> fields4 = {\n-      std::make_shared<Field>(\"a\", int8(), false),\n-      std::make_shared<Field>(\"b\", int8(), false)};\n-  const auto dest2 = arrow::struct_(fields4);\n-  const auto options = CastOptions::Safe(dest2);\n-\n-  EXPECT_RAISES_WITH_MESSAGE_THAT(\n-      TypeError,\n-      ::testing::HasSubstr(\n-          \"Type error: cannot cast nullable struct to non-nullable \"\n-          \"struct: struct<a: int8, b: int8> struct<a: int8 not null, b: int8 not null>\"),\n-      Cast(src2, options));\n+TEST(Cast, StructToDifferentNullabilityStruct) {\n+  {\n+    // OK to go from non-nullable to nullable...\n+    ARROW_SCOPED_TRACE(\"From non-nullable to nullable\");\n\nReview comment:\n       nit, but this is really only useful for loops or templated tests, or when the line number is otherwise insufficient. For something like this it doesn't bring much.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -153,27 +153,32 @@ void AddListCast(CastFunction* func) {\n struct CastStruct {\n   static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n     const CastOptions& options = CastState::Get(ctx);\n-    const StructType& in_type = checked_cast<const StructType&>(*batch[0].type());\n-    const StructType& out_type = checked_cast<const StructType&>(*out->type());\n-    const auto in_field_count = in_type.num_fields();\n-\n-    if (in_field_count != out_type.num_fields()) {\n-      return Status::TypeError(\"struct field sizes do not match: \", in_type.ToString(),\n-                               \" \", out_type.ToString());\n-    }\n-\n-    for (int i = 0; i < in_field_count; ++i) {\n-      const auto in_field = in_type.field(i);\n-      const auto out_field = out_type.field(i);\n-      if (in_field->name() != out_field->name()) {\n-        return Status::TypeError(\"struct field names do not match: \", in_type.ToString(),\n-                                 \" \", out_type.ToString());\n+    const auto& in_type = checked_cast<const StructType&>(*batch[0].type());\n+    const auto& out_type = checked_cast<const StructType&>(*out->type());\n+    const int in_field_count = in_type.num_fields();\n+    const int out_field_count = out_type.num_fields();\n+\n+    std::vector<int> fields_to_select(out_field_count, -1);\n+\n+    int out_field_index = 0;\n+    for (int in_field_index = 0;\n+         in_field_index < in_field_count && out_field_index < out_field_count;\n+         ++in_field_index) {\n+      const auto in_field = in_type.field(in_field_index);\n+      const auto out_field = out_type.field(out_field_index);\n\nReview comment:\n       (nit, to avoid a copy)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_nested.cc\n##########\n@@ -182,9 +187,10 @@ struct CastStruct {\n \n       DCHECK(!out_scalar->is_valid);\n       if (in_scalar.is_valid) {\n-        for (int i = 0; i < in_field_count; i++) {\n-          auto values = in_scalar.value[i];\n-          auto target_type = out->type()->field(i)->type();\n+        out_field_index = 0;\n+        for (int field_index : fields_to_select) {\n+          auto values = in_scalar.value[field_index];\n+          auto target_type = out->type()->field(out_field_index++)->type();\n\nReview comment:\n       ```suggestion\r\n             const auto& values = in_scalar.value[field_index];\r\n             const auto& target_type = out->type()->field(out_field_index++)->type();\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2245,8 +2245,182 @@ static void CheckStructToStruct(\n   }\n }\n \n-TEST(Cast, StructToSameSizedAndNamedStruct) {\n-  CheckStructToStruct({int32(), float32(), int64()});\n+static void CheckStructToStructSubset(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n+    ARROW_SCOPED_TRACE(\"From type: \", src_value_type->ToString());\n+    for (const auto& dest_value_type : value_types) {\n+      ARROW_SCOPED_TRACE(\"To type: \", dest_value_type->ToString());\n+\n+      std::vector<std::string> field_names = {\"a\", \"b\", \"c\", \"d\", \"e\"};\n+\n+      std::shared_ptr<Array> a1, b1, c1, d1, e1;\n+      a1 = ArrayFromJSON(src_value_type, \"[1, 2, 5]\");\n+      b1 = ArrayFromJSON(src_value_type, \"[3, 4, 7]\");\n+      c1 = ArrayFromJSON(src_value_type, \"[9, 11, 44]\");\n+      d1 = ArrayFromJSON(src_value_type, \"[6, 51, 49]\");\n+      e1 = ArrayFromJSON(src_value_type, \"[19, 17, 74]\");\n+\n+      std::shared_ptr<Array> a2, b2, c2, d2, e2;\n+      a2 = ArrayFromJSON(dest_value_type, \"[1, 2, 5]\");\n+      b2 = ArrayFromJSON(dest_value_type, \"[3, 4, 7]\");\n+      c2 = ArrayFromJSON(dest_value_type, \"[9, 11, 44]\");\n+      d2 = ArrayFromJSON(dest_value_type, \"[6, 51, 49]\");\n+      e2 = ArrayFromJSON(dest_value_type, \"[19, 17, 74]\");\n+\n+      ASSERT_OK_AND_ASSIGN(auto src,\n+                           StructArray::Make({a1, b1, c1, d1, e1}, field_names));\n+      ASSERT_OK_AND_ASSIGN(auto dest1,\n+                           StructArray::Make({a2}, std::vector<std::string>{\"a\"}));\n+      CheckCast(src, dest1);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest2, StructArray::Make({b2, c2}, std::vector<std::string>{\"b\", \"c\"}));\n+      CheckCast(src, dest2);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest3,\n+          StructArray::Make({c2, d2, e2}, std::vector<std::string>{\"c\", \"d\", \"e\"}));\n+      CheckCast(src, dest3);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest4, StructArray::Make({a2, b2, c2, e2},\n+                                        std::vector<std::string>{\"a\", \"b\", \"c\", \"e\"}));\n+      CheckCast(src, dest4);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest5, StructArray::Make({a2, b2, c2, d2, e2}, {\"a\", \"b\", \"c\", \"d\", \"e\"}));\n+      CheckCast(src, dest5);\n+\n+      // field does not exist\n+      const auto dest6 = arrow::struct_({std::make_shared<Field>(\"a\", int8()),\n+                                         std::make_shared<Field>(\"d\", int16()),\n+                                         std::make_shared<Field>(\"f\", int64())});\n+      const auto options6 = CastOptions::Safe(dest6);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\"struct fields don't match or are in the wrong order\"),\n+          Cast(src, options6));\n+\n+      // fields in wrong order\n+      const auto dest7 = arrow::struct_({std::make_shared<Field>(\"a\", int8()),\n+                                         std::make_shared<Field>(\"c\", int16()),\n+                                         std::make_shared<Field>(\"b\", int64())});\n+      const auto options7 = CastOptions::Safe(dest7);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\"struct fields don't match or are in the wrong order\"),\n+          Cast(src, options7));\n+\n+      // duplicate field names\n\nReview comment:\n       What I meant is that I would expect you to be able to cast `struct<a: int8(), a: int8()>` to `struct<a: int64()>` or to `struct<a: int64(), a: int64()>` successfully (though this is also a sensible case to have)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T12:27:04.866+0000",
                    "updated": "2022-03-29T12:27:04.866+0000",
                    "started": "2022-03-29T12:27:04.866+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749292",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/749385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#discussion_r837591971\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2245,8 +2245,182 @@ static void CheckStructToStruct(\n   }\n }\n \n-TEST(Cast, StructToSameSizedAndNamedStruct) {\n-  CheckStructToStruct({int32(), float32(), int64()});\n+static void CheckStructToStructSubset(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n+    ARROW_SCOPED_TRACE(\"From type: \", src_value_type->ToString());\n+    for (const auto& dest_value_type : value_types) {\n+      ARROW_SCOPED_TRACE(\"To type: \", dest_value_type->ToString());\n+\n+      std::vector<std::string> field_names = {\"a\", \"b\", \"c\", \"d\", \"e\"};\n+\n+      std::shared_ptr<Array> a1, b1, c1, d1, e1;\n+      a1 = ArrayFromJSON(src_value_type, \"[1, 2, 5]\");\n+      b1 = ArrayFromJSON(src_value_type, \"[3, 4, 7]\");\n+      c1 = ArrayFromJSON(src_value_type, \"[9, 11, 44]\");\n+      d1 = ArrayFromJSON(src_value_type, \"[6, 51, 49]\");\n+      e1 = ArrayFromJSON(src_value_type, \"[19, 17, 74]\");\n+\n+      std::shared_ptr<Array> a2, b2, c2, d2, e2;\n+      a2 = ArrayFromJSON(dest_value_type, \"[1, 2, 5]\");\n+      b2 = ArrayFromJSON(dest_value_type, \"[3, 4, 7]\");\n+      c2 = ArrayFromJSON(dest_value_type, \"[9, 11, 44]\");\n+      d2 = ArrayFromJSON(dest_value_type, \"[6, 51, 49]\");\n+      e2 = ArrayFromJSON(dest_value_type, \"[19, 17, 74]\");\n+\n+      ASSERT_OK_AND_ASSIGN(auto src,\n+                           StructArray::Make({a1, b1, c1, d1, e1}, field_names));\n+      ASSERT_OK_AND_ASSIGN(auto dest1,\n+                           StructArray::Make({a2}, std::vector<std::string>{\"a\"}));\n+      CheckCast(src, dest1);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest2, StructArray::Make({b2, c2}, std::vector<std::string>{\"b\", \"c\"}));\n+      CheckCast(src, dest2);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest3,\n+          StructArray::Make({c2, d2, e2}, std::vector<std::string>{\"c\", \"d\", \"e\"}));\n+      CheckCast(src, dest3);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest4, StructArray::Make({a2, b2, c2, e2},\n+                                        std::vector<std::string>{\"a\", \"b\", \"c\", \"e\"}));\n+      CheckCast(src, dest4);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest5, StructArray::Make({a2, b2, c2, d2, e2}, {\"a\", \"b\", \"c\", \"d\", \"e\"}));\n+      CheckCast(src, dest5);\n+\n+      // field does not exist\n+      const auto dest6 = arrow::struct_({std::make_shared<Field>(\"a\", int8()),\n+                                         std::make_shared<Field>(\"d\", int16()),\n+                                         std::make_shared<Field>(\"f\", int64())});\n+      const auto options6 = CastOptions::Safe(dest6);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\"struct fields don't match or are in the wrong order\"),\n+          Cast(src, options6));\n+\n+      // fields in wrong order\n+      const auto dest7 = arrow::struct_({std::make_shared<Field>(\"a\", int8()),\n+                                         std::make_shared<Field>(\"c\", int16()),\n+                                         std::make_shared<Field>(\"b\", int64())});\n+      const auto options7 = CastOptions::Safe(dest7);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\"struct fields don't match or are in the wrong order\"),\n+          Cast(src, options7));\n+\n+      // duplicate field names\n+      const auto dest8 = arrow::struct_(\n+          {std::make_shared<Field>(\"a\", int8()), std::make_shared<Field>(\"c\", int16()),\n+           std::make_shared<Field>(\"d\", int32()), std::make_shared<Field>(\"a\", int64())});\n+      const auto options8 = CastOptions::Safe(dest8);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\"struct fields don't match or are in the wrong order\"),\n+          Cast(src, options8));\n+    }\n+  }\n+}\n+\n+static void CheckStructToStructSubsetWithNulls(\n\nReview comment:\n       hmm, I was under the impression that passing the `null_bitmap` to `StructArray::Make` does that. Or is that a StructArray wide thing?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T15:07:27.121+0000",
                    "updated": "2022-03-29T15:07:27.121+0000",
                    "started": "2022-03-29T15:07:27.121+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749385",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/749389",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#discussion_r837596344\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -2245,8 +2245,182 @@ static void CheckStructToStruct(\n   }\n }\n \n-TEST(Cast, StructToSameSizedAndNamedStruct) {\n-  CheckStructToStruct({int32(), float32(), int64()});\n+static void CheckStructToStructSubset(\n+    const std::vector<std::shared_ptr<DataType>>& value_types) {\n+  for (const auto& src_value_type : value_types) {\n+    ARROW_SCOPED_TRACE(\"From type: \", src_value_type->ToString());\n+    for (const auto& dest_value_type : value_types) {\n+      ARROW_SCOPED_TRACE(\"To type: \", dest_value_type->ToString());\n+\n+      std::vector<std::string> field_names = {\"a\", \"b\", \"c\", \"d\", \"e\"};\n+\n+      std::shared_ptr<Array> a1, b1, c1, d1, e1;\n+      a1 = ArrayFromJSON(src_value_type, \"[1, 2, 5]\");\n+      b1 = ArrayFromJSON(src_value_type, \"[3, 4, 7]\");\n+      c1 = ArrayFromJSON(src_value_type, \"[9, 11, 44]\");\n+      d1 = ArrayFromJSON(src_value_type, \"[6, 51, 49]\");\n+      e1 = ArrayFromJSON(src_value_type, \"[19, 17, 74]\");\n+\n+      std::shared_ptr<Array> a2, b2, c2, d2, e2;\n+      a2 = ArrayFromJSON(dest_value_type, \"[1, 2, 5]\");\n+      b2 = ArrayFromJSON(dest_value_type, \"[3, 4, 7]\");\n+      c2 = ArrayFromJSON(dest_value_type, \"[9, 11, 44]\");\n+      d2 = ArrayFromJSON(dest_value_type, \"[6, 51, 49]\");\n+      e2 = ArrayFromJSON(dest_value_type, \"[19, 17, 74]\");\n+\n+      ASSERT_OK_AND_ASSIGN(auto src,\n+                           StructArray::Make({a1, b1, c1, d1, e1}, field_names));\n+      ASSERT_OK_AND_ASSIGN(auto dest1,\n+                           StructArray::Make({a2}, std::vector<std::string>{\"a\"}));\n+      CheckCast(src, dest1);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest2, StructArray::Make({b2, c2}, std::vector<std::string>{\"b\", \"c\"}));\n+      CheckCast(src, dest2);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest3,\n+          StructArray::Make({c2, d2, e2}, std::vector<std::string>{\"c\", \"d\", \"e\"}));\n+      CheckCast(src, dest3);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest4, StructArray::Make({a2, b2, c2, e2},\n+                                        std::vector<std::string>{\"a\", \"b\", \"c\", \"e\"}));\n+      CheckCast(src, dest4);\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto dest5, StructArray::Make({a2, b2, c2, d2, e2}, {\"a\", \"b\", \"c\", \"d\", \"e\"}));\n+      CheckCast(src, dest5);\n+\n+      // field does not exist\n+      const auto dest6 = arrow::struct_({std::make_shared<Field>(\"a\", int8()),\n+                                         std::make_shared<Field>(\"d\", int16()),\n+                                         std::make_shared<Field>(\"f\", int64())});\n+      const auto options6 = CastOptions::Safe(dest6);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\"struct fields don't match or are in the wrong order\"),\n+          Cast(src, options6));\n+\n+      // fields in wrong order\n+      const auto dest7 = arrow::struct_({std::make_shared<Field>(\"a\", int8()),\n+                                         std::make_shared<Field>(\"c\", int16()),\n+                                         std::make_shared<Field>(\"b\", int64())});\n+      const auto options7 = CastOptions::Safe(dest7);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\"struct fields don't match or are in the wrong order\"),\n+          Cast(src, options7));\n+\n+      // duplicate field names\n+      const auto dest8 = arrow::struct_(\n+          {std::make_shared<Field>(\"a\", int8()), std::make_shared<Field>(\"c\", int16()),\n+           std::make_shared<Field>(\"d\", int32()), std::make_shared<Field>(\"a\", int64())});\n+      const auto options8 = CastOptions::Safe(dest8);\n+      EXPECT_RAISES_WITH_MESSAGE_THAT(\n+          TypeError,\n+          ::testing::HasSubstr(\"struct fields don't match or are in the wrong order\"),\n+          Cast(src, options8));\n+    }\n+  }\n+}\n+\n+static void CheckStructToStructSubsetWithNulls(\n\nReview comment:\n       struct arrays are arrays, they have their own null bitmap, but their child arrays are still arrays, and have their own null bitmap, these are distinct\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T15:11:09.669+0000",
                    "updated": "2022-03-29T15:11:09.669+0000",
                    "started": "2022-03-29T15:11:09.669+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749389",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/751616",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#issuecomment-1086001429\n\n\n   Would we have to address the other cases talked about in the JIRA in this PR itself, or will that involve follow-up PRs?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T14:57:51.039+0000",
                    "updated": "2022-04-01T14:57:51.039+0000",
                    "started": "2022-04-01T14:57:51.039+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751616",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/751639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#issuecomment-1086087718\n\n\n   I think we can file a separate JIRA to handle reordering fields via a cast.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T16:01:04.160+0000",
                    "updated": "2022-04-01T16:01:04.160+0000",
                    "started": "2022-04-01T16:01:04.160+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751639",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/751665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm closed pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T16:22:30.315+0000",
                    "updated": "2022-04-01T16:22:30.315+0000",
                    "started": "2022-04-01T16:22:30.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751665",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/751671",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#issuecomment-1086117019\n\n\n   Benchmark runs are scheduled for baseline = bda70875d2957bf1c890ef0457ce7836dd797aa6 and contender = ac3be08e4923be914b1b89c2062d0886d23141b7. ac3be08e4923be914b1b89c2062d0886d23141b7 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/3f472695b54f4d6ebec1283ad85913ee...dfa43eb3dd37464f93414ce348a8cb8b/)\n   [Scheduled] [test-mac-arm](https://conbench.ursa.dev/compare/runs/29e2c5a9eb874a5a82087691ac3b6448...aa6f26b1e700408e89a16885cad19f64/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/65fc25ca716c4501be28b04620ace8b2...e67c22b35ee24079bed20222f6cba1ce/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/4b820965a87f48e893039622eb28fbff...b64d070750804ab0a01faf710c7a78f1/)\n   Buildkite builds:\n   [Scheduled] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/430| `ac3be08e` ec2-t3-xlarge-us-east-2>\n   [Scheduled] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/415| `ac3be08e` test-mac-arm>\n   [Scheduled] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/425| `ac3be08e` ursa-thinkcentre-m75q>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/429| `bda70875` ec2-t3-xlarge-us-east-2>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/414| `bda70875` test-mac-arm>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/424| `bda70875` ursa-thinkcentre-m75q>\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T16:31:50.543+0000",
                    "updated": "2022-04-01T16:31:50.543+0000",
                    "started": "2022-04-01T16:31:50.543+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751671",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/751678",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#issuecomment-1086117019\n\n\n   Benchmark runs are scheduled for baseline = bda70875d2957bf1c890ef0457ce7836dd797aa6 and contender = ac3be08e4923be914b1b89c2062d0886d23141b7. ac3be08e4923be914b1b89c2062d0886d23141b7 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/3f472695b54f4d6ebec1283ad85913ee...dfa43eb3dd37464f93414ce348a8cb8b/)\n   [Scheduled] [test-mac-arm](https://conbench.ursa.dev/compare/runs/29e2c5a9eb874a5a82087691ac3b6448...aa6f26b1e700408e89a16885cad19f64/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/65fc25ca716c4501be28b04620ace8b2...e67c22b35ee24079bed20222f6cba1ce/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/4b820965a87f48e893039622eb28fbff...b64d070750804ab0a01faf710c7a78f1/)\n   Buildkite builds:\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/430| `ac3be08e` ec2-t3-xlarge-us-east-2>\n   [Scheduled] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/415| `ac3be08e` test-mac-arm>\n   [Scheduled] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/425| `ac3be08e` ursa-thinkcentre-m75q>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/429| `bda70875` ec2-t3-xlarge-us-east-2>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/414| `bda70875` test-mac-arm>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/424| `bda70875` ursa-thinkcentre-m75q>\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T16:51:42.087+0000",
                    "updated": "2022-04-01T16:51:42.087+0000",
                    "started": "2022-04-01T16:51:42.087+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751678",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/751742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#issuecomment-1086117019\n\n\n   Benchmark runs are scheduled for baseline = bda70875d2957bf1c890ef0457ce7836dd797aa6 and contender = ac3be08e4923be914b1b89c2062d0886d23141b7. ac3be08e4923be914b1b89c2062d0886d23141b7 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/3f472695b54f4d6ebec1283ad85913ee...dfa43eb3dd37464f93414ce348a8cb8b/)\n   [Finished :arrow_down:0.38% :arrow_up:0.0%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/29e2c5a9eb874a5a82087691ac3b6448...aa6f26b1e700408e89a16885cad19f64/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/65fc25ca716c4501be28b04620ace8b2...e67c22b35ee24079bed20222f6cba1ce/)\n   [Finished :arrow_down:0.34% :arrow_up:0.09%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/4b820965a87f48e893039622eb28fbff...b64d070750804ab0a01faf710c7a78f1/)\n   Buildkite builds:\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/430| `ac3be08e` ec2-t3-xlarge-us-east-2>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/415| `ac3be08e` test-mac-arm>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/425| `ac3be08e` ursa-thinkcentre-m75q>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/429| `bda70875` ec2-t3-xlarge-us-east-2>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/414| `bda70875` test-mac-arm>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/424| `bda70875` ursa-thinkcentre-m75q>\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T18:32:37.530+0000",
                    "updated": "2022-04-01T18:32:37.530+0000",
                    "started": "2022-04-01T18:32:37.530+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751742",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/752040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#issuecomment-1086117019\n\n\n   Benchmark runs are scheduled for baseline = bda70875d2957bf1c890ef0457ce7836dd797aa6 and contender = ac3be08e4923be914b1b89c2062d0886d23141b7. ac3be08e4923be914b1b89c2062d0886d23141b7 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/3f472695b54f4d6ebec1283ad85913ee...dfa43eb3dd37464f93414ce348a8cb8b/)\n   [Finished :arrow_down:0.38% :arrow_up:0.0%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/29e2c5a9eb874a5a82087691ac3b6448...aa6f26b1e700408e89a16885cad19f64/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/65fc25ca716c4501be28b04620ace8b2...e67c22b35ee24079bed20222f6cba1ce/)\n   [Finished :arrow_down:0.34% :arrow_up:0.09%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/4b820965a87f48e893039622eb28fbff...b64d070750804ab0a01faf710c7a78f1/)\n   Buildkite builds:\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/430| `ac3be08e` ec2-t3-xlarge-us-east-2>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/415| `ac3be08e` test-mac-arm>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/425| `ac3be08e` ursa-thinkcentre-m75q>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/429| `bda70875` ec2-t3-xlarge-us-east-2>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/414| `bda70875` test-mac-arm>\n   [Scheduled] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/414| `bda70875` ursa-i9-9960x>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/424| `bda70875` ursa-thinkcentre-m75q>\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-03T09:51:47.653+0000",
                    "updated": "2022-04-03T09:51:47.653+0000",
                    "started": "2022-04-03T09:51:47.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752040",
                    "issueId": "13427734"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/worklog/752047",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12724:\nURL: https://github.com/apache/arrow/pull/12724#issuecomment-1086117019\n\n\n   Benchmark runs are scheduled for baseline = bda70875d2957bf1c890ef0457ce7836dd797aa6 and contender = ac3be08e4923be914b1b89c2062d0886d23141b7. ac3be08e4923be914b1b89c2062d0886d23141b7 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/3f472695b54f4d6ebec1283ad85913ee...dfa43eb3dd37464f93414ce348a8cb8b/)\n   [Finished :arrow_down:0.38% :arrow_up:0.0%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/29e2c5a9eb874a5a82087691ac3b6448...aa6f26b1e700408e89a16885cad19f64/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/65fc25ca716c4501be28b04620ace8b2...e67c22b35ee24079bed20222f6cba1ce/)\n   [Finished :arrow_down:0.34% :arrow_up:0.09%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/4b820965a87f48e893039622eb28fbff...b64d070750804ab0a01faf710c7a78f1/)\n   Buildkite builds:\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/430| `ac3be08e` ec2-t3-xlarge-us-east-2>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/415| `ac3be08e` test-mac-arm>\n   [Scheduled] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/415| `ac3be08e` ursa-i9-9960x>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/425| `ac3be08e` ursa-thinkcentre-m75q>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/429| `bda70875` ec2-t3-xlarge-us-east-2>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/414| `bda70875` test-mac-arm>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/414| `bda70875` ursa-i9-9960x>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/424| `bda70875` ursa-thinkcentre-m75q>\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-03T12:31:41.368+0000",
                    "updated": "2022-04-03T12:31:41.368+0000",
                    "started": "2022-04-03T12:31:41.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752047",
                    "issueId": "13427734"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2fe746ac[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@268ec714[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61a4a5fb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@314278bc[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f861fcc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@61f4a5f6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@253b4f4e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@79e44cd[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38d9538d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7c468a75[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@378eb8c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@76b56f02[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Apr 01 16:22:23 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-01T16:22:23.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15643/watchers",
            "watchCount": 8,
            "isWatching": false
        },
        "created": "2022-02-10T11:05:36.000+0000",
        "updated": "2022-04-04T17:08:31.000+0000",
        "timeoriginalestimate": null,
        "description": "Triggered by https://stackoverflow.com/questions/71035754/pyarrow-drop-a-column-in-a-nested-structure. I thought there was already an issue about this, but don't directly find one.\r\n\r\nAssume you have a struct array with some fields:\r\n\r\n{code}\r\n>>> arr = pa.StructArray.from_arrays([[1, 2, 3]]*3, names=['a', 'b', 'c'])\r\n>>> arr.type\r\nStructType(struct<a: int64, b: int64, c: int64>)\r\n{code}\r\n\r\nWe have a kernel to select a single child field:\r\n\r\n{code}\r\n>>> pc.struct_field(arr, [0])\r\n<pyarrow.lib.Int64Array object at 0x7ffa9e229940>\r\n[\r\n  1,\r\n  2,\r\n  3\r\n]\r\n{code}\r\n\r\nBut if you want to subset the StructArray to some of its fields, resulting in a new StructArray, that's not possible with {{struct_field}}, and doing this manually is a bit cumbersome:\r\n\r\n{code}\r\n>>> fields = ['a', 'c']\r\n>>> arrays = [arr.field(n) for n in fields]\r\n>>> arr_subset = pa.StructArray.from_arrays(arrays, names=fields)\r\n>>> arr_subset.type\r\nStructType(struct<a: int64, c: int64>)\r\n{code}\r\n\r\n(this is still OK, but if you had a ChunkedArray, it certainly gets annoying)\r\n\r\nOne option could be to expand the existing {{struct_field}} to allow selecting multiple fields (although that probably gets ambigous/confusing with how you currently select a recursively nested field -> [0, 1] currently means \"first child, second subchild\" and not \"first and second child\"). \r\nOr a new kernel like \"struct_subset\" or some other name.\r\n\r\nThis might also overlap with general projection functionality? (cc [~westonpace])\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Kernel to select subset of fields of a StructArray",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/comment/17490148",
                    "id": "17490148",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=0x26dres",
                        "name": "0x26dres",
                        "key": "0x26dres",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=0x26dres&avatarId=50850",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=0x26dres&avatarId=50850",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=0x26dres&avatarId=50850",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=0x26dres&avatarId=50850"
                        },
                        "displayName": "&res",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks for raising the issue.\r\n\r\nI've noticed that you can't cast a struct array to a sub set of the struct. So for example:\r\n{code:python}\r\nimport pyarrow as pa\r\n\r\n\r\nstruct_type = pa.struct(\r\n    [pa.field(\"field1\", pa.string()), pa.field(\"field2\", pa.int32())]\r\n)\r\n\r\nsub_struct_type = pa.struct(\r\n    [\r\n        pa.field(\"field1\", pa.string()),\r\n    ]\r\n)\r\n\r\n\r\nstruct_array = pa.array(\r\n    [\r\n        (\"ABC\", 123),\r\n        (\"EFG\", 456),\r\n    ],\r\n    struct_type,\r\n)\r\n\r\nstruct_array.cast(sub_struct_type)\r\n\r\n{code}\r\n\r\nGives you:\r\n{code}\r\n\r\n    return call_function(\"cast\", [arr], options)\r\n  File \"pyarrow/_compute.pyx\", line 527, in pyarrow._compute.call_function\r\n  File \"pyarrow/_compute.pyx\", line 337, in pyarrow._compute.Function.call\r\n  File \"pyarrow/error.pxi\", line 143, in pyarrow.lib.pyarrow_internal_check_status\r\n  File \"pyarrow/error.pxi\", line 120, in pyarrow.lib.check_status\r\npyarrow.lib.ArrowNotImplementedError: Unsupported cast from struct<field1: string, field2: int32> to struct using function cast_struct\r\n\r\n{code}\r\n\r\nSo one option would be to support this type of cast.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=0x26dres",
                        "name": "0x26dres",
                        "key": "0x26dres",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=0x26dres&avatarId=50850",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=0x26dres&avatarId=50850",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=0x26dres&avatarId=50850",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=0x26dres&avatarId=50850"
                        },
                        "displayName": "&res",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-10T11:43:59.896+0000",
                    "updated": "2022-02-10T11:43:59.896+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/comment/17490155",
                    "id": "17490155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "In general we don't yet have implemented much casting support for structs (eg ARROW-1888 to cast the fields to a different type, which is currently being worked on. But I _suppose_ that PR currently allows the cast only for the same field names and number of fields, i.e. only changing the type of the field).   \r\nBut indeed, that would also be a way to support this functionality. I think such a cast would be useful to allow in any case. But I also might not directly think about using casting if I am looking to do a field selection (eg a Table and RecordBatch have a {{select}} method, and RecordBatch and StructArray are quite similar, so we could also have a StructArray.select method)\r\n \r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-02-10T11:52:19.665+0000",
                    "updated": "2022-02-10T11:52:19.665+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/comment/17490945",
                    "id": "17490945",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think we can implement it as a cast, but have a utility method {{StructArray.select}}. We can extend ARROW-1888 indeed.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-02-11T14:13:48.971+0000",
                    "updated": "2022-02-11T14:13:48.971+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/comment/17492687",
                    "id": "17492687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "ARROW-1888 has been merged now, and currently the cast is \"strict\", meaning that it requires the exact same number of fields with the same names in the same order. If we want to support this issue through a cast, this could be relaxed to:\r\n\r\n- allowing the fields of the target type to be a subset of the existing fields (but so no field names that are not present in the original array? Or also allow that in which case that field gets filled with nulls)\r\n- also allowing them to be in a different order?\r\n\r\nOne thing I am wondering though, is whether we should consider this as a \"safe\" cast, or if we should add a new flag to the CastOptions to allow changing the fields of a struct ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-02-15T15:53:50.623+0000",
                    "updated": "2022-02-15T15:53:50.623+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/comment/17492693",
                    "id": "17492693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
                        "name": "willayd",
                        "key": "willayd",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
                        },
                        "displayName": "Will Ayd",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "It feels right to me to allow the target type to subset the originating type. I'm not yet sure about the different order aspect. There is definitely some ambiguity that arises when the order changes. If you have an originating type of \"x, y, z\" and a target type of \"z, y, x\" I don't think its very clear if the alignment should be by name or by position - perhaps that is where the flag you are thinking about comes into play?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
                        "name": "willayd",
                        "key": "willayd",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
                        },
                        "displayName": "Will Ayd",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-15T16:07:55.923+0000",
                    "updated": "2022-02-15T16:07:55.923+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/comment/17492843",
                    "id": "17492843",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "We have a concrete use case for the \"subset\" version in scanning.  Users can specify nested refs which can be satisfied in the parquet reader but not the CSV reader.  So for the CSV case we need to be able to read in the full column and then cast down to the targetted struct the user is asking for in the nested ref.\r\n\r\nI don't know about reordering but it might be needed for Substrait to support their emit property which I think can arbitrarily reorder columns, both at the batch level and any nested level in a struct.\r\n\r\nI'm not sure what the rationale is for the \"safe\" flag.  Are you saying it might be nice for users to say \"do this cast if it can be done zero-copy but fail otherwise\"?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-02-15T19:24:41.392+0000",
                    "updated": "2022-02-15T19:24:41.392+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/comment/17512249",
                    "id": "17512249",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dhruv9vats",
                        "name": "dhruv9vats",
                        "key": "dhruv9vats",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Dhruv Vats",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "If this has some priority, I'd be happy to work on this. But I'm not clear on what path are we settling on. Do we implement {{struct_subset}} kernel and the casting functionality differently? Or should it be like\u00a0implement one and use that to implement the other?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dhruv9vats",
                        "name": "dhruv9vats",
                        "key": "dhruv9vats",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Dhruv Vats",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2022-03-25T08:19:53.828+0000",
                    "updated": "2022-03-25T08:19:53.828+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/comment/17512359",
                    "id": "17512359",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I believe this should be a cast. For one, that means it will automatically make scanning better!\r\n\r\nWe can tackle the unambiguous cases first, and work on the ambiguous cases later. For instance, subsetting fields without changing order should be reasonable. We can later add a field to also allow reordering, and to handle various ambiguous cases that Will raised.\r\n\r\nIMO, \"safe\" isn't about copying (all kernels copy, basically, though it would be good to optimize out copies for the struct fields if there's no type conversion), but is about whether the cast may produce invalid data or not, and whether the kernel should error or not. That isn't a concern here, it'll be passed down to the casts for the child fields.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-03-25T12:45:44.079+0000",
                    "updated": "2022-03-25T12:45:44.079+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734/comment/17515989",
                    "id": "17515989",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 12724\n[https://github.com/apache/arrow/pull/12724]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-04-01T16:22:23.172+0000",
                    "updated": "2022-04-01T16:22:23.172+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|z0zg6o:",
        "customfield_12314139": null
    }
}