{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13193884",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884",
    "key": "ARROW-3610",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
            "name": "uwe",
            "key": "xhochy",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
            },
            "displayName": "Uwe Korn",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
            "name": "uwe",
            "key": "xhochy",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
            },
            "displayName": "Uwe Korn",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
            "name": "uwe",
            "key": "xhochy",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
            },
            "displayName": "Uwe Korn",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3610/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/158911",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#discussion_r228351205\n \n \n\n ##########\n File path: cpp/src/arrow/allocator.h\n ##########\n @@ -85,6 +85,41 @@ class stl_allocator {\n   MemoryPool* pool_;\n };\n \n+template <typename Allocator = std::allocator<uint8_t>>\n+class STLMemoryPool : public MemoryPool {\n+ public:\n+  explicit STLMemoryPool(const Allocator& alloc) : alloc_(alloc) {}\n+  ~STLMemoryPool() override = default;\n+\n+  Status Allocate(int64_t size, uint8_t** out) override {\n+    *out = alloc_.allocate(size);\n+    stats_.UpdateAllocatedBytes(size);\n+    return Status::OK();\n+  }\n+\n+  Status Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) override {\n+    uint8_t* old_ptr = *ptr;\n+    *ptr = alloc_.allocate(new_size);\n \n Review comment:\n   Also catch `std::bad_alloc` here.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T22:10:35.067+0000",
                    "updated": "2018-10-25T22:10:35.067+0000",
                    "started": "2018-10-25T22:10:35.066+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158911",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/158912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#discussion_r228351126\n \n \n\n ##########\n File path: cpp/src/arrow/allocator.h\n ##########\n @@ -85,6 +85,41 @@ class stl_allocator {\n   MemoryPool* pool_;\n };\n \n+template <typename Allocator = std::allocator<uint8_t>>\n+class STLMemoryPool : public MemoryPool {\n+ public:\n+  explicit STLMemoryPool(const Allocator& alloc) : alloc_(alloc) {}\n+  ~STLMemoryPool() override = default;\n+\n+  Status Allocate(int64_t size, uint8_t** out) override {\n+    *out = alloc_.allocate(size);\n+    stats_.UpdateAllocatedBytes(size);\n+    return Status::OK();\n+  }\n+\n+  Status Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) override {\n+    uint8_t* old_ptr = *ptr;\n+    *ptr = alloc_.allocate(new_size);\n+    memcpy(*ptr, old_ptr, std::min(old_size, new_size));\n+    Free(old_ptr, old_size);\n \n Review comment:\n   This will wrongly call `UpdateAllocatedBytes`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T22:10:35.193+0000",
                    "updated": "2018-10-25T22:10:35.193+0000",
                    "started": "2018-10-25T22:10:35.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158912",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/158913",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#discussion_r228351444\n \n \n\n ##########\n File path: cpp/src/arrow/allocator-test.cc\n ##########\n @@ -23,9 +23,26 @@\n \n #include \"arrow/allocator.h\"\n #include \"arrow/memory_pool.h\"\n+#include \"arrow/test-util.h\"\n \n namespace arrow {\n \n+TEST(STLMemoryPool, Base) {\n+  std::allocator<uint8_t> allocator;\n+  STLMemoryPool<std::allocator<uint8_t>> pool(allocator);\n+\n+  uint8_t* data = nullptr;\n+  ASSERT_OK(pool.Allocate(100, &data));\n \n Review comment:\n   You should also test `Reallocate` and its effect on `bytes_allocated`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T22:10:35.440+0000",
                    "updated": "2018-10-25T22:10:35.440+0000",
                    "started": "2018-10-25T22:10:35.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158913",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/158914",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#discussion_r228350771\n \n \n\n ##########\n File path: cpp/src/arrow/allocator.h\n ##########\n @@ -85,6 +85,41 @@ class stl_allocator {\n   MemoryPool* pool_;\n };\n \n+template <typename Allocator = std::allocator<uint8_t>>\n+class STLMemoryPool : public MemoryPool {\n+ public:\n+  explicit STLMemoryPool(const Allocator& alloc) : alloc_(alloc) {}\n+  ~STLMemoryPool() override = default;\n+\n+  Status Allocate(int64_t size, uint8_t** out) override {\n+    *out = alloc_.allocate(size);\n \n Review comment:\n   Shouldn't we try to catch `std::bad_alloc` here and return `OutOfMemory`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T22:10:35.459+0000",
                    "updated": "2018-10-25T22:10:35.459+0000",
                    "started": "2018-10-25T22:10:35.458+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158914",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/159090",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#discussion_r228473007\n \n \n\n ##########\n File path: cpp/src/arrow/allocator.h\n ##########\n @@ -85,6 +85,41 @@ class stl_allocator {\n   MemoryPool* pool_;\n };\n \n+template <typename Allocator = std::allocator<uint8_t>>\n+class STLMemoryPool : public MemoryPool {\n+ public:\n+  explicit STLMemoryPool(const Allocator& alloc) : alloc_(alloc) {}\n+  ~STLMemoryPool() override = default;\n \n Review comment:\n   This dtor may not be needed\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T10:05:55.873+0000",
                    "updated": "2018-10-26T10:05:55.873+0000",
                    "started": "2018-10-26T10:05:55.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159090",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/159091",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#discussion_r228473304\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.h\n ##########\n @@ -25,6 +25,35 @@\n \n namespace arrow {\n \n+namespace internal {\n+\n+///////////////////////////////////////////////////////////////////////\n+// Helper tracking memory statistics\n+\n+class MemoryPoolStats {\n+ public:\n+  MemoryPoolStats() : bytes_allocated_(0), max_memory_(0) {}\n+\n+  int64_t max_memory() const { return max_memory_.load(); }\n+\n+  int64_t bytes_allocated() const { return bytes_allocated_.load(); }\n+\n+  inline void UpdateAllocatedBytes(int64_t diff) {\n+    auto allocated = bytes_allocated_.fetch_add(diff) + diff;\n+    // \"maximum\" allocated memory is ill-defined in multi-threaded code,\n+    // so don't try to be too rigorous here\n+    if (diff > 0 && allocated > max_memory_) {\n+      max_memory_ = allocated;\n+    }\n+  }\n+\n+ protected:\n+  std::atomic<int64_t> bytes_allocated_;\n \n Review comment:\n   Need to include atomic in this header now\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T10:05:55.899+0000",
                    "updated": "2018-10-26T10:05:55.899+0000",
                    "started": "2018-10-26T10:05:55.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159091",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/159601",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#discussion_r228708437\n \n \n\n ##########\n File path: cpp/src/arrow/allocator.h\n ##########\n @@ -85,6 +85,41 @@ class stl_allocator {\n   MemoryPool* pool_;\n };\n \n+template <typename Allocator = std::allocator<uint8_t>>\n+class STLMemoryPool : public MemoryPool {\n+ public:\n+  explicit STLMemoryPool(const Allocator& alloc) : alloc_(alloc) {}\n+  ~STLMemoryPool() override = default;\n+\n+  Status Allocate(int64_t size, uint8_t** out) override {\n+    *out = alloc_.allocate(size);\n+    stats_.UpdateAllocatedBytes(size);\n+    return Status::OK();\n+  }\n+\n+  Status Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) override {\n+    uint8_t* old_ptr = *ptr;\n+    *ptr = alloc_.allocate(new_size);\n+    memcpy(*ptr, old_ptr, std::min(old_size, new_size));\n+    Free(old_ptr, old_size);\n \n Review comment:\n   This looks good to me. What is the problem?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-27T11:26:22.531+0000",
                    "updated": "2018-10-27T11:26:22.531+0000",
                    "started": "2018-10-27T11:26:22.530+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159601",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/159602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#discussion_r228708338\n \n \n\n ##########\n File path: cpp/src/arrow/allocator.h\n ##########\n @@ -85,6 +85,41 @@ class stl_allocator {\n   MemoryPool* pool_;\n };\n \n+template <typename Allocator = std::allocator<uint8_t>>\n+class STLMemoryPool : public MemoryPool {\n+ public:\n+  explicit STLMemoryPool(const Allocator& alloc) : alloc_(alloc) {}\n+  ~STLMemoryPool() override = default;\n+\n+  Status Allocate(int64_t size, uint8_t** out) override {\n+    *out = alloc_.allocate(size);\n \n Review comment:\n   Yes, we should. I'll add it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-27T11:26:22.533+0000",
                    "updated": "2018-10-27T11:26:22.533+0000",
                    "started": "2018-10-27T11:26:22.533+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159602",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/159603",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#discussion_r228710064\n \n \n\n ##########\n File path: cpp/src/arrow/allocator-test.cc\n ##########\n @@ -23,9 +23,26 @@\n \n #include \"arrow/allocator.h\"\n #include \"arrow/memory_pool.h\"\n+#include \"arrow/test-util.h\"\n \n namespace arrow {\n \n+TEST(STLMemoryPool, Base) {\n+  std::allocator<uint8_t> allocator;\n+  STLMemoryPool<std::allocator<uint8_t>> pool(allocator);\n+\n+  uint8_t* data = nullptr;\n+  ASSERT_OK(pool.Allocate(100, &data));\n \n Review comment:\n   Done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-27T11:26:34.934+0000",
                    "updated": "2018-10-27T11:26:34.934+0000",
                    "started": "2018-10-27T11:26:34.933+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159603",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/159604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#discussion_r228710087\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.h\n ##########\n @@ -25,6 +25,35 @@\n \n namespace arrow {\n \n+namespace internal {\n+\n+///////////////////////////////////////////////////////////////////////\n+// Helper tracking memory statistics\n+\n+class MemoryPoolStats {\n+ public:\n+  MemoryPoolStats() : bytes_allocated_(0), max_memory_(0) {}\n+\n+  int64_t max_memory() const { return max_memory_.load(); }\n+\n+  int64_t bytes_allocated() const { return bytes_allocated_.load(); }\n+\n+  inline void UpdateAllocatedBytes(int64_t diff) {\n+    auto allocated = bytes_allocated_.fetch_add(diff) + diff;\n+    // \"maximum\" allocated memory is ill-defined in multi-threaded code,\n+    // so don't try to be too rigorous here\n+    if (diff > 0 && allocated > max_memory_) {\n+      max_memory_ = allocated;\n+    }\n+  }\n+\n+ protected:\n+  std::atomic<int64_t> bytes_allocated_;\n \n Review comment:\n   Done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-27T11:27:45.445+0000",
                    "updated": "2018-10-27T11:27:45.445+0000",
                    "started": "2018-10-27T11:27:45.445+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159604",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/159606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#discussion_r228710186\n \n \n\n ##########\n File path: cpp/src/arrow/allocator.h\n ##########\n @@ -85,6 +85,41 @@ class stl_allocator {\n   MemoryPool* pool_;\n };\n \n+template <typename Allocator = std::allocator<uint8_t>>\n+class STLMemoryPool : public MemoryPool {\n+ public:\n+  explicit STLMemoryPool(const Allocator& alloc) : alloc_(alloc) {}\n+  ~STLMemoryPool() override = default;\n+\n+  Status Allocate(int64_t size, uint8_t** out) override {\n+    *out = alloc_.allocate(size);\n+    stats_.UpdateAllocatedBytes(size);\n+    return Status::OK();\n+  }\n+\n+  Status Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) override {\n+    uint8_t* old_ptr = *ptr;\n+    *ptr = alloc_.allocate(new_size);\n+    memcpy(*ptr, old_ptr, std::min(old_size, new_size));\n+    Free(old_ptr, old_size);\n \n Review comment:\n   Let's say that before reallocate, you have `bytes_allocated = old_size`.\r\n   After reallocate, you want to have `bytes_allocated = new_size`.\r\n   But in reality, you have:\r\n   * after the call to `Free(old_ptr, old_size)`: `bytes_allocated = 0`\r\n   * after the call to `UpdateAllocatedBytes(new_size - old_size)`: `bytes_allocated = new_size - old-size`.\r\n   \r\n   And this is visible in the test results btw: https://travis-ci.org/apache/arrow/jobs/447042467#L1094\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-27T11:32:07.932+0000",
                    "updated": "2018-10-27T11:32:07.932+0000",
                    "started": "2018-10-27T11:32:07.932+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159606",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/159614",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#discussion_r228710797\n \n \n\n ##########\n File path: cpp/src/arrow/allocator.h\n ##########\n @@ -85,6 +85,41 @@ class stl_allocator {\n   MemoryPool* pool_;\n };\n \n+template <typename Allocator = std::allocator<uint8_t>>\n+class STLMemoryPool : public MemoryPool {\n+ public:\n+  explicit STLMemoryPool(const Allocator& alloc) : alloc_(alloc) {}\n+  ~STLMemoryPool() override = default;\n+\n+  Status Allocate(int64_t size, uint8_t** out) override {\n+    *out = alloc_.allocate(size);\n+    stats_.UpdateAllocatedBytes(size);\n+    return Status::OK();\n+  }\n+\n+  Status Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) override {\n+    uint8_t* old_ptr = *ptr;\n+    *ptr = alloc_.allocate(new_size);\n+    memcpy(*ptr, old_ptr, std::min(old_size, new_size));\n+    Free(old_ptr, old_size);\n \n Review comment:\n   \ud83e\udd26\u200d\u2642\ufe0f I was running the release tests while having a debug build. That explains my confusion.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-27T11:56:13.998+0000",
                    "updated": "2018-10-27T11:56:13.998+0000",
                    "started": "2018-10-27T11:56:13.997+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159614",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/159616",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#discussion_r228710821\n \n \n\n ##########\n File path: cpp/src/arrow/allocator.h\n ##########\n @@ -85,6 +85,41 @@ class stl_allocator {\n   MemoryPool* pool_;\n };\n \n+template <typename Allocator = std::allocator<uint8_t>>\n+class STLMemoryPool : public MemoryPool {\n+ public:\n+  explicit STLMemoryPool(const Allocator& alloc) : alloc_(alloc) {}\n+  ~STLMemoryPool() override = default;\n+\n+  Status Allocate(int64_t size, uint8_t** out) override {\n+    *out = alloc_.allocate(size);\n+    stats_.UpdateAllocatedBytes(size);\n+    return Status::OK();\n+  }\n+\n+  Status Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) override {\n+    uint8_t* old_ptr = *ptr;\n+    *ptr = alloc_.allocate(new_size);\n+    memcpy(*ptr, old_ptr, std::min(old_size, new_size));\n+    Free(old_ptr, old_size);\n \n Review comment:\n   Fixed now\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-27T11:57:38.825+0000",
                    "updated": "2018-10-27T11:57:38.825+0000",
                    "started": "2018-10-27T11:57:38.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159616",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/159743",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#issuecomment-433731471\n \n \n   The test failure is because I have removed the `DCHECK` from the MemoryPoolStats while I moved them to the header. As we don't allow `DCHECK` in the header, I'm currently tending to removing this test.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-28T18:54:00.261+0000",
                    "updated": "2018-10-28T18:54:00.261+0000",
                    "started": "2018-10-28T18:54:00.260+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159743",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/160519",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#issuecomment-434247931\n \n \n   I think it's OK to remove that test\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T10:28:54.286+0000",
                    "updated": "2018-10-30T10:28:54.286+0000",
                    "started": "2018-10-30T10:28:54.285+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160519",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/161634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#issuecomment-435107050\n \n \n   The \"death test\" is failing on AppVeyor.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-01T16:52:41.219+0000",
                    "updated": "2018-11-01T16:52:41.219+0000",
                    "started": "2018-11-01T16:52:41.219+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161634",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/162205",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837#issuecomment-435573908\n \n \n   AppVeyor partly succeeded here: https://ci.appveyor.com/project/xhochy/arrow/builds/20006144 \r\n   \r\n   Seems like there is some AppVeyor-internal problem currently.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-03T09:31:20.256+0000",
                    "updated": "2018-11-03T09:31:20.256+0000",
                    "started": "2018-11-03T09:31:20.254+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162205",
                    "issueId": "13193884"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/worklog/162208",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #2837: ARROW-3610: [C++] Add interface to turn stl_allocator into arrow::MemoryPool\nURL: https://github.com/apache/arrow/pull/2837\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/allocator-test.cc b/cpp/src/arrow/allocator-test.cc\nindex bdae9b9511..cdffbd7e84 100644\n--- a/cpp/src/arrow/allocator-test.cc\n+++ b/cpp/src/arrow/allocator-test.cc\n@@ -23,9 +23,30 @@\n \n #include \"arrow/allocator.h\"\n #include \"arrow/memory_pool.h\"\n+#include \"arrow/test-util.h\"\n \n namespace arrow {\n \n+TEST(STLMemoryPool, Base) {\n+  std::allocator<uint8_t> allocator;\n+  STLMemoryPool<std::allocator<uint8_t>> pool(allocator);\n+\n+  uint8_t* data = nullptr;\n+  ASSERT_OK(pool.Allocate(100, &data));\n+  ASSERT_EQ(pool.max_memory(), 100);\n+  ASSERT_EQ(pool.bytes_allocated(), 100);\n+  ASSERT_NE(data, nullptr);\n+\n+  ASSERT_OK(pool.Reallocate(100, 150, &data));\n+  ASSERT_EQ(pool.max_memory(), 150);\n+  ASSERT_EQ(pool.bytes_allocated(), 150);\n+\n+  pool.Free(data, 150);\n+\n+  ASSERT_EQ(pool.max_memory(), 150);\n+  ASSERT_EQ(pool.bytes_allocated(), 0);\n+}\n+\n TEST(stl_allocator, MemoryTracking) {\n   auto pool = default_memory_pool();\n   stl_allocator<uint64_t> alloc;\n@@ -45,19 +66,6 @@ TEST(stl_allocator, TestOOM) {\n   ASSERT_THROW(alloc.allocate(to_alloc), std::bad_alloc);\n }\n \n-TEST(stl_allocator, FreeLargeMemory) {\n-  stl_allocator<uint8_t> alloc;\n-\n-  uint8_t* data = alloc.allocate(100);\n-\n-#ifndef NDEBUG\n-  EXPECT_DEATH(alloc.deallocate(data, 120),\n-               \".*Check failed:.* allocation counter became negative\");\n-#endif\n-\n-  alloc.deallocate(data, 100);\n-}\n-\n TEST(stl_allocator, MaxMemory) {\n   auto pool = default_memory_pool();\n \ndiff --git a/cpp/src/arrow/allocator.h b/cpp/src/arrow/allocator.h\nindex c7780f19e1..144ba57506 100644\n--- a/cpp/src/arrow/allocator.h\n+++ b/cpp/src/arrow/allocator.h\n@@ -18,6 +18,7 @@\n #ifndef ARROW_ALLOCATOR_H\n #define ARROW_ALLOCATOR_H\n \n+#include <algorithm>\n #include <cstddef>\n #include <memory>\n #include <utility>\n@@ -85,6 +86,48 @@ class stl_allocator {\n   MemoryPool* pool_;\n };\n \n+template <typename Allocator = std::allocator<uint8_t>>\n+class STLMemoryPool : public MemoryPool {\n+ public:\n+  explicit STLMemoryPool(const Allocator& alloc) : alloc_(alloc) {}\n+\n+  Status Allocate(int64_t size, uint8_t** out) override {\n+    try {\n+      *out = alloc_.allocate(size);\n+    } catch (std::bad_alloc& e) {\n+      return Status::OutOfMemory(e.what());\n+    }\n+    stats_.UpdateAllocatedBytes(size);\n+    return Status::OK();\n+  }\n+\n+  Status Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) override {\n+    uint8_t* old_ptr = *ptr;\n+    try {\n+      *ptr = alloc_.allocate(new_size);\n+    } catch (std::bad_alloc& e) {\n+      return Status::OutOfMemory(e.what());\n+    }\n+    memcpy(*ptr, old_ptr, std::min(old_size, new_size));\n+    alloc_.deallocate(old_ptr, old_size);\n+    stats_.UpdateAllocatedBytes(new_size - old_size);\n+    return Status::OK();\n+  }\n+\n+  void Free(uint8_t* buffer, int64_t size) override {\n+    alloc_.deallocate(buffer, size);\n+    stats_.UpdateAllocatedBytes(-size);\n+  }\n+\n+  int64_t bytes_allocated() const override { return stats_.bytes_allocated(); }\n+\n+  int64_t max_memory() const override { return stats_.max_memory(); }\n+\n+ private:\n+  Allocator alloc_;\n+  internal::MemoryPoolStats stats_;\n+};\n+\n template <class T1, class T2>\n bool operator==(const stl_allocator<T1>& lhs, const stl_allocator<T2>& rhs) noexcept {\n   return lhs.pool() == rhs.pool();\ndiff --git a/cpp/src/arrow/memory_pool-test.cc b/cpp/src/arrow/memory_pool-test.cc\nindex ad60a93c81..5a11073dff 100644\n--- a/cpp/src/arrow/memory_pool-test.cc\n+++ b/cpp/src/arrow/memory_pool-test.cc\n@@ -45,20 +45,6 @@ TEST_F(TestDefaultMemoryPool, Reallocate) { this->TestReallocate(); }\n // googletest documentation\n #if !(defined(ARROW_VALGRIND) || defined(ADDRESS_SANITIZER))\n \n-TEST(DefaultMemoryPoolDeathTest, FreeLargeMemory) {\n-  MemoryPool* pool = default_memory_pool();\n-\n-  uint8_t* data;\n-  ASSERT_OK(pool->Allocate(100, &data));\n-\n-#ifndef NDEBUG\n-  EXPECT_DEATH(pool->Free(data, 120),\n-               \".*Check failed:.* allocation counter became negative\");\n-#endif\n-\n-  pool->Free(data, 100);\n-}\n-\n TEST(DefaultMemoryPoolDeathTest, MaxMemory) {\n   MemoryPool* pool = default_memory_pool();\n   uint8_t* data1;\ndiff --git a/cpp/src/arrow/memory_pool.cc b/cpp/src/arrow/memory_pool.cc\nindex 84c1853118..4947f6a192 100644\n--- a/cpp/src/arrow/memory_pool.cc\n+++ b/cpp/src/arrow/memory_pool.cc\n@@ -87,32 +87,6 @@ MemoryPool::~MemoryPool() {}\n \n int64_t MemoryPool::max_memory() const { return -1; }\n \n-///////////////////////////////////////////////////////////////////////\n-// Helper tracking memory statistics\n-\n-class MemoryPoolStats {\n- public:\n-  MemoryPoolStats() : bytes_allocated_(0), max_memory_(0) {}\n-\n-  int64_t max_memory() const { return max_memory_.load(); }\n-\n-  int64_t bytes_allocated() const { return bytes_allocated_.load(); }\n-\n-  inline void UpdateAllocatedBytes(int64_t diff) {\n-    auto allocated = bytes_allocated_.fetch_add(diff) + diff;\n-    DCHECK_GE(allocated, 0) << \"allocation counter became negative\";\n-    // \"maximum\" allocated memory is ill-defined in multi-threaded code,\n-    // so don't try to be too rigorous here\n-    if (diff > 0 && allocated > max_memory_) {\n-      max_memory_ = allocated;\n-    }\n-  }\n-\n- protected:\n-  std::atomic<int64_t> bytes_allocated_;\n-  std::atomic<int64_t> max_memory_;\n-};\n-\n ///////////////////////////////////////////////////////////////////////\n // Default MemoryPool implementation\n \n@@ -174,7 +148,7 @@ class DefaultMemoryPool : public MemoryPool {\n   int64_t max_memory() const override { return stats_.max_memory(); }\n \n  private:\n-  MemoryPoolStats stats_;\n+  internal::MemoryPoolStats stats_;\n };\n \n MemoryPool* default_memory_pool() {\n@@ -247,7 +221,7 @@ class ProxyMemoryPool::ProxyMemoryPoolImpl {\n \n  private:\n   MemoryPool* pool_;\n-  MemoryPoolStats stats_;\n+  internal::MemoryPoolStats stats_;\n };\n \n ProxyMemoryPool::ProxyMemoryPool(MemoryPool* pool) {\ndiff --git a/cpp/src/arrow/memory_pool.h b/cpp/src/arrow/memory_pool.h\nindex 0ee46a345a..37f31cc827 100644\n--- a/cpp/src/arrow/memory_pool.h\n+++ b/cpp/src/arrow/memory_pool.h\n@@ -18,6 +18,7 @@\n #ifndef ARROW_MEMORY_POOL_H\n #define ARROW_MEMORY_POOL_H\n \n+#include <atomic>\n #include <cstdint>\n #include <memory>\n \n@@ -25,6 +26,35 @@\n \n namespace arrow {\n \n+namespace internal {\n+\n+///////////////////////////////////////////////////////////////////////\n+// Helper tracking memory statistics\n+\n+class MemoryPoolStats {\n+ public:\n+  MemoryPoolStats() : bytes_allocated_(0), max_memory_(0) {}\n+\n+  int64_t max_memory() const { return max_memory_.load(); }\n+\n+  int64_t bytes_allocated() const { return bytes_allocated_.load(); }\n+\n+  inline void UpdateAllocatedBytes(int64_t diff) {\n+    auto allocated = bytes_allocated_.fetch_add(diff) + diff;\n+    // \"maximum\" allocated memory is ill-defined in multi-threaded code,\n+    // so don't try to be too rigorous here\n+    if (diff > 0 && allocated > max_memory_) {\n+      max_memory_ = allocated;\n+    }\n+  }\n+\n+ protected:\n+  std::atomic<int64_t> bytes_allocated_;\n+  std::atomic<int64_t> max_memory_;\n+};\n+\n+}  // namespace internal\n+\n class Status;\n \n /// Base class for memory allocation.\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-03T10:16:35.301+0000",
                    "updated": "2018-11-03T10:16:35.301+0000",
                    "started": "2018-11-03T10:16:35.301+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162208",
                    "issueId": "13193884"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4384af45[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@381c9cdf[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ec6264e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@72e0ad2d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@339086fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@94014f1[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@162bb7c1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@61d5e9ec[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5645047a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5fab65df[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14f55454[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5a2145af[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Nov 03 10:16:36 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-03T10:16:36.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3610/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-24T14:17:54.000+0000",
        "updated": "2018-11-03T10:16:36.000+0000",
        "timeoriginalestimate": null,
        "description": "We already support constructing an {{stl_allocator}}\u00a0from a {{MemoryPool}}, we should also support the reverse conversion. As the STL allocator does not provide a resize, this will always reallocate, even if there is support for it.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add interface to turn stl_allocator into arrow::MemoryPool",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13193884/comment/16673998",
                    "id": "16673998",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 2837\n[https://github.com/apache/arrow/pull/2837]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-11-03T10:16:36.496+0000",
                    "updated": "2018-11-03T10:16:36.496+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zl8n:",
        "customfield_12314139": null
    }
}