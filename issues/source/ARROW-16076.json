{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13436707",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707",
    "key": "ARROW-16076",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/2",
            "id": "2",
            "description": "The problem described is an issue which will never be fixed.",
            "name": "Won't Fix"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
            "name": "jonkeane",
            "key": "jonkeane",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
            },
            "displayName": "Jonathan Keane",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
            "name": "jonkeane",
            "key": "jonkeane",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
            },
            "displayName": "Jonathan Keane",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16076/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751043",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane opened a new pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769\n\n\n   Expose TPC-H data generation in R\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-31T15:43:07.087+0000",
                    "updated": "2022-03-31T15:43:07.087+0000",
                    "started": "2022-03-31T15:43:07.087+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751043",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751045",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769#issuecomment-1084770192\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-31T15:47:45.873+0000",
                    "updated": "2022-03-31T15:47:45.873+0000",
                    "started": "2022-03-31T15:47:45.873+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751045",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751177",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "save-buffer commented on a change in pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r839927291\n\n\n\n##########\nFile path: r/src/tpch-gen.cpp\n##########\n@@ -0,0 +1,169 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+// TODO: prune these\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/tpch_node.h>\n+#if defined(ARROW_R_WITH_DATASET)\n+#include <arrow/dataset/api.h>\n+#include <arrow/dataset/plan.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/filesystem/localfs.h>\n+\n+namespace compute = ::arrow::compute;\n+namespace ds = ::arrow::dataset;\n+namespace fs = ::arrow::fs;\n+\n+static std::shared_ptr<compute::ExecNode> MakeExecNodeOrStop(\n+    const std::string& factory_name, compute::ExecPlan* plan,\n+    std::vector<compute::ExecNode*> inputs, const compute::ExecNodeOptions& options) {\n+  return std::shared_ptr<compute::ExecNode>(\n+      ValueOrStop(compute::MakeExecNode(factory_name, plan, std::move(inputs), options)),\n+      [](...) {\n+        // empty destructor: ExecNode lifetime is managed by an ExecPlan\n+      });\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::RecordBatchReader> Tpch_Dbgen(\n+    const std::shared_ptr<compute::ExecPlan>& plan, double scale_factor,\n+    std::string table_name) {\n+  auto gen =\n+      ValueOrStop(arrow::compute::internal::TpchGen::Make(plan.get(), scale_factor));\n+\n+  compute::ExecNode* table;\n+  if (table_name == \"part\") {\n+    table = ValueOrStop(gen->Part());\n+  } else if (table_name == \"supplier\") {\n+    table = ValueOrStop(gen->Supplier());\n+  } else if (table_name == \"partsupp\") {\n+    table = ValueOrStop(gen->PartSupp());\n+  } else if (table_name == \"customer\") {\n+    table = ValueOrStop(gen->Customer());\n+  } else if (table_name == \"nation\") {\n+    table = ValueOrStop(gen->Nation());\n+  } else if (table_name == \"lineitem\") {\n+    table = ValueOrStop(gen->Lineitem());\n+  } else if (table_name == \"region\") {\n+    table = ValueOrStop(gen->Region());\n+  } else if (table_name == \"orders\") {\n+    table = ValueOrStop(gen->Orders());\n+  } else {\n+    cpp11::stop(\"That's not a valid table name\");\n+  }\n+\n+  arrow::AsyncGenerator<arrow::util::optional<compute::ExecBatch>> sink_gen;\n+\n+  MakeExecNodeOrStop(\"sink\", plan.get(), {table}, compute::SinkNodeOptions{&sink_gen});\n+\n+  StopIfNotOk(plan->Validate());\n+  StopIfNotOk(plan->StartProducing());\n\nReview comment:\n       It looks like you're starting the same plan multiple times, which doesn't seem write. You're starting it here and then at the end in Tpch_Dbgen_Write\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-31T18:57:01.474+0000",
                    "updated": "2022-03-31T18:57:01.474+0000",
                    "started": "2022-03-31T18:57:01.474+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751177",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751617",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r840671717\n\n\n\n##########\nFile path: r/src/tpch-gen.cpp\n##########\n@@ -0,0 +1,168 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+// TODO: prune these\n\nReview comment:\n       ```suggestion\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T14:58:46.355+0000",
                    "updated": "2022-04-01T14:58:46.355+0000",
                    "started": "2022-04-01T14:58:46.355+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751617",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751619",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r840674052\n\n\n\n##########\nFile path: r/src/tpch-gen.cpp\n##########\n@@ -0,0 +1,167 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/tpch_node.h>\n+#if defined(ARROW_R_WITH_DATASET)\n+#include <arrow/dataset/api.h>\n+#include <arrow/dataset/plan.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/filesystem/localfs.h>\n+\n+namespace compute = ::arrow::compute;\n+namespace ds = ::arrow::dataset;\n+namespace fs = ::arrow::fs;\n+\n+static std::shared_ptr<compute::ExecNode> MakeExecNodeOrStop(\n+    const std::string& factory_name, compute::ExecPlan* plan,\n+    std::vector<compute::ExecNode*> inputs, const compute::ExecNodeOptions& options) {\n+  return std::shared_ptr<compute::ExecNode>(\n+      ValueOrStop(compute::MakeExecNode(factory_name, plan, std::move(inputs), options)),\n+      [](...) {\n+        // empty destructor: ExecNode lifetime is managed by an ExecPlan\n+      });\n+}\n\nReview comment:\n       I basically copied this over from `r/src/compute-exec.cpp` which isn't the right thing to do here. I tried adding it to a header but then it complained about a duplicate symbol in this file and copmute-exec What's the appropriate way to share a function like this across two cpp files?\r\n   \r\n   Or I could put all of this into `r/src/compute-exec.cpp` and just gate the includes (since that file doesn't need to require all of the datasets and filesystem stuff to do most of its job?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T15:00:45.454+0000",
                    "updated": "2022-04-01T15:00:45.454+0000",
                    "started": "2022-04-01T15:00:45.453+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751619",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751621",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r840675008\n\n\n\n##########\nFile path: r/R/tpch.R\n##########\n@@ -0,0 +1,61 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+tpch_tables <- c(\"customer\", \"lineitem\", \"nation\", \"orders\", \"part\", \"partsupp\", \"region\", \"supplier\")\n+\n+\n+#' Generate a RecordBatchReader with TPC-H data in it\n+#'\n+#' @param table the table to generate\n+#' @param scale_factor the scale factor to generate\n+#'\n+#' @return a RecordBatchReader that will contain the generated data\n+#' @export\n+#'\n+#' @keywords internal\n+tpch_dbgen <- function(table = tpch_tables, scale_factor) {\n+  table <- match.arg(table)\n+\n+  Tpch_Dbgen(ExecPlan$create(), scale_factor, table)\n+}\n+\n+#' Generate TPC-H data as datasets\n+#'\n+#' This will generate all of the TPC-H data as a set of datasets for a given\n+#' `scale_factor`\n+#'\n+#' @param scale_factor numeric, scale factor of data to generate\n+#' @param path\n+#' @param ...\n+#'\n+#' @return the path to the directory containing the datasets\n+#' @export\n+#' @keywords internal\n+tpch_dbgen_write <- function(scale_factor, path, ...) {\n+  path_and_fs <- get_path_and_filesystem(path)\n+  folder_name <- paste0(\"/tpch_\", format(scale_factor, scientific = FALSE))\n+\n+  Tpch_Dbgen_Write(\n+    ExecPlan$create(),\n+    scale_factor,\n+    path_and_fs$fs,\n+    path_and_fs$path,\n+    folder_name\n+  )\n+\n+  invisible(file.path(path_and_fs$path, folder_name))\n+}\n\nReview comment:\n       This works (as in it writes to disk), but [without backpressure](https://issues.apache.org/jira/browse/ARROW-16087) it will saturate RAM + get OOMkilled or swap and take forever.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T15:01:53.602+0000",
                    "updated": "2022-04-01T15:01:53.602+0000",
                    "started": "2022-04-01T15:01:53.602+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751621",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751622",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r840675008\n\n\n\n##########\nFile path: r/R/tpch.R\n##########\n@@ -0,0 +1,61 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+tpch_tables <- c(\"customer\", \"lineitem\", \"nation\", \"orders\", \"part\", \"partsupp\", \"region\", \"supplier\")\n+\n+\n+#' Generate a RecordBatchReader with TPC-H data in it\n+#'\n+#' @param table the table to generate\n+#' @param scale_factor the scale factor to generate\n+#'\n+#' @return a RecordBatchReader that will contain the generated data\n+#' @export\n+#'\n+#' @keywords internal\n+tpch_dbgen <- function(table = tpch_tables, scale_factor) {\n+  table <- match.arg(table)\n+\n+  Tpch_Dbgen(ExecPlan$create(), scale_factor, table)\n+}\n+\n+#' Generate TPC-H data as datasets\n+#'\n+#' This will generate all of the TPC-H data as a set of datasets for a given\n+#' `scale_factor`\n+#'\n+#' @param scale_factor numeric, scale factor of data to generate\n+#' @param path\n+#' @param ...\n+#'\n+#' @return the path to the directory containing the datasets\n+#' @export\n+#' @keywords internal\n+tpch_dbgen_write <- function(scale_factor, path, ...) {\n+  path_and_fs <- get_path_and_filesystem(path)\n+  folder_name <- paste0(\"/tpch_\", format(scale_factor, scientific = FALSE))\n+\n+  Tpch_Dbgen_Write(\n+    ExecPlan$create(),\n+    scale_factor,\n+    path_and_fs$fs,\n+    path_and_fs$path,\n+    folder_name\n+  )\n+\n+  invisible(file.path(path_and_fs$path, folder_name))\n+}\n\nReview comment:\n       This works (as in it writes to disk), but [without backpressure](https://issues.apache.org/jira/browse/ARROW-16087) at higher scale_factors it will saturate RAM + get OOMkilled or swap and take forever.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T15:02:07.997+0000",
                    "updated": "2022-04-01T15:02:07.997+0000",
                    "started": "2022-04-01T15:02:07.997+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751622",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751624",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r840676107\n\n\n\n##########\nFile path: r/src/tpch-gen.cpp\n##########\n@@ -0,0 +1,167 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/tpch_node.h>\n+#if defined(ARROW_R_WITH_DATASET)\n+#include <arrow/dataset/api.h>\n+#include <arrow/dataset/plan.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/filesystem/localfs.h>\n+\n+namespace compute = ::arrow::compute;\n+namespace ds = ::arrow::dataset;\n+namespace fs = ::arrow::fs;\n+\n+static std::shared_ptr<compute::ExecNode> MakeExecNodeOrStop(\n+    const std::string& factory_name, compute::ExecPlan* plan,\n+    std::vector<compute::ExecNode*> inputs, const compute::ExecNodeOptions& options) {\n+  return std::shared_ptr<compute::ExecNode>(\n+      ValueOrStop(compute::MakeExecNode(factory_name, plan, std::move(inputs), options)),\n+      [](...) {\n+        // empty destructor: ExecNode lifetime is managed by an ExecPlan\n+      });\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::RecordBatchReader> Tpch_Dbgen(\n+    const std::shared_ptr<compute::ExecPlan>& plan, double scale_factor,\n+    std::string table_name) {\n+  auto gen =\n+      ValueOrStop(arrow::compute::internal::TpchGen::Make(plan.get(), scale_factor, 1000000));\n+\n+  compute::ExecNode* table;\n+  if (table_name == \"part\") {\n+    table = ValueOrStop(gen->Part());\n+  } else if (table_name == \"supplier\") {\n+    table = ValueOrStop(gen->Supplier());\n+  } else if (table_name == \"partsupp\") {\n+    table = ValueOrStop(gen->PartSupp());\n+  } else if (table_name == \"customer\") {\n+    table = ValueOrStop(gen->Customer());\n+  } else if (table_name == \"nation\") {\n+    table = ValueOrStop(gen->Nation());\n+  } else if (table_name == \"lineitem\") {\n+    table = ValueOrStop(gen->Lineitem());\n+  } else if (table_name == \"region\") {\n+    table = ValueOrStop(gen->Region());\n+  } else if (table_name == \"orders\") {\n+    table = ValueOrStop(gen->Orders());\n+  } else {\n+    cpp11::stop(\"That's not a valid table name\");\n+  }\n\nReview comment:\n       This is repeated down below, and I thought about pulling it out into a separate function so that it's not repeated \u2014 but also realize this massive ifelse seems hacky. Is there a better way to do this?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T15:03:07.443+0000",
                    "updated": "2022-04-01T15:03:07.443+0000",
                    "started": "2022-04-01T15:03:07.443+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751624",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751626",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r840677810\n\n\n\n##########\nFile path: r/src/tpch-gen.cpp\n##########\n@@ -0,0 +1,167 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/tpch_node.h>\n+#if defined(ARROW_R_WITH_DATASET)\n+#include <arrow/dataset/api.h>\n+#include <arrow/dataset/plan.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/filesystem/localfs.h>\n+\n+namespace compute = ::arrow::compute;\n+namespace ds = ::arrow::dataset;\n+namespace fs = ::arrow::fs;\n+\n+static std::shared_ptr<compute::ExecNode> MakeExecNodeOrStop(\n+    const std::string& factory_name, compute::ExecPlan* plan,\n+    std::vector<compute::ExecNode*> inputs, const compute::ExecNodeOptions& options) {\n+  return std::shared_ptr<compute::ExecNode>(\n+      ValueOrStop(compute::MakeExecNode(factory_name, plan, std::move(inputs), options)),\n+      [](...) {\n+        // empty destructor: ExecNode lifetime is managed by an ExecPlan\n+      });\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::RecordBatchReader> Tpch_Dbgen(\n+    const std::shared_ptr<compute::ExecPlan>& plan, double scale_factor,\n+    std::string table_name) {\n+  auto gen =\n+      ValueOrStop(arrow::compute::internal::TpchGen::Make(plan.get(), scale_factor, 1000000));\n\nReview comment:\n       I bumped the batch size from [the default of 4096](https://github.com/apache/arrow/blob/bda70875d2957bf1c890ef0457ce7836dd797aa6/cpp/src/arrow/compute/exec/tpch_node.h#L46) to 1M here. IIRC that's ~right for most cases, but would love a second set of eyes to make sure. (Also should that default in tpch_node be 4096 or something higher like this?)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T15:05:09.018+0000",
                    "updated": "2022-04-01T15:05:09.018+0000",
                    "started": "2022-04-01T15:05:09.018+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751626",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "save-buffer commented on a change in pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r840876975\n\n\n\n##########\nFile path: r/R/tpch.R\n##########\n@@ -0,0 +1,61 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+tpch_tables <- c(\"customer\", \"lineitem\", \"nation\", \"orders\", \"part\", \"partsupp\", \"region\", \"supplier\")\n+\n+\n+#' Generate a RecordBatchReader with TPC-H data in it\n+#'\n+#' @param table the table to generate\n+#' @param scale_factor the scale factor to generate\n+#'\n+#' @return a RecordBatchReader that will contain the generated data\n+#' @export\n+#'\n+#' @keywords internal\n+tpch_dbgen <- function(table = tpch_tables, scale_factor) {\n+  table <- match.arg(table)\n+\n+  Tpch_Dbgen(ExecPlan$create(), scale_factor, table)\n+}\n+\n+#' Generate TPC-H data as datasets\n+#'\n+#' This will generate all of the TPC-H data as a set of datasets for a given\n+#' `scale_factor`\n+#'\n+#' @param scale_factor numeric, scale factor of data to generate\n+#' @param path\n+#' @param ...\n+#'\n+#' @return the path to the directory containing the datasets\n+#' @export\n+#' @keywords internal\n+tpch_dbgen_write <- function(scale_factor, path, ...) {\n+  path_and_fs <- get_path_and_filesystem(path)\n+  folder_name <- paste0(\"/tpch_\", format(scale_factor, scientific = FALSE))\n+\n+  Tpch_Dbgen_Write(\n+    ExecPlan$create(),\n+    scale_factor,\n+    path_and_fs$fs,\n+    path_and_fs$path,\n+    folder_name\n+  )\n+\n+  invisible(file.path(path_and_fs$path, folder_name))\n+}\n\nReview comment:\n       I would like to investigate this a bit more too. I feel like it should be freeing more memory while writing to disk. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T19:49:49.479+0000",
                    "updated": "2022-04-01T19:49:49.479+0000",
                    "started": "2022-04-01T19:49:49.479+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751775",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r840918009\n\n\n\n##########\nFile path: r/src/tpch-gen.cpp\n##########\n@@ -0,0 +1,167 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/tpch_node.h>\n+#if defined(ARROW_R_WITH_DATASET)\n+#include <arrow/dataset/api.h>\n+#include <arrow/dataset/plan.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/filesystem/localfs.h>\n+\n+namespace compute = ::arrow::compute;\n+namespace ds = ::arrow::dataset;\n+namespace fs = ::arrow::fs;\n+\n+static std::shared_ptr<compute::ExecNode> MakeExecNodeOrStop(\n+    const std::string& factory_name, compute::ExecPlan* plan,\n+    std::vector<compute::ExecNode*> inputs, const compute::ExecNodeOptions& options) {\n+  return std::shared_ptr<compute::ExecNode>(\n+      ValueOrStop(compute::MakeExecNode(factory_name, plan, std::move(inputs), options)),\n+      [](...) {\n+        // empty destructor: ExecNode lifetime is managed by an ExecPlan\n+      });\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::RecordBatchReader> Tpch_Dbgen(\n+    const std::shared_ptr<compute::ExecPlan>& plan, double scale_factor,\n+    std::string table_name) {\n+  auto gen =\n+      ValueOrStop(arrow::compute::internal::TpchGen::Make(plan.get(), scale_factor, 1000000));\n\nReview comment:\n       ```suggestion\r\n     auto gen = ValueOrStop(\r\n         arrow::compute::internal::TpchGen::Make(plan.get(), scale_factor, 1000000));\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-01T21:03:45.418+0000",
                    "updated": "2022-04-01T21:03:45.418+0000",
                    "started": "2022-04-01T21:03:45.418+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751798",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "save-buffer commented on a change in pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r841017576\n\n\n\n##########\nFile path: r/src/tpch-gen.cpp\n##########\n@@ -0,0 +1,167 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/tpch_node.h>\n+#if defined(ARROW_R_WITH_DATASET)\n+#include <arrow/dataset/api.h>\n+#include <arrow/dataset/plan.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/filesystem/localfs.h>\n+\n+namespace compute = ::arrow::compute;\n+namespace ds = ::arrow::dataset;\n+namespace fs = ::arrow::fs;\n+\n+static std::shared_ptr<compute::ExecNode> MakeExecNodeOrStop(\n+    const std::string& factory_name, compute::ExecPlan* plan,\n+    std::vector<compute::ExecNode*> inputs, const compute::ExecNodeOptions& options) {\n+  return std::shared_ptr<compute::ExecNode>(\n+      ValueOrStop(compute::MakeExecNode(factory_name, plan, std::move(inputs), options)),\n+      [](...) {\n+        // empty destructor: ExecNode lifetime is managed by an ExecPlan\n+      });\n+}\n\nReview comment:\n       Yeah usually you'd put it in a header file. I don't know why it would complain about a duplicate symbol unless you maybe forgot to delete the old implementation? I guess I'd have to see the specifics more. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-02T06:09:03.770+0000",
                    "updated": "2022-04-02T06:09:03.770+0000",
                    "started": "2022-04-02T06:09:03.770+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751889",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "save-buffer commented on a change in pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r841020982\n\n\n\n##########\nFile path: r/src/tpch-gen.cpp\n##########\n@@ -0,0 +1,167 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/tpch_node.h>\n+#if defined(ARROW_R_WITH_DATASET)\n+#include <arrow/dataset/api.h>\n+#include <arrow/dataset/plan.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/filesystem/localfs.h>\n+\n+namespace compute = ::arrow::compute;\n+namespace ds = ::arrow::dataset;\n+namespace fs = ::arrow::fs;\n+\n+static std::shared_ptr<compute::ExecNode> MakeExecNodeOrStop(\n+    const std::string& factory_name, compute::ExecPlan* plan,\n+    std::vector<compute::ExecNode*> inputs, const compute::ExecNodeOptions& options) {\n+  return std::shared_ptr<compute::ExecNode>(\n+      ValueOrStop(compute::MakeExecNode(factory_name, plan, std::move(inputs), options)),\n+      [](...) {\n+        // empty destructor: ExecNode lifetime is managed by an ExecPlan\n+      });\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::RecordBatchReader> Tpch_Dbgen(\n+    const std::shared_ptr<compute::ExecPlan>& plan, double scale_factor,\n+    std::string table_name) {\n+  auto gen =\n+      ValueOrStop(arrow::compute::internal::TpchGen::Make(plan.get(), scale_factor, 1000000));\n+\n+  compute::ExecNode* table;\n+  if (table_name == \"part\") {\n+    table = ValueOrStop(gen->Part());\n+  } else if (table_name == \"supplier\") {\n+    table = ValueOrStop(gen->Supplier());\n+  } else if (table_name == \"partsupp\") {\n+    table = ValueOrStop(gen->PartSupp());\n+  } else if (table_name == \"customer\") {\n+    table = ValueOrStop(gen->Customer());\n+  } else if (table_name == \"nation\") {\n+    table = ValueOrStop(gen->Nation());\n+  } else if (table_name == \"lineitem\") {\n+    table = ValueOrStop(gen->Lineitem());\n+  } else if (table_name == \"region\") {\n+    table = ValueOrStop(gen->Region());\n+  } else if (table_name == \"orders\") {\n+    table = ValueOrStop(gen->Orders());\n+  } else {\n+    cpp11::stop(\"That's not a valid table name\");\n+  }\n\nReview comment:\n       I think for this specific function the if-else chain is probably the best way. Another option would be to have an `std::unordered_map` from string to function pointer, but it's about the same amount of code so I'd say this is probably fine. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-02T06:18:38.325+0000",
                    "updated": "2022-04-02T06:18:38.325+0000",
                    "started": "2022-04-02T06:18:38.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751890",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/751891",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "save-buffer commented on a change in pull request #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r841021233\n\n\n\n##########\nFile path: r/src/tpch-gen.cpp\n##########\n@@ -0,0 +1,167 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/tpch_node.h>\n+#if defined(ARROW_R_WITH_DATASET)\n+#include <arrow/dataset/api.h>\n+#include <arrow/dataset/plan.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/filesystem/localfs.h>\n+\n+namespace compute = ::arrow::compute;\n+namespace ds = ::arrow::dataset;\n+namespace fs = ::arrow::fs;\n+\n+static std::shared_ptr<compute::ExecNode> MakeExecNodeOrStop(\n+    const std::string& factory_name, compute::ExecPlan* plan,\n+    std::vector<compute::ExecNode*> inputs, const compute::ExecNodeOptions& options) {\n+  return std::shared_ptr<compute::ExecNode>(\n+      ValueOrStop(compute::MakeExecNode(factory_name, plan, std::move(inputs), options)),\n+      [](...) {\n+        // empty destructor: ExecNode lifetime is managed by an ExecPlan\n+      });\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::RecordBatchReader> Tpch_Dbgen(\n+    const std::shared_ptr<compute::ExecPlan>& plan, double scale_factor,\n+    std::string table_name) {\n+  auto gen = ValueOrStop(\n+      arrow::compute::internal::TpchGen::Make(plan.get(), scale_factor, 1000000));\n+\n+  compute::ExecNode* table;\n+  if (table_name == \"part\") {\n+    table = ValueOrStop(gen->Part());\n+  } else if (table_name == \"supplier\") {\n+    table = ValueOrStop(gen->Supplier());\n+  } else if (table_name == \"partsupp\") {\n+    table = ValueOrStop(gen->PartSupp());\n+  } else if (table_name == \"customer\") {\n+    table = ValueOrStop(gen->Customer());\n+  } else if (table_name == \"nation\") {\n+    table = ValueOrStop(gen->Nation());\n+  } else if (table_name == \"lineitem\") {\n+    table = ValueOrStop(gen->Lineitem());\n+  } else if (table_name == \"region\") {\n+    table = ValueOrStop(gen->Region());\n+  } else if (table_name == \"orders\") {\n+    table = ValueOrStop(gen->Orders());\n+  } else {\n+    cpp11::stop(\"That's not a valid table name\");\n+  }\n+\n+  arrow::AsyncGenerator<arrow::util::optional<compute::ExecBatch>> sink_gen;\n+\n+  MakeExecNodeOrStop(\"sink\", plan.get(), {table}, compute::SinkNodeOptions{&sink_gen});\n+\n+  StopIfNotOk(plan->Validate());\n+  StopIfNotOk(plan->StartProducing());\n+\n+  // If the generator is destroyed before being completely drained, inform plan\n+  std::shared_ptr<void> stop_producing{nullptr, [plan](...) {\n+                                         bool not_finished_yet =\n+                                             plan->finished().TryAddCallback([&plan] {\n+                                               return [plan](const arrow::Status&) {};\n+                                             });\n+\n+                                         if (not_finished_yet) {\n+                                           plan->StopProducing();\n+                                         }\n+                                       }};\n+\n+  return compute::MakeGeneratorReader(\n+      table->output_schema(), [stop_producing, plan, sink_gen] { return sink_gen(); },\n+      gc_memory_pool());\n+}\n+\n+void Queue_Write_One_Table(const std::shared_ptr<compute::ExecPlan>& plan,\n+                           std::string table_name, compute::ExecNode* table,\n+                           std::string base_path,\n+                           const std::shared_ptr<fs::FileSystem>& filesystem) {\n+  auto format = std::make_shared<ds::ParquetFileFormat>();\n+\n+  auto partitioning_factory = arrow::dataset::HivePartitioning::MakeFactory();\n+  std::vector<std::shared_ptr<arrow::Field>> fields;\n+  auto partitioning = ValueOrStop(partitioning_factory->Finish(arrow::schema(fields)));\n+\n+  ds::FileSystemDatasetWriteOptions write_options;\n+  write_options.file_write_options = format->DefaultWriteOptions();\n+  write_options.existing_data_behavior =\n+      ds::ExistingDataBehavior::kDeleteMatchingPartitions;\n+  write_options.filesystem = filesystem;\n+  write_options.base_dir = base_path + \"/\" + table_name;\n+  write_options.partitioning = partitioning;\n+  write_options.basename_template = \"data-{i}.parquet\";\n+  write_options.max_partitions = 1024;\n+\n+  const ds::WriteNodeOptions options =\n+      ds::WriteNodeOptions{write_options, table->output_schema()};\n+\n+  MakeExecNodeOrStop(\"write\", plan.get(), {table}, options);\n+}\n+\n+// [[arrow::export]]\n+void Tpch_Dbgen_Write(const std::shared_ptr<compute::ExecPlan>& plan, double scale_factor,\n+                      const std::shared_ptr<fs::FileSystem>& filesystem,\n+                      std::string base_dir, std::string folder_name) {\n+  arrow::dataset::internal::Initialize();\n+\n+  auto gen =\n+      ValueOrStop(arrow::compute::internal::TpchGen::Make(plan.get(), scale_factor, 1000000));\n+\n+  auto base_path = base_dir + folder_name;\n+  (void)filesystem->CreateDir(base_path);\n+\n+  static std::string tables[] = {\"part\",   \"supplier\", \"partsupp\", \"customer\",\n+                                 \"nation\", \"lineitem\", \"region\",   \"orders\"};\n+  for (auto& table_name : tables) {\n\nReview comment:\n       For this for loop on the other hand, we can do something a little more interesting: We can make an array of function pointers and just iterate through that. \r\n   \r\n   ```\r\n   using TableNodeFn = Result<ExecNode*> (TpchGen::*)(std::vector<std::string>);\r\n   constexpr int kNumTables = 8;\r\n   std::array<TableNodeFn, kNumTables> tables = {\r\n         &TpchGen::Supplier, &TpchGen::Part,     &TpchGen::PartSupp, &TpchGen::Customer,\r\n         &TpchGen::Orders,   &TpchGen::Lineitem, &TpchGen::Nation,   &TpchGen::Region,\r\n     };\r\n   for(auto fn : tables)\r\n   {\r\n       compute::ExecNode *table = ValueOrStop((gen->*fn)());\r\n       Queue_Write_One_Table(...);\r\n   }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-02T06:21:47.311+0000",
                    "updated": "2022-04-02T06:21:47.311+0000",
                    "started": "2022-04-02T06:21:47.310+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "751891",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/752591",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r842251868\n\n\n##########\nr/src/tpch-gen.cpp:\n##########\n@@ -0,0 +1,167 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/tpch_node.h>\n+#if defined(ARROW_R_WITH_DATASET)\n+#include <arrow/dataset/api.h>\n+#include <arrow/dataset/plan.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/filesystem/localfs.h>\n+\n+namespace compute = ::arrow::compute;\n+namespace ds = ::arrow::dataset;\n+namespace fs = ::arrow::fs;\n+\n+static std::shared_ptr<compute::ExecNode> MakeExecNodeOrStop(\n+    const std::string& factory_name, compute::ExecPlan* plan,\n+    std::vector<compute::ExecNode*> inputs, const compute::ExecNodeOptions& options) {\n+  return std::shared_ptr<compute::ExecNode>(\n+      ValueOrStop(compute::MakeExecNode(factory_name, plan, std::move(inputs), options)),\n+      [](...) {\n+        // empty destructor: ExecNode lifetime is managed by an ExecPlan\n+      });\n+}\n\nReview Comment:\n   My guess is you want `#pragma once` at the top of the header file (it's harmless, and maybe a good practice, to add this to the top of every header file actually)\n\n\n\n",
                    "created": "2022-04-05T01:04:34.504+0000",
                    "updated": "2022-04-05T01:04:34.504+0000",
                    "started": "2022-04-05T01:04:34.504+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752591",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/752593",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r842256599\n\n\n##########\nr/src/tpch-gen.cpp:\n##########\n@@ -0,0 +1,167 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/tpch_node.h>\n+#if defined(ARROW_R_WITH_DATASET)\n+#include <arrow/dataset/api.h>\n+#include <arrow/dataset/plan.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/filesystem/localfs.h>\n+\n+namespace compute = ::arrow::compute;\n+namespace ds = ::arrow::dataset;\n+namespace fs = ::arrow::fs;\n+\n+static std::shared_ptr<compute::ExecNode> MakeExecNodeOrStop(\n+    const std::string& factory_name, compute::ExecPlan* plan,\n+    std::vector<compute::ExecNode*> inputs, const compute::ExecNodeOptions& options) {\n+  return std::shared_ptr<compute::ExecNode>(\n+      ValueOrStop(compute::MakeExecNode(factory_name, plan, std::move(inputs), options)),\n+      [](...) {\n+        // empty destructor: ExecNode lifetime is managed by an ExecPlan\n+      });\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::RecordBatchReader> Tpch_Dbgen(\n+    const std::shared_ptr<compute::ExecPlan>& plan, double scale_factor,\n+    std::string table_name) {\n+  auto gen =\n+      ValueOrStop(arrow::compute::internal::TpchGen::Make(plan.get(), scale_factor, 1000000));\n\nReview Comment:\n   Agreed.  For the moment we probably shouldn't go lower than 32K if we are feeding actual TPC-H queries.  1M seems like it would be fine.\r\n   \r\n   Long term I don't think R should have to specify the batch size here so I do lean slightly towards changing the default vs. changing this here.  That way if we want to drop to 4k in the future we can.\r\n   \r\n   CC @save-buffer for second opinion.\n\n\n\n",
                    "created": "2022-04-05T01:17:40.671+0000",
                    "updated": "2022-04-05T01:17:40.671+0000",
                    "started": "2022-04-05T01:17:40.670+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752593",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/752616",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "save-buffer commented on code in PR #12769:\nURL: https://github.com/apache/arrow/pull/12769#discussion_r842295190\n\n\n##########\nr/src/tpch-gen.cpp:\n##########\n@@ -0,0 +1,167 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/tpch_node.h>\n+#if defined(ARROW_R_WITH_DATASET)\n+#include <arrow/dataset/api.h>\n+#include <arrow/dataset/plan.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/filesystem/localfs.h>\n+\n+namespace compute = ::arrow::compute;\n+namespace ds = ::arrow::dataset;\n+namespace fs = ::arrow::fs;\n+\n+static std::shared_ptr<compute::ExecNode> MakeExecNodeOrStop(\n+    const std::string& factory_name, compute::ExecPlan* plan,\n+    std::vector<compute::ExecNode*> inputs, const compute::ExecNodeOptions& options) {\n+  return std::shared_ptr<compute::ExecNode>(\n+      ValueOrStop(compute::MakeExecNode(factory_name, plan, std::move(inputs), options)),\n+      [](...) {\n+        // empty destructor: ExecNode lifetime is managed by an ExecPlan\n+      });\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::RecordBatchReader> Tpch_Dbgen(\n+    const std::shared_ptr<compute::ExecPlan>& plan, double scale_factor,\n+    std::string table_name) {\n+  auto gen =\n+      ValueOrStop(arrow::compute::internal::TpchGen::Make(plan.get(), scale_factor, 1000000));\n\nReview Comment:\n   I seem to remember someone was benchmarking different batch sizes - what was the outcome of that?\n   \n   But overall I'm indifferent to the default batch size, since we'll have to figure out how the generator will work later anyway once we switch to the morsel/batch model. \n\n\n\n",
                    "created": "2022-04-05T03:04:55.611+0000",
                    "updated": "2022-04-05T03:04:55.611+0000",
                    "started": "2022-04-05T03:04:55.611+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752616",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/754430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #12769:\nURL: https://github.com/apache/arrow/pull/12769#issuecomment-1092470363\n\n   Based on ARROW-16100 I think we are pausing this PR.  @save-buffer Can we pull these C++ fixes into their own dedicated PR?\n\n\n",
                    "created": "2022-04-08T06:01:53.254+0000",
                    "updated": "2022-04-08T06:01:53.254+0000",
                    "started": "2022-04-08T06:01:53.253+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754430",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/754745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "save-buffer commented on PR #12769:\nURL: https://github.com/apache/arrow/pull/12769#issuecomment-1093140594\n\n   I have pulled it out into #12843\n\n\n",
                    "created": "2022-04-08T17:56:45.565+0000",
                    "updated": "2022-04-08T17:56:45.565+0000",
                    "started": "2022-04-08T17:56:45.565+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754745",
                    "issueId": "13436707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/worklog/755369",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane closed pull request #12769: ARROW-16076: [R] Bindings for the new TPC-H generator\nURL: https://github.com/apache/arrow/pull/12769\n\n\n",
                    "created": "2022-04-11T18:20:53.544+0000",
                    "updated": "2022-04-11T18:20:53.544+0000",
                    "started": "2022-04-11T18:20:53.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755369",
                    "issueId": "13436707"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3fb1547c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4503cdd1[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d6c64bc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@66da4b85[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a30d0c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2cb62457[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72a1ecf9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4613074b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3ad951a6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@27d05e36[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a6ba811[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@49cc548[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jul 13 15:53:23 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-07-13T15:53:23.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16076/watchers",
            "watchCount": 2,
            "isWatching": true
        },
        "created": "2022-03-30T16:56:42.000+0000",
        "updated": "2022-07-13T15:53:23.000+0000",
        "timeoriginalestimate": null,
        "description": "Now that https://github.com/apache/arrow/pull/12537 is merged, we should implement the R changes needed to make that useable from R.\r\n\r\nWe should basically do the opposite of https://github.com/apache/arrow/pull/12537/commits/4b16296b4ef8cd3b3d440e8b7f8af32a89a16788\r\n\r\nBut also add in the fixes from weston: https://github.com/westonpace/arrow/commit/7c4c0e0b4e208918eb195701fab5d631b8c9517a",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Bindings for the new TPC-H generator",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/comment/17565720",
                    "id": "17565720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-07-12T14:04:43.995+0000",
                    "updated": "2022-07-12T14:04:43.995+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436707/comment/17566384",
                    "id": "17566384",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Since the TPC-H generator does not generate compliant data, there's not a big need to expose this in R.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-07-13T15:53:23.877+0000",
                    "updated": "2022-07-13T15:53:23.877+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z10za0:",
        "customfield_12314139": null
    }
}