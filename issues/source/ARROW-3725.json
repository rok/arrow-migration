{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13197143",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197143",
    "key": "ARROW-3725",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3725/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 6,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197143/worklog/163934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #2923: ARROW-3725: [GLib] Add field readers to GArrowStructDataType\nURL: https://github.com/apache/arrow/pull/2923\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T14:45:26.588+0000",
                    "updated": "2018-11-08T14:45:26.588+0000",
                    "started": "2018-11-08T14:45:26.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163934",
                    "issueId": "13197143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197143/worklog/163935",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2923: ARROW-3725: [GLib] Add field readers to GArrowStructDataType\nURL: https://github.com/apache/arrow/pull/2923#issuecomment-437017772\n \n \n   @shiro615 Can you review this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T14:45:35.335+0000",
                    "updated": "2018-11-08T14:45:35.335+0000",
                    "started": "2018-11-08T14:45:35.334+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163935",
                    "issueId": "13197143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197143/worklog/164005",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on a change in pull request #2923: ARROW-3725: [GLib] Add field readers to GArrowStructDataType\nURL: https://github.com/apache/arrow/pull/2923#discussion_r232001872\n \n \n\n ##########\n File path: c_glib/arrow-glib/composite-data-type.cpp\n ##########\n @@ -136,6 +136,121 @@ garrow_struct_data_type_new(GList *fields)\n   return data_type;\n }\n \n+/**\n+ * garrow_struct_data_type_get_n_fields:\n+ * @data_type: A #GArrowStructDataType.\n+ *\n+ * Returns: The number of fields of the struct data type.\n+ *\n+ * Since: 0.12.0\n+ */\n+gint\n+garrow_struct_data_type_get_n_fields(GArrowStructDataType *data_type)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  return arrow_data_type->num_children();\n+}\n+\n+/**\n+ * garrow_struct_data_type_get_fields:\n+ * @data_type: A #GArrowStructDataType.\n+ *\n+ * Returns: (transfer full) (element-type GArrowField):\n+ *   The fields of the struct data type.\n+ *\n+ * Since: 0.12.0\n+ */\n+GList *\n+garrow_struct_data_type_get_fields(GArrowStructDataType *data_type)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  auto arrow_fields = arrow_data_type->children();\n+\n+  GList *fields = NULL;\n+  for (auto arrow_field : arrow_fields) {\n+    fields = g_list_prepend(fields, garrow_field_new_raw(&arrow_field));\n+  }\n+  return g_list_reverse(fields);\n+}\n+\n+/**\n+ * garrow_struct_data_type_get_field:\n+ * @data_type: A #GArrowStructDataType.\n+ * @i: The index of the target field.\n+ *\n+ * Returns: (transfer full) (nullable):\n+ *   The field at the index in the struct data type or %NULL on not found.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowField *\n+garrow_struct_data_type_get_field(GArrowStructDataType *data_type,\n+                                  gint i)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+\n+  while (i < 0) {\n+    i += arrow_data_type->num_children();\n+  }\n+  if (i >= arrow_data_type->num_children()) {\n+    return NULL;\n+  }\n+\n+  auto arrow_field = arrow_data_type->child(i);\n+  if (arrow_field) {\n+    return garrow_field_new_raw(&arrow_field);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_struct_data_type_get_field_by_name:\n+ * @data_type: A #GArrowStructDataType.\n+ * @name: The name of the target field.\n+ *\n+ * Returns: (transfer full) (nullable):\n+ *   The field that has the name in the struct data type or %NULL on not found.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowField *\n+garrow_struct_data_type_get_field_by_name(GArrowStructDataType *data_type,\n+                                          const gchar *name)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  auto arrow_struct_data_type =\n+    std::static_pointer_cast<arrow::StructType>(arrow_data_type);\n+\n+  auto arrow_field = arrow_struct_data_type->GetChildByName(name);\n+  if (arrow_field) {\n+    return garrow_field_new_raw(&arrow_field);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_struct_data_type_get_field_index:\n+ * @data_type: A #GArrowStructDataType.\n+ * @name: The name of the target field.\n+ *\n+ * Returns: The index of the target index in the struct data type\n+ *   or `-1` on not found.\n+ *\n+ * Since: 0.12.0\n+ */\n+gint\n+garrow_struct_data_type_get_field_index(GArrowStructDataType *data_type,\n+                                          const gchar *name)\n \n Review comment:\n   Two space indents are unnecessary?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T18:09:13.079+0000",
                    "updated": "2018-11-08T18:09:13.079+0000",
                    "started": "2018-11-08T18:09:13.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164005",
                    "issueId": "13197143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197143/worklog/164161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2923: ARROW-3725: [GLib] Add field readers to GArrowStructDataType\nURL: https://github.com/apache/arrow/pull/2923#discussion_r232106783\n \n \n\n ##########\n File path: c_glib/arrow-glib/composite-data-type.cpp\n ##########\n @@ -136,6 +136,121 @@ garrow_struct_data_type_new(GList *fields)\n   return data_type;\n }\n \n+/**\n+ * garrow_struct_data_type_get_n_fields:\n+ * @data_type: A #GArrowStructDataType.\n+ *\n+ * Returns: The number of fields of the struct data type.\n+ *\n+ * Since: 0.12.0\n+ */\n+gint\n+garrow_struct_data_type_get_n_fields(GArrowStructDataType *data_type)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  return arrow_data_type->num_children();\n+}\n+\n+/**\n+ * garrow_struct_data_type_get_fields:\n+ * @data_type: A #GArrowStructDataType.\n+ *\n+ * Returns: (transfer full) (element-type GArrowField):\n+ *   The fields of the struct data type.\n+ *\n+ * Since: 0.12.0\n+ */\n+GList *\n+garrow_struct_data_type_get_fields(GArrowStructDataType *data_type)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  auto arrow_fields = arrow_data_type->children();\n+\n+  GList *fields = NULL;\n+  for (auto arrow_field : arrow_fields) {\n+    fields = g_list_prepend(fields, garrow_field_new_raw(&arrow_field));\n+  }\n+  return g_list_reverse(fields);\n+}\n+\n+/**\n+ * garrow_struct_data_type_get_field:\n+ * @data_type: A #GArrowStructDataType.\n+ * @i: The index of the target field.\n+ *\n+ * Returns: (transfer full) (nullable):\n+ *   The field at the index in the struct data type or %NULL on not found.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowField *\n+garrow_struct_data_type_get_field(GArrowStructDataType *data_type,\n+                                  gint i)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+\n+  while (i < 0) {\n+    i += arrow_data_type->num_children();\n+  }\n+  if (i >= arrow_data_type->num_children()) {\n+    return NULL;\n+  }\n+\n+  auto arrow_field = arrow_data_type->child(i);\n+  if (arrow_field) {\n+    return garrow_field_new_raw(&arrow_field);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_struct_data_type_get_field_by_name:\n+ * @data_type: A #GArrowStructDataType.\n+ * @name: The name of the target field.\n+ *\n+ * Returns: (transfer full) (nullable):\n+ *   The field that has the name in the struct data type or %NULL on not found.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowField *\n+garrow_struct_data_type_get_field_by_name(GArrowStructDataType *data_type,\n+                                          const gchar *name)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  auto arrow_struct_data_type =\n+    std::static_pointer_cast<arrow::StructType>(arrow_data_type);\n+\n+  auto arrow_field = arrow_struct_data_type->GetChildByName(name);\n+  if (arrow_field) {\n+    return garrow_field_new_raw(&arrow_field);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_struct_data_type_get_field_index:\n+ * @data_type: A #GArrowStructDataType.\n+ * @name: The name of the target field.\n+ *\n+ * Returns: The index of the target index in the struct data type\n+ *   or `-1` on not found.\n+ *\n+ * Since: 0.12.0\n+ */\n+gint\n+garrow_struct_data_type_get_field_index(GArrowStructDataType *data_type,\n+                                          const gchar *name)\n \n Review comment:\n   Good catch!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T00:15:41.667+0000",
                    "updated": "2018-11-09T00:15:41.667+0000",
                    "started": "2018-11-09T00:15:41.666+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164161",
                    "issueId": "13197143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197143/worklog/164187",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2923: ARROW-3725: [GLib] Add field readers to GArrowStructDataType\nURL: https://github.com/apache/arrow/pull/2923#issuecomment-437218912\n \n \n   CI failure is unrelated.\r\n   I'll merge this.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T01:34:04.084+0000",
                    "updated": "2018-11-09T01:34:04.084+0000",
                    "started": "2018-11-09T01:34:04.083+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164187",
                    "issueId": "13197143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197143/worklog/164188",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou closed pull request #2923: ARROW-3725: [GLib] Add field readers to GArrowStructDataType\nURL: https://github.com/apache/arrow/pull/2923\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/composite-data-type.cpp b/c_glib/arrow-glib/composite-data-type.cpp\nindex 5f742e50e4..36a839b3b9 100644\n--- a/c_glib/arrow-glib/composite-data-type.cpp\n+++ b/c_glib/arrow-glib/composite-data-type.cpp\n@@ -136,6 +136,121 @@ garrow_struct_data_type_new(GList *fields)\n   return data_type;\n }\n \n+/**\n+ * garrow_struct_data_type_get_n_fields:\n+ * @data_type: A #GArrowStructDataType.\n+ *\n+ * Returns: The number of fields of the struct data type.\n+ *\n+ * Since: 0.12.0\n+ */\n+gint\n+garrow_struct_data_type_get_n_fields(GArrowStructDataType *data_type)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  return arrow_data_type->num_children();\n+}\n+\n+/**\n+ * garrow_struct_data_type_get_fields:\n+ * @data_type: A #GArrowStructDataType.\n+ *\n+ * Returns: (transfer full) (element-type GArrowField):\n+ *   The fields of the struct data type.\n+ *\n+ * Since: 0.12.0\n+ */\n+GList *\n+garrow_struct_data_type_get_fields(GArrowStructDataType *data_type)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  auto arrow_fields = arrow_data_type->children();\n+\n+  GList *fields = NULL;\n+  for (auto arrow_field : arrow_fields) {\n+    fields = g_list_prepend(fields, garrow_field_new_raw(&arrow_field));\n+  }\n+  return g_list_reverse(fields);\n+}\n+\n+/**\n+ * garrow_struct_data_type_get_field:\n+ * @data_type: A #GArrowStructDataType.\n+ * @i: The index of the target field.\n+ *\n+ * Returns: (transfer full) (nullable):\n+ *   The field at the index in the struct data type or %NULL on not found.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowField *\n+garrow_struct_data_type_get_field(GArrowStructDataType *data_type,\n+                                  gint i)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+\n+  while (i < 0) {\n+    i += arrow_data_type->num_children();\n+  }\n+  if (i >= arrow_data_type->num_children()) {\n+    return NULL;\n+  }\n+\n+  auto arrow_field = arrow_data_type->child(i);\n+  if (arrow_field) {\n+    return garrow_field_new_raw(&arrow_field);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_struct_data_type_get_field_by_name:\n+ * @data_type: A #GArrowStructDataType.\n+ * @name: The name of the target field.\n+ *\n+ * Returns: (transfer full) (nullable):\n+ *   The field that has the name in the struct data type or %NULL on not found.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowField *\n+garrow_struct_data_type_get_field_by_name(GArrowStructDataType *data_type,\n+                                          const gchar *name)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  auto arrow_struct_data_type =\n+    std::static_pointer_cast<arrow::StructType>(arrow_data_type);\n+\n+  auto arrow_field = arrow_struct_data_type->GetChildByName(name);\n+  if (arrow_field) {\n+    return garrow_field_new_raw(&arrow_field);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_struct_data_type_get_field_index:\n+ * @data_type: A #GArrowStructDataType.\n+ * @name: The name of the target field.\n+ *\n+ * Returns: The index of the target index in the struct data type\n+ *   or `-1` on not found.\n+ *\n+ * Since: 0.12.0\n+ */\n+gint\n+garrow_struct_data_type_get_field_index(GArrowStructDataType *data_type,\n+                                        const gchar *name)\n+{\n+  auto arrow_data_type = garrow_data_type_get_raw(GARROW_DATA_TYPE(data_type));\n+  auto arrow_struct_data_type =\n+    std::static_pointer_cast<arrow::StructType>(arrow_data_type);\n+\n+  return arrow_struct_data_type->GetChildIndex(name);\n+}\n+\n \n G_DEFINE_TYPE(GArrowDictionaryDataType,                \\\n               garrow_dictionary_data_type,             \\\ndiff --git a/c_glib/arrow-glib/composite-data-type.h b/c_glib/arrow-glib/composite-data-type.h\nindex 11b83014ff..7d6a02b1c7 100644\n--- a/c_glib/arrow-glib/composite-data-type.h\n+++ b/c_glib/arrow-glib/composite-data-type.h\n@@ -70,49 +70,31 @@ GArrowListDataType *garrow_list_data_type_new      (GArrowField *field);\n GArrowField *garrow_list_data_type_get_value_field (GArrowListDataType *list_data_type);\n \n \n-#define GARROW_TYPE_STRUCT_DATA_TYPE            \\\n-  (garrow_struct_data_type_get_type())\n-#define GARROW_STRUCT_DATA_TYPE(obj)                            \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                            \\\n-                              GARROW_TYPE_STRUCT_DATA_TYPE,     \\\n-                              GArrowStructDataType))\n-#define GARROW_STRUCT_DATA_TYPE_CLASS(klass)                    \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),                             \\\n-                           GARROW_TYPE_STRUCT_DATA_TYPE,        \\\n-                           GArrowStructDataTypeClass))\n-#define GARROW_IS_STRUCT_DATA_TYPE(obj)                         \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                            \\\n-                              GARROW_TYPE_STRUCT_DATA_TYPE))\n-#define GARROW_IS_STRUCT_DATA_TYPE_CLASS(klass)                 \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),                             \\\n-                           GARROW_TYPE_STRUCT_DATA_TYPE))\n-#define GARROW_STRUCT_DATA_TYPE_GET_CLASS(obj)                  \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                             \\\n-                             GARROW_TYPE_STRUCT_DATA_TYPE,      \\\n-                             GArrowStructDataTypeClass))\n-\n-typedef struct _GArrowStructDataType         GArrowStructDataType;\n-typedef struct _GArrowStructDataTypeClass    GArrowStructDataTypeClass;\n-\n-/**\n- * GArrowStructDataType:\n- *\n- * It wraps `arrow::StructType`.\n- */\n-struct _GArrowStructDataType\n-{\n-  /*< private >*/\n-  GArrowDataType parent_instance;\n-};\n-\n+#define GARROW_TYPE_STRUCT_DATA_TYPE (garrow_struct_data_type_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowStructDataType,\n+                         garrow_struct_data_type,\n+                         GARROW,\n+                         STRUCT_DATA_TYPE,\n+                         GArrowDataType)\n struct _GArrowStructDataTypeClass\n {\n   GArrowDataTypeClass parent_class;\n };\n \n-GType                 garrow_struct_data_type_get_type (void) G_GNUC_CONST;\n GArrowStructDataType *garrow_struct_data_type_new      (GList *fields);\n-\n+gint\n+garrow_struct_data_type_get_n_fields(GArrowStructDataType *data_type);\n+GList *\n+garrow_struct_data_type_get_fields(GArrowStructDataType *data_type);\n+GArrowField *\n+garrow_struct_data_type_get_field(GArrowStructDataType *data_type,\n+                                  gint i);\n+GArrowField *\n+garrow_struct_data_type_get_field_by_name(GArrowStructDataType *data_type,\n+                                          const gchar *name);\n+gint\n+garrow_struct_data_type_get_field_index(GArrowStructDataType *data_type,\n+                                        const gchar *name);\n \n #define GARROW_TYPE_DICTIONARY_DATA_TYPE (garrow_dictionary_data_type_get_type())\n G_DECLARE_DERIVABLE_TYPE(GArrowDictionaryDataType,\ndiff --git a/c_glib/test/test-struct-data-type.rb b/c_glib/test/test-struct-data-type.rb\nnew file mode 100644\nindex 0000000000..ce94e41c70\n--- /dev/null\n+++ b/c_glib/test/test-struct-data-type.rb\n@@ -0,0 +1,80 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestStructDataType < Test::Unit::TestCase\n+  def setup\n+    @enabled_field = Arrow::Field.new(\"enabled\", Arrow::BooleanDataType.new)\n+    @message_field = Arrow::Field.new(\"message\", Arrow::StringDataType.new)\n+    @fields = [@enabled_field, @message_field]\n+    @data_type = Arrow::StructDataType.new(@fields)\n+  end\n+\n+  def test_type\n+    assert_equal(Arrow::Type::STRUCT, @data_type.id)\n+  end\n+\n+  def test_to_s\n+    assert_equal(\"struct<enabled: bool, message: string>\",\n+                 @data_type.to_s)\n+  end\n+\n+  def test_n_fields\n+    assert_equal(2, @data_type.n_fields)\n+  end\n+\n+  def test_fields\n+    assert_equal(@fields, @data_type.fields)\n+  end\n+\n+  sub_test_case(\"#get_field\") do\n+    def test_found\n+      assert_equal(@fields[1], @data_type.get_field(1))\n+    end\n+\n+    def test_negative\n+      assert_equal(@fields[-1], @data_type.get_field(-1))\n+    end\n+\n+    def test_over\n+      assert_equal(nil, @data_type.get_field(2))\n+    end\n+  end\n+\n+  sub_test_case(\"#get_field_by_name\") do\n+    def test_found\n+      assert_equal(@enabled_field,\n+                   @data_type.get_field_by_name(\"enabled\"))\n+    end\n+\n+    def test_not_found\n+      assert_equal(nil,\n+                   @data_type.get_field_by_name(\"nonexistent\"))\n+    end\n+  end\n+\n+  sub_test_case(\"#get_field_by_name\") do\n+    def test_found\n+      assert_equal(@fields.index(@enabled_field),\n+                   @data_type.get_field_index(\"enabled\"))\n+    end\n+\n+    def test_not_found\n+      assert_equal(-1,\n+                   @data_type.get_field_index(\"nonexistent\"))\n+    end\n+  end\n+end\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T01:34:55.758+0000",
                    "updated": "2018-11-09T01:34:55.758+0000",
                    "started": "2018-11-09T01:34:55.757+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164188",
                    "issueId": "13197143"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@34ae4d94[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a3e0166[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f6ecdb6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@25f1c80c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@900022f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@17abdd86[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ed1b1b8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@454bb5c6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4cd3c63a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@55d65cb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@666258a9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7e1f2426[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 09 01:34:48 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-09T01:34:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3725/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-08T14:44:03.000+0000",
        "updated": "2018-11-09T01:34:55.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add field readers to GArrowStructDataType",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197143/comment/16680707",
                    "id": "16680707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 2923\n[https://github.com/apache/arrow/pull/2923]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2018-11-09T01:34:48.578+0000",
                    "updated": "2018-11-09T01:34:48.578+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s00a20:",
        "customfield_12314139": null
    }
}