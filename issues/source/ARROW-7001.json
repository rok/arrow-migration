{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13264619",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619",
    "key": "ARROW-7001",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12572782",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12572782",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13263834",
                    "key": "ARROW-6964",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263834",
                    "fields": {
                        "summary": "[C++][Dataset] Expose a nested parallel option for Scanner::ToTable",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12612469",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12612469",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13360963",
                    "key": "ARROW-11782",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360963",
                    "fields": {
                        "summary": "[GLib][Ruby][Dataset] Remove bindings for internal classes",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [
            {
                "id": "13362714",
                "key": "ARROW-11883",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13362714",
                "fields": {
                    "summary": "[C++] Add ConcatMap, MergeMap, and an async-reentrant version of Map ",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13366987",
                "key": "ARROW-12056",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13366987",
                "fields": {
                    "summary": "[C++] Create sequencing AsyncGenerator",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13370231",
                "key": "ARROW-12286",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13370231",
                "fields": {
                    "summary": "[C++] Create AsyncGenerator from Future<AsyncGenerator<T>>",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13370232",
                "key": "ARROW-12287",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232",
                "fields": {
                    "summary": "[C++] Create enumerating generator",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13370234",
                "key": "ARROW-12288",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13370234",
                "fields": {
                    "summary": "[C++] Create Scanner interface",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13370235",
                "key": "ARROW-12289",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13370235",
                "fields": {
                    "summary": "[C++] Create basic AsyncScanner implementation",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            }
        ],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 150000,
            "total": 150000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7001/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 26,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/559451",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace opened a new pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607\n\n\n   Still very much a WIP, expect more details to come.  This PR ports the dataset/scanner logic to async.  It does not actually make any readers (e.g. parquet reader, ipc reader) async.  This will technically solve ARROW-7001 but is also a step towards making the readers async.\r\n   \r\n   There should be a performance gain from this with datasets with fewer files than # of cores (since we can make the inner reads nested)\r\n   There should be a performance gain from this above and beyond that for CSV datasets (since we have a proper async CSV).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T16:30:28.893+0000",
                    "updated": "2021-03-01T16:30:28.893+0000",
                    "started": "2021-03-01T16:30:28.892+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559451",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/559494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#issuecomment-788130722\n\n\n   https://issues.apache.org/jira/browse/ARROW-7001\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T17:31:33.606+0000",
                    "updated": "2021-03-01T17:31:33.606+0000",
                    "started": "2021-03-01T17:31:33.605+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559494",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/559969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r585583131\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -364,7 +367,8 @@ Result<ScanTaskIterator> ParquetFileFormat::ScanFile(std::shared_ptr<ScanOptions\n         reader_options.io_context, reader_options.cache_options, options, context);\n   }\n \n-  return MakeVectorIterator(std::move(tasks));\n\nReview comment:\n       Shouldn't basically the entire method body be wrapped in a Future, since we're doing I/O here? Right now this synchronously reads the Parquet footer and then returns an already-completed future.\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -85,13 +85,16 @@ class ParquetScanTask : public ScanTask {\n       // since it must outlive the wrapped RecordBatchReader\n       std::shared_ptr<parquet::arrow::FileReader> file_reader;\n       std::unique_ptr<RecordBatchReader> record_batch_reader;\n-    } NextBatch;\n+    };\n+    auto next_batch = std::make_shared<GetNextBatch>();\n\nReview comment:\n       Minor nit/not really related, but the fact that we have to do this wrapping here seems like a shortcoming of the Parquet APIs; the record batch reader should reference the file reader and we should be able to use GeneratorFromReader here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-02T14:01:15.617+0000",
                    "updated": "2021-03-02T14:01:15.617+0000",
                    "started": "2021-03-02T14:01:15.616+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559969",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/574134",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r604065452\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -364,7 +367,8 @@ Result<ScanTaskIterator> ParquetFileFormat::ScanFile(std::shared_ptr<ScanOptions\n         reader_options.io_context, reader_options.cache_options, options, context);\n   }\n \n-  return MakeVectorIterator(std::move(tasks));\n\nReview comment:\n       This feature is only adding the tooling for async.  It doesn't actually add support for IPC or Parquet yet.  So at the moment both of those readers are synchronous.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-30T12:49:47.201+0000",
                    "updated": "2021-03-30T12:49:47.201+0000",
                    "started": "2021-03-30T12:49:47.201+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574134",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/574135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r604066249\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -85,13 +85,16 @@ class ParquetScanTask : public ScanTask {\n       // since it must outlive the wrapped RecordBatchReader\n       std::shared_ptr<parquet::arrow::FileReader> file_reader;\n       std::unique_ptr<RecordBatchReader> record_batch_reader;\n-    } NextBatch;\n+    };\n+    auto next_batch = std::make_shared<GetNextBatch>();\n\nReview comment:\n       Same as above, I'm attempting to keep the IPC/Parquet implementation as true to the original as possible and they can be made asynchronous in a future PR.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-30T12:51:01.038+0000",
                    "updated": "2021-03-30T12:51:01.038+0000",
                    "started": "2021-03-30T12:51:01.038+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574135",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/574936",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r604965806\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/dataset.h\n##########\n@@ -133,8 +130,20 @@ class ARROW_DS_EXPORT Dataset : public std::enable_shared_from_this<Dataset> {\n   Result<std::shared_ptr<ScannerBuilder>> NewScan();\n \n   /// \\brief GetFragments returns an iterator of Fragments given a predicate.\n-  Result<FragmentIterator> GetFragments(Expression predicate);\n-  Result<FragmentIterator> GetFragments();\n+  Future<FragmentVector> GetFragmentsAsync(Expression predicate);\n+  Result<FragmentIterator> GetFragments(Expression predicate) {\n+    auto fut = GetFragmentsAsync(predicate);\n+    fut.Wait();\n+    ARROW_ASSIGN_OR_RAISE(auto fragments_vec, fut.result());\n+    return MakeVectorIterator(fragments_vec);\n+  }\n+  Future<FragmentVector> GetFragmentsAsync();\n+  Result<FragmentIterator> GetFragments() {\n+    auto fut = GetFragmentsAsync();\n+    fut.Wait();\n+    ARROW_ASSIGN_OR_RAISE(auto fragments_vec, fut.result());\n\nReview comment:\n       nit: Future<T>.result already calls Wait for you\n\n##########\nFile path: cpp/src/arrow/dataset/dataset.h\n##########\n@@ -191,9 +200,9 @@ class ARROW_DS_EXPORT InMemoryDataset : public Dataset {\n       std::shared_ptr<Schema> schema) const override;\n \n  protected:\n-  Result<FragmentIterator> GetFragmentsImpl(Expression predicate) override;\n+  Future<FragmentVector> GetFragmentsImpl(Expression predicate) override;\n\nReview comment:\n       This may be suboptimal for the case of writing datasets. ARROW-10882/#9802 backs an InMemoryDataset with a RecordBatchReader to support passing in Python generators; if we have to materialize all fragments up front that would defeat the purpose.\r\n   \r\n   Though, instead, we could implement a lazy InMemoryFragment instead of the current approach which materializes an InMemoryFragment for each batch in the source, so this doesn't block this PR per se (we just need to rework the other PR a bit once this lands).\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -166,60 +425,67 @@ Result<std::shared_ptr<Scanner>> ScannerBuilder::Finish() {\n   return std::make_shared<Scanner>(dataset_, scan_options_);\n }\n \n-static inline RecordBatchVector FlattenRecordBatchVector(\n-    std::vector<RecordBatchVector> nested_batches) {\n-  RecordBatchVector flattened;\n-\n-  for (auto& task_batches : nested_batches) {\n-    for (auto& batch : task_batches) {\n-      flattened.emplace_back(std::move(batch));\n-    }\n-  }\n-\n-  return flattened;\n-}\n-\n struct TableAssemblyState {\n   /// Protecting mutating accesses to batches\n   std::mutex mutex{};\n-  std::vector<RecordBatchVector> batches{};\n+  std::vector<std::vector<RecordBatchVector>> batches{};\n+  int scan_task_id = 0;\n \n-  void Emplace(RecordBatchVector b, size_t position) {\n+  void Emplace(std::shared_ptr<RecordBatch> batch, size_t fragment_index,\n+               size_t task_index, size_t record_batch_index) {\n     std::lock_guard<std::mutex> lock(mutex);\n-    if (batches.size() <= position) {\n-      batches.resize(position + 1);\n+    if (batches.size() <= fragment_index) {\n+      batches.resize(fragment_index + 1);\n+    }\n+    if (batches[fragment_index].size() <= task_index) {\n+      batches[fragment_index].resize(task_index + 1);\n+    }\n+    if (batches[fragment_index][task_index].size() <= record_batch_index) {\n+      batches[fragment_index][task_index].resize(record_batch_index + 1);\n     }\n-    batches[position] = std::move(b);\n+    batches[fragment_index][task_index][record_batch_index] = std::move(batch);\n   }\n };\n \n+struct TaggedRecordBatch {\n\nReview comment:\n       It seems this is unused?\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -110,35 +110,47 @@ static inline Result<csv::ReadOptions> GetReadOptions(\n   return read_options;\n }\n \n-static inline Result<std::shared_ptr<csv::StreamingReader>> OpenReader(\n+static inline Future<std::shared_ptr<csv::StreamingReader>> OpenReaderAsync(\n     const FileSource& source, const CsvFileFormat& format,\n     const std::shared_ptr<ScanOptions>& scan_options = nullptr,\n     MemoryPool* pool = default_memory_pool()) {\n   ARROW_ASSIGN_OR_RAISE(auto reader_options, GetReadOptions(format, scan_options));\n \n-  util::string_view first_block;\n   ARROW_ASSIGN_OR_RAISE(auto input, source.OpenCompressed());\n   ARROW_ASSIGN_OR_RAISE(\n       input, io::BufferedInputStream::Create(reader_options.block_size,\n                                              default_memory_pool(), std::move(input)));\n-  ARROW_ASSIGN_OR_RAISE(first_block, input->Peek(reader_options.block_size));\n-\n-  const auto& parse_options = format.parse_options;\n-  auto convert_options = csv::ConvertOptions::Defaults();\n-  if (scan_options != nullptr) {\n-    ARROW_ASSIGN_OR_RAISE(convert_options,\n-                          GetConvertOptions(format, scan_options, first_block, pool));\n-  }\n \n-  auto maybe_reader =\n-      csv::StreamingReader::Make(io::IOContext(pool), std::move(input), reader_options,\n-                                 parse_options, convert_options);\n-  if (!maybe_reader.ok()) {\n-    return maybe_reader.status().WithMessage(\"Could not open CSV input source '\",\n-                                             source.path(), \"': \", maybe_reader.status());\n-  }\n+  auto peek_fut = DeferNotOk(input->io_context().executor()->Submit(\n\nReview comment:\n       nit: is there any benefit in separating the futures out like this instead of just wrapping it all in a Future? \r\n   \r\n   Also, would it make sense to move `OpenCompressed` into the Future? It may have to make a HEAD request on S3, for instance. (Though we could async-ify all of Filesystems too, not here though.)\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1029,6 +1102,65 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n\nReview comment:\n       Ah never mind me, it's because you have `last`.\n\n##########\nFile path: cpp/src/arrow/dataset/dataset.cc\n##########\n@@ -105,60 +109,63 @@ Result<std::shared_ptr<ScannerBuilder>> Dataset::NewScan() {\n   return NewScan(std::make_shared<ScanOptions>());\n }\n \n-Result<FragmentIterator> Dataset::GetFragments() {\n+Future<FragmentVector> Dataset::GetFragmentsAsync() {\n   ARROW_ASSIGN_OR_RAISE(auto predicate, literal(true).Bind(*schema_));\n-  return GetFragments(std::move(predicate));\n+  return GetFragmentsAsync(std::move(predicate));\n }\n \n-Result<FragmentIterator> Dataset::GetFragments(Expression predicate) {\n+Future<FragmentVector> Dataset::GetFragmentsAsync(Expression predicate) {\n   ARROW_ASSIGN_OR_RAISE(\n       predicate, SimplifyWithGuarantee(std::move(predicate), partition_expression_));\n   return predicate.IsSatisfiable() ? GetFragmentsImpl(std::move(predicate))\n-                                   : MakeEmptyIterator<std::shared_ptr<Fragment>>();\n+                                   : FragmentVector{};\n }\n \n-struct VectorRecordBatchGenerator : InMemoryDataset::RecordBatchGenerator {\n-  explicit VectorRecordBatchGenerator(RecordBatchVector batches)\n+struct VectorRecordBatchVectorFactory : InMemoryDataset::RecordBatchVectorFactory {\n+  explicit VectorRecordBatchVectorFactory(RecordBatchVector batches)\n       : batches_(std::move(batches)) {}\n \n-  RecordBatchIterator Get() const final { return MakeVectorIterator(batches_); }\n+  Result<RecordBatchVector> Get() const final { return batches_; }\n \n   RecordBatchVector batches_;\n };\n \n InMemoryDataset::InMemoryDataset(std::shared_ptr<Schema> schema,\n                                  RecordBatchVector batches)\n     : Dataset(std::move(schema)),\n-      get_batches_(new VectorRecordBatchGenerator(std::move(batches))) {}\n+      get_batches_(new VectorRecordBatchVectorFactory(std::move(batches))) {}\n \n-struct TableRecordBatchGenerator : InMemoryDataset::RecordBatchGenerator {\n-  explicit TableRecordBatchGenerator(std::shared_ptr<Table> table)\n+struct TableRecordBatchVectorFactory : InMemoryDataset::RecordBatchVectorFactory {\n+  explicit TableRecordBatchVectorFactory(std::shared_ptr<Table> table)\n       : table_(std::move(table)) {}\n \n-  RecordBatchIterator Get() const final {\n+  Result<RecordBatchVector> Get() const final {\n     auto reader = std::make_shared<TableBatchReader>(*table_);\n     auto table = table_;\n-    return MakeFunctionIterator([reader, table] { return reader->Next(); });\n+    auto iter = MakeFunctionIterator([reader, table] { return reader->Next(); });\n+    return iter.ToVector();\n   }\n \n   std::shared_ptr<Table> table_;\n };\n \n InMemoryDataset::InMemoryDataset(std::shared_ptr<Table> table)\n     : Dataset(table->schema()),\n-      get_batches_(new TableRecordBatchGenerator(std::move(table))) {}\n+      get_batches_(new TableRecordBatchVectorFactory(std::move(table))) {}\n \n Result<std::shared_ptr<Dataset>> InMemoryDataset::ReplaceSchema(\n     std::shared_ptr<Schema> schema) const {\n   RETURN_NOT_OK(CheckProjectable(*schema_, *schema));\n   return std::make_shared<InMemoryDataset>(std::move(schema), get_batches_);\n }\n \n-Result<FragmentIterator> InMemoryDataset::GetFragmentsImpl(Expression) {\n+Future<FragmentVector> InMemoryDataset::GetFragmentsImpl(Expression) {\n   auto schema = this->schema();\n \n-  auto create_fragment =\n-      [schema](std::shared_ptr<RecordBatch> batch) -> Result<std::shared_ptr<Fragment>> {\n+  // FIXME Need auto here\n\nReview comment:\n       Instead of the FIXME, we could just rewrite this to be a direct loop, right?\n\n##########\nFile path: cpp/src/arrow/dataset/dataset_internal.h\n##########\n@@ -29,34 +29,40 @@\n #include \"arrow/record_batch.h\"\n #include \"arrow/scalar.h\"\n #include \"arrow/type.h\"\n+#include \"arrow/util/future.h\"\n #include \"arrow/util/iterator.h\"\n #include \"arrow/util/optional.h\"\n+#include \"arrow/util/vector.h\"\n \n namespace arrow {\n namespace dataset {\n \n /// \\brief GetFragmentsFromDatasets transforms a vector<Dataset> into a\n /// flattened FragmentIterator.\n-inline Result<FragmentIterator> GetFragmentsFromDatasets(const DatasetVector& datasets,\n-                                                         Expression predicate) {\n-  // Iterator<Dataset>\n-  auto datasets_it = MakeVectorIterator(datasets);\n-\n-  // Dataset -> Iterator<Fragment>\n-  auto fn = [predicate](std::shared_ptr<Dataset> dataset) -> Result<FragmentIterator> {\n-    return dataset->GetFragments(predicate);\n+inline Future<FragmentVector> GetFragmentsFromDatasets(const DatasetVector& datasets,\n+                                                       Expression predicate) {\n+  // Dataset -> Future<FragmentVector>\n+  auto fn = [predicate](std::shared_ptr<Dataset> dataset) -> Future<FragmentVector> {\n+    return dataset->GetFragmentsAsync(predicate);\n   };\n \n-  // Iterator<Iterator<Fragment>>\n-  auto fragments_it = MakeMaybeMapIterator(fn, std::move(datasets_it));\n+  auto fragment_futures = internal::MapVector(fn, datasets);\n \n-  // Iterator<Fragment>\n-  return MakeFlattenIterator(std::move(fragments_it));\n+  return All(fragment_futures)\n+      .Then([](const std::vector<Result<FragmentVector>>& fragment_vecs)\n+                -> Result<FragmentVector> {\n+        ARROW_ASSIGN_OR_RAISE(auto unwrapped_vecs, internal::UnwrapOrRaise(fragment_vecs))\n+        return internal::FlattenVectors(std::move(unwrapped_vecs));\n+      });\n }\n \n-inline RecordBatchIterator IteratorFromReader(\n-    const std::shared_ptr<RecordBatchReader>& reader) {\n-  return MakeFunctionIterator([reader] { return reader->Next(); });\n+inline RecordBatchGenerator GeneratorFromReader(\n\nReview comment:\n       As far as I can see this is unused\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -166,60 +425,67 @@ Result<std::shared_ptr<Scanner>> ScannerBuilder::Finish() {\n   return std::make_shared<Scanner>(dataset_, scan_options_);\n }\n \n-static inline RecordBatchVector FlattenRecordBatchVector(\n-    std::vector<RecordBatchVector> nested_batches) {\n-  RecordBatchVector flattened;\n-\n-  for (auto& task_batches : nested_batches) {\n-    for (auto& batch : task_batches) {\n-      flattened.emplace_back(std::move(batch));\n-    }\n-  }\n-\n-  return flattened;\n-}\n-\n struct TableAssemblyState {\n   /// Protecting mutating accesses to batches\n   std::mutex mutex{};\n-  std::vector<RecordBatchVector> batches{};\n+  std::vector<std::vector<RecordBatchVector>> batches{};\n+  int scan_task_id = 0;\n \n-  void Emplace(RecordBatchVector b, size_t position) {\n+  void Emplace(std::shared_ptr<RecordBatch> batch, size_t fragment_index,\n+               size_t task_index, size_t record_batch_index) {\n     std::lock_guard<std::mutex> lock(mutex);\n-    if (batches.size() <= position) {\n-      batches.resize(position + 1);\n+    if (batches.size() <= fragment_index) {\n+      batches.resize(fragment_index + 1);\n+    }\n+    if (batches[fragment_index].size() <= task_index) {\n+      batches[fragment_index].resize(task_index + 1);\n+    }\n+    if (batches[fragment_index][task_index].size() <= record_batch_index) {\n+      batches[fragment_index][task_index].resize(record_batch_index + 1);\n     }\n-    batches[position] = std::move(b);\n+    batches[fragment_index][task_index][record_batch_index] = std::move(batch);\n   }\n };\n \n+struct TaggedRecordBatch {\n+  std::shared_ptr<RecordBatch> record_batch;\n+};\n+\n Result<std::shared_ptr<Table>> Scanner::ToTable() {\n-  ARROW_ASSIGN_OR_RAISE(auto scan_task_it, Scan());\n-  auto task_group = scan_options_->TaskGroup();\n+  auto table_fut = ToTableAsync();\n+  table_fut.Wait();\n\nReview comment:\n       I think I'm missing something, but here too I think Wait() is redundant\n\n##########\nFile path: cpp/src/arrow/dataset/dataset_internal.h\n##########\n@@ -29,34 +29,40 @@\n #include \"arrow/record_batch.h\"\n #include \"arrow/scalar.h\"\n #include \"arrow/type.h\"\n+#include \"arrow/util/future.h\"\n #include \"arrow/util/iterator.h\"\n #include \"arrow/util/optional.h\"\n+#include \"arrow/util/vector.h\"\n \n namespace arrow {\n namespace dataset {\n \n /// \\brief GetFragmentsFromDatasets transforms a vector<Dataset> into a\n /// flattened FragmentIterator.\n\nReview comment:\n       nit: comment is out of date\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T16:03:47.515+0000",
                    "updated": "2021-03-31T16:03:47.515+0000",
                    "started": "2021-03-31T16:03:47.515+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574936",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/574942",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r605010331\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -72,24 +104,251 @@ Result<FragmentIterator> Scanner::GetFragments() {\n   return GetFragmentsFromDatasets({dataset_}, scan_options_->filter);\n }\n \n+Result<FragmentIterator> Scanner::GetFragments() {\n+  auto fut = GetFragmentsAsync();\n+  fut.Wait();\n\nReview comment:\n       nit: Future.result already calls Wait for you\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1029,6 +1102,65 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n\nReview comment:\n       I'm certainly missing something but why can't this just capture and increment the counter in operator() instead of keeping track of state/previous item?\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -640,6 +666,40 @@ class SerialReadaheadGenerator {\n   std::shared_ptr<State> state_;\n };\n \n+template <typename T>\n+class FutureFirstGenerator {\n+ public:\n+  explicit FutureFirstGenerator(Future<AsyncGenerator<T>> future)\n+      : state_(std::make_shared<State>(std::move(future))) {}\n+\n+  Future<T> operator()() {\n+    if (state_->source_) {\n+      return state_->source_();\n+    } else {\n+      auto state = state_;\n+      return state_->future_.Then([state](const AsyncGenerator<T>& source) {\n+        state->source_ = source;\n+        return state->source_();\n+      });\n+    }\n+  }\n+\n+ private:\n+  struct State {\n+    explicit State(Future<AsyncGenerator<T>> future) : future_(future), source_() {}\n+\n+    Future<AsyncGenerator<T>> future_;\n+    AsyncGenerator<T> source_;\n+  };\n+\n+  std::shared_ptr<State> state_;\n+};\n+\n+template <typename T>\n\nReview comment:\n       nit: document that this is non-async-reentrant\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T16:13:20.000+0000",
                    "updated": "2021-03-31T16:13:20.000+0000",
                    "started": "2021-03-31T16:13:20.000+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574942",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/574947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r605008692\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -150,18 +199,43 @@ class ARROW_DS_EXPORT Scanner {\n   Scanner(std::shared_ptr<Fragment> fragment, std::shared_ptr<ScanOptions> scan_options)\n       : fragment_(std::move(fragment)), scan_options_(std::move(scan_options)) {}\n \n-  /// \\brief The Scan operator returns a stream of ScanTask. The caller is\n+  /// \\brief The Scan operator returns a stream of ScanTask futures. The caller is\n   /// responsible to dispatch/schedule said tasks. Tasks should be safe to run\n   /// in a concurrent fashion and outlive the iterator.\n+  PositionedRecordBatchGenerator ScanUnorderedAsync();\n+\n+  /// \\brief The scan tasks returned in this version will be\n\nReview comment:\n       ```suggestion\r\n     /// \\brief The record batches returned in this version will be\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -998,6 +1058,19 @@ class MergedGenerator {\n   std::shared_ptr<State> state_;\n };\n \n+template <typename T>\n\nReview comment:\n       nit: document that this is async-reentrant\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -150,18 +199,43 @@ class ARROW_DS_EXPORT Scanner {\n   Scanner(std::shared_ptr<Fragment> fragment, std::shared_ptr<ScanOptions> scan_options)\n       : fragment_(std::move(fragment)), scan_options_(std::move(scan_options)) {}\n \n-  /// \\brief The Scan operator returns a stream of ScanTask. The caller is\n+  /// \\brief The Scan operator returns a stream of ScanTask futures. The caller is\n\nReview comment:\n       ```suggestion\r\n     /// \\brief The Scan operator returns a stream of RecordBatch futures. The caller is\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T16:14:05.395+0000",
                    "updated": "2021-03-31T16:14:05.395+0000",
                    "started": "2021-03-31T16:14:05.395+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574947",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/575066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r605157413\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/dataset.h\n##########\n@@ -191,9 +200,9 @@ class ARROW_DS_EXPORT InMemoryDataset : public Dataset {\n       std::shared_ptr<Schema> schema) const override;\n \n  protected:\n-  Result<FragmentIterator> GetFragmentsImpl(Expression predicate) override;\n+  Future<FragmentVector> GetFragmentsImpl(Expression predicate) override;\n\nReview comment:\n       I was going to let this be addressed by ARROW-8163.\r\n   \r\n   However, if we're getting ARROW-10882 done first then rather than go with an InMemoryFragment approach I'd recommend switching to AsyncGenerator<Fragment> at that point since we're going to do so sooner or later anyways.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T19:17:28.924+0000",
                    "updated": "2021-03-31T19:17:28.924+0000",
                    "started": "2021-03-31T19:17:28.923+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575066",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/575073",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r605160946\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/dataset.h\n##########\n@@ -191,9 +200,9 @@ class ARROW_DS_EXPORT InMemoryDataset : public Dataset {\n       std::shared_ptr<Schema> schema) const override;\n \n  protected:\n-  Result<FragmentIterator> GetFragmentsImpl(Expression predicate) override;\n+  Future<FragmentVector> GetFragmentsImpl(Expression predicate) override;\n\nReview comment:\n       Also, it hopefully won't be too much work.  The scanner already consumes the FragmentVector as a generator so the only change needed would be to push the MakeVectorGenerator down into the file formats.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T19:23:34.215+0000",
                    "updated": "2021-03-31T19:23:34.215+0000",
                    "started": "2021-03-31T19:23:34.214+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575073",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/575076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r605163587\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/dataset.cc\n##########\n@@ -105,60 +109,63 @@ Result<std::shared_ptr<ScannerBuilder>> Dataset::NewScan() {\n   return NewScan(std::make_shared<ScanOptions>());\n }\n \n-Result<FragmentIterator> Dataset::GetFragments() {\n+Future<FragmentVector> Dataset::GetFragmentsAsync() {\n   ARROW_ASSIGN_OR_RAISE(auto predicate, literal(true).Bind(*schema_));\n-  return GetFragments(std::move(predicate));\n+  return GetFragmentsAsync(std::move(predicate));\n }\n \n-Result<FragmentIterator> Dataset::GetFragments(Expression predicate) {\n+Future<FragmentVector> Dataset::GetFragmentsAsync(Expression predicate) {\n   ARROW_ASSIGN_OR_RAISE(\n       predicate, SimplifyWithGuarantee(std::move(predicate), partition_expression_));\n   return predicate.IsSatisfiable() ? GetFragmentsImpl(std::move(predicate))\n-                                   : MakeEmptyIterator<std::shared_ptr<Fragment>>();\n+                                   : FragmentVector{};\n }\n \n-struct VectorRecordBatchGenerator : InMemoryDataset::RecordBatchGenerator {\n-  explicit VectorRecordBatchGenerator(RecordBatchVector batches)\n+struct VectorRecordBatchVectorFactory : InMemoryDataset::RecordBatchVectorFactory {\n+  explicit VectorRecordBatchVectorFactory(RecordBatchVector batches)\n       : batches_(std::move(batches)) {}\n \n-  RecordBatchIterator Get() const final { return MakeVectorIterator(batches_); }\n+  Result<RecordBatchVector> Get() const final { return batches_; }\n \n   RecordBatchVector batches_;\n };\n \n InMemoryDataset::InMemoryDataset(std::shared_ptr<Schema> schema,\n                                  RecordBatchVector batches)\n     : Dataset(std::move(schema)),\n-      get_batches_(new VectorRecordBatchGenerator(std::move(batches))) {}\n+      get_batches_(new VectorRecordBatchVectorFactory(std::move(batches))) {}\n \n-struct TableRecordBatchGenerator : InMemoryDataset::RecordBatchGenerator {\n-  explicit TableRecordBatchGenerator(std::shared_ptr<Table> table)\n+struct TableRecordBatchVectorFactory : InMemoryDataset::RecordBatchVectorFactory {\n+  explicit TableRecordBatchVectorFactory(std::shared_ptr<Table> table)\n       : table_(std::move(table)) {}\n \n-  RecordBatchIterator Get() const final {\n+  Result<RecordBatchVector> Get() const final {\n     auto reader = std::make_shared<TableBatchReader>(*table_);\n     auto table = table_;\n-    return MakeFunctionIterator([reader, table] { return reader->Next(); });\n+    auto iter = MakeFunctionIterator([reader, table] { return reader->Next(); });\n+    return iter.ToVector();\n   }\n \n   std::shared_ptr<Table> table_;\n };\n \n InMemoryDataset::InMemoryDataset(std::shared_ptr<Table> table)\n     : Dataset(table->schema()),\n-      get_batches_(new TableRecordBatchGenerator(std::move(table))) {}\n+      get_batches_(new TableRecordBatchVectorFactory(std::move(table))) {}\n \n Result<std::shared_ptr<Dataset>> InMemoryDataset::ReplaceSchema(\n     std::shared_ptr<Schema> schema) const {\n   RETURN_NOT_OK(CheckProjectable(*schema_, *schema));\n   return std::make_shared<InMemoryDataset>(std::move(schema), get_batches_);\n }\n \n-Result<FragmentIterator> InMemoryDataset::GetFragmentsImpl(Expression) {\n+Future<FragmentVector> InMemoryDataset::GetFragmentsImpl(Expression) {\n   auto schema = this->schema();\n \n-  auto create_fragment =\n-      [schema](std::shared_ptr<RecordBatch> batch) -> Result<std::shared_ptr<Fragment>> {\n+  // FIXME Need auto here\n\nReview comment:\n       I wasn't entirely sure of the logic behind `get_batches_` but it was being treated as an iterator before so I kept the semantic.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T19:28:05.447+0000",
                    "updated": "2021-03-31T19:28:05.447+0000",
                    "started": "2021-03-31T19:28:05.447+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575076",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/575107",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r605193794\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/dataset.cc\n##########\n@@ -105,60 +109,63 @@ Result<std::shared_ptr<ScannerBuilder>> Dataset::NewScan() {\n   return NewScan(std::make_shared<ScanOptions>());\n }\n \n-Result<FragmentIterator> Dataset::GetFragments() {\n+Future<FragmentVector> Dataset::GetFragmentsAsync() {\n   ARROW_ASSIGN_OR_RAISE(auto predicate, literal(true).Bind(*schema_));\n-  return GetFragments(std::move(predicate));\n+  return GetFragmentsAsync(std::move(predicate));\n }\n \n-Result<FragmentIterator> Dataset::GetFragments(Expression predicate) {\n+Future<FragmentVector> Dataset::GetFragmentsAsync(Expression predicate) {\n   ARROW_ASSIGN_OR_RAISE(\n       predicate, SimplifyWithGuarantee(std::move(predicate), partition_expression_));\n   return predicate.IsSatisfiable() ? GetFragmentsImpl(std::move(predicate))\n-                                   : MakeEmptyIterator<std::shared_ptr<Fragment>>();\n+                                   : FragmentVector{};\n }\n \n-struct VectorRecordBatchGenerator : InMemoryDataset::RecordBatchGenerator {\n-  explicit VectorRecordBatchGenerator(RecordBatchVector batches)\n+struct VectorRecordBatchVectorFactory : InMemoryDataset::RecordBatchVectorFactory {\n+  explicit VectorRecordBatchVectorFactory(RecordBatchVector batches)\n       : batches_(std::move(batches)) {}\n \n-  RecordBatchIterator Get() const final { return MakeVectorIterator(batches_); }\n+  Result<RecordBatchVector> Get() const final { return batches_; }\n \n   RecordBatchVector batches_;\n };\n \n InMemoryDataset::InMemoryDataset(std::shared_ptr<Schema> schema,\n                                  RecordBatchVector batches)\n     : Dataset(std::move(schema)),\n-      get_batches_(new VectorRecordBatchGenerator(std::move(batches))) {}\n+      get_batches_(new VectorRecordBatchVectorFactory(std::move(batches))) {}\n \n-struct TableRecordBatchGenerator : InMemoryDataset::RecordBatchGenerator {\n-  explicit TableRecordBatchGenerator(std::shared_ptr<Table> table)\n+struct TableRecordBatchVectorFactory : InMemoryDataset::RecordBatchVectorFactory {\n+  explicit TableRecordBatchVectorFactory(std::shared_ptr<Table> table)\n       : table_(std::move(table)) {}\n \n-  RecordBatchIterator Get() const final {\n+  Result<RecordBatchVector> Get() const final {\n     auto reader = std::make_shared<TableBatchReader>(*table_);\n     auto table = table_;\n-    return MakeFunctionIterator([reader, table] { return reader->Next(); });\n+    auto iter = MakeFunctionIterator([reader, table] { return reader->Next(); });\n+    return iter.ToVector();\n   }\n \n   std::shared_ptr<Table> table_;\n };\n \n InMemoryDataset::InMemoryDataset(std::shared_ptr<Table> table)\n     : Dataset(table->schema()),\n-      get_batches_(new TableRecordBatchGenerator(std::move(table))) {}\n+      get_batches_(new TableRecordBatchVectorFactory(std::move(table))) {}\n \n Result<std::shared_ptr<Dataset>> InMemoryDataset::ReplaceSchema(\n     std::shared_ptr<Schema> schema) const {\n   RETURN_NOT_OK(CheckProjectable(*schema_, *schema));\n   return std::make_shared<InMemoryDataset>(std::move(schema), get_batches_);\n }\n \n-Result<FragmentIterator> InMemoryDataset::GetFragmentsImpl(Expression) {\n+Future<FragmentVector> InMemoryDataset::GetFragmentsImpl(Expression) {\n   auto schema = this->schema();\n \n-  auto create_fragment =\n-      [schema](std::shared_ptr<RecordBatch> batch) -> Result<std::shared_ptr<Fragment>> {\n+  // FIXME Need auto here\n\nReview comment:\n       It used to return an iterator before, so it had to be an iterator, but now that we're returning a vector, there's no need to keep the iterator.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T20:20:17.600+0000",
                    "updated": "2021-03-31T20:20:17.600+0000",
                    "started": "2021-03-31T20:20:17.600+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575107",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/575416",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r605521628\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1029,6 +1102,65 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n\nReview comment:\n       Yeah, if we could somehow know up front how many scan tasks is in a fragment or how many record batches are in a scan task then this could be simplified.  However, I'm not sure we can safely make that assumption.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-01T09:47:01.452+0000",
                    "updated": "2021-04-01T09:47:01.452+0000",
                    "started": "2021-04-01T09:47:01.452+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575416",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/575422",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r605535258\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/dataset.h\n##########\n@@ -133,8 +130,20 @@ class ARROW_DS_EXPORT Dataset : public std::enable_shared_from_this<Dataset> {\n   Result<std::shared_ptr<ScannerBuilder>> NewScan();\n \n   /// \\brief GetFragments returns an iterator of Fragments given a predicate.\n-  Result<FragmentIterator> GetFragments(Expression predicate);\n-  Result<FragmentIterator> GetFragments();\n+  Future<FragmentVector> GetFragmentsAsync(Expression predicate);\n+  Result<FragmentIterator> GetFragments(Expression predicate) {\n+    auto fut = GetFragmentsAsync(predicate);\n+    fut.Wait();\n+    ARROW_ASSIGN_OR_RAISE(auto fragments_vec, fut.result());\n+    return MakeVectorIterator(fragments_vec);\n+  }\n+  Future<FragmentVector> GetFragmentsAsync();\n+  Result<FragmentIterator> GetFragments() {\n+    auto fut = GetFragmentsAsync();\n+    fut.Wait();\n+    ARROW_ASSIGN_OR_RAISE(auto fragments_vec, fut.result());\n\nReview comment:\n       Cleaned up.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-01T10:07:05.978+0000",
                    "updated": "2021-04-01T10:07:05.978+0000",
                    "started": "2021-04-01T10:07:05.978+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575422",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/575423",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r605535681\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/dataset.cc\n##########\n@@ -105,60 +109,63 @@ Result<std::shared_ptr<ScannerBuilder>> Dataset::NewScan() {\n   return NewScan(std::make_shared<ScanOptions>());\n }\n \n-Result<FragmentIterator> Dataset::GetFragments() {\n+Future<FragmentVector> Dataset::GetFragmentsAsync() {\n   ARROW_ASSIGN_OR_RAISE(auto predicate, literal(true).Bind(*schema_));\n-  return GetFragments(std::move(predicate));\n+  return GetFragmentsAsync(std::move(predicate));\n }\n \n-Result<FragmentIterator> Dataset::GetFragments(Expression predicate) {\n+Future<FragmentVector> Dataset::GetFragmentsAsync(Expression predicate) {\n   ARROW_ASSIGN_OR_RAISE(\n       predicate, SimplifyWithGuarantee(std::move(predicate), partition_expression_));\n   return predicate.IsSatisfiable() ? GetFragmentsImpl(std::move(predicate))\n-                                   : MakeEmptyIterator<std::shared_ptr<Fragment>>();\n+                                   : FragmentVector{};\n }\n \n-struct VectorRecordBatchGenerator : InMemoryDataset::RecordBatchGenerator {\n-  explicit VectorRecordBatchGenerator(RecordBatchVector batches)\n+struct VectorRecordBatchVectorFactory : InMemoryDataset::RecordBatchVectorFactory {\n+  explicit VectorRecordBatchVectorFactory(RecordBatchVector batches)\n       : batches_(std::move(batches)) {}\n \n-  RecordBatchIterator Get() const final { return MakeVectorIterator(batches_); }\n+  Result<RecordBatchVector> Get() const final { return batches_; }\n \n   RecordBatchVector batches_;\n };\n \n InMemoryDataset::InMemoryDataset(std::shared_ptr<Schema> schema,\n                                  RecordBatchVector batches)\n     : Dataset(std::move(schema)),\n-      get_batches_(new VectorRecordBatchGenerator(std::move(batches))) {}\n+      get_batches_(new VectorRecordBatchVectorFactory(std::move(batches))) {}\n \n-struct TableRecordBatchGenerator : InMemoryDataset::RecordBatchGenerator {\n-  explicit TableRecordBatchGenerator(std::shared_ptr<Table> table)\n+struct TableRecordBatchVectorFactory : InMemoryDataset::RecordBatchVectorFactory {\n+  explicit TableRecordBatchVectorFactory(std::shared_ptr<Table> table)\n       : table_(std::move(table)) {}\n \n-  RecordBatchIterator Get() const final {\n+  Result<RecordBatchVector> Get() const final {\n     auto reader = std::make_shared<TableBatchReader>(*table_);\n     auto table = table_;\n-    return MakeFunctionIterator([reader, table] { return reader->Next(); });\n+    auto iter = MakeFunctionIterator([reader, table] { return reader->Next(); });\n+    return iter.ToVector();\n   }\n \n   std::shared_ptr<Table> table_;\n };\n \n InMemoryDataset::InMemoryDataset(std::shared_ptr<Table> table)\n     : Dataset(table->schema()),\n-      get_batches_(new TableRecordBatchGenerator(std::move(table))) {}\n+      get_batches_(new TableRecordBatchVectorFactory(std::move(table))) {}\n \n Result<std::shared_ptr<Dataset>> InMemoryDataset::ReplaceSchema(\n     std::shared_ptr<Schema> schema) const {\n   RETURN_NOT_OK(CheckProjectable(*schema_, *schema));\n   return std::make_shared<InMemoryDataset>(std::move(schema), get_batches_);\n }\n \n-Result<FragmentIterator> InMemoryDataset::GetFragmentsImpl(Expression) {\n+Future<FragmentVector> InMemoryDataset::GetFragmentsImpl(Expression) {\n   auto schema = this->schema();\n \n-  auto create_fragment =\n-      [schema](std::shared_ptr<RecordBatch> batch) -> Result<std::shared_ptr<Fragment>> {\n+  // FIXME Need auto here\n\nReview comment:\n       Cleaned up InMemoryDataset to get rid of the iterator.\n\n##########\nFile path: cpp/src/arrow/dataset/dataset_internal.h\n##########\n@@ -29,34 +29,40 @@\n #include \"arrow/record_batch.h\"\n #include \"arrow/scalar.h\"\n #include \"arrow/type.h\"\n+#include \"arrow/util/future.h\"\n #include \"arrow/util/iterator.h\"\n #include \"arrow/util/optional.h\"\n+#include \"arrow/util/vector.h\"\n \n namespace arrow {\n namespace dataset {\n \n /// \\brief GetFragmentsFromDatasets transforms a vector<Dataset> into a\n /// flattened FragmentIterator.\n\nReview comment:\n       Fixed.\n\n##########\nFile path: cpp/src/arrow/dataset/dataset_internal.h\n##########\n@@ -29,34 +29,40 @@\n #include \"arrow/record_batch.h\"\n #include \"arrow/scalar.h\"\n #include \"arrow/type.h\"\n+#include \"arrow/util/future.h\"\n #include \"arrow/util/iterator.h\"\n #include \"arrow/util/optional.h\"\n+#include \"arrow/util/vector.h\"\n \n namespace arrow {\n namespace dataset {\n \n /// \\brief GetFragmentsFromDatasets transforms a vector<Dataset> into a\n /// flattened FragmentIterator.\n-inline Result<FragmentIterator> GetFragmentsFromDatasets(const DatasetVector& datasets,\n-                                                         Expression predicate) {\n-  // Iterator<Dataset>\n-  auto datasets_it = MakeVectorIterator(datasets);\n-\n-  // Dataset -> Iterator<Fragment>\n-  auto fn = [predicate](std::shared_ptr<Dataset> dataset) -> Result<FragmentIterator> {\n-    return dataset->GetFragments(predicate);\n+inline Future<FragmentVector> GetFragmentsFromDatasets(const DatasetVector& datasets,\n+                                                       Expression predicate) {\n+  // Dataset -> Future<FragmentVector>\n+  auto fn = [predicate](std::shared_ptr<Dataset> dataset) -> Future<FragmentVector> {\n+    return dataset->GetFragmentsAsync(predicate);\n   };\n \n-  // Iterator<Iterator<Fragment>>\n-  auto fragments_it = MakeMaybeMapIterator(fn, std::move(datasets_it));\n+  auto fragment_futures = internal::MapVector(fn, datasets);\n \n-  // Iterator<Fragment>\n-  return MakeFlattenIterator(std::move(fragments_it));\n+  return All(fragment_futures)\n+      .Then([](const std::vector<Result<FragmentVector>>& fragment_vecs)\n+                -> Result<FragmentVector> {\n+        ARROW_ASSIGN_OR_RAISE(auto unwrapped_vecs, internal::UnwrapOrRaise(fragment_vecs))\n+        return internal::FlattenVectors(std::move(unwrapped_vecs));\n+      });\n }\n \n-inline RecordBatchIterator IteratorFromReader(\n-    const std::shared_ptr<RecordBatchReader>& reader) {\n-  return MakeFunctionIterator([reader] { return reader->Next(); });\n+inline RecordBatchGenerator GeneratorFromReader(\n\nReview comment:\n       Good catch.  Removed.\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -640,6 +666,40 @@ class SerialReadaheadGenerator {\n   std::shared_ptr<State> state_;\n };\n \n+template <typename T>\n+class FutureFirstGenerator {\n+ public:\n+  explicit FutureFirstGenerator(Future<AsyncGenerator<T>> future)\n+      : state_(std::make_shared<State>(std::move(future))) {}\n+\n+  Future<T> operator()() {\n+    if (state_->source_) {\n+      return state_->source_();\n+    } else {\n+      auto state = state_;\n+      return state_->future_.Then([state](const AsyncGenerator<T>& source) {\n+        state->source_ = source;\n+        return state->source_();\n+      });\n+    }\n+  }\n+\n+ private:\n+  struct State {\n+    explicit State(Future<AsyncGenerator<T>> future) : future_(future), source_() {}\n+\n+    Future<AsyncGenerator<T>> future_;\n+    AsyncGenerator<T> source_;\n+  };\n+\n+  std::shared_ptr<State> state_;\n+};\n+\n+template <typename T>\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -998,6 +1058,19 @@ class MergedGenerator {\n   std::shared_ptr<State> state_;\n };\n \n+template <typename T>\n\nReview comment:\n       Done.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-01T10:08:09.482+0000",
                    "updated": "2021-04-01T10:08:09.482+0000",
                    "started": "2021-04-01T10:08:09.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575423",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/575425",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r605536876\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -110,35 +110,47 @@ static inline Result<csv::ReadOptions> GetReadOptions(\n   return read_options;\n }\n \n-static inline Result<std::shared_ptr<csv::StreamingReader>> OpenReader(\n+static inline Future<std::shared_ptr<csv::StreamingReader>> OpenReaderAsync(\n     const FileSource& source, const CsvFileFormat& format,\n     const std::shared_ptr<ScanOptions>& scan_options = nullptr,\n     MemoryPool* pool = default_memory_pool()) {\n   ARROW_ASSIGN_OR_RAISE(auto reader_options, GetReadOptions(format, scan_options));\n \n-  util::string_view first_block;\n   ARROW_ASSIGN_OR_RAISE(auto input, source.OpenCompressed());\n   ARROW_ASSIGN_OR_RAISE(\n       input, io::BufferedInputStream::Create(reader_options.block_size,\n                                              default_memory_pool(), std::move(input)));\n-  ARROW_ASSIGN_OR_RAISE(first_block, input->Peek(reader_options.block_size));\n-\n-  const auto& parse_options = format.parse_options;\n-  auto convert_options = csv::ConvertOptions::Defaults();\n-  if (scan_options != nullptr) {\n-    ARROW_ASSIGN_OR_RAISE(convert_options,\n-                          GetConvertOptions(format, scan_options, first_block, pool));\n-  }\n \n-  auto maybe_reader =\n-      csv::StreamingReader::Make(io::IOContext(pool), std::move(input), reader_options,\n-                                 parse_options, convert_options);\n-  if (!maybe_reader.ok()) {\n-    return maybe_reader.status().WithMessage(\"Could not open CSV input source '\",\n-                                             source.path(), \"': \", maybe_reader.status());\n-  }\n+  auto peek_fut = DeferNotOk(input->io_context().executor()->Submit(\n\nReview comment:\n       I think I was operating as if filesystems was async but the point is valid.  Plus, I had missed that I was on the I/O thread pool here and not transferring back to the CPU thread pool.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-01T10:09:45.577+0000",
                    "updated": "2021-04-01T10:09:45.577+0000",
                    "started": "2021-04-01T10:09:45.577+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575425",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/575426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r605537429\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -110,35 +110,47 @@ static inline Result<csv::ReadOptions> GetReadOptions(\n   return read_options;\n }\n \n-static inline Result<std::shared_ptr<csv::StreamingReader>> OpenReader(\n+static inline Future<std::shared_ptr<csv::StreamingReader>> OpenReaderAsync(\n     const FileSource& source, const CsvFileFormat& format,\n     const std::shared_ptr<ScanOptions>& scan_options = nullptr,\n     MemoryPool* pool = default_memory_pool()) {\n   ARROW_ASSIGN_OR_RAISE(auto reader_options, GetReadOptions(format, scan_options));\n \n-  util::string_view first_block;\n   ARROW_ASSIGN_OR_RAISE(auto input, source.OpenCompressed());\n   ARROW_ASSIGN_OR_RAISE(\n       input, io::BufferedInputStream::Create(reader_options.block_size,\n                                              default_memory_pool(), std::move(input)));\n-  ARROW_ASSIGN_OR_RAISE(first_block, input->Peek(reader_options.block_size));\n-\n-  const auto& parse_options = format.parse_options;\n-  auto convert_options = csv::ConvertOptions::Defaults();\n-  if (scan_options != nullptr) {\n-    ARROW_ASSIGN_OR_RAISE(convert_options,\n-                          GetConvertOptions(format, scan_options, first_block, pool));\n-  }\n \n-  auto maybe_reader =\n-      csv::StreamingReader::Make(io::IOContext(pool), std::move(input), reader_options,\n-                                 parse_options, convert_options);\n-  if (!maybe_reader.ok()) {\n-    return maybe_reader.status().WithMessage(\"Could not open CSV input source '\",\n-                                             source.path(), \"': \", maybe_reader.status());\n-  }\n+  auto peek_fut = DeferNotOk(input->io_context().executor()->Submit(\n\nReview comment:\n       So I combined into a single future.  I also feel the code to add the filename to any errors is pretty verbose.  I want to maybe add a Future::Catch someday to at least simplify it a little.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-01T10:10:29.051+0000",
                    "updated": "2021-04-01T10:10:29.051+0000",
                    "started": "2021-04-01T10:10:29.050+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575426",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/575427",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#discussion_r605537486\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -150,18 +199,43 @@ class ARROW_DS_EXPORT Scanner {\n   Scanner(std::shared_ptr<Fragment> fragment, std::shared_ptr<ScanOptions> scan_options)\n       : fragment_(std::move(fragment)), scan_options_(std::move(scan_options)) {}\n \n-  /// \\brief The Scan operator returns a stream of ScanTask. The caller is\n+  /// \\brief The Scan operator returns a stream of ScanTask futures. The caller is\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.h\n##########\n@@ -150,18 +199,43 @@ class ARROW_DS_EXPORT Scanner {\n   Scanner(std::shared_ptr<Fragment> fragment, std::shared_ptr<ScanOptions> scan_options)\n       : fragment_(std::move(fragment)), scan_options_(std::move(scan_options)) {}\n \n-  /// \\brief The Scan operator returns a stream of ScanTask. The caller is\n+  /// \\brief The Scan operator returns a stream of ScanTask futures. The caller is\n   /// responsible to dispatch/schedule said tasks. Tasks should be safe to run\n   /// in a concurrent fashion and outlive the iterator.\n+  PositionedRecordBatchGenerator ScanUnorderedAsync();\n+\n+  /// \\brief The scan tasks returned in this version will be\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -72,24 +104,251 @@ Result<FragmentIterator> Scanner::GetFragments() {\n   return GetFragmentsFromDatasets({dataset_}, scan_options_->filter);\n }\n \n+Result<FragmentIterator> Scanner::GetFragments() {\n+  auto fut = GetFragmentsAsync();\n+  fut.Wait();\n\nReview comment:\n       Fixed.\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -166,60 +425,67 @@ Result<std::shared_ptr<Scanner>> ScannerBuilder::Finish() {\n   return std::make_shared<Scanner>(dataset_, scan_options_);\n }\n \n-static inline RecordBatchVector FlattenRecordBatchVector(\n-    std::vector<RecordBatchVector> nested_batches) {\n-  RecordBatchVector flattened;\n-\n-  for (auto& task_batches : nested_batches) {\n-    for (auto& batch : task_batches) {\n-      flattened.emplace_back(std::move(batch));\n-    }\n-  }\n-\n-  return flattened;\n-}\n-\n struct TableAssemblyState {\n   /// Protecting mutating accesses to batches\n   std::mutex mutex{};\n-  std::vector<RecordBatchVector> batches{};\n+  std::vector<std::vector<RecordBatchVector>> batches{};\n+  int scan_task_id = 0;\n \n-  void Emplace(RecordBatchVector b, size_t position) {\n+  void Emplace(std::shared_ptr<RecordBatch> batch, size_t fragment_index,\n+               size_t task_index, size_t record_batch_index) {\n     std::lock_guard<std::mutex> lock(mutex);\n-    if (batches.size() <= position) {\n-      batches.resize(position + 1);\n+    if (batches.size() <= fragment_index) {\n+      batches.resize(fragment_index + 1);\n+    }\n+    if (batches[fragment_index].size() <= task_index) {\n+      batches[fragment_index].resize(task_index + 1);\n+    }\n+    if (batches[fragment_index][task_index].size() <= record_batch_index) {\n+      batches[fragment_index][task_index].resize(record_batch_index + 1);\n     }\n-    batches[position] = std::move(b);\n+    batches[fragment_index][task_index][record_batch_index] = std::move(batch);\n   }\n };\n \n+struct TaggedRecordBatch {\n\nReview comment:\n       Thanks.  Removed.\n\n##########\nFile path: cpp/src/arrow/dataset/scanner.cc\n##########\n@@ -166,60 +425,67 @@ Result<std::shared_ptr<Scanner>> ScannerBuilder::Finish() {\n   return std::make_shared<Scanner>(dataset_, scan_options_);\n }\n \n-static inline RecordBatchVector FlattenRecordBatchVector(\n-    std::vector<RecordBatchVector> nested_batches) {\n-  RecordBatchVector flattened;\n-\n-  for (auto& task_batches : nested_batches) {\n-    for (auto& batch : task_batches) {\n-      flattened.emplace_back(std::move(batch));\n-    }\n-  }\n-\n-  return flattened;\n-}\n-\n struct TableAssemblyState {\n   /// Protecting mutating accesses to batches\n   std::mutex mutex{};\n-  std::vector<RecordBatchVector> batches{};\n+  std::vector<std::vector<RecordBatchVector>> batches{};\n+  int scan_task_id = 0;\n \n-  void Emplace(RecordBatchVector b, size_t position) {\n+  void Emplace(std::shared_ptr<RecordBatch> batch, size_t fragment_index,\n+               size_t task_index, size_t record_batch_index) {\n     std::lock_guard<std::mutex> lock(mutex);\n-    if (batches.size() <= position) {\n-      batches.resize(position + 1);\n+    if (batches.size() <= fragment_index) {\n+      batches.resize(fragment_index + 1);\n+    }\n+    if (batches[fragment_index].size() <= task_index) {\n+      batches[fragment_index].resize(task_index + 1);\n+    }\n+    if (batches[fragment_index][task_index].size() <= record_batch_index) {\n+      batches[fragment_index][task_index].resize(record_batch_index + 1);\n     }\n-    batches[position] = std::move(b);\n+    batches[fragment_index][task_index][record_batch_index] = std::move(batch);\n   }\n };\n \n+struct TaggedRecordBatch {\n+  std::shared_ptr<RecordBatch> record_batch;\n+};\n+\n Result<std::shared_ptr<Table>> Scanner::ToTable() {\n-  ARROW_ASSIGN_OR_RAISE(auto scan_task_it, Scan());\n-  auto task_group = scan_options_->TaskGroup();\n+  auto table_fut = ToTableAsync();\n+  table_fut.Wait();\n\nReview comment:\n       Yep.  Removed.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-01T10:11:02.574+0000",
                    "updated": "2021-04-01T10:11:02.574+0000",
                    "started": "2021-04-01T10:11:02.573+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575427",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/578547",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#issuecomment-815140169\n\n\n   Benchmark runs are scheduled for baseline = 5554c54e534c6c19796a7b2091ac0d3687784c53 and contender = 5d48227417a76dbc678cab6132b553751ab382f0. Results will be available as each benchmark for each run completes: \n   [Scheduled] ursa-i9-9960x: https://conbench.ursa.dev/compare/runs/c9a4e9a6-9290-4f4e-b382-fe43557215ee...6e3be913-c973-407e-a0de-5e3f0a6a6b10/\n   [Scheduled] ursa-thinkcentre-m75q: https://conbench.ursa.dev/compare/runs/1899a09d-e07c-423f-bdc5-13ae3fa1cd1c...7eb02524-600d-4af9-914a-621c4990bdef/\n   [Scheduled] ec2-t3-large-us-east-2: https://conbench.ursa.dev/compare/runs/ee98cea1-b3ef-4664-bb4b-8038fe8b9aed...5bc86590-a57a-4549-b267-5905f08a8414/\n   [Scheduled] ec2-t3-xlarge-us-east-2: https://conbench.ursa.dev/compare/runs/0e49b970-a3ee-478f-b42a-f1d15d2c8096...f00a81b5-2883-42eb-8559-95536fe2f432/\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-07T18:44:18.738+0000",
                    "updated": "2021-04-07T18:44:18.738+0000",
                    "started": "2021-04-07T18:44:18.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "578547",
                    "issueId": "13264619"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/worklog/578548",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #9607:\nURL: https://github.com/apache/arrow/pull/9607#issuecomment-815140110\n\n\n   @ursabot please benchmark\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-07T18:44:22.855+0000",
                    "updated": "2021-04-07T18:44:22.855+0000",
                    "started": "2021-04-07T18:44:22.855+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "578548",
                    "issueId": "13264619"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 15600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1efe2b5b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e3dcbe3[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@448cfab5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@248e5314[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b7d96f3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1d6f03f9[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e951bb3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6855f986[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f782071[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6aed9aac[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c334cc1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3bed1308[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 150000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jun 22 02:16:27 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-22T02:16:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7001/watchers",
            "watchCount": 6,
            "isWatching": false
        },
        "created": "2019-10-26T18:04:43.000+0000",
        "updated": "2021-06-22T02:16:46.000+0000",
        "timeoriginalestimate": null,
        "description": "Tasks invoked in parallel may be able to submit their own subtasks, which in OpenMP and TBB documentation is often called \"nested parallelism\". \r\n\r\nIf a task blocks on the completion of subtasks, then outright deadlocks are possible -- running tasks are all blocking on their subtasks, but the thread pool will not schedule any further tasks.\r\n\r\nI suggest that such code have a way to indicate to the thread pool (if one is passed in) that it is blocking on the completion of other tasks so that further tasks can be run while the task waits for its child tasks to complete. One possible way to do this is to have a floating \"soft limit\" for concurrent tasks that can be incremented when tasks are waiting. \r\n\r\nSo if we normally allow 8 concurrent tasks, then this can be temporarily increased for each \"suspended\" task. Preferably we would provide some way for the dependent task group to \"awaken\" the suspended task so that it does not have to do any work while waiting for the task group to finish\r\n\r\nNote this feature can also be used in tasks that are waiting for IO calls\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Develop threading APIs to accommodate nested parallelism ",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/comment/16960415",
                    "id": "16960415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "As a demonstration of the success of this, we should be able to run a task that spawns recursive subtasks to arbitrary nesting depth on a ThreadPool with size 1. This would also serve as a helpful stress performance test e.g. to see how quickly a recursively nested task chain with depth ~100 can be executed. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-10-26T18:58:38.632+0000",
                    "updated": "2019-10-26T18:58:38.632+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/comment/16963399",
                    "id": "16963399",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Ok, so the problem here is to have a task blocking on another, right? Otherwise, you can schedule a task from another task, and pass e.g. a callback to that new task. Not very pretty, but it works.\r\n\r\nI still think it would be worthwhile discussing this on a higher level, i.e. which execution model we have in mind. In one execution model, IO is interspersed with computations in the same thread and therefore a way to signal that a task is blocking on some external completion is needed. In another execution model, you have a driver thread that does IO and pushes available data to pure-CPU workers.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-10-30T20:28:27.942+0000",
                    "updated": "2019-10-30T20:28:27.942+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/comment/16963437",
                    "id": "16963437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think realistically we may need to support both styles of scheduling\r\n\r\nTo make the problem more concrete, I think we should focus on the needs of reading multiple files that are capable of parallelizing at the file level. For example, Parquet files. Not only do we parallelize at the column level, but within a thread reading a column, we perform IO calls which may block. Somehow we need to not block a CPU core on an IO call returning. Do we need to do a major refactoring? Or can the current code be retrofitted with a suspend-task-resume-task API that allows other tasks to be started when there is IO waiting. \r\n\r\nFacebook's Folly library has a fibers / coroutines library that may provide some ideas about what kind of programming models make sense for certain applications\r\n\r\nhttps://github.com/facebook/folly/tree/master/folly/fibers",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-10-30T21:20:28.763+0000",
                    "updated": "2019-10-30T21:20:28.763+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/comment/17133870",
                    "id": "17133870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'm not thinking this is going to be completed for 1.0.0 yet",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-12T03:13:00.102+0000",
                    "updated": "2020-06-12T03:13:00.102+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/comment/17290873",
                    "id": "17290873",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=anton-malakhov",
                        "name": "anton-malakhov",
                        "key": "anton-malakhov",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Anton Malakhov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Please consider ideas from this blog:\u00a0https://habr.com/en/company/intel/blog/542908/",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=anton-malakhov",
                        "name": "anton-malakhov",
                        "key": "anton-malakhov",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Anton Malakhov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-02-25T11:49:19.095+0000",
                    "updated": "2021-02-25T11:49:19.095+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/comment/17291966",
                    "id": "17291966",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Thanks [~anton-malakhov] .\u00a0 I took a look at the blog and oox looks like it can be useful.\u00a0 I have been working on this issue and a slightly broader goal of removing all blocking I/O waits from the CPU thread pool (see [https://docs.google.com/document/d/1tO2WwYL-G2cB_MCPqYguKjKkRT7mZ8C2Gc9ONvspfgo/edit?usp=sharing] ).\r\n\r\n\u00a0\r\n\r\nI have been using an arrow::Result-aware implementation of std::future (arrow::Future) and using simple Then/All/Any continuations.\u00a0 This only allows for dags of flow dependencies (and not output & anti dependencies).\u00a0 I'm fairly certain this will be sufficient and there is a broad understanding of the capabilities from other languages that support this kind of construct (e.g. Javascript's Promise.then, C# Task.ContinueWith, Java's CompletableFuture).\r\n\r\n\u00a0\r\n\r\nI was not able to find any oox library or mention of licensing.\u00a0 If there is a repository out there somewhere with a reference implementation I'd be happy to take a closer look.\u00a0 I appreciate you bringing sharing this but at the moment I do not think the sophistication offered by oox is needed to solve this problem.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-02-26T23:29:14.245+0000",
                    "updated": "2021-02-26T23:29:14.245+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/comment/17292682",
                    "id": "17292682",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=anton-malakhov",
                        "name": "anton-malakhov",
                        "key": "anton-malakhov",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Anton Malakhov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks for looking into this! As I mentioned in the article, OOX is not productized but it has PoC implementation, which was created for TBB. If there is enough interest from you and other people, I can try to convince Intel to publish the sources.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=anton-malakhov",
                        "name": "anton-malakhov",
                        "key": "anton-malakhov",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Anton Malakhov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-03-01T07:31:00.075+0000",
                    "updated": "2021-03-01T07:31:00.075+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619/comment/17366940",
                    "id": "17366940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "[~apitrou] [~lidavidm] [~wesm] Given the state of the async operators, the exec plan work, and the fact that nested parallelism is supported on parquet (e.g. ARROW-12597) I am going to mark this resolved.\u00a0 Feel free to reopen with details if you think more is needed.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-06-22T02:16:27.853+0000",
                    "updated": "2021-06-22T02:16:27.853+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|z07z94:",
        "customfield_12314139": null
    }
}