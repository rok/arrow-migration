{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13194634",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194634",
    "key": "ARROW-3640",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3640/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194634/worklog/159945",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2860: ARROW-3640: [Go] implement Tensors\nURL: https://github.com/apache/arrow/pull/2860#issuecomment-433865752\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=h1) Report\n   > Merging [#2860](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/d61988d9bc1c9ca92789523593055da0996e9509?src=pr&el=desc) will **decrease** coverage by `19.25%`.\n   > The diff coverage is `89.89%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2860/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #2860       +/-   ##\n   ===========================================\n   - Coverage   87.55%   68.29%   -19.26%     \n   ===========================================\n     Files         410       54      -356     \n     Lines       63486     2899    -60587     \n   ===========================================\n   - Hits        55586     1980    -53606     \n   + Misses       7828      845     -6983     \n   - Partials       72       74        +2\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | `84.31% <0%> (-3.45%)` | :arrow_down: |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (+1.85%)` | :arrow_up: |\n   | [go/arrow/array/record.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvcmVjb3JkLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/tensor/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL251bWVyaWMuZ2VuLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.73% <100%> (+12.51%)` | :arrow_up: |\n   | [go/arrow/datatype\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbnVtZXJpYy5nZW4uZ28=) | `46.66% <46.66%> (-23.34%)` | :arrow_down: |\n   | [go/arrow/tensor/tensor.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL3RlbnNvci5nbw==) | `69.15% <69.15%> (\u00f8)` | |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.33% <97.33%> (\u00f8)` | |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | ... and [372 more](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=footer). Last update [d61988d...6df0abc](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T10:47:34.016+0000",
                    "updated": "2018-10-29T10:47:34.016+0000",
                    "started": "2018-10-29T10:47:34.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159945",
                    "issueId": "13194634"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194634/worklog/159952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #2860: ARROW-3640: [Go] implement Tensors\nURL: https://github.com/apache/arrow/pull/2860#issuecomment-433875808\n \n \n   needs #2838 and #2847 \r\n   \r\n   PTAL @stuartcarnie \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T11:24:42.748+0000",
                    "updated": "2018-10-29T11:24:42.748+0000",
                    "started": "2018-10-29T11:24:42.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159952",
                    "issueId": "13194634"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194634/worklog/159953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2860: ARROW-3640: [Go] implement Tensors\nURL: https://github.com/apache/arrow/pull/2860#issuecomment-433865752\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=h1) Report\n   > Merging [#2860](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/d61988d9bc1c9ca92789523593055da0996e9509?src=pr&el=desc) will **decrease** coverage by `18.94%`.\n   > The diff coverage is `93.32%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2860/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #2860       +/-   ##\n   ==========================================\n   - Coverage   87.55%   68.6%   -18.95%     \n   ==========================================\n     Files         410      54      -356     \n     Lines       63486    2899    -60587     \n   ==========================================\n   - Hits        55586    1989    -53597     \n   + Misses       7828     832     -6996     \n   - Partials       72      78        +6\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | `84.31% <0%> (-3.45%)` | :arrow_down: |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (+1.85%)` | :arrow_up: |\n   | [go/arrow/array/record.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvcmVjb3JkLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/tensor/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL251bWVyaWMuZ2VuLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.73% <100%> (+12.51%)` | :arrow_up: |\n   | [go/arrow/datatype\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbnVtZXJpYy5nZW4uZ28=) | `50% <50%> (-20%)` | :arrow_down: |\n   | [go/arrow/tensor/tensor.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL3RlbnNvci5nbw==) | `85.98% <85.98%> (\u00f8)` | |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.33% <97.33%> (\u00f8)` | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | ... and [372 more](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=footer). Last update [d61988d...e4d29ec](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T11:24:44.928+0000",
                    "updated": "2018-10-29T11:24:44.928+0000",
                    "started": "2018-10-29T11:24:44.927+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159953",
                    "issueId": "13194634"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194634/worklog/159955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2860: ARROW-3640: [Go] implement Tensors\nURL: https://github.com/apache/arrow/pull/2860#issuecomment-433865752\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=h1) Report\n   > Merging [#2860](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/d61988d9bc1c9ca92789523593055da0996e9509?src=pr&el=desc) will **decrease** coverage by `18.94%`.\n   > The diff coverage is `93.32%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2860/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #2860       +/-   ##\n   ==========================================\n   - Coverage   87.55%   68.6%   -18.95%     \n   ==========================================\n     Files         410      54      -356     \n     Lines       63486    2899    -60587     \n   ==========================================\n   - Hits        55586    1989    -53597     \n   + Misses       7828     832     -6996     \n   - Partials       72      78        +6\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | `84.31% <0%> (-3.45%)` | :arrow_down: |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (+1.85%)` | :arrow_up: |\n   | [go/arrow/array/record.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvcmVjb3JkLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/tensor/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL251bWVyaWMuZ2VuLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.73% <100%> (+12.51%)` | :arrow_up: |\n   | [go/arrow/datatype\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbnVtZXJpYy5nZW4uZ28=) | `50% <50%> (-20%)` | :arrow_down: |\n   | [go/arrow/tensor/tensor.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL3RlbnNvci5nbw==) | `85.98% <85.98%> (\u00f8)` | |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.33% <97.33%> (\u00f8)` | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | ... and [372 more](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=footer). Last update [d61988d...85b9431](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T11:38:46.720+0000",
                    "updated": "2018-10-29T11:38:46.720+0000",
                    "started": "2018-10-29T11:38:46.719+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159955",
                    "issueId": "13194634"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194634/worklog/159957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2860: ARROW-3640: [Go] implement Tensors\nURL: https://github.com/apache/arrow/pull/2860#issuecomment-433865752\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=h1) Report\n   > Merging [#2860](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/d61988d9bc1c9ca92789523593055da0996e9509?src=pr&el=desc) will **decrease** coverage by `18.94%`.\n   > The diff coverage is `93.32%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2860/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #2860       +/-   ##\n   ==========================================\n   - Coverage   87.55%   68.6%   -18.95%     \n   ==========================================\n     Files         410      54      -356     \n     Lines       63486    2899    -60587     \n   ==========================================\n   - Hits        55586    1989    -53597     \n   + Misses       7828     832     -6996     \n   - Partials       72      78        +6\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | `84.31% <0%> (-3.45%)` | :arrow_down: |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (+1.85%)` | :arrow_up: |\n   | [go/arrow/array/record.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvcmVjb3JkLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/tensor/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL251bWVyaWMuZ2VuLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.73% <100%> (+12.51%)` | :arrow_up: |\n   | [go/arrow/datatype\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbnVtZXJpYy5nZW4uZ28=) | `50% <50%> (-20%)` | :arrow_down: |\n   | [go/arrow/tensor/tensor.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL3RlbnNvci5nbw==) | `85.98% <85.98%> (\u00f8)` | |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.33% <97.33%> (\u00f8)` | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | ... and [372 more](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=footer). Last update [d61988d...a15381b](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T11:48:17.263+0000",
                    "updated": "2018-10-29T11:48:17.263+0000",
                    "started": "2018-10-29T11:48:17.263+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159957",
                    "issueId": "13194634"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194634/worklog/159987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2860: ARROW-3640: [Go] implement Tensors\nURL: https://github.com/apache/arrow/pull/2860#issuecomment-433865752\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=h1) Report\n   > Merging [#2860](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/0d6d51d10fde8095f04e15f53db540b4331b084a?src=pr&el=desc) will **increase** coverage by `3.6%`.\n   > The diff coverage is `93.32%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2860/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree)\n   \n   ```diff\n   @@           Coverage Diff            @@\n   ##           master   #2860     +/-   ##\n   ========================================\n   + Coverage      65%   68.6%   +3.6%     \n   ========================================\n     Files          51      54      +3     \n     Lines        2492    2899    +407     \n   ========================================\n   + Hits         1620    1989    +369     \n   - Misses        802     832     +30     \n   - Partials       70      78      +8\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | `84.31% <0%> (-3.45%)` | :arrow_down: |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/record.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvcmVjb3JkLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/tensor/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL251bWVyaWMuZ2VuLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.73% <100%> (+0.29%)` | :arrow_up: |\n   | [go/arrow/datatype\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbnVtZXJpYy5nZW4uZ28=) | `50% <50%> (-20%)` | :arrow_down: |\n   | [go/arrow/tensor/tensor.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL3RlbnNvci5nbw==) | `85.98% <85.98%> (\u00f8)` | |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.33% <97.33%> (-2.67%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | ... and [15 more](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=footer). Last update [0d6d51d...c71bd85](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T13:18:28.321+0000",
                    "updated": "2018-10-29T13:18:28.321+0000",
                    "started": "2018-10-29T13:18:28.319+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159987",
                    "issueId": "13194634"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194634/worklog/160465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2860: ARROW-3640: [Go] implement Tensors\nURL: https://github.com/apache/arrow/pull/2860#issuecomment-433865752\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=h1) Report\n   > Merging [#2860](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/1a6545aa51f5f41f0233ee0a11ef87d21127c5ed?src=pr&el=desc) will **decrease** coverage by `18.95%`.\n   > The diff coverage is `93.32%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2860/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #2860       +/-   ##\n   ==========================================\n   - Coverage   87.56%   68.6%   -18.96%     \n   ==========================================\n     Files         411      54      -357     \n     Lines       63818    2899    -60919     \n   ==========================================\n   - Hits        55881    1989    -53892     \n   + Misses       7867     832     -7035     \n   - Partials       70      78        +8\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | `84.31% <0%> (-3.45%)` | :arrow_down: |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/record.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvcmVjb3JkLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/tensor/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL251bWVyaWMuZ2VuLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.73% <100%> (+0.29%)` | :arrow_up: |\n   | [go/arrow/datatype\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbnVtZXJpYy5nZW4uZ28=) | `50% <50%> (-20%)` | :arrow_down: |\n   | [go/arrow/tensor/tensor.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL3RlbnNvci5nbw==) | `85.98% <85.98%> (\u00f8)` | |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.33% <97.33%> (-2.67%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | ... and [375 more](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=footer). Last update [1a6545a...19630d3](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T08:35:11.304+0000",
                    "updated": "2018-10-30T08:35:11.304+0000",
                    "started": "2018-10-30T08:35:11.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160465",
                    "issueId": "13194634"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194634/worklog/160616",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2860: ARROW-3640: [Go] implement Tensors\nURL: https://github.com/apache/arrow/pull/2860#issuecomment-433865752\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=h1) Report\n   > Merging [#2860](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/b5fafd81f48578c92e8118700457e82224aab13d?src=pr&el=desc) will **decrease** coverage by `18.94%`.\n   > The diff coverage is `93.32%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2860/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #2860       +/-   ##\n   ==========================================\n   - Coverage   87.55%   68.6%   -18.95%     \n   ==========================================\n     Files         411      54      -357     \n     Lines       63818    2899    -60919     \n   ==========================================\n   - Hits        55874    1989    -53885     \n   + Misses       7870     832     -7038     \n   - Partials       74      78        +4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | `84.31% <0%> (-3.45%)` | :arrow_down: |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/record.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvcmVjb3JkLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/tensor/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL251bWVyaWMuZ2VuLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.73% <100%> (+0.29%)` | :arrow_up: |\n   | [go/arrow/datatype\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbnVtZXJpYy5nZW4uZ28=) | `50% <50%> (-20%)` | :arrow_down: |\n   | [go/arrow/tensor/tensor.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdGVuc29yL3RlbnNvci5nbw==) | `85.98% <85.98%> (\u00f8)` | |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.33% <97.33%> (-2.67%)` | :arrow_down: |\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | ... and [362 more](https://codecov.io/gh/apache/arrow/pull/2860/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=footer). Last update [b5fafd8...97a28c9](https://codecov.io/gh/apache/arrow/pull/2860?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T13:24:08.451+0000",
                    "updated": "2018-10-30T13:24:08.451+0000",
                    "started": "2018-10-30T13:24:08.451+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160616",
                    "issueId": "13194634"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194634/worklog/161268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stuartcarnie commented on issue #2860: ARROW-3640: [Go] implement Tensors\nURL: https://github.com/apache/arrow/pull/2860#issuecomment-434799233\n \n \n   @wesm LGTM\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T18:32:35.012+0000",
                    "updated": "2018-10-31T18:32:35.012+0000",
                    "started": "2018-10-31T18:32:35.011+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161268",
                    "issueId": "13194634"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194634/worklog/161322",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2860: ARROW-3640: [Go] implement Tensors\nURL: https://github.com/apache/arrow/pull/2860\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/go/arrow/array/data.go b/go/arrow/array/data.go\nindex f4dea17e61..58b16483bb 100644\n--- a/go/arrow/array/data.go\n+++ b/go/arrow/array/data.go\n@@ -85,9 +85,11 @@ func (d *Data) Release() {\n \t}\n }\n \n-func (d *Data) DataType() arrow.DataType { return d.dtype }\n-func (d *Data) NullN() int               { return d.nulls }\n-func (d *Data) Len() int                 { return d.length }\n+func (d *Data) DataType() arrow.DataType  { return d.dtype }\n+func (d *Data) NullN() int                { return d.nulls }\n+func (d *Data) Len() int                  { return d.length }\n+func (d *Data) Offset() int               { return d.offset }\n+func (d *Data) Buffers() []*memory.Buffer { return d.buffers }\n \n // NewSliceData returns a new slice that shares backing data with the input.\n // The returned Data slice starts at i and extends j-i elements, such as:\ndiff --git a/go/arrow/datatype_numeric.gen.go b/go/arrow/datatype_numeric.gen.go\nindex 30537be749..2ec4c4098a 100644\n--- a/go/arrow/datatype_numeric.gen.go\n+++ b/go/arrow/datatype_numeric.gen.go\n@@ -20,53 +20,63 @@ package arrow\n \n type Int8Type struct{}\n \n-func (t *Int8Type) ID() Type     { return INT8 }\n-func (t *Int8Type) Name() string { return \"int8\" }\n+func (t *Int8Type) ID() Type      { return INT8 }\n+func (t *Int8Type) Name() string  { return \"int8\" }\n+func (t *Int8Type) BitWidth() int { return 8 }\n \n type Int16Type struct{}\n \n-func (t *Int16Type) ID() Type     { return INT16 }\n-func (t *Int16Type) Name() string { return \"int16\" }\n+func (t *Int16Type) ID() Type      { return INT16 }\n+func (t *Int16Type) Name() string  { return \"int16\" }\n+func (t *Int16Type) BitWidth() int { return 16 }\n \n type Int32Type struct{}\n \n-func (t *Int32Type) ID() Type     { return INT32 }\n-func (t *Int32Type) Name() string { return \"int32\" }\n+func (t *Int32Type) ID() Type      { return INT32 }\n+func (t *Int32Type) Name() string  { return \"int32\" }\n+func (t *Int32Type) BitWidth() int { return 32 }\n \n type Int64Type struct{}\n \n-func (t *Int64Type) ID() Type     { return INT64 }\n-func (t *Int64Type) Name() string { return \"int64\" }\n+func (t *Int64Type) ID() Type      { return INT64 }\n+func (t *Int64Type) Name() string  { return \"int64\" }\n+func (t *Int64Type) BitWidth() int { return 64 }\n \n type Uint8Type struct{}\n \n-func (t *Uint8Type) ID() Type     { return UINT8 }\n-func (t *Uint8Type) Name() string { return \"uint8\" }\n+func (t *Uint8Type) ID() Type      { return UINT8 }\n+func (t *Uint8Type) Name() string  { return \"uint8\" }\n+func (t *Uint8Type) BitWidth() int { return 8 }\n \n type Uint16Type struct{}\n \n-func (t *Uint16Type) ID() Type     { return UINT16 }\n-func (t *Uint16Type) Name() string { return \"uint16\" }\n+func (t *Uint16Type) ID() Type      { return UINT16 }\n+func (t *Uint16Type) Name() string  { return \"uint16\" }\n+func (t *Uint16Type) BitWidth() int { return 16 }\n \n type Uint32Type struct{}\n \n-func (t *Uint32Type) ID() Type     { return UINT32 }\n-func (t *Uint32Type) Name() string { return \"uint32\" }\n+func (t *Uint32Type) ID() Type      { return UINT32 }\n+func (t *Uint32Type) Name() string  { return \"uint32\" }\n+func (t *Uint32Type) BitWidth() int { return 32 }\n \n type Uint64Type struct{}\n \n-func (t *Uint64Type) ID() Type     { return UINT64 }\n-func (t *Uint64Type) Name() string { return \"uint64\" }\n+func (t *Uint64Type) ID() Type      { return UINT64 }\n+func (t *Uint64Type) Name() string  { return \"uint64\" }\n+func (t *Uint64Type) BitWidth() int { return 64 }\n \n type Float32Type struct{}\n \n-func (t *Float32Type) ID() Type     { return FLOAT32 }\n-func (t *Float32Type) Name() string { return \"float32\" }\n+func (t *Float32Type) ID() Type      { return FLOAT32 }\n+func (t *Float32Type) Name() string  { return \"float32\" }\n+func (t *Float32Type) BitWidth() int { return 32 }\n \n type Float64Type struct{}\n \n-func (t *Float64Type) ID() Type     { return FLOAT64 }\n-func (t *Float64Type) Name() string { return \"float64\" }\n+func (t *Float64Type) ID() Type      { return FLOAT64 }\n+func (t *Float64Type) Name() string  { return \"float64\" }\n+func (t *Float64Type) BitWidth() int { return 64 }\n \n var (\n \tPrimitiveTypes = struct {\ndiff --git a/go/arrow/datatype_numeric.gen.go.tmpl b/go/arrow/datatype_numeric.gen.go.tmpl\nindex 582c895256..94589640b8 100644\n--- a/go/arrow/datatype_numeric.gen.go.tmpl\n+++ b/go/arrow/datatype_numeric.gen.go.tmpl\n@@ -21,6 +21,7 @@ type {{.Name}}Type struct {}\n \n func (t *{{.Name}}Type) ID() Type { return {{.Name|upper}} }\n func (t *{{.Name}}Type) Name() string { return \"{{.Name|lower}}\" }\n+func (t *{{.Name}}Type) BitWidth() int { return {{.Size}} }\n \n \n {{end}}\n@@ -35,4 +36,4 @@ var (\n                 {{.Name}}: &{{.Name}}Type{},\n {{- end}}\n         }\n-)\n\\ No newline at end of file\n+)\ndiff --git a/go/arrow/datatype_numeric.gen.go.tmpldata b/go/arrow/datatype_numeric.gen.go.tmpldata\nindex 1f40fd502c..415b51b2e1 100644\n--- a/go/arrow/datatype_numeric.gen.go.tmpldata\n+++ b/go/arrow/datatype_numeric.gen.go.tmpldata\n@@ -1,32 +1,52 @@\n [\n   {\n-    \"Name\": \"Int8\"\n+    \"Name\": \"Int8\",\n+    \"Type\": \"int8\",\n+    \"Size\": 8\n   },\n   {\n-    \"Name\": \"Int16\"\n+    \"Name\": \"Int16\",\n+    \"Type\": \"int16\",\n+    \"Size\": 16\n   },\n   {\n-    \"Name\": \"Int32\"\n+    \"Name\": \"Int32\",\n+    \"Type\": \"int32\",\n+    \"Size\": 32\n   },\n   {\n-    \"Name\": \"Int64\"\n+    \"Name\": \"Int64\",\n+    \"Type\": \"int64\",\n+    \"Size\": 64\n   },\n   {\n-    \"Name\": \"Uint8\"\n+    \"Name\": \"Uint8\",\n+    \"Type\": \"uint8\",\n+    \"Size\": 8\n   },\n   {\n-    \"Name\": \"Uint16\"\n+    \"Name\": \"Uint16\",\n+    \"Type\": \"uint16\",\n+    \"Size\": 16\n   },\n   {\n-    \"Name\": \"Uint32\"\n+    \"Name\": \"Uint32\",\n+    \"Type\": \"uint32\",\n+    \"Size\": 32\n   },\n   {\n-    \"Name\": \"Uint64\"\n+    \"Name\": \"Uint64\",\n+    \"Type\": \"uint64\",\n+    \"Size\": 64\n   },\n   {\n-    \"Name\": \"Float32\"\n+    \"Name\": \"Float32\",\n+    \"Type\": \"float32\",\n+    \"Size\": 32\n   },\n   {\n-    \"Name\": \"Float64\"\n+    \"Name\": \"Float64\",\n+    \"Type\": \"float64\",\n+    \"Size\": 64\n   }\n-]\n\\ No newline at end of file\n+]\ndiff --git a/go/arrow/doc.go b/go/arrow/doc.go\nindex 6ee0c2a430..ebd9c8ebf1 100644\n--- a/go/arrow/doc.go\n+++ b/go/arrow/doc.go\n@@ -32,7 +32,7 @@ array is valid (not null). If the array has no null entries, it is possible to o\n package arrow\n \n //go:generate go run _tools/tmpl/main.go -i -data=numeric.tmpldata type_traits_numeric.gen.go.tmpl array/numeric.gen.go.tmpl array/numericbuilder.gen.go.tmpl array/bufferbuilder_numeric.gen.go.tmpl\n-//go:generate go run _tools/tmpl/main.go -i -data=datatype_numeric.gen.go.tmpldata datatype_numeric.gen.go.tmpl\n+//go:generate go run _tools/tmpl/main.go -i -data=datatype_numeric.gen.go.tmpldata datatype_numeric.gen.go.tmpl tensor/numeric.gen.go.tmpl tensor/numeric.gen_test.go.tmpl\n \n // stringer\n //go:generate stringer -type=Type\ndiff --git a/go/arrow/example_test.go b/go/arrow/example_test.go\nindex ff77c6b9d3..936d8d83e9 100644\n--- a/go/arrow/example_test.go\n+++ b/go/arrow/example_test.go\n@@ -22,6 +22,7 @@ import (\n \t\"github.com/apache/arrow/go/arrow\"\n \t\"github.com/apache/arrow/go/arrow/array\"\n \t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/arrow/tensor\"\n )\n \n // This example demonstrates how to build an array of int64 values using a builder and Append.\n@@ -320,3 +321,89 @@ func Example_float64Slice() {\n \t// array = [1 2 3 -1 4 5]\n \t// slice = [3 -1 4]\n }\n+\n+func Example_float64Tensor2x5() {\n+\tpool := memory.NewGoAllocator()\n+\n+\tb := array.NewFloat64Builder(pool)\n+\tdefer b.Release()\n+\n+\traw := []float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tb.AppendValues(raw, nil)\n+\n+\tarr := b.NewFloat64Array()\n+\tdefer arr.Release()\n+\n+\tf64 := tensor.NewFloat64(arr.Data(), []int64{2, 5}, nil, []string{\"x\", \"y\"})\n+\tdefer f64.Release()\n+\n+\tfor _, i := range [][]int64{\n+\t\t[]int64{0, 0},\n+\t\t[]int64{0, 1},\n+\t\t[]int64{0, 2},\n+\t\t[]int64{0, 3},\n+\t\t[]int64{0, 4},\n+\t\t[]int64{1, 0},\n+\t\t[]int64{1, 1},\n+\t\t[]int64{1, 2},\n+\t\t[]int64{1, 3},\n+\t\t[]int64{1, 4},\n+\t} {\n+\t\tfmt.Printf(\"arr%v = %v\\n\", i, f64.Value(i))\n+\t}\n+\n+\t// Output:\n+\t// arr[0 0] = 1\n+\t// arr[0 1] = 2\n+\t// arr[0 2] = 3\n+\t// arr[0 3] = 4\n+\t// arr[0 4] = 5\n+\t// arr[1 0] = 6\n+\t// arr[1 1] = 7\n+\t// arr[1 2] = 8\n+\t// arr[1 3] = 9\n+\t// arr[1 4] = 10\n+}\n+\n+func Example_float64Tensor2x5ColMajor() {\n+\tpool := memory.NewGoAllocator()\n+\n+\tb := array.NewFloat64Builder(pool)\n+\tdefer b.Release()\n+\n+\traw := []float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tb.AppendValues(raw, nil)\n+\n+\tarr := b.NewFloat64Array()\n+\tdefer arr.Release()\n+\n+\tf64 := tensor.NewFloat64(arr.Data(), []int64{2, 5}, []int64{8, 16}, []string{\"x\", \"y\"})\n+\tdefer f64.Release()\n+\n+\tfor _, i := range [][]int64{\n+\t\t[]int64{0, 0},\n+\t\t[]int64{0, 1},\n+\t\t[]int64{0, 2},\n+\t\t[]int64{0, 3},\n+\t\t[]int64{0, 4},\n+\t\t[]int64{1, 0},\n+\t\t[]int64{1, 1},\n+\t\t[]int64{1, 2},\n+\t\t[]int64{1, 3},\n+\t\t[]int64{1, 4},\n+\t} {\n+\t\tfmt.Printf(\"arr%v = %v\\n\", i, f64.Value(i))\n+\t}\n+\n+\t// Output:\n+\t// arr[0 0] = 1\n+\t// arr[0 1] = 3\n+\t// arr[0 2] = 5\n+\t// arr[0 3] = 7\n+\t// arr[0 4] = 9\n+\t// arr[1 0] = 2\n+\t// arr[1 1] = 4\n+\t// arr[1 2] = 6\n+\t// arr[1 3] = 8\n+\t// arr[1 4] = 10\n+}\ndiff --git a/go/arrow/tensor/numeric.gen.go b/go/arrow/tensor/numeric.gen.go\nnew file mode 100644\nindex 0000000000..1e9c1e936f\n--- /dev/null\n+++ b/go/arrow/tensor/numeric.gen.go\n@@ -0,0 +1,277 @@\n+// Code generated by tensor/numeric.gen.go.tmpl. DO NOT EDIT.\n+\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package tensor\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+)\n+\n+// Int8 is an n-dim array of int8s.\n+type Int8 struct {\n+\ttensorBase\n+\tvalues []int8\n+}\n+\n+// NewInt8 returns a new n-dimensional array of int8s.\n+// If strides is nil, row-major strides will be inferred.\n+// If names is nil, a slice of empty strings will be created.\n+func NewInt8(data *array.Data, shape, strides []int64, names []string) *Int8 {\n+\ttsr := &Int8{tensorBase: *newTensor(arrow.PrimitiveTypes.Int8, data, shape, strides, names)}\n+\tvals := tsr.data.Buffers()[1]\n+\tif vals != nil {\n+\t\ttsr.values = arrow.Int8Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := tsr.data.Offset()\n+\t\tend := beg + tsr.data.Len()\n+\t\ttsr.values = tsr.values[beg:end]\n+\t}\n+\treturn tsr\n+}\n+\n+func (tsr *Int8) Value(i []int64) int8 { j := int(tsr.offset(i)); return tsr.values[j] }\n+func (tsr *Int8) Int8Values() []int8   { return tsr.values }\n+\n+// Int16 is an n-dim array of int16s.\n+type Int16 struct {\n+\ttensorBase\n+\tvalues []int16\n+}\n+\n+// NewInt16 returns a new n-dimensional array of int16s.\n+// If strides is nil, row-major strides will be inferred.\n+// If names is nil, a slice of empty strings will be created.\n+func NewInt16(data *array.Data, shape, strides []int64, names []string) *Int16 {\n+\ttsr := &Int16{tensorBase: *newTensor(arrow.PrimitiveTypes.Int16, data, shape, strides, names)}\n+\tvals := tsr.data.Buffers()[1]\n+\tif vals != nil {\n+\t\ttsr.values = arrow.Int16Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := tsr.data.Offset()\n+\t\tend := beg + tsr.data.Len()\n+\t\ttsr.values = tsr.values[beg:end]\n+\t}\n+\treturn tsr\n+}\n+\n+func (tsr *Int16) Value(i []int64) int16 { j := int(tsr.offset(i)); return tsr.values[j] }\n+func (tsr *Int16) Int16Values() []int16  { return tsr.values }\n+\n+// Int32 is an n-dim array of int32s.\n+type Int32 struct {\n+\ttensorBase\n+\tvalues []int32\n+}\n+\n+// NewInt32 returns a new n-dimensional array of int32s.\n+// If strides is nil, row-major strides will be inferred.\n+// If names is nil, a slice of empty strings will be created.\n+func NewInt32(data *array.Data, shape, strides []int64, names []string) *Int32 {\n+\ttsr := &Int32{tensorBase: *newTensor(arrow.PrimitiveTypes.Int32, data, shape, strides, names)}\n+\tvals := tsr.data.Buffers()[1]\n+\tif vals != nil {\n+\t\ttsr.values = arrow.Int32Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := tsr.data.Offset()\n+\t\tend := beg + tsr.data.Len()\n+\t\ttsr.values = tsr.values[beg:end]\n+\t}\n+\treturn tsr\n+}\n+\n+func (tsr *Int32) Value(i []int64) int32 { j := int(tsr.offset(i)); return tsr.values[j] }\n+func (tsr *Int32) Int32Values() []int32  { return tsr.values }\n+\n+// Int64 is an n-dim array of int64s.\n+type Int64 struct {\n+\ttensorBase\n+\tvalues []int64\n+}\n+\n+// NewInt64 returns a new n-dimensional array of int64s.\n+// If strides is nil, row-major strides will be inferred.\n+// If names is nil, a slice of empty strings will be created.\n+func NewInt64(data *array.Data, shape, strides []int64, names []string) *Int64 {\n+\ttsr := &Int64{tensorBase: *newTensor(arrow.PrimitiveTypes.Int64, data, shape, strides, names)}\n+\tvals := tsr.data.Buffers()[1]\n+\tif vals != nil {\n+\t\ttsr.values = arrow.Int64Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := tsr.data.Offset()\n+\t\tend := beg + tsr.data.Len()\n+\t\ttsr.values = tsr.values[beg:end]\n+\t}\n+\treturn tsr\n+}\n+\n+func (tsr *Int64) Value(i []int64) int64 { j := int(tsr.offset(i)); return tsr.values[j] }\n+func (tsr *Int64) Int64Values() []int64  { return tsr.values }\n+\n+// Uint8 is an n-dim array of uint8s.\n+type Uint8 struct {\n+\ttensorBase\n+\tvalues []uint8\n+}\n+\n+// NewUint8 returns a new n-dimensional array of uint8s.\n+// If strides is nil, row-major strides will be inferred.\n+// If names is nil, a slice of empty strings will be created.\n+func NewUint8(data *array.Data, shape, strides []int64, names []string) *Uint8 {\n+\ttsr := &Uint8{tensorBase: *newTensor(arrow.PrimitiveTypes.Uint8, data, shape, strides, names)}\n+\tvals := tsr.data.Buffers()[1]\n+\tif vals != nil {\n+\t\ttsr.values = arrow.Uint8Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := tsr.data.Offset()\n+\t\tend := beg + tsr.data.Len()\n+\t\ttsr.values = tsr.values[beg:end]\n+\t}\n+\treturn tsr\n+}\n+\n+func (tsr *Uint8) Value(i []int64) uint8 { j := int(tsr.offset(i)); return tsr.values[j] }\n+func (tsr *Uint8) Uint8Values() []uint8  { return tsr.values }\n+\n+// Uint16 is an n-dim array of uint16s.\n+type Uint16 struct {\n+\ttensorBase\n+\tvalues []uint16\n+}\n+\n+// NewUint16 returns a new n-dimensional array of uint16s.\n+// If strides is nil, row-major strides will be inferred.\n+// If names is nil, a slice of empty strings will be created.\n+func NewUint16(data *array.Data, shape, strides []int64, names []string) *Uint16 {\n+\ttsr := &Uint16{tensorBase: *newTensor(arrow.PrimitiveTypes.Uint16, data, shape, strides, names)}\n+\tvals := tsr.data.Buffers()[1]\n+\tif vals != nil {\n+\t\ttsr.values = arrow.Uint16Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := tsr.data.Offset()\n+\t\tend := beg + tsr.data.Len()\n+\t\ttsr.values = tsr.values[beg:end]\n+\t}\n+\treturn tsr\n+}\n+\n+func (tsr *Uint16) Value(i []int64) uint16 { j := int(tsr.offset(i)); return tsr.values[j] }\n+func (tsr *Uint16) Uint16Values() []uint16 { return tsr.values }\n+\n+// Uint32 is an n-dim array of uint32s.\n+type Uint32 struct {\n+\ttensorBase\n+\tvalues []uint32\n+}\n+\n+// NewUint32 returns a new n-dimensional array of uint32s.\n+// If strides is nil, row-major strides will be inferred.\n+// If names is nil, a slice of empty strings will be created.\n+func NewUint32(data *array.Data, shape, strides []int64, names []string) *Uint32 {\n+\ttsr := &Uint32{tensorBase: *newTensor(arrow.PrimitiveTypes.Uint32, data, shape, strides, names)}\n+\tvals := tsr.data.Buffers()[1]\n+\tif vals != nil {\n+\t\ttsr.values = arrow.Uint32Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := tsr.data.Offset()\n+\t\tend := beg + tsr.data.Len()\n+\t\ttsr.values = tsr.values[beg:end]\n+\t}\n+\treturn tsr\n+}\n+\n+func (tsr *Uint32) Value(i []int64) uint32 { j := int(tsr.offset(i)); return tsr.values[j] }\n+func (tsr *Uint32) Uint32Values() []uint32 { return tsr.values }\n+\n+// Uint64 is an n-dim array of uint64s.\n+type Uint64 struct {\n+\ttensorBase\n+\tvalues []uint64\n+}\n+\n+// NewUint64 returns a new n-dimensional array of uint64s.\n+// If strides is nil, row-major strides will be inferred.\n+// If names is nil, a slice of empty strings will be created.\n+func NewUint64(data *array.Data, shape, strides []int64, names []string) *Uint64 {\n+\ttsr := &Uint64{tensorBase: *newTensor(arrow.PrimitiveTypes.Uint64, data, shape, strides, names)}\n+\tvals := tsr.data.Buffers()[1]\n+\tif vals != nil {\n+\t\ttsr.values = arrow.Uint64Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := tsr.data.Offset()\n+\t\tend := beg + tsr.data.Len()\n+\t\ttsr.values = tsr.values[beg:end]\n+\t}\n+\treturn tsr\n+}\n+\n+func (tsr *Uint64) Value(i []int64) uint64 { j := int(tsr.offset(i)); return tsr.values[j] }\n+func (tsr *Uint64) Uint64Values() []uint64 { return tsr.values }\n+\n+// Float32 is an n-dim array of float32s.\n+type Float32 struct {\n+\ttensorBase\n+\tvalues []float32\n+}\n+\n+// NewFloat32 returns a new n-dimensional array of float32s.\n+// If strides is nil, row-major strides will be inferred.\n+// If names is nil, a slice of empty strings will be created.\n+func NewFloat32(data *array.Data, shape, strides []int64, names []string) *Float32 {\n+\ttsr := &Float32{tensorBase: *newTensor(arrow.PrimitiveTypes.Float32, data, shape, strides, names)}\n+\tvals := tsr.data.Buffers()[1]\n+\tif vals != nil {\n+\t\ttsr.values = arrow.Float32Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := tsr.data.Offset()\n+\t\tend := beg + tsr.data.Len()\n+\t\ttsr.values = tsr.values[beg:end]\n+\t}\n+\treturn tsr\n+}\n+\n+func (tsr *Float32) Value(i []int64) float32  { j := int(tsr.offset(i)); return tsr.values[j] }\n+func (tsr *Float32) Float32Values() []float32 { return tsr.values }\n+\n+// Float64 is an n-dim array of float64s.\n+type Float64 struct {\n+\ttensorBase\n+\tvalues []float64\n+}\n+\n+// NewFloat64 returns a new n-dimensional array of float64s.\n+// If strides is nil, row-major strides will be inferred.\n+// If names is nil, a slice of empty strings will be created.\n+func NewFloat64(data *array.Data, shape, strides []int64, names []string) *Float64 {\n+\ttsr := &Float64{tensorBase: *newTensor(arrow.PrimitiveTypes.Float64, data, shape, strides, names)}\n+\tvals := tsr.data.Buffers()[1]\n+\tif vals != nil {\n+\t\ttsr.values = arrow.Float64Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := tsr.data.Offset()\n+\t\tend := beg + tsr.data.Len()\n+\t\ttsr.values = tsr.values[beg:end]\n+\t}\n+\treturn tsr\n+}\n+\n+func (tsr *Float64) Value(i []int64) float64  { j := int(tsr.offset(i)); return tsr.values[j] }\n+func (tsr *Float64) Float64Values() []float64 { return tsr.values }\n+\n+var (\n+\t_ Interface = (*Int8)(nil)\n+\t_ Interface = (*Int16)(nil)\n+\t_ Interface = (*Int32)(nil)\n+\t_ Interface = (*Int64)(nil)\n+\t_ Interface = (*Uint8)(nil)\n+\t_ Interface = (*Uint16)(nil)\n+\t_ Interface = (*Uint32)(nil)\n+\t_ Interface = (*Uint64)(nil)\n+\t_ Interface = (*Float32)(nil)\n+\t_ Interface = (*Float64)(nil)\n+)\ndiff --git a/go/arrow/tensor/numeric.gen.go.tmpl b/go/arrow/tensor/numeric.gen.go.tmpl\nnew file mode 100644\nindex 0000000000..282cbf2130\n--- /dev/null\n+++ b/go/arrow/tensor/numeric.gen.go.tmpl\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package tensor\n+\n+import (\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+)\n+\n+{{range .In}}\n+\n+// {{.Name}} is an n-dim array of {{.Type}}s.\n+type {{.Name}} struct {\n+\ttensorBase\n+\tvalues []{{.Type}}\n+}\n+\n+// New{{.Name}} returns a new n-dimensional array of {{.Type}}s.\n+// If strides is nil, row-major strides will be inferred.\n+// If names is nil, a slice of empty strings will be created.\n+func New{{.Name}}(data *array.Data, shape, strides []int64, names []string) *{{.Name}} {\n+\ttsr := &{{.Name}}{tensorBase:*newTensor(arrow.PrimitiveTypes.{{.Name}}, data, shape, strides, names)}\n+\tvals := tsr.data.Buffers()[1]\n+\tif vals != nil {\n+\t\ttsr.values = arrow.{{.Name}}Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := tsr.data.Offset()\n+\t\tend := beg + tsr.data.Len()\n+\t\ttsr.values = tsr.values[beg:end]\n+\t}\n+\treturn tsr\n+}\n+\n+func (tsr *{{.Name}}) Value(i []int64)  {{or .Type}} { j := int(tsr.offset(i)); return tsr.values[j] }\n+func (tsr *{{.Name}}) {{.Name}}Values() []{{or .Type}} { return tsr.values }\n+{{end}}\n+\n+var (\n+{{range .In}}\n+\t_ Interface = (*{{.Name}})(nil)\n+{{- end}}\n+)\ndiff --git a/go/arrow/tensor/numeric.gen_test.go b/go/arrow/tensor/numeric.gen_test.go\nnew file mode 100644\nindex 0000000000..066f7ca51a\n--- /dev/null\n+++ b/go/arrow/tensor/numeric.gen_test.go\n@@ -0,0 +1,980 @@\n+// Code generated by tensor/numeric.gen_test.go.tmpl. DO NOT EDIT.\n+\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package tensor_test\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/arrow/tensor\"\n+)\n+\n+func TestTensorInt8(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tbld := array.NewInt8Builder(mem)\n+\tdefer bld.Release()\n+\n+\traw := []int8{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tbld.AppendValues(raw, nil)\n+\n+\tarr := bld.NewInt8Array()\n+\tdefer arr.Release()\n+\n+\tvar (\n+\t\tshape = []int64{2, 5}\n+\t\tnames = []string{\"x\", \"y\"}\n+\t\tbw    = int64(arrow.PrimitiveTypes.Int8.(arrow.FixedWidthDataType).BitWidth()) / 8\n+\t)\n+\n+\ttsr := tensor.New(arr.Data(), shape, nil, names).(*tensor.Int8)\n+\tdefer tsr.Release()\n+\n+\ttsr.Retain()\n+\ttsr.Release()\n+\n+\tif got, want := tsr.Len(), 10; got != want {\n+\t\tt.Fatalf(\"invalid length: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Shape(), shape; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid shape: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Strides(), []int64{5 * bw, 1 * bw}; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid strides: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.NumDims(), 2; got != want {\n+\t\tt.Fatalf(\"invalid dims: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tfor i, name := range names {\n+\t\tif got, want := tsr.DimName(i), name; got != want {\n+\t\t\tt.Fatalf(\"invalid dim-name[%d]: got=%q, want=%q\", i, got, want)\n+\t\t}\n+\t}\n+\n+\tif got, want := tsr.DataType(), arr.DataType(); got != want {\n+\t\tt.Fatalf(\"invalid data-type: got=%q, want=%q\", got.Name(), want.Name())\n+\t}\n+\n+\tif got, want := tsr.Data(), arr.Data(); got != want {\n+\t\tt.Fatalf(\"invalid data: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif tsr.IsMutable() {\n+\t\tt.Fatalf(\"should not be mutable\")\n+\t}\n+\n+\tif !tsr.IsContiguous() {\n+\t\tt.Fatalf(\"should be contiguous\")\n+\t}\n+\n+\tif !tsr.IsRowMajor() || tsr.IsColMajor() {\n+\t\tt.Fatalf(\"should be row-major\")\n+\t}\n+\n+\tif got, want := tsr.Int8Values(), raw; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid backing array: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\ti []int64\n+\t\tv int8\n+\t}{\n+\t\t{i: []int64{0, 0}, v: 1},\n+\t\t{i: []int64{0, 1}, v: 2},\n+\t\t{i: []int64{0, 2}, v: 3},\n+\t\t{i: []int64{0, 3}, v: 4},\n+\t\t{i: []int64{0, 4}, v: 5},\n+\t\t{i: []int64{1, 0}, v: 6},\n+\t\t{i: []int64{1, 1}, v: 7},\n+\t\t{i: []int64{1, 2}, v: 8},\n+\t\t{i: []int64{1, 3}, v: 9},\n+\t\t{i: []int64{1, 4}, v: 10},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"%v\", tc.i), func(t *testing.T) {\n+\t\t\tgot := tsr.Value(tc.i)\n+\t\t\tif got != tc.v {\n+\t\t\t\tt.Fatalf(\"arr[%v]: got=%v, want=%v\", tc.i, got, tc.v)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestTensorInt16(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tbld := array.NewInt16Builder(mem)\n+\tdefer bld.Release()\n+\n+\traw := []int16{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tbld.AppendValues(raw, nil)\n+\n+\tarr := bld.NewInt16Array()\n+\tdefer arr.Release()\n+\n+\tvar (\n+\t\tshape = []int64{2, 5}\n+\t\tnames = []string{\"x\", \"y\"}\n+\t\tbw    = int64(arrow.PrimitiveTypes.Int16.(arrow.FixedWidthDataType).BitWidth()) / 8\n+\t)\n+\n+\ttsr := tensor.New(arr.Data(), shape, nil, names).(*tensor.Int16)\n+\tdefer tsr.Release()\n+\n+\ttsr.Retain()\n+\ttsr.Release()\n+\n+\tif got, want := tsr.Len(), 10; got != want {\n+\t\tt.Fatalf(\"invalid length: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Shape(), shape; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid shape: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Strides(), []int64{5 * bw, 1 * bw}; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid strides: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.NumDims(), 2; got != want {\n+\t\tt.Fatalf(\"invalid dims: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tfor i, name := range names {\n+\t\tif got, want := tsr.DimName(i), name; got != want {\n+\t\t\tt.Fatalf(\"invalid dim-name[%d]: got=%q, want=%q\", i, got, want)\n+\t\t}\n+\t}\n+\n+\tif got, want := tsr.DataType(), arr.DataType(); got != want {\n+\t\tt.Fatalf(\"invalid data-type: got=%q, want=%q\", got.Name(), want.Name())\n+\t}\n+\n+\tif got, want := tsr.Data(), arr.Data(); got != want {\n+\t\tt.Fatalf(\"invalid data: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif tsr.IsMutable() {\n+\t\tt.Fatalf(\"should not be mutable\")\n+\t}\n+\n+\tif !tsr.IsContiguous() {\n+\t\tt.Fatalf(\"should be contiguous\")\n+\t}\n+\n+\tif !tsr.IsRowMajor() || tsr.IsColMajor() {\n+\t\tt.Fatalf(\"should be row-major\")\n+\t}\n+\n+\tif got, want := tsr.Int16Values(), raw; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid backing array: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\ti []int64\n+\t\tv int16\n+\t}{\n+\t\t{i: []int64{0, 0}, v: 1},\n+\t\t{i: []int64{0, 1}, v: 2},\n+\t\t{i: []int64{0, 2}, v: 3},\n+\t\t{i: []int64{0, 3}, v: 4},\n+\t\t{i: []int64{0, 4}, v: 5},\n+\t\t{i: []int64{1, 0}, v: 6},\n+\t\t{i: []int64{1, 1}, v: 7},\n+\t\t{i: []int64{1, 2}, v: 8},\n+\t\t{i: []int64{1, 3}, v: 9},\n+\t\t{i: []int64{1, 4}, v: 10},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"%v\", tc.i), func(t *testing.T) {\n+\t\t\tgot := tsr.Value(tc.i)\n+\t\t\tif got != tc.v {\n+\t\t\t\tt.Fatalf(\"arr[%v]: got=%v, want=%v\", tc.i, got, tc.v)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestTensorInt32(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tbld := array.NewInt32Builder(mem)\n+\tdefer bld.Release()\n+\n+\traw := []int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tbld.AppendValues(raw, nil)\n+\n+\tarr := bld.NewInt32Array()\n+\tdefer arr.Release()\n+\n+\tvar (\n+\t\tshape = []int64{2, 5}\n+\t\tnames = []string{\"x\", \"y\"}\n+\t\tbw    = int64(arrow.PrimitiveTypes.Int32.(arrow.FixedWidthDataType).BitWidth()) / 8\n+\t)\n+\n+\ttsr := tensor.New(arr.Data(), shape, nil, names).(*tensor.Int32)\n+\tdefer tsr.Release()\n+\n+\ttsr.Retain()\n+\ttsr.Release()\n+\n+\tif got, want := tsr.Len(), 10; got != want {\n+\t\tt.Fatalf(\"invalid length: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Shape(), shape; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid shape: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Strides(), []int64{5 * bw, 1 * bw}; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid strides: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.NumDims(), 2; got != want {\n+\t\tt.Fatalf(\"invalid dims: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tfor i, name := range names {\n+\t\tif got, want := tsr.DimName(i), name; got != want {\n+\t\t\tt.Fatalf(\"invalid dim-name[%d]: got=%q, want=%q\", i, got, want)\n+\t\t}\n+\t}\n+\n+\tif got, want := tsr.DataType(), arr.DataType(); got != want {\n+\t\tt.Fatalf(\"invalid data-type: got=%q, want=%q\", got.Name(), want.Name())\n+\t}\n+\n+\tif got, want := tsr.Data(), arr.Data(); got != want {\n+\t\tt.Fatalf(\"invalid data: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif tsr.IsMutable() {\n+\t\tt.Fatalf(\"should not be mutable\")\n+\t}\n+\n+\tif !tsr.IsContiguous() {\n+\t\tt.Fatalf(\"should be contiguous\")\n+\t}\n+\n+\tif !tsr.IsRowMajor() || tsr.IsColMajor() {\n+\t\tt.Fatalf(\"should be row-major\")\n+\t}\n+\n+\tif got, want := tsr.Int32Values(), raw; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid backing array: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\ti []int64\n+\t\tv int32\n+\t}{\n+\t\t{i: []int64{0, 0}, v: 1},\n+\t\t{i: []int64{0, 1}, v: 2},\n+\t\t{i: []int64{0, 2}, v: 3},\n+\t\t{i: []int64{0, 3}, v: 4},\n+\t\t{i: []int64{0, 4}, v: 5},\n+\t\t{i: []int64{1, 0}, v: 6},\n+\t\t{i: []int64{1, 1}, v: 7},\n+\t\t{i: []int64{1, 2}, v: 8},\n+\t\t{i: []int64{1, 3}, v: 9},\n+\t\t{i: []int64{1, 4}, v: 10},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"%v\", tc.i), func(t *testing.T) {\n+\t\t\tgot := tsr.Value(tc.i)\n+\t\t\tif got != tc.v {\n+\t\t\t\tt.Fatalf(\"arr[%v]: got=%v, want=%v\", tc.i, got, tc.v)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestTensorInt64(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tbld := array.NewInt64Builder(mem)\n+\tdefer bld.Release()\n+\n+\traw := []int64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tbld.AppendValues(raw, nil)\n+\n+\tarr := bld.NewInt64Array()\n+\tdefer arr.Release()\n+\n+\tvar (\n+\t\tshape = []int64{2, 5}\n+\t\tnames = []string{\"x\", \"y\"}\n+\t\tbw    = int64(arrow.PrimitiveTypes.Int64.(arrow.FixedWidthDataType).BitWidth()) / 8\n+\t)\n+\n+\ttsr := tensor.New(arr.Data(), shape, nil, names).(*tensor.Int64)\n+\tdefer tsr.Release()\n+\n+\ttsr.Retain()\n+\ttsr.Release()\n+\n+\tif got, want := tsr.Len(), 10; got != want {\n+\t\tt.Fatalf(\"invalid length: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Shape(), shape; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid shape: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Strides(), []int64{5 * bw, 1 * bw}; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid strides: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.NumDims(), 2; got != want {\n+\t\tt.Fatalf(\"invalid dims: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tfor i, name := range names {\n+\t\tif got, want := tsr.DimName(i), name; got != want {\n+\t\t\tt.Fatalf(\"invalid dim-name[%d]: got=%q, want=%q\", i, got, want)\n+\t\t}\n+\t}\n+\n+\tif got, want := tsr.DataType(), arr.DataType(); got != want {\n+\t\tt.Fatalf(\"invalid data-type: got=%q, want=%q\", got.Name(), want.Name())\n+\t}\n+\n+\tif got, want := tsr.Data(), arr.Data(); got != want {\n+\t\tt.Fatalf(\"invalid data: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif tsr.IsMutable() {\n+\t\tt.Fatalf(\"should not be mutable\")\n+\t}\n+\n+\tif !tsr.IsContiguous() {\n+\t\tt.Fatalf(\"should be contiguous\")\n+\t}\n+\n+\tif !tsr.IsRowMajor() || tsr.IsColMajor() {\n+\t\tt.Fatalf(\"should be row-major\")\n+\t}\n+\n+\tif got, want := tsr.Int64Values(), raw; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid backing array: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\ti []int64\n+\t\tv int64\n+\t}{\n+\t\t{i: []int64{0, 0}, v: 1},\n+\t\t{i: []int64{0, 1}, v: 2},\n+\t\t{i: []int64{0, 2}, v: 3},\n+\t\t{i: []int64{0, 3}, v: 4},\n+\t\t{i: []int64{0, 4}, v: 5},\n+\t\t{i: []int64{1, 0}, v: 6},\n+\t\t{i: []int64{1, 1}, v: 7},\n+\t\t{i: []int64{1, 2}, v: 8},\n+\t\t{i: []int64{1, 3}, v: 9},\n+\t\t{i: []int64{1, 4}, v: 10},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"%v\", tc.i), func(t *testing.T) {\n+\t\t\tgot := tsr.Value(tc.i)\n+\t\t\tif got != tc.v {\n+\t\t\t\tt.Fatalf(\"arr[%v]: got=%v, want=%v\", tc.i, got, tc.v)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestTensorUint8(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tbld := array.NewUint8Builder(mem)\n+\tdefer bld.Release()\n+\n+\traw := []uint8{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tbld.AppendValues(raw, nil)\n+\n+\tarr := bld.NewUint8Array()\n+\tdefer arr.Release()\n+\n+\tvar (\n+\t\tshape = []int64{2, 5}\n+\t\tnames = []string{\"x\", \"y\"}\n+\t\tbw    = int64(arrow.PrimitiveTypes.Uint8.(arrow.FixedWidthDataType).BitWidth()) / 8\n+\t)\n+\n+\ttsr := tensor.New(arr.Data(), shape, nil, names).(*tensor.Uint8)\n+\tdefer tsr.Release()\n+\n+\ttsr.Retain()\n+\ttsr.Release()\n+\n+\tif got, want := tsr.Len(), 10; got != want {\n+\t\tt.Fatalf(\"invalid length: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Shape(), shape; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid shape: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Strides(), []int64{5 * bw, 1 * bw}; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid strides: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.NumDims(), 2; got != want {\n+\t\tt.Fatalf(\"invalid dims: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tfor i, name := range names {\n+\t\tif got, want := tsr.DimName(i), name; got != want {\n+\t\t\tt.Fatalf(\"invalid dim-name[%d]: got=%q, want=%q\", i, got, want)\n+\t\t}\n+\t}\n+\n+\tif got, want := tsr.DataType(), arr.DataType(); got != want {\n+\t\tt.Fatalf(\"invalid data-type: got=%q, want=%q\", got.Name(), want.Name())\n+\t}\n+\n+\tif got, want := tsr.Data(), arr.Data(); got != want {\n+\t\tt.Fatalf(\"invalid data: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif tsr.IsMutable() {\n+\t\tt.Fatalf(\"should not be mutable\")\n+\t}\n+\n+\tif !tsr.IsContiguous() {\n+\t\tt.Fatalf(\"should be contiguous\")\n+\t}\n+\n+\tif !tsr.IsRowMajor() || tsr.IsColMajor() {\n+\t\tt.Fatalf(\"should be row-major\")\n+\t}\n+\n+\tif got, want := tsr.Uint8Values(), raw; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid backing array: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\ti []int64\n+\t\tv uint8\n+\t}{\n+\t\t{i: []int64{0, 0}, v: 1},\n+\t\t{i: []int64{0, 1}, v: 2},\n+\t\t{i: []int64{0, 2}, v: 3},\n+\t\t{i: []int64{0, 3}, v: 4},\n+\t\t{i: []int64{0, 4}, v: 5},\n+\t\t{i: []int64{1, 0}, v: 6},\n+\t\t{i: []int64{1, 1}, v: 7},\n+\t\t{i: []int64{1, 2}, v: 8},\n+\t\t{i: []int64{1, 3}, v: 9},\n+\t\t{i: []int64{1, 4}, v: 10},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"%v\", tc.i), func(t *testing.T) {\n+\t\t\tgot := tsr.Value(tc.i)\n+\t\t\tif got != tc.v {\n+\t\t\t\tt.Fatalf(\"arr[%v]: got=%v, want=%v\", tc.i, got, tc.v)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestTensorUint16(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tbld := array.NewUint16Builder(mem)\n+\tdefer bld.Release()\n+\n+\traw := []uint16{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tbld.AppendValues(raw, nil)\n+\n+\tarr := bld.NewUint16Array()\n+\tdefer arr.Release()\n+\n+\tvar (\n+\t\tshape = []int64{2, 5}\n+\t\tnames = []string{\"x\", \"y\"}\n+\t\tbw    = int64(arrow.PrimitiveTypes.Uint16.(arrow.FixedWidthDataType).BitWidth()) / 8\n+\t)\n+\n+\ttsr := tensor.New(arr.Data(), shape, nil, names).(*tensor.Uint16)\n+\tdefer tsr.Release()\n+\n+\ttsr.Retain()\n+\ttsr.Release()\n+\n+\tif got, want := tsr.Len(), 10; got != want {\n+\t\tt.Fatalf(\"invalid length: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Shape(), shape; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid shape: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Strides(), []int64{5 * bw, 1 * bw}; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid strides: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.NumDims(), 2; got != want {\n+\t\tt.Fatalf(\"invalid dims: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tfor i, name := range names {\n+\t\tif got, want := tsr.DimName(i), name; got != want {\n+\t\t\tt.Fatalf(\"invalid dim-name[%d]: got=%q, want=%q\", i, got, want)\n+\t\t}\n+\t}\n+\n+\tif got, want := tsr.DataType(), arr.DataType(); got != want {\n+\t\tt.Fatalf(\"invalid data-type: got=%q, want=%q\", got.Name(), want.Name())\n+\t}\n+\n+\tif got, want := tsr.Data(), arr.Data(); got != want {\n+\t\tt.Fatalf(\"invalid data: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif tsr.IsMutable() {\n+\t\tt.Fatalf(\"should not be mutable\")\n+\t}\n+\n+\tif !tsr.IsContiguous() {\n+\t\tt.Fatalf(\"should be contiguous\")\n+\t}\n+\n+\tif !tsr.IsRowMajor() || tsr.IsColMajor() {\n+\t\tt.Fatalf(\"should be row-major\")\n+\t}\n+\n+\tif got, want := tsr.Uint16Values(), raw; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid backing array: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\ti []int64\n+\t\tv uint16\n+\t}{\n+\t\t{i: []int64{0, 0}, v: 1},\n+\t\t{i: []int64{0, 1}, v: 2},\n+\t\t{i: []int64{0, 2}, v: 3},\n+\t\t{i: []int64{0, 3}, v: 4},\n+\t\t{i: []int64{0, 4}, v: 5},\n+\t\t{i: []int64{1, 0}, v: 6},\n+\t\t{i: []int64{1, 1}, v: 7},\n+\t\t{i: []int64{1, 2}, v: 8},\n+\t\t{i: []int64{1, 3}, v: 9},\n+\t\t{i: []int64{1, 4}, v: 10},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"%v\", tc.i), func(t *testing.T) {\n+\t\t\tgot := tsr.Value(tc.i)\n+\t\t\tif got != tc.v {\n+\t\t\t\tt.Fatalf(\"arr[%v]: got=%v, want=%v\", tc.i, got, tc.v)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestTensorUint32(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tbld := array.NewUint32Builder(mem)\n+\tdefer bld.Release()\n+\n+\traw := []uint32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tbld.AppendValues(raw, nil)\n+\n+\tarr := bld.NewUint32Array()\n+\tdefer arr.Release()\n+\n+\tvar (\n+\t\tshape = []int64{2, 5}\n+\t\tnames = []string{\"x\", \"y\"}\n+\t\tbw    = int64(arrow.PrimitiveTypes.Uint32.(arrow.FixedWidthDataType).BitWidth()) / 8\n+\t)\n+\n+\ttsr := tensor.New(arr.Data(), shape, nil, names).(*tensor.Uint32)\n+\tdefer tsr.Release()\n+\n+\ttsr.Retain()\n+\ttsr.Release()\n+\n+\tif got, want := tsr.Len(), 10; got != want {\n+\t\tt.Fatalf(\"invalid length: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Shape(), shape; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid shape: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Strides(), []int64{5 * bw, 1 * bw}; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid strides: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.NumDims(), 2; got != want {\n+\t\tt.Fatalf(\"invalid dims: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tfor i, name := range names {\n+\t\tif got, want := tsr.DimName(i), name; got != want {\n+\t\t\tt.Fatalf(\"invalid dim-name[%d]: got=%q, want=%q\", i, got, want)\n+\t\t}\n+\t}\n+\n+\tif got, want := tsr.DataType(), arr.DataType(); got != want {\n+\t\tt.Fatalf(\"invalid data-type: got=%q, want=%q\", got.Name(), want.Name())\n+\t}\n+\n+\tif got, want := tsr.Data(), arr.Data(); got != want {\n+\t\tt.Fatalf(\"invalid data: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif tsr.IsMutable() {\n+\t\tt.Fatalf(\"should not be mutable\")\n+\t}\n+\n+\tif !tsr.IsContiguous() {\n+\t\tt.Fatalf(\"should be contiguous\")\n+\t}\n+\n+\tif !tsr.IsRowMajor() || tsr.IsColMajor() {\n+\t\tt.Fatalf(\"should be row-major\")\n+\t}\n+\n+\tif got, want := tsr.Uint32Values(), raw; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid backing array: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\ti []int64\n+\t\tv uint32\n+\t}{\n+\t\t{i: []int64{0, 0}, v: 1},\n+\t\t{i: []int64{0, 1}, v: 2},\n+\t\t{i: []int64{0, 2}, v: 3},\n+\t\t{i: []int64{0, 3}, v: 4},\n+\t\t{i: []int64{0, 4}, v: 5},\n+\t\t{i: []int64{1, 0}, v: 6},\n+\t\t{i: []int64{1, 1}, v: 7},\n+\t\t{i: []int64{1, 2}, v: 8},\n+\t\t{i: []int64{1, 3}, v: 9},\n+\t\t{i: []int64{1, 4}, v: 10},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"%v\", tc.i), func(t *testing.T) {\n+\t\t\tgot := tsr.Value(tc.i)\n+\t\t\tif got != tc.v {\n+\t\t\t\tt.Fatalf(\"arr[%v]: got=%v, want=%v\", tc.i, got, tc.v)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestTensorUint64(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tbld := array.NewUint64Builder(mem)\n+\tdefer bld.Release()\n+\n+\traw := []uint64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tbld.AppendValues(raw, nil)\n+\n+\tarr := bld.NewUint64Array()\n+\tdefer arr.Release()\n+\n+\tvar (\n+\t\tshape = []int64{2, 5}\n+\t\tnames = []string{\"x\", \"y\"}\n+\t\tbw    = int64(arrow.PrimitiveTypes.Uint64.(arrow.FixedWidthDataType).BitWidth()) / 8\n+\t)\n+\n+\ttsr := tensor.New(arr.Data(), shape, nil, names).(*tensor.Uint64)\n+\tdefer tsr.Release()\n+\n+\ttsr.Retain()\n+\ttsr.Release()\n+\n+\tif got, want := tsr.Len(), 10; got != want {\n+\t\tt.Fatalf(\"invalid length: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Shape(), shape; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid shape: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Strides(), []int64{5 * bw, 1 * bw}; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid strides: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.NumDims(), 2; got != want {\n+\t\tt.Fatalf(\"invalid dims: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tfor i, name := range names {\n+\t\tif got, want := tsr.DimName(i), name; got != want {\n+\t\t\tt.Fatalf(\"invalid dim-name[%d]: got=%q, want=%q\", i, got, want)\n+\t\t}\n+\t}\n+\n+\tif got, want := tsr.DataType(), arr.DataType(); got != want {\n+\t\tt.Fatalf(\"invalid data-type: got=%q, want=%q\", got.Name(), want.Name())\n+\t}\n+\n+\tif got, want := tsr.Data(), arr.Data(); got != want {\n+\t\tt.Fatalf(\"invalid data: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif tsr.IsMutable() {\n+\t\tt.Fatalf(\"should not be mutable\")\n+\t}\n+\n+\tif !tsr.IsContiguous() {\n+\t\tt.Fatalf(\"should be contiguous\")\n+\t}\n+\n+\tif !tsr.IsRowMajor() || tsr.IsColMajor() {\n+\t\tt.Fatalf(\"should be row-major\")\n+\t}\n+\n+\tif got, want := tsr.Uint64Values(), raw; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid backing array: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\ti []int64\n+\t\tv uint64\n+\t}{\n+\t\t{i: []int64{0, 0}, v: 1},\n+\t\t{i: []int64{0, 1}, v: 2},\n+\t\t{i: []int64{0, 2}, v: 3},\n+\t\t{i: []int64{0, 3}, v: 4},\n+\t\t{i: []int64{0, 4}, v: 5},\n+\t\t{i: []int64{1, 0}, v: 6},\n+\t\t{i: []int64{1, 1}, v: 7},\n+\t\t{i: []int64{1, 2}, v: 8},\n+\t\t{i: []int64{1, 3}, v: 9},\n+\t\t{i: []int64{1, 4}, v: 10},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"%v\", tc.i), func(t *testing.T) {\n+\t\t\tgot := tsr.Value(tc.i)\n+\t\t\tif got != tc.v {\n+\t\t\t\tt.Fatalf(\"arr[%v]: got=%v, want=%v\", tc.i, got, tc.v)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestTensorFloat32(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tbld := array.NewFloat32Builder(mem)\n+\tdefer bld.Release()\n+\n+\traw := []float32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tbld.AppendValues(raw, nil)\n+\n+\tarr := bld.NewFloat32Array()\n+\tdefer arr.Release()\n+\n+\tvar (\n+\t\tshape = []int64{2, 5}\n+\t\tnames = []string{\"x\", \"y\"}\n+\t\tbw    = int64(arrow.PrimitiveTypes.Float32.(arrow.FixedWidthDataType).BitWidth()) / 8\n+\t)\n+\n+\ttsr := tensor.New(arr.Data(), shape, nil, names).(*tensor.Float32)\n+\tdefer tsr.Release()\n+\n+\ttsr.Retain()\n+\ttsr.Release()\n+\n+\tif got, want := tsr.Len(), 10; got != want {\n+\t\tt.Fatalf(\"invalid length: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Shape(), shape; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid shape: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Strides(), []int64{5 * bw, 1 * bw}; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid strides: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.NumDims(), 2; got != want {\n+\t\tt.Fatalf(\"invalid dims: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tfor i, name := range names {\n+\t\tif got, want := tsr.DimName(i), name; got != want {\n+\t\t\tt.Fatalf(\"invalid dim-name[%d]: got=%q, want=%q\", i, got, want)\n+\t\t}\n+\t}\n+\n+\tif got, want := tsr.DataType(), arr.DataType(); got != want {\n+\t\tt.Fatalf(\"invalid data-type: got=%q, want=%q\", got.Name(), want.Name())\n+\t}\n+\n+\tif got, want := tsr.Data(), arr.Data(); got != want {\n+\t\tt.Fatalf(\"invalid data: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif tsr.IsMutable() {\n+\t\tt.Fatalf(\"should not be mutable\")\n+\t}\n+\n+\tif !tsr.IsContiguous() {\n+\t\tt.Fatalf(\"should be contiguous\")\n+\t}\n+\n+\tif !tsr.IsRowMajor() || tsr.IsColMajor() {\n+\t\tt.Fatalf(\"should be row-major\")\n+\t}\n+\n+\tif got, want := tsr.Float32Values(), raw; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid backing array: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\ti []int64\n+\t\tv float32\n+\t}{\n+\t\t{i: []int64{0, 0}, v: 1},\n+\t\t{i: []int64{0, 1}, v: 2},\n+\t\t{i: []int64{0, 2}, v: 3},\n+\t\t{i: []int64{0, 3}, v: 4},\n+\t\t{i: []int64{0, 4}, v: 5},\n+\t\t{i: []int64{1, 0}, v: 6},\n+\t\t{i: []int64{1, 1}, v: 7},\n+\t\t{i: []int64{1, 2}, v: 8},\n+\t\t{i: []int64{1, 3}, v: 9},\n+\t\t{i: []int64{1, 4}, v: 10},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"%v\", tc.i), func(t *testing.T) {\n+\t\t\tgot := tsr.Value(tc.i)\n+\t\t\tif got != tc.v {\n+\t\t\t\tt.Fatalf(\"arr[%v]: got=%v, want=%v\", tc.i, got, tc.v)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestTensorFloat64(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tbld := array.NewFloat64Builder(mem)\n+\tdefer bld.Release()\n+\n+\traw := []float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tbld.AppendValues(raw, nil)\n+\n+\tarr := bld.NewFloat64Array()\n+\tdefer arr.Release()\n+\n+\tvar (\n+\t\tshape = []int64{2, 5}\n+\t\tnames = []string{\"x\", \"y\"}\n+\t\tbw    = int64(arrow.PrimitiveTypes.Float64.(arrow.FixedWidthDataType).BitWidth()) / 8\n+\t)\n+\n+\ttsr := tensor.New(arr.Data(), shape, nil, names).(*tensor.Float64)\n+\tdefer tsr.Release()\n+\n+\ttsr.Retain()\n+\ttsr.Release()\n+\n+\tif got, want := tsr.Len(), 10; got != want {\n+\t\tt.Fatalf(\"invalid length: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Shape(), shape; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid shape: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Strides(), []int64{5 * bw, 1 * bw}; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid strides: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.NumDims(), 2; got != want {\n+\t\tt.Fatalf(\"invalid dims: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tfor i, name := range names {\n+\t\tif got, want := tsr.DimName(i), name; got != want {\n+\t\t\tt.Fatalf(\"invalid dim-name[%d]: got=%q, want=%q\", i, got, want)\n+\t\t}\n+\t}\n+\n+\tif got, want := tsr.DataType(), arr.DataType(); got != want {\n+\t\tt.Fatalf(\"invalid data-type: got=%q, want=%q\", got.Name(), want.Name())\n+\t}\n+\n+\tif got, want := tsr.Data(), arr.Data(); got != want {\n+\t\tt.Fatalf(\"invalid data: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif tsr.IsMutable() {\n+\t\tt.Fatalf(\"should not be mutable\")\n+\t}\n+\n+\tif !tsr.IsContiguous() {\n+\t\tt.Fatalf(\"should be contiguous\")\n+\t}\n+\n+\tif !tsr.IsRowMajor() || tsr.IsColMajor() {\n+\t\tt.Fatalf(\"should be row-major\")\n+\t}\n+\n+\tif got, want := tsr.Float64Values(), raw; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid backing array: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\ti []int64\n+\t\tv float64\n+\t}{\n+\t\t{i: []int64{0, 0}, v: 1},\n+\t\t{i: []int64{0, 1}, v: 2},\n+\t\t{i: []int64{0, 2}, v: 3},\n+\t\t{i: []int64{0, 3}, v: 4},\n+\t\t{i: []int64{0, 4}, v: 5},\n+\t\t{i: []int64{1, 0}, v: 6},\n+\t\t{i: []int64{1, 1}, v: 7},\n+\t\t{i: []int64{1, 2}, v: 8},\n+\t\t{i: []int64{1, 3}, v: 9},\n+\t\t{i: []int64{1, 4}, v: 10},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"%v\", tc.i), func(t *testing.T) {\n+\t\t\tgot := tsr.Value(tc.i)\n+\t\t\tif got != tc.v {\n+\t\t\t\tt.Fatalf(\"arr[%v]: got=%v, want=%v\", tc.i, got, tc.v)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\ndiff --git a/go/arrow/tensor/numeric.gen_test.go.tmpl b/go/arrow/tensor/numeric.gen_test.go.tmpl\nnew file mode 100644\nindex 0000000000..dd512e8523\n--- /dev/null\n+++ b/go/arrow/tensor/numeric.gen_test.go.tmpl\n@@ -0,0 +1,126 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package tensor_test\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/arrow/tensor\"\n+)\n+\n+{{range .In}}\n+\n+func TestTensor{{.Name}}(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tbld := array.New{{.Name}}Builder(mem)\n+\tdefer bld.Release()\n+\n+\traw := []{{.Type}}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tbld.AppendValues(raw, nil)\n+\n+\tarr := bld.New{{.Name}}Array()\n+\tdefer arr.Release()\n+\n+\tvar (\n+\t\tshape = []int64{2, 5}\n+\t\tnames = []string{\"x\", \"y\"}\n+\t\tbw    = int64(arrow.PrimitiveTypes.{{.Name}}.(arrow.FixedWidthDataType).BitWidth()) / 8\n+\t)\n+\n+\ttsr := tensor.New(arr.Data(), shape, nil, names).(*tensor.{{.Name}})\n+\tdefer tsr.Release()\n+\n+\ttsr.Retain()\n+\ttsr.Release()\n+\n+\tif got, want := tsr.Len(), 10; got != want {\n+\t\tt.Fatalf(\"invalid length: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Shape(), shape; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid shape: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.Strides(), []int64{5*bw, 1*bw}; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid strides: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := tsr.NumDims(), 2; got != want {\n+\t\tt.Fatalf(\"invalid dims: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tfor i, name := range names {\n+\t\tif got, want := tsr.DimName(i), name; got != want {\n+\t\t\tt.Fatalf(\"invalid dim-name[%d]: got=%q, want=%q\", i, got, want)\n+\t\t}\n+\t}\n+\n+\tif got, want := tsr.DataType(), arr.DataType(); got != want {\n+\t\tt.Fatalf(\"invalid data-type: got=%q, want=%q\", got.Name(), want.Name())\n+\t}\n+\n+\tif got, want := tsr.Data(), arr.Data(); got != want {\n+\t\tt.Fatalf(\"invalid data: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif tsr.IsMutable() {\n+\t\tt.Fatalf(\"should not be mutable\")\n+\t}\n+\n+\tif !tsr.IsContiguous() {\n+\t\tt.Fatalf(\"should be contiguous\")\n+\t}\n+\n+\tif !tsr.IsRowMajor() || tsr.IsColMajor() {\n+\t\tt.Fatalf(\"should be row-major\")\n+\t}\n+\n+\tif got, want := tsr.{{.Name}}Values(), raw; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid backing array: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\ti []int64\n+\t\tv {{.Type}}\n+\t}{\n+\t\t{i: []int64{0, 0}, v: 1},\n+\t\t{i: []int64{0, 1}, v: 2},\n+\t\t{i: []int64{0, 2}, v: 3},\n+\t\t{i: []int64{0, 3}, v: 4},\n+\t\t{i: []int64{0, 4}, v: 5},\n+\t\t{i: []int64{1, 0}, v: 6},\n+\t\t{i: []int64{1, 1}, v: 7},\n+\t\t{i: []int64{1, 2}, v: 8},\n+\t\t{i: []int64{1, 3}, v: 9},\n+\t\t{i: []int64{1, 4}, v: 10},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"%v\", tc.i), func(t *testing.T) {\n+\t\t\tgot := tsr.Value(tc.i)\n+\t\t\tif got != tc.v {\n+\t\t\t\tt.Fatalf(\"arr[%v]: got=%v, want=%v\", tc.i, got, tc.v)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+{{end}}\ndiff --git a/go/arrow/tensor/tensor.go b/go/arrow/tensor/tensor.go\nnew file mode 100644\nindex 0000000000..53d5a456ea\n--- /dev/null\n+++ b/go/arrow/tensor/tensor.go\n@@ -0,0 +1,239 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package tensor provides types that implement n-dimensional arrays.\n+package tensor\n+\n+import (\n+\t\"fmt\"\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+)\n+\n+// Interface represents an n-dimensional array of numerical data.\n+type Interface interface {\n+\t// Retain increases the reference count by 1.\n+\t// Retain may be called simultaneously from multiple goroutines.\n+\tRetain()\n+\n+\t// Release decreases the reference count by 1.\n+\t// Release may be called simultaneously from multiple goroutines.\n+\t// When the reference count goes to zero, the memory is freed.\n+\tRelease()\n+\n+\t// Len returns the number of elements in the tensor.\n+\tLen() int\n+\n+\t// Shape returns the size - in each dimension - of the tensor.\n+\tShape() []int64\n+\n+\t// Strides returns the number of bytes to step in each dimension when traversing the tensor.\n+\tStrides() []int64\n+\n+\t// NumDims returns the number of dimensions of the tensor.\n+\tNumDims() int\n+\n+\t// DimName returns the name of the i-th dimension.\n+\tDimName(i int) string\n+\n+\tDataType() arrow.DataType\n+\tData() *array.Data\n+\n+\t// IsMutable returns whether the underlying data buffer is mutable.\n+\tIsMutable() bool\n+\tIsContiguous() bool\n+\tIsRowMajor() bool\n+\tIsColMajor() bool\n+}\n+\n+type tensorBase struct {\n+\trefCount int64\n+\tdtype    arrow.DataType\n+\tbw       int64 // bytes width\n+\tdata     *array.Data\n+\tshape    []int64\n+\tstrides  []int64\n+\tnames    []string\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (tb *tensorBase) Retain() {\n+\tatomic.AddInt64(&tb.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// Release may be called simultaneously from multiple goroutines.\n+// When the reference count goes to zero, the memory is freed.\n+func (tb *tensorBase) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&tb.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&tb.refCount, -1) == 0 {\n+\t\ttb.data.Release()\n+\t\ttb.data = nil\n+\t}\n+}\n+\n+func (tb *tensorBase) Len() int {\n+\to := int64(1)\n+\tfor _, v := range tb.shape {\n+\t\to *= v\n+\t}\n+\treturn int(o)\n+}\n+\n+func (tb *tensorBase) Shape() []int64           { return tb.shape }\n+func (tb *tensorBase) Strides() []int64         { return tb.strides }\n+func (tb *tensorBase) NumDims() int             { return len(tb.shape) }\n+func (tb *tensorBase) DimName(i int) string     { return tb.names[i] }\n+func (tb *tensorBase) DataType() arrow.DataType { return tb.dtype }\n+func (tb *tensorBase) Data() *array.Data        { return tb.data }\n+\n+// IsMutable returns whether the underlying data buffer is mutable.\n+func (tb *tensorBase) IsMutable() bool { return false } // FIXME(sbinet): implement it at the array.Data level\n+\n+func (tb *tensorBase) IsContiguous() bool {\n+\treturn tb.IsRowMajor() || tb.IsColMajor()\n+}\n+\n+func (tb *tensorBase) IsRowMajor() bool {\n+\tstrides := rowMajorStrides(tb.dtype, tb.shape)\n+\treturn equalInt64s(strides, tb.strides)\n+}\n+\n+func (tb *tensorBase) IsColMajor() bool {\n+\tstrides := colMajorStrides(tb.dtype, tb.shape)\n+\treturn equalInt64s(strides, tb.strides)\n+}\n+\n+func (tb *tensorBase) offset(index []int64) int64 {\n+\tvar offset int64\n+\tfor i, v := range index {\n+\t\toffset += v * tb.strides[i]\n+\t}\n+\treturn offset / tb.bw\n+}\n+\n+// New returns a new n-dim array from the provided backing data and the shape and strides.\n+// If strides is nil, row-major strides will be inferred.\n+// If names is nil, a slice of empty strings will be created.\n+//\n+// New panics if the backing data is not a numerical type.\n+func New(data *array.Data, shape, strides []int64, names []string) Interface {\n+\tdt := data.DataType()\n+\tswitch dt.ID() {\n+\tcase arrow.INT8:\n+\t\treturn NewInt8(data, shape, strides, names)\n+\tcase arrow.INT16:\n+\t\treturn NewInt16(data, shape, strides, names)\n+\tcase arrow.INT32:\n+\t\treturn NewInt32(data, shape, strides, names)\n+\tcase arrow.INT64:\n+\t\treturn NewInt64(data, shape, strides, names)\n+\tcase arrow.UINT8:\n+\t\treturn NewUint8(data, shape, strides, names)\n+\tcase arrow.UINT16:\n+\t\treturn NewUint16(data, shape, strides, names)\n+\tcase arrow.UINT32:\n+\t\treturn NewUint32(data, shape, strides, names)\n+\tcase arrow.UINT64:\n+\t\treturn NewUint64(data, shape, strides, names)\n+\tcase arrow.FLOAT32:\n+\t\treturn NewFloat32(data, shape, strides, names)\n+\tcase arrow.FLOAT64:\n+\t\treturn NewFloat64(data, shape, strides, names)\n+\tdefault:\n+\t\tpanic(fmt.Errorf(\"arrow/tensor: invalid data type %s\", dt.Name()))\n+\t}\n+}\n+\n+func newTensor(dtype arrow.DataType, data *array.Data, shape, strides []int64, names []string) *tensorBase {\n+\ttb := tensorBase{\n+\t\trefCount: 1,\n+\t\tdtype:    dtype,\n+\t\tbw:       int64(dtype.(arrow.FixedWidthDataType).BitWidth()) / 8,\n+\t\tdata:     data,\n+\t\tshape:    shape,\n+\t\tstrides:  strides,\n+\t\tnames:    names,\n+\t}\n+\ttb.data.Retain()\n+\n+\tif len(tb.shape) > 0 && len(tb.strides) == 0 {\n+\t\ttb.strides = rowMajorStrides(dtype, shape)\n+\t}\n+\treturn &tb\n+}\n+\n+func rowMajorStrides(dtype arrow.DataType, shape []int64) []int64 {\n+\tdt := dtype.(arrow.FixedWidthDataType)\n+\trem := int64(dt.BitWidth() / 8)\n+\tfor _, v := range shape {\n+\t\trem *= v\n+\t}\n+\n+\tif rem == 0 {\n+\t\tstrides := make([]int64, len(shape))\n+\t\trem := int64(dt.BitWidth() / 8)\n+\t\tfor i := range strides {\n+\t\t\tstrides[i] = rem\n+\t\t}\n+\t\treturn strides\n+\t}\n+\n+\tvar strides []int64\n+\tfor _, v := range shape {\n+\t\trem /= v\n+\t\tstrides = append(strides, rem)\n+\t}\n+\treturn strides\n+}\n+\n+func colMajorStrides(dtype arrow.DataType, shape []int64) []int64 {\n+\tdt := dtype.(arrow.FixedWidthDataType)\n+\ttotal := int64(dt.BitWidth() / 8)\n+\tfor _, v := range shape {\n+\t\tif v == 0 {\n+\t\t\tstrides := make([]int64, len(shape))\n+\t\t\tfor i := range strides {\n+\t\t\t\tstrides[i] = total\n+\t\t\t}\n+\t\t\treturn strides\n+\t\t}\n+\t}\n+\n+\tvar strides []int64\n+\tfor _, v := range shape {\n+\t\tstrides = append(strides, total)\n+\t\ttotal *= v\n+\t}\n+\treturn strides\n+}\n+\n+func equalInt64s(a, b []int64) bool {\n+\tif len(a) != len(b) {\n+\t\treturn false\n+\t}\n+\tfor i := range a {\n+\t\tif a[i] != b[i] {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn true\n+}\ndiff --git a/go/arrow/tensor/tensor_test.go b/go/arrow/tensor/tensor_test.go\nnew file mode 100644\nindex 0000000000..cb2631c8a1\n--- /dev/null\n+++ b/go/arrow/tensor/tensor_test.go\n@@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package tensor_test\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+\t\"github.com/apache/arrow/go/arrow/tensor\"\n+)\n+\n+func TestTensor(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tbld := array.NewFloat64Builder(mem)\n+\tdefer bld.Release()\n+\n+\traw := []float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\tbld.AppendValues(raw, nil)\n+\n+\tarr := bld.NewFloat64Array()\n+\tdefer arr.Release()\n+\n+\tvar (\n+\t\tshape = []int64{2, 5}\n+\t\tnames = []string{\"x\", \"y\"}\n+\t)\n+\n+\tf64 := tensor.New(arr.Data(), shape, nil, names).(*tensor.Float64)\n+\tdefer f64.Release()\n+\n+\tf64.Retain()\n+\tf64.Release()\n+\n+\tif got, want := f64.Len(), 10; got != want {\n+\t\tt.Fatalf(\"invalid length: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := f64.Shape(), shape; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid shape: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := f64.Strides(), []int64{40, 8}; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid strides: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif got, want := f64.NumDims(), 2; got != want {\n+\t\tt.Fatalf(\"invalid dims: got=%d, want=%d\", got, want)\n+\t}\n+\n+\tfor i, name := range names {\n+\t\tif got, want := f64.DimName(i), name; got != want {\n+\t\t\tt.Fatalf(\"invalid dim-name[%d]: got=%q, want=%q\", i, got, want)\n+\t\t}\n+\t}\n+\n+\tif got, want := f64.DataType(), arr.DataType(); got != want {\n+\t\tt.Fatalf(\"invalid data-type: got=%q, want=%q\", got.Name(), want.Name())\n+\t}\n+\n+\tif got, want := f64.Data(), arr.Data(); got != want {\n+\t\tt.Fatalf(\"invalid data: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tif f64.IsMutable() {\n+\t\tt.Fatalf(\"should not be mutable\")\n+\t}\n+\n+\tif !f64.IsContiguous() {\n+\t\tt.Fatalf(\"should be contiguous\")\n+\t}\n+\n+\tif !f64.IsRowMajor() || f64.IsColMajor() {\n+\t\tt.Fatalf(\"should be row-major\")\n+\t}\n+\n+\tif got, want := f64.Float64Values(), raw; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"invalid backing array: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\ti []int64\n+\t\tv float64\n+\t}{\n+\t\t{i: []int64{0, 0}, v: 1},\n+\t\t{i: []int64{0, 1}, v: 2},\n+\t\t{i: []int64{0, 2}, v: 3},\n+\t\t{i: []int64{0, 3}, v: 4},\n+\t\t{i: []int64{0, 4}, v: 5},\n+\t\t{i: []int64{1, 0}, v: 6},\n+\t\t{i: []int64{1, 1}, v: 7},\n+\t\t{i: []int64{1, 2}, v: 8},\n+\t\t{i: []int64{1, 3}, v: 9},\n+\t\t{i: []int64{1, 4}, v: 10},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"%v\", tc.i), func(t *testing.T) {\n+\t\t\tgot := f64.Value(tc.i)\n+\t\t\tif got != tc.v {\n+\t\t\t\tt.Fatalf(\"arr[%v]: got=%v, want=%v\", tc.i, got, tc.v)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestInvalidTensor(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tbld := array.NewBinaryBuilder(mem, arrow.BinaryTypes.Binary)\n+\tdefer bld.Release()\n+\n+\traw := [][]byte{{1}, {2, 2}, {3, 3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}}\n+\tbld.AppendValues(raw, nil)\n+\n+\tarr := bld.NewBinaryArray()\n+\tdefer arr.Release()\n+\n+\tvar (\n+\t\tshape = []int64{2, 5}\n+\t\tnames = []string{\"x\", \"y\"}\n+\t)\n+\n+\tt.Run(\"invalid-binary\", func(t *testing.T) {\n+\t\twant := fmt.Errorf(\"arrow/tensor: invalid data type binary\")\n+\t\tdefer func() {\n+\t\t\te := recover()\n+\t\t\tif e == nil {\n+\t\t\t\tt.Fatalf(\"expected an error: %v\", want)\n+\t\t\t}\n+\t\t\tswitch err := e.(type) {\n+\t\t\tcase error:\n+\t\t\t\tif !reflect.DeepEqual(err, want) {\n+\t\t\t\t\tt.Fatalf(\"invalid error: got=%v (%T), want=%v\", err, err, want)\n+\t\t\t\t}\n+\t\t\tdefault:\n+\t\t\t\tt.Fatalf(\"invalid error: got=%v (%T), want=%v\", err, err, want)\n+\t\t\t}\n+\t\t}()\n+\t\ttsr := tensor.New(arr.Data(), shape, nil, names)\n+\t\tdefer tsr.Release()\n+\t})\n+\n+}\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T21:32:44.492+0000",
                    "updated": "2018-10-31T21:32:44.492+0000",
                    "started": "2018-10-31T21:32:44.491+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161322",
                    "issueId": "13194634"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@57e3ed5b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17c53390[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@aec4300[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@348bb87e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e47db3f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3fe6563[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6be2d25f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@243cf15[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@124d7241[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6268c816[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1fe59e2e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3c2d1a0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 31 21:32:32 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-31T21:32:32.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3640/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-27T16:47:04.000+0000",
        "updated": "2018-10-31T21:32:44.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] add support for Tensors",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194634/comment/16670790",
                    "id": "16670790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2860\n[https://github.com/apache/arrow/pull/2860]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-31T21:32:32.793+0000",
                    "updated": "2018-10-31T21:32:32.793+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zpv3:",
        "customfield_12314139": null
    }
}