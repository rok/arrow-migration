{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13447903",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903",
    "key": "ARROW-16706",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
            "name": "Critical",
            "id": "2"
        },
        "labels": [
            "good-first-issue",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12641014",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12641014",
                "type": {
                    "id": "12310560",
                    "name": "Problem/Incident",
                    "inward": "is caused by",
                    "outward": "causes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310560"
                },
                "inwardIssue": {
                    "id": "13440455",
                    "key": "ARROW-16234",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455",
                    "fields": {
                        "summary": "[C++] Implement Rank Kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=raulcd",
            "name": "raulcd",
            "key": "JIRAUSER287560",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
            },
            "displayName": "Ra\u00fal Cumplido",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16706/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779071",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#issuecomment-1148624296\n\n   https://issues.apache.org/jira/browse/ARROW-16706\n\n\n",
                    "created": "2022-06-07T12:50:08.581+0000",
                    "updated": "2022-06-07T12:50:08.581+0000",
                    "started": "2022-06-07T12:50:08.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779071",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#issuecomment-1148624329\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-06-07T12:50:10.515+0000",
                    "updated": "2022-06-07T12:50:10.515+0000",
                    "started": "2022-06-07T12:50:10.515+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779072",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r891392053\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"Min\": CRankOptionsTiebreaker_MIN,\n+        \"Max\": CRankOptionsTiebreaker_MAX,\n+        \"First\": CRankOptionsTiebreaker_FIRST,\n+        \"Dense\": CRankOptionsTiebreaker_DENSE,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples\n\nReview Comment:\n   It would be nice to be able to pass a simpler signature for the simple case of computing ranks on an array (which is the only thing supported currently, anyway). For example, the `sort_keys` default could be to do an ascending rank on an unnamed column.\r\n   \r\n   cc @jorisvandenbossche for suggestions and opinions\n\n\n\n",
                    "created": "2022-06-07T15:38:20.681+0000",
                    "updated": "2022-06-07T15:38:20.681+0000",
                    "started": "2022-06-07T15:38:20.680+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779154",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r891410163\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"Min\": CRankOptionsTiebreaker_MIN,\n+        \"Max\": CRankOptionsTiebreaker_MAX,\n+        \"First\": CRankOptionsTiebreaker_FIRST,\n+        \"Dense\": CRankOptionsTiebreaker_DENSE,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples\n\nReview Comment:\n   @pitrou do you mean something like this change?\r\n   ```\r\n   $ git diff\r\n   diff --git a/python/pyarrow/_compute.pyx b/python/pyarrow/_compute.pyx\r\n   index 6df6637..a4830d9 100644\r\n   -",
                    "created": "2022-06-07T15:54:37.962+0000",
                    "updated": "2022-06-07T15:54:37.962+0000",
                    "started": "2022-06-07T15:54:37.962+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779161",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r891417467\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"Min\": CRankOptionsTiebreaker_MIN,\n+        \"Max\": CRankOptionsTiebreaker_MAX,\n+        \"First\": CRankOptionsTiebreaker_FIRST,\n+        \"Dense\": CRankOptionsTiebreaker_DENSE,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples\n\nReview Comment:\n   I would take a look at how we do this for the sort kernels, as that has similar problems\n\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"Min\": CRankOptionsTiebreaker_MIN,\n+        \"Max\": CRankOptionsTiebreaker_MAX,\n+        \"First\": CRankOptionsTiebreaker_FIRST,\n+        \"Dense\": CRankOptionsTiebreaker_DENSE,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples\n+        Names of field/column keys to sort the input on,\n+        along with the order each field/column is sorted in.\n+        Accepted values for `order` are \"ascending\", \"descending\".\n+    null_placement : str, default \"at_end\"\n+        Where nulls in input should be sorted, only applying to\n+        columns/fields mentioned in `sort_keys`.\n+        Accepted values are \"at_start\", \"at_end\".\n+    tiebreaker : str, default \"First\"\n+        Configure how ties between equal values are handled.\n+        Accepted values are:\n+\n+        - \"Min\": Ties get the smallest possible rank in sorted order.\n\nReview Comment:\n   I think we generally use lower case values in Python for keyword value options, so would take \"min\", \"max\", etc here\n\n\n\n",
                    "created": "2022-06-07T16:01:18.395+0000",
                    "updated": "2022-06-07T16:01:18.395+0000",
                    "started": "2022-06-07T16:01:18.395+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779170",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779172",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r891424056\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"Min\": CRankOptionsTiebreaker_MIN,\n+        \"Max\": CRankOptionsTiebreaker_MAX,\n+        \"First\": CRankOptionsTiebreaker_FIRST,\n+        \"Dense\": CRankOptionsTiebreaker_DENSE,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples\n\nReview Comment:\n   Although for `sort_indices` we have a separate array-specific kernel with a separate ArraySortOptions (which is simpler, not requiring a column name), in addition to the general SortOptions. So that's a bit different here.\r\n   \r\n   For the `sort_keys` keyword in top_k / bottom_k kernel, we have some special casing as well:\r\n   \r\n   https://github.com/apache/arrow/blob/62979d249952775ebd06c814b16d58b87e1cbc88/python/pyarrow/compute.py#L544-L547\r\n   \r\n   (the \"descending\" is hardcoded here because it is for `top_k`, but the relevant part is that is injects a \"dummy\" name for the column in case of array input)\r\n   \r\n   \n\n\n\n",
                    "created": "2022-06-07T16:07:38.976+0000",
                    "updated": "2022-06-07T16:07:38.976+0000",
                    "started": "2022-06-07T16:07:38.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779172",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779374",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r892100150\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"Min\": CRankOptionsTiebreaker_MIN,\n+        \"Max\": CRankOptionsTiebreaker_MAX,\n+        \"First\": CRankOptionsTiebreaker_FIRST,\n+        \"Dense\": CRankOptionsTiebreaker_DENSE,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples\n\nReview Comment:\n   For the record, we probably shouldn't be using \"dummy\" as that can be an actual column name. An empty string might be better.\n\n\n\n",
                    "created": "2022-06-08T08:55:43.736+0000",
                    "updated": "2022-06-08T08:55:43.736+0000",
                    "started": "2022-06-08T08:55:43.736+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779374",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779375",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r892101894\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"Min\": CRankOptionsTiebreaker_MIN,\n+        \"Max\": CRankOptionsTiebreaker_MAX,\n+        \"First\": CRankOptionsTiebreaker_FIRST,\n+        \"Dense\": CRankOptionsTiebreaker_DENSE,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples\n\nReview Comment:\n   @raulcd You should even be able to omit the `options` in the call to `pc.rank()`.\n\n\n\n",
                    "created": "2022-06-08T08:57:23.846+0000",
                    "updated": "2022-06-08T08:57:23.846+0000",
                    "started": "2022-06-08T08:57:23.846+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779375",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779379",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r892104449\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"Min\": CRankOptionsTiebreaker_MIN,\n+        \"Max\": CRankOptionsTiebreaker_MAX,\n+        \"First\": CRankOptionsTiebreaker_FIRST,\n+        \"Dense\": CRankOptionsTiebreaker_DENSE,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples\n+        Names of field/column keys to sort the input on,\n+        along with the order each field/column is sorted in.\n+        Accepted values for `order` are \"ascending\", \"descending\".\n+    null_placement : str, default \"at_end\"\n+        Where nulls in input should be sorted, only applying to\n+        columns/fields mentioned in `sort_keys`.\n+        Accepted values are \"at_start\", \"at_end\".\n+    tiebreaker : str, default \"First\"\n+        Configure how ties between equal values are handled.\n+        Accepted values are:\n+\n+        - \"Min\": Ties get the smallest possible rank in sorted order.\n\nReview Comment:\n   Updated to lower case keywords\n\n\n\n",
                    "created": "2022-06-08T08:59:44.122+0000",
                    "updated": "2022-06-08T08:59:44.122+0000",
                    "started": "2022-06-08T08:59:44.121+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779379",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779386",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r892149876\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"Min\": CRankOptionsTiebreaker_MIN,\n+        \"Max\": CRankOptionsTiebreaker_MAX,\n+        \"First\": CRankOptionsTiebreaker_FIRST,\n+        \"Dense\": CRankOptionsTiebreaker_DENSE,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples\n\nReview Comment:\n   I have pushed a new commit with some changes. I've added a test to ensure we can call `pc.rank()` without options and I've just applied the diff I proposed previously. I am not entirely sure I understand the proposal around injecting a fake ordering and what are the benefits vs the current implementation. With the current implementation we can use the following signatures:\r\n   ```\r\n       pc.rank(arr)\r\n       pc.rank(arr, options=pc.RankOptions())\r\n       pc.rank(arr, options=pc.RankOptions(tiebreaker=\"dense\"))\r\n       pc.rank(arr, options=pc.RankOptions(null_placement=\"at_start\"))\r\n       rank_options = pc.RankOptions(sort_keys=[(\"b\", \"ascending\")],\r\n                                     null_placement=\"at_end\",\r\n                                     tiebreaker=tiebreaker)\r\n       pc.rank(arr, options=rank_options)\r\n   ```\n\n\n\n",
                    "created": "2022-06-08T09:43:52.411+0000",
                    "updated": "2022-06-08T09:43:52.411+0000",
                    "started": "2022-06-08T09:43:52.411+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779386",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779393",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r892170239\n\n\n##########\npython/pyarrow/tests/test_compute.py:\n##########\n@@ -2743,6 +2745,43 @@ def test_random():\n         pc.random(100, initializer=[])\n \n \n+@pytest.mark.parametrize(\n+    \"tiebreaker,expected_values\",\n+    [(\"min\", [3, 1, 4, 6, 4, 6, 1]),\n+     (\"max\", [3, 2, 5, 7, 5, 7, 2]),\n+     (\"first\", [3, 1, 4, 6, 5, 7, 2]),\n+     (\"dense\", [2, 1, 3, 4, 3, 4, 1])]\n+)\n+def test_rank_options_tiebreaker(tiebreaker, expected_values):\n+    arr = pa.array([1.2, 0.0, 5.3, None, 5.3, None, 0.0])\n+    rank_options = pc.RankOptions(sort_keys=[(\"b\", \"ascending\")],\n+                                  null_placement=\"at_end\",\n+                                  tiebreaker=tiebreaker)\n+    result = pc.rank(arr, options=rank_options)\n+    expected = pa.array(expected_values, type=pa.uint64())\n+    assert result.equals(expected)\n+\n+\n+def test_rank_options():\n+    arr = pa.array([1.2, 0.0, 5.3, None, 5.3, None, 0.0])\n+    expected = pa.array([3, 1, 4, 6, 5, 7, 2], type=pa.uint64())\n+\n+    # Ensure rank can be called without specifying options\n+    result = pc.rank(arr)\n+    assert result.equals(expected)\n+\n+    # Ensure default RankOptions\n+    result = pc.rank(arr, options=pc.RankOptions())\n+    assert result.equals(expected)\n+\n\nReview Comment:\n   Can you also test `null_placement=\"at_start\"` here?\n\n\n\n##########\npython/pyarrow/tests/test_compute.py:\n##########\n@@ -2743,6 +2745,43 @@ def test_random():\n         pc.random(100, initializer=[])\n \n \n+@pytest.mark.parametrize(\n+    \"tiebreaker,expected_values\",\n+    [(\"min\", [3, 1, 4, 6, 4, 6, 1]),\n+     (\"max\", [3, 2, 5, 7, 5, 7, 2]),\n+     (\"first\", [3, 1, 4, 6, 5, 7, 2]),\n+     (\"dense\", [2, 1, 3, 4, 3, 4, 1])]\n+)\n+def test_rank_options_tiebreaker(tiebreaker, expected_values):\n+    arr = pa.array([1.2, 0.0, 5.3, None, 5.3, None, 0.0])\n+    rank_options = pc.RankOptions(sort_keys=[(\"b\", \"ascending\")],\n+                                  null_placement=\"at_end\",\n+                                  tiebreaker=tiebreaker)\n+    result = pc.rank(arr, options=rank_options)\n+    expected = pa.array(expected_values, type=pa.uint64())\n+    assert result.equals(expected)\n+\n+\n+def test_rank_options():\n+    arr = pa.array([1.2, 0.0, 5.3, None, 5.3, None, 0.0])\n+    expected = pa.array([3, 1, 4, 6, 5, 7, 2], type=pa.uint64())\n+\n+    # Ensure rank can be called without specifying options\n+    result = pc.rank(arr)\n+    assert result.equals(expected)\n+\n+    # Ensure default RankOptions\n+    result = pc.rank(arr, options=pc.RankOptions())\n+    assert result.equals(expected)\n+\n+    with pytest.raises(ValueError,\n+                       match=r'\"NonExisting\" is not a valid tiebreaker'):\n+        rank_options = pc.RankOptions(sort_keys=[(\"b\", \"ascending\")],\n+                                      null_placement=\"at_end\",\n+                                      tiebreaker=\"NonExisting\")\n+        pc.rank(arr, options=rank_options)\n\nReview Comment:\n   I don't think calling `pc.rank` is necessary, the `RankOptions` constructor should raise the error.\n\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"min\": CRankOptionsTiebreaker_Min,\n+        \"max\": CRankOptionsTiebreaker_Max,\n+        \"first\": CRankOptionsTiebreaker_First,\n+        \"dense\": CRankOptionsTiebreaker_Dense,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples, optional\n+        Names of field/column keys to sort the input on,\n+        along with the order each field/column is sorted in.\n+        Accepted values for `order` are \"ascending\", \"descending\".\n\nReview Comment:\n   Mention what the default is when not specified?\n\n\n\n",
                    "created": "2022-06-08T10:05:49.350+0000",
                    "updated": "2022-06-08T10:05:49.350+0000",
                    "started": "2022-06-08T10:05:49.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779393",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779413",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r892211152\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"min\": CRankOptionsTiebreaker_Min,\n+        \"max\": CRankOptionsTiebreaker_Max,\n+        \"first\": CRankOptionsTiebreaker_First,\n+        \"dense\": CRankOptionsTiebreaker_Dense,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples, optional\n+        Names of field/column keys to sort the input on,\n+        along with the order each field/column is sorted in.\n+        Accepted values for `order` are \"ascending\", \"descending\".\n\nReview Comment:\n   Based on the tests the default is Ascending but just wanted to validate if my understanding is correct here. The default is injecting an empty field and applying Ascending, right?\r\n   ```\r\n     /// Convenience constructor for array inputs\r\n     explicit RankOptions(SortOrder order,\r\n                          NullPlacement null_placement = NullPlacement::AtEnd,\r\n                          Tiebreaker tiebreaker = RankOptions::First)\r\n         : RankOptions({SortKey(\"\", order)}, null_placement, tiebreaker) {}\r\n   ```\r\n   So would you add that the default is just `\"ascending\"` or the default is `[(\"\", \"ascending\")]`\n\n\n\n",
                    "created": "2022-06-08T10:51:37.893+0000",
                    "updated": "2022-06-08T10:51:37.893+0000",
                    "started": "2022-06-08T10:51:37.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779413",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r892212528\n\n\n##########\npython/pyarrow/tests/test_compute.py:\n##########\n@@ -2743,6 +2745,43 @@ def test_random():\n         pc.random(100, initializer=[])\n \n \n+@pytest.mark.parametrize(\n+    \"tiebreaker,expected_values\",\n+    [(\"min\", [3, 1, 4, 6, 4, 6, 1]),\n+     (\"max\", [3, 2, 5, 7, 5, 7, 2]),\n+     (\"first\", [3, 1, 4, 6, 5, 7, 2]),\n+     (\"dense\", [2, 1, 3, 4, 3, 4, 1])]\n+)\n+def test_rank_options_tiebreaker(tiebreaker, expected_values):\n+    arr = pa.array([1.2, 0.0, 5.3, None, 5.3, None, 0.0])\n+    rank_options = pc.RankOptions(sort_keys=[(\"b\", \"ascending\")],\n+                                  null_placement=\"at_end\",\n+                                  tiebreaker=tiebreaker)\n+    result = pc.rank(arr, options=rank_options)\n+    expected = pa.array(expected_values, type=pa.uint64())\n+    assert result.equals(expected)\n+\n+\n+def test_rank_options():\n+    arr = pa.array([1.2, 0.0, 5.3, None, 5.3, None, 0.0])\n+    expected = pa.array([3, 1, 4, 6, 5, 7, 2], type=pa.uint64())\n+\n+    # Ensure rank can be called without specifying options\n+    result = pc.rank(arr)\n+    assert result.equals(expected)\n+\n+    # Ensure default RankOptions\n+    result = pc.rank(arr, options=pc.RankOptions())\n+    assert result.equals(expected)\n+\n+    with pytest.raises(ValueError,\n+                       match=r'\"NonExisting\" is not a valid tiebreaker'):\n+        rank_options = pc.RankOptions(sort_keys=[(\"b\", \"ascending\")],\n+                                      null_placement=\"at_end\",\n+                                      tiebreaker=\"NonExisting\")\n+        pc.rank(arr, options=rank_options)\n\nReview Comment:\n   Thanks! I missed that :)\n\n\n\n##########\npython/pyarrow/tests/test_compute.py:\n##########\n@@ -2743,6 +2745,43 @@ def test_random():\n         pc.random(100, initializer=[])\n \n \n+@pytest.mark.parametrize(\n+    \"tiebreaker,expected_values\",\n+    [(\"min\", [3, 1, 4, 6, 4, 6, 1]),\n+     (\"max\", [3, 2, 5, 7, 5, 7, 2]),\n+     (\"first\", [3, 1, 4, 6, 5, 7, 2]),\n+     (\"dense\", [2, 1, 3, 4, 3, 4, 1])]\n+)\n+def test_rank_options_tiebreaker(tiebreaker, expected_values):\n+    arr = pa.array([1.2, 0.0, 5.3, None, 5.3, None, 0.0])\n+    rank_options = pc.RankOptions(sort_keys=[(\"b\", \"ascending\")],\n+                                  null_placement=\"at_end\",\n+                                  tiebreaker=tiebreaker)\n+    result = pc.rank(arr, options=rank_options)\n+    expected = pa.array(expected_values, type=pa.uint64())\n+    assert result.equals(expected)\n+\n+\n+def test_rank_options():\n+    arr = pa.array([1.2, 0.0, 5.3, None, 5.3, None, 0.0])\n+    expected = pa.array([3, 1, 4, 6, 5, 7, 2], type=pa.uint64())\n+\n+    # Ensure rank can be called without specifying options\n+    result = pc.rank(arr)\n+    assert result.equals(expected)\n+\n+    # Ensure default RankOptions\n+    result = pc.rank(arr, options=pc.RankOptions())\n+    assert result.equals(expected)\n+\n\nReview Comment:\n   Done\n\n\n\n",
                    "created": "2022-06-08T10:53:17.996+0000",
                    "updated": "2022-06-08T10:53:17.996+0000",
                    "started": "2022-06-08T10:53:17.996+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779414",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r892270235\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"min\": CRankOptionsTiebreaker_Min,\n+        \"max\": CRankOptionsTiebreaker_Max,\n+        \"first\": CRankOptionsTiebreaker_First,\n+        \"dense\": CRankOptionsTiebreaker_Dense,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples, optional\n+        Names of field/column keys to sort the input on,\n+        along with the order each field/column is sorted in.\n+        Accepted values for `order` are \"ascending\", \"descending\".\n\nReview Comment:\n   > The default is injecting an empty field and applying Ascending, right?\r\n   \r\n   Yes!\r\n   \r\n   > So would you add that the default is just \"ascending\" or the default is [(\"\", \"ascending\")]\r\n   \r\n   The latter, probably.\r\n   \n\n\n\n",
                    "created": "2022-06-08T12:00:04.596+0000",
                    "updated": "2022-06-08T12:00:04.596+0000",
                    "started": "2022-06-08T12:00:04.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779443",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779444",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r892270615\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"min\": CRankOptionsTiebreaker_Min,\n+        \"max\": CRankOptionsTiebreaker_Max,\n+        \"first\": CRankOptionsTiebreaker_First,\n+        \"dense\": CRankOptionsTiebreaker_Dense,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples, optional\n+        Names of field/column keys to sort the input on,\n+        along with the order each field/column is sorted in.\n+        Accepted values for `order` are \"ascending\", \"descending\".\n\nReview Comment:\n   We may also want to allow the user to pass \"ascending\" or \"descending\" for `sort_keys`, rather than a list of tuples.\n\n\n\n",
                    "created": "2022-06-08T12:00:29.463+0000",
                    "updated": "2022-06-08T12:00:29.463+0000",
                    "started": "2022-06-08T12:00:29.463+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779444",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r892323043\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"min\": CRankOptionsTiebreaker_Min,\n+        \"max\": CRankOptionsTiebreaker_Max,\n+        \"first\": CRankOptionsTiebreaker_First,\n+        \"dense\": CRankOptionsTiebreaker_Dense,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples, optional\n+        Names of field/column keys to sort the input on,\n+        along with the order each field/column is sorted in.\n+        Accepted values for `order` are \"ascending\", \"descending\".\n\nReview Comment:\n   @pitrou I've removed the use of `sort_keys` and implemented only `order`. From what I understand the rank function is always going to be used on an array so I am not sure at this point it makes much sense to expose the `sort_keys` instead of using just `ascending`/`descending` as you suggested.\r\n   See this commit 221505f4876b97367cf60fbaec219753552c75ec\n\n\n\n",
                    "created": "2022-06-08T12:54:38.299+0000",
                    "updated": "2022-06-08T12:54:38.299+0000",
                    "started": "2022-06-08T12:54:38.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779468",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r892328954\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"min\": CRankOptionsTiebreaker_Min,\n+        \"max\": CRankOptionsTiebreaker_Max,\n+        \"first\": CRankOptionsTiebreaker_First,\n+        \"dense\": CRankOptionsTiebreaker_Dense,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples, optional\n+        Names of field/column keys to sort the input on,\n+        along with the order each field/column is sorted in.\n+        Accepted values for `order` are \"ascending\", \"descending\".\n\nReview Comment:\n   Well, the rank function should be usable on record batches and tables at some point, though that's unimplemented for now.\n\n\n\n",
                    "created": "2022-06-08T12:58:13.615+0000",
                    "updated": "2022-06-08T12:58:13.615+0000",
                    "started": "2022-06-08T12:58:13.615+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779470",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r892983874\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"Min\": CRankOptionsTiebreaker_MIN,\n+        \"Max\": CRankOptionsTiebreaker_MAX,\n+        \"First\": CRankOptionsTiebreaker_FIRST,\n+        \"Dense\": CRankOptionsTiebreaker_DENSE,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples\n\nReview Comment:\n   > Although for `sort_indices` we have a separate array-specific kernel with a separate ArraySortOptions (which is simpler, not requiring a column name), in addition to the general SortOptions. So that's a bit different here.\r\n   \r\n   If it makes it easier I can add this back into the C++ implementation\n\n\n\n",
                    "created": "2022-06-09T01:04:29.355+0000",
                    "updated": "2022-06-09T01:04:29.355+0000",
                    "started": "2022-06-09T01:04:29.354+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779730",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r892983874\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"Min\": CRankOptionsTiebreaker_MIN,\n+        \"Max\": CRankOptionsTiebreaker_MAX,\n+        \"First\": CRankOptionsTiebreaker_FIRST,\n+        \"Dense\": CRankOptionsTiebreaker_DENSE,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples\n\nReview Comment:\n   > Although for `sort_indices` we have a separate array-specific kernel with a separate ArraySortOptions (which is simpler, not requiring a column name), in addition to the general SortOptions. So that's a bit different here.\r\n   \r\n   If it makes it easier I can add this back into the C++ implementation. We did build it out just removed at the end to simplify\n\n\n\n",
                    "created": "2022-06-09T01:05:09.345+0000",
                    "updated": "2022-06-09T01:05:09.345+0000",
                    "started": "2022-06-09T01:05:09.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779731",
                    "issueId": "13447903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/worklog/779814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13327:\nURL: https://github.com/apache/arrow/pull/13327#discussion_r893249117\n\n\n##########\npython/pyarrow/_compute.pyx:\n##########\n@@ -2047,6 +2047,60 @@ class RandomOptions(_RandomOptions):\n         self._set_options(length, initializer)\n \n \n+cdef class _RankOptions(FunctionOptions):\n+\n+    _tiebreaker_map = {\n+        \"Min\": CRankOptionsTiebreaker_MIN,\n+        \"Max\": CRankOptionsTiebreaker_MAX,\n+        \"First\": CRankOptionsTiebreaker_FIRST,\n+        \"Dense\": CRankOptionsTiebreaker_DENSE,\n+    }\n+\n+    def _set_options(self, sort_keys, null_placement, tiebreaker):\n+        cdef vector[CSortKey] c_sort_keys\n+        for name, order in sort_keys:\n+            c_sort_keys.push_back(\n+                CSortKey(tobytes(name), unwrap_sort_order(order))\n+            )\n+        try:\n+            self.wrapped.reset(\n+                new CRankOptions(c_sort_keys, unwrap_null_placement(null_placement), self._tiebreaker_map[tiebreaker])\n+            )\n+        except KeyError:\n+            _raise_invalid_function_option(tiebreaker, \"tiebreaker\")\n+\n+\n+class RankOptions(_RankOptions):\n+    \"\"\"\n+    Options for the `rank` function.\n+\n+    Parameters\n+    ----------\n+    sort_keys : sequence of (name, order) tuples\n\nReview Comment:\n   > If it makes it easier I can add this back into the C++ implementation.\r\n   \r\n   I would rather not. The array-specific kernel for sorting is not a very user-friendly API pattern. Let's just make `RankOptions` usable enough in Python :-)\n\n\n\n",
                    "created": "2022-06-09T08:56:04.920+0000",
                    "updated": "2022-06-09T08:56:04.920+0000",
                    "started": "2022-06-09T08:56:04.920+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779814",
                    "issueId": "13447903"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 13800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5998651b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c6a2d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3033af63[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@534db64a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ea0e653[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6962d586[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4487377e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7a462642[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@735dc527[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@c6cf02f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@712d0a1b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3a12464a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jun 16 10:27:28 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-06-16T10:27:28.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16706/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2022-06-01T10:59:54.000+0000",
        "updated": "2022-06-16T10:27:28.000+0000",
        "timeoriginalestimate": null,
        "description": "Followup to ARROW-16234",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Expose RankOptions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/comment/17544815",
                    "id": "17544815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "cc [~alenkaf] [~raulcd]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-06-01T11:04:19.546+0000",
                    "updated": "2022-06-01T11:04:19.546+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903/comment/17555018",
                    "id": "17555018",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 13327\n[https://github.com/apache/arrow/pull/13327]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-06-16T10:27:28.201+0000",
                    "updated": "2022-06-16T10:27:28.201+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z12v68:",
        "customfield_12314139": null
    }
}