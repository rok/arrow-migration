{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13216270",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270",
    "key": "ARROW-4605",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ntrinquier",
            "name": "ntrinquier",
            "key": "ntrinquier",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Nicolas Trinquier",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4605/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/worklog/203220",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ntrinquier commented on pull request #3741: ARROW-4605: [Rust] Move filter and limit code from DataFusion into compute module\nURL: https://github.com/apache/arrow/pull/3741\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T12:41:41.710+0000",
                    "updated": "2019-02-24T12:41:41.710+0000",
                    "started": "2019-02-24T12:41:41.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203220",
                    "issueId": "13216270"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/worklog/203257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3741: ARROW-4605: [Rust] Move filter and limit code from DataFusion into compute module\nURL: https://github.com/apache/arrow/pull/3741#discussion_r259628576\n \n \n\n ##########\n File path: rust/arrow/src/compute/array_ops.rs\n ##########\n @@ -204,6 +209,101 @@ where\n     Ok(b.finish())\n }\n \n+macro_rules! filter_array {\n+    ($array:expr, $filter:expr, $array_type:ident) => {{\n+        let b = $array.as_any().downcast_ref::<$array_type>().unwrap();\n+        let mut builder = $array_type::builder(b.len());\n+        for i in 0..b.len() {\n+            if $filter.value(i) {\n+                builder.append_value(b.value(i))?;\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+pub fn filter(array: &Array, filter: &BooleanArray) -> Result<ArrayRef> {\n+    match array.data_type() {\n+        DataType::UInt8 => filter_array!(array, filter, UInt8Array),\n+        DataType::UInt16 => filter_array!(array, filter, UInt16Array),\n+        DataType::UInt32 => filter_array!(array, filter, UInt32Array),\n+        DataType::UInt64 => filter_array!(array, filter, UInt64Array),\n+        DataType::Int8 => filter_array!(array, filter, Int8Array),\n+        DataType::Int16 => filter_array!(array, filter, Int16Array),\n+        DataType::Int32 => filter_array!(array, filter, Int32Array),\n+        DataType::Int64 => filter_array!(array, filter, Int64Array),\n+        DataType::Float32 => filter_array!(array, filter, Float32Array),\n+        DataType::Float64 => filter_array!(array, filter, Float64Array),\n+        DataType::Boolean => filter_array!(array, filter, BooleanArray),\n+        DataType::Utf8 => {\n+            //TODO: this is inefficient and we should improve the Arrow impl to help make\n+            // this more concise\n+            let b = array.as_any().downcast_ref::<BinaryArray>().unwrap();\n+            let mut values: Vec<String> = Vec::with_capacity(b.len());\n+            for i in 0..b.len() {\n+                if filter.value(i) {\n+                    values.push(b.get_string(i));\n+                }\n+            }\n+            let tmp: Vec<&str> = values.iter().map(|s| s.as_str()).collect();\n+            Ok(Arc::new(BinaryArray::from(tmp)))\n+        }\n+        other => Err(ArrowError::ComputeError(format!(\n+            \"filter not supported for {:?}\",\n+            other\n+        ))),\n+    }\n+}\n+\n+macro_rules! limit_array {\n+    ($array:expr, $num_rows_to_read:expr, $array_type:ident) => {{\n+        let b = $array.as_any().downcast_ref::<$array_type>().unwrap();\n+        let mut builder = $array_type::builder($num_rows_to_read);\n+        for i in 0..$num_rows_to_read {\n+            builder.append_value(b.value(i))?;\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+pub fn limit(array: &Array, num_rows_to_read: usize) -> Result<ArrayRef> {\n+    if array.len() < num_rows_to_read {\n \n Review comment:\n   I'm curious as to why we return an error here. Why not set the limit to the lower of the 2 instead?\r\n   \r\n   `vec![1,2,3,4,5].iter().take(7)` doesn't throw an error, and `SELECT * FROM table_with_100_records LIMIT 200` will also only return the 100 records. What do you think about the suggestion?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T16:23:32.595+0000",
                    "updated": "2019-02-24T16:23:32.595+0000",
                    "started": "2019-02-24T16:23:32.594+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203257",
                    "issueId": "13216270"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/worklog/203264",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ntrinquier commented on pull request #3741: ARROW-4605: [Rust] Move filter and limit code from DataFusion into compute module\nURL: https://github.com/apache/arrow/pull/3741#discussion_r259630360\n \n \n\n ##########\n File path: rust/arrow/src/compute/array_ops.rs\n ##########\n @@ -204,6 +209,101 @@ where\n     Ok(b.finish())\n }\n \n+macro_rules! filter_array {\n+    ($array:expr, $filter:expr, $array_type:ident) => {{\n+        let b = $array.as_any().downcast_ref::<$array_type>().unwrap();\n+        let mut builder = $array_type::builder(b.len());\n+        for i in 0..b.len() {\n+            if $filter.value(i) {\n+                builder.append_value(b.value(i))?;\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+pub fn filter(array: &Array, filter: &BooleanArray) -> Result<ArrayRef> {\n+    match array.data_type() {\n+        DataType::UInt8 => filter_array!(array, filter, UInt8Array),\n+        DataType::UInt16 => filter_array!(array, filter, UInt16Array),\n+        DataType::UInt32 => filter_array!(array, filter, UInt32Array),\n+        DataType::UInt64 => filter_array!(array, filter, UInt64Array),\n+        DataType::Int8 => filter_array!(array, filter, Int8Array),\n+        DataType::Int16 => filter_array!(array, filter, Int16Array),\n+        DataType::Int32 => filter_array!(array, filter, Int32Array),\n+        DataType::Int64 => filter_array!(array, filter, Int64Array),\n+        DataType::Float32 => filter_array!(array, filter, Float32Array),\n+        DataType::Float64 => filter_array!(array, filter, Float64Array),\n+        DataType::Boolean => filter_array!(array, filter, BooleanArray),\n+        DataType::Utf8 => {\n+            //TODO: this is inefficient and we should improve the Arrow impl to help make\n+            // this more concise\n+            let b = array.as_any().downcast_ref::<BinaryArray>().unwrap();\n+            let mut values: Vec<String> = Vec::with_capacity(b.len());\n+            for i in 0..b.len() {\n+                if filter.value(i) {\n+                    values.push(b.get_string(i));\n+                }\n+            }\n+            let tmp: Vec<&str> = values.iter().map(|s| s.as_str()).collect();\n+            Ok(Arc::new(BinaryArray::from(tmp)))\n+        }\n+        other => Err(ArrowError::ComputeError(format!(\n+            \"filter not supported for {:?}\",\n+            other\n+        ))),\n+    }\n+}\n+\n+macro_rules! limit_array {\n+    ($array:expr, $num_rows_to_read:expr, $array_type:ident) => {{\n+        let b = $array.as_any().downcast_ref::<$array_type>().unwrap();\n+        let mut builder = $array_type::builder($num_rows_to_read);\n+        for i in 0..$num_rows_to_read {\n+            builder.append_value(b.value(i))?;\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+pub fn limit(array: &Array, num_rows_to_read: usize) -> Result<ArrayRef> {\n+    if array.len() < num_rows_to_read {\n \n Review comment:\n   My initial thought was that if someone calls this function with a `num_rows_to_read` larger than `array.len()`, they will probably want to know rather than silently choosing the minimum.\r\n   \r\n   However given `take` and `LIMIT` behavior this is indeed probably not what is expected from this function. I will change it, good call.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T17:06:58.330+0000",
                    "updated": "2019-02-24T17:06:58.330+0000",
                    "started": "2019-02-24T17:06:58.329+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203264",
                    "issueId": "13216270"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/worklog/203270",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3741: ARROW-4605: [Rust] Move filter and limit code from DataFusion into compute module\nURL: https://github.com/apache/arrow/pull/3741#discussion_r259631415\n \n \n\n ##########\n File path: rust/arrow/src/compute/array_ops.rs\n ##########\n @@ -204,6 +209,101 @@ where\n     Ok(b.finish())\n }\n \n+macro_rules! filter_array {\n+    ($array:expr, $filter:expr, $array_type:ident) => {{\n+        let b = $array.as_any().downcast_ref::<$array_type>().unwrap();\n+        let mut builder = $array_type::builder(b.len());\n+        for i in 0..b.len() {\n+            if $filter.value(i) {\n+                builder.append_value(b.value(i))?;\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+pub fn filter(array: &Array, filter: &BooleanArray) -> Result<ArrayRef> {\n+    match array.data_type() {\n+        DataType::UInt8 => filter_array!(array, filter, UInt8Array),\n+        DataType::UInt16 => filter_array!(array, filter, UInt16Array),\n+        DataType::UInt32 => filter_array!(array, filter, UInt32Array),\n+        DataType::UInt64 => filter_array!(array, filter, UInt64Array),\n+        DataType::Int8 => filter_array!(array, filter, Int8Array),\n+        DataType::Int16 => filter_array!(array, filter, Int16Array),\n+        DataType::Int32 => filter_array!(array, filter, Int32Array),\n+        DataType::Int64 => filter_array!(array, filter, Int64Array),\n+        DataType::Float32 => filter_array!(array, filter, Float32Array),\n+        DataType::Float64 => filter_array!(array, filter, Float64Array),\n+        DataType::Boolean => filter_array!(array, filter, BooleanArray),\n+        DataType::Utf8 => {\n+            //TODO: this is inefficient and we should improve the Arrow impl to help make\n+            // this more concise\n+            let b = array.as_any().downcast_ref::<BinaryArray>().unwrap();\n+            let mut values: Vec<String> = Vec::with_capacity(b.len());\n+            for i in 0..b.len() {\n+                if filter.value(i) {\n+                    values.push(b.get_string(i));\n+                }\n+            }\n+            let tmp: Vec<&str> = values.iter().map(|s| s.as_str()).collect();\n+            Ok(Arc::new(BinaryArray::from(tmp)))\n+        }\n+        other => Err(ArrowError::ComputeError(format!(\n+            \"filter not supported for {:?}\",\n+            other\n+        ))),\n+    }\n+}\n+\n+macro_rules! limit_array {\n+    ($array:expr, $num_rows_to_read:expr, $array_type:ident) => {{\n+        let b = $array.as_any().downcast_ref::<$array_type>().unwrap();\n+        let mut builder = $array_type::builder($num_rows_to_read);\n+        for i in 0..$num_rows_to_read {\n+            builder.append_value(b.value(i))?;\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+pub fn limit(array: &Array, num_rows_to_read: usize) -> Result<ArrayRef> {\n+    if array.len() < num_rows_to_read {\n \n Review comment:\n   I think if you limit the `num_rows_to_read` to the array length.\r\n   Have a look at https://issues.apache.org/jira/browse/ARROW-3954, which will make filter more efficient in future.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T17:28:51.598+0000",
                    "updated": "2019-02-24T17:28:51.598+0000",
                    "started": "2019-02-24T17:28:51.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203270",
                    "issueId": "13216270"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/worklog/203279",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3741: ARROW-4605: [Rust] Move filter and limit code from DataFusion into compute module\nURL: https://github.com/apache/arrow/pull/3741#discussion_r259634096\n \n \n\n ##########\n File path: rust/arrow/src/compute/array_ops.rs\n ##########\n @@ -204,6 +210,93 @@ where\n     Ok(b.finish())\n }\n \n+macro_rules! filter_array {\n+    ($array:expr, $filter:expr, $array_type:ident) => {{\n+        let b = $array.as_any().downcast_ref::<$array_type>().unwrap();\n+        let mut builder = $array_type::builder(b.len());\n+        for i in 0..b.len() {\n+            if $filter.value(i) {\n+                builder.append_value(b.value(i))?;\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+pub fn filter(array: &Array, filter: &BooleanArray) -> Result<ArrayRef> {\n+    match array.data_type() {\n+        DataType::UInt8 => filter_array!(array, filter, UInt8Array),\n+        DataType::UInt16 => filter_array!(array, filter, UInt16Array),\n+        DataType::UInt32 => filter_array!(array, filter, UInt32Array),\n+        DataType::UInt64 => filter_array!(array, filter, UInt64Array),\n+        DataType::Int8 => filter_array!(array, filter, Int8Array),\n+        DataType::Int16 => filter_array!(array, filter, Int16Array),\n+        DataType::Int32 => filter_array!(array, filter, Int32Array),\n+        DataType::Int64 => filter_array!(array, filter, Int64Array),\n+        DataType::Float32 => filter_array!(array, filter, Float32Array),\n+        DataType::Float64 => filter_array!(array, filter, Float64Array),\n+        DataType::Boolean => filter_array!(array, filter, BooleanArray),\n+        DataType::Utf8 => {\n+            let b = array.as_any().downcast_ref::<BinaryArray>().unwrap();\n+            let mut values: Vec<&[u8]> = Vec::with_capacity(b.len());\n+            for i in 0..b.len() {\n+                if filter.value(i) {\n+                    values.push(b.value(i));\n+                }\n+            }\n+            Ok(Arc::new(BinaryArray::from(values)))\n+        }\n+        other => Err(ArrowError::ComputeError(format!(\n+            \"filter not supported for {:?}\",\n+            other\n+        ))),\n+    }\n+}\n+\n+macro_rules! limit_array {\n+    ($array:expr, $num_elements:expr, $array_type:ident) => {{\n+        let b = $array.as_any().downcast_ref::<$array_type>().unwrap();\n+        let mut builder = $array_type::builder($num_elements);\n+        for i in 0..$num_elements {\n+            builder.append_value(b.value(i))?;\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+/// Returns the array, taking only the number of elements specified\n+///\n+/// Returns the whole array if the number of elements specified is larger than the length of the array\n+pub fn limit(array: &Array, num_elements: usize) -> Result<ArrayRef> {\n+    let num_elements_safe: usize = cmp::min(array.len(), num_elements);\n \n Review comment:\n   One last nit, we could return the array as `ArrayRef` immediately if the limit >= len. I sold have thought of it earlier, my apologies.\r\n   \r\n   I'm happy with everything else\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T18:51:33.333+0000",
                    "updated": "2019-02-24T18:51:33.333+0000",
                    "started": "2019-02-24T18:51:33.332+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203279",
                    "issueId": "13216270"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/worklog/203288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ntrinquier commented on pull request #3741: ARROW-4605: [Rust] Move filter and limit code from DataFusion into compute module\nURL: https://github.com/apache/arrow/pull/3741#discussion_r259637062\n \n \n\n ##########\n File path: rust/arrow/src/compute/array_ops.rs\n ##########\n @@ -204,6 +210,93 @@ where\n     Ok(b.finish())\n }\n \n+macro_rules! filter_array {\n+    ($array:expr, $filter:expr, $array_type:ident) => {{\n+        let b = $array.as_any().downcast_ref::<$array_type>().unwrap();\n+        let mut builder = $array_type::builder(b.len());\n+        for i in 0..b.len() {\n+            if $filter.value(i) {\n+                builder.append_value(b.value(i))?;\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+pub fn filter(array: &Array, filter: &BooleanArray) -> Result<ArrayRef> {\n+    match array.data_type() {\n+        DataType::UInt8 => filter_array!(array, filter, UInt8Array),\n+        DataType::UInt16 => filter_array!(array, filter, UInt16Array),\n+        DataType::UInt32 => filter_array!(array, filter, UInt32Array),\n+        DataType::UInt64 => filter_array!(array, filter, UInt64Array),\n+        DataType::Int8 => filter_array!(array, filter, Int8Array),\n+        DataType::Int16 => filter_array!(array, filter, Int16Array),\n+        DataType::Int32 => filter_array!(array, filter, Int32Array),\n+        DataType::Int64 => filter_array!(array, filter, Int64Array),\n+        DataType::Float32 => filter_array!(array, filter, Float32Array),\n+        DataType::Float64 => filter_array!(array, filter, Float64Array),\n+        DataType::Boolean => filter_array!(array, filter, BooleanArray),\n+        DataType::Utf8 => {\n+            let b = array.as_any().downcast_ref::<BinaryArray>().unwrap();\n+            let mut values: Vec<&[u8]> = Vec::with_capacity(b.len());\n+            for i in 0..b.len() {\n+                if filter.value(i) {\n+                    values.push(b.value(i));\n+                }\n+            }\n+            Ok(Arc::new(BinaryArray::from(values)))\n+        }\n+        other => Err(ArrowError::ComputeError(format!(\n+            \"filter not supported for {:?}\",\n+            other\n+        ))),\n+    }\n+}\n+\n+macro_rules! limit_array {\n+    ($array:expr, $num_elements:expr, $array_type:ident) => {{\n+        let b = $array.as_any().downcast_ref::<$array_type>().unwrap();\n+        let mut builder = $array_type::builder($num_elements);\n+        for i in 0..$num_elements {\n+            builder.append_value(b.value(i))?;\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+/// Returns the array, taking only the number of elements specified\n+///\n+/// Returns the whole array if the number of elements specified is larger than the length of the array\n+pub fn limit(array: &Array, num_elements: usize) -> Result<ArrayRef> {\n+    let num_elements_safe: usize = cmp::min(array.len(), num_elements);\n \n Review comment:\n   Maybe you can help me here: how can I wrap the reference to `array` in an `Arc<Array>` / `ArrayRef`? Since the reference to `array` can be freed at any time it would leave the `Arc` invalid, so I have to specify the lifetime somehow. Can I do that with `Arc`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T19:45:41.174+0000",
                    "updated": "2019-02-24T19:45:41.174+0000",
                    "started": "2019-02-24T19:45:41.170+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203288",
                    "issueId": "13216270"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/worklog/203290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3741: ARROW-4605: [Rust] Move filter and limit code from DataFusion into compute module\nURL: https://github.com/apache/arrow/pull/3741#discussion_r259637226\n \n \n\n ##########\n File path: rust/arrow/src/compute/array_ops.rs\n ##########\n @@ -204,6 +210,93 @@ where\n     Ok(b.finish())\n }\n \n+macro_rules! filter_array {\n+    ($array:expr, $filter:expr, $array_type:ident) => {{\n+        let b = $array.as_any().downcast_ref::<$array_type>().unwrap();\n+        let mut builder = $array_type::builder(b.len());\n+        for i in 0..b.len() {\n+            if $filter.value(i) {\n+                builder.append_value(b.value(i))?;\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+pub fn filter(array: &Array, filter: &BooleanArray) -> Result<ArrayRef> {\n+    match array.data_type() {\n+        DataType::UInt8 => filter_array!(array, filter, UInt8Array),\n+        DataType::UInt16 => filter_array!(array, filter, UInt16Array),\n+        DataType::UInt32 => filter_array!(array, filter, UInt32Array),\n+        DataType::UInt64 => filter_array!(array, filter, UInt64Array),\n+        DataType::Int8 => filter_array!(array, filter, Int8Array),\n+        DataType::Int16 => filter_array!(array, filter, Int16Array),\n+        DataType::Int32 => filter_array!(array, filter, Int32Array),\n+        DataType::Int64 => filter_array!(array, filter, Int64Array),\n+        DataType::Float32 => filter_array!(array, filter, Float32Array),\n+        DataType::Float64 => filter_array!(array, filter, Float64Array),\n+        DataType::Boolean => filter_array!(array, filter, BooleanArray),\n+        DataType::Utf8 => {\n+            let b = array.as_any().downcast_ref::<BinaryArray>().unwrap();\n+            let mut values: Vec<&[u8]> = Vec::with_capacity(b.len());\n+            for i in 0..b.len() {\n+                if filter.value(i) {\n+                    values.push(b.value(i));\n+                }\n+            }\n+            Ok(Arc::new(BinaryArray::from(values)))\n+        }\n+        other => Err(ArrowError::ComputeError(format!(\n+            \"filter not supported for {:?}\",\n+            other\n+        ))),\n+    }\n+}\n+\n+macro_rules! limit_array {\n+    ($array:expr, $num_elements:expr, $array_type:ident) => {{\n+        let b = $array.as_any().downcast_ref::<$array_type>().unwrap();\n+        let mut builder = $array_type::builder($num_elements);\n+        for i in 0..$num_elements {\n+            builder.append_value(b.value(i))?;\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+/// Returns the array, taking only the number of elements specified\n+///\n+/// Returns the whole array if the number of elements specified is larger than the length of the array\n+pub fn limit(array: &Array, num_elements: usize) -> Result<ArrayRef> {\n+    let num_elements_safe: usize = cmp::min(array.len(), num_elements);\n \n Review comment:\n   No, you're right, I missed that part. We can improve limit when we have zero-copy array slicing \ud83d\udc4d\ud83c\udffe\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T19:51:09.345+0000",
                    "updated": "2019-02-24T19:51:09.345+0000",
                    "started": "2019-02-24T19:51:09.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203290",
                    "issueId": "13216270"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/worklog/203315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3741: ARROW-4605: [Rust] Move filter and limit code from DataFusion into compute module\nURL: https://github.com/apache/arrow/pull/3741#discussion_r259639394\n \n \n\n ##########\n File path: rust/arrow/src/array.rs\n ##########\n @@ -627,6 +627,26 @@ impl<'a> From<Vec<&'a str>> for BinaryArray {\n     }\n }\n \n+impl<'a> From<Vec<&[u8]>> for BinaryArray {\n+    fn from(v: Vec<&[u8]>) -> Self {\n+        let mut offsets = vec![];\n \n Review comment:\n   It would be more efficient to initialize these vectors with `Vec::with_capacity(v.len())`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:50:08.237+0000",
                    "updated": "2019-02-24T20:50:08.237+0000",
                    "started": "2019-02-24T20:50:08.236+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203315",
                    "issueId": "13216270"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/worklog/203329",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3741: ARROW-4605: [Rust] Move filter and limit code from DataFusion into compute module\nURL: https://github.com/apache/arrow/pull/3741#discussion_r259643137\n \n \n\n ##########\n File path: rust/arrow/src/array.rs\n ##########\n @@ -609,8 +609,8 @@ impl From<ArrayDataRef> for BinaryArray {\n \n impl<'a> From<Vec<&'a str>> for BinaryArray {\n     fn from(v: Vec<&'a str>) -> Self {\n-        let mut offsets = vec![];\n-        let mut values = vec![];\n+        let mut offsets = Vec::with_capacity(v.len());;\n \n Review comment:\n   Sorry, I guess this should be `Vec::with_capacity(v.len() + 1)`. Also you have an extra `;`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T22:02:47.402+0000",
                    "updated": "2019-02-24T22:02:47.402+0000",
                    "started": "2019-02-24T22:02:47.402+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203329",
                    "issueId": "13216270"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/worklog/203331",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ntrinquier commented on pull request #3741: ARROW-4605: [Rust] Move filter and limit code from DataFusion into compute module\nURL: https://github.com/apache/arrow/pull/3741#discussion_r259643713\n \n \n\n ##########\n File path: rust/arrow/src/array.rs\n ##########\n @@ -609,8 +609,8 @@ impl From<ArrayDataRef> for BinaryArray {\n \n impl<'a> From<Vec<&'a str>> for BinaryArray {\n     fn from(v: Vec<&'a str>) -> Self {\n-        let mut offsets = vec![];\n-        let mut values = vec![];\n+        let mut offsets = Vec::with_capacity(v.len());;\n \n Review comment:\n   Thanks!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T22:14:50.538+0000",
                    "updated": "2019-02-24T22:14:50.538+0000",
                    "started": "2019-02-24T22:14:50.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203331",
                    "issueId": "13216270"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/worklog/203336",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3741: ARROW-4605: [Rust] Move filter and limit code from DataFusion into compute module\nURL: https://github.com/apache/arrow/pull/3741#discussion_r259643354\n \n \n\n ##########\n File path: rust/arrow/src/array.rs\n ##########\n @@ -609,8 +609,8 @@ impl From<ArrayDataRef> for BinaryArray {\n \n impl<'a> From<Vec<&'a str>> for BinaryArray {\n     fn from(v: Vec<&'a str>) -> Self {\n-        let mut offsets = vec![];\n-        let mut values = vec![];\n+        let mut offsets = Vec::with_capacity(v.len() + 1);\n+        let mut values = Vec::with_capacity(v.len() + 1);\n \n Review comment:\n   After reviewing this again, I realize that this change is good for `offsets` but maybe not for `values`. We can only allocate `values` to the correct size if we first go and sum the lengths of all of the input strings, which would be expensive. Maybe we should just go back to `vec![]` or `Vec::new()` for this one?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T22:46:30.653+0000",
                    "updated": "2019-02-24T22:46:30.653+0000",
                    "started": "2019-02-24T22:46:30.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203336",
                    "issueId": "13216270"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/worklog/203339",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ntrinquier commented on pull request #3741: ARROW-4605: [Rust] Move filter and limit code from DataFusion into compute module\nURL: https://github.com/apache/arrow/pull/3741#discussion_r259646580\n \n \n\n ##########\n File path: rust/arrow/src/array.rs\n ##########\n @@ -609,8 +609,8 @@ impl From<ArrayDataRef> for BinaryArray {\n \n impl<'a> From<Vec<&'a str>> for BinaryArray {\n     fn from(v: Vec<&'a str>) -> Self {\n-        let mut offsets = vec![];\n-        let mut values = vec![];\n+        let mut offsets = Vec::with_capacity(v.len() + 1);\n+        let mut values = Vec::with_capacity(v.len() + 1);\n \n Review comment:\n   Ah, yes. Also since `v` can contain empty strings, we do not even have a lower bound for an initial capacity, so I'll revert to `Vec::new()` for `values`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T23:07:21.019+0000",
                    "updated": "2019-02-24T23:07:21.019+0000",
                    "started": "2019-02-24T23:07:21.018+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203339",
                    "issueId": "13216270"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/worklog/203342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3741: ARROW-4605: [Rust] Move filter and limit code from DataFusion into compute module\nURL: https://github.com/apache/arrow/pull/3741\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T23:29:34.167+0000",
                    "updated": "2019-02-24T23:29:34.167+0000",
                    "started": "2019-02-24T23:29:34.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203342",
                    "issueId": "13216270"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7b75f1db[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17ceb653[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e0ebef1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5c10fb4d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36fb4bf7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@57b13f36[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c83fa07[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4712b049[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b5affaf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@75cc3d7d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@761cb201[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@24ded473[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Feb 24 23:29:27 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-02-24T23:29:27.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4605/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2019-02-17T19:22:06.000+0000",
        "updated": "2019-02-24T23:29:34.000+0000",
        "timeoriginalestimate": null,
        "description": "FilterRelation and the new LimitRelation (in ARROW-4464) contain code for filtering and limiting arrays that could now be pushed down into the compute module.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Move filter and limit code from DataFusion into compute module",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/comment/16771388",
                    "id": "16771388",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ntrinquier",
                        "name": "ntrinquier",
                        "key": "ntrinquier",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nicolas Trinquier",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~andygrove] did you mean to move the functions as they are? They both do some kind of filtering on the data, what do you think of re-implementing them as a more generic function?\r\n\r\nSome along those lines:\r\n{code:java}\r\nfn filter(a: &Array, predicate: Fn(usize) -> bool) -> Result<ArrayRef> {\r\n...\r\n\r\n  for i in 0..b.len() {\r\n    if predicate(i) {\r\n      builder.append_value(a.value(i))?\r\n    }\r\n  }\r\n...\r\n}\r\n{code}\r\n\u00a0\r\n\r\nPredicates would look like this:\r\n{code:java}\r\nlet limit_predicate = |index| { index < limit_value }\r\nlet filter_predicate = |index| { filter_bools.value(index) }\r\n{code}\r\nI do not know a/ if this pattern is very rustacean, and b/ if the abstraction is worth it (i.e. in the case of limit we would still allocate a buffer for the full size and iterate through all the elements whereas we could save space and return early).\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ntrinquier",
                        "name": "ntrinquier",
                        "key": "ntrinquier",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nicolas Trinquier",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-02-18T21:35:52.082+0000",
                    "updated": "2019-02-18T21:37:19.161+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/comment/16771404",
                    "id": "16771404",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ntrinquier",
                        "name": "ntrinquier",
                        "key": "ntrinquier",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nicolas Trinquier",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Maybe it's better to have 2 functions and define 2 macros, for limit and filter.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ntrinquier",
                        "name": "ntrinquier",
                        "key": "ntrinquier",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nicolas Trinquier",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-02-18T22:00:29.082+0000",
                    "updated": "2019-02-18T22:00:29.082+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/comment/16771558",
                    "id": "16771558",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Hi [~ntrinquier], for filter, you might consider\u00a0\r\nfn filter(a: &Array, predicate: &BooleanArray)\r\nso the predicate evaluation\u00a0is evaluated once, and a boolean array passed to filter each array.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2019-02-19T04:37:13.314+0000",
                    "updated": "2019-02-19T04:37:13.314+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/comment/16772352",
                    "id": "16772352",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ntrinquier",
                        "name": "ntrinquier",
                        "key": "ntrinquier",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nicolas Trinquier",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[filter|https://github.com/apache/arrow/blob/a65798a0ed3a96cfcd765e84615321da25ae17c8/rust/datafusion/src/execution/filter.rs#L89] has already the signature you suggest [~nevi_me].\r\n\r\nHowever for limit it is only a usize, not an array of bools, so I initially suggested to have one function to do both filter and limit, with the signature:\r\n filter(a: &Array, predicate: Fn(usize) -> bool) -> Result<ArrayRef>\r\n but on second though I am not sure this is worth it because of the performance implications. We might be better off using macros. What do you think?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ntrinquier",
                        "name": "ntrinquier",
                        "key": "ntrinquier",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nicolas Trinquier",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-02-19T21:32:37.195+0000",
                    "updated": "2019-02-19T21:34:20.754+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216270/comment/16776439",
                    "id": "16776439",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 3741\n[https://github.com/apache/arrow/pull/3741]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2019-02-24T23:29:27.950+0000",
                    "updated": "2019-02-24T23:29:27.950+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|yi12mw:",
        "customfield_12314139": null
    }
}