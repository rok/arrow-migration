{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13179103",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179103",
    "key": "ARROW-3060",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3060/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 6,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179103/worklog/135053",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2433: ARROW-3060: [C++] Factor out string-to-X conversion routines\nURL: https://github.com/apache/arrow/pull/2433\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-15T16:44:01.131+0000",
                    "updated": "2018-08-15T16:44:01.131+0000",
                    "started": "2018-08-15T16:44:01.131+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135053",
                    "issueId": "13179103"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179103/worklog/135095",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2433: ARROW-3060: [C++] Factor out string-to-X conversion routines\nURL: https://github.com/apache/arrow/pull/2433#issuecomment-413281428\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=h1) Report\n   > Merging [#2433](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/3edfd7caf2746eeba37d5ac7bfd3665cc159e7ad?src=pr&el=desc) will **increase** coverage by `1.29%`.\n   > The diff coverage is `99.45%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2433/graphs/tree.svg?height=150&width=650&token=LpTCFbqVT1&src=pr)](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2433      +/-   ##\n   ==========================================\n   + Coverage   85.47%   86.76%   +1.29%     \n   ==========================================\n     Files         300      241      -59     \n     Lines       45849    42756    -3093     \n   ==========================================\n   - Hits        39190    37098    -2092     \n   + Misses       6585     5658     -927     \n   + Partials       74        0      -74\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/type\\_traits.h](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90eXBlX3RyYWl0cy5o) | `96.66% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `90.82% <100%> (-0.72%)` | :arrow_down: |\n   | [cpp/src/arrow/util/parsing.h](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3BhcnNpbmcuaA==) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/util/parsing-util-test.cc](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3BhcnNpbmctdXRpbC10ZXN0LmNj) | `99.22% <99.22%> (\u00f8)` | |\n   | [go/arrow/math/float64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2FtZDY0Lmdv) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [rust/src/list.rs](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-cnVzdC9zcmMvbGlzdC5ycw==) | | |\n   | [go/arrow/math/math\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9tYXRoX2FtZDY0Lmdv) | | |\n   | [go/arrow/array/list.go](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbGlzdC5nbw==) | | |\n   | [go/arrow/array/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpYy5nZW4uZ28=) | | |\n   | ... and [57 more](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=footer). Last update [3edfd7c...d5fbf2d](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-15T17:57:36.112+0000",
                    "updated": "2018-08-15T17:57:36.112+0000",
                    "started": "2018-08-15T17:57:36.111+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135095",
                    "issueId": "13179103"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179103/worklog/135911",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2433: ARROW-3060: [C++] Factor out string-to-X conversion routines\nURL: https://github.com/apache/arrow/pull/2433#discussion_r211050531\n \n \n\n ##########\n File path: cpp/src/arrow/util/parsing.h\n ##########\n @@ -0,0 +1,184 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_UTIL_PARSING_H\n+#define ARROW_UTIL_PARSING_H\n+\n+#include <limits>\n+#include <locale>\n+#include <sstream>\n+#include <string>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+/// \\brief A class providing conversion from strings to some Arrow data types\n+///\n+/// Conversion is triggered by calling operator().  It returns true on\n+/// success, false on failure.\n+///\n+/// The class may have a non-trivial construction cost in some cases,\n+/// so it's recommended to use a single instance many times, if doing bulk\n+/// conversion.\n+///\n+template <typename ARROW_TYPE, typename Enable = void>\n+class StringConverter;\n+\n+template <>\n+class StringConverter<BooleanType> {\n+ public:\n+  using value_type = bool;\n+\n+  bool operator()(const char* s, size_t length, value_type* out) {\n+    if (length == 1) {\n+      // \"0\" or \"1\"?\n+      if (s[0] == '0') {\n+        *out = false;\n+        return true;\n+      }\n+      if (s[0] == '1') {\n+        *out = true;\n+        return true;\n+      }\n+      return false;\n+    }\n+    if (length == 4) {\n+      // \"true\"?\n+      *out = true;\n+      return ((s[0] == 't' || s[0] == 'T') && (s[1] == 'r' || s[1] == 'R') &&\n+              (s[2] == 'u' || s[2] == 'U') && (s[3] == 'e' || s[3] == 'E'));\n+    }\n+    if (length == 5) {\n+      // \"false\"?\n+      *out = false;\n+      return ((s[0] == 'f' || s[0] == 'F') && (s[1] == 'a' || s[1] == 'A') &&\n+              (s[2] == 'l' || s[2] == 'L') && (s[3] == 's' || s[3] == 'S') &&\n+              (s[4] == 'e' || s[4] == 'E'));\n+    }\n+    return false;\n+  }\n+};\n+\n+template <class ARROW_TYPE>\n+class StringToFloatConverterMixin {\n \n Review comment:\n   Without knowing for sure these numeric converters could end up being hot paths; I suppose we'll find out once we can do some profiling on large datasets\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-17T23:04:19.194+0000",
                    "updated": "2018-08-17T23:04:19.194+0000",
                    "started": "2018-08-17T23:04:19.194+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135911",
                    "issueId": "13179103"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179103/worklog/135912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2433: ARROW-3060: [C++] Factor out string-to-X conversion routines\nURL: https://github.com/apache/arrow/pull/2433#discussion_r211050601\n \n \n\n ##########\n File path: cpp/src/arrow/util/parsing.h\n ##########\n @@ -0,0 +1,184 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_UTIL_PARSING_H\n+#define ARROW_UTIL_PARSING_H\n+\n+#include <limits>\n+#include <locale>\n+#include <sstream>\n+#include <string>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+/// \\brief A class providing conversion from strings to some Arrow data types\n+///\n+/// Conversion is triggered by calling operator().  It returns true on\n+/// success, false on failure.\n+///\n+/// The class may have a non-trivial construction cost in some cases,\n+/// so it's recommended to use a single instance many times, if doing bulk\n+/// conversion.\n+///\n+template <typename ARROW_TYPE, typename Enable = void>\n+class StringConverter;\n+\n+template <>\n+class StringConverter<BooleanType> {\n+ public:\n+  using value_type = bool;\n+\n+  bool operator()(const char* s, size_t length, value_type* out) {\n+    if (length == 1) {\n+      // \"0\" or \"1\"?\n+      if (s[0] == '0') {\n+        *out = false;\n+        return true;\n+      }\n+      if (s[0] == '1') {\n+        *out = true;\n+        return true;\n+      }\n+      return false;\n+    }\n+    if (length == 4) {\n+      // \"true\"?\n+      *out = true;\n+      return ((s[0] == 't' || s[0] == 'T') && (s[1] == 'r' || s[1] == 'R') &&\n+              (s[2] == 'u' || s[2] == 'U') && (s[3] == 'e' || s[3] == 'E'));\n+    }\n+    if (length == 5) {\n+      // \"false\"?\n+      *out = false;\n+      return ((s[0] == 'f' || s[0] == 'F') && (s[1] == 'a' || s[1] == 'A') &&\n+              (s[2] == 'l' || s[2] == 'L') && (s[3] == 's' || s[3] == 'S') &&\n+              (s[4] == 'e' || s[4] == 'E'));\n+    }\n+    return false;\n+  }\n+};\n+\n+template <class ARROW_TYPE>\n+class StringToFloatConverterMixin {\n+ public:\n+  using value_type = typename ARROW_TYPE::c_type;\n+\n+  StringToFloatConverterMixin() { ibuf.imbue(std::locale::classic()); }\n+\n+  bool operator()(const char* s, size_t length, value_type* out) {\n+    ibuf.clear();\n+    ibuf.str(std::string(s, length));\n+    ibuf >> *out;\n+    // XXX Should we reset errno on failure?\n+    return !ibuf.fail() && ibuf.eof();\n+  }\n+\n+ protected:\n+  std::istringstream ibuf;\n+};\n+\n+template <>\n+class StringConverter<FloatType> : public StringToFloatConverterMixin<FloatType> {};\n+\n+template <>\n+class StringConverter<DoubleType> : public StringToFloatConverterMixin<DoubleType> {};\n+\n+// NOTE: HalfFloatType would require a half<->float conversion library\n+\n+template <class ARROW_TYPE>\n+class StringConverter<ARROW_TYPE, enable_if_signed_integer<ARROW_TYPE>> {\n+ public:\n+  using value_type = typename ARROW_TYPE::c_type;\n+\n+  StringConverter() { ibuf.imbue(std::locale::classic()); }\n+\n+  bool operator()(const char* s, size_t length, value_type* out) {\n+    static constexpr bool need_long_long = sizeof(value_type) > sizeof(long);  // NOLINT\n+    static constexpr value_type min_value = std::numeric_limits<value_type>::min();\n+    static constexpr value_type max_value = std::numeric_limits<value_type>::max();\n+\n+    ibuf.clear();\n+    ibuf.str(std::string(s, length));\n+    if (need_long_long) {\n+      long long res;  // NOLINT\n+      ibuf >> res;\n+      *out = static_cast<value_type>(res);  // may downcast\n+      if (res < min_value || res > max_value) {\n+        return false;\n+      }\n+    } else {\n+      long res;  // NOLINT\n+      ibuf >> res;\n+      *out = static_cast<value_type>(res);  // may downcast\n+      if (res < min_value || res > max_value) {\n+        return false;\n+      }\n+    }\n+    // XXX Should we reset errno on failure?\n+    return !ibuf.fail() && ibuf.eof();\n+  }\n+\n+ protected:\n+  std::istringstream ibuf;\n+};\n+\n+template <class ARROW_TYPE>\n+class StringConverter<ARROW_TYPE, enable_if_unsigned_integer<ARROW_TYPE>> {\n+ public:\n+  using value_type = typename ARROW_TYPE::c_type;\n+\n+  StringConverter() { ibuf.imbue(std::locale::classic()); }\n+\n+  bool operator()(const char* s, size_t length, value_type* out) {\n+    static constexpr bool need_long_long =\n+        sizeof(value_type) > sizeof(unsigned long);  // NOLINT\n+    static constexpr value_type max_value = std::numeric_limits<value_type>::max();\n+\n+    ibuf.clear();\n+    ibuf.str(std::string(s, length));\n+    // XXX The following unfortunately allows negative input values\n+    if (need_long_long) {\n+      unsigned long long res;  // NOLINT\n+      ibuf >> res;\n+      *out = static_cast<value_type>(res);  // may downcast\n+      if (res > max_value) {\n+        return false;\n+      }\n+    } else {\n+      unsigned long res;  // NOLINT\n+      ibuf >> res;\n+      *out = static_cast<value_type>(res);  // may downcast\n+      if (res > max_value) {\n+        return false;\n+      }\n+    }\n+    // XXX Should we reset errno on failure?\n+    return !ibuf.fail() && ibuf.eof();\n+  }\n+\n+ protected:\n+  std::istringstream ibuf;\n+};\n+\n+}  // namespace internal\n+}  // namespace arrow\n+\n+#endif  // ARROW_UTIL_MEMORY_H\n \n Review comment:\n   I opened a JIRA about switching to #pragma once to avoid these sorts of typos\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-17T23:04:19.215+0000",
                    "updated": "2018-08-17T23:04:19.215+0000",
                    "started": "2018-08-17T23:04:19.215+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135912",
                    "issueId": "13179103"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179103/worklog/135929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2433: ARROW-3060: [C++] Factor out string-to-X conversion routines\nURL: https://github.com/apache/arrow/pull/2433#issuecomment-413281428\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=h1) Report\n   > Merging [#2433](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/c82dfcdfac6fd281a8c99fa7a6373103d1ce5874?src=pr&el=desc) will **increase** coverage by `1.28%`.\n   > The diff coverage is `99.45%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2433/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2433      +/-   ##\n   ==========================================\n   + Coverage   85.49%   86.77%   +1.28%     \n   ==========================================\n     Files         301      241      -60     \n     Lines       46273    42744    -3529     \n   ==========================================\n   - Hits        39563    37093    -2470     \n   + Misses       6636     5651     -985     \n   + Partials       74        0      -74\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/type\\_traits.h](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90eXBlX3RyYWl0cy5o) | `96.66% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `90.82% <100%> (-0.72%)` | :arrow_down: |\n   | [cpp/src/arrow/util/parsing.h](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3BhcnNpbmcuaA==) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/util/parsing-util-test.cc](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3BhcnNpbmctdXRpbC10ZXN0LmNj) | `99.22% <99.22%> (\u00f8)` | |\n   | [rust/src/util/test\\_util.rs](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-cnVzdC9zcmMvdXRpbC90ZXN0X3V0aWwucnM=) | | |\n   | [go/arrow/array/binarybuilder.go](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5YnVpbGRlci5nbw==) | | |\n   | [go/arrow/array/list.go](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbGlzdC5nbw==) | | |\n   | [go/arrow/type\\_traits\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV90cmFpdHNfbnVtZXJpYy5nZW4uZ28=) | | |\n   | [go/arrow/datatype\\_fixedwidth.go](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfZml4ZWR3aWR0aC5nbw==) | | |\n   | [go/arrow/array/binary.go](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5Lmdv) | | |\n   | ... and [58 more](https://codecov.io/gh/apache/arrow/pull/2433/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=footer). Last update [c82dfcd...67e3315](https://codecov.io/gh/apache/arrow/pull/2433?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-17T23:46:29.567+0000",
                    "updated": "2018-08-17T23:46:29.567+0000",
                    "started": "2018-08-17T23:46:29.567+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135929",
                    "issueId": "13179103"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179103/worklog/135934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2433: ARROW-3060: [C++] Factor out string-to-X conversion routines\nURL: https://github.com/apache/arrow/pull/2433\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/compute/kernels/cast.cc b/cpp/src/arrow/compute/kernels/cast.cc\nindex 8b14b7b566..1101ce708a 100644\n--- a/cpp/src/arrow/compute/kernels/cast.cc\n+++ b/cpp/src/arrow/compute/kernels/cast.cc\n@@ -17,12 +17,10 @@\n \n #include \"arrow/compute/kernels/cast.h\"\n \n-#include <cerrno>\n #include <cstdint>\n #include <cstring>\n #include <functional>\n #include <limits>\n-#include <locale>\n #include <memory>\n #include <sstream>\n #include <string>\n@@ -40,6 +38,7 @@\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\n #include \"arrow/util/macros.h\"\n+#include \"arrow/util/parsing.h\"\n \n #include \"arrow/compute/context.h\"\n #include \"arrow/compute/kernel.h\"\n@@ -732,72 +731,6 @@ struct CastFunctor<T, DictionaryType,\n // ----------------------------------------------------------------------\n // String to Number\n \n-// Cast a string to a number.  Returns true on success, false on error.\n-// We rely on C++ istringstream for locale-independent parsing, which might\n-// not be the fastest option.\n-\n-template <typename T>\n-typename std::enable_if<std::is_floating_point<T>::value,\n-                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n-                                                              T* out) {\n-  ibuf >> *out;\n-  return !ibuf.fail() && ibuf.eof();\n-}\n-\n-// For integers, not all integer widths are handled by the C++ stdlib, so\n-// we check for limits outselves.\n-\n-template <typename T>\n-typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value,\n-                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n-                                                              T* out) {\n-  static constexpr bool need_long_long = sizeof(T) > sizeof(long);  // NOLINT\n-  static constexpr T min_value = std::numeric_limits<T>::min();\n-  static constexpr T max_value = std::numeric_limits<T>::max();\n-\n-  if (need_long_long) {\n-    long long res;  // NOLINT\n-    ibuf >> res;\n-    *out = static_cast<T>(res);  // may downcast\n-    if (res < min_value || res > max_value) {\n-      return false;\n-    }\n-  } else {\n-    long res;  // NOLINT\n-    ibuf >> res;\n-    *out = static_cast<T>(res);  // may downcast\n-    if (res < min_value || res > max_value) {\n-      return false;\n-    }\n-  }\n-  return !ibuf.fail() && ibuf.eof();\n-}\n-\n-template <typename T>\n-typename std::enable_if<std::is_integral<T>::value && std::is_unsigned<T>::value,\n-                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n-                                                              T* out) {\n-  static constexpr bool need_long_long = sizeof(T) > sizeof(unsigned long);  // NOLINT\n-  static constexpr T max_value = std::numeric_limits<T>::max();\n-\n-  if (need_long_long) {\n-    unsigned long long res;  // NOLINT\n-    ibuf >> res;\n-    *out = static_cast<T>(res);  // may downcast\n-    if (res > max_value) {\n-      return false;\n-    }\n-  } else {\n-    unsigned long res;  // NOLINT\n-    ibuf >> res;\n-    *out = static_cast<T>(res);  // may downcast\n-    if (res > max_value) {\n-      return false;\n-    }\n-  }\n-  return !ibuf.fail() && ibuf.eof();\n-}\n-\n template <typename O>\n struct CastFunctor<O, StringType, enable_if_number<O>> {\n   void operator()(FunctionContext* ctx, const CastOptions& options,\n@@ -806,19 +739,17 @@ struct CastFunctor<O, StringType, enable_if_number<O>> {\n \n     StringArray input_array(input.Copy());\n     auto out_data = GetMutableValues<out_type>(output, 1);\n-    errno = 0;\n-    // Instantiate the stringstream outside of the loop\n-    std::istringstream ibuf;\n-    ibuf.imbue(std::locale::classic());\n+    internal::StringConverter<O> converter;\n \n     for (int64_t i = 0; i < input.length; ++i, ++out_data) {\n       if (input_array.IsNull(i)) {\n         continue;\n       }\n-      auto str = input_array.GetString(i);\n-      ibuf.clear();\n-      ibuf.str(str);\n-      if (!CastStringToNumber(ibuf, out_data)) {\n+\n+      int32_t length = -1;\n+      auto str = input_array.GetValue(i, &length);\n+      if (!converter(reinterpret_cast<const char*>(str), static_cast<size_t>(length),\n+                     out_data)) {\n         std::stringstream ss;\n         ss << \"Failed to cast String '\" << str << \"' into \" << output->type->ToString();\n         ctx->SetStatus(Status(StatusCode::Invalid, ss.str()));\n@@ -831,38 +762,6 @@ struct CastFunctor<O, StringType, enable_if_number<O>> {\n // ----------------------------------------------------------------------\n // String to Boolean\n \n-// Helper function to cast a C string to a boolean.  Returns true on success,\n-// false on error.\n-\n-static bool CastStringtoBoolean(const char* s, size_t length, bool* out) {\n-  if (length == 1) {\n-    // \"0\" or \"1\"?\n-    if (s[0] == '0') {\n-      *out = false;\n-      return true;\n-    }\n-    if (s[0] == '1') {\n-      *out = true;\n-      return true;\n-    }\n-    return false;\n-  }\n-  if (length == 4) {\n-    // \"true\"?\n-    *out = true;\n-    return ((s[0] == 't' || s[0] == 'T') && (s[1] == 'r' || s[1] == 'R') &&\n-            (s[2] == 'u' || s[2] == 'U') && (s[3] == 'e' || s[3] == 'E'));\n-  }\n-  if (length == 5) {\n-    // \"false\"?\n-    *out = false;\n-    return ((s[0] == 'f' || s[0] == 'F') && (s[1] == 'a' || s[1] == 'A') &&\n-            (s[2] == 'l' || s[2] == 'L') && (s[3] == 's' || s[3] == 'S') &&\n-            (s[4] == 'e' || s[4] == 'E'));\n-  }\n-  return false;\n-}\n-\n template <typename O>\n struct CastFunctor<O, StringType,\n                    typename std::enable_if<std::is_same<BooleanType, O>::value>::type> {\n@@ -871,6 +770,7 @@ struct CastFunctor<O, StringType,\n     StringArray input_array(input.Copy());\n     internal::FirstTimeBitmapWriter writer(output->buffers[1]->mutable_data(),\n                                            output->offset, input.length);\n+    internal::StringConverter<O> converter;\n \n     for (int64_t i = 0; i < input.length; ++i) {\n       if (input_array.IsNull(i)) {\n@@ -881,8 +781,8 @@ struct CastFunctor<O, StringType,\n       int32_t length = -1;\n       auto str = input_array.GetValue(i, &length);\n       bool value;\n-      if (!CastStringtoBoolean(reinterpret_cast<const char*>(str),\n-                               static_cast<size_t>(length), &value)) {\n+      if (!converter(reinterpret_cast<const char*>(str), static_cast<size_t>(length),\n+                     &value)) {\n         std::stringstream ss;\n         ss << \"Failed to cast String '\" << input_array.GetString(i) << \"' into \"\n            << output->type->ToString();\ndiff --git a/cpp/src/arrow/type_traits.h b/cpp/src/arrow/type_traits.h\nindex c270a1677a..da5cf25f5e 100644\n--- a/cpp/src/arrow/type_traits.h\n+++ b/cpp/src/arrow/type_traits.h\n@@ -336,6 +336,16 @@ template <typename T>\n using enable_if_integer =\n     typename std::enable_if<std::is_base_of<Integer, T>::value>::type;\n \n+template <typename T>\n+using enable_if_signed_integer =\n+    typename std::enable_if<std::is_base_of<Integer, T>::value &&\n+                            std::is_signed<typename T::c_type>::value>::type;\n+\n+template <typename T>\n+using enable_if_unsigned_integer =\n+    typename std::enable_if<std::is_base_of<Integer, T>::value &&\n+                            std::is_unsigned<typename T::c_type>::value>::type;\n+\n template <typename T>\n using enable_if_floating_point =\n     typename std::enable_if<std::is_base_of<FloatingPoint, T>::value>::type;\ndiff --git a/cpp/src/arrow/util/CMakeLists.txt b/cpp/src/arrow/util/CMakeLists.txt\nindex 16fd44236c..9a4fcebe67 100644\n--- a/cpp/src/arrow/util/CMakeLists.txt\n+++ b/cpp/src/arrow/util/CMakeLists.txt\n@@ -58,6 +58,7 @@ ADD_ARROW_TEST(compression-test)\n ADD_ARROW_TEST(decimal-test)\n ADD_ARROW_TEST(key-value-metadata-test)\n ADD_ARROW_TEST(rle-encoding-test)\n+ADD_ARROW_TEST(parsing-util-test)\n ADD_ARROW_TEST(stl-util-test)\n ADD_ARROW_TEST(thread-pool-test)\n ADD_ARROW_TEST(lazy-test)\ndiff --git a/cpp/src/arrow/util/parsing-util-test.cc b/cpp/src/arrow/util/parsing-util-test.cc\nnew file mode 100644\nindex 0000000000..b126b8211b\n--- /dev/null\n+++ b/cpp/src/arrow/util/parsing-util-test.cc\n@@ -0,0 +1,241 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include <locale>\n+#include <string>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/util/parsing.h\"\n+\n+namespace arrow {\n+\n+using internal::StringConverter;\n+\n+template <typename ConverterType, typename C_TYPE>\n+void AssertConversion(ConverterType& converter, const std::string& s, C_TYPE expected) {\n+  typename ConverterType::value_type out;\n+  ASSERT_TRUE(converter(s.data(), s.length(), &out))\n+      << \"Conversion failed for '\" << s << \"' (expected to return \" << expected << \")\";\n+  ASSERT_EQ(out, expected);\n+}\n+\n+template <typename ConverterType>\n+void AssertConversionFails(ConverterType& converter, const std::string& s) {\n+  typename ConverterType::value_type out;\n+  ASSERT_FALSE(converter(s.data(), s.length(), &out))\n+      << \"Conversion should have failed for '\" << s << \"' (returned \" << out << \")\";\n+}\n+\n+class LocaleGuard {\n+ public:\n+  explicit LocaleGuard(const char* new_locale) : global_locale_(std::locale()) {\n+    try {\n+      std::locale::global(std::locale(new_locale));\n+    } catch (std::runtime_error) {\n+      // Locale unavailable, ignore\n+    }\n+  }\n+\n+  ~LocaleGuard() { std::locale::global(global_locale_); }\n+\n+ protected:\n+  std::locale global_locale_;\n+};\n+\n+TEST(StringConversion, ToBoolean) {\n+  StringConverter<BooleanType> converter;\n+\n+  AssertConversion(converter, \"true\", true);\n+  AssertConversion(converter, \"tRuE\", true);\n+  AssertConversion(converter, \"FAlse\", false);\n+  AssertConversion(converter, \"false\", false);\n+  AssertConversion(converter, \"1\", true);\n+  AssertConversion(converter, \"0\", false);\n+\n+  AssertConversionFails(converter, \"\");\n+}\n+\n+TEST(StringConversion, ToFloat) {\n+  StringConverter<FloatType> converter;\n+\n+  AssertConversion(converter, \"1.5\", 1.5f);\n+  AssertConversion(converter, \"0\", 0.0f);\n+  // XXX ASSERT_EQ doesn't distinguish signed zeros\n+  AssertConversion(converter, \"-0.0\", -0.0f);\n+  AssertConversion(converter, \"-1e20\", -1e20f);\n+\n+  AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"e\");\n+}\n+\n+TEST(StringConversion, ToDouble) {\n+  StringConverter<DoubleType> converter;\n+\n+  AssertConversion(converter, \"1.5\", 1.5);\n+  AssertConversion(converter, \"0\", 0);\n+  // XXX ASSERT_EQ doesn't distinguish signed zeros\n+  AssertConversion(converter, \"-0.0\", -0.0);\n+  AssertConversion(converter, \"-1e100\", -1e100);\n+\n+  AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"e\");\n+}\n+\n+TEST(StringConversion, ToFloatLocale) {\n+  // French locale uses the comma as decimal point\n+  LocaleGuard locale_guard(\"fr_FR.UTF-8\");\n+\n+  StringConverter<FloatType> converter;\n+  AssertConversion(converter, \"1.5\", 1.5f);\n+}\n+\n+TEST(StringConversion, ToDoubleLocale) {\n+  // French locale uses the comma as decimal point\n+  LocaleGuard locale_guard(\"fr_FR.UTF-8\");\n+\n+  StringConverter<DoubleType> converter;\n+  AssertConversion(converter, \"1.5\", 1.5f);\n+}\n+\n+TEST(StringConversion, ToInt8) {\n+  StringConverter<Int8Type> converter;\n+\n+  AssertConversion(converter, \"0\", 0);\n+  AssertConversion(converter, \"127\", 127);\n+  AssertConversion(converter, \"-128\", -128);\n+\n+  // Non-representable values\n+  AssertConversionFails(converter, \"128\");\n+  AssertConversionFails(converter, \"-129\");\n+\n+  AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"0.0\");\n+  AssertConversionFails(converter, \"e\");\n+}\n+\n+TEST(StringConversion, ToUInt8) {\n+  StringConverter<UInt8Type> converter;\n+\n+  AssertConversion(converter, \"0\", 0);\n+  AssertConversion(converter, \"255\", 255);\n+\n+  // Non-representable values\n+  //   AssertConversionFails(converter, \"-1\");\n+  AssertConversionFails(converter, \"256\");\n+\n+  AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"0.0\");\n+  AssertConversionFails(converter, \"e\");\n+}\n+\n+TEST(StringConversion, ToInt16) {\n+  StringConverter<Int16Type> converter;\n+\n+  AssertConversion(converter, \"0\", 0);\n+  AssertConversion(converter, \"32767\", 32767);\n+  AssertConversion(converter, \"-32768\", -32768);\n+\n+  // Non-representable values\n+  AssertConversionFails(converter, \"32768\");\n+  AssertConversionFails(converter, \"-32769\");\n+\n+  AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"0.0\");\n+  AssertConversionFails(converter, \"e\");\n+}\n+\n+TEST(StringConversion, ToUInt16) {\n+  StringConverter<UInt16Type> converter;\n+\n+  AssertConversion(converter, \"0\", 0);\n+  AssertConversion(converter, \"65535\", 65535);\n+\n+  // Non-representable values\n+  //   AssertConversionFails(converter, \"-1\");\n+  AssertConversionFails(converter, \"65536\");\n+\n+  AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"0.0\");\n+  AssertConversionFails(converter, \"e\");\n+}\n+\n+TEST(StringConversion, ToInt32) {\n+  StringConverter<Int32Type> converter;\n+\n+  AssertConversion(converter, \"0\", 0);\n+  AssertConversion(converter, \"2147483647\", 2147483647);\n+  AssertConversion(converter, \"-2147483648\", -2147483648LL);\n+\n+  // Non-representable values\n+  AssertConversionFails(converter, \"2147483648\");\n+  AssertConversionFails(converter, \"-2147483649\");\n+\n+  AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"0.0\");\n+  AssertConversionFails(converter, \"e\");\n+}\n+\n+TEST(StringConversion, ToUInt32) {\n+  StringConverter<UInt32Type> converter;\n+\n+  AssertConversion(converter, \"0\", 0);\n+  AssertConversion(converter, \"4294967295\", 4294967295UL);\n+\n+  // Non-representable values\n+  //   AssertConversionFails(converter, \"-1\");\n+  AssertConversionFails(converter, \"4294967296\");\n+\n+  AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"0.0\");\n+  AssertConversionFails(converter, \"e\");\n+}\n+\n+TEST(StringConversion, ToInt64) {\n+  StringConverter<Int64Type> converter;\n+\n+  AssertConversion(converter, \"0\", 0);\n+  AssertConversion(converter, \"9223372036854775807\", 9223372036854775807LL);\n+  AssertConversion(converter, \"-9223372036854775808\", -9223372036854775807LL - 1);\n+\n+  // Non-representable values\n+  AssertConversionFails(converter, \"9223372036854775808\");\n+  AssertConversionFails(converter, \"-9223372036854775809\");\n+\n+  AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"0.0\");\n+  AssertConversionFails(converter, \"e\");\n+}\n+\n+TEST(StringConversion, ToUInt64) {\n+  StringConverter<UInt64Type> converter;\n+\n+  AssertConversion(converter, \"0\", 0);\n+  AssertConversion(converter, \"18446744073709551615\", 18446744073709551615ULL);\n+\n+  // Non-representable values\n+  //   AssertConversionFails(converter, \"-1\");\n+  AssertConversionFails(converter, \"18446744073709551616\");\n+\n+  AssertConversionFails(converter, \"\");\n+  AssertConversionFails(converter, \"0.0\");\n+  AssertConversionFails(converter, \"e\");\n+}\n+\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/util/parsing.h b/cpp/src/arrow/util/parsing.h\nnew file mode 100644\nindex 0000000000..efe31625ea\n--- /dev/null\n+++ b/cpp/src/arrow/util/parsing.h\n@@ -0,0 +1,184 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_UTIL_PARSING_H\n+#define ARROW_UTIL_PARSING_H\n+\n+#include <limits>\n+#include <locale>\n+#include <sstream>\n+#include <string>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+/// \\brief A class providing conversion from strings to some Arrow data types\n+///\n+/// Conversion is triggered by calling operator().  It returns true on\n+/// success, false on failure.\n+///\n+/// The class may have a non-trivial construction cost in some cases,\n+/// so it's recommended to use a single instance many times, if doing bulk\n+/// conversion.\n+///\n+template <typename ARROW_TYPE, typename Enable = void>\n+class StringConverter;\n+\n+template <>\n+class StringConverter<BooleanType> {\n+ public:\n+  using value_type = bool;\n+\n+  bool operator()(const char* s, size_t length, value_type* out) {\n+    if (length == 1) {\n+      // \"0\" or \"1\"?\n+      if (s[0] == '0') {\n+        *out = false;\n+        return true;\n+      }\n+      if (s[0] == '1') {\n+        *out = true;\n+        return true;\n+      }\n+      return false;\n+    }\n+    if (length == 4) {\n+      // \"true\"?\n+      *out = true;\n+      return ((s[0] == 't' || s[0] == 'T') && (s[1] == 'r' || s[1] == 'R') &&\n+              (s[2] == 'u' || s[2] == 'U') && (s[3] == 'e' || s[3] == 'E'));\n+    }\n+    if (length == 5) {\n+      // \"false\"?\n+      *out = false;\n+      return ((s[0] == 'f' || s[0] == 'F') && (s[1] == 'a' || s[1] == 'A') &&\n+              (s[2] == 'l' || s[2] == 'L') && (s[3] == 's' || s[3] == 'S') &&\n+              (s[4] == 'e' || s[4] == 'E'));\n+    }\n+    return false;\n+  }\n+};\n+\n+template <class ARROW_TYPE>\n+class StringToFloatConverterMixin {\n+ public:\n+  using value_type = typename ARROW_TYPE::c_type;\n+\n+  StringToFloatConverterMixin() { ibuf.imbue(std::locale::classic()); }\n+\n+  bool operator()(const char* s, size_t length, value_type* out) {\n+    ibuf.clear();\n+    ibuf.str(std::string(s, length));\n+    ibuf >> *out;\n+    // XXX Should we reset errno on failure?\n+    return !ibuf.fail() && ibuf.eof();\n+  }\n+\n+ protected:\n+  std::istringstream ibuf;\n+};\n+\n+template <>\n+class StringConverter<FloatType> : public StringToFloatConverterMixin<FloatType> {};\n+\n+template <>\n+class StringConverter<DoubleType> : public StringToFloatConverterMixin<DoubleType> {};\n+\n+// NOTE: HalfFloatType would require a half<->float conversion library\n+\n+template <class ARROW_TYPE>\n+class StringConverter<ARROW_TYPE, enable_if_signed_integer<ARROW_TYPE>> {\n+ public:\n+  using value_type = typename ARROW_TYPE::c_type;\n+\n+  StringConverter() { ibuf.imbue(std::locale::classic()); }\n+\n+  bool operator()(const char* s, size_t length, value_type* out) {\n+    static constexpr bool need_long_long = sizeof(value_type) > sizeof(long);  // NOLINT\n+    static constexpr value_type min_value = std::numeric_limits<value_type>::min();\n+    static constexpr value_type max_value = std::numeric_limits<value_type>::max();\n+\n+    ibuf.clear();\n+    ibuf.str(std::string(s, length));\n+    if (need_long_long) {\n+      long long res;  // NOLINT\n+      ibuf >> res;\n+      *out = static_cast<value_type>(res);  // may downcast\n+      if (res < min_value || res > max_value) {\n+        return false;\n+      }\n+    } else {\n+      long res;  // NOLINT\n+      ibuf >> res;\n+      *out = static_cast<value_type>(res);  // may downcast\n+      if (res < min_value || res > max_value) {\n+        return false;\n+      }\n+    }\n+    // XXX Should we reset errno on failure?\n+    return !ibuf.fail() && ibuf.eof();\n+  }\n+\n+ protected:\n+  std::istringstream ibuf;\n+};\n+\n+template <class ARROW_TYPE>\n+class StringConverter<ARROW_TYPE, enable_if_unsigned_integer<ARROW_TYPE>> {\n+ public:\n+  using value_type = typename ARROW_TYPE::c_type;\n+\n+  StringConverter() { ibuf.imbue(std::locale::classic()); }\n+\n+  bool operator()(const char* s, size_t length, value_type* out) {\n+    static constexpr bool need_long_long =\n+        sizeof(value_type) > sizeof(unsigned long);  // NOLINT\n+    static constexpr value_type max_value = std::numeric_limits<value_type>::max();\n+\n+    ibuf.clear();\n+    ibuf.str(std::string(s, length));\n+    // XXX The following unfortunately allows negative input values\n+    if (need_long_long) {\n+      unsigned long long res;  // NOLINT\n+      ibuf >> res;\n+      *out = static_cast<value_type>(res);  // may downcast\n+      if (res > max_value) {\n+        return false;\n+      }\n+    } else {\n+      unsigned long res;  // NOLINT\n+      ibuf >> res;\n+      *out = static_cast<value_type>(res);  // may downcast\n+      if (res > max_value) {\n+        return false;\n+      }\n+    }\n+    // XXX Should we reset errno on failure?\n+    return !ibuf.fail() && ibuf.eof();\n+  }\n+\n+ protected:\n+  std::istringstream ibuf;\n+};\n+\n+}  // namespace internal\n+}  // namespace arrow\n+\n+#endif  // ARROW_UTIL_PARSING_H\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-18T00:09:36.151+0000",
                    "updated": "2018-08-18T00:09:36.151+0000",
                    "started": "2018-08-18T00:09:36.150+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135934",
                    "issueId": "13179103"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 3600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@21db1fce[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4339aefc[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33402ecb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3d003811[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38f0edf1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@112c2af3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23a8686b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1fd40cbf[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20f4f5d1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@50ff288e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30f4e9ca[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@ffaaa9f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3600,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Aug 18 00:09:39 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-08-18T00:09:39.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3060/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-08-15T14:53:52.000+0000",
        "updated": "2018-08-18T00:09:39.000+0000",
        "timeoriginalestimate": null,
        "description": "We have implementations of casting strings to numbers in the {{compute}} directory. Those can be more broadly useful (for example when parsing CSV files). We should therefore centralize them in their own C++ module.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Factor out parsing routines",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179103/comment/16584520",
                    "id": "16584520",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2433\n[https://github.com/apache/arrow/pull/2433]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-18T00:09:39.385+0000",
                    "updated": "2018-08-18T00:09:39.385+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3x2nr:",
        "customfield_12314139": null
    }
}