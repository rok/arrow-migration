{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13194392",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194392",
    "key": "ARROW-3621",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3621/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194392/worklog/159977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2847: ARROW-3621: [Go] implement Table, Record, RecordReader and TableReader\nURL: https://github.com/apache/arrow/pull/2847#issuecomment-433900641\n \n \n   Just rebased this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T13:00:02.245+0000",
                    "updated": "2018-10-29T13:00:02.245+0000",
                    "started": "2018-10-29T13:00:02.244+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159977",
                    "issueId": "13194392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194392/worklog/159978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2847: ARROW-3621: [Go] implement Table, Record, RecordReader and TableReader\nURL: https://github.com/apache/arrow/pull/2847#issuecomment-433598966\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=h1) Report\n   > Merging [#2847](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/cf646e4167ed7b0ba6961152d945f82a37e4cc7d?src=pr&el=desc) will **increase** coverage by `2.28%`.\n   > The diff coverage is `98.91%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2847/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2847      +/-   ##\n   ==========================================\n   + Coverage    64.6%   66.89%   +2.28%     \n   ==========================================\n     Files          51       52       +1     \n     Lines        2492     2670     +178     \n   ==========================================\n   + Hits         1610     1786     +176     \n   - Misses        808      809       +1     \n   - Partials       74       75       +1\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.73% <100%> (+0.29%)` | :arrow_up: |\n   | [go/arrow/array/record.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvcmVjb3JkLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.33% <81.81%> (-2.67%)` | :arrow_down: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=footer). Last update [cf646e4...0ae084d](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T13:02:36.473+0000",
                    "updated": "2018-10-29T13:02:36.473+0000",
                    "started": "2018-10-29T13:02:36.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159978",
                    "issueId": "13194392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194392/worklog/159983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2847: ARROW-3621: [Go] implement Table, Record, RecordReader and TableReader\nURL: https://github.com/apache/arrow/pull/2847#issuecomment-433598966\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=h1) Report\n   > Merging [#2847](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/0d6d51d10fde8095f04e15f53db540b4331b084a?src=pr&el=desc) will **increase** coverage by `1.88%`.\n   > The diff coverage is `98.91%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2847/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2847      +/-   ##\n   ==========================================\n   + Coverage      65%   66.89%   +1.88%     \n   ==========================================\n     Files          51       52       +1     \n     Lines        2492     2670     +178     \n   ==========================================\n   + Hits         1620     1786     +166     \n   - Misses        802      809       +7     \n   - Partials       70       75       +5\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.73% <100%> (+0.29%)` | :arrow_up: |\n   | [go/arrow/array/record.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvcmVjb3JkLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.33% <81.81%> (-2.67%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2F2eDJfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hbWQ2NC5nbw==) | `28.57% <0%> (-14.29%)` | :arrow_down: |\n   | [go/arrow/math/math\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9tYXRoX2FtZDY0Lmdv) | `31.57% <0%> (-5.27%)` | :arrow_down: |\n   | ... and [8 more](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=footer). Last update [0d6d51d...e45cfa9](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T13:12:55.772+0000",
                    "updated": "2018-10-29T13:12:55.772+0000",
                    "started": "2018-10-29T13:12:55.771+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159983",
                    "issueId": "13194392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194392/worklog/160463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2847: ARROW-3621: [Go] implement Table, Record, RecordReader and TableReader\nURL: https://github.com/apache/arrow/pull/2847#issuecomment-433598966\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=h1) Report\n   > Merging [#2847](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/1a6545aa51f5f41f0233ee0a11ef87d21127c5ed?src=pr&el=desc) will **decrease** coverage by `20.29%`.\n   > The diff coverage is `98.91%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2847/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2847      +/-   ##\n   ==========================================\n   - Coverage   87.56%   67.26%   -20.3%     \n   ==========================================\n     Files         411       52     -359     \n     Lines       63818     2670   -61148     \n   ==========================================\n   - Hits        55881     1796   -54085     \n   + Misses       7867      803    -7064     \n   - Partials       70       71       +1\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.73% <100%> (+0.29%)` | :arrow_up: |\n   | [go/arrow/array/record.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvcmVjb3JkLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.33% <81.81%> (-2.67%)` | :arrow_down: |\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | [cpp/src/parquet/column\\_page.h](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9wYWdlLmg=) | | |\n   | [cpp/src/parquet/bloom\\_filter-test.cc](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Jsb29tX2ZpbHRlci10ZXN0LmNj) | | |\n   | [cpp/src/plasma/client.cc](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY2xpZW50LmNj) | | |\n   | [cpp/src/arrow/io/test-common.h](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby90ZXN0LWNvbW1vbi5o) | | |\n   | [cpp/src/arrow/ipc/metadata-internal.h](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvbWV0YWRhdGEtaW50ZXJuYWwuaA==) | | |\n   | ... and [355 more](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=footer). Last update [1a6545a...fcc7f94](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T08:32:07.393+0000",
                    "updated": "2018-10-30T08:32:07.393+0000",
                    "started": "2018-10-30T08:32:07.392+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160463",
                    "issueId": "13194392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194392/worklog/160539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2847: ARROW-3621: [Go] implement Table, Record, RecordReader and TableReader\nURL: https://github.com/apache/arrow/pull/2847#issuecomment-434259168\n \n \n   @stuartcarnie can you review this? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T11:07:33.286+0000",
                    "updated": "2018-10-30T11:07:33.286+0000",
                    "started": "2018-10-30T11:07:33.286+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160539",
                    "issueId": "13194392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194392/worklog/160613",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2847: ARROW-3621: [Go] implement Table, Record, RecordReader and TableReader\nURL: https://github.com/apache/arrow/pull/2847#issuecomment-433598966\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=h1) Report\n   > Merging [#2847](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/b5fafd81f48578c92e8118700457e82224aab13d?src=pr&el=desc) will **decrease** coverage by `7.91%`.\n   > The diff coverage is `98.91%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2847/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2847      +/-   ##\n   ==========================================\n   - Coverage    74.8%   66.89%   -7.92%     \n   ==========================================\n     Files          63       52      -11     \n     Lines        4235     2670    -1565     \n   ==========================================\n   - Hits         3168     1786    -1382     \n   + Misses        993      809     -184     \n   - Partials       74       75       +1\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | `94.73% <100%> (+0.29%)` | :arrow_up: |\n   | [go/arrow/array/record.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvcmVjb3JkLmdv) | `100% <100%> (\u00f8)` | |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/schema.go](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-Z28vYXJyb3cvc2NoZW1hLmdv) | `97.33% <81.81%> (-2.67%)` | :arrow_down: |\n   | [rust/src/record\\_batch.rs](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-cnVzdC9zcmMvcmVjb3JkX2JhdGNoLnJz) | | |\n   | [rust/src/array.rs](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYXJyYXkucnM=) | | |\n   | [rust/src/bitmap.rs](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYml0bWFwLnJz) | | |\n   | [rust/src/builder.rs](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYnVpbGRlci5ycw==) | | |\n   | [rust/src/util/bit\\_util.rs](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-cnVzdC9zcmMvdXRpbC9iaXRfdXRpbC5ycw==) | | |\n   | [rust/src/error.rs](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree#diff-cnVzdC9zcmMvZXJyb3IucnM=) | | |\n   | ... and [7 more](https://codecov.io/gh/apache/arrow/pull/2847/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=footer). Last update [b5fafd8...99b6b79](https://codecov.io/gh/apache/arrow/pull/2847?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T13:17:19.889+0000",
                    "updated": "2018-10-30T13:17:19.889+0000",
                    "started": "2018-10-30T13:17:19.888+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160613",
                    "issueId": "13194392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194392/worklog/160775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stuartcarnie commented on issue #2847: ARROW-3621: [Go] implement Table, Record, RecordReader and TableReader\nURL: https://github.com/apache/arrow/pull/2847#issuecomment-434426812\n \n \n   @wesm / @sbinet I plan to look at these PRs as soon as I finish up some other items at the top of my list\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T18:55:25.764+0000",
                    "updated": "2018-10-30T18:55:25.764+0000",
                    "started": "2018-10-30T18:55:25.764+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160775",
                    "issueId": "13194392"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194392/worklog/161321",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2847: ARROW-3621: [Go] implement Table, Record, RecordReader and TableReader\nURL: https://github.com/apache/arrow/pull/2847\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/go/arrow/array/record.go b/go/arrow/array/record.go\nnew file mode 100644\nindex 0000000000..cc2f3e5581\n--- /dev/null\n+++ b/go/arrow/array/record.go\n@@ -0,0 +1,245 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+)\n+\n+// RecordReader reads a stream of records.\n+type RecordReader interface {\n+\tRetain()\n+\tRelease()\n+\n+\tSchema() *arrow.Schema\n+\n+\tNext() bool\n+\tRecord() Record\n+}\n+\n+// simpleRecords is a simple iterator over a collection of records.\n+type simpleRecords struct {\n+\trefCount int64\n+\n+\tschema *arrow.Schema\n+\trecs   []Record\n+\tcur    Record\n+}\n+\n+// NewRecordReader returns a simple iterator over the given slice of records.\n+func NewRecordReader(schema *arrow.Schema, recs []Record) (*simpleRecords, error) {\n+\trs := &simpleRecords{\n+\t\trefCount: 1,\n+\t\tschema:   schema,\n+\t\trecs:     recs,\n+\t\tcur:      nil,\n+\t}\n+\n+\tfor _, rec := range rs.recs {\n+\t\trec.Retain()\n+\t}\n+\n+\tfor _, rec := range recs {\n+\t\tif !rec.Schema().Equal(rs.schema) {\n+\t\t\trs.Release()\n+\t\t\treturn nil, fmt.Errorf(\"arrow/array: mismatch schema\")\n+\t\t}\n+\t}\n+\n+\treturn rs, nil\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (rs *simpleRecords) Retain() {\n+\tatomic.AddInt64(&rs.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+// Release may be called simultaneously from multiple goroutines.\n+func (rs *simpleRecords) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&rs.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&rs.refCount, -1) == 0 {\n+\t\tif rs.cur != nil {\n+\t\t\trs.cur.Release()\n+\t\t}\n+\t\tfor _, rec := range rs.recs {\n+\t\t\trec.Release()\n+\t\t}\n+\t\trs.recs = nil\n+\t}\n+}\n+\n+func (rs *simpleRecords) Schema() *arrow.Schema { return rs.schema }\n+func (rs *simpleRecords) Record() Record        { return rs.cur }\n+func (rs *simpleRecords) Next() bool {\n+\tif len(rs.recs) == 0 {\n+\t\treturn false\n+\t}\n+\tif rs.cur != nil {\n+\t\trs.cur.Release()\n+\t}\n+\trs.cur = rs.recs[0]\n+\trs.recs = rs.recs[1:]\n+\treturn true\n+}\n+\n+// Record is a collection of equal-length arrays\n+// matching a particular Schema.\n+type Record interface {\n+\tRelease()\n+\tRetain()\n+\n+\tSchema() *arrow.Schema\n+\n+\tNumRows() int64\n+\tNumCols() int64\n+\tColumn(i int) Interface\n+\tColumnName(i int) string\n+\n+\t// NewSlice constructs a zero-copy slice of the record with the indicated\n+\t// indices i and j, corresponding to array[i:j].\n+\t// The returned record must be Release()'d after use.\n+\t//\n+\t// NewSlice panics if the slice is outside the valid range of the record array.\n+\t// NewSlice panics if j < i.\n+\tNewSlice(i, j int64) Record\n+}\n+\n+// simpleRecord is a basic, non-lazy in-memory record batch.\n+type simpleRecord struct {\n+\trefCount int64\n+\n+\tschema *arrow.Schema\n+\n+\trows int64\n+\tarrs []Interface\n+}\n+\n+// NewRecord returns a basic, non-lazy in-memory record batch.\n+//\n+// NewRecord panics if the columns and schema are inconsistent.\n+// NewRecord panics if rows is larger than the height of the columns.\n+func NewRecord(schema *arrow.Schema, cols []Interface, nrows int64) *simpleRecord {\n+\trec := &simpleRecord{\n+\t\trefCount: 1,\n+\t\tschema:   schema,\n+\t\trows:     nrows,\n+\t\tarrs:     make([]Interface, len(cols)),\n+\t}\n+\tcopy(rec.arrs, cols)\n+\tfor _, arr := range rec.arrs {\n+\t\tarr.Retain()\n+\t}\n+\n+\tif rec.rows < 0 {\n+\t\tswitch len(rec.arrs) {\n+\t\tcase 0:\n+\t\t\trec.rows = 0\n+\t\tdefault:\n+\t\t\trec.rows = int64(rec.arrs[0].Len())\n+\t\t}\n+\t}\n+\n+\terr := rec.validate()\n+\tif err != nil {\n+\t\trec.Release()\n+\t\tpanic(err)\n+\t}\n+\n+\treturn rec\n+}\n+\n+func (rec *simpleRecord) validate() error {\n+\tif len(rec.arrs) != len(rec.schema.Fields()) {\n+\t\treturn fmt.Errorf(\"arrow/array: number of columns/fields mismatch\")\n+\t}\n+\n+\tfor i, arr := range rec.arrs {\n+\t\tf := rec.schema.Field(i)\n+\t\tif int64(arr.Len()) < rec.rows {\n+\t\t\treturn fmt.Errorf(\"arrow/array: mismatch number of rows in column %q: got=%d, want=%d\",\n+\t\t\t\tf.Name,\n+\t\t\t\tarr.Len(), rec.rows,\n+\t\t\t)\n+\t\t}\n+\t\tif !reflect.DeepEqual(f.Type, arr.DataType()) {\n+\t\t\treturn fmt.Errorf(\"arrow/array: column %q type mismatch: got=%v, want=%v\",\n+\t\t\t\tf.Name,\n+\t\t\t\tarr.DataType().Name(), f.Type.Name(),\n+\t\t\t)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (rec *simpleRecord) Retain() {\n+\tatomic.AddInt64(&rec.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+// Release may be called simultaneously from multiple goroutines.\n+func (rec *simpleRecord) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&rec.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&rec.refCount, -1) == 0 {\n+\t\tfor _, arr := range rec.arrs {\n+\t\t\tarr.Release()\n+\t\t}\n+\t\trec.arrs = nil\n+\t}\n+}\n+\n+func (rec *simpleRecord) Schema() *arrow.Schema   { return rec.schema }\n+func (rec *simpleRecord) NumRows() int64          { return rec.rows }\n+func (rec *simpleRecord) NumCols() int64          { return int64(len(rec.arrs)) }\n+func (rec *simpleRecord) Column(i int) Interface  { return rec.arrs[i] }\n+func (rec *simpleRecord) ColumnName(i int) string { return rec.schema.Field(i).Name }\n+\n+// NewSlice constructs a zero-copy slice of the record with the indicated\n+// indices i and j, corresponding to array[i:j].\n+// The returned record must be Release()'d after use.\n+//\n+// NewSlice panics if the slice is outside the valid range of the record array.\n+// NewSlice panics if j < i.\n+func (rec *simpleRecord) NewSlice(i, j int64) Record {\n+\tarrs := make([]Interface, len(rec.arrs))\n+\tfor ii, arr := range rec.arrs {\n+\t\tarrs[ii] = NewSlice(arr, i, j)\n+\t}\n+\tdefer func() {\n+\t\tfor _, arr := range arrs {\n+\t\t\tarr.Release()\n+\t\t}\n+\t}()\n+\treturn NewRecord(rec.schema, arrs, j-i)\n+}\n+\n+var (\n+\t_ Record       = (*simpleRecord)(nil)\n+\t_ RecordReader = (*simpleRecords)(nil)\n+)\ndiff --git a/go/arrow/array/record_test.go b/go/arrow/array/record_test.go\nnew file mode 100644\nindex 0000000000..1b0b2e59eb\n--- /dev/null\n+++ b/go/arrow/array/record_test.go\n@@ -0,0 +1,347 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array_test\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+func TestRecord(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tschema := arrow.NewSchema(\n+\t\t[]arrow.Field{\n+\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\tarrow.Field{Name: \"f2-f64\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t},\n+\t\tnil,\n+\t)\n+\tcol1 := func() array.Interface {\n+\t\tib := array.NewInt32Builder(mem)\n+\t\tdefer ib.Release()\n+\n+\t\tib.AppendValues([]int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, nil)\n+\t\treturn ib.NewInt32Array()\n+\t}()\n+\tdefer col1.Release()\n+\n+\tcol2 := func() array.Interface {\n+\t\tb := array.NewFloat64Builder(mem)\n+\t\tdefer b.Release()\n+\n+\t\tb.AppendValues([]float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, nil)\n+\t\treturn b.NewFloat64Array()\n+\t}()\n+\tdefer col2.Release()\n+\n+\tcols := []array.Interface{col1, col2}\n+\trec := array.NewRecord(schema, cols, -1)\n+\tdefer rec.Release()\n+\n+\trec.Retain()\n+\trec.Release()\n+\n+\tif got, want := rec.Schema(), schema; !got.Equal(want) {\n+\t\tt.Fatalf(\"invalid schema: got=%#v, want=%#v\", got, want)\n+\t}\n+\n+\tif got, want := rec.NumRows(), int64(10); got != want {\n+\t\tt.Fatalf(\"invalid number of rows: got=%d, want=%d\", got, want)\n+\t}\n+\tif got, want := rec.NumCols(), int64(2); got != want {\n+\t\tt.Fatalf(\"invalid number of columns: got=%d, want=%d\", got, want)\n+\t}\n+\tif got, want := rec.Column(0), cols[0]; got != want {\n+\t\tt.Fatalf(\"invalid column: got=%q, want=%q\", got, want)\n+\t}\n+\tif got, want := rec.ColumnName(0), schema.Field(0).Name; got != want {\n+\t\tt.Fatalf(\"invalid column name: got=%q, want=%q\", got, want)\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\ti, j int64\n+\t\terr  error\n+\t}{\n+\t\t{i: 0, j: 10, err: nil},\n+\t\t{i: 1, j: 10, err: nil},\n+\t\t{i: 1, j: 9, err: nil},\n+\t\t{i: 0, j: 0, err: nil},\n+\t\t{i: 1, j: 1, err: nil},\n+\t\t{i: 10, j: 10, err: nil},\n+\t\t{i: 1, j: 0, err: fmt.Errorf(\"arrow/array: index out of range\")},\n+\t\t{i: 1, j: 11, err: fmt.Errorf(\"arrow/array: index out of range\")},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"slice-%02d-%02d\", tc.i, tc.j), func(t *testing.T) {\n+\t\t\tif tc.err != nil {\n+\t\t\t\tdefer func() {\n+\t\t\t\t\te := recover()\n+\t\t\t\t\tif e == nil {\n+\t\t\t\t\t\tt.Fatalf(\"expected an error %q\", tc.err)\n+\t\t\t\t\t}\n+\t\t\t\t\tswitch err := e.(type) {\n+\t\t\t\t\tcase string:\n+\t\t\t\t\t\tif err != tc.err.Error() {\n+\t\t\t\t\t\t\tt.Fatalf(\"invalid panic message. got=%q, want=%q\", err, tc.err)\n+\t\t\t\t\t\t}\n+\t\t\t\t\tcase error:\n+\t\t\t\t\t\tif err.Error() != tc.err.Error() {\n+\t\t\t\t\t\t\tt.Fatalf(\"invalid panic message. got=%q, want=%q\", err, tc.err)\n+\t\t\t\t\t\t}\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tt.Fatalf(\"invalid type for panic message: %T (err=%v)\", err, err)\n+\t\t\t\t\t}\n+\t\t\t\t}()\n+\t\t\t}\n+\t\t\tsub := rec.NewSlice(tc.i, tc.j)\n+\t\t\tdefer sub.Release()\n+\n+\t\t\tif got, want := sub.NumRows(), tc.j-tc.i; got != want {\n+\t\t\t\tt.Fatalf(\"invalid rec-slice number of rows: got=%d, want=%d\", got, want)\n+\t\t\t}\n+\t\t})\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\tschema *arrow.Schema\n+\t\tcols   []array.Interface\n+\t\trows   int64\n+\t\terr    error\n+\t}{\n+\t\t{\n+\t\t\tschema: schema,\n+\t\t\tcols:   nil,\n+\t\t\trows:   -1,\n+\t\t\terr:    fmt.Errorf(\"arrow/array: number of columns/fields mismatch\"),\n+\t\t},\n+\t\t{\n+\t\t\tschema: schema,\n+\t\t\tcols:   cols[:1],\n+\t\t\trows:   0,\n+\t\t\terr:    fmt.Errorf(\"arrow/array: number of columns/fields mismatch\"),\n+\t\t},\n+\t\t{\n+\t\t\tschema: arrow.NewSchema(\n+\t\t\t\t[]arrow.Field{\n+\t\t\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\t\t},\n+\t\t\t\tnil,\n+\t\t\t),\n+\t\t\tcols: cols,\n+\t\t\trows: 0,\n+\t\t\terr:  fmt.Errorf(\"arrow/array: number of columns/fields mismatch\"),\n+\t\t},\n+\t\t{\n+\t\t\tschema: arrow.NewSchema(\n+\t\t\t\t[]arrow.Field{\n+\t\t\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\t\t\tarrow.Field{Name: \"f2-f64\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\t\t},\n+\t\t\t\tnil,\n+\t\t\t),\n+\t\t\tcols: cols,\n+\t\t\trows: 0,\n+\t\t\terr:  fmt.Errorf(`arrow/array: column \"f2-f64\" type mismatch: got=float64, want=int32`),\n+\t\t},\n+\t\t{\n+\t\t\tschema: schema,\n+\t\t\tcols:   cols,\n+\t\t\trows:   11,\n+\t\t\terr:    fmt.Errorf(`arrow/array: mismatch number of rows in column \"f1-i32\": got=10, want=11`),\n+\t\t},\n+\t\t{\n+\t\t\tschema: schema,\n+\t\t\tcols:   cols,\n+\t\t\trows:   10,\n+\t\t\terr:    nil,\n+\t\t},\n+\t\t{\n+\t\t\tschema: schema,\n+\t\t\tcols:   cols,\n+\t\t\trows:   3,\n+\t\t\terr:    nil,\n+\t\t},\n+\t\t{\n+\t\t\tschema: schema,\n+\t\t\tcols:   cols,\n+\t\t\trows:   0,\n+\t\t\terr:    nil,\n+\t\t},\n+\t} {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\t\t\tif tc.err != nil {\n+\t\t\t\tdefer func() {\n+\t\t\t\t\te := recover()\n+\t\t\t\t\tif e == nil {\n+\t\t\t\t\t\tt.Fatalf(\"expected an error %q\", tc.err)\n+\t\t\t\t\t}\n+\t\t\t\t\tswitch err := e.(type) {\n+\t\t\t\t\tcase string:\n+\t\t\t\t\t\tif err != tc.err.Error() {\n+\t\t\t\t\t\t\tt.Fatalf(\"invalid panic message. got=%q, want=%q\", err, tc.err)\n+\t\t\t\t\t\t}\n+\t\t\t\t\tcase error:\n+\t\t\t\t\t\tif err.Error() != tc.err.Error() {\n+\t\t\t\t\t\t\tt.Fatalf(\"invalid panic message. got=%q, want=%q\", err, tc.err)\n+\t\t\t\t\t\t}\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tt.Fatalf(\"invalid type for panic message: %T (err=%v)\", err, err)\n+\t\t\t\t\t}\n+\t\t\t\t}()\n+\t\t\t}\n+\t\t\trec := array.NewRecord(tc.schema, tc.cols, tc.rows)\n+\t\t\tdefer rec.Release()\n+\t\t\tif got, want := rec.NumRows(), tc.rows; got != want {\n+\t\t\t\tt.Fatalf(\"invalid number of rows: got=%d, want=%d\", got, want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestRecordReader(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tschema := arrow.NewSchema(\n+\t\t[]arrow.Field{\n+\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\tarrow.Field{Name: \"f2-f64\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t},\n+\t\tnil,\n+\t)\n+\trec1 := func() array.Record {\n+\t\tcol1 := func() array.Interface {\n+\t\t\tib := array.NewInt32Builder(mem)\n+\t\t\tdefer ib.Release()\n+\n+\t\t\tib.AppendValues([]int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, nil)\n+\t\t\treturn ib.NewInt32Array()\n+\t\t}()\n+\t\tdefer col1.Release()\n+\n+\t\tcol2 := func() array.Interface {\n+\t\t\tb := array.NewFloat64Builder(mem)\n+\t\t\tdefer b.Release()\n+\n+\t\t\tb.AppendValues([]float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, nil)\n+\t\t\treturn b.NewFloat64Array()\n+\t\t}()\n+\t\tdefer col2.Release()\n+\n+\t\tcols := []array.Interface{col1, col2}\n+\t\treturn array.NewRecord(schema, cols, -1)\n+\t}()\n+\tdefer rec1.Release()\n+\n+\trec2 := func() array.Record {\n+\t\tcol1 := func() array.Interface {\n+\t\t\tib := array.NewInt32Builder(mem)\n+\t\t\tdefer ib.Release()\n+\n+\t\t\tib.AppendValues([]int32{11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, nil)\n+\t\t\treturn ib.NewInt32Array()\n+\t\t}()\n+\t\tdefer col1.Release()\n+\n+\t\tcol2 := func() array.Interface {\n+\t\t\tb := array.NewFloat64Builder(mem)\n+\t\t\tdefer b.Release()\n+\n+\t\t\tb.AppendValues([]float64{11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, nil)\n+\t\t\treturn b.NewFloat64Array()\n+\t\t}()\n+\t\tdefer col2.Release()\n+\n+\t\tcols := []array.Interface{col1, col2}\n+\t\treturn array.NewRecord(schema, cols, -1)\n+\t}()\n+\tdefer rec2.Release()\n+\n+\trecs := []array.Record{rec1, rec2}\n+\titr, err := array.NewRecordReader(schema, recs)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer itr.Release()\n+\n+\titr.Retain()\n+\titr.Release()\n+\n+\tif got, want := itr.Schema(), schema; !got.Equal(want) {\n+\t\tt.Fatalf(\"invalid schema. got=%#v, want=%#v\", got, want)\n+\t}\n+\n+\tn := 0\n+\tfor itr.Next() {\n+\t\tn++\n+\t\tif got, want := itr.Record(), recs[n-1]; !reflect.DeepEqual(got, want) {\n+\t\t\tt.Fatalf(\"itr[%d], invalid record. got=%#v, want=%#v\", n-1, got, want)\n+\t\t}\n+\t}\n+\n+\tif n != len(recs) {\n+\t\tt.Fatalf(\"invalid number of iterations. got=%d, want=%d\", n, len(recs))\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\tname   string\n+\t\tschema *arrow.Schema\n+\t\terr    error\n+\t}{\n+\t\t{\n+\t\t\tname: \"mismatch-name\",\n+\t\t\tschema: arrow.NewSchema(\n+\t\t\t\t[]arrow.Field{\n+\t\t\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\t\t\tarrow.Field{Name: \"f2-XXX\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t\t\t},\n+\t\t\t\tnil,\n+\t\t\t),\n+\t\t\terr: fmt.Errorf(\"arrow/array: mismatch schema\"),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"mismatch-type\",\n+\t\t\tschema: arrow.NewSchema(\n+\t\t\t\t[]arrow.Field{\n+\t\t\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\t\t\tarrow.Field{Name: \"f2-f64\", Type: arrow.PrimitiveTypes.Int64},\n+\t\t\t\t},\n+\t\t\t\tnil,\n+\t\t\t),\n+\t\t\terr: fmt.Errorf(\"arrow/array: mismatch schema\"),\n+\t\t},\n+\t} {\n+\t\tt.Run(tc.name, func(t *testing.T) {\n+\t\t\titr, err := array.NewRecordReader(tc.schema, recs)\n+\t\t\tif itr != nil {\n+\t\t\t\titr.Release()\n+\t\t\t}\n+\t\t\tif err == nil {\n+\t\t\t\tt.Fatalf(\"expected an error: %v\", tc.err)\n+\t\t\t}\n+\t\t\tif !reflect.DeepEqual(tc.err, err) {\n+\t\t\t\tt.Fatalf(\"invalid error: got=%v, want=%v\", err, tc.err)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\ndiff --git a/go/arrow/array/table.go b/go/arrow/array/table.go\nindex df35cc728d..3040e160be 100644\n--- a/go/arrow/array/table.go\n+++ b/go/arrow/array/table.go\n@@ -17,8 +17,9 @@\n package array\n \n import (\n+\t\"errors\"\n \t\"fmt\"\n-\t\"reflect\"\n+\t\"math\"\n \t\"sync/atomic\"\n \n \t\"github.com/apache/arrow/go/arrow\"\n@@ -28,8 +29,8 @@ import (\n // Table represents a logical sequence of chunked arrays.\n type Table interface {\n \tSchema() *arrow.Schema\n-\tNumRows() int\n-\tNumCols() int\n+\tNumRows() int64\n+\tNumCols() int64\n \tColumn(i int) *Column\n \n \tRetain()\n@@ -203,7 +204,7 @@ func (a *Chunked) NewSlice(i, j int64) *Chunked {\n type simpleTable struct {\n \trefCount int64\n \n-\trows int\n+\trows int64\n \tcols []Column\n \n \tschema *arrow.Schema\n@@ -215,7 +216,7 @@ type simpleTable struct {\n //\n // NewTable panics if the columns and schema are inconsistent.\n // NewTable panics if rows is larger than the height of the columns.\n-func NewTable(schema *arrow.Schema, cols []Column, rows int) *simpleTable {\n+func NewTable(schema *arrow.Schema, cols []Column, rows int64) *simpleTable {\n \ttbl := simpleTable{\n \t\trefCount: 1,\n \t\trows:     rows,\n@@ -228,7 +229,7 @@ func NewTable(schema *arrow.Schema, cols []Column, rows int) *simpleTable {\n \t\tcase 0:\n \t\t\ttbl.rows = 0\n \t\tdefault:\n-\t\t\ttbl.rows = tbl.cols[0].Len()\n+\t\t\ttbl.rows = int64(tbl.cols[0].Len())\n \t\t}\n \t}\n \n@@ -246,20 +247,20 @@ func NewTable(schema *arrow.Schema, cols []Column, rows int) *simpleTable {\n }\n \n func (tbl *simpleTable) Schema() *arrow.Schema { return tbl.schema }\n-func (tbl *simpleTable) NumRows() int          { return tbl.rows }\n-func (tbl *simpleTable) NumCols() int          { return len(tbl.cols) }\n+func (tbl *simpleTable) NumRows() int64        { return tbl.rows }\n+func (tbl *simpleTable) NumCols() int64        { return int64(len(tbl.cols)) }\n func (tbl *simpleTable) Column(i int) *Column  { return &tbl.cols[i] }\n \n func (tbl *simpleTable) validate() {\n \tif len(tbl.cols) != len(tbl.schema.Fields()) {\n-\t\tpanic(\"arrow/array: table schema mismatch\")\n+\t\tpanic(errors.New(\"arrow/array: table schema mismatch\"))\n \t}\n \tfor i, col := range tbl.cols {\n-\t\tif !reflect.DeepEqual(col.field, tbl.schema.Field(i)) { // FIXME(sbinet): impl+use arrow.Field.Equal()\n+\t\tif !col.field.Equal(tbl.schema.Field(i)) {\n \t\t\tpanic(fmt.Errorf(\"arrow/array: column field %q is inconsistent with schema\", col.Name()))\n \t\t}\n \n-\t\tif col.Len() < tbl.rows {\n+\t\tif int64(col.Len()) < tbl.rows {\n \t\t\tpanic(fmt.Errorf(\"arrow/array: column %q expected length >= %d but got length %d\", col.Name(), tbl.rows, col.Len()))\n \t\t}\n \t}\n@@ -285,6 +286,144 @@ func (tbl *simpleTable) Release() {\n \t}\n }\n \n+// TableReader is a Record iterator over a (possibly chunked) Table\n+type TableReader struct {\n+\trefCount int64\n+\n+\ttbl   Table\n+\tcur   int64  // current row\n+\tmax   int64  // total number of rows\n+\trec   Record // current Record\n+\tchksz int64  // chunk size\n+\n+\tchunks  []*Chunked\n+\tslots   []int   // chunk indices\n+\toffsets []int64 // chunk offsets\n+}\n+\n+// NewTableReader returns a new TableReader to iterate over the (possibly chunked) Table.\n+// if chunkSize is <= 0, the biggest possible chunk will be selected.\n+func NewTableReader(tbl Table, chunkSize int64) *TableReader {\n+\tncols := tbl.NumCols()\n+\ttr := &TableReader{\n+\t\trefCount: 1,\n+\t\ttbl:      tbl,\n+\t\tcur:      0,\n+\t\tmax:      int64(tbl.NumRows()),\n+\t\tchksz:    chunkSize,\n+\t\tchunks:   make([]*Chunked, ncols),\n+\t\tslots:    make([]int, ncols),\n+\t\toffsets:  make([]int64, ncols),\n+\t}\n+\ttr.tbl.Retain()\n+\n+\tif tr.chksz <= 0 {\n+\t\ttr.chksz = math.MaxInt64\n+\t}\n+\n+\tfor i := range tr.chunks {\n+\t\tcol := tr.tbl.Column(i)\n+\t\ttr.chunks[i] = col.Data()\n+\t\ttr.chunks[i].Retain()\n+\t}\n+\treturn tr\n+}\n+\n+func (tr *TableReader) Schema() *arrow.Schema { return tr.tbl.Schema() }\n+func (tr *TableReader) Record() Record        { return tr.rec }\n+\n+func (tr *TableReader) Next() bool {\n+\tif tr.cur >= tr.max {\n+\t\treturn false\n+\t}\n+\n+\tif tr.rec != nil {\n+\t\ttr.rec.Release()\n+\t}\n+\n+\t// determine the minimum contiguous slice across all columns\n+\tchunksz := imin64(tr.max, tr.chksz)\n+\tchunks := make([]Interface, len(tr.chunks))\n+\tfor i := range chunks {\n+\t\tj := tr.slots[i]\n+\t\tchunk := tr.chunks[i].Chunk(j)\n+\t\tremain := int64(chunk.Len()) - tr.offsets[i]\n+\t\tif remain < chunksz {\n+\t\t\tchunksz = remain\n+\t\t}\n+\n+\t\tchunks[i] = chunk\n+\t}\n+\n+\t// slice the chunks, advance each chunk slot as appropriate.\n+\tbatch := make([]Interface, len(tr.chunks))\n+\tfor i, chunk := range chunks {\n+\t\tvar slice Interface\n+\t\toffset := tr.offsets[i]\n+\t\tswitch int64(chunk.Len()) - offset {\n+\t\tcase chunksz:\n+\t\t\ttr.slots[i]++\n+\t\t\ttr.offsets[i] = 0\n+\t\t\tif offset > 0 {\n+\t\t\t\t// need to slice\n+\t\t\t\tslice = NewSlice(chunk, offset, offset+chunksz)\n+\t\t\t} else {\n+\t\t\t\t// no need to slice\n+\t\t\t\tslice = chunk\n+\t\t\t\tslice.Retain()\n+\t\t\t}\n+\t\tdefault:\n+\t\t\ttr.offsets[i] += chunksz\n+\t\t\tslice = NewSlice(chunk, offset, offset+chunksz)\n+\t\t}\n+\t\tbatch[i] = slice\n+\t}\n+\n+\ttr.cur += chunksz\n+\ttr.rec = NewRecord(tr.tbl.Schema(), batch, chunksz)\n+\n+\tfor _, arr := range batch {\n+\t\tarr.Release()\n+\t}\n+\n+\treturn true\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (tr *TableReader) Retain() {\n+\tatomic.AddInt64(&tr.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+// Release may be called simultaneously from multiple goroutines.\n+func (tr *TableReader) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&tr.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&tr.refCount, -1) == 0 {\n+\t\ttr.tbl.Release()\n+\t\tfor _, chk := range tr.chunks {\n+\t\t\tchk.Release()\n+\t\t}\n+\t\tif tr.rec != nil {\n+\t\t\ttr.rec.Release()\n+\t\t}\n+\t\ttr.tbl = nil\n+\t\ttr.chunks = nil\n+\t\ttr.slots = nil\n+\t\ttr.offsets = nil\n+\t}\n+}\n+\n+func imin64(a, b int64) int64 {\n+\tif a < b {\n+\t\treturn a\n+\t}\n+\treturn b\n+}\n+\n var (\n-\t_ Table = (*simpleTable)(nil)\n+\t_ Table        = (*simpleTable)(nil)\n+\t_ RecordReader = (*TableReader)(nil)\n )\ndiff --git a/go/arrow/array/table_test.go b/go/arrow/array/table_test.go\nindex 7d240a7e2e..cb4abefb4b 100644\n--- a/go/arrow/array/table_test.go\n+++ b/go/arrow/array/table_test.go\n@@ -331,7 +331,7 @@ func TestColumn(t *testing.T) {\n \t\t\tif got, want := col.Data(), tc.chunk; got != want {\n \t\t\t\tt.Fatalf(\"invalid chunked: got=%#v, want=%#v\", got, want)\n \t\t\t}\n-\t\t\tif got, want := col.Field(), tc.field; !reflect.DeepEqual(got, want) {\n+\t\t\tif got, want := col.Field(), tc.field; !got.Equal(want) {\n \t\t\t\tt.Fatalf(\"invalid field: got=%#v, want=%#v\", got, want)\n \t\t\t}\n \t\t\tif got, want := col.Name(), tc.field.Name; got != want {\n@@ -446,14 +446,14 @@ func TestTable(t *testing.T) {\n \ttbl.Retain()\n \ttbl.Release()\n \n-\tif got, want := tbl.Schema(), schema; !reflect.DeepEqual(got, want) {\n+\tif got, want := tbl.Schema(), schema; !got.Equal(want) {\n \t\tt.Fatalf(\"invalid schema: got=%#v, want=%#v\", got, want)\n \t}\n \n-\tif got, want := tbl.NumRows(), 10; got != want {\n+\tif got, want := tbl.NumRows(), int64(10); got != want {\n \t\tt.Fatalf(\"invalid number of rows: got=%d, want=%d\", got, want)\n \t}\n-\tif got, want := tbl.NumCols(), 2; got != want {\n+\tif got, want := tbl.NumCols(), int64(2); got != want {\n \t\tt.Fatalf(\"invalid number of columns: got=%d, want=%d\", got, want)\n \t}\n \tif got, want := tbl.Column(0).Name(), col1.Name(); got != want {\n@@ -463,7 +463,7 @@ func TestTable(t *testing.T) {\n \tfor _, tc := range []struct {\n \t\tschema *arrow.Schema\n \t\tcols   []array.Column\n-\t\trows   int\n+\t\trows   int64\n \t\terr    error\n \t}{\n \t\t{\n@@ -555,3 +555,125 @@ func TestTable(t *testing.T) {\n \t\t})\n \t}\n }\n+\n+func TestTableReader(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tschema := arrow.NewSchema(\n+\t\t[]arrow.Field{\n+\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\tarrow.Field{Name: \"f2-f64\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t},\n+\t\tnil,\n+\t)\n+\tcol1 := func() *array.Column {\n+\t\tchunk := func() *array.Chunked {\n+\t\t\tib := array.NewInt32Builder(mem)\n+\t\t\tdefer ib.Release()\n+\n+\t\t\tib.AppendValues([]int32{1, 2, 3}, nil)\n+\t\t\ti1 := ib.NewInt32Array()\n+\t\t\tdefer i1.Release()\n+\n+\t\t\tib.AppendValues([]int32{4, 5, 6, 7, 8, 9, 10}, nil)\n+\t\t\ti2 := ib.NewInt32Array()\n+\t\t\tdefer i2.Release()\n+\n+\t\t\tc := array.NewChunked(\n+\t\t\t\tarrow.PrimitiveTypes.Int32,\n+\t\t\t\t[]array.Interface{i1, i2},\n+\t\t\t)\n+\t\t\treturn c\n+\t\t}()\n+\t\tdefer chunk.Release()\n+\n+\t\treturn array.NewColumn(schema.Field(0), chunk)\n+\t}()\n+\tdefer col1.Release()\n+\n+\tcol2 := func() *array.Column {\n+\t\tchunk := func() *array.Chunked {\n+\t\t\tfb := array.NewFloat64Builder(mem)\n+\t\t\tdefer fb.Release()\n+\n+\t\t\tfb.AppendValues([]float64{1, 2, 3, 4, 5}, nil)\n+\t\t\tf1 := fb.NewFloat64Array()\n+\t\t\tdefer f1.Release()\n+\n+\t\t\tfb.AppendValues([]float64{6, 7}, nil)\n+\t\t\tf2 := fb.NewFloat64Array()\n+\t\t\tdefer f2.Release()\n+\n+\t\t\tfb.AppendValues([]float64{8, 9, 10}, nil)\n+\t\t\tf3 := fb.NewFloat64Array()\n+\t\t\tdefer f3.Release()\n+\n+\t\t\tc := array.NewChunked(\n+\t\t\t\tarrow.PrimitiveTypes.Float64,\n+\t\t\t\t[]array.Interface{f1, f2, f3},\n+\t\t\t)\n+\t\t\treturn c\n+\t\t}()\n+\t\tdefer chunk.Release()\n+\n+\t\treturn array.NewColumn(schema.Field(1), chunk)\n+\t}()\n+\tdefer col2.Release()\n+\n+\tcols := []array.Column{*col1, *col2}\n+\ttbl := array.NewTable(schema, cols, -1)\n+\tdefer tbl.Release()\n+\n+\ttr := array.NewTableReader(tbl, 1)\n+\tdefer tr.Release()\n+\n+\ttr.Retain()\n+\ttr.Release()\n+\n+\tfor tr.Next() {\n+\t}\n+\n+\tfor _, tc := range []struct {\n+\t\tsz   int64\n+\t\tn    int64\n+\t\trows []int64\n+\t}{\n+\t\t{sz: -1, n: 4, rows: []int64{3, 2, 2, 3}},\n+\t\t{sz: +0, n: 4, rows: []int64{3, 2, 2, 3}},\n+\t\t{sz: +1, n: 10, rows: []int64{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}},\n+\t\t{sz: +2, n: 6, rows: []int64{2, 1, 2, 2, 2, 1}},\n+\t} {\n+\t\tt.Run(fmt.Sprintf(\"chunksz=%d\", tc.sz), func(t *testing.T) {\n+\t\t\ttr := array.NewTableReader(tbl, tc.sz)\n+\t\t\tdefer tr.Release()\n+\n+\t\t\tif got, want := tr.Schema(), tbl.Schema(); !got.Equal(want) {\n+\t\t\t\tt.Fatalf(\"invalid schema: got=%#v, want=%#v\", got, want)\n+\t\t\t}\n+\n+\t\t\tvar (\n+\t\t\t\tn   int64\n+\t\t\t\tsum int64\n+\t\t\t)\n+\t\t\tfor tr.Next() {\n+\t\t\t\trec := tr.Record()\n+\t\t\t\tif got, want := rec.Schema(), tbl.Schema(); !got.Equal(want) {\n+\t\t\t\t\tt.Fatalf(\"invalid schema: got=%#v, want=%#v\", got, want)\n+\t\t\t\t}\n+\t\t\t\tif got, want := rec.NumRows(), tc.rows[n]; got != want {\n+\t\t\t\t\tt.Fatalf(\"invalid number of rows[%d]: got=%d, want=%d\", n, got, want)\n+\t\t\t\t}\n+\t\t\t\tn++\n+\t\t\t\tsum += rec.NumRows()\n+\t\t\t}\n+\n+\t\t\tif got, want := n, tc.n; got != want {\n+\t\t\t\tt.Fatalf(\"invalid number of iterations: got=%d, want=%d\", got, want)\n+\t\t\t}\n+\t\t\tif sum != tbl.NumRows() {\n+\t\t\t\tt.Fatalf(\"invalid number of rows iterated over: got=%d, want=%d\", sum, tbl.NumRows())\n+\t\t\t}\n+\t\t})\n+\t}\n+}\ndiff --git a/go/arrow/datatype_nested.go b/go/arrow/datatype_nested.go\nindex a0d3b142ec..1c9b693aea 100644\n--- a/go/arrow/datatype_nested.go\n+++ b/go/arrow/datatype_nested.go\n@@ -16,7 +16,10 @@\n \n package arrow\n \n-import \"fmt\"\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+)\n \n // ListType describes a nested type in which each array slot contains\n // a variable-size sequence of values, all having the same relative type.\n@@ -105,6 +108,10 @@ type Field struct {\n \n func (f Field) HasMetadata() bool { return f.Metadata.Len() != 0 }\n \n+func (f Field) Equal(o Field) bool {\n+\treturn reflect.DeepEqual(f, o)\n+}\n+\n var (\n \t_ DataType = (*ListType)(nil)\n \t_ DataType = (*StructType)(nil)\ndiff --git a/go/arrow/datatype_nested_test.go b/go/arrow/datatype_nested_test.go\nindex 8b3f5b7ff5..ee1fd451c8 100644\n--- a/go/arrow/datatype_nested_test.go\n+++ b/go/arrow/datatype_nested_test.go\n@@ -241,3 +241,53 @@ func TestStructOf(t *testing.T) {\n \t\t})\n \t}\n }\n+\n+func TestFieldEqual(t *testing.T) {\n+\tfor _, tc := range []struct {\n+\t\ta, b Field\n+\t\twant bool\n+\t}{\n+\t\t{\n+\t\t\ta:    Field{},\n+\t\t\tb:    Field{},\n+\t\t\twant: true,\n+\t\t},\n+\t\t{\n+\t\t\ta:    Field{Name: \"a\", Type: PrimitiveTypes.Int32},\n+\t\t\tb:    Field{Name: \"a\", Type: PrimitiveTypes.Int32},\n+\t\t\twant: true,\n+\t\t},\n+\t\t{\n+\t\t\ta:    Field{Name: \"a\", Type: PrimitiveTypes.Int32, Metadata: MetadataFrom(map[string]string{\"k\": \"v\"})},\n+\t\t\tb:    Field{Name: \"a\", Type: PrimitiveTypes.Int32, Metadata: MetadataFrom(map[string]string{\"k\": \"v\"})},\n+\t\t\twant: true,\n+\t\t},\n+\t\t{\n+\t\t\ta:    Field{Name: \"a\", Type: PrimitiveTypes.Int32, Metadata: MetadataFrom(map[string]string{\"k\": \"k\"})},\n+\t\t\tb:    Field{Name: \"a\", Type: PrimitiveTypes.Int32, Metadata: MetadataFrom(map[string]string{\"k\": \"v\"})},\n+\t\t\twant: false,\n+\t\t},\n+\t\t{\n+\t\t\ta:    Field{Name: \"a\", Type: PrimitiveTypes.Int32},\n+\t\t\tb:    Field{Name: \"a\", Type: PrimitiveTypes.Int32, Metadata: MetadataFrom(map[string]string{\"k\": \"v\"})},\n+\t\t\twant: false,\n+\t\t},\n+\t\t{\n+\t\t\ta:    Field{Name: \"a\", Type: PrimitiveTypes.Int32},\n+\t\t\tb:    Field{Name: \"b\", Type: PrimitiveTypes.Int32},\n+\t\t\twant: false,\n+\t\t},\n+\t\t{\n+\t\t\ta:    Field{Name: \"a\", Type: PrimitiveTypes.Int32},\n+\t\t\tb:    Field{Name: \"a\", Type: PrimitiveTypes.Uint32},\n+\t\t\twant: false,\n+\t\t},\n+\t} {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\t\t\tgot := tc.a.Equal(tc.b)\n+\t\t\tif got != tc.want {\n+\t\t\t\tt.Fatalf(\"got=%v, want=%v\", got, tc.want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\ndiff --git a/go/arrow/schema.go b/go/arrow/schema.go\nindex d1a1dee3ae..8ae5fc19a1 100644\n--- a/go/arrow/schema.go\n+++ b/go/arrow/schema.go\n@@ -138,3 +138,24 @@ func (sc *Schema) HasField(n string) bool {\n }\n \n func (sc *Schema) HasMetadata() bool { return len(sc.meta.keys) > 0 }\n+\n+// Equal returns whether two schema are equal.\n+// Equal does not compare the metadata.\n+func (sc *Schema) Equal(o *Schema) bool {\n+\tif sc == o {\n+\t\treturn true\n+\t}\n+\tif sc == nil || o == nil {\n+\t\treturn false\n+\t}\n+\tif len(sc.fields) != len(o.fields) {\n+\t\treturn false\n+\t}\n+\n+\tfor i := range sc.fields {\n+\t\tif !sc.fields[i].Equal(o.fields[i]) {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn true\n+}\ndiff --git a/go/arrow/schema_test.go b/go/arrow/schema_test.go\nindex d8c87a0aa3..4ad36c0624 100644\n--- a/go/arrow/schema_test.go\n+++ b/go/arrow/schema_test.go\n@@ -161,7 +161,7 @@ func TestSchema(t *testing.T) {\n \t\t\t\tt.Fatalf(\"invalid number of fields. got=%d, want=%d\", got, want)\n \t\t\t}\n \n-\t\t\tif got, want := s.Field(0), tc.fields[0]; !reflect.DeepEqual(got, want) {\n+\t\t\tif got, want := s.Field(0), tc.fields[0]; !got.Equal(want) {\n \t\t\t\tt.Fatalf(\"invalid field: got=%#v, want=%#v\", got, want)\n \t\t\t}\n \n@@ -196,7 +196,7 @@ func TestSchema(t *testing.T) {\n \t\t\t\t\tif ok := s.HasField(tc.name); ok != tc.ok {\n \t\t\t\t\t\tt.Fatalf(\"invalid HasField(%s): got=%v, want=%v\", tc.name, ok, tc.ok)\n \t\t\t\t\t}\n-\t\t\t\t\tif !reflect.DeepEqual(got, tc.field) {\n+\t\t\t\t\tif !got.Equal(tc.field) {\n \t\t\t\t\t\tt.Fatalf(\"invalid field: got=%#v, want=%#v\", got, tc.field)\n \t\t\t\t\t}\n \t\t\t\t})\n@@ -204,3 +204,83 @@ func TestSchema(t *testing.T) {\n \t\t})\n \t}\n }\n+\n+func TestSchemaEqual(t *testing.T) {\n+\tfields := []Field{\n+\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t{Name: \"f2\", Type: PrimitiveTypes.Int64},\n+\t}\n+\tmd := func() *Metadata {\n+\t\tmd := MetadataFrom(map[string]string{\"k1\": \"v1\", \"k2\": \"v2\"})\n+\t\treturn &md\n+\t}()\n+\n+\tfor _, tc := range []struct {\n+\t\ta, b *Schema\n+\t\twant bool\n+\t}{\n+\t\t{\n+\t\t\ta:    nil,\n+\t\t\tb:    nil,\n+\t\t\twant: true,\n+\t\t},\n+\t\t{\n+\t\t\ta:    NewSchema(nil, nil),\n+\t\t\tb:    NewSchema(nil, nil),\n+\t\t\twant: true,\n+\t\t},\n+\t\t{\n+\t\t\ta:    NewSchema(fields, nil),\n+\t\t\tb:    NewSchema(fields, nil),\n+\t\t\twant: true,\n+\t\t},\n+\t\t{\n+\t\t\ta:    NewSchema(fields, md),\n+\t\t\tb:    NewSchema(fields, nil),\n+\t\t\twant: true,\n+\t\t},\n+\t\t{\n+\t\t\ta:    NewSchema(fields, md),\n+\t\t\tb:    NewSchema(fields, md),\n+\t\t\twant: true,\n+\t\t},\n+\t\t{\n+\t\t\ta:    NewSchema(fields[:1], md),\n+\t\t\tb:    NewSchema(fields, md),\n+\t\t\twant: false,\n+\t\t},\n+\t\t{\n+\t\t\ta: NewSchema(fields, md),\n+\t\t\tb: NewSchema([]Field{\n+\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t{Name: \"f2\", Type: PrimitiveTypes.Int32},\n+\t\t\t}, md),\n+\t\t\twant: false,\n+\t\t},\n+\t\t{\n+\t\t\ta: NewSchema(fields, md),\n+\t\t\tb: NewSchema([]Field{\n+\t\t\t\t{Name: \"f1\", Type: PrimitiveTypes.Int32},\n+\t\t\t\t{Name: \"fx\", Type: PrimitiveTypes.Int64},\n+\t\t\t}, md),\n+\t\t\twant: false,\n+\t\t},\n+\t} {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\t\t\tif !tc.a.Equal(tc.a) {\n+\t\t\t\tt.Fatalf(\"a != a\")\n+\t\t\t}\n+\t\t\tif !tc.b.Equal(tc.b) {\n+\t\t\t\tt.Fatalf(\"b != b\")\n+\t\t\t}\n+\t\t\tab := tc.a.Equal(tc.b)\n+\t\t\tif ab != tc.want {\n+\t\t\t\tt.Fatalf(\"got=%v, want=%v\", ab, tc.want)\n+\t\t\t}\n+\t\t\tba := tc.b.Equal(tc.a)\n+\t\t\tif ab != ba {\n+\t\t\t\tt.Fatalf(\"ab != ba\")\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T21:28:33.545+0000",
                    "updated": "2018-10-31T21:28:33.545+0000",
                    "started": "2018-10-31T21:28:33.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161321",
                    "issueId": "13194392"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5bf960e1[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7da6a9b9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a589ec3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@32fb0b50[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f24582f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@75e026a2[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b70105b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@21bb23ee[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c53f2d6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@587204c8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13cb3555[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6b17c091[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 31 21:28:16 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-31T21:28:16.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3621/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-26T11:51:27.000+0000",
        "updated": "2018-10-31T21:28:33.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] implement TableBatchReader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194392/comment/16670780",
                    "id": "16670780",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2847\n[https://github.com/apache/arrow/pull/2847]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-31T21:28:16.600+0000",
                    "updated": "2018-10-31T21:28:16.600+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zodj:",
        "customfield_12314139": null
    }
}