{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13341974",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974",
    "key": "ARROW-10684",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "aggregateprogress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10684/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 16,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/515252",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me opened a new pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739\n\n\n   This change aligns with the spec, in that a struct array's nulls should take precedence over a child array's nulls.\r\n   We carry across the parent's null buffer, and merge it with the child's.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-22T12:39:44.198+0000",
                    "updated": "2020-11-22T12:39:44.198+0000",
                    "started": "2020-11-22T12:39:44.198+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515252",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/515253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#issuecomment-731741901\n\n\n   https://issues.apache.org/jira/browse/ARROW-10684\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-22T12:40:17.695+0000",
                    "updated": "2020-11-22T12:40:17.695+0000",
                    "started": "2020-11-22T12:40:17.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515253",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/515254",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#issuecomment-731743163\n\n\n   @jorgecarleitao @alamb I've only implemented this for `<struct<primitive>>` for now, I'd like to get some feedback on whether the approach that I'm taking is fine.\r\n   \r\n   The change mainly keeps track of the null buffer of `ArrayData` for arrays, and combines the array's null buffer with the child's, when a nested type is encountered. I use `BitAnd` to combine the buffers.\r\n   \r\n   Where we need null counts for comparisons, we have to recalculate the counts from the separate null buffer, as they might have been combined with the parent's null buffer (buffer-ception? let me know if my sentence is unclear).\r\n   \r\n   I'll work on the below so we have sufficient test coverage:\r\n   * `<struct<struct<primitive>>>`\r\n   * `<struct<struct<dictionary>>>`\r\n   * `<list<primitive>>`\r\n   * `<list<dictionary>>`\r\n   * `<list<struct<list<primitive>>>>`\r\n   \r\n    \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-22T12:50:04.338+0000",
                    "updated": "2020-11-22T12:50:04.338+0000",
                    "started": "2020-11-22T12:50:04.338+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515254",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/515262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#discussion_r528333746\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -30,19 +32,51 @@ fn equal_values(\n         .iter()\n         .zip(rhs.child_data())\n         .all(|(lhs_values, rhs_values)| {\n-            equal_range(lhs_values, rhs_values, lhs_start, rhs_start, len)\n+            // merge the null data\n+            let lhs_merged_nulls = match (lhs_nulls, lhs_values.null_buffer()) {\n+                (None, None) => None,\n+                (None, Some(c)) => Some(c.clone()),\n+                (Some(p), None) => Some(p.clone()),\n+                (Some(p), Some(c)) => {\n+                    let merged = (p & c).unwrap();\n+                    Some(merged)\n+                }\n+            };\n+            let rhs_merged_nulls = match (rhs_nulls, rhs_values.null_buffer()) {\n+                (None, None) => None,\n+                (None, Some(c)) => Some(c.clone()),\n+                (Some(p), None) => Some(p.clone()),\n+                (Some(p), Some(c)) => {\n+                    let merged = (p & c).unwrap();\n+                    Some(merged)\n+                }\n+            };\n+            equal_range(\n+                lhs_values,\n+                rhs_values,\n+                lhs_merged_nulls.as_ref(),\n+                rhs_merged_nulls.as_ref(),\n+                lhs_start,\n+                rhs_start,\n+                len,\n+            )\n         })\n }\n \n pub(super) fn struct_equal(\n     lhs: &ArrayData,\n     rhs: &ArrayData,\n+    lhs_nulls: Option<&Buffer>,\n+    rhs_nulls: Option<&Buffer>,\n     lhs_start: usize,\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n-    if lhs.null_count() == 0 && rhs.null_count() == 0 {\n-        equal_values(lhs, rhs, lhs_start, rhs_start, len)\n+    // we have to recalculate null counts from the null bitmaps\n+    let lhs_null_count = count_nulls(lhs_nulls, lhs_start, len);\n+    let rhs_null_count = count_nulls(rhs_nulls, rhs_start, len);\n+    if lhs_null_count == 0 && rhs_null_count == 0 {\n+        equal_values(lhs, rhs, lhs_nulls, rhs_nulls, lhs_start, rhs_start, len)\n     } else {\n         // with nulls, we need to compare item by item whenever it is not null\n         (0..len).all(|i| {\n\nReview comment:\n       Wouldn't it be easier if we took into account the nulls on this statement here:\r\n   \r\n   ```rust\r\n   let lhs_is_null = lhs.is_null(lhs_pos);\r\n   let rhs_is_null = rhs.is_null(rhs_pos);\r\n   ```\r\n   \r\n   by replacing it with\r\n   \r\n   ```rust\r\n   let lhs_is_null = lhs.is_null(lhs_pos) && lhs.nullbitmap.isnull(lhs_pos);\r\n   let rhs_is_null = rhs.is_null(rhs_pos) && rhs.nullbitmap.isnull(rhs_pos);\r\n   ```\r\n   \r\n   (still keeping the re-count in place, to avoid wrongfully optimizing like this PR fixes)\r\n   \r\n   The advantage is that for all types except `struct`, this PR merges two equal bitmaps twice (all types except `struct` now pass `null_buffer()` to `equal_range`. E.g. in `list`:\r\n   \r\n   ```\r\n               lhs_values,\r\n               rhs_values,\r\n               lhs_values.null_buffer(),\r\n               rhs_values.null_buffer(),\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-22T13:25:56.312+0000",
                    "updated": "2020-11-22T13:25:56.312+0000",
                    "started": "2020-11-22T13:25:56.312+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515262",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/515787",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#discussion_r529026844\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -15,13 +15,15 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-use crate::array::ArrayData;\n+use crate::{array::data::count_nulls, array::ArrayData, buffer::Buffer};\n \n use super::equal_range;\n \n fn equal_values(\n\nReview comment:\n       Given the number of parameters this function has, it might be worth adding doc comments on it (especially as `lhs_nulls` and `rhs_nulls` now have non trivial semantics (nullability is checked by `AND`ing them together)\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -30,19 +32,51 @@ fn equal_values(\n         .iter()\n         .zip(rhs.child_data())\n         .all(|(lhs_values, rhs_values)| {\n-            equal_range(lhs_values, rhs_values, lhs_start, rhs_start, len)\n+            // merge the null data\n+            let lhs_merged_nulls = match (lhs_nulls, lhs_values.null_buffer()) {\n+                (None, None) => None,\n+                (None, Some(c)) => Some(c.clone()),\n+                (Some(p), None) => Some(p.clone()),\n+                (Some(p), Some(c)) => {\n+                    let merged = (p & c).unwrap();\n+                    Some(merged)\n+                }\n+            };\n+            let rhs_merged_nulls = match (rhs_nulls, rhs_values.null_buffer()) {\n+                (None, None) => None,\n+                (None, Some(c)) => Some(c.clone()),\n+                (Some(p), None) => Some(p.clone()),\n+                (Some(p), Some(c)) => {\n+                    let merged = (p & c).unwrap();\n+                    Some(merged)\n+                }\n+            };\n+            equal_range(\n+                lhs_values,\n+                rhs_values,\n+                lhs_merged_nulls.as_ref(),\n+                rhs_merged_nulls.as_ref(),\n+                lhs_start,\n+                rhs_start,\n+                len,\n+            )\n         })\n }\n \n pub(super) fn struct_equal(\n     lhs: &ArrayData,\n     rhs: &ArrayData,\n+    lhs_nulls: Option<&Buffer>,\n+    rhs_nulls: Option<&Buffer>,\n     lhs_start: usize,\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n-    if lhs.null_count() == 0 && rhs.null_count() == 0 {\n-        equal_values(lhs, rhs, lhs_start, rhs_start, len)\n+    // we have to recalculate null counts from the null bitmaps\n+    let lhs_null_count = count_nulls(lhs_nulls, lhs_start, len);\n+    let rhs_null_count = count_nulls(rhs_nulls, rhs_start, len);\n+    if lhs_null_count == 0 && rhs_null_count == 0 {\n+        equal_values(lhs, rhs, lhs_nulls, rhs_nulls, lhs_start, rhs_start, len)\n     } else {\n         // with nulls, we need to compare item by item whenever it is not null\n         (0..len).all(|i| {\n\nReview comment:\n       An alternate thing to do is to pass in `None` for all types except `struct`\r\n   \r\n   https://github.com/apache/arrow/pull/8739/files#diff-6fca2b5d7c8b47ba17e7c93c2eaa2cf7f6b65392d0573254fee593449b8adf46R43\r\n   \r\n   \n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -30,19 +32,51 @@ fn equal_values(\n         .iter()\n         .zip(rhs.child_data())\n         .all(|(lhs_values, rhs_values)| {\n-            equal_range(lhs_values, rhs_values, lhs_start, rhs_start, len)\n+            // merge the null data\n+            let lhs_merged_nulls = match (lhs_nulls, lhs_values.null_buffer()) {\n\nReview comment:\n       I don't know how much `c.clone()` costs below, but if we want to avoid `clone()` you could potentially use a structure like this:\r\n   \r\n   ```\r\n   alamb@MacBook-Pro rust % git diff\r\n   git diff\r\n   WARNING: terminal is not fully functional\r\n   -  (press RETURN)\r\n   diff --git a/rust/arrow/src/array/equal/structure.rs b/rust/arrow/src/array/equal/structure.rs\r\n   index cad7a9ea5..dc29d44ba 100644\r\n   --- a/rust/arrow/src/array/equal/structure.rs\r\n   +++ b/rust/arrow/src/array/equal/structure.rs\r\n   @@ -28,6 +28,9 @@ fn equal_values(\r\n        rhs_start: usize,\r\n        len: usize,\r\n    ) -> bool {\r\n   +    let mut temp_lhs : Option<Buffer> = None;\r\n   +    let mut temp_rhs : Option<Buffer> = None;\r\n   +\r\n        lhs.child_data()\r\n            .iter()\r\n            .zip(rhs.child_data())\r\n   @@ -35,27 +38,29 @@ fn equal_values(\r\n                // merge the null data\r\n                let lhs_merged_nulls = match (lhs_nulls, lhs_values.null_buffer()) {\r\n                    (None, None) => None,\r\n   -                (None, Some(c)) => Some(c.clone()),\r\n   -                (Some(p), None) => Some(p.clone()),\r\n   +                (None, Some(c)) => Some(c),\r\n   +                (Some(p), None) => Some(p),\r\n                    (Some(p), Some(c)) => {\r\n                        let merged = (p & c).unwrap();\r\n   -                    Some(merged)\r\n   +                    temp_lhs = Some(merged);\r\n   +                    temp_lhs.as_ref()\r\n                    }\r\n                };\r\n                let rhs_merged_nulls = match (rhs_nulls, rhs_values.null_buffer()) {\r\n                    (None, None) => None,\r\n   -                (None, Some(c)) => Some(c.clone()),\r\n   -                (Some(p), None) => Some(p.clone()),\r\n   +                (None, Some(c)) => Some(c),\r\n   +                (Some(p), None) => Some(p),\r\n                    (Some(p), Some(c)) => {\r\n                        let merged = (p & c).unwrap();\r\n   -                    Some(merged)\r\n   +                    temp_rhs = Some(merged);\r\n   +                    temp_rhs.as_ref()\r\n                    }\r\n                };\r\n                equal_range(\r\n                    lhs_values,\r\n                    rhs_values,\r\n   -                lhs_merged_nulls.as_ref(),\r\n   -                rhs_merged_nulls.as_ref(),\r\n   +                lhs_merged_nulls,\r\n   +                rhs_merged_nulls,\r\n                    lhs_start,\r\n                    rhs_start,\r\n                    len,\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-23T22:17:29.122+0000",
                    "updated": "2020-11-23T22:17:29.122+0000",
                    "started": "2020-11-23T22:17:29.121+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515787",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/517117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#discussion_r531148917\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -30,19 +32,51 @@ fn equal_values(\n         .iter()\n         .zip(rhs.child_data())\n         .all(|(lhs_values, rhs_values)| {\n-            equal_range(lhs_values, rhs_values, lhs_start, rhs_start, len)\n+            // merge the null data\n+            let lhs_merged_nulls = match (lhs_nulls, lhs_values.null_buffer()) {\n+                (None, None) => None,\n+                (None, Some(c)) => Some(c.clone()),\n+                (Some(p), None) => Some(p.clone()),\n+                (Some(p), Some(c)) => {\n+                    let merged = (p & c).unwrap();\n+                    Some(merged)\n+                }\n+            };\n+            let rhs_merged_nulls = match (rhs_nulls, rhs_values.null_buffer()) {\n+                (None, None) => None,\n+                (None, Some(c)) => Some(c.clone()),\n+                (Some(p), None) => Some(p.clone()),\n+                (Some(p), Some(c)) => {\n+                    let merged = (p & c).unwrap();\n+                    Some(merged)\n+                }\n+            };\n+            equal_range(\n+                lhs_values,\n+                rhs_values,\n+                lhs_merged_nulls.as_ref(),\n+                rhs_merged_nulls.as_ref(),\n+                lhs_start,\n+                rhs_start,\n+                len,\n+            )\n         })\n }\n \n pub(super) fn struct_equal(\n     lhs: &ArrayData,\n     rhs: &ArrayData,\n+    lhs_nulls: Option<&Buffer>,\n+    rhs_nulls: Option<&Buffer>,\n     lhs_start: usize,\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n-    if lhs.null_count() == 0 && rhs.null_count() == 0 {\n-        equal_values(lhs, rhs, lhs_start, rhs_start, len)\n+    // we have to recalculate null counts from the null bitmaps\n+    let lhs_null_count = count_nulls(lhs_nulls, lhs_start, len);\n+    let rhs_null_count = count_nulls(rhs_nulls, rhs_start, len);\n+    if lhs_null_count == 0 && rhs_null_count == 0 {\n+        equal_values(lhs, rhs, lhs_nulls, rhs_nulls, lhs_start, rhs_start, len)\n     } else {\n         // with nulls, we need to compare item by item whenever it is not null\n         (0..len).all(|i| {\n\nReview comment:\n       @alamb if we pass `None` where we don't have a struct, wouldn't we be describing a different position, which might be incorrect?\r\n   A `None` for the `Option<&Buffer>` indicates that there are no nulls, as arrays are permitted to omit the null buffer/bitmap altogether if there are no nulls. So if we pass `None` for `lhs_nulls`, we shouldn't have to look at `lhs`, as the presumption is that we've already extracted the null buffer, and there wasn't any.\r\n   \r\n   Perhaps I don't understand you\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-26T16:58:18.897+0000",
                    "updated": "2020-11-26T16:58:18.897+0000",
                    "started": "2020-11-26T16:58:18.896+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517117",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/517120",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#discussion_r529030845\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -30,19 +32,51 @@ fn equal_values(\n         .iter()\n         .zip(rhs.child_data())\n         .all(|(lhs_values, rhs_values)| {\n-            equal_range(lhs_values, rhs_values, lhs_start, rhs_start, len)\n+            // merge the null data\n+            let lhs_merged_nulls = match (lhs_nulls, lhs_values.null_buffer()) {\n\nReview comment:\n       I don't know how much `c.clone()` costs below, but if we want to avoid `clone()` you could potentially use a structure like this:\r\n   \r\n   ```diff\r\n   alamb@MacBook-Pro rust % git diff\r\n   git diff\r\n   WARNING: terminal is not fully functional\r\n   -  (press RETURN)\r\n   diff --git a/rust/arrow/src/array/equal/structure.rs b/rust/arrow/src/array/equal/structure.rs\r\n   index cad7a9ea5..dc29d44ba 100644\r\n   --- a/rust/arrow/src/array/equal/structure.rs\r\n   +++ b/rust/arrow/src/array/equal/structure.rs\r\n   @@ -28,6 +28,9 @@ fn equal_values(\r\n        rhs_start: usize,\r\n        len: usize,\r\n    ) -> bool {\r\n   +    let mut temp_lhs : Option<Buffer> = None;\r\n   +    let mut temp_rhs : Option<Buffer> = None;\r\n   +\r\n        lhs.child_data()\r\n            .iter()\r\n            .zip(rhs.child_data())\r\n   @@ -35,27 +38,29 @@ fn equal_values(\r\n                // merge the null data\r\n                let lhs_merged_nulls = match (lhs_nulls, lhs_values.null_buffer()) {\r\n                    (None, None) => None,\r\n   -                (None, Some(c)) => Some(c.clone()),\r\n   -                (Some(p), None) => Some(p.clone()),\r\n   +                (None, Some(c)) => Some(c),\r\n   +                (Some(p), None) => Some(p),\r\n                    (Some(p), Some(c)) => {\r\n                        let merged = (p & c).unwrap();\r\n   -                    Some(merged)\r\n   +                    temp_lhs = Some(merged);\r\n   +                    temp_lhs.as_ref()\r\n                    }\r\n                };\r\n                let rhs_merged_nulls = match (rhs_nulls, rhs_values.null_buffer()) {\r\n                    (None, None) => None,\r\n   -                (None, Some(c)) => Some(c.clone()),\r\n   -                (Some(p), None) => Some(p.clone()),\r\n   +                (None, Some(c)) => Some(c),\r\n   +                (Some(p), None) => Some(p),\r\n                    (Some(p), Some(c)) => {\r\n                        let merged = (p & c).unwrap();\r\n   -                    Some(merged)\r\n   +                    temp_rhs = Some(merged);\r\n   +                    temp_rhs.as_ref()\r\n                    }\r\n                };\r\n                equal_range(\r\n                    lhs_values,\r\n                    rhs_values,\r\n   -                lhs_merged_nulls.as_ref(),\r\n   -                rhs_merged_nulls.as_ref(),\r\n   +                lhs_merged_nulls,\r\n   +                rhs_merged_nulls,\r\n                    lhs_start,\r\n                    rhs_start,\r\n                    len,\r\n   ```\r\n   \r\n   (Neville edited this add diff formatting to the code)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-26T17:06:14.130+0000",
                    "updated": "2020-11-26T17:06:14.130+0000",
                    "started": "2020-11-26T17:06:14.130+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517120",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/517122",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#discussion_r531155130\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -30,19 +32,51 @@ fn equal_values(\n         .iter()\n         .zip(rhs.child_data())\n         .all(|(lhs_values, rhs_values)| {\n-            equal_range(lhs_values, rhs_values, lhs_start, rhs_start, len)\n+            // merge the null data\n+            let lhs_merged_nulls = match (lhs_nulls, lhs_values.null_buffer()) {\n\nReview comment:\n       Thanks! Suggestion taken\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-26T17:12:31.063+0000",
                    "updated": "2020-11-26T17:12:31.063+0000",
                    "started": "2020-11-26T17:12:31.063+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517122",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/517457",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#discussion_r531780455\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -15,13 +15,15 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-use crate::array::ArrayData;\n+use crate::{array::data::count_nulls, array::ArrayData, buffer::Buffer};\n \n use super::equal_range;\n \n fn equal_values(\n\nReview comment:\n       I've added the details on the same function in `crate::array::equal::mod`. I've copied the same doc from the function in `mod` to here, but I think it's redundant as the functions are private, as long as the `mod` one is sufficiently documented.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-27T20:39:12.431+0000",
                    "updated": "2020-11-27T20:39:12.431+0000",
                    "started": "2020-11-27T20:39:12.431+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517457",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/517458",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#discussion_r531781486\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -15,45 +15,97 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-use crate::array::ArrayData;\n+use crate::{\n+    array::data::count_nulls, array::ArrayData, buffer::Buffer, util::bit_util::get_bit,\n+};\n \n use super::equal_range;\n \n+/// Compares the values of two [ArrayData] starting at `lhs_start` and `rhs_start` respectively\n+/// for `len` slots. The null buffers `lhs_nulls` and `rhs_nulls` inherit parent nullability.\n+///\n+/// If an array is a child of a struct or list, the array's nulls have to be merged with the parent.\n+/// This then affects the null count of the array, thus the merged nulls are passed separately\n+/// as `lhs_nulls` and `rhs_nulls` variables to functions.\n+/// The nulls are merged with a bitwise AND, and null counts are recomputed wheer necessary.\n fn equal_values(\n     lhs: &ArrayData,\n     rhs: &ArrayData,\n+    lhs_nulls: Option<&Buffer>,\n+    rhs_nulls: Option<&Buffer>,\n     lhs_start: usize,\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n+    let mut temp_lhs: Option<Buffer> = None;\n+    let mut temp_rhs: Option<Buffer> = None;\n+\n     lhs.child_data()\n         .iter()\n         .zip(rhs.child_data())\n         .all(|(lhs_values, rhs_values)| {\n-            equal_range(lhs_values, rhs_values, lhs_start, rhs_start, len)\n+            // merge the null data\n+            let lhs_merged_nulls = match (lhs_nulls, lhs_values.null_buffer()) {\n+                (None, None) => None,\n+                (None, Some(c)) => Some(c),\n+                (Some(p), None) => Some(p),\n+                (Some(p), Some(c)) => {\n+                    let merged = (p & c).unwrap();\n+                    temp_lhs = Some(merged);\n+                    temp_lhs.as_ref()\n+                }\n+            };\n+            let rhs_merged_nulls = match (rhs_nulls, rhs_values.null_buffer()) {\n+                (None, None) => None,\n+                (None, Some(c)) => Some(c),\n+                (Some(p), None) => Some(p),\n+                (Some(p), Some(c)) => {\n+                    let merged = (p & c).unwrap();\n+                    temp_rhs = Some(merged);\n+                    temp_rhs.as_ref()\n+                }\n+            };\n+            equal_range(\n+                lhs_values,\n+                rhs_values,\n+                lhs_merged_nulls,\n+                rhs_merged_nulls,\n+                lhs_start,\n+                rhs_start,\n+                len,\n+            )\n         })\n }\n \n pub(super) fn struct_equal(\n     lhs: &ArrayData,\n     rhs: &ArrayData,\n+    lhs_nulls: Option<&Buffer>,\n+    rhs_nulls: Option<&Buffer>,\n     lhs_start: usize,\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n-    if lhs.null_count() == 0 && rhs.null_count() == 0 {\n-        equal_values(lhs, rhs, lhs_start, rhs_start, len)\n+    // we have to recalculate null counts from the null buffers\n+    let lhs_null_count = count_nulls(lhs_nulls, lhs_start, len);\n+    let rhs_null_count = count_nulls(rhs_nulls, rhs_start, len);\n+    if lhs_null_count == 0 && rhs_null_count == 0 {\n+        equal_values(lhs, rhs, lhs_nulls, rhs_nulls, lhs_start, rhs_start, len)\n     } else {\n+        // get a ref of the null buffer bytes, to use in testing for nullness\n\nReview comment:\n       @jorgecarleitao does this address your comment? I was incorrectly using the array's null buffer, instead of checking nullness from the merged one. If it doesn't, then it means I didn't understand what you were suggesting.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-27T20:44:46.658+0000",
                    "updated": "2020-11-27T20:44:46.658+0000",
                    "started": "2020-11-27T20:44:46.658+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517458",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/517459",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#issuecomment-734986453\n\n\n   @alamb @jorgecarleitao this is blocking some work that I'm doing on parquet, so I'd like to limit the scope of the PR to just nested structs, as I want to submit a PR that correctly reads nested arrow structs in parquet.\r\n   I'm also a bit unsure if the struct null inheritance semantics also apply to lists, so I'd like to defer that to follow-ups (as I'd need to do the work when writing nested arrow lists to parquet).\r\n   \r\n   Are you fine with reviewing the PR as is just for nested structs? I believe I've responded to or addressed comments raised so far, but I'll address more where they come, or where i haven't covered everything as yet.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-27T20:48:42.632+0000",
                    "updated": "2020-11-27T20:48:42.632+0000",
                    "started": "2020-11-27T20:48:42.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517459",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/517518",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#discussion_r532032623\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -30,19 +32,51 @@ fn equal_values(\n         .iter()\n         .zip(rhs.child_data())\n         .all(|(lhs_values, rhs_values)| {\n-            equal_range(lhs_values, rhs_values, lhs_start, rhs_start, len)\n+            // merge the null data\n+            let lhs_merged_nulls = match (lhs_nulls, lhs_values.null_buffer()) {\n+                (None, None) => None,\n+                (None, Some(c)) => Some(c.clone()),\n+                (Some(p), None) => Some(p.clone()),\n+                (Some(p), Some(c)) => {\n+                    let merged = (p & c).unwrap();\n+                    Some(merged)\n+                }\n+            };\n+            let rhs_merged_nulls = match (rhs_nulls, rhs_values.null_buffer()) {\n+                (None, None) => None,\n+                (None, Some(c)) => Some(c.clone()),\n+                (Some(p), None) => Some(p.clone()),\n+                (Some(p), Some(c)) => {\n+                    let merged = (p & c).unwrap();\n+                    Some(merged)\n+                }\n+            };\n+            equal_range(\n+                lhs_values,\n+                rhs_values,\n+                lhs_merged_nulls.as_ref(),\n+                rhs_merged_nulls.as_ref(),\n+                lhs_start,\n+                rhs_start,\n+                len,\n+            )\n         })\n }\n \n pub(super) fn struct_equal(\n     lhs: &ArrayData,\n     rhs: &ArrayData,\n+    lhs_nulls: Option<&Buffer>,\n+    rhs_nulls: Option<&Buffer>,\n     lhs_start: usize,\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n-    if lhs.null_count() == 0 && rhs.null_count() == 0 {\n-        equal_values(lhs, rhs, lhs_start, rhs_start, len)\n+    // we have to recalculate null counts from the null bitmaps\n+    let lhs_null_count = count_nulls(lhs_nulls, lhs_start, len);\n+    let rhs_null_count = count_nulls(rhs_nulls, rhs_start, len);\n+    if lhs_null_count == 0 && rhs_null_count == 0 {\n+        equal_values(lhs, rhs, lhs_nulls, rhs_nulls, lhs_start, rhs_start, len)\n     } else {\n         // with nulls, we need to compare item by item whenever it is not null\n         (0..len).all(|i| {\n\nReview comment:\n       @nevi-me  I think I was confused -- I was trying to offer some way to avoid @jorgecarleitao 's concern of double merge concerns but now that I re-read my comments I am not sure that they make any sense. Sorry for the confusion\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-28T12:06:40.645+0000",
                    "updated": "2020-11-28T12:06:40.645+0000",
                    "started": "2020-11-28T12:06:40.644+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517518",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/517520",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#issuecomment-735223342\n\n\n   The CI failures seem unrelated\r\n   \r\n   For example: \r\n   \r\n   https://github.com/apache/arrow/pull/8739/checks?check_run_id=1465465859\r\n   \r\n   ```\r\n   test result: ok. 56 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n   \r\n   + popd\r\n   /d/a/arrow/arrow/rust /d/a/arrow/arrow\r\n   + pushd arrow\r\n   /d/a/arrow/arrow/rust/arrow /d/a/arrow/arrow/rust /d/a/arrow/arrow\r\n   + cargo run --example builders\r\n      Compiling arrow v3.0.0-SNAPSHOT (D:\\a\\arrow\\arrow\\rust\\arrow)\r\n   LLVM ERROR: IO failure on output stream: no space on device\r\n   error: could not compile `arrow`\r\n   ```\r\n   \r\n   I am going to retrigger the tests on github and then plan to merge this PR if they pass\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-28T12:08:07.225+0000",
                    "updated": "2020-11-28T12:08:07.225+0000",
                    "started": "2020-11-28T12:08:07.225+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517520",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/517521",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#issuecomment-735224685\n\n\n   > I am going to retrigger the tests on github and then plan to merge this PR if they pass\r\n   \r\n   @alamb something's filling up our space on CI, so the tests might still fail. I tried looking at it in the morning, but ended up parking it for later so I could do other work.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-28T12:21:40.213+0000",
                    "updated": "2020-11-28T12:21:40.213+0000",
                    "started": "2020-11-28T12:21:40.213+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517521",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/517629",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739#issuecomment-735384692\n\n\n   @jorgecarleitao may you please take a look at this again when you have a chance. I opted not to address lists for now, as their semantics might be fine. I'll look into other types as part of ARROW-10766, which I'll be working on in the evenings in the coming week.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-29T12:16:29.145+0000",
                    "updated": "2020-11-29T12:16:29.145+0000",
                    "started": "2020-11-29T12:16:29.145+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517629",
                    "issueId": "13341974"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/worklog/517635",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao closed pull request #8739:\nURL: https://github.com/apache/arrow/pull/8739\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-29T12:34:43.115+0000",
                    "updated": "2020-11-29T12:34:43.115+0000",
                    "started": "2020-11-29T12:34:43.114+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517635",
                    "issueId": "13341974"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 9600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@29086010[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46c7868[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ae1fa21[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6d296c2d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79f7a7eb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1fadb02[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4cf09ee[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@22a1555e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@662d761e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@31588312[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d246cae[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6587cbf1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9600,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Nov 29 12:34:45 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-29T12:34:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10684/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-11-22T10:15:50.000+0000",
        "updated": "2020-11-29T12:34:45.000+0000",
        "timeoriginalestimate": null,
        "description": "When creating a struct array with a primitive child array, it is possible for the child to be non-nullable, while its parent struct array is nullable.\r\n\r\nIn this scenario, the child array's slots where the parent is null, become invalidated, such that an array with [1, 2, 3] having slot 2 being null, should be interpreted as [1, 0, 3].\r\n\r\nThis issue becomes evident in Parquet roundtrip tests, as we end up not able to correctly compare nested structures that have non-null children.\r\n\r\nThe specification caters for the above behaviour, see [http://arrow.apache.org/docs/format/Columnar.html#struct-layout]\u00a0.\r\n\r\nWhen a struct has nulls, its child array(s) nullability is subject to the parent struct.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Logical equality should consider parent array nullability",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341974/comment/17240220",
                    "id": "17240220",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 8739\n[https://github.com/apache/arrow/pull/8739]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-11-29T12:34:45.958+0000",
                    "updated": "2020-11-29T12:34:45.958+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ktl4:",
        "customfield_12314139": null
    }
}