{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13286058",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058",
    "key": "ARROW-7879",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7879/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/389481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T16:11:07.763+0000",
                    "updated": "2020-02-19T16:11:07.763+0000",
                    "started": "2020-02-19T16:11:07.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389481",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/389485",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#issuecomment-588303485\n \n \n   https://issues.apache.org/jira/browse/ARROW-7879\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T16:16:44.568+0000",
                    "updated": "2020-02-19T16:16:44.568+0000",
                    "started": "2020-02-19T16:16:44.568+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389485",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/390637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r382589233\n \n \n\n ##########\n File path: docs/source/cpp/memory.rst\n ##########\n @@ -125,3 +125,38 @@ you can do so using the :class:`arrow::stl::allocator` wrapper.\n Conversely, you can also use a STL allocator to allocate Arrow memory,\n using the :class:`arrow::stl::STLMemoryPool` class.  However, this may be less\n performant, as STL allocators don't provide a resizing operation.\n+\n+Devices\n+=======\n \n Review comment:\n   Would appreciate advice and suggestions on the wording here. cc @nealrichardson @wesm \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T13:48:12.130+0000",
                    "updated": "2020-02-21T13:48:12.130+0000",
                    "started": "2020-02-21T13:48:12.129+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390637",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/390753",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r382669610\n \n \n\n ##########\n File path: cpp/src/arrow/buffer.h\n ##########\n @@ -254,20 +252,51 @@ class ARROW_EXPORT Buffer {\n   /// `data()` pointer.  Otherwise, you'll have to `View()` or `Copy()` it.\n   bool is_cpu() const { return is_cpu_; }\n \n+  /// \\brief Whether the buffer is mutable\n+  ///\n+  /// If this function returns true, you are allowed to modify buffer contents\n+  /// using the pointer returned by `mutable_data()` or `mutable_address()`.\n+  bool is_mutable() const { return is_mutable_; }\n+\n   const std::shared_ptr<Device>& device() const { return memory_manager_->device(); }\n \n   const std::shared_ptr<MemoryManager>& memory_manager() const { return memory_manager_; }\n \n   std::shared_ptr<Buffer> parent() const { return parent_; }\n \n-  // Convenience functions\n+  /// \\brief Get a RandomAccessFile for reading a buffer\n+  ///\n+  /// The returned file object reads from this buffer's underlying memory.\n   static Result<std::shared_ptr<io::RandomAccessFile>> GetReader(std::shared_ptr<Buffer>);\n+\n+  /// \\brief Get a OutputStream for writing to a buffer\n+  ///\n+  /// The buffer must be mutable.  The returned stream object writes into the buffer's\n+  /// underlying memory (but it won't resize it).\n   static Result<std::shared_ptr<io::OutputStream>> GetWriter(std::shared_ptr<Buffer>);\n \n+  /// \\brief Copy buffer\n+  ///\n+  /// The buffer contents will be copied into a new buffer allocated by the\n+  /// given MemoryManager.  This function supports cross-device copies.\n   static Result<std::shared_ptr<Buffer>> Copy(std::shared_ptr<Buffer> source,\n                                               const std::shared_ptr<MemoryManager>& to);\n+\n+  /// \\brief View buffer\n+  ///\n+  /// Return a Buffer that reflects this buffer, seen potentially from another device,\n+  /// without explicitly copying its contents.  How this is implemented depends\n \n Review comment:\n   ```suggestion\r\n     /// without necessarily copying its contents.  How this is implemented depends\r\n   ```\r\n   ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T16:40:15.247+0000",
                    "updated": "2020-02-21T16:40:15.247+0000",
                    "started": "2020-02-21T16:40:15.247+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390753",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/390754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r382680047\n \n \n\n ##########\n File path: docs/source/cpp/memory.rst\n ##########\n @@ -125,3 +125,38 @@ you can do so using the :class:`arrow::stl::allocator` wrapper.\n Conversely, you can also use a STL allocator to allocate Arrow memory,\n using the :class:`arrow::stl::STLMemoryPool` class.  However, this may be less\n performant, as STL allocators don't provide a resizing operation.\n+\n+Devices\n+=======\n+\n+Many Arrow applications only access CPU (host) memory.  However, in some cases\n+it is desired to handle on-device memory (such as on-board memory on a GPU\n+add-on card) as well as regular CPU memory.\n+\n+Arrow represents different devices, including the CPU, using the\n \n Review comment:\n   ```suggestion\r\n   Arrow represents the CPU and other devices using the\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T16:40:15.267+0000",
                    "updated": "2020-02-21T16:40:15.267+0000",
                    "started": "2020-02-21T16:40:15.267+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390754",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/390755",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r382674642\n \n \n\n ##########\n File path: cpp/src/arrow/buffer.h\n ##########\n @@ -254,20 +252,51 @@ class ARROW_EXPORT Buffer {\n   /// `data()` pointer.  Otherwise, you'll have to `View()` or `Copy()` it.\n   bool is_cpu() const { return is_cpu_; }\n \n+  /// \\brief Whether the buffer is mutable\n+  ///\n+  /// If this function returns true, you are allowed to modify buffer contents\n+  /// using the pointer returned by `mutable_data()` or `mutable_address()`.\n+  bool is_mutable() const { return is_mutable_; }\n+\n   const std::shared_ptr<Device>& device() const { return memory_manager_->device(); }\n \n   const std::shared_ptr<MemoryManager>& memory_manager() const { return memory_manager_; }\n \n   std::shared_ptr<Buffer> parent() const { return parent_; }\n \n-  // Convenience functions\n+  /// \\brief Get a RandomAccessFile for reading a buffer\n+  ///\n+  /// The returned file object reads from this buffer's underlying memory.\n   static Result<std::shared_ptr<io::RandomAccessFile>> GetReader(std::shared_ptr<Buffer>);\n+\n+  /// \\brief Get a OutputStream for writing to a buffer\n+  ///\n+  /// The buffer must be mutable.  The returned stream object writes into the buffer's\n+  /// underlying memory (but it won't resize it).\n \n Review comment:\n   It might be worthwhile to duplicate this parenthesis in the doccomment for `MemoryManager::GetBufferWriter`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T16:40:15.473+0000",
                    "updated": "2020-02-21T16:40:15.473+0000",
                    "started": "2020-02-21T16:40:15.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390755",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/390756",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r382684402\n \n \n\n ##########\n File path: docs/source/cpp/memory.rst\n ##########\n @@ -125,3 +125,38 @@ you can do so using the :class:`arrow::stl::allocator` wrapper.\n Conversely, you can also use a STL allocator to allocate Arrow memory,\n using the :class:`arrow::stl::STLMemoryPool` class.  However, this may be less\n performant, as STL allocators don't provide a resizing operation.\n+\n+Devices\n+=======\n+\n+Many Arrow applications only access CPU (host) memory.  However, in some cases\n+it is desired to handle on-device memory (such as on-board memory on a GPU\n \n Review comment:\n   ```suggestion\r\n   it is desirable to handle on-device memory (such as on-board memory on a GPU)\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T16:40:15.604+0000",
                    "updated": "2020-02-21T16:40:15.604+0000",
                    "started": "2020-02-21T16:40:15.603+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390756",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/390757",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r382680705\n \n \n\n ##########\n File path: docs/source/cpp/memory.rst\n ##########\n @@ -125,3 +125,38 @@ you can do so using the :class:`arrow::stl::allocator` wrapper.\n Conversely, you can also use a STL allocator to allocate Arrow memory,\n using the :class:`arrow::stl::STLMemoryPool` class.  However, this may be less\n performant, as STL allocators don't provide a resizing operation.\n+\n+Devices\n+=======\n+\n+Many Arrow applications only access CPU (host) memory.  However, in some cases\n+it is desired to handle on-device memory (such as on-board memory on a GPU\n+add-on card) as well as regular CPU memory.\n+\n+Arrow represents different devices, including the CPU, using the\n+:class:`arrow::Device` abstraction.  Furthermore, one can create\n+:class:`arrow::MemoryManager` instances which specifiy how to allocate\n+memory on a given device (for example, using a particular\n+:class:`arrow::MemoryPool` on the CPU).\n+\n+Device-Agnostic Programming\n+---------------------------\n+\n+If you receive a Buffer from third-party code, you can query whether it is\n+CPU-readable by calling its :func:`~arrow::Buffer::is_cpu` method.\n+\n+You can also make sure the Buffer can be viewed on a given device, in a\n \n Review comment:\n   ```suggestion\r\n   You can also check generically that a Buffer can be viewed on a given device\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T16:40:15.609+0000",
                    "updated": "2020-02-21T16:40:15.609+0000",
                    "started": "2020-02-21T16:40:15.609+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390757",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/390758",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r382684912\n \n \n\n ##########\n File path: docs/source/cpp/memory.rst\n ##########\n @@ -125,3 +125,38 @@ you can do so using the :class:`arrow::stl::allocator` wrapper.\n Conversely, you can also use a STL allocator to allocate Arrow memory,\n using the :class:`arrow::stl::STLMemoryPool` class.  However, this may be less\n performant, as STL allocators don't provide a resizing operation.\n+\n+Devices\n+=======\n+\n+Many Arrow applications only access CPU (host) memory.  However, in some cases\n \n Review comment:\n   ```suggestion\r\n   Many Arrow applications only access host (CPU) memory.  However, in some cases\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T16:40:15.700+0000",
                    "updated": "2020-02-21T16:40:15.700+0000",
                    "started": "2020-02-21T16:40:15.699+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390758",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/390759",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r382683952\n \n \n\n ##########\n File path: docs/source/cpp/memory.rst\n ##########\n @@ -125,3 +125,38 @@ you can do so using the :class:`arrow::stl::allocator` wrapper.\n Conversely, you can also use a STL allocator to allocate Arrow memory,\n using the :class:`arrow::stl::STLMemoryPool` class.  However, this may be less\n performant, as STL allocators don't provide a resizing operation.\n+\n+Devices\n+=======\n+\n+Many Arrow applications only access CPU (host) memory.  However, in some cases\n+it is desired to handle on-device memory (such as on-board memory on a GPU\n+add-on card) as well as regular CPU memory.\n+\n+Arrow represents different devices, including the CPU, using the\n+:class:`arrow::Device` abstraction.  Furthermore, one can create\n \n Review comment:\n   ```suggestion\r\n   :class:`arrow::Device` abstraction.  The associated class :class:`arrow::MemoryManager`\r\n   specifies how to allocate on a given device.  Each device has a default memory manager, but\r\n   additional instances may be constructed (for example, wrapping a custom\r\n   :class:`arrow::MemoryPool` the CPU).\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T16:40:15.703+0000",
                    "updated": "2020-02-21T16:40:15.703+0000",
                    "started": "2020-02-21T16:40:15.703+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390759",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/390760",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r382684469\n \n \n\n ##########\n File path: docs/source/cpp/memory.rst\n ##########\n @@ -125,3 +125,38 @@ you can do so using the :class:`arrow::stl::allocator` wrapper.\n Conversely, you can also use a STL allocator to allocate Arrow memory,\n using the :class:`arrow::stl::STLMemoryPool` class.  However, this may be less\n performant, as STL allocators don't provide a resizing operation.\n+\n+Devices\n+=======\n+\n+Many Arrow applications only access CPU (host) memory.  However, in some cases\n+it is desired to handle on-device memory (such as on-board memory on a GPU\n+add-on card) as well as regular CPU memory.\n \n Review comment:\n   ```suggestion\r\n   as well as host memory.\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T16:40:15.705+0000",
                    "updated": "2020-02-21T16:40:15.705+0000",
                    "started": "2020-02-21T16:40:15.705+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390760",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/391633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r383194958\n \n \n\n ##########\n File path: cpp/src/arrow/buffer.h\n ##########\n @@ -254,20 +252,51 @@ class ARROW_EXPORT Buffer {\n   /// `data()` pointer.  Otherwise, you'll have to `View()` or `Copy()` it.\n   bool is_cpu() const { return is_cpu_; }\n \n+  /// \\brief Whether the buffer is mutable\n+  ///\n+  /// If this function returns true, you are allowed to modify buffer contents\n+  /// using the pointer returned by `mutable_data()` or `mutable_address()`.\n+  bool is_mutable() const { return is_mutable_; }\n+\n   const std::shared_ptr<Device>& device() const { return memory_manager_->device(); }\n \n   const std::shared_ptr<MemoryManager>& memory_manager() const { return memory_manager_; }\n \n   std::shared_ptr<Buffer> parent() const { return parent_; }\n \n-  // Convenience functions\n+  /// \\brief Get a RandomAccessFile for reading a buffer\n+  ///\n+  /// The returned file object reads from this buffer's underlying memory.\n   static Result<std::shared_ptr<io::RandomAccessFile>> GetReader(std::shared_ptr<Buffer>);\n+\n+  /// \\brief Get a OutputStream for writing to a buffer\n+  ///\n+  /// The buffer must be mutable.  The returned stream object writes into the buffer's\n+  /// underlying memory (but it won't resize it).\n   static Result<std::shared_ptr<io::OutputStream>> GetWriter(std::shared_ptr<Buffer>);\n \n+  /// \\brief Copy buffer\n+  ///\n+  /// The buffer contents will be copied into a new buffer allocated by the\n+  /// given MemoryManager.  This function supports cross-device copies.\n   static Result<std::shared_ptr<Buffer>> Copy(std::shared_ptr<Buffer> source,\n                                               const std::shared_ptr<MemoryManager>& to);\n+\n+  /// \\brief View buffer\n+  ///\n+  /// Return a Buffer that reflects this buffer, seen potentially from another device,\n+  /// without explicitly copying its contents.  How this is implemented depends\n \n Review comment:\n   Hmm, I should explain what I mean in that docstring. If you \"view\" a GPU buffer on the CPU, you call a NVidia API which gives you the CPU-readable address of the GPU buffer. But, of course, when you do the actual reading, _something_ has to happen: either the data is transferred byte per byte on the PCIe bus (probably slow?), or the data is cached in some host memory area for faster retrieval. But that caching is implicit and not seen by userspace (hence \"without explicitly copying its contents\").\r\n   \r\n   With that in mind, do you still think the wording should be changed?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T10:48:44.268+0000",
                    "updated": "2020-02-24T10:48:44.268+0000",
                    "started": "2020-02-24T10:48:44.267+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391633",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/391654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r383245950\n \n \n\n ##########\n File path: cpp/src/arrow/buffer.h\n ##########\n @@ -254,20 +252,51 @@ class ARROW_EXPORT Buffer {\n   /// `data()` pointer.  Otherwise, you'll have to `View()` or `Copy()` it.\n   bool is_cpu() const { return is_cpu_; }\n \n+  /// \\brief Whether the buffer is mutable\n+  ///\n+  /// If this function returns true, you are allowed to modify buffer contents\n+  /// using the pointer returned by `mutable_data()` or `mutable_address()`.\n+  bool is_mutable() const { return is_mutable_; }\n+\n   const std::shared_ptr<Device>& device() const { return memory_manager_->device(); }\n \n   const std::shared_ptr<MemoryManager>& memory_manager() const { return memory_manager_; }\n \n   std::shared_ptr<Buffer> parent() const { return parent_; }\n \n-  // Convenience functions\n+  /// \\brief Get a RandomAccessFile for reading a buffer\n+  ///\n+  /// The returned file object reads from this buffer's underlying memory.\n   static Result<std::shared_ptr<io::RandomAccessFile>> GetReader(std::shared_ptr<Buffer>);\n+\n+  /// \\brief Get a OutputStream for writing to a buffer\n+  ///\n+  /// The buffer must be mutable.  The returned stream object writes into the buffer's\n+  /// underlying memory (but it won't resize it).\n \n Review comment:\n   Will do.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T12:50:02.325+0000",
                    "updated": "2020-02-24T12:50:02.325+0000",
                    "started": "2020-02-24T12:50:02.325+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391654",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/391655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r383246229\n \n \n\n ##########\n File path: docs/source/cpp/memory.rst\n ##########\n @@ -125,3 +125,38 @@ you can do so using the :class:`arrow::stl::allocator` wrapper.\n Conversely, you can also use a STL allocator to allocate Arrow memory,\n using the :class:`arrow::stl::STLMemoryPool` class.  However, this may be less\n performant, as STL allocators don't provide a resizing operation.\n+\n+Devices\n+=======\n+\n+Many Arrow applications only access CPU (host) memory.  However, in some cases\n+it is desired to handle on-device memory (such as on-board memory on a GPU\n+add-on card) as well as regular CPU memory.\n+\n+Arrow represents different devices, including the CPU, using the\n+:class:`arrow::Device` abstraction.  Furthermore, one can create\n+:class:`arrow::MemoryManager` instances which specifiy how to allocate\n+memory on a given device (for example, using a particular\n+:class:`arrow::MemoryPool` on the CPU).\n+\n+Device-Agnostic Programming\n+---------------------------\n+\n+If you receive a Buffer from third-party code, you can query whether it is\n+CPU-readable by calling its :func:`~arrow::Buffer::is_cpu` method.\n+\n+You can also make sure the Buffer can be viewed on a given device, in a\n \n Review comment:\n   It's not just a check. The Buffer returned by `View` does not have the same address as the original buffer.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T12:50:43.731+0000",
                    "updated": "2020-02-24T12:50:43.731+0000",
                    "started": "2020-02-24T12:50:43.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391655",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/391656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r383246229\n \n \n\n ##########\n File path: docs/source/cpp/memory.rst\n ##########\n @@ -125,3 +125,38 @@ you can do so using the :class:`arrow::stl::allocator` wrapper.\n Conversely, you can also use a STL allocator to allocate Arrow memory,\n using the :class:`arrow::stl::STLMemoryPool` class.  However, this may be less\n performant, as STL allocators don't provide a resizing operation.\n+\n+Devices\n+=======\n+\n+Many Arrow applications only access CPU (host) memory.  However, in some cases\n+it is desired to handle on-device memory (such as on-board memory on a GPU\n+add-on card) as well as regular CPU memory.\n+\n+Arrow represents different devices, including the CPU, using the\n+:class:`arrow::Device` abstraction.  Furthermore, one can create\n+:class:`arrow::MemoryManager` instances which specifiy how to allocate\n+memory on a given device (for example, using a particular\n+:class:`arrow::MemoryPool` on the CPU).\n+\n+Device-Agnostic Programming\n+---------------------------\n+\n+If you receive a Buffer from third-party code, you can query whether it is\n+CPU-readable by calling its :func:`~arrow::Buffer::is_cpu` method.\n+\n+You can also make sure the Buffer can be viewed on a given device, in a\n \n Review comment:\n   It's not just a check. The Buffer returned by `View` does not necessarily have the same address as the original buffer.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T12:50:52.675+0000",
                    "updated": "2020-02-24T12:50:52.675+0000",
                    "started": "2020-02-24T12:50:52.675+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391656",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/391723",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r383304831\n \n \n\n ##########\n File path: cpp/src/arrow/buffer.h\n ##########\n @@ -254,20 +252,51 @@ class ARROW_EXPORT Buffer {\n   /// `data()` pointer.  Otherwise, you'll have to `View()` or `Copy()` it.\n   bool is_cpu() const { return is_cpu_; }\n \n+  /// \\brief Whether the buffer is mutable\n+  ///\n+  /// If this function returns true, you are allowed to modify buffer contents\n+  /// using the pointer returned by `mutable_data()` or `mutable_address()`.\n+  bool is_mutable() const { return is_mutable_; }\n+\n   const std::shared_ptr<Device>& device() const { return memory_manager_->device(); }\n \n   const std::shared_ptr<MemoryManager>& memory_manager() const { return memory_manager_; }\n \n   std::shared_ptr<Buffer> parent() const { return parent_; }\n \n-  // Convenience functions\n+  /// \\brief Get a RandomAccessFile for reading a buffer\n+  ///\n+  /// The returned file object reads from this buffer's underlying memory.\n   static Result<std::shared_ptr<io::RandomAccessFile>> GetReader(std::shared_ptr<Buffer>);\n+\n+  /// \\brief Get a OutputStream for writing to a buffer\n+  ///\n+  /// The buffer must be mutable.  The returned stream object writes into the buffer's\n+  /// underlying memory (but it won't resize it).\n   static Result<std::shared_ptr<io::OutputStream>> GetWriter(std::shared_ptr<Buffer>);\n \n+  /// \\brief Copy buffer\n+  ///\n+  /// The buffer contents will be copied into a new buffer allocated by the\n+  /// given MemoryManager.  This function supports cross-device copies.\n   static Result<std::shared_ptr<Buffer>> Copy(std::shared_ptr<Buffer> source,\n                                               const std::shared_ptr<MemoryManager>& to);\n+\n+  /// \\brief View buffer\n+  ///\n+  /// Return a Buffer that reflects this buffer, seen potentially from another device,\n+  /// without explicitly copying its contents.  How this is implemented depends\n \n Review comment:\n   Hmmm, maybe:\r\n   \"Concrete devices and buffer kinds may support transfer mechanisms more sophisticated than an an explicit eager copy. For example `CudaBuffer`s may be viewed by a CPU device directly: data will be transferred from the GPU transparently when the CPU buffer is accessed.\r\n   \r\n   \\return An equivalent Buffer viewed from the provided memory manager's device, or nullptr if only eager copy is supported.\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T14:43:49.741+0000",
                    "updated": "2020-02-24T14:43:49.741+0000",
                    "started": "2020-02-24T14:43:49.741+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391723",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/391725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r383307558\n \n \n\n ##########\n File path: docs/source/cpp/memory.rst\n ##########\n @@ -125,3 +125,38 @@ you can do so using the :class:`arrow::stl::allocator` wrapper.\n Conversely, you can also use a STL allocator to allocate Arrow memory,\n using the :class:`arrow::stl::STLMemoryPool` class.  However, this may be less\n performant, as STL allocators don't provide a resizing operation.\n+\n+Devices\n+=======\n+\n+Many Arrow applications only access CPU (host) memory.  However, in some cases\n+it is desired to handle on-device memory (such as on-board memory on a GPU\n+add-on card) as well as regular CPU memory.\n+\n+Arrow represents different devices, including the CPU, using the\n+:class:`arrow::Device` abstraction.  Furthermore, one can create\n+:class:`arrow::MemoryManager` instances which specifiy how to allocate\n+memory on a given device (for example, using a particular\n+:class:`arrow::MemoryPool` on the CPU).\n+\n+Device-Agnostic Programming\n+---------------------------\n+\n+If you receive a Buffer from third-party code, you can query whether it is\n+CPU-readable by calling its :func:`~arrow::Buffer::is_cpu` method.\n+\n+You can also make sure the Buffer can be viewed on a given device, in a\n \n Review comment:\n   \r\n   How about:\r\n   ```suggestion\r\n   You can also generically use a non-eager-copy transfer mechanism to view the Buffer on a\r\n   given device, by calling :func:`arrow::Buffer::View` (which will return `nullptr` if only\r\n   copy is supported) or :func:`arrow::Buffer::ViewOrCopy` (which will fall back\r\n   to copy if :func:`arrow::Buffer::View` would return `nullptr`).\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T14:48:17.721+0000",
                    "updated": "2020-02-24T14:48:17.721+0000",
                    "started": "2020-02-24T14:48:17.720+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391725",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/391763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r383336289\n \n \n\n ##########\n File path: cpp/src/arrow/buffer.h\n ##########\n @@ -254,20 +252,51 @@ class ARROW_EXPORT Buffer {\n   /// `data()` pointer.  Otherwise, you'll have to `View()` or `Copy()` it.\n   bool is_cpu() const { return is_cpu_; }\n \n+  /// \\brief Whether the buffer is mutable\n+  ///\n+  /// If this function returns true, you are allowed to modify buffer contents\n+  /// using the pointer returned by `mutable_data()` or `mutable_address()`.\n+  bool is_mutable() const { return is_mutable_; }\n+\n   const std::shared_ptr<Device>& device() const { return memory_manager_->device(); }\n \n   const std::shared_ptr<MemoryManager>& memory_manager() const { return memory_manager_; }\n \n   std::shared_ptr<Buffer> parent() const { return parent_; }\n \n-  // Convenience functions\n+  /// \\brief Get a RandomAccessFile for reading a buffer\n+  ///\n+  /// The returned file object reads from this buffer's underlying memory.\n   static Result<std::shared_ptr<io::RandomAccessFile>> GetReader(std::shared_ptr<Buffer>);\n+\n+  /// \\brief Get a OutputStream for writing to a buffer\n+  ///\n+  /// The buffer must be mutable.  The returned stream object writes into the buffer's\n+  /// underlying memory (but it won't resize it).\n   static Result<std::shared_ptr<io::OutputStream>> GetWriter(std::shared_ptr<Buffer>);\n \n+  /// \\brief Copy buffer\n+  ///\n+  /// The buffer contents will be copied into a new buffer allocated by the\n+  /// given MemoryManager.  This function supports cross-device copies.\n   static Result<std::shared_ptr<Buffer>> Copy(std::shared_ptr<Buffer> source,\n                                               const std::shared_ptr<MemoryManager>& to);\n+\n+  /// \\brief View buffer\n+  ///\n+  /// Return a Buffer that reflects this buffer, seen potentially from another device,\n+  /// without explicitly copying its contents.  How this is implemented depends\n \n Review comment:\n   Hmm, not terribly fond of that spelling :-) I'm trying out another one.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T15:34:21.553+0000",
                    "updated": "2020-02-24T15:34:21.553+0000",
                    "started": "2020-02-24T15:34:21.552+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391763",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/392049",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#issuecomment-590520682\n \n \n   @bkietz Feel free to review the wording changes I did :-)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T19:58:45.382+0000",
                    "updated": "2020-02-24T19:58:45.382+0000",
                    "started": "2020-02-24T19:58:45.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392049",
                    "issueId": "13286058"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/worklog/392100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6454: ARROW-7879: [C++][Doc] Add doc for the Device API\nURL: https://github.com/apache/arrow/pull/6454#discussion_r383523958\n \n \n\n ##########\n File path: cpp/src/arrow/buffer.h\n ##########\n @@ -254,20 +252,53 @@ class ARROW_EXPORT Buffer {\n   /// `data()` pointer.  Otherwise, you'll have to `View()` or `Copy()` it.\n   bool is_cpu() const { return is_cpu_; }\n \n+  /// \\brief Whether the buffer is mutable\n+  ///\n+  /// If this function returns true, you are allowed to modify buffer contents\n+  /// using the pointer returned by `mutable_data()` or `mutable_address()`.\n+  bool is_mutable() const { return is_mutable_; }\n+\n   const std::shared_ptr<Device>& device() const { return memory_manager_->device(); }\n \n   const std::shared_ptr<MemoryManager>& memory_manager() const { return memory_manager_; }\n \n   std::shared_ptr<Buffer> parent() const { return parent_; }\n \n-  // Convenience functions\n+  /// \\brief Get a RandomAccessFile for reading a buffer\n+  ///\n+  /// The returned file object reads from this buffer's underlying memory.\n   static Result<std::shared_ptr<io::RandomAccessFile>> GetReader(std::shared_ptr<Buffer>);\n+\n+  /// \\brief Get a OutputStream for writing to a buffer\n+  ///\n+  /// The buffer must be mutable.  The returned stream object writes into the buffer's\n+  /// underlying memory (but it won't resize it).\n   static Result<std::shared_ptr<io::OutputStream>> GetWriter(std::shared_ptr<Buffer>);\n \n+  /// \\brief Copy buffer\n+  ///\n+  /// The buffer contents will be copied into a new buffer allocated by the\n+  /// given MemoryManager.  This function supports cross-device copies.\n   static Result<std::shared_ptr<Buffer>> Copy(std::shared_ptr<Buffer> source,\n                                               const std::shared_ptr<MemoryManager>& to);\n+\n+  /// \\brief View buffer\n+  ///\n+  /// Return a Buffer that reflects this buffer, seen potentially from another\n+  /// device, without making an explicit copy of the contents.  The underlying\n+  /// mechanism is typically implemented by the kernel or device driver, and may\n+  /// involve lazy caching of parts of the buffer contents on the destination\n+  /// device's memory.\n+  ///\n+  /// This function may fail, since not all buffers support being viewed on\n \n Review comment:\n   A user might reasonably expect that \"fail\" means \"return an error status\", like `NotImplemented(\"CPU buffers viewed on FPGA\")`.\r\n   \r\n   In fact: when a noncopy view is unsupported then null will be returned and an error is only expected when it's bubbled up from cuda or so.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T21:27:40.870+0000",
                    "updated": "2020-02-24T21:27:40.870+0000",
                    "started": "2020-02-24T21:27:40.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392100",
                    "issueId": "13286058"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 11400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3849f094[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f5781[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@329cd5c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@48f50f4a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@660149f4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@11d51e7b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@45b3c36b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@25dc1bc8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49fea86e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@706151ec[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b126c10[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6e5520e1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 11400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Feb 25 11:02:34 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-02-25T11:02:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7879/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-02-18T18:22:05.000+0000",
        "updated": "2020-02-25T11:02:34.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 11400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Doc] Add doc for the Device API",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286058/comment/17044334",
                    "id": "17044334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 6454\n[https://github.com/apache/arrow/pull/6454]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-02-25T11:02:34.630+0000",
                    "updated": "2020-02-25T11:02:34.630+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0bmjc:",
        "customfield_12314139": null
    }
}