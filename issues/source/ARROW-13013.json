{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13382763",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382763",
    "key": "ARROW-13013",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13013/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@72f3abba[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b3d2544[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26bd42fc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@74f8546a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@778983b0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5a288fdd[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@164e9cc6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@20a3c161[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b8c42c6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@544700d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@678e64cf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@59981996[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 12 14:04:50 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13013/watchers",
            "watchCount": 7,
            "isWatching": true
        },
        "created": "2021-06-08T17:02:24.000+0000",
        "updated": "2022-07-12T14:04:50.000+0000",
        "timeoriginalestimate": null,
        "description": "mailing list discussion: [https://lists.apache.org/thread.html/r09e0e0fbb8b655bbec8cf5662d224f3dfc4fba894a312900f73ae3bf%40%3Cdev.arrow.apache.org%3E]\r\n\r\nWriting unit tests for compute functions in c++ is laborious, entails a lot of boilerplate, and slows iteration since it requires recompilation when adding new tests. The majority of these test cases need not be written in C++ at all and could instead be made part of the pyarrow test suite.\r\n\r\nIn order to make the kernels' C++ implementations easily debuggable from unit tests, we'll have to expose a c++ function named {{AssertCallFunction}} or so. {{AssertCallFunction}} will invoke the named compute::Function and compare actual results to expected without crossing the C++/python boundary, allowing a developer to step through all relevant code with a single breakpoint in GDB. Construction of scalars/arrays/function options and any other inputs to the function is amply supported by {{pyarrow}}, and will happen outside the scope of {{AssertCallFunction}}.\r\n\r\n{{AssertCallFunction}} should not try to derive additional assertions from its arguments - for example {{CheckScalar(\"add\",\r\n\r\n{left, right}\r\n\r\n, expected)}} will first assert that {{left + right == expected}} then {{left.slice(1) + right.slice(1) == expected.slice(1)}} to ensure that offsets are handled correctly. This has value but can be easily expressed in Python and configuration of such behavior would overcomplicate the interface of {{AssertCallFunction}}.\r\n\r\nUnit tests for kernels would then be written in {{arrow/python/pyarrow/test/kernels/test_*.py}}. The C++ unit test for [addition with implicit casts|https://github.com/apache/arrow/blob/b38ab81cb96e393a026d05a22e5a2f62ff6c23d7/cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc#L897-L918] could then be rewritten as\r\n{code:python}\r\ndef test_addition_implicit_casts():\r\n    AssertCallFunction(\"add\", [[ 0,    1,   2,    None],\r\n                               [ 0.25, 1.5, 2.75, None]],\r\n                       expected=[0.25, 1.5, 2.75, None])\r\n\r\n    # ...\r\n{code}\r\nNB: Some unit tests will probably still reside in C++ since we'll need to test things we don't wish to expose in a user facing API, such as \"whether a boolean kernel avoids clobbering bits when outputting into a slice\". These should be far more manageable since they won't need to assert correct logic across all possible input types",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute][Python] Move (majority of) kernel unit tests to python",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382763/comment/17359492",
                    "id": "17359492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "What implications would this have on C++-only builds?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-06-08T17:23:57.192+0000",
                    "updated": "2021-06-08T17:23:57.192+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382763/comment/17359495",
                    "id": "17359495",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Quick notes from a discussion: this would mean a pure-C++ build wouldn't be able to run all the tests. But note some kernels are already in this position; the bulk of their tests are in Python for convenience.\r\n\r\nAlso while I was initially concerned about the impact on the local dev workflow, I think this will be a net improvement. For one, you don't have to rebuild PyArrow itself, only libarrow, to get the updated tests. And for another, because the current C++ kernel tests squash all the various tests into one build target (or, well, one target per kernel type), rebuilding (and especially linking) that target takes a long time, and if you touch a common header file, you're rebuilding all the tests for all the kernels - being able to avoid that would be nice. (Of course, you could imagine splitting the C++ test targets further as well.)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-06-08T17:32:14.604+0000",
                    "updated": "2021-06-08T17:32:14.604+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382763/comment/17359497",
                    "id": "17359497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Just to be pedantic, kernel benchmarks will stay in C++ right?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-06-08T17:46:06.244+0000",
                    "updated": "2021-06-08T17:46:06.244+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382763/comment/17360067",
                    "id": "17360067",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I'm a bit lukewarm about this.\r\n\r\nFirst, if we expose a {{AssertCallFunction}} function, what kind of boilerplate does writing the tests in Python avoid?\r\n\r\nSecond, we currently aren't able to run Python tests in Valgrind or ASAN/UBSAN-based CI jobs. So this would significantly decrease our test coverage, and compute kernels can do quite a bit of low-level memory accesses that make such checks really useful.\r\n\r\nWhile C++ can be a bit annoying and verbose at times, I don't think it shows up very often in kernel tests. As an exemple, I took a quick look at {{scalar_string_test.cc}}, and ~90% of that file seems to be actual testing, not boilerplate. For example:\r\n\r\n{code:c++}\r\nTYPED_TEST(TestStringKernels, AsciiUpper) {\r\n  this->CheckUnary(\"ascii_upper\", \"[]\", this->type(), \"[]\");\r\n  this->CheckUnary(\"ascii_upper\", \"[\\\"aAazZ\u00e6\u00c6&\\\", null, \\\"\\\", \\\"bbb\\\"]\", this->type(),\r\n                   \"[\\\"AAAZZ\u00e6\u00c6&\\\", null, \\\"\\\", \\\"BBB\\\"]\");\r\n}\r\n\r\nTYPED_TEST(TestStringKernels, AsciiLower) {\r\n  this->CheckUnary(\"ascii_lower\", \"[]\", this->type(), \"[]\");\r\n  this->CheckUnary(\"ascii_lower\", \"[\\\"aAazZ\u00e6\u00c6&\\\", null, \\\"\\\", \\\"BBB\\\"]\", this->type(),\r\n                   \"[\\\"aaazz\u00e6\u00c6&\\\", null, \\\"\\\", \\\"bbb\\\"]\");\r\n}\r\n\r\nTYPED_TEST(TestStringKernels, AsciiReverse) {\r\n  this->CheckUnary(\"ascii_reverse\", \"[]\", this->type(), \"[]\");\r\n  this->CheckUnary(\"ascii_reverse\", R\"([\"abcd\", null, \"\", \"bbb\"])\", this->type(),\r\n                   R\"([\"dcba\", null, \"\", \"bbb\"])\");\r\n\r\n  Datum invalid_input = ArrayFromJSON(this->type(), R\"([\"aAazZ\u00e6\u00c6&\", null, \"\", \"bbb\"])\");\r\n  EXPECT_RAISES_WITH_MESSAGE_THAT(Invalid,\r\n                                  testing::HasSubstr(\"Non-ASCII sequence in input\"),\r\n                                  CallFunction(\"ascii_reverse\", {invalid_input}));\r\n}\r\n\r\nTYPED_TEST(TestStringKernels, Utf8Reverse) {\r\n  this->CheckUnary(\"utf8_reverse\", \"[]\", this->type(), \"[]\");\r\n  this->CheckUnary(\"utf8_reverse\", R\"([\"abcd\", null, \"\", \"bbb\"])\", this->type(),\r\n                   R\"([\"dcba\", null, \"\", \"bbb\"])\");\r\n  this->CheckUnary(\"utf8_reverse\", R\"([\"aAazZ\u00e6\u00c6&\", null, \"\", \"bbb\", \"\u0251\u027d\u2c64\u00e6\u00c6\"])\",\r\n                   this->type(), R\"([\"&\u00c6\u00e6ZzaAa\", null, \"\", \"bbb\", \"\u00c6\u00e6\u2c64\u027d\u0251\"])\");\r\n\r\n  // inputs with malformed utf8 chars would produce garbage output, but the end result\r\n  // would produce arrays with same lengths. Hence checking offset buffer equality\r\n  auto malformed_input = ArrayFromJSON(this->type(), \"[\\\"\u0251\\xFF\u0251a\\\", \\\"\u027d\\xe1\\xbd\u027da\\\"]\");\r\n  const Result<Datum>& res = CallFunction(\"utf8_reverse\", {malformed_input});\r\n  ASSERT_TRUE(res->array()->buffers[1]->Equals(*malformed_input->data()->buffers[1]));\r\n}\r\n{code}\r\nThis may be slighlier terser when expressed in Python, but I don't think the difference would be enormous (note the last line should use {{BufferEquals}}).\r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-06-09T13:26:01.894+0000",
                    "updated": "2021-06-09T13:26:01.894+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382763/comment/17392537",
                    "id": "17392537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Another consideration here (from [~edponce]) is that it would be nice if we make it easy & consistent to test all the different argument types for a function. Right now, with Googletest, we have some parameterization, but it is not done very consistently, and the parameterization methods we use make it hard to support some types. For instance, we might template a set of tests on all numeric types, but we can't extend those tests to cover decimals, because 1) the literal syntax is different and 2) the type is parameterized (and so just templating on the type's class, as we most commonly do, is insufficient). We can solve this in C++, but if we're going to rewrite all the tests anyways, we should keep this in mind (either if we reorganize the C++ tests or port them elsewhere).\r\n\r\nOn top of that, it would be nice if the solution we had made it easier to track completeness of type support for kernels so we could easily see where support might be lacking. Right now this is sort of encoded into the tests and API docs but these are either hard to read through or get out of sync easily. Ideally every kernel would support every (applicable) type but while we are working towards that goal it would be nice to have an easy way to know how close we are to it.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-08-03T20:52:23.699+0000",
                    "updated": "2021-08-03T20:52:23.699+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382763/comment/17565789",
                    "id": "17565789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-07-12T14:04:50.961+0000",
                    "updated": "2022-07-12T14:04:50.961+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|z0rrq8:",
        "customfield_12314139": null
    }
}