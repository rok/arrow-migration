{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13411232",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232",
    "key": "ARROW-14672",
    "fields": {
        "parent": {
            "id": "13406607",
            "key": "ARROW-14322",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13406607",
            "fields": {
                "summary": "[Doc] Add Python doc on how to connect Python to other languages",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14672/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/741711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#issuecomment-1068165686\n\n\n   https://issues.apache.org/jira/browse/ARROW-14672\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T16:05:23.295+0000",
                    "updated": "2022-03-15T16:05:23.295+0000",
                    "started": "2022-03-15T16:05:23.295+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741711",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/742430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#issuecomment-1069222406\n\n\n   @davisusanibar mind reviewing this one? Does it look clear enough?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-16T15:13:47.299+0000",
                    "updated": "2022-03-16T15:13:47.299+0000",
                    "started": "2022-03-16T15:13:47.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "742430",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/743047",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r828910289\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create an ``simple.py`` file which uses ``jpype`` to\n\nReview comment:\n       ```suggestion\r\n   To do so we can create a ``simple.py`` file which uses ``jpype`` to\r\n   ```\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create an ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n+Java to Python communication using the C Data Interface\n+-------------------------------------------------------\n+\n+The C-Data interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+This allows to expose data coming from Python or Java to functions that are implemented\n+in the other language.\n+\n+.. note::\n+\n+    In the future the ``pyarrow.jvm`` will be implemented to leverage the C-Data\n+    interface, at the moment is instead specifically written for JPype\n+\n+To showcase how C-Data works, we are going to tweak a bit both our ``FillTen`` Java\n+class and our ``fillten.py`` Python script. Given a Python Array, we are going to\n+expose a function in Java that sets its content to by the numbers from 1 to 10.\n+\n+The first thing we would have to do is to tweak the Python script so that it\n+sends to Java the exported references to the Array and its Schema according to the\n+C-Data interface:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Init the JVM and make FillTen class available to Python.\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+    FillTen = JClass('FillTen')\n+\n+    # Create a Python array of 10 elements\n+    import pyarrow as p\n+    array = pa.array([0]*10)\n+\n+    from pyarrow.cffi import ffi as arrow_c\n+\n+    # Export the Python array through C-Data\n+    c_array = arrow_c.new(\"struct ArrowArray*\")\n+    c_array_ptr = int(arrow_c.cast(\"uintptr_t\", c_array))\n+    array._export_to_c(c_array_ptr)\n+\n+    # Export the Schema of the Arrayo through C-Data\n\nReview comment:\n       ```suggestion\r\n       # Export the Schema of the Array through C-Data\r\n   ```\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``Java`` environment with\n\nReview comment:\n       Minor typo\r\n   ```suggestion\r\n       with ``pyarrow`` correctly installed and a ``Java`` environment with\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T09:35:41.477+0000",
                    "updated": "2022-03-17T09:35:41.477+0000",
                    "started": "2022-03-17T09:35:41.476+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743047",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/743748",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r829947272\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n\nReview comment:\n       Is this needed? Or probably could be: In case you decided to use your own java c-data module version it must have been compiled with ``mvn -Parrow-c-data`` to\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n\nReview comment:\n       Could be:\r\n   \r\n   ```\r\n       <properties>\r\n           <maven.compiler.source>8</maven.compiler.source>\r\n           <maven.compiler.target>8</maven.compiler.target>\r\n       </properties>\r\n   \r\n       <dependencies>\r\n           <dependency>\r\n               <groupId>org.apache.arrow</groupId>\r\n               <artifactId>arrow-memory-core</artifactId>\r\n               <version>7.0.0</version>\r\n           </dependency>\r\n           <dependency>\r\n               <groupId>org.apache.arrow</groupId>\r\n               <artifactId>arrow-memory-netty</artifactId>\r\n               <version>7.0.0</version>\r\n           </dependency>\r\n           <dependency>\r\n               <groupId>org.apache.arrow</groupId>\r\n               <artifactId>arrow-vector</artifactId>\r\n               <version>7.0.0</version>\r\n           </dependency>\r\n           <dependency>\r\n               <groupId>org.apache.arrow</groupId>\r\n               <artifactId>arrow-c-data</artifactId>\r\n               <version>7.0.0</version>\r\n           </dependency>\r\n       </dependencies>\r\n   ```\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n\nReview comment:\n       Is this needed?\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n+Java to Python communication using the C Data Interface\n+-------------------------------------------------------\n+\n+The C-Data interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+This allows to expose data coming from Python or Java to functions that are implemented\n+in the other language.\n+\n+.. note::\n+\n+    In the future the ``pyarrow.jvm`` will be implemented to leverage the C-Data\n+    interface, at the moment is instead specifically written for JPype\n+\n+To showcase how C-Data works, we are going to tweak a bit both our ``FillTen`` Java\n+class and our ``fillten.py`` Python script. Given a Python Array, we are going to\n+expose a function in Java that sets its content to by the numbers from 1 to 10.\n+\n+The first thing we would have to do is to tweak the Python script so that it\n+sends to Java the exported references to the Array and its Schema according to the\n+C-Data interface:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Init the JVM and make FillTen class available to Python.\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+    FillTen = JClass('FillTen')\n+\n+    # Create a Python array of 10 elements\n+    import pyarrow as p\n+    array = pa.array([0]*10)\n\nReview comment:\n       pa.array -> p.array\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n+Java to Python communication using the C Data Interface\n+-------------------------------------------------------\n+\n+The C-Data interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+This allows to expose data coming from Python or Java to functions that are implemented\n+in the other language.\n+\n\nReview comment:\n       Add or validate if cffi module is already installed: `pip install cffi`\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n\nReview comment:\n       Could be possible to add the restrictions at this moment when use pyarrow.jvm, something like this for example:\r\n   \r\n   - Complex types support is not yet implemented (e.g.: Cannot convert JVM Arrow array of type STRUCT)\r\n   - This will only work with a JVM running in the same process such as provided through jpype (copy from[ jvm.py](https://github.com/apache/arrow/blob/16f69891997369126931c8942824dcbdfc272090/python/pyarrow/jvm.py#L23:L26))\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n\nReview comment:\n       To do so,\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T13:40:06.183+0000",
                    "updated": "2022-03-18T13:40:06.183+0000",
                    "started": "2022-03-18T13:40:06.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743748",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/743912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r829947272\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n\nReview comment:\n       Is this needed? Or probably could be: In case you decided to use your own java c-data module version it must have been compiled with ``mvn -Parrow-c-data`` to\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n\nReview comment:\n       Could be:\r\n   \r\n   ```\r\n       <properties>\r\n           <maven.compiler.source>8</maven.compiler.source>\r\n           <maven.compiler.target>8</maven.compiler.target>\r\n       </properties>\r\n   \r\n       <dependencies>\r\n           <dependency>\r\n               <groupId>org.apache.arrow</groupId>\r\n               <artifactId>arrow-memory-core</artifactId>\r\n               <version>7.0.0</version>\r\n           </dependency>\r\n           <dependency>\r\n               <groupId>org.apache.arrow</groupId>\r\n               <artifactId>arrow-memory-netty</artifactId>\r\n               <version>7.0.0</version>\r\n           </dependency>\r\n           <dependency>\r\n               <groupId>org.apache.arrow</groupId>\r\n               <artifactId>arrow-vector</artifactId>\r\n               <version>7.0.0</version>\r\n           </dependency>\r\n           <dependency>\r\n               <groupId>org.apache.arrow</groupId>\r\n               <artifactId>arrow-c-data</artifactId>\r\n               <version>7.0.0</version>\r\n           </dependency>\r\n       </dependencies>\r\n   ```\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n\nReview comment:\n       Is this needed?\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n+Java to Python communication using the C Data Interface\n+-------------------------------------------------------\n+\n+The C-Data interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+This allows to expose data coming from Python or Java to functions that are implemented\n+in the other language.\n+\n+.. note::\n+\n+    In the future the ``pyarrow.jvm`` will be implemented to leverage the C-Data\n+    interface, at the moment is instead specifically written for JPype\n+\n+To showcase how C-Data works, we are going to tweak a bit both our ``FillTen`` Java\n+class and our ``fillten.py`` Python script. Given a Python Array, we are going to\n+expose a function in Java that sets its content to by the numbers from 1 to 10.\n+\n+The first thing we would have to do is to tweak the Python script so that it\n+sends to Java the exported references to the Array and its Schema according to the\n+C-Data interface:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Init the JVM and make FillTen class available to Python.\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+    FillTen = JClass('FillTen')\n+\n+    # Create a Python array of 10 elements\n+    import pyarrow as p\n+    array = pa.array([0]*10)\n\nReview comment:\n       pa.array -> p.array\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n+Java to Python communication using the C Data Interface\n+-------------------------------------------------------\n+\n+The C-Data interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+This allows to expose data coming from Python or Java to functions that are implemented\n+in the other language.\n+\n\nReview comment:\n       Add or validate if cffi module is already installed: `pip install cffi`\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n\nReview comment:\n       Could be possible to add the restrictions at this moment when use pyarrow.jvm, something like this for example:\r\n   \r\n   - Complex types support is not yet implemented (e.g.: Cannot convert JVM Arrow array of type STRUCT)\r\n   - This will only work with a JVM running in the same process such as provided through jpype (copy from[ jvm.py](https://github.com/apache/arrow/blob/16f69891997369126931c8942824dcbdfc272090/python/pyarrow/jvm.py#L23:L26))\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n\nReview comment:\n       To do so,\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T14:47:48.567+0000",
                    "updated": "2022-03-18T14:47:48.567+0000",
                    "started": "2022-03-18T14:47:48.567+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743912",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/745926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r832386689\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n+Java to Python communication using the C Data Interface\n+-------------------------------------------------------\n+\n+The C-Data interface is a protocol implemented in Arrow to exchange data within different\n\nReview comment:\n       ```suggestion\r\n   The C Data Interface is a protocol implemented in Arrow to exchange data within different\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T16:38:47.311+0000",
                    "updated": "2022-03-22T16:38:47.311+0000",
                    "started": "2022-03-22T16:38:47.311+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745926",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/745927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r832387679\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n+Java to Python communication using the C Data Interface\n+-------------------------------------------------------\n+\n+The C-Data interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+This allows to expose data coming from Python or Java to functions that are implemented\n+in the other language.\n+\n+.. note::\n+\n+    In the future the ``pyarrow.jvm`` will be implemented to leverage the C-Data\n+    interface, at the moment is instead specifically written for JPype\n+\n+To showcase how C-Data works, we are going to tweak a bit both our ``FillTen`` Java\n\nReview comment:\n       Still no hyphen (also below :-)).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T16:39:11.853+0000",
                    "updated": "2022-03-22T16:39:11.853+0000",
                    "started": "2022-03-22T16:39:11.853+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745927",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/745928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r832387494\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n+Java to Python communication using the C Data Interface\n+-------------------------------------------------------\n+\n+The C-Data interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+This allows to expose data coming from Python or Java to functions that are implemented\n+in the other language.\n+\n+.. note::\n+\n+    In the future the ``pyarrow.jvm`` will be implemented to leverage the C-Data\n\nReview comment:\n       \"C Data Interface\" (no hyphen)\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n\nReview comment:\n       I'm clueless about Java, but can't we just produce a single jar and give it to jpype?\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n\nReview comment:\n       ```suggestion\r\n   but that also its dependencies are.\r\n   ```\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n\nReview comment:\n       You can use `console` instead of `bash` since it mostly shows console input and output together with `$`-prefix commands.\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n\nReview comment:\n       Why not just take a `BigIntVector` here instead of casting back and forth?\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n+Java to Python communication using the C Data Interface\n+-------------------------------------------------------\n+\n+The C-Data interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+This allows to expose data coming from Python or Java to functions that are implemented\n+in the other language.\n+\n+.. note::\n+\n+    In the future the ``pyarrow.jvm`` will be implemented to leverage the C-Data\n+    interface, at the moment is instead specifically written for JPype\n+\n+To showcase how C-Data works, we are going to tweak a bit both our ``FillTen`` Java\n+class and our ``fillten.py`` Python script. Given a Python Array, we are going to\n\nReview comment:\n       Let's not write \"Python Array\", which is quite ambiguous and potentially confusing.\r\n   ```suggestion\r\n   class and our ``fillten.py`` Python script. Given a PyArrow array, we are going to\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T16:40:16.548+0000",
                    "updated": "2022-03-22T16:40:16.548+0000",
                    "started": "2022-03-22T16:40:16.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745928",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/746527",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r833197301\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n\nReview comment:\n       Addressed, just used version 8.0.0 as the docs will publish when 8.0.0 is released.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T12:24:49.771+0000",
                    "updated": "2022-03-23T12:24:49.771+0000",
                    "started": "2022-03-23T12:24:49.771+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746527",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/746528",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r833198165\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n\nReview comment:\n       \ud83d\udc4d \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T12:25:34.166+0000",
                    "updated": "2022-03-23T12:25:34.166+0000",
                    "started": "2022-03-23T12:25:34.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746528",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/746529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r833199926\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n\nReview comment:\n       I think it's ok, it's a more general statement. Independently from _where_ you got your arrow java, it must have been compiled with c-data enabled\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T12:26:58.298+0000",
                    "updated": "2022-03-23T12:26:58.298+0000",
                    "started": "2022-03-23T12:26:58.297+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746529",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/746530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r833202424\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n\nReview comment:\n       Added a note at the end of the ``pyarrow.jvm`` section\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T12:29:04.080+0000",
                    "updated": "2022-03-23T12:29:04.080+0000",
                    "started": "2022-03-23T12:29:04.079+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746530",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/746532",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r833208420\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n\nReview comment:\n       yes, otherwise the Java object will be deleted _before_ the python object using it, which will lead to an error. At the moment I'm not too concerned about the error itself given that we are going to rewrite ``pyarrow.jvm`` in the future, but it's better to avoid it.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T12:34:05.257+0000",
                    "updated": "2022-03-23T12:34:05.257+0000",
                    "started": "2022-03-23T12:34:05.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746532",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/746533",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r833208625\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n+Java to Python communication using the C Data Interface\n+-------------------------------------------------------\n+\n+The C-Data interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+This allows to expose data coming from Python or Java to functions that are implemented\n+in the other language.\n+\n+.. note::\n+\n+    In the future the ``pyarrow.jvm`` will be implemented to leverage the C-Data\n+    interface, at the moment is instead specifically written for JPype\n+\n+To showcase how C-Data works, we are going to tweak a bit both our ``FillTen`` Java\n+class and our ``fillten.py`` Python script. Given a Python Array, we are going to\n+expose a function in Java that sets its content to by the numbers from 1 to 10.\n+\n+The first thing we would have to do is to tweak the Python script so that it\n+sends to Java the exported references to the Array and its Schema according to the\n+C-Data interface:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Init the JVM and make FillTen class available to Python.\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+    FillTen = JClass('FillTen')\n+\n+    # Create a Python array of 10 elements\n+    import pyarrow as p\n+    array = pa.array([0]*10)\n\nReview comment:\n       :+1:\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T12:34:17.990+0000",
                    "updated": "2022-03-23T12:34:17.990+0000",
                    "started": "2022-03-23T12:34:17.989+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746533",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/746535",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r833212486\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n+Java to Python communication using the C Data Interface\n+-------------------------------------------------------\n+\n+The C-Data interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+This allows to expose data coming from Python or Java to functions that are implemented\n+in the other language.\n+\n\nReview comment:\n       :+1:\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T12:38:22.268+0000",
                    "updated": "2022-03-23T12:38:22.268+0000",
                    "started": "2022-03-23T12:38:22.267+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746535",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/746538",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r833216511\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n\nReview comment:\n       good catch, changed it.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T12:42:23.747+0000",
                    "updated": "2022-03-23T12:42:23.747+0000",
                    "started": "2022-03-23T12:42:23.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746538",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/746540",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r833221535\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n\nReview comment:\n       Fair point, I originally did it to suggest that you can pass around any kind of ``ValueVector``, but in the end the example depends on it being a fixed width one and specifically uses ``setSafe``\u00a0which is implemented by the subclass. I'll change it to ``BigIntVector``\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T12:47:51.464+0000",
                    "updated": "2022-03-23T12:47:51.464+0000",
                    "started": "2022-03-23T12:47:51.463+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746540",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/746545",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r833233342\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-dependency-plugin:2.7:copy-dependencies (default-cli) @ FillTen ---\n+    [INFO] Copying jsr305-3.0.2.jar to /experiments/java2py/dependencies/jsr305-3.0.2.jar\n+    [INFO] Copying netty-common-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-common-4.1.72.Final.jar\n+    [INFO] Copying arrow-memory-core-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-core-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-c-data-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-c-data-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-vector-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-vector-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying jackson-core-2.11.4.jar to /experiments/java2py/dependencies/jackson-core-2.11.4.jar\n+    [INFO] Copying jackson-annotations-2.11.4.jar to /experiments/java2py/dependencies/jackson-annotations-2.11.4.jar\n+    [INFO] Copying slf4j-api-1.7.25.jar to /experiments/java2py/dependencies/slf4j-api-1.7.25.jar\n+    [INFO] Copying arrow-memory-netty-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-memory-netty-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying arrow-format-8.0.0-SNAPSHOT.jar to /experiments/java2py/dependencies/arrow-format-8.0.0-SNAPSHOT.jar\n+    [INFO] Copying flatbuffers-java-1.12.0.jar to /experiments/java2py/dependencies/flatbuffers-java-1.12.0.jar\n+    [INFO] Copying arrow-memory-8.0.0-SNAPSHOT.pom to /experiments/java2py/dependencies/arrow-memory-8.0.0-SNAPSHOT.pom\n+    [INFO] Copying netty-buffer-4.1.72.Final.jar to /experiments/java2py/dependencies/netty-buffer-4.1.72.Final.jar\n+    [INFO] Copying jackson-databind-2.11.4.jar to /experiments/java2py/dependencies/jackson-databind-2.11.4.jar\n+    [INFO] Copying commons-codec-1.10.jar to /experiments/java2py/dependencies/commons-codec-1.10.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Once our package and all its depdendencies are available, \n+we can invoke it from ``fillten_pyarrowjvm.py`` script that will\n+import the ``FillTen`` class and print out the result of invoking ``FillTen.createArray`` \n+\n+.. code-block:: python\n+\n+    import jpype\n+    import jpype.imports\n+    from jpype.types import *\n+\n+    # Start a JVM making available all dependencies we collected\n+    # and our class from target/FillTen-1.jar\n+    jpype.startJVM(classpath=[\"./dependencies/*\", \"./target/*\"])\n+\n+    FillTen = JClass('FillTen')\n+\n+    array = FillTen.createArray()\n+    print(\"ARRAY\", type(array), array)\n+\n+    # Convert the proxied ValueVector to an actual pyarrow array\n+    import pyarrow.jvm\n+    pyarray = pyarrow.jvm.array(array)\n+    print(\"ARRAY\", type(pyarray), pyarray)\n+    del pyarray\n+\n+Running the python script will lead to two lines getting printed:\n+\n+.. code-block::\n+\n+    ARRAY <java class 'org.apache.arrow.vector.BigIntVector'> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n+    ARRAY <class 'pyarrow.lib.Int64Array'> [\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10\n+    ]\n+\n+The first line is the raw result of invoking the ``FillTen.createArray`` method.\n+The resulting object is a proxy to the actual Java object, so it's not really a pyarrow\n+Array, it will lack most of its capabilities and methods. \n+That's why we subsequently use ``pyarrow.jvm.array`` to convert it to an actual\n+``pyarrow`` array. That allows us to treat it like any other ``pyarrow`` array.\n+The result is the second line in the output where the array is correctly reported\n+as being of type ``pyarrow.lib.Int64Array`` and is printed using the ``pyarrow`` style.\n+\n+Java to Python communication using the C Data Interface\n+-------------------------------------------------------\n+\n+The C-Data interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+This allows to expose data coming from Python or Java to functions that are implemented\n+in the other language.\n+\n+.. note::\n+\n+    In the future the ``pyarrow.jvm`` will be implemented to leverage the C-Data\n\nReview comment:\n       :+1:\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T13:00:30.133+0000",
                    "updated": "2022-03-23T13:00:30.133+0000",
                    "started": "2022-03-23T13:00:30.133+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746545",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/746546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635#discussion_r833237095\n\n\n\n##########\nFile path: docs/source/python/integration/python_java.rst\n##########\n@@ -0,0 +1,429 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with Java\n+=============================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and Java functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and a ``Java`` environment with\n+    ``arrow`` library correctly installed. \n+    The ``Java`` version must have been compiled with ``mvn -Parrow-c-data`` to\n+    ensure CData exchange support is enabled.\n+    See `Python Install Instructions <https://arrow.apache.org/docs/python/install.html>`_\n+    and `Java Documentation <https://arrow.apache.org/docs/java/>`_\n+    for further details.\n+\n+Invoking Java methods from Python\n+---------------------------------\n+\n+Suppose we have a simple Java class providing a number as its output:\n+\n+.. code-block:: Java\n+\n+    public class Simple {\n+        public static int getNumber() {\n+            return 4;\n+        }\n+    }\n+\n+We would save such class in the ``Simple.java`` file and proceed with\n+compiling it to ``Simple.class`` using ``javac Simple.java``.\n+\n+Once the ``Simple.class`` file is created we can use the class\n+from Python using the \n+`JPype <https://jpype.readthedocs.io/>`_ library which\n+enables a Java runtime within the Python interpreter.\n+\n+``jpype1`` can be installed using ``pip`` like most Python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install jpype1\n+\n+The most basic thing we can do with our ``Simple`` class is to\n+use the ``Simple.getNumber`` method from Python and see \n+if it will return the result.\n+\n+To do so we can create a ``simple.py`` file which uses ``jpype`` to\n+import the ``Simple`` class from ``Simple.class`` file and invoke \n+the ``Simple.getNumber`` method:\n+\n+.. code-block:: python\n+\n+    import jpype\n+    from jpype.types import *\n+\n+    jpype.startJVM(classpath=[\"./\"])\n+\n+    Simple = JClass('Simple')\n+\n+    print(Simple.getNumber())\n+\n+Running the ``simple.py`` file will show how our Python code is able\n+to access the ``Java`` method and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python simple.py \n+    4\n+\n+Java to Python using pyarrow.jvm\n+--------------------------------\n+\n+PyArrow provides a ``pyarrow.jvm`` module that makes easier to\n+interact with Java classes and convert the Java objects to actual\n+Python objects.\n+\n+To showcase ``pyarrow.jvm`` we could create a more complex\n+class, named ``FillTen.java``\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+    import org.apache.arrow.vector.ValueVector;\n+\n+\n+    public class FillTen {\n+        static RootAllocator allocator = new RootAllocator();\n+\n+        public static ValueVector createArray() {\n+            BigIntVector intVector = new BigIntVector(\"ints\", allocator);\n+            intVector.allocateNew(10);\n+            intVector.setValueCount(10);\n+            FillTen.fillValueVector(intVector);\n+            return intVector;\n+        }\n+\n+        private static void fillValueVector(ValueVector v) {\n+            BigIntVector iv = (BigIntVector)v;\n+            iv.setSafe(0, 1);\n+            iv.setSafe(1, 2);\n+            iv.setSafe(2, 3);\n+            iv.setSafe(3, 4);\n+            iv.setSafe(4, 5);\n+            iv.setSafe(5, 6);\n+            iv.setSafe(6, 7);\n+            iv.setSafe(7, 8);\n+            iv.setSafe(8, 9);\n+            iv.setSafe(9, 10);\n+        }\n+    }\n+\n+This class provides a public ``createArray`` method that anyone can invoke\n+to get back an array containing numbers from 1 to 10. \n+\n+Given that this class now has a dependency on a bunch of packages,\n+compiling it with ``javac`` is not enough anymore. We need to create\n+a dedicated ``pom.xml`` file where we can collect the dependencies:\n+\n+.. code-block:: xml\n+\n+    <project>\n+        <modelVersion>4.0.0</modelVersion>\n+        \n+        <groupId>org.apache.arrow.py2java</groupId>\n+        <artifactId>FillTen</artifactId>\n+        <version>1</version>\n+\n+        <properties>\n+            <maven.compiler.source>1.7</maven.compiler.source>\n+            <maven.compiler.target>1.7</maven.compiler.target>\n+        </properties> \n+\n+        <dependencies>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-memory-netty</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-vector</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>pom</type>\n+            </dependency> \n+            <dependency>\n+            <groupId>org.apache.arrow</groupId>\n+            <artifactId>arrow-c-data</artifactId>\n+            <version>8.0.0-SNAPSHOT</version>\n+            <type>jar</type>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+Once the ``FillTen.java`` file with the class is created\n+as ``src/main/java/FillTen.java`` we can use ``maven`` to\n+compile the project with ``mvn package`` and get it \n+available in the ``target`` directory.\n+\n+.. code-block:: bash\n+\n+    $ mvn package\n+    [INFO] Scanning for projects...\n+    [INFO] \n+    [INFO] ------------------< org.apache.arrow.py2java:FillTen >------------------\n+    [INFO] Building FillTen 1\n+    [INFO] --------------------------------[ jar ]---------------------------------\n+    [INFO] \n+    [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ FillTen ---\n+    [INFO] Changes detected - recompiling the module!\n+    [INFO] Compiling 1 source file to /experiments/java2py/target/classes\n+    [INFO] \n+    [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ FillTen ---\n+    [INFO] Building jar: /experiments/java2py/target/FillTen-1.jar\n+    [INFO] ------------------------------------------------------------------------\n+    [INFO] BUILD SUCCESS\n+    [INFO] ------------------------------------------------------------------------\n+\n+Now that we have the package built, we can make it available to Python.\n+To do so, we need to make sure that not only the package itself is available,\n+but that also its dependencies are too.\n+\n+We can use ``maven`` to collect all dependencies and make them available in a single place\n+(the ``dependencies`` directory) so that we can more easily load them from Python:\n+\n+.. code-block:: bash\n+\n+    $ mvn org.apache.maven.plugins:maven-dependency-plugin:2.7:copy-dependencies -DoutputDirectory=dependencies\n\nReview comment:\n       Yes, we can using a maven plugin. But I wanted to make explicit the step where you need to collect and load dependencies by yourself. I'll add a note that the alternative is to use `maven-assembly-plugin` to assemble a single jar with all dependencies inside.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T13:04:19.440+0000",
                    "updated": "2022-03-23T13:04:19.440+0000",
                    "started": "2022-03-23T13:04:19.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746546",
                    "issueId": "13411232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/worklog/747038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- closed pull request #12635:\nURL: https://github.com/apache/arrow/pull/12635\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T09:11:32.380+0000",
                    "updated": "2022-03-24T09:11:32.380+0000",
                    "started": "2022-03-24T09:11:32.380+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747038",
                    "issueId": "13411232"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@b4bdf9a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d2d29c9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1276df84[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@36b1cf62[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3944464c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5d4b5de0[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79e53332[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@419739b3[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a7a61eb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5d598319[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@df55723[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7557bd8f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 24 09:11:33 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-03-24T09:11:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14672/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-11-11T09:45:26.000+0000",
        "updated": "2022-03-25T22:22:38.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python][Doc] Connecting Python to Java through CData",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411232/comment/17511713",
                    "id": "17511713",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
                        "name": "amol-",
                        "key": "amol-",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
                        },
                        "displayName": "Alessandro Molina",
                        "active": true,
                        "timeZone": "Europe/Rome"
                    },
                    "body": "Issue resolved by pull request 12635\n[https://github.com/apache/arrow/pull/12635]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
                        "name": "amol-",
                        "key": "amol-",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
                        },
                        "displayName": "Alessandro Molina",
                        "active": true,
                        "timeZone": "Europe/Rome"
                    },
                    "created": "2022-03-24T09:11:33.280+0000",
                    "updated": "2022-03-24T09:11:33.280+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0wn4g:",
        "customfield_12314139": null
    }
}