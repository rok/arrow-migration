{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13417223",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223",
    "key": "ARROW-15089",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "C++",
            "Kernels",
            "beginner",
            "compute",
            "good-second-issue",
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350712",
                "id": "12350712",
                "description": "",
                "name": "6.0.1",
                "archived": false,
                "released": true,
                "releaseDate": "2021-11-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12628527",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12628527",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13411063",
                    "key": "ARROW-14658",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063",
                    "fields": {
                        "summary": "[C++] Add basic support for nested field refs in scanning",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dhruv9vats",
            "name": "dhruv9vats",
            "key": "dhruv9vats",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Dhruv Vats",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
            "name": "willjones127",
            "key": "willjones127",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Will Jones",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
            "name": "willjones127",
            "key": "willjones127",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Will Jones",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 53400,
            "total": 53400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 53400,
            "total": 53400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15089/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 89,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709613",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats opened a new pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162\n\n\n   Implement a Scalar Kernel to lookup a value for a given key in a `MapArray`, whose type is an alias for `List( Struct(<key>, <item>) )`\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T14:17:43.975+0000",
                    "updated": "2022-01-16T14:17:43.975+0000",
                    "started": "2022-01-16T14:17:43.975+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709613",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709614",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#issuecomment-1013884366\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T14:18:07.137+0000",
                    "updated": "2022-01-16T14:18:07.137+0000",
                    "started": "2022-01-16T14:18:07.136+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709614",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709615",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785449075\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -470,6 +470,30 @@ class ARROW_EXPORT RandomOptions : public FunctionOptions {\n   uint64_t seed;\n };\n \n+/// Options for map_array_lookup function\n+class ARROW_EXPORT MapArrayLookupOptions : public FunctionOptions {\n+ public:\n+  enum Occurence {\n+    /// Return the first matching value\n+    First,\n+    /// Return the last matching value\n+    Last,\n+    /// Return all matching values\n+    All\n+  };\n+\n+  MapArrayLookupOptions(std::shared_ptr<Scalar> query_key, Occurence occurence = All);\n+  MapArrayLookupOptions();\n+\n+  constexpr static char const kTypeName[] = \"MapArrayLookupOptions\";\n+\n+  /// The key to lookup in the map\n+  std::shared_ptr<Scalar> query_key;\n\nReview comment:\n       If `query_key` should be a comparable type, what should be its `DataType/Shape` here?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T14:27:34.033+0000",
                    "updated": "2022-01-16T14:27:34.033+0000",
                    "started": "2022-01-16T14:27:34.033+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709615",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709616",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785449279\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -17,6 +17,7 @@\n \n // Vector kernels involving nested types\n \n+#include <iostream>\n\nReview comment:\n       Added for debugging, will remove later. Sorry for all the print statements that are littered throughout.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T14:28:49.285+0000",
                    "updated": "2022-01-16T14:28:49.285+0000",
                    "started": "2022-01-16T14:28:49.285+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709616",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709617",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785449504\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n\nReview comment:\n       Is the overall boilerplate structure for a `function/kernels` correct?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T14:30:12.334+0000",
                    "updated": "2022-01-16T14:30:12.334+0000",
                    "started": "2022-01-16T14:30:12.333+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709617",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709618",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785449597\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<MapArrayLookupOptions>::Get(ctx);\n+\n+    MapArray map_array(batch[0].array());\n+\n+    // Offset differences will tell the number of Strcut = {key, value} pairs\n+    // present in the current list.\n+    // const std::shared_ptr<arrow::Buffer> offsets = map_array.value_offsets();\n\nReview comment:\n       Initially thought of using `offsets` to know which `<key: item>` pairs belong to which `List`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T14:30:45.438+0000",
                    "updated": "2022-01-16T14:30:45.438+0000",
                    "started": "2022-01-16T14:30:45.438+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709618",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709619",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785449919\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<MapArrayLookupOptions>::Get(ctx);\n+\n+    MapArray map_array(batch[0].array());\n+\n+    // Offset differences will tell the number of Strcut = {key, value} pairs\n+    // present in the current list.\n+    // const std::shared_ptr<arrow::Buffer> offsets = map_array.value_offsets();\n+\n+    std::shared_ptr<arrow::Array> keys = map_array.keys();\n+    std::shared_ptr<arrow::Array> items = map_array.items();\n+\n+    const auto& query_key = options.query_key;\n+    const auto& occurence = options.occurence;\n+\n+    std::unique_ptr<ArrayBuilder> builder;\n\nReview comment:\n       Currently just outputting an `Array` of type same as the `item_type` in the `MapArray`. With just one element for the `Occurence::First` option.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T14:32:42.155+0000",
                    "updated": "2022-01-16T14:32:42.155+0000",
                    "started": "2022-01-16T14:32:42.155+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709619",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709620",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785450378\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<MapArrayLookupOptions>::Get(ctx);\n+\n+    MapArray map_array(batch[0].array());\n+\n+    // Offset differences will tell the number of Strcut = {key, value} pairs\n+    // present in the current list.\n+    // const std::shared_ptr<arrow::Buffer> offsets = map_array.value_offsets();\n+\n+    std::shared_ptr<arrow::Array> keys = map_array.keys();\n+    std::shared_ptr<arrow::Array> items = map_array.items();\n+\n+    const auto& query_key = options.query_key;\n+    const auto& occurence = options.occurence;\n+\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(\n+        MakeBuilder(ctx->memory_pool(), map_array.map_type()->item_type(), &builder));\n+\n+    int32_t last_key_idx_checked = 0;\n\nReview comment:\n       To correctly index the `keys`/`items` `arrow::Array`'s above while accounting for which `List` they belong to below. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T14:36:13.158+0000",
                    "updated": "2022-01-16T14:36:13.158+0000",
                    "started": "2022-01-16T14:36:13.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709620",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709622",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785451341\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<MapArrayLookupOptions>::Get(ctx);\n+\n+    MapArray map_array(batch[0].array());\n+\n+    // Offset differences will tell the number of Strcut = {key, value} pairs\n+    // present in the current list.\n+    // const std::shared_ptr<arrow::Buffer> offsets = map_array.value_offsets();\n+\n+    std::shared_ptr<arrow::Array> keys = map_array.keys();\n+    std::shared_ptr<arrow::Array> items = map_array.items();\n+\n+    const auto& query_key = options.query_key;\n+    const auto& occurence = options.occurence;\n+\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(\n+        MakeBuilder(ctx->memory_pool(), map_array.map_type()->item_type(), &builder));\n+\n+    int32_t last_key_idx_checked = 0;\n+\n+    // aka, number of {key, value} pairs in the current map\n+    int32_t list_struct_len;\n+    bool found_one_key = false;\n+    for (int32_t map_array_idx = 0; map_array_idx < map_array.length(); ++map_array_idx) {\n+      // Number of Struct('s) = {key, value} in the list at the current index\n+      list_struct_len = map_array.value_length(map_array_idx);\n\nReview comment:\n       The length of the current `List`, aka, the number of `keys` to check in the `keys` `arrow::Array` above (which is _continous_ in memory and are separated by offsets).\r\n   Have I understood this correctly, and is using the `map_array.value_length(map_array_idx)`, the correct way to obtain it?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T14:42:49.584+0000",
                    "updated": "2022-01-16T14:42:49.584+0000",
                    "started": "2022-01-16T14:42:49.584+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709622",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709623",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785451748\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<MapArrayLookupOptions>::Get(ctx);\n+\n+    MapArray map_array(batch[0].array());\n+\n+    // Offset differences will tell the number of Strcut = {key, value} pairs\n+    // present in the current list.\n+    // const std::shared_ptr<arrow::Buffer> offsets = map_array.value_offsets();\n+\n+    std::shared_ptr<arrow::Array> keys = map_array.keys();\n+    std::shared_ptr<arrow::Array> items = map_array.items();\n+\n+    const auto& query_key = options.query_key;\n+    const auto& occurence = options.occurence;\n+\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(\n+        MakeBuilder(ctx->memory_pool(), map_array.map_type()->item_type(), &builder));\n+\n+    int32_t last_key_idx_checked = 0;\n+\n+    // aka, number of {key, value} pairs in the current map\n+    int32_t list_struct_len;\n+    bool found_one_key = false;\n+    for (int32_t map_array_idx = 0; map_array_idx < map_array.length(); ++map_array_idx) {\n\nReview comment:\n       To iterate through `MapArray`, where each element is a `List( Struct( key : value ))`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T14:45:32.870+0000",
                    "updated": "2022-01-16T14:45:32.870+0000",
                    "started": "2022-01-16T14:45:32.869+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709623",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709624",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785451936\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<MapArrayLookupOptions>::Get(ctx);\n+\n+    MapArray map_array(batch[0].array());\n+\n+    // Offset differences will tell the number of Strcut = {key, value} pairs\n+    // present in the current list.\n+    // const std::shared_ptr<arrow::Buffer> offsets = map_array.value_offsets();\n+\n+    std::shared_ptr<arrow::Array> keys = map_array.keys();\n+    std::shared_ptr<arrow::Array> items = map_array.items();\n+\n+    const auto& query_key = options.query_key;\n+    const auto& occurence = options.occurence;\n+\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(\n+        MakeBuilder(ctx->memory_pool(), map_array.map_type()->item_type(), &builder));\n+\n+    int32_t last_key_idx_checked = 0;\n+\n+    // aka, number of {key, value} pairs in the current map\n+    int32_t list_struct_len;\n+    bool found_one_key = false;\n+    for (int32_t map_array_idx = 0; map_array_idx < map_array.length(); ++map_array_idx) {\n+      // Number of Struct('s) = {key, value} in the list at the current index\n+      list_struct_len = map_array.value_length(map_array_idx);\n+      for (int32_t key_idx_to_check = last_key_idx_checked;\n\nReview comment:\n       To iterate through the `List`, where each element is a `Struct( <key: item>)`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T14:46:35.739+0000",
                    "updated": "2022-01-16T14:46:35.739+0000",
                    "started": "2022-01-16T14:46:35.739+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709624",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709626",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785452692\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<MapArrayLookupOptions>::Get(ctx);\n+\n+    MapArray map_array(batch[0].array());\n+\n+    // Offset differences will tell the number of Strcut = {key, value} pairs\n+    // present in the current list.\n+    // const std::shared_ptr<arrow::Buffer> offsets = map_array.value_offsets();\n+\n+    std::shared_ptr<arrow::Array> keys = map_array.keys();\n+    std::shared_ptr<arrow::Array> items = map_array.items();\n+\n+    const auto& query_key = options.query_key;\n+    const auto& occurence = options.occurence;\n+\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(\n+        MakeBuilder(ctx->memory_pool(), map_array.map_type()->item_type(), &builder));\n+\n+    int32_t last_key_idx_checked = 0;\n+\n+    // aka, number of {key, value} pairs in the current map\n+    int32_t list_struct_len;\n+    bool found_one_key = false;\n+    for (int32_t map_array_idx = 0; map_array_idx < map_array.length(); ++map_array_idx) {\n+      // Number of Struct('s) = {key, value} in the list at the current index\n+      list_struct_len = map_array.value_length(map_array_idx);\n+      for (int32_t key_idx_to_check = last_key_idx_checked;\n+           key_idx_to_check < last_key_idx_checked + list_struct_len;\n+           ++key_idx_to_check) {\n+        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> key,\n+                              keys->GetScalar(key_idx_to_check));\n+        if (key->Equals(*query_key)) {\n+          std::cout << \"Key being checked: \" << key->ToString() << \"\\n\";\n+          ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> item,\n+                                items->GetScalar(key_idx_to_check));\n+          std::cout << \"Value at key: \" << item->ToString() << \"\\n\";\n+          ARROW_ASSIGN_OR_RAISE(auto value,\n+                                item->CastTo(map_array.map_type()->item_type()));\n\nReview comment:\n       Had to cast because for some reason, for the current tests, the `item` obtained above had the type `int16`, while the `item_type` was `int32`, which is also the `DataType` of the `Array` being built. \r\n   It gave the error:\r\n   ```text\r\n   failed with Invalid: Cannot append scalar of type int16 to builder for type int32\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T14:52:33.323+0000",
                    "updated": "2022-01-16T14:52:33.323+0000",
                    "started": "2022-01-16T14:52:33.323+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709626",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709628",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785454432\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<MapArrayLookupOptions>::Get(ctx);\n+\n+    MapArray map_array(batch[0].array());\n+\n+    // Offset differences will tell the number of Strcut = {key, value} pairs\n+    // present in the current list.\n+    // const std::shared_ptr<arrow::Buffer> offsets = map_array.value_offsets();\n+\n+    std::shared_ptr<arrow::Array> keys = map_array.keys();\n+    std::shared_ptr<arrow::Array> items = map_array.items();\n+\n+    const auto& query_key = options.query_key;\n+    const auto& occurence = options.occurence;\n+\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(\n+        MakeBuilder(ctx->memory_pool(), map_array.map_type()->item_type(), &builder));\n+\n+    int32_t last_key_idx_checked = 0;\n+\n+    // aka, number of {key, value} pairs in the current map\n+    int32_t list_struct_len;\n+    bool found_one_key = false;\n+    for (int32_t map_array_idx = 0; map_array_idx < map_array.length(); ++map_array_idx) {\n+      // Number of Struct('s) = {key, value} in the list at the current index\n+      list_struct_len = map_array.value_length(map_array_idx);\n+      for (int32_t key_idx_to_check = last_key_idx_checked;\n+           key_idx_to_check < last_key_idx_checked + list_struct_len;\n+           ++key_idx_to_check) {\n+        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> key,\n+                              keys->GetScalar(key_idx_to_check));\n+        if (key->Equals(*query_key)) {\n+          std::cout << \"Key being checked: \" << key->ToString() << \"\\n\";\n+          ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> item,\n+                                items->GetScalar(key_idx_to_check));\n+          std::cout << \"Value at key: \" << item->ToString() << \"\\n\";\n+          ARROW_ASSIGN_OR_RAISE(auto value,\n+                                item->CastTo(map_array.map_type()->item_type()));\n+\n+          std::cout << \"Item being appended: \" << value->ToString() << \"\\n\";\n+          RETURN_NOT_OK(builder->AppendScalar(*value));\n\nReview comment:\n       Had to use the `AppendScalar` approach, as using\r\n   ```cpp\r\n   RETURN_NOT_OK(builder->AppendArraySlice(*items->data(), key_idx_to_check, 1));\r\n   ```\r\n   caused problems for me. (Is this even the correct way of using `AppendArraySlice`?)\r\n   <details><summary>And for the current tests, AppendArraySlice failed with: </summary>\r\n   \r\n   ```bash\r\n   \u276f GTEST_FILTER=\"TestScalarNested.MapArrayLookup\" ctest -R \"arrow-compute-scalar-test\" -V\r\n   UpdateCTestConfiguration  from :/home/dhruv/repos/arrow/cpp/out/build/ninja-debug/DartConfiguration.tcl\r\n   UpdateCTestConfiguration  from :/home/dhruv/repos/arrow/cpp/out/build/ninja-debug/DartConfiguration.tcl\r\n   Test project /home/dhruv/repos/arrow/cpp/out/build/ninja-debug\r\n   Constructing a list of tests\r\n   Done constructing a list of tests\r\n   Updating test list for fixtures\r\n   Added 0 tests to meet fixture requirements\r\n   Checking test dependency graph...\r\n   Checking test dependency graph end\r\n   test 25\r\n       Start 25: arrow-compute-scalar-test\r\n   \r\n   25: Test command: /home/dhruv/repos/arrow/cpp/build-support/run-test.sh \"/home/dhruv/repos/arrow/cpp/out/build/ninja-debug\" \"test\" \"/home/dhruv/repos/arrow/cpp/out/build/ninja-debug/debug//arrow-compute-scalar-test\"\r\n   25: Test timeout computed to be: 10000000\r\n   25: Running arrow-compute-scalar-test, redirecting output into /home/dhruv/repos/arrow/cpp/out/build/ninja-debug/build/test-logs/arrow-compute-scalar-test.txt (attempt 1/1)\r\n   25: Running main() from ../googletest/src/gtest_main.cc\r\n   25: Note: Google Test filter = TestScalarNested.MapArrayLookup\r\n   25: [==========] Running 1 test from 1 test suite.\r\n   25: [----------] Global test environment set-up.\r\n   25: [----------] 1 test from TestScalarNested\r\n   25: [ RUN      ] TestScalarNested.MapArrayLookup\r\n   25: map type found!\r\n   25: Value type: int32\r\n   25: Key being checked: foo\r\n   25: Item at key: 99\r\n   25: Key being checked: foo\r\n   25: Item at key: 3\r\n   25: Key being checked: foo\r\n   25: Item at key: 101\r\n   25: Key being checked: foo\r\n   25: Item at key: 22\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/testing/gtest_util.cc:134: Failure\r\n   25: Failed\r\n   25:\r\n   25: @@ -0, +0 @@\r\n   25: -99\r\n   25: -3\r\n   25: -101\r\n   25: -22\r\n   25: +65635\r\n   25: +0\r\n   25: +0\r\n   25: +0\r\n   25: Expected:\r\n   25:   [\r\n   25:     99,\r\n   25:     3,\r\n   25:     101,\r\n   25:     22\r\n   25:   ]\r\n   25: Actual:\r\n   25:   [\r\n   25:     65635,\r\n   25:     0,\r\n   25:     0,\r\n   25:     0\r\n   25:   ]\r\n   25: map type found!\r\n   25: Value type: int32\r\n   25: Key being checked: foo\r\n   25: Item at key: 99\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/testing/gtest_util.cc:134: Failure\r\n   25: Failed\r\n   25:\r\n   25: @@ -0, +0 @@\r\n   25: -99\r\n   25: +65635\r\n   25: Expected:\r\n   25:   [\r\n   25:     99\r\n   25:   ]\r\n   25: Actual:\r\n   25:   [\r\n   25:     65635\r\n   25:   ]\r\n   25: [  FAILED  ] TestScalarNested.MapArrayLookup (8 ms)\r\n   25: [----------] 1 test from TestScalarNested (8 ms total)\r\n   25:\r\n   25: [----------] Global test environment tear-down\r\n   25: [==========] 1 test from 1 test suite ran. (8 ms total)\r\n   25: [  PASSED  ] 0 tests.\r\n   25: [  FAILED  ] 1 test, listed below:\r\n   25: [  FAILED  ] TestScalarNested.MapArrayLookup\r\n   25:\r\n   25:  1 FAILED TEST\r\n   25: ~/repos/arrow/cpp/out/build/ninja-debug/src/arrow/compute/kernels\r\n   1/1 Test #25: arrow-compute-scalar-test ........***Failed    0.10 sec\r\n   \r\n   0% tests passed, 1 tests failed out of 1\r\n   \r\n   Label Time Summary:\r\n   arrow_compute    =   0.10 sec*proc (1 test)\r\n   unittest         =   0.10 sec*proc (1 test)\r\n   \r\n   Total Test time (real) =   0.10 sec\r\n   \r\n   The following tests FAILED:\r\n            25 - arrow-compute-scalar-test (Failed)\r\n   Errors while running CTest\r\n   Output from these tests are in: /home/dhruv/repos/arrow/cpp/out/build/ninja-debug/Testing/Temporary/LastTest.log\r\n   Use \"--rerun-failed --output-on-failure\" to re-run the failed cases verbosely.\r\n   ```\r\n   \r\n   </details>\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T15:05:55.166+0000",
                    "updated": "2022-01-16T15:05:55.166+0000",
                    "started": "2022-01-16T15:05:55.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709628",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785455620\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<MapArrayLookupOptions>::Get(ctx);\n+\n+    MapArray map_array(batch[0].array());\n+\n+    // Offset differences will tell the number of Strcut = {key, value} pairs\n+    // present in the current list.\n+    // const std::shared_ptr<arrow::Buffer> offsets = map_array.value_offsets();\n+\n+    std::shared_ptr<arrow::Array> keys = map_array.keys();\n+    std::shared_ptr<arrow::Array> items = map_array.items();\n+\n+    const auto& query_key = options.query_key;\n+    const auto& occurence = options.occurence;\n+\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(\n+        MakeBuilder(ctx->memory_pool(), map_array.map_type()->item_type(), &builder));\n+\n+    int32_t last_key_idx_checked = 0;\n+\n+    // aka, number of {key, value} pairs in the current map\n+    int32_t list_struct_len;\n+    bool found_one_key = false;\n+    for (int32_t map_array_idx = 0; map_array_idx < map_array.length(); ++map_array_idx) {\n+      // Number of Struct('s) = {key, value} in the list at the current index\n+      list_struct_len = map_array.value_length(map_array_idx);\n+      for (int32_t key_idx_to_check = last_key_idx_checked;\n+           key_idx_to_check < last_key_idx_checked + list_struct_len;\n+           ++key_idx_to_check) {\n+        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> key,\n+                              keys->GetScalar(key_idx_to_check));\n+        if (key->Equals(*query_key)) {\n+          std::cout << \"Key being checked: \" << key->ToString() << \"\\n\";\n+          ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> item,\n+                                items->GetScalar(key_idx_to_check));\n+          std::cout << \"Value at key: \" << item->ToString() << \"\\n\";\n+          ARROW_ASSIGN_OR_RAISE(auto value,\n+                                item->CastTo(map_array.map_type()->item_type()));\n+\n+          std::cout << \"Item being appended: \" << value->ToString() << \"\\n\";\n+          RETURN_NOT_OK(builder->AppendScalar(*value));\n+\n+          if (occurence == MapArrayLookupOptions::First) {\n+            found_one_key = true;\n+            break;\n+          }\n+        }\n+      }\n+      if (found_one_key && occurence == MapArrayLookupOptions::First) break;\n\nReview comment:\n       Using this in conjunction with the condition above to break out of nested `for` loops if `Occurence::First` is used. As this currently is, this will break out when the first key is encountered, regardless of whether there are matching keys in _other_ `Lists`. Is this what we want?\r\n   \r\n   If instead _all_ `First` keys (and its item) from *each* `List` is needed, removing this condition will (I hope) suffice.\r\n   \r\n   There was also a mention of returning a different `DataType` when `First` is used as opposed to `All`, so how does this all work?\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T15:15:03.370+0000",
                    "updated": "2022-01-16T15:15:03.370+0000",
                    "started": "2022-01-16T15:15:03.370+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709630",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709631",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785455925\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<MapArrayLookupOptions>::Get(ctx);\n+\n+    MapArray map_array(batch[0].array());\n+\n+    // Offset differences will tell the number of Strcut = {key, value} pairs\n+    // present in the current list.\n+    // const std::shared_ptr<arrow::Buffer> offsets = map_array.value_offsets();\n+\n+    std::shared_ptr<arrow::Array> keys = map_array.keys();\n+    std::shared_ptr<arrow::Array> items = map_array.items();\n+\n+    const auto& query_key = options.query_key;\n+    const auto& occurence = options.occurence;\n+\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(\n+        MakeBuilder(ctx->memory_pool(), map_array.map_type()->item_type(), &builder));\n+\n+    int32_t last_key_idx_checked = 0;\n+\n+    // aka, number of {key, value} pairs in the current map\n+    int32_t list_struct_len;\n+    bool found_one_key = false;\n+    for (int32_t map_array_idx = 0; map_array_idx < map_array.length(); ++map_array_idx) {\n+      // Number of Struct('s) = {key, value} in the list at the current index\n+      list_struct_len = map_array.value_length(map_array_idx);\n+      for (int32_t key_idx_to_check = last_key_idx_checked;\n+           key_idx_to_check < last_key_idx_checked + list_struct_len;\n+           ++key_idx_to_check) {\n+        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> key,\n+                              keys->GetScalar(key_idx_to_check));\n+        if (key->Equals(*query_key)) {\n+          std::cout << \"Key being checked: \" << key->ToString() << \"\\n\";\n+          ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> item,\n+                                items->GetScalar(key_idx_to_check));\n+          std::cout << \"Value at key: \" << item->ToString() << \"\\n\";\n+          ARROW_ASSIGN_OR_RAISE(auto value,\n+                                item->CastTo(map_array.map_type()->item_type()));\n+\n+          std::cout << \"Item being appended: \" << value->ToString() << \"\\n\";\n+          RETURN_NOT_OK(builder->AppendScalar(*value));\n+\n+          if (occurence == MapArrayLookupOptions::First) {\n+            found_one_key = true;\n+            break;\n+          }\n+        }\n+      }\n+      if (found_one_key && occurence == MapArrayLookupOptions::First) break;\n+\n+      // new index from where to start checking\n+      last_key_idx_checked += list_struct_len;\n+    }\n+    // For now, handling 'Last' and 'All' occurence options as same\n+    // TODO: Handle 'Last' option.\n+    ARROW_ASSIGN_OR_RAISE(auto result, builder->Finish());\n+    out->value = result->data();\n+    return Status::OK();\n+  }\n+};\n+\n+Result<ValueDescr> ResolveMapArrayLookupType(KernelContext* ctx,\n\nReview comment:\n       A very preliminary attempt at resolving key and item `types`. Will this always correctly work?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T15:17:07.001+0000",
                    "updated": "2022-01-16T15:17:07.001+0000",
                    "started": "2022-01-16T15:17:07.000+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709631",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785455925\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<MapArrayLookupOptions>::Get(ctx);\n+\n+    MapArray map_array(batch[0].array());\n+\n+    // Offset differences will tell the number of Strcut = {key, value} pairs\n+    // present in the current list.\n+    // const std::shared_ptr<arrow::Buffer> offsets = map_array.value_offsets();\n+\n+    std::shared_ptr<arrow::Array> keys = map_array.keys();\n+    std::shared_ptr<arrow::Array> items = map_array.items();\n+\n+    const auto& query_key = options.query_key;\n+    const auto& occurence = options.occurence;\n+\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(\n+        MakeBuilder(ctx->memory_pool(), map_array.map_type()->item_type(), &builder));\n+\n+    int32_t last_key_idx_checked = 0;\n+\n+    // aka, number of {key, value} pairs in the current map\n+    int32_t list_struct_len;\n+    bool found_one_key = false;\n+    for (int32_t map_array_idx = 0; map_array_idx < map_array.length(); ++map_array_idx) {\n+      // Number of Struct('s) = {key, value} in the list at the current index\n+      list_struct_len = map_array.value_length(map_array_idx);\n+      for (int32_t key_idx_to_check = last_key_idx_checked;\n+           key_idx_to_check < last_key_idx_checked + list_struct_len;\n+           ++key_idx_to_check) {\n+        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> key,\n+                              keys->GetScalar(key_idx_to_check));\n+        if (key->Equals(*query_key)) {\n+          std::cout << \"Key being checked: \" << key->ToString() << \"\\n\";\n+          ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> item,\n+                                items->GetScalar(key_idx_to_check));\n+          std::cout << \"Value at key: \" << item->ToString() << \"\\n\";\n+          ARROW_ASSIGN_OR_RAISE(auto value,\n+                                item->CastTo(map_array.map_type()->item_type()));\n+\n+          std::cout << \"Item being appended: \" << value->ToString() << \"\\n\";\n+          RETURN_NOT_OK(builder->AppendScalar(*value));\n+\n+          if (occurence == MapArrayLookupOptions::First) {\n+            found_one_key = true;\n+            break;\n+          }\n+        }\n+      }\n+      if (found_one_key && occurence == MapArrayLookupOptions::First) break;\n+\n+      // new index from where to start checking\n+      last_key_idx_checked += list_struct_len;\n+    }\n+    // For now, handling 'Last' and 'All' occurence options as same\n+    // TODO: Handle 'Last' option.\n+    ARROW_ASSIGN_OR_RAISE(auto result, builder->Finish());\n+    out->value = result->data();\n+    return Status::OK();\n+  }\n+};\n+\n+Result<ValueDescr> ResolveMapArrayLookupType(KernelContext* ctx,\n\nReview comment:\n       A very preliminary attempt at resolving key and item `types`. Will such an approach work?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T15:17:39.822+0000",
                    "updated": "2022-01-16T15:17:39.822+0000",
                    "started": "2022-01-16T15:17:39.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709632",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785456149\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<MapArrayLookupOptions>::Get(ctx);\n+\n+    MapArray map_array(batch[0].array());\n+\n+    // Offset differences will tell the number of Strcut = {key, value} pairs\n+    // present in the current list.\n+    // const std::shared_ptr<arrow::Buffer> offsets = map_array.value_offsets();\n+\n+    std::shared_ptr<arrow::Array> keys = map_array.keys();\n+    std::shared_ptr<arrow::Array> items = map_array.items();\n+\n+    const auto& query_key = options.query_key;\n+    const auto& occurence = options.occurence;\n+\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(\n+        MakeBuilder(ctx->memory_pool(), map_array.map_type()->item_type(), &builder));\n+\n+    int32_t last_key_idx_checked = 0;\n+\n+    // aka, number of {key, value} pairs in the current map\n+    int32_t list_struct_len;\n+    bool found_one_key = false;\n+    for (int32_t map_array_idx = 0; map_array_idx < map_array.length(); ++map_array_idx) {\n+      // Number of Struct('s) = {key, value} in the list at the current index\n+      list_struct_len = map_array.value_length(map_array_idx);\n+      for (int32_t key_idx_to_check = last_key_idx_checked;\n+           key_idx_to_check < last_key_idx_checked + list_struct_len;\n+           ++key_idx_to_check) {\n+        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> key,\n+                              keys->GetScalar(key_idx_to_check));\n+        if (key->Equals(*query_key)) {\n+          std::cout << \"Key being checked: \" << key->ToString() << \"\\n\";\n+          ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> item,\n+                                items->GetScalar(key_idx_to_check));\n+          std::cout << \"Value at key: \" << item->ToString() << \"\\n\";\n+          ARROW_ASSIGN_OR_RAISE(auto value,\n+                                item->CastTo(map_array.map_type()->item_type()));\n+\n+          std::cout << \"Item being appended: \" << value->ToString() << \"\\n\";\n+          RETURN_NOT_OK(builder->AppendScalar(*value));\n+\n+          if (occurence == MapArrayLookupOptions::First) {\n+            found_one_key = true;\n+            break;\n+          }\n+        }\n+      }\n+      if (found_one_key && occurence == MapArrayLookupOptions::First) break;\n+\n+      // new index from where to start checking\n+      last_key_idx_checked += list_struct_len;\n+    }\n+    // For now, handling 'Last' and 'All' occurence options as same\n+    // TODO: Handle 'Last' option.\n+    ARROW_ASSIGN_OR_RAISE(auto result, builder->Finish());\n+    out->value = result->data();\n+    return Status::OK();\n+  }\n+};\n+\n+Result<ValueDescr> ResolveMapArrayLookupType(KernelContext* ctx,\n+                                             const std::vector<ValueDescr>& descrs) {\n+  std::shared_ptr<DataType> type = descrs.front().type;\n+  std::shared_ptr<DataType> value_type;\n+  std::shared_ptr<DataType> key_type;\n+  if (type->id() == Type::MAP) {\n+    std::cout << \"map type found!\\n\";\n+    key_type = type->field(0)->type()->field(0)->type();\n\nReview comment:\n       Is this a good place to check whether the `query_key` type and `Map::key` type match?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T15:19:02.764+0000",
                    "updated": "2022-01-16T15:19:02.764+0000",
                    "started": "2022-01-16T15:19:02.764+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709633",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785457583\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested_test.cc\n##########\n@@ -225,6 +225,30 @@ TEST(TestScalarNested, StructField) {\n   }\n }\n \n+TEST(TestScalarNested, MapArrayLookup) {\n+  MapArrayLookupOptions foo_all(MakeScalar(\"foo\"), MapArrayLookupOptions::All);\n+  MapArrayLookupOptions foo_first(MakeScalar(\"foo\"), MapArrayLookupOptions::First);\n+  auto type = map(utf8(), int32());\n+\n+  auto keys = ArrayFromJSON(utf8(), R\"([\n+    \"foo\", \"bar\", \"hello\", \"foo\", \"lesgo\", \"whatnow\",\n+    \"nothing\", \"hat\", \"foo\", \"sorry\", \"dip\", \"foo\"\n+  ])\");\n+  auto items = ArrayFromJSON(int16(), R\"([\n+    99,    1,    2,  3,  5,    8,\n+    null, null, 101,  1,  null, 22\n+  ])\");\n+  auto offsets = ArrayFromJSON(int32(), \"[0, 6, 6, 12, 12]\")->data()->buffers[1];\n+  auto null_bitmap = ArrayFromJSON(boolean(), \"[1, 0, 1, 1]\")->data()->buffers[1];\n+\n+  MapArray map_array(type, 4, offsets, keys, items, null_bitmap, 1, 0);\n+\n+  CheckScalarNonRecursive(\"map_array_lookup\", {map_array},\n\nReview comment:\n       Using `CheckScalarNonRecursive` instead of `CheckScalar`, as using the latter caused these errors:\r\n   \r\n   <details><summary> Using CheckScalar </summary>\r\n   \r\n   ```bash\r\n   \u276f GTEST_FILTER=\"TestScalarNested.MapArrayLookup\" ctest -R \"arrow-compute-scalar-test\" -V\r\n   UpdateCTestConfiguration  from :/home/dhruv/repos/arrow/cpp/out/build/ninja-debug/DartConfiguration.tcl\r\n   UpdateCTestConfiguration  from :/home/dhruv/repos/arrow/cpp/out/build/ninja-debug/DartConfiguration.tcl\r\n   Test project /home/dhruv/repos/arrow/cpp/out/build/ninja-debug\r\n   Constructing a list of tests\r\n   Done constructing a list of tests\r\n   Updating test list for fixtures\r\n   Added 0 tests to meet fixture requirements\r\n   Checking test dependency graph...\r\n   Checking test dependency graph end\r\n   test 25\r\n       Start 25: arrow-compute-scalar-test\r\n   \r\n   25: Test command: /home/dhruv/repos/arrow/cpp/build-support/run-test.sh \"/home/dhruv/repos/arrow/cpp/out/build/ninja-debug\" \"test\" \"/home/dhruv/repos/arrow/cpp/out/build/ninja-debug/debug//arrow-compute-scalar-test\"\r\n   25: Test timeout computed to be: 10000000\r\n   25: Running arrow-compute-scalar-test, redirecting output into /home/dhruv/repos/arrow/cpp/out/build/ninja-debug/build/test-logs/arrow-compute-scalar-test.txt (attempt 1/1)\r\n   25: Running main() from ../googletest/src/gtest_main.cc\r\n   25: Note: Google Test filter = TestScalarNested.MapArrayLookup\r\n   25: [==========] Running 1 test from 1 test suite.\r\n   25: [----------] Global test environment set-up.\r\n   25: [----------] 1 test from TestScalarNested\r\n   25: [ RUN      ] TestScalarNested.MapArrayLookup\r\n   25: map type found!\r\n   25: Value type: int32\r\n   25: Key being checked: foo\r\n   25: Item at key: 99\r\n   25: Value being appended: 99\r\n   25: Key being checked: foo\r\n   25: Item at key: 3\r\n   25: Value being appended: 3\r\n   25: Key being checked: foo\r\n   25: Item at key: 101\r\n   25: Value being appended: 101\r\n   25: Key being checked: foo\r\n   25: Item at key: 22\r\n   25: Value being appended: 22\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/compute/kernels/test_util.cc:86: Failure\r\n   25: Failed\r\n   25: '_error_or_value12.status()' failed with NotImplemented: Function 'map_array_lookup' has no kernel matching input types (scalar[map<string, int32>])\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/compute/function.cc:224  DispatchBest(&inputs)\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/compute/kernels/test_util.cc:86: Failure\r\n   25: Failed\r\n   25: '_error_or_value12.status()' failed with NotImplemented: Function 'map_array_lookup' has no kernel matching input types (scalar[map<string, int32>])\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/compute/function.cc:224  DispatchBest(&inputs)\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/compute/kernels/test_util.cc:86: Failure\r\n   25: Failed\r\n   25: '_error_or_value12.status()' failed with NotImplemented: Function 'map_array_lookup' has no kernel matching input types (scalar[map<string, int32>])\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/compute/function.cc:224  DispatchBest(&inputs)\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/compute/kernels/test_util.cc:86: Failure\r\n   25: Failed\r\n   25: '_error_or_value12.status()' failed with NotImplemented: Function 'map_array_lookup' has no kernel matching input types (scalar[map<string, int32>])\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/compute/function.cc:224  DispatchBest(&inputs)\r\n   25: map type found!\r\n   25: Value type: int32\r\n   25: Key being checked: foo\r\n   25: Item at key: 99\r\n   25: Value being appended: 99\r\n   25: Key being checked: foo\r\n   25: Item at key: 3\r\n   25: Value being appended: 3\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/testing/gtest_util.cc:134: Failure\r\n   25: Failed\r\n   25:\r\n   25: @@ -1, +1 @@\r\n   25: +3\r\n   25: Expected:\r\n   25:   [\r\n   25:     99\r\n   25:   ]\r\n   25: Actual:\r\n   25:   [\r\n   25:     99,\r\n   25:     3\r\n   25:   ]\r\n   25: map type found!\r\n   25: Value type: int32\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/testing/gtest_util.cc:134: Failure\r\n   25: Failed\r\n   25:\r\n   25: @@ -0, +0 @@\r\n   25: -3\r\n   25: Expected:\r\n   25:   [\r\n   25:     3\r\n   25:   ]\r\n   25: Actual:\r\n   25:   []\r\n   25: map type found!\r\n   25: Value type: int32\r\n   25: Key being checked: foo\r\n   25: Item at key: 99\r\n   25: Value being appended: 99\r\n   25: Key being checked: foo\r\n   25: Item at key: 3\r\n   25: Value being appended: 3\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/testing/gtest_util.cc:134: Failure\r\n   25: Failed\r\n   25:\r\n   25: @@ -0, +0 @@\r\n   25: -101\r\n   25: -22\r\n   25: +99\r\n   25: +3\r\n   25: Expected:\r\n   25:   [\r\n   25:     101,\r\n   25:     22\r\n   25:   ]\r\n   25: Actual:\r\n   25:   [\r\n   25:     99,\r\n   25:     3\r\n   25:   ]\r\n   25: map type found!\r\n   25: Value type: int32\r\n   25: map type found!\r\n   25: Value type: int32\r\n   25: Key being checked: foo\r\n   25: Item at key: 99\r\n   25: Value being appended: 99\r\n   25: Key being checked: foo\r\n   25: Item at key: 3\r\n   25: Value being appended: 3\r\n   25: Key being checked: foo\r\n   25: Item at key: 99\r\n   25: Value being appended: 99\r\n   25: Key being checked: foo\r\n   25: Item at key: 3\r\n   25: Value being appended: 3\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/testing/gtest_util.cc:223: Failure\r\n   25: Failed\r\n   25: Got:\r\n   25:   [\r\n   25:     [\r\n   25:       99,\r\n   25:       3\r\n   25:     ],\r\n   25:     [\r\n   25:       99,\r\n   25:       3\r\n   25:     ]\r\n   25:   ]\r\n   25: Expected:\r\n   25:   [\r\n   25:     [\r\n   25:       99\r\n   25:     ],\r\n   25:     [\r\n   25:       3,\r\n   25:       101,\r\n   25:       22\r\n   25:     ]\r\n   25:   ]\r\n   25: map type found!\r\n   25: Value type: int32\r\n   25: Key being checked: foo\r\n   25: Item at key: 99\r\n   25: Value being appended: 99\r\n   25: /home/dhruv/repos/arrow/cpp/src/arrow/compute/kernels/test_util.cc:119: Failure\r\n   25: Expected equality of these values:\r\n   25:   input.array()->length\r\n   25:     Which is: 4\r\n   25:   expected->length()\r\n   25:     Which is: 1\r\n   25: [  FAILED  ] TestScalarNested.MapArrayLookup (9 ms)\r\n   25: [----------] 1 test from TestScalarNested (9 ms total)\r\n   25:\r\n   25: [----------] Global test environment tear-down\r\n   25: [==========] 1 test from 1 test suite ran. (9 ms total)\r\n   25: [  PASSED  ] 0 tests.\r\n   25: [  FAILED  ] 1 test, listed below:\r\n   25: [  FAILED  ] TestScalarNested.MapArrayLookup\r\n   25:\r\n   25:  1 FAILED TEST\r\n   25: ~/repos/arrow/cpp/out/build/ninja-debug/src/arrow/compute/kernels\r\n   1/1 Test #25: arrow-compute-scalar-test ........***Failed    0.08 sec\r\n   \r\n   0% tests passed, 1 tests failed out of 1\r\n   \r\n   Label Time Summary:\r\n   arrow_compute    =   0.08 sec*proc (1 test)\r\n   unittest         =   0.08 sec*proc (1 test)\r\n   \r\n   Total Test time (real) =   0.08 sec\r\n   \r\n   The following tests FAILED:\r\n            25 - arrow-compute-scalar-test (Failed)\r\n   Errors while running CTest\r\n   Output from these tests are in: /home/dhruv/repos/arrow/cpp/out/build/ninja-debug/Testing/Temporary/LastTest.log\r\n   Use \"--rerun-failed --output-on-failure\" to re-run the failed cases verbosely.\r\n   ```\r\n   \r\n   </details>\r\n   \r\n   Also, what would a kernel that takes `Type::MAP` of shape `ValueDescr::SCALAR` look like?\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T15:30:02.209+0000",
                    "updated": "2022-01-16T15:30:02.209+0000",
                    "started": "2022-01-16T15:30:02.209+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709634",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709635",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785458284\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested_test.cc\n##########\n@@ -225,6 +225,30 @@ TEST(TestScalarNested, StructField) {\n   }\n }\n \n+TEST(TestScalarNested, MapArrayLookup) {\n+  MapArrayLookupOptions foo_all(MakeScalar(\"foo\"), MapArrayLookupOptions::All);\n+  MapArrayLookupOptions foo_first(MakeScalar(\"foo\"), MapArrayLookupOptions::First);\n+  auto type = map(utf8(), int32());\n+\n+  auto keys = ArrayFromJSON(utf8(), R\"([\n+    \"foo\", \"bar\", \"hello\", \"foo\", \"lesgo\", \"whatnow\",\n+    \"nothing\", \"hat\", \"foo\", \"sorry\", \"dip\", \"foo\"\n+  ])\");\n+  auto items = ArrayFromJSON(int16(), R\"([\n+    99,    1,    2,  3,  5,    8,\n+    null, null, 101,  1,  null, 22\n+  ])\");\n+  auto offsets = ArrayFromJSON(int32(), \"[0, 6, 6, 12, 12]\")->data()->buffers[1];\n+  auto null_bitmap = ArrayFromJSON(boolean(), \"[1, 0, 1, 1]\")->data()->buffers[1];\n+\n+  MapArray map_array(type, 4, offsets, keys, items, null_bitmap, 1, 0);\n+\n+  CheckScalarNonRecursive(\"map_array_lookup\", {map_array},\n+                          ArrayFromJSON(int32(), \"[99, 3, 101, 22]\"), &foo_all);\n+  CheckScalarNonRecursive(\"map_array_lookup\", {map_array}, ArrayFromJSON(int32(), \"[99]\"),\n\nReview comment:\n       Also, this _very_ basic test does (somehow) pass:\r\n   \r\n   <details><summary>Passing test output</summary>\r\n   \r\n   ```bash\r\n   \u276f GTEST_FILTER=\"TestScalarNested.MapArrayLookup\" ctest -R \"arrow-compute-scalar-test\" -V\r\n   UpdateCTestConfiguration  from :/home/dhruv/repos/arrow/cpp/out/build/ninja-debug/DartConfiguration.tcl\r\n   UpdateCTestConfiguration  from :/home/dhruv/repos/arrow/cpp/out/build/ninja-debug/DartConfiguration.tcl\r\n   Test project /home/dhruv/repos/arrow/cpp/out/build/ninja-debug\r\n   Constructing a list of tests\r\n   Done constructing a list of tests\r\n   Updating test list for fixtures\r\n   Added 0 tests to meet fixture requirements\r\n   Checking test dependency graph...\r\n   Checking test dependency graph end\r\n   test 25\r\n       Start 25: arrow-compute-scalar-test\r\n   \r\n   25: Test command: /home/dhruv/repos/arrow/cpp/build-support/run-test.sh \"/home/dhruv/repos/arrow/cpp/out/build/ninja-debug\" \"test\" \"/home/dhruv/repos/arrow/cpp/out/build/ninja-debug/debug//arrow-compute-scalar-test\"\r\n   25: Test timeout computed to be: 10000000\r\n   25: Running arrow-compute-scalar-test, redirecting output into /home/dhruv/repos/arrow/cpp/out/build/ninja-debug/build/test-logs/arrow-compute-scalar-test.txt (attempt 1/1)\r\n   25: Running main() from ../googletest/src/gtest_main.cc\r\n   25: Note: Google Test filter = TestScalarNested.MapArrayLookup\r\n   25: [==========] Running 1 test from 1 test suite.\r\n   25: [----------] Global test environment set-up.\r\n   25: [----------] 1 test from TestScalarNested\r\n   25: [ RUN      ] TestScalarNested.MapArrayLookup\r\n   25: map type found!\r\n   25: Value type: int32\r\n   25: Key being checked: foo\r\n   25: Value at key: 99\r\n   25: Item being appended: 99\r\n   25: Key being checked: foo\r\n   25: Value at key: 3\r\n   25: Item being appended: 3\r\n   25: Key being checked: foo\r\n   25: Value at key: 101\r\n   25: Item being appended: 101\r\n   25: Key being checked: foo\r\n   25: Value at key: 22\r\n   25: Item being appended: 22\r\n   25: map type found!\r\n   25: Value type: int32\r\n   25: Key being checked: foo\r\n   25: Value at key: 99\r\n   25: Item being appended: 99\r\n   25: [       OK ] TestScalarNested.MapArrayLookup (10 ms)\r\n   25: [----------] 1 test from TestScalarNested (10 ms total)\r\n   25:\r\n   25: [----------] Global test environment tear-down\r\n   25: [==========] 1 test from 1 test suite ran. (10 ms total)\r\n   25: [  PASSED  ] 1 test.\r\n   25: ~/repos/arrow/cpp/out/build/ninja-debug/src/arrow/compute/kernels\r\n   1/1 Test #25: arrow-compute-scalar-test ........   Passed    0.08 sec\r\n   \r\n   The following tests passed:\r\n           arrow-compute-scalar-test\r\n   \r\n   100% tests passed, 0 tests failed out of 1\r\n   \r\n   Label Time Summary:\r\n   arrow_compute    =   0.08 sec*proc (1 test)\r\n   unittest         =   0.08 sec*proc (1 test)\r\n   \r\n   Total Test time (real) =   0.08 sec\r\n   ```\r\n   \r\n   </details>\r\n   \r\n   (Please do suggest better tests)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T15:35:07.601+0000",
                    "updated": "2022-01-16T15:35:07.601+0000",
                    "started": "2022-01-16T15:35:07.601+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709635",
                    "issueId": "13417223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/worklog/709637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dhruv9vats commented on a change in pull request #12162:\nURL: https://github.com/apache/arrow/pull/12162#discussion_r785451341\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_nested.cc\n##########\n@@ -429,6 +430,97 @@ const FunctionDoc make_struct_doc{\"Wrap Arrays into a StructArray\",\n                                   {\"*args\"},\n                                   \"MakeStructOptions\"};\n \n+struct MapArrayLookupFunctor {\n+  static Status ExecMapArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const auto& options = OptionsWrapper<MapArrayLookupOptions>::Get(ctx);\n+\n+    MapArray map_array(batch[0].array());\n+\n+    // Offset differences will tell the number of Strcut = {key, value} pairs\n+    // present in the current list.\n+    // const std::shared_ptr<arrow::Buffer> offsets = map_array.value_offsets();\n+\n+    std::shared_ptr<arrow::Array> keys = map_array.keys();\n+    std::shared_ptr<arrow::Array> items = map_array.items();\n+\n+    const auto& query_key = options.query_key;\n+    const auto& occurence = options.occurence;\n+\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(\n+        MakeBuilder(ctx->memory_pool(), map_array.map_type()->item_type(), &builder));\n+\n+    int32_t last_key_idx_checked = 0;\n+\n+    // aka, number of {key, value} pairs in the current map\n+    int32_t list_struct_len;\n+    bool found_one_key = false;\n+    for (int32_t map_array_idx = 0; map_array_idx < map_array.length(); ++map_array_idx) {\n+      // Number of Struct('s) = {key, value} in the list at the current index\n+      list_struct_len = map_array.value_length(map_array_idx);\n\nReview comment:\n       The length of the current `List`, aka, the number of `keys` to check in the `keys` `arrow::Array` above (which is _continous_ in memory and are separated by offsets).\r\n   Have I understood this correctly, and is using the `map_array.value_length(map_array_idx)` the correct way to obtain it?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-16T15:39:43.783+0000",
                    "updated": "2022-01-16T15:39:43.783+0000",
                    "started": "2022-01-16T15:39:43.782+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709637",
                    "issueId": "13417223"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 53400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1e510431[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@210a9dd6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a9e77dd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1f8fa375[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36469e8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3b83da97[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22ba62a5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@404cf98c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60c7f344[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@45b5daa9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@34eb27f0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@134c3878[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 53400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Feb 03 13:39:13 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": [
            "C++"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-02-03T13:39:13.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15089/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2021-12-13T22:46:53.000+0000",
        "updated": "2022-02-04T15:11:36.000+0000",
        "timeoriginalestimate": null,
        "description": "Given a \"map\", an obvious operation is to get an item corresponding to a key. The idea here is to create a kernel that does this for each map in the array.\r\n\r\nIIRC MapArray isn't guaranteed to have unique keys. So one version would return an array of ItemType by returning the first of last item for a given key. Yet another version could return a ListType containing all matching items.\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "14h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 53400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add compute kernel to get MapArray value for given key",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/comment/17458784",
                    "id": "17458784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This also would be useful to implement [one type of field references in Substrait|https://substrait.io/expressions/field_references/]; also see ARROW-14658 et. al.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-12-13T23:04:46.538+0000",
                    "updated": "2021-12-13T23:04:46.538+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/comment/17475134",
                    "id": "17475134",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "To solve the \"maps don't have unique keys\" problem I think this kernel should take an integer index instead of a string key.  We generally assume plan construction happens when the schema is fully known so the plan constructor should be able to figure out the correct index based on whether they want \"first matching\" or \"last matching\".\r\n\r\nFor nested structs (e.g. { \"location\": { \"x\": 0, \"y\": 3 }, \"magnitude\": 7.3 }) it seems the easiest thing to do would be to require two function calls.  So to get the field {{\"y\"}} in that example you would do something like {{extract_field(extract_field(arr, 0), 1)}}.  I suppose it would be possible to treat the indices as DFS indices (e.g. {{\"x\"=0, \"y\"=1, \"magnitude\"=2}} ) but that gets rather confusing rather quickly.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-01-13T07:00:00.280+0000",
                    "updated": "2022-01-13T07:00:00.280+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/comment/17475351",
                    "id": "17475351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~westonpace] I think a \"map\" here is MapType which doesn't have a consistent ordering right? For structs, we would use struct_field which does indeed take (an array of) indices.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-01-13T13:23:28.954+0000",
                    "updated": "2022-01-13T13:23:28.954+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/comment/17475478",
                    "id": "17475478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Yes this is for MapArray, whose type is alias for {{list(struct(<key>, <value>))}}. So I imagine the kernel is essentially a filter on each list entry for {{struct.key = query_key}}, and then some logic to decide which results (if any) to keep.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-01-13T15:59:08.935+0000",
                    "updated": "2022-01-13T15:59:08.935+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/comment/17475531",
                    "id": "17475531",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Ok, I understand what you are saying now.  I was indeed thinking of a struct array.  My mistake.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-01-13T16:48:25.034+0000",
                    "updated": "2022-01-13T16:48:25.034+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/comment/17476066",
                    "id": "17476066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dhruv9vats",
                        "name": "dhruv9vats",
                        "key": "dhruv9vats",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Dhruv Vats",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "I thought to ask this before I got too confused. Some (possibly very naive) questions:\r\n * Is {{{}MapArray{}}}, which inherits from {{{}ListArray{}}}, a collection of individual {{{}MapTypes{}}}, each of which in turn are like a {{{}List [ Struct1 \\{key, value}, Struct2 \\{key, value}, ... ]{}}}?\r\n * Arrow doesn't restrict the DataType {{key}} takes on (or does it?), so what is the correct way to take it as a parameter to a {{{}kernel{}}}.\r\n * Some kernels use {{Call}} while others use {{{}ExecSomething{}}}, what are the prerequisites/strategies/reasonings behind these?\r\n * If the {{MapArray}} definition in the first point is correct, how do the {{MapArray.keys/items}} work? Do they return a _combined_ Array of keys/items? If so, then iterating and checking for matches in this {{keys}} Array is what we are looking for here?\r\n\r\nI'm pretty sure I'm getting a lot of things mixed up. Still finding my way through the expansive Arrow type system, where each subdirectory is like a codebase in itself it seems.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dhruv9vats",
                        "name": "dhruv9vats",
                        "key": "dhruv9vats",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Dhruv Vats",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2022-01-14T10:45:20.735+0000",
                    "updated": "2022-01-14T11:18:11.853+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/comment/17476125",
                    "id": "17476125",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "* MapArray is of type MapType. Types are not values in our type system :) MapType[K, V] is equivalent to List[Struct[key: K, value: V]]. Hence it looks something like this: {{[[\\{\"key\": \"k\", \"value\": 0}, \\{\"key\": \"foo\", \"value\": 42}], [\\{\"key\": \"bar\", \"value\": 32}]]}} for {{{}MapType[Utf8, Int64]{}}}.\r\n * The parameters should be passed via an options class (e.g. see StructFieldOptions) containing a Scalar: [https://github.com/apache/arrow/blob/master/cpp/src/arrow/scalar.h]\r\n * There's not really a difference, there's no uniform structure for kernels other than ultimately a kernel is a function call with a specific signature. Different kernels are implemented differently. CC [~edponce] who was categorizing/trying to make consistent these things.\r\n * They return a combined array, yes. This is due to the layout of ListArray and StructArray. A ListArray doesn't have one child array per list, but rather stores one child array and a list of offsets that mark the lists. A StructArray stores one child array per struct field (i.e. it's columnar, not row-wise). Iterating through the keys in that array would work, but you also need to keep track of which list you are looking at, and decide what to do about duplicate keys (since this will affect the return type).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-01-14T13:01:20.525+0000",
                    "updated": "2022-01-14T13:01:20.525+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223/comment/17486484",
                    "id": "17486484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 12162\n[https://github.com/apache/arrow/pull/12162]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-02-03T13:39:13.587+0000",
                    "updated": "2022-02-03T13:39:13.587+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|z0xnkg:",
        "customfield_12314139": null
    }
}