{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13322942",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322942",
    "key": "ARROW-9758",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12596935",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12596935",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13322597",
                    "key": "ARROW-9732",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322597",
                    "fields": {
                        "summary": "[Rust] [DataFusion] Add \"Physical Planner\" type thing which can do optimizations",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9758/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322942/worklog/471225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove opened a new pull request #7975:\nURL: https://github.com/apache/arrow/pull/7975\n\n\n   This PR mainly moves the physical query logic out of ExecutionContext and into its own struct. There is a new `PhysicalPlanner` trait, and it is now possible to bring-you-own planner if the one in DataFusion doesn't meet your needs (for example, if you need to implement distributed query execution).\r\n   \r\n   pseudo code example:\r\n   \r\n   ```rust\r\n   let config = ExectionConfig::new().with_physical_planner(Arc::new(MyPhysicalPlanner::new()));\r\n   let ctx = ExecutionContext::new(config);\r\n   ctx.sql(\"SELECT * FROM foo\");\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T16:31:53.257+0000",
                    "updated": "2020-08-16T16:31:53.257+0000",
                    "started": "2020-08-16T16:31:53.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471225",
                    "issueId": "13322942"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322942/worklog/471226",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #7975:\nURL: https://github.com/apache/arrow/pull/7975#issuecomment-674547945\n\n\n   @jorgecarleitao @alamb \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T16:32:36.786+0000",
                    "updated": "2020-08-16T16:32:36.786+0000",
                    "started": "2020-08-16T16:32:36.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471226",
                    "issueId": "13322942"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322942/worklog/471228",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7975:\nURL: https://github.com/apache/arrow/pull/7975#issuecomment-674549512\n\n\n   https://issues.apache.org/jira/browse/ARROW-9758\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T16:46:56.889+0000",
                    "updated": "2020-08-16T16:46:56.889+0000",
                    "started": "2020-08-16T16:46:56.889+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471228",
                    "issueId": "13322942"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322942/worklog/471239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #7975:\nURL: https://github.com/apache/arrow/pull/7975#discussion_r471137546\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -373,363 +361,13 @@ impl ExecutionContext {\n     pub fn create_physical_plan(\n         &self,\n         logical_plan: &LogicalPlan,\n-        batch_size: usize,\n+        _batch_size: usize,\n\nReview comment:\n       remove?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T17:33:50.070+0000",
                    "updated": "2020-08-16T17:33:50.070+0000",
                    "started": "2020-08-16T17:33:50.070+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471239",
                    "issueId": "13322942"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322942/worklog/471240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #7975:\nURL: https://github.com/apache/arrow/pull/7975#discussion_r471139144\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -373,363 +361,13 @@ impl ExecutionContext {\n     pub fn create_physical_plan(\n         &self,\n         logical_plan: &LogicalPlan,\n-        batch_size: usize,\n+        _batch_size: usize,\n\nReview comment:\n       oops, thanks\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T17:44:48.521+0000",
                    "updated": "2020-08-16T17:44:48.521+0000",
                    "started": "2020-08-16T17:44:48.521+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471240",
                    "issueId": "13322942"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322942/worklog/471254",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #7975:\nURL: https://github.com/apache/arrow/pull/7975#issuecomment-674560250\n\n\n   Thanks @jorgecarleitao I added a test and removed the legacy batch_size param everywhere now that it is in the configs. This really helped clean up the UX some more.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T18:25:08.545+0000",
                    "updated": "2020-08-16T18:25:08.545+0000",
                    "started": "2020-08-16T18:25:08.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471254",
                    "issueId": "13322942"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322942/worklog/471257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #7975:\nURL: https://github.com/apache/arrow/pull/7975\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T18:51:39.976+0000",
                    "updated": "2020-08-16T18:51:39.976+0000",
                    "started": "2020-08-16T18:51:39.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471257",
                    "issueId": "13322942"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322942/worklog/471461",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #7975:\nURL: https://github.com/apache/arrow/pull/7975#discussion_r471433074\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -1452,11 +1109,34 @@ mod tests {\n         Ok(())\n     }\n \n+    #[test]\n+    fn custom_physical_planner() -> Result<()> {\n\nReview comment:\n       \ud83d\udc4d \n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -373,363 +355,12 @@ impl ExecutionContext {\n     pub fn create_physical_plan(\n         &self,\n         logical_plan: &LogicalPlan,\n-        batch_size: usize,\n     ) -> Result<Arc<dyn ExecutionPlan>> {\n-        match logical_plan {\n-            LogicalPlan::TableScan {\n-                table_name,\n-                projection,\n-                ..\n-            } => match self\n-                .state\n-                .lock()\n-                .expect(\"failed to lock mutex\")\n-                .datasources\n-                .lock()\n-                .expect(\"failed to lock mutex\")\n-                .get(table_name)\n-            {\n-                Some(provider) => {\n-                    let partitions = provider.scan(projection, batch_size)?;\n-                    if partitions.is_empty() {\n-                        Err(ExecutionError::General(\n-                            \"Table provider returned no partitions\".to_string(),\n-                        ))\n-                    } else {\n-                        let schema = match projection {\n-                            None => provider.schema().clone(),\n-                            Some(p) => Arc::new(Schema::new(\n-                                p.iter()\n-                                    .map(|i| provider.schema().field(*i).clone())\n-                                    .collect(),\n-                            )),\n-                        };\n-\n-                        let exec = DatasourceExec::new(schema, partitions.clone());\n-                        Ok(Arc::new(exec))\n-                    }\n-                }\n-                _ => Err(ExecutionError::General(format!(\n-                    \"No table named {}\",\n-                    table_name\n-                ))),\n-            },\n-            LogicalPlan::InMemoryScan {\n-                data,\n-                projection,\n-                projected_schema,\n-                ..\n-            } => Ok(Arc::new(MemoryExec::try_new(\n-                data,\n-                Arc::new(projected_schema.as_ref().to_owned()),\n-                projection.to_owned(),\n-            )?)),\n-            LogicalPlan::CsvScan {\n-                path,\n-                schema,\n-                has_header,\n-                delimiter,\n-                projection,\n-                ..\n-            } => Ok(Arc::new(CsvExec::try_new(\n-                path,\n-                CsvReadOptions::new()\n-                    .schema(schema.as_ref())\n-                    .delimiter_option(*delimiter)\n-                    .has_header(*has_header),\n-                projection.to_owned(),\n-                batch_size,\n-            )?)),\n-            LogicalPlan::ParquetScan {\n-                path, projection, ..\n-            } => Ok(Arc::new(ParquetExec::try_new(\n-                path,\n-                projection.to_owned(),\n-                batch_size,\n-            )?)),\n-            LogicalPlan::Projection { input, expr, .. } => {\n-                let input = self.create_physical_plan(input, batch_size)?;\n-                let input_schema = input.as_ref().schema().clone();\n-                let runtime_expr = expr\n-                    .iter()\n-                    .map(|e| {\n-                        tuple_err((\n-                            self.create_physical_expr(e, &input_schema),\n-                            e.name(&input_schema),\n-                        ))\n-                    })\n-                    .collect::<Result<Vec<_>>>()?;\n-                Ok(Arc::new(ProjectionExec::try_new(runtime_expr, input)?))\n-            }\n-            LogicalPlan::Aggregate {\n-                input,\n-                group_expr,\n-                aggr_expr,\n-                ..\n-            } => {\n-                // Initially need to perform the aggregate and then merge the partitions\n-                let input = self.create_physical_plan(input, batch_size)?;\n-                let input_schema = input.as_ref().schema().clone();\n-\n-                let groups = group_expr\n-                    .iter()\n-                    .map(|e| {\n-                        tuple_err((\n-                            self.create_physical_expr(e, &input_schema),\n-                            e.name(&input_schema),\n-                        ))\n-                    })\n-                    .collect::<Result<Vec<_>>>()?;\n-                let aggregates = aggr_expr\n-                    .iter()\n-                    .map(|e| {\n-                        tuple_err((\n-                            self.create_aggregate_expr(e, &input_schema),\n-                            e.name(&input_schema),\n-                        ))\n-                    })\n-                    .collect::<Result<Vec<_>>>()?;\n-\n-                let initial_aggr = HashAggregateExec::try_new(\n-                    groups.clone(),\n-                    aggregates.clone(),\n-                    input,\n-                )?;\n-\n-                let schema = initial_aggr.schema();\n-                let partitions = initial_aggr.partitions()?;\n-\n-                if partitions.len() == 1 {\n-                    return Ok(Arc::new(initial_aggr));\n-                }\n-\n-                let merge = Arc::new(MergeExec::new(\n-                    schema.clone(),\n-                    partitions,\n-                    self.state\n-                        .lock()\n-                        .expect(\"failed to lock mutex\")\n-                        .config\n-                        .concurrency,\n-                ));\n-\n-                // construct the expressions for the final aggregation\n-                let (final_group, final_aggr) = initial_aggr.make_final_expr(\n-                    groups.iter().map(|x| x.1.clone()).collect(),\n-                    aggregates.iter().map(|x| x.1.clone()).collect(),\n-                );\n-\n-                // construct a second aggregation, keeping the final column name equal to the first aggregation\n-                // and the expressions corresponding to the respective aggregate\n-                Ok(Arc::new(HashAggregateExec::try_new(\n-                    final_group\n-                        .iter()\n-                        .enumerate()\n-                        .map(|(i, expr)| (expr.clone(), groups[i].1.clone()))\n-                        .collect(),\n-                    final_aggr\n-                        .iter()\n-                        .enumerate()\n-                        .map(|(i, expr)| (expr.clone(), aggregates[i].1.clone()))\n-                        .collect(),\n-                    merge,\n-                )?))\n-            }\n-            LogicalPlan::Selection { input, expr, .. } => {\n-                let input = self.create_physical_plan(input, batch_size)?;\n-                let input_schema = input.as_ref().schema().clone();\n-                let runtime_expr = self.create_physical_expr(expr, &input_schema)?;\n-                Ok(Arc::new(SelectionExec::try_new(runtime_expr, input)?))\n-            }\n-            LogicalPlan::Sort { expr, input, .. } => {\n-                let input = self.create_physical_plan(input, batch_size)?;\n-                let input_schema = input.as_ref().schema().clone();\n-\n-                let sort_expr = expr\n-                    .iter()\n-                    .map(|e| match e {\n-                        Expr::Sort {\n-                            expr,\n-                            asc,\n-                            nulls_first,\n-                        } => self.create_physical_sort_expr(\n-                            expr,\n-                            &input_schema,\n-                            SortOptions {\n-                                descending: !*asc,\n-                                nulls_first: *nulls_first,\n-                            },\n-                        ),\n-                        _ => Err(ExecutionError::ExecutionError(\n-                            \"Sort only accepts sort expressions\".to_string(),\n-                        )),\n-                    })\n-                    .collect::<Result<Vec<_>>>()?;\n-\n-                Ok(Arc::new(SortExec::try_new(\n-                    sort_expr,\n-                    input,\n-                    self.state\n-                        .lock()\n-                        .expect(\"failed to lock mutex\")\n-                        .config\n-                        .concurrency,\n-                )?))\n-            }\n-            LogicalPlan::Limit { input, n, .. } => {\n-                let input = self.create_physical_plan(input, batch_size)?;\n-                let input_schema = input.as_ref().schema().clone();\n-\n-                Ok(Arc::new(GlobalLimitExec::new(\n-                    input_schema.clone(),\n-                    input.partitions()?,\n-                    *n,\n-                    self.state\n-                        .lock()\n-                        .expect(\"failed to lock mutex\")\n-                        .config\n-                        .concurrency,\n-                )))\n-            }\n-            LogicalPlan::Explain {\n-                verbose,\n-                plan,\n-                stringified_plans,\n-                schema,\n-            } => {\n-                let input = self.create_physical_plan(plan, batch_size)?;\n-\n-                let mut stringified_plans = stringified_plans\n-                    .iter()\n-                    .filter(|s| s.should_display(*verbose))\n-                    .map(|s| s.clone())\n-                    .collect::<Vec<_>>();\n-\n-                // add in the physical plan if requested\n-                if *verbose {\n-                    stringified_plans.push(StringifiedPlan::new(\n-                        PlanType::PhysicalPlan,\n-                        format!(\"{:#?}\", input),\n-                    ));\n-                }\n-                let schema_ref = Arc::new((**schema).clone());\n-                Ok(Arc::new(ExplainExec::new(schema_ref, stringified_plans)))\n-            }\n-            _ => Err(ExecutionError::General(\n-                \"Unsupported logical plan variant\".to_string(),\n-            )),\n-        }\n-    }\n-\n-    /// Create a physical expression from a logical expression\n-    pub fn create_physical_expr(\n-        &self,\n-        e: &Expr,\n-        input_schema: &Schema,\n-    ) -> Result<Arc<dyn PhysicalExpr>> {\n-        match e {\n-            Expr::Alias(expr, ..) => Ok(self.create_physical_expr(expr, input_schema)?),\n-            Expr::Column(name) => {\n-                // check that name exists\n-                input_schema.field_with_name(&name)?;\n-                Ok(Arc::new(Column::new(name)))\n-            }\n-            Expr::Literal(value) => Ok(Arc::new(Literal::new(value.clone()))),\n-            Expr::BinaryExpr { left, op, right } => Ok(Arc::new(BinaryExpr::new(\n-                self.create_physical_expr(left, input_schema)?,\n-                op.clone(),\n-                self.create_physical_expr(right, input_schema)?,\n-            ))),\n-            Expr::Cast { expr, data_type } => Ok(Arc::new(CastExpr::try_new(\n-                self.create_physical_expr(expr, input_schema)?,\n-                input_schema,\n-                data_type.clone(),\n-            )?)),\n-            Expr::ScalarFunction {\n-                name,\n-                args,\n-                return_type,\n-            } => match &self\n-                .state\n-                .lock()\n-                .expect(\"failed to lock mutex\")\n-                .scalar_functions\n-                .lock()\n-                .expect(\"failed to lock mutex\")\n-                .get(name)\n-            {\n-                Some(f) => {\n-                    let mut physical_args = vec![];\n-                    for e in args {\n-                        physical_args.push(self.create_physical_expr(e, input_schema)?);\n-                    }\n-                    Ok(Arc::new(ScalarFunctionExpr::new(\n-                        name,\n-                        Box::new(f.fun.clone()),\n-                        physical_args,\n-                        return_type,\n-                    )))\n-                }\n-                _ => Err(ExecutionError::General(format!(\n-                    \"Invalid scalar function '{:?}'\",\n-                    name\n-                ))),\n-            },\n-            other => Err(ExecutionError::NotImplemented(format!(\n-                \"Physical plan does not support logical expression {:?}\",\n-                other\n-            ))),\n-        }\n-    }\n-\n-    /// Create an aggregate expression from a logical expression\n-    pub fn create_aggregate_expr(\n-        &self,\n-        e: &Expr,\n-        input_schema: &Schema,\n-    ) -> Result<Arc<dyn AggregateExpr>> {\n-        match e {\n-            Expr::AggregateFunction { name, args, .. } => {\n-                match name.to_lowercase().as_ref() {\n-                    \"sum\" => Ok(Arc::new(Sum::new(\n-                        self.create_physical_expr(&args[0], input_schema)?,\n-                    ))),\n-                    \"avg\" => Ok(Arc::new(Avg::new(\n-                        self.create_physical_expr(&args[0], input_schema)?,\n-                    ))),\n-                    \"max\" => Ok(Arc::new(Max::new(\n-                        self.create_physical_expr(&args[0], input_schema)?,\n-                    ))),\n-                    \"min\" => Ok(Arc::new(Min::new(\n-                        self.create_physical_expr(&args[0], input_schema)?,\n-                    ))),\n-                    \"count\" => Ok(Arc::new(Count::new(\n-                        self.create_physical_expr(&args[0], input_schema)?,\n-                    ))),\n-                    other => Err(ExecutionError::NotImplemented(format!(\n-                        \"Unsupported aggregate function '{}'\",\n-                        other\n-                    ))),\n-                }\n-            }\n-            other => Err(ExecutionError::General(format!(\n-                \"Invalid aggregate expression '{:?}'\",\n-                other\n-            ))),\n-        }\n-    }\n-\n-    /// Create an aggregate expression from a logical expression\n-    pub fn create_physical_sort_expr(\n-        &self,\n-        e: &Expr,\n-        input_schema: &Schema,\n-        options: SortOptions,\n-    ) -> Result<PhysicalSortExpr> {\n-        Ok(PhysicalSortExpr {\n-            expr: self.create_physical_expr(e, input_schema)?,\n-            options: options,\n-        })\n+        let planner: Arc<dyn PhysicalPlanner> = match self.config().physical_planner {\n+            Some(planner) => planner,\n+            None => Arc::new(PhysicalPlannerImpl::default()),\n\nReview comment:\n       Maybe as part of a future PR, this could be called `DefaultPhysicalPlanner` to hint more strongly that one can replace it with another. I'll throw up a PR proposing that change\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-17T12:05:56.280+0000",
                    "updated": "2020-08-17T12:05:56.280+0000",
                    "started": "2020-08-17T12:05:56.280+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471461",
                    "issueId": "13322942"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322942/worklog/471465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #7975:\nURL: https://github.com/apache/arrow/pull/7975#discussion_r471437170\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -373,363 +355,12 @@ impl ExecutionContext {\n     pub fn create_physical_plan(\n         &self,\n         logical_plan: &LogicalPlan,\n-        batch_size: usize,\n     ) -> Result<Arc<dyn ExecutionPlan>> {\n-        match logical_plan {\n-            LogicalPlan::TableScan {\n-                table_name,\n-                projection,\n-                ..\n-            } => match self\n-                .state\n-                .lock()\n-                .expect(\"failed to lock mutex\")\n-                .datasources\n-                .lock()\n-                .expect(\"failed to lock mutex\")\n-                .get(table_name)\n-            {\n-                Some(provider) => {\n-                    let partitions = provider.scan(projection, batch_size)?;\n-                    if partitions.is_empty() {\n-                        Err(ExecutionError::General(\n-                            \"Table provider returned no partitions\".to_string(),\n-                        ))\n-                    } else {\n-                        let schema = match projection {\n-                            None => provider.schema().clone(),\n-                            Some(p) => Arc::new(Schema::new(\n-                                p.iter()\n-                                    .map(|i| provider.schema().field(*i).clone())\n-                                    .collect(),\n-                            )),\n-                        };\n-\n-                        let exec = DatasourceExec::new(schema, partitions.clone());\n-                        Ok(Arc::new(exec))\n-                    }\n-                }\n-                _ => Err(ExecutionError::General(format!(\n-                    \"No table named {}\",\n-                    table_name\n-                ))),\n-            },\n-            LogicalPlan::InMemoryScan {\n-                data,\n-                projection,\n-                projected_schema,\n-                ..\n-            } => Ok(Arc::new(MemoryExec::try_new(\n-                data,\n-                Arc::new(projected_schema.as_ref().to_owned()),\n-                projection.to_owned(),\n-            )?)),\n-            LogicalPlan::CsvScan {\n-                path,\n-                schema,\n-                has_header,\n-                delimiter,\n-                projection,\n-                ..\n-            } => Ok(Arc::new(CsvExec::try_new(\n-                path,\n-                CsvReadOptions::new()\n-                    .schema(schema.as_ref())\n-                    .delimiter_option(*delimiter)\n-                    .has_header(*has_header),\n-                projection.to_owned(),\n-                batch_size,\n-            )?)),\n-            LogicalPlan::ParquetScan {\n-                path, projection, ..\n-            } => Ok(Arc::new(ParquetExec::try_new(\n-                path,\n-                projection.to_owned(),\n-                batch_size,\n-            )?)),\n-            LogicalPlan::Projection { input, expr, .. } => {\n-                let input = self.create_physical_plan(input, batch_size)?;\n-                let input_schema = input.as_ref().schema().clone();\n-                let runtime_expr = expr\n-                    .iter()\n-                    .map(|e| {\n-                        tuple_err((\n-                            self.create_physical_expr(e, &input_schema),\n-                            e.name(&input_schema),\n-                        ))\n-                    })\n-                    .collect::<Result<Vec<_>>>()?;\n-                Ok(Arc::new(ProjectionExec::try_new(runtime_expr, input)?))\n-            }\n-            LogicalPlan::Aggregate {\n-                input,\n-                group_expr,\n-                aggr_expr,\n-                ..\n-            } => {\n-                // Initially need to perform the aggregate and then merge the partitions\n-                let input = self.create_physical_plan(input, batch_size)?;\n-                let input_schema = input.as_ref().schema().clone();\n-\n-                let groups = group_expr\n-                    .iter()\n-                    .map(|e| {\n-                        tuple_err((\n-                            self.create_physical_expr(e, &input_schema),\n-                            e.name(&input_schema),\n-                        ))\n-                    })\n-                    .collect::<Result<Vec<_>>>()?;\n-                let aggregates = aggr_expr\n-                    .iter()\n-                    .map(|e| {\n-                        tuple_err((\n-                            self.create_aggregate_expr(e, &input_schema),\n-                            e.name(&input_schema),\n-                        ))\n-                    })\n-                    .collect::<Result<Vec<_>>>()?;\n-\n-                let initial_aggr = HashAggregateExec::try_new(\n-                    groups.clone(),\n-                    aggregates.clone(),\n-                    input,\n-                )?;\n-\n-                let schema = initial_aggr.schema();\n-                let partitions = initial_aggr.partitions()?;\n-\n-                if partitions.len() == 1 {\n-                    return Ok(Arc::new(initial_aggr));\n-                }\n-\n-                let merge = Arc::new(MergeExec::new(\n-                    schema.clone(),\n-                    partitions,\n-                    self.state\n-                        .lock()\n-                        .expect(\"failed to lock mutex\")\n-                        .config\n-                        .concurrency,\n-                ));\n-\n-                // construct the expressions for the final aggregation\n-                let (final_group, final_aggr) = initial_aggr.make_final_expr(\n-                    groups.iter().map(|x| x.1.clone()).collect(),\n-                    aggregates.iter().map(|x| x.1.clone()).collect(),\n-                );\n-\n-                // construct a second aggregation, keeping the final column name equal to the first aggregation\n-                // and the expressions corresponding to the respective aggregate\n-                Ok(Arc::new(HashAggregateExec::try_new(\n-                    final_group\n-                        .iter()\n-                        .enumerate()\n-                        .map(|(i, expr)| (expr.clone(), groups[i].1.clone()))\n-                        .collect(),\n-                    final_aggr\n-                        .iter()\n-                        .enumerate()\n-                        .map(|(i, expr)| (expr.clone(), aggregates[i].1.clone()))\n-                        .collect(),\n-                    merge,\n-                )?))\n-            }\n-            LogicalPlan::Selection { input, expr, .. } => {\n-                let input = self.create_physical_plan(input, batch_size)?;\n-                let input_schema = input.as_ref().schema().clone();\n-                let runtime_expr = self.create_physical_expr(expr, &input_schema)?;\n-                Ok(Arc::new(SelectionExec::try_new(runtime_expr, input)?))\n-            }\n-            LogicalPlan::Sort { expr, input, .. } => {\n-                let input = self.create_physical_plan(input, batch_size)?;\n-                let input_schema = input.as_ref().schema().clone();\n-\n-                let sort_expr = expr\n-                    .iter()\n-                    .map(|e| match e {\n-                        Expr::Sort {\n-                            expr,\n-                            asc,\n-                            nulls_first,\n-                        } => self.create_physical_sort_expr(\n-                            expr,\n-                            &input_schema,\n-                            SortOptions {\n-                                descending: !*asc,\n-                                nulls_first: *nulls_first,\n-                            },\n-                        ),\n-                        _ => Err(ExecutionError::ExecutionError(\n-                            \"Sort only accepts sort expressions\".to_string(),\n-                        )),\n-                    })\n-                    .collect::<Result<Vec<_>>>()?;\n-\n-                Ok(Arc::new(SortExec::try_new(\n-                    sort_expr,\n-                    input,\n-                    self.state\n-                        .lock()\n-                        .expect(\"failed to lock mutex\")\n-                        .config\n-                        .concurrency,\n-                )?))\n-            }\n-            LogicalPlan::Limit { input, n, .. } => {\n-                let input = self.create_physical_plan(input, batch_size)?;\n-                let input_schema = input.as_ref().schema().clone();\n-\n-                Ok(Arc::new(GlobalLimitExec::new(\n-                    input_schema.clone(),\n-                    input.partitions()?,\n-                    *n,\n-                    self.state\n-                        .lock()\n-                        .expect(\"failed to lock mutex\")\n-                        .config\n-                        .concurrency,\n-                )))\n-            }\n-            LogicalPlan::Explain {\n-                verbose,\n-                plan,\n-                stringified_plans,\n-                schema,\n-            } => {\n-                let input = self.create_physical_plan(plan, batch_size)?;\n-\n-                let mut stringified_plans = stringified_plans\n-                    .iter()\n-                    .filter(|s| s.should_display(*verbose))\n-                    .map(|s| s.clone())\n-                    .collect::<Vec<_>>();\n-\n-                // add in the physical plan if requested\n-                if *verbose {\n-                    stringified_plans.push(StringifiedPlan::new(\n-                        PlanType::PhysicalPlan,\n-                        format!(\"{:#?}\", input),\n-                    ));\n-                }\n-                let schema_ref = Arc::new((**schema).clone());\n-                Ok(Arc::new(ExplainExec::new(schema_ref, stringified_plans)))\n-            }\n-            _ => Err(ExecutionError::General(\n-                \"Unsupported logical plan variant\".to_string(),\n-            )),\n-        }\n-    }\n-\n-    /// Create a physical expression from a logical expression\n-    pub fn create_physical_expr(\n-        &self,\n-        e: &Expr,\n-        input_schema: &Schema,\n-    ) -> Result<Arc<dyn PhysicalExpr>> {\n-        match e {\n-            Expr::Alias(expr, ..) => Ok(self.create_physical_expr(expr, input_schema)?),\n-            Expr::Column(name) => {\n-                // check that name exists\n-                input_schema.field_with_name(&name)?;\n-                Ok(Arc::new(Column::new(name)))\n-            }\n-            Expr::Literal(value) => Ok(Arc::new(Literal::new(value.clone()))),\n-            Expr::BinaryExpr { left, op, right } => Ok(Arc::new(BinaryExpr::new(\n-                self.create_physical_expr(left, input_schema)?,\n-                op.clone(),\n-                self.create_physical_expr(right, input_schema)?,\n-            ))),\n-            Expr::Cast { expr, data_type } => Ok(Arc::new(CastExpr::try_new(\n-                self.create_physical_expr(expr, input_schema)?,\n-                input_schema,\n-                data_type.clone(),\n-            )?)),\n-            Expr::ScalarFunction {\n-                name,\n-                args,\n-                return_type,\n-            } => match &self\n-                .state\n-                .lock()\n-                .expect(\"failed to lock mutex\")\n-                .scalar_functions\n-                .lock()\n-                .expect(\"failed to lock mutex\")\n-                .get(name)\n-            {\n-                Some(f) => {\n-                    let mut physical_args = vec![];\n-                    for e in args {\n-                        physical_args.push(self.create_physical_expr(e, input_schema)?);\n-                    }\n-                    Ok(Arc::new(ScalarFunctionExpr::new(\n-                        name,\n-                        Box::new(f.fun.clone()),\n-                        physical_args,\n-                        return_type,\n-                    )))\n-                }\n-                _ => Err(ExecutionError::General(format!(\n-                    \"Invalid scalar function '{:?}'\",\n-                    name\n-                ))),\n-            },\n-            other => Err(ExecutionError::NotImplemented(format!(\n-                \"Physical plan does not support logical expression {:?}\",\n-                other\n-            ))),\n-        }\n-    }\n-\n-    /// Create an aggregate expression from a logical expression\n-    pub fn create_aggregate_expr(\n-        &self,\n-        e: &Expr,\n-        input_schema: &Schema,\n-    ) -> Result<Arc<dyn AggregateExpr>> {\n-        match e {\n-            Expr::AggregateFunction { name, args, .. } => {\n-                match name.to_lowercase().as_ref() {\n-                    \"sum\" => Ok(Arc::new(Sum::new(\n-                        self.create_physical_expr(&args[0], input_schema)?,\n-                    ))),\n-                    \"avg\" => Ok(Arc::new(Avg::new(\n-                        self.create_physical_expr(&args[0], input_schema)?,\n-                    ))),\n-                    \"max\" => Ok(Arc::new(Max::new(\n-                        self.create_physical_expr(&args[0], input_schema)?,\n-                    ))),\n-                    \"min\" => Ok(Arc::new(Min::new(\n-                        self.create_physical_expr(&args[0], input_schema)?,\n-                    ))),\n-                    \"count\" => Ok(Arc::new(Count::new(\n-                        self.create_physical_expr(&args[0], input_schema)?,\n-                    ))),\n-                    other => Err(ExecutionError::NotImplemented(format!(\n-                        \"Unsupported aggregate function '{}'\",\n-                        other\n-                    ))),\n-                }\n-            }\n-            other => Err(ExecutionError::General(format!(\n-                \"Invalid aggregate expression '{:?}'\",\n-                other\n-            ))),\n-        }\n-    }\n-\n-    /// Create an aggregate expression from a logical expression\n-    pub fn create_physical_sort_expr(\n-        &self,\n-        e: &Expr,\n-        input_schema: &Schema,\n-        options: SortOptions,\n-    ) -> Result<PhysicalSortExpr> {\n-        Ok(PhysicalSortExpr {\n-            expr: self.create_physical_expr(e, input_schema)?,\n-            options: options,\n-        })\n+        let planner: Arc<dyn PhysicalPlanner> = match self.config().physical_planner {\n+            Some(planner) => planner,\n+            None => Arc::new(PhysicalPlannerImpl::default()),\n\nReview comment:\n       https://github.com/apache/arrow/pull/7980\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-17T12:14:30.657+0000",
                    "updated": "2020-08-17T12:14:30.657+0000",
                    "started": "2020-08-17T12:14:30.656+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471465",
                    "issueId": "13322942"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@10342eba[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@743e2d06[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33546557[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@36072826[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6155d00f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4507d890[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55e963ba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5aa03739[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15ba41ca[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6e82c8b5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7068826c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2b2a6aa7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Aug 16 18:51:27 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-08-16T18:51:27.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9758/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-08-16T15:30:48.000+0000",
        "updated": "2020-08-17T12:14:31.000+0000",
        "timeoriginalestimate": null,
        "description": "I would like the ability to extend DataFusion by providing my own:\r\n * Logical plan optimization rules\r\n * Physical query planner for converting logical plan to physical plan\r\n\r\nLater, I would also like to be able to provide physical plan optimization rules but we don't have a physical optimizer yet.\r\n\r\nThese changes would allow people to extend DataFusion easily without implementing their own competing DataFrame APIs.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Implement extension API for DataFusion",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322942/comment/17178508",
                    "id": "17178508",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "[~jhorstmann] [~alamb] [~pauldix] I believe this is of interest to you. I will be working on it soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-08-16T15:31:45.787+0000",
                    "updated": "2020-08-16T15:31:45.787+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322942/comment/17178510",
                    "id": "17178510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Thanks [~andygrove] -- something else I have been thinking about is \"A way to add my own LogicalPlan node\" which would require a bit of API design (probably a LogicalPlanNode trait rather than a LogicalPlanNode enum) but the items in this ticket sounds good too",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-08-16T15:34:28.409+0000",
                    "updated": "2020-08-16T15:34:28.409+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322942/comment/17178565",
                    "id": "17178565",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 7975\n[https://github.com/apache/arrow/pull/7975]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-08-16T18:51:27.977+0000",
                    "updated": "2020-08-16T18:51:27.977+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ht7s:",
        "customfield_12314139": null
    }
}