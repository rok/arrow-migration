{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13481769",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481769",
    "key": "ARROW-17750",
    "fields": {
        "parent": {
            "id": "13448791",
            "key": "ARROW-16771",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13448791",
            "fields": {
                "summary": "[Format][C++][Go] Adding Run-Length encoding to Arrow",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                    "id": "3",
                    "description": "A task that needs to be done.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                    "name": "Task",
                    "subtask": false,
                    "avatarId": 21148
                }
            }
        },
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17750/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481769/worklog/809257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on PR #14146:\nURL: https://github.com/apache/arrow/pull/14146#issuecomment-1248494512\n\n   CC @zagto \n\n\n",
                    "created": "2022-09-15T19:06:27.906+0000",
                    "updated": "2022-09-15T19:06:27.906+0000",
                    "started": "2022-09-15T19:06:27.905+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809257",
                    "issueId": "13481769"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481769/worklog/809310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14146:\nURL: https://github.com/apache/arrow/pull/14146#issuecomment-1248592401\n\n   https://issues.apache.org/jira/browse/ARROW-17750\n\n\n",
                    "created": "2022-09-15T20:36:39.111+0000",
                    "updated": "2022-09-15T20:36:39.111+0000",
                    "started": "2022-09-15T20:36:39.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809310",
                    "issueId": "13481769"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481769/worklog/811355",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14146:\nURL: https://github.com/apache/arrow/pull/14146#discussion_r977973894\n\n\n##########\ngo/arrow/array/concat.go:\n##########\n@@ -42,7 +43,12 @@ func Concatenate(arrs []arrow.Array, mem memory.Allocator) (result arrow.Array,\n \n \tdefer func() {\n \t\tif pErr := recover(); pErr != nil {\n-\t\t\terr = fmt.Errorf(\"arrow/concat: unknown error: %v\", pErr)\n+\t\t\tswitch e := pErr.(type) {\n+\t\t\tcase error:\n\nReview Comment:\n   I don't really know go but why is it important to distinguish between these two error types?  Adding `unknown error` doesn't seem to contribute too much to a user's understanding of the error.\n\n\n\n##########\ngo/arrow/array/encoded.go:\n##########\n@@ -0,0 +1,304 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/v10/arrow\"\n+\t\"github.com/apache/arrow/go/v10/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/v10/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v10/arrow/rle\"\n+\t\"github.com/goccy/go-json\"\n+)\n+\n+// RunLengthEncoded represents an array containing two children:\n+// an array of int32 values defining the ends of each run of values\n+// and an array of values\n+type RunLengthEncoded struct {\n+\tarray\n+\n+\trunEnds []int32\n+\tends    arrow.Array\n+\tvalues  arrow.Array\n+}\n+\n+func NewRunLengthEncodedArray(runEnds, values arrow.Array, logicalLength, offset int) *RunLengthEncoded {\n+\tdata := NewData(arrow.RunLengthEncodedOf(values.DataType()), logicalLength,\n+\t\t[]*memory.Buffer{nil}, []arrow.ArrayData{runEnds.Data(), values.Data()}, 0, offset)\n+\tdefer data.Release()\n+\treturn NewRunLengthEncodedData(data)\n+}\n+\n+func NewRunLengthEncodedData(data arrow.ArrayData) *RunLengthEncoded {\n+\tr := &RunLengthEncoded{}\n+\tr.refCount = 1\n+\tr.setData(data.(*Data))\n+\treturn r\n+}\n+\n+func (r *RunLengthEncoded) RunEnds() []int32        { return r.runEnds }\n+func (r *RunLengthEncoded) Values() arrow.Array     { return r.values }\n+func (r *RunLengthEncoded) RunEndsArr() arrow.Array { return r.ends }\n+\n+func (r *RunLengthEncoded) Retain() {\n+\tr.array.Retain()\n+\tr.values.Retain()\n+\tr.ends.Retain()\n+}\n+\n+func (r *RunLengthEncoded) Release() {\n+\tr.array.Release()\n+\tr.values.Release()\n+\tr.ends.Release()\n+}\n+\n+func (r *RunLengthEncoded) setData(data *Data) {\n+\tif len(data.childData) != 2 {\n+\t\tpanic(fmt.Errorf(\"%w: arrow/array: RLE array must have exactly 2 children\", arrow.ErrInvalid))\n+\t}\n+\tif data.childData[0].DataType().ID() != arrow.INT32 {\n+\t\tpanic(fmt.Errorf(\"%w: arrow/array: run ends array must be int32\", arrow.ErrInvalid))\n+\t}\n+\tif data.childData[0].NullN() > 0 {\n+\t\tpanic(fmt.Errorf(\"%w: arrow/array: run ends array cannot contain nulls\", arrow.ErrInvalid))\n+\t}\n+\n+\tdebug.Assert(data.dtype.ID() == arrow.RUN_LENGTH_ENCODED, \"invalid type for RunLengthEncoded\")\n+\tr.array.setData(data)\n+\n+\tif r.data.childData[0].Buffers()[1] != nil {\n+\t\tr.runEnds = arrow.Int32Traits.CastFromBytes(r.data.childData[0].Buffers()[1].Bytes())\n+\t}\n+\tr.ends = MakeFromData(r.data.childData[0])\n+\tr.values = MakeFromData(r.data.childData[1])\n+}\n+\n+func (r *RunLengthEncoded) GetPhysicalOffset() int {\n+\treturn rle.FindPhysicalOffset(r.runEnds, r.data.offset)\n+}\n+\n+func (r *RunLengthEncoded) GetPhysicalLength() int {\n+\tif r.data.length == 0 {\n+\t\treturn 0\n+\t}\n+\n+\tphysicalOffset := r.GetPhysicalOffset()\n+\treturn rle.FindPhysicalOffset(r.runEnds[physicalOffset:],\n+\t\tr.data.offset+r.data.length-1) + 1\n+}\n+\n+func (r *RunLengthEncoded) String() string {\n+\tvar buf bytes.Buffer\n+\tbuf.WriteByte('[')\n+\tfor i, runEnd := range r.runEnds {\n+\t\tif i != 0 {\n+\t\t\tbuf.WriteByte(',')\n+\t\t}\n+\n+\t\tfmt.Fprintf(&buf, \"{%d -> %v}\", runEnd, r.values.(arraymarshal).getOneForMarshal(i))\n+\t}\n+\tbuf.WriteByte(']')\n+\treturn buf.String()\n+}\n+\n+func (r *RunLengthEncoded) getOneForMarshal(i int) interface{} {\n+\treturn [2]interface{}{r.runEnds[i], r.values.(arraymarshal).getOneForMarshal(i)}\n+}\n+\n+func (r *RunLengthEncoded) MarshalJSON() ([]byte, error) {\n+\tvar buf bytes.Buffer\n+\tenc := json.NewEncoder(&buf)\n+\tbuf.WriteByte('[')\n+\n+\tfor i := range r.runEnds {\n+\t\tif i != 0 {\n+\t\t\tbuf.WriteByte(',')\n+\t\t}\n+\t\tif err := enc.Encode(r.getOneForMarshal(i)); err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\tbuf.WriteByte(']')\n+\treturn buf.Bytes(), nil\n+}\n+\n+func arrayRunLengthEncodedEqual(l, r *RunLengthEncoded) bool {\n+\t// types were already checked before getting here, so we know\n+\t// the encoded types are equal\n+\tmr := rle.NewMergedRuns([2]arrow.Array{l, r})\n+\tfor mr.Next() {\n+\t\tlIndex := mr.IndexIntoArray(0)\n+\t\trIndex := mr.IndexIntoArray(1)\n+\t\tif !SliceEqual(l.values, lIndex, lIndex+1, r.values, rIndex, rIndex+1) {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn true\n+}\n+\n+func arrayRunLengthEncodedApproxEqual(l, r *RunLengthEncoded, opt equalOption) bool {\n+\t// types were already checked before getting here, so we know\n+\t// the encoded types are equal\n+\tmr := rle.NewMergedRuns([2]arrow.Array{l, r})\n+\tfor mr.Next() {\n+\t\tlIndex := mr.IndexIntoArray(0)\n+\t\trIndex := mr.IndexIntoArray(1)\n+\t\tif !sliceApproxEqual(l.values, lIndex, lIndex+1, r.values, rIndex, rIndex+1, opt) {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn true\n+\n+}\n+\n+type RunLengthEncodedBuilder struct {\n+\tbuilder\n+\n+\tdt      arrow.DataType\n+\trunEnds *Int32Builder\n+\tvalues  Builder\n+}\n+\n+func NewRunLengthEncodedBuilder(mem memory.Allocator, typ arrow.DataType) *RunLengthEncodedBuilder {\n+\treturn &RunLengthEncodedBuilder{\n+\t\tbuilder: builder{refCount: 1, mem: mem},\n+\t\tdt:      arrow.RunLengthEncodedOf(typ),\n+\t\trunEnds: NewInt32Builder(mem),\n+\t\tvalues:  NewBuilder(mem, typ),\n+\t}\n+}\n+\n+func (b *RunLengthEncodedBuilder) Type() arrow.DataType {\n+\treturn b.dt\n+}\n+\n+func (b *RunLengthEncodedBuilder) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&b.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&b.refCount, -1) == 0 {\n+\t\tb.values.Release()\n+\t\tb.runEnds.Release()\n+\t}\n+}\n+\n+func (b *RunLengthEncodedBuilder) addLength(n uint32) {\n+\tif b.length+int(n) > math.MaxInt32 {\n+\t\tpanic(fmt.Errorf(\"%w: run-length encoded array length must fit in a 32-bit signed integer\", arrow.ErrInvalid))\n+\t}\n+\n+\tb.length += int(n)\n+}\n+\n+func (b *RunLengthEncodedBuilder) finishRun() {\n+\tif b.length == 0 {\n+\t\treturn\n+\t}\n+\n+\tb.runEnds.Append(int32(b.length))\n+}\n+\n+func (b *RunLengthEncodedBuilder) ValueBuilder() Builder { return b.values }\n+func (b *RunLengthEncodedBuilder) Append(n uint32) {\n+\tb.finishRun()\n+\tb.addLength(n)\n+}\n+func (b *RunLengthEncodedBuilder) ContinueRun(n uint32) {\n+\tb.addLength(n)\n+}\n+func (b *RunLengthEncodedBuilder) AppendNull() {\n+\tb.finishRun()\n+\tb.values.AppendNull()\n+\tb.addLength(1)\n+}\n+\n+func (b *RunLengthEncodedBuilder) NullN() int {\n+\treturn UnknownNullCount\n+}\n+\n+func (b *RunLengthEncodedBuilder) AppendEmptyValue() {\n+\tb.AppendNull()\n+}\n+\n+func (b *RunLengthEncodedBuilder) Reserve(n int) {\n+\tb.values.Reserve(n)\n+\tb.runEnds.Reserve(n)\n+}\n+\n+func (b *RunLengthEncodedBuilder) Resize(n int) {\n+\tb.values.Resize(n)\n+\tb.runEnds.Resize(n)\n+}\n\nReview Comment:\n   Do you not need to resize/reserve the validity map?\n\n\n\n##########\ngo/arrow/array/concat_test.go:\n##########\n@@ -568,3 +569,59 @@ func TestConcatDictionaryNullSlots(t *testing.T) {\n \n \tassert.Truef(t, array.Equal(actual, expected), \"got: %s, expected: %s\", actual, expected)\n }\n+\n+func TestConcatRunLengthEncoded(t *testing.T) {\n\nReview Comment:\n   Do you want any tests for the overflow cases?\n\n\n\n##########\ngo/arrow/rle/rle_utils_test.go:\n##########\n@@ -0,0 +1,144 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package rle_test\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/v10/arrow\"\n+\t\"github.com/apache/arrow/go/v10/arrow/array\"\n+\t\"github.com/apache/arrow/go/v10/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v10/arrow/rle\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+func TestFindPhysicalOffset(t *testing.T) {\n+\ttests := []struct {\n+\t\tvals []int32\n+\t\tfind int\n+\t\texp  int\n+\t}{\n+\t\t{[]int32{1}, 0, 0},\n+\t\t{[]int32{1, 2, 3}, 0, 0},\n+\t\t{[]int32{1, 2, 3}, 1, 1},\n+\t\t{[]int32{1, 2, 3}, 2, 2},\n+\t\t{[]int32{2, 3, 4}, 0, 0},\n+\t\t{[]int32{2, 3, 4}, 1, 0},\n+\t\t{[]int32{2, 3, 4}, 2, 1},\n+\t\t{[]int32{2, 3, 4}, 3, 2},\n+\t\t{[]int32{2, 4, 6}, 3, 1},\n+\t\t{[]int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 1000, 1005, 1015, 1020, 1025, 1050}, 1000, 10},\n+\t\t// out-of-range logical offset should return len(vals)\n+\t\t{[]int32{2, 4, 6}, 6, 3},\n+\t\t{[]int32{2, 4, 6}, 10000, 3},\n\nReview Comment:\n   What about out-of-range in the negative direction?  Error?\n\n\n\n##########\ngo/arrow/array/array.go:\n##########\n@@ -175,8 +175,8 @@ func init() {\n \t\tarrow.LARGE_STRING:            func(data arrow.ArrayData) arrow.Array { return NewLargeStringData(data) },\n \t\tarrow.LARGE_BINARY:            func(data arrow.ArrayData) arrow.Array { return NewLargeBinaryData(data) },\n \t\tarrow.LARGE_LIST:              func(data arrow.ArrayData) arrow.Array { return NewLargeListData(data) },\n-\t\tarrow.INTERVAL:                func(data arrow.ArrayData) arrow.Array { return NewIntervalData(data) },\n\nReview Comment:\n   I assume getting rid of interval is an intentional unrelated change and not a mistake?\n\n\n\n##########\ngo/arrow/array/concat.go:\n##########\n@@ -512,6 +518,78 @@ func concat(data []arrow.ArrayData, mem memory.Allocator) (arrow.ArrayData, erro\n \t\tif err != nil {\n \t\t\treturn nil, err\n \t\t}\n+\tcase *arrow.RunLengthEncodedType:\n+\t\tphysicalLength, overflow := int32(0), false\n+\t\t// we can't use gatherChildren because the Offset and Len of\n+\t\t// data doesn't correspond to the physical length or offset\n+\t\truns := make([]arrow.ArrayData, len(data))\n+\t\tvalues := make([]arrow.ArrayData, len(data))\n+\t\tfor i, d := range data {\n+\t\t\tplen := rle.GetPhysicalLength(d)\n+\t\t\toff := rle.GetPhysicalOffset(d)\n+\n+\t\t\truns[i] = NewSliceData(d.Children()[0], int64(off), int64(off+plen))\n+\t\t\tdefer runs[i].Release()\n+\t\t\tvalues[i] = NewSliceData(d.Children()[1], int64(off), int64(off+plen))\n+\t\t\tdefer values[i].Release()\n+\n+\t\t\tphysicalLength, overflow = addOvf32(physicalLength, int32(plen))\n+\t\t\tif overflow {\n+\t\t\t\treturn nil, fmt.Errorf(\"%w: run length encoded array length must fit into a 32-bit signed integer\",\n\nReview Comment:\n   Does go use 64-bit lengths for arrays?\n\n\n\n",
                    "created": "2022-09-22T18:56:10.457+0000",
                    "updated": "2022-09-22T18:56:10.457+0000",
                    "started": "2022-09-22T18:56:10.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811355",
                    "issueId": "13481769"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481769/worklog/811639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #14146:\nURL: https://github.com/apache/arrow/pull/14146#discussion_r978837630\n\n\n##########\ngo/arrow/array/concat.go:\n##########\n@@ -512,6 +518,78 @@ func concat(data []arrow.ArrayData, mem memory.Allocator) (arrow.ArrayData, erro\n \t\tif err != nil {\n \t\t\treturn nil, err\n \t\t}\n+\tcase *arrow.RunLengthEncodedType:\n+\t\tphysicalLength, overflow := int32(0), false\n+\t\t// we can't use gatherChildren because the Offset and Len of\n+\t\t// data doesn't correspond to the physical length or offset\n+\t\truns := make([]arrow.ArrayData, len(data))\n+\t\tvalues := make([]arrow.ArrayData, len(data))\n+\t\tfor i, d := range data {\n+\t\t\tplen := rle.GetPhysicalLength(d)\n+\t\t\toff := rle.GetPhysicalOffset(d)\n+\n+\t\t\truns[i] = NewSliceData(d.Children()[0], int64(off), int64(off+plen))\n+\t\t\tdefer runs[i].Release()\n+\t\t\tvalues[i] = NewSliceData(d.Children()[1], int64(off), int64(off+plen))\n+\t\t\tdefer values[i].Release()\n+\n+\t\t\tphysicalLength, overflow = addOvf32(physicalLength, int32(plen))\n+\t\t\tif overflow {\n+\t\t\t\treturn nil, fmt.Errorf(\"%w: run length encoded array length must fit into a 32-bit signed integer\",\n\nReview Comment:\n   The Go impl uses `int` which will be 32-bit on 32-bit systems and 64-bit on 64-bit systems.\n\n\n\n",
                    "created": "2022-09-23T16:05:27.370+0000",
                    "updated": "2022-09-23T16:05:27.370+0000",
                    "started": "2022-09-23T16:05:27.369+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811639",
                    "issueId": "13481769"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481769/worklog/811640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #14146:\nURL: https://github.com/apache/arrow/pull/14146#discussion_r978837891\n\n\n##########\ngo/arrow/array/concat_test.go:\n##########\n@@ -568,3 +569,59 @@ func TestConcatDictionaryNullSlots(t *testing.T) {\n \n \tassert.Truef(t, array.Equal(actual, expected), \"got: %s, expected: %s\", actual, expected)\n }\n+\n+func TestConcatRunLengthEncoded(t *testing.T) {\n\nReview Comment:\n   That's a good idea, i'll add a test for that\n\n\n\n",
                    "created": "2022-09-23T16:05:47.363+0000",
                    "updated": "2022-09-23T16:05:47.363+0000",
                    "started": "2022-09-23T16:05:47.363+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811640",
                    "issueId": "13481769"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481769/worklog/811641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #14146:\nURL: https://github.com/apache/arrow/pull/14146#discussion_r978838279\n\n\n##########\ngo/arrow/array/encoded.go:\n##########\n@@ -0,0 +1,304 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/v10/arrow\"\n+\t\"github.com/apache/arrow/go/v10/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/v10/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v10/arrow/rle\"\n+\t\"github.com/goccy/go-json\"\n+)\n+\n+// RunLengthEncoded represents an array containing two children:\n+// an array of int32 values defining the ends of each run of values\n+// and an array of values\n+type RunLengthEncoded struct {\n+\tarray\n+\n+\trunEnds []int32\n+\tends    arrow.Array\n+\tvalues  arrow.Array\n+}\n+\n+func NewRunLengthEncodedArray(runEnds, values arrow.Array, logicalLength, offset int) *RunLengthEncoded {\n+\tdata := NewData(arrow.RunLengthEncodedOf(values.DataType()), logicalLength,\n+\t\t[]*memory.Buffer{nil}, []arrow.ArrayData{runEnds.Data(), values.Data()}, 0, offset)\n+\tdefer data.Release()\n+\treturn NewRunLengthEncodedData(data)\n+}\n+\n+func NewRunLengthEncodedData(data arrow.ArrayData) *RunLengthEncoded {\n+\tr := &RunLengthEncoded{}\n+\tr.refCount = 1\n+\tr.setData(data.(*Data))\n+\treturn r\n+}\n+\n+func (r *RunLengthEncoded) RunEnds() []int32        { return r.runEnds }\n+func (r *RunLengthEncoded) Values() arrow.Array     { return r.values }\n+func (r *RunLengthEncoded) RunEndsArr() arrow.Array { return r.ends }\n+\n+func (r *RunLengthEncoded) Retain() {\n+\tr.array.Retain()\n+\tr.values.Retain()\n+\tr.ends.Retain()\n+}\n+\n+func (r *RunLengthEncoded) Release() {\n+\tr.array.Release()\n+\tr.values.Release()\n+\tr.ends.Release()\n+}\n+\n+func (r *RunLengthEncoded) setData(data *Data) {\n+\tif len(data.childData) != 2 {\n+\t\tpanic(fmt.Errorf(\"%w: arrow/array: RLE array must have exactly 2 children\", arrow.ErrInvalid))\n+\t}\n+\tif data.childData[0].DataType().ID() != arrow.INT32 {\n+\t\tpanic(fmt.Errorf(\"%w: arrow/array: run ends array must be int32\", arrow.ErrInvalid))\n+\t}\n+\tif data.childData[0].NullN() > 0 {\n+\t\tpanic(fmt.Errorf(\"%w: arrow/array: run ends array cannot contain nulls\", arrow.ErrInvalid))\n+\t}\n+\n+\tdebug.Assert(data.dtype.ID() == arrow.RUN_LENGTH_ENCODED, \"invalid type for RunLengthEncoded\")\n+\tr.array.setData(data)\n+\n+\tif r.data.childData[0].Buffers()[1] != nil {\n+\t\tr.runEnds = arrow.Int32Traits.CastFromBytes(r.data.childData[0].Buffers()[1].Bytes())\n+\t}\n+\tr.ends = MakeFromData(r.data.childData[0])\n+\tr.values = MakeFromData(r.data.childData[1])\n+}\n+\n+func (r *RunLengthEncoded) GetPhysicalOffset() int {\n+\treturn rle.FindPhysicalOffset(r.runEnds, r.data.offset)\n+}\n+\n+func (r *RunLengthEncoded) GetPhysicalLength() int {\n+\tif r.data.length == 0 {\n+\t\treturn 0\n+\t}\n+\n+\tphysicalOffset := r.GetPhysicalOffset()\n+\treturn rle.FindPhysicalOffset(r.runEnds[physicalOffset:],\n+\t\tr.data.offset+r.data.length-1) + 1\n+}\n+\n+func (r *RunLengthEncoded) String() string {\n+\tvar buf bytes.Buffer\n+\tbuf.WriteByte('[')\n+\tfor i, runEnd := range r.runEnds {\n+\t\tif i != 0 {\n+\t\t\tbuf.WriteByte(',')\n+\t\t}\n+\n+\t\tfmt.Fprintf(&buf, \"{%d -> %v}\", runEnd, r.values.(arraymarshal).getOneForMarshal(i))\n+\t}\n+\tbuf.WriteByte(']')\n+\treturn buf.String()\n+}\n+\n+func (r *RunLengthEncoded) getOneForMarshal(i int) interface{} {\n+\treturn [2]interface{}{r.runEnds[i], r.values.(arraymarshal).getOneForMarshal(i)}\n+}\n+\n+func (r *RunLengthEncoded) MarshalJSON() ([]byte, error) {\n+\tvar buf bytes.Buffer\n+\tenc := json.NewEncoder(&buf)\n+\tbuf.WriteByte('[')\n+\n+\tfor i := range r.runEnds {\n+\t\tif i != 0 {\n+\t\t\tbuf.WriteByte(',')\n+\t\t}\n+\t\tif err := enc.Encode(r.getOneForMarshal(i)); err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\tbuf.WriteByte(']')\n+\treturn buf.Bytes(), nil\n+}\n+\n+func arrayRunLengthEncodedEqual(l, r *RunLengthEncoded) bool {\n+\t// types were already checked before getting here, so we know\n+\t// the encoded types are equal\n+\tmr := rle.NewMergedRuns([2]arrow.Array{l, r})\n+\tfor mr.Next() {\n+\t\tlIndex := mr.IndexIntoArray(0)\n+\t\trIndex := mr.IndexIntoArray(1)\n+\t\tif !SliceEqual(l.values, lIndex, lIndex+1, r.values, rIndex, rIndex+1) {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn true\n+}\n+\n+func arrayRunLengthEncodedApproxEqual(l, r *RunLengthEncoded, opt equalOption) bool {\n+\t// types were already checked before getting here, so we know\n+\t// the encoded types are equal\n+\tmr := rle.NewMergedRuns([2]arrow.Array{l, r})\n+\tfor mr.Next() {\n+\t\tlIndex := mr.IndexIntoArray(0)\n+\t\trIndex := mr.IndexIntoArray(1)\n+\t\tif !sliceApproxEqual(l.values, lIndex, lIndex+1, r.values, rIndex, rIndex+1, opt) {\n+\t\t\treturn false\n+\t\t}\n+\t}\n+\treturn true\n+\n+}\n+\n+type RunLengthEncodedBuilder struct {\n+\tbuilder\n+\n+\tdt      arrow.DataType\n+\trunEnds *Int32Builder\n+\tvalues  Builder\n+}\n+\n+func NewRunLengthEncodedBuilder(mem memory.Allocator, typ arrow.DataType) *RunLengthEncodedBuilder {\n+\treturn &RunLengthEncodedBuilder{\n+\t\tbuilder: builder{refCount: 1, mem: mem},\n+\t\tdt:      arrow.RunLengthEncodedOf(typ),\n+\t\trunEnds: NewInt32Builder(mem),\n+\t\tvalues:  NewBuilder(mem, typ),\n+\t}\n+}\n+\n+func (b *RunLengthEncodedBuilder) Type() arrow.DataType {\n+\treturn b.dt\n+}\n+\n+func (b *RunLengthEncodedBuilder) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&b.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&b.refCount, -1) == 0 {\n+\t\tb.values.Release()\n+\t\tb.runEnds.Release()\n+\t}\n+}\n+\n+func (b *RunLengthEncodedBuilder) addLength(n uint32) {\n+\tif b.length+int(n) > math.MaxInt32 {\n+\t\tpanic(fmt.Errorf(\"%w: run-length encoded array length must fit in a 32-bit signed integer\", arrow.ErrInvalid))\n+\t}\n+\n+\tb.length += int(n)\n+}\n+\n+func (b *RunLengthEncodedBuilder) finishRun() {\n+\tif b.length == 0 {\n+\t\treturn\n+\t}\n+\n+\tb.runEnds.Append(int32(b.length))\n+}\n+\n+func (b *RunLengthEncodedBuilder) ValueBuilder() Builder { return b.values }\n+func (b *RunLengthEncodedBuilder) Append(n uint32) {\n+\tb.finishRun()\n+\tb.addLength(n)\n+}\n+func (b *RunLengthEncodedBuilder) ContinueRun(n uint32) {\n+\tb.addLength(n)\n+}\n+func (b *RunLengthEncodedBuilder) AppendNull() {\n+\tb.finishRun()\n+\tb.values.AppendNull()\n+\tb.addLength(1)\n+}\n+\n+func (b *RunLengthEncodedBuilder) NullN() int {\n+\treturn UnknownNullCount\n+}\n+\n+func (b *RunLengthEncodedBuilder) AppendEmptyValue() {\n+\tb.AppendNull()\n+}\n+\n+func (b *RunLengthEncodedBuilder) Reserve(n int) {\n+\tb.values.Reserve(n)\n+\tb.runEnds.Reserve(n)\n+}\n+\n+func (b *RunLengthEncodedBuilder) Resize(n int) {\n+\tb.values.Resize(n)\n+\tb.runEnds.Resize(n)\n+}\n\nReview Comment:\n   based on the current spec `RunLengthEncoded` arrays have no validity map\n\n\n\n",
                    "created": "2022-09-23T16:06:17.418+0000",
                    "updated": "2022-09-23T16:06:17.418+0000",
                    "started": "2022-09-23T16:06:17.418+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811641",
                    "issueId": "13481769"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481769/worklog/811642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #14146:\nURL: https://github.com/apache/arrow/pull/14146#discussion_r978839261\n\n\n##########\ngo/arrow/array/array.go:\n##########\n@@ -175,8 +175,8 @@ func init() {\n \t\tarrow.LARGE_STRING:            func(data arrow.ArrayData) arrow.Array { return NewLargeStringData(data) },\n \t\tarrow.LARGE_BINARY:            func(data arrow.ArrayData) arrow.Array { return NewLargeBinaryData(data) },\n \t\tarrow.LARGE_LIST:              func(data arrow.ArrayData) arrow.Array { return NewLargeListData(data) },\n-\t\tarrow.INTERVAL:                func(data arrow.ArrayData) arrow.Array { return NewIntervalData(data) },\n\nReview Comment:\n   yes. If you look at `datatype.go` you can see there's a comment there pointing out that `INTERVAL` as an enum value is deprecated in favor of the individual interval enums (`INTERVAL_MONTH_DAY_NANO`, etc...) So adding the new `RUN_LENGTH_ENCODED` type seemed like a good time to clean that out.\n\n\n\n",
                    "created": "2022-09-23T16:07:32.519+0000",
                    "updated": "2022-09-23T16:07:32.519+0000",
                    "started": "2022-09-23T16:07:32.519+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811642",
                    "issueId": "13481769"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481769/worklog/811643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #14146:\nURL: https://github.com/apache/arrow/pull/14146#discussion_r978840313\n\n\n##########\ngo/arrow/rle/rle_utils_test.go:\n##########\n@@ -0,0 +1,144 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package rle_test\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/v10/arrow\"\n+\t\"github.com/apache/arrow/go/v10/arrow/array\"\n+\t\"github.com/apache/arrow/go/v10/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v10/arrow/rle\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+func TestFindPhysicalOffset(t *testing.T) {\n+\ttests := []struct {\n+\t\tvals []int32\n+\t\tfind int\n+\t\texp  int\n+\t}{\n+\t\t{[]int32{1}, 0, 0},\n+\t\t{[]int32{1, 2, 3}, 0, 0},\n+\t\t{[]int32{1, 2, 3}, 1, 1},\n+\t\t{[]int32{1, 2, 3}, 2, 2},\n+\t\t{[]int32{2, 3, 4}, 0, 0},\n+\t\t{[]int32{2, 3, 4}, 1, 0},\n+\t\t{[]int32{2, 3, 4}, 2, 1},\n+\t\t{[]int32{2, 3, 4}, 3, 2},\n+\t\t{[]int32{2, 4, 6}, 3, 1},\n+\t\t{[]int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 1000, 1005, 1015, 1020, 1025, 1050}, 1000, 10},\n+\t\t// out-of-range logical offset should return len(vals)\n+\t\t{[]int32{2, 4, 6}, 6, 3},\n+\t\t{[]int32{2, 4, 6}, 10000, 3},\n\nReview Comment:\n   I'll add a test case for it, I originally just copied these tests over from the C++ draft PR :smile: \n\n\n\n",
                    "created": "2022-09-23T16:08:47.648+0000",
                    "updated": "2022-09-23T16:08:47.648+0000",
                    "started": "2022-09-23T16:08:47.648+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811643",
                    "issueId": "13481769"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481769/worklog/811644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #14146:\nURL: https://github.com/apache/arrow/pull/14146#discussion_r978844604\n\n\n##########\ngo/arrow/array/concat.go:\n##########\n@@ -42,7 +43,12 @@ func Concatenate(arrs []arrow.Array, mem memory.Allocator) (result arrow.Array,\n \n \tdefer func() {\n \t\tif pErr := recover(); pErr != nil {\n-\t\t\terr = fmt.Errorf(\"arrow/concat: unknown error: %v\", pErr)\n+\t\t\tswitch e := pErr.(type) {\n+\t\t\tcase error:\n\nReview Comment:\n   using `%w` wraps the error that was panic'd so that someone receiving the error can use `errors.Is` or `errors.As` if they desire to react differently based on the type of the error (such as `arrow.ErrInvalid` vs `arrow.ErrIndex` vs `arrow.ErrNotImplemented` etc...) basically it creates an error chain\r\n   \r\n   In the case of the `\"unknown error\"` it means that we had a panic with a string rather than a proper error instance. Though I agree that the text \"unknown error\" doesn't contribute much to a user's understanding here, so i'll just get rid of that.\n\n\n\n",
                    "created": "2022-09-23T16:14:02.949+0000",
                    "updated": "2022-09-23T16:14:02.949+0000",
                    "started": "2022-09-23T16:14:02.949+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811644",
                    "issueId": "13481769"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481769/worklog/811647",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #14146:\nURL: https://github.com/apache/arrow/pull/14146#discussion_r978858279\n\n\n##########\ngo/arrow/rle/rle_utils_test.go:\n##########\n@@ -0,0 +1,144 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package rle_test\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/v10/arrow\"\n+\t\"github.com/apache/arrow/go/v10/arrow/array\"\n+\t\"github.com/apache/arrow/go/v10/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v10/arrow/rle\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+func TestFindPhysicalOffset(t *testing.T) {\n+\ttests := []struct {\n+\t\tvals []int32\n+\t\tfind int\n+\t\texp  int\n+\t}{\n+\t\t{[]int32{1}, 0, 0},\n+\t\t{[]int32{1, 2, 3}, 0, 0},\n+\t\t{[]int32{1, 2, 3}, 1, 1},\n+\t\t{[]int32{1, 2, 3}, 2, 2},\n+\t\t{[]int32{2, 3, 4}, 0, 0},\n+\t\t{[]int32{2, 3, 4}, 1, 0},\n+\t\t{[]int32{2, 3, 4}, 2, 1},\n+\t\t{[]int32{2, 3, 4}, 3, 2},\n+\t\t{[]int32{2, 4, 6}, 3, 1},\n+\t\t{[]int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 1000, 1005, 1015, 1020, 1025, 1050}, 1000, 10},\n+\t\t// out-of-range logical offset should return len(vals)\n+\t\t{[]int32{2, 4, 6}, 6, 3},\n+\t\t{[]int32{2, 4, 6}, 10000, 3},\n\nReview Comment:\n   Hmm, what do we think *should* happen? going out of range in the positive direction just returns `len(vals)` technically the offset should never be negative, rather than error I think the better solution here would be to just make the argument a `uint` rather than an `int`, thoughts?\n\n\n\n",
                    "created": "2022-09-23T16:30:44.346+0000",
                    "updated": "2022-09-23T16:30:44.346+0000",
                    "started": "2022-09-23T16:30:44.346+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811647",
                    "issueId": "13481769"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@327266c5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40e70bf2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70f7c58a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@837e8fd[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ef225d0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@298ede60[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@679b954e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@505cf940[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fff8a3e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@70dd2c7f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bd7f6cf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7cf6900c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "2022-09-15 18:51:55.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17750/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-09-15T18:51:55.000+0000",
        "updated": "2022-09-23T16:30:44.000+0000",
        "timeoriginalestimate": null,
        "description": "Based on ARROW-17710",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] Kernel Input Type Matcher for RLE",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|z18ll4:",
        "customfield_12314139": null
    }
}