{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13410201",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201",
    "key": "ARROW-14602",
    "fields": {
        "parent": {
            "id": "13405944",
            "key": "ARROW-14278",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13405944",
            "fields": {
                "summary": "[Doc] New Contributors Guide",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12629245",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12629245",
                "type": {
                    "id": "12310060",
                    "name": "Container",
                    "inward": "Is contained by",
                    "outward": "contains",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310060"
                },
                "outwardIssue": {
                    "id": "13415274",
                    "key": "ARROW-14977",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415274",
                    "fields": {
                        "summary": "[Python] Add a \"made-up\" feature for the guide tutorial",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14602/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/693194",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF opened a new pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913\n\n\n   This is a draft of the **Python Tutorial** that will be included in the (New) Contributors Guide.\r\n   \r\n   It is a tutorial explaining the steps in making [ARROW-14977: [Python] Add a \"made-up\" feature for the guide tutorial](https://github.com/apache/arrow/pull/11900).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-09T12:08:06.804+0000",
                    "updated": "2021-12-09T12:08:06.804+0000",
                    "started": "2021-12-09T12:08:06.804+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "693194",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/693206",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913#issuecomment-989805167\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-09T12:25:54.576+0000",
                    "updated": "2021-12-09T12:25:54.576+0000",
                    "started": "2021-12-09T12:25:54.576+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "693206",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/696154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on a change in pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913#discussion_r769021050\n\n\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger for 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n+do some research:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> data\n+   [4, 5, 6, None, 1]\n+   >>> pc.min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+   >>> pc.min_max(data, skip_nulls=False)\n+   <pyarrow.StructScalar: [('min', None), ('max', None)]>\n+\n+We will call our new feature ``pc.tutorial_min_max``. We want the\n+result from our function, that takes the same input data, to be\n+``[('min-', 0), ('max+', 7)]``. If we specify that the null value should be\n+included, the result should be equal to ``pc.min_max`` that is\n+``[('min', None), ('max', None)]``.\n+\n+Lets add the first trial code into ``arrow/python/pyarrow/compute.py``\n+where we first test the call to the \"min_max\" function from C++:\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+       \"\"\"\n+       Add docstings\n\nReview comment:\n       ```suggestion\r\n          Add docstrings\r\n   ```\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n\nReview comment:\n       One tip I have: If you initially clone apache/arrow and then rename as upstream, your local master branch will always track upstream rather than origin. (Then you can do `git pull master` instead of `git pull upstream master`.)\r\n   \r\n   ```\r\n      $ git clone https://github.com/apache/arrow.git\r\n      $ cd arrow\r\n      $ git remote rename origin upstream\r\n      $ git remote add origin https://github.com/<your username>/arrow.git\r\n   ```\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger for 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n+do some research:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> data\n+   [4, 5, 6, None, 1]\n+   >>> pc.min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+   >>> pc.min_max(data, skip_nulls=False)\n+   <pyarrow.StructScalar: [('min', None), ('max', None)]>\n+\n+We will call our new feature ``pc.tutorial_min_max``. We want the\n+result from our function, that takes the same input data, to be\n+``[('min-', 0), ('max+', 7)]``. If we specify that the null value should be\n+included, the result should be equal to ``pc.min_max`` that is\n+``[('min', None), ('max', None)]``.\n+\n+Lets add the first trial code into ``arrow/python/pyarrow/compute.py``\n+where we first test the call to the \"min_max\" function from C++:\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+       \"\"\"\n+       Add docstings\n+\n+       Parameters\n+       ----------\n+       values : Array\n+\n+       Returns\n+       -------\n+       result : TODO\n+\n+       Examples\n+       --------\n+       >>> import pyarrow.compute as pc\n+       >>> data = [4, 5, 6, None, 1]\n+       >>> pc.tutorial_min_max(data)\n+       <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+       \"\"\"\n+\n+       options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+       return call_function(\"min_max\", [values], options)\n+\n+To see if this works we will need to import ``pyarrow.compute``\n+again and try:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> pc.tutorial_min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+\n+It\u2019s working. Now we must correct the limits to get the corrected\n+interval. To do that we have to do some research on \n+``pyarrow.StructScalar``. In ``test_scalar.py`` under the\n+``test_struct_duplicate_fields`` we can see an example of how the\n+``StructScalar`` is created. We could again run the Python console\n\nReview comment:\n       This might also be a good place for some generic advice: \"In cases where we don't yet have good documentation, unit tests can be a good place to look for code examples.\"\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger for 1 in both directions. Note that this is a\n\nReview comment:\n       ```suggestion\r\n   interval bigger by 1 in both directions. Note that this is a\r\n   ```\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n\nReview comment:\n       > This tutorial is not meant as a step by step guide\r\n   \r\n   If I understand this right, the reason it's not a step-by-step guide is that we don't actually expect people do follow all of these steps themselves. In particular, we don't want people creating a bunch of fake Jira issues, right?\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger for 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n+do some research:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> data\n+   [4, 5, 6, None, 1]\n+   >>> pc.min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+   >>> pc.min_max(data, skip_nulls=False)\n+   <pyarrow.StructScalar: [('min', None), ('max', None)]>\n+\n+We will call our new feature ``pc.tutorial_min_max``. We want the\n+result from our function, that takes the same input data, to be\n+``[('min-', 0), ('max+', 7)]``. If we specify that the null value should be\n+included, the result should be equal to ``pc.min_max`` that is\n+``[('min', None), ('max', None)]``.\n+\n+Lets add the first trial code into ``arrow/python/pyarrow/compute.py``\n+where we first test the call to the \"min_max\" function from C++:\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+       \"\"\"\n+       Add docstings\n+\n+       Parameters\n+       ----------\n+       values : Array\n+\n+       Returns\n+       -------\n+       result : TODO\n+\n+       Examples\n+       --------\n+       >>> import pyarrow.compute as pc\n+       >>> data = [4, 5, 6, None, 1]\n+       >>> pc.tutorial_min_max(data)\n+       <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+       \"\"\"\n+\n+       options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+       return call_function(\"min_max\", [values], options)\n+\n+To see if this works we will need to import ``pyarrow.compute``\n+again and try:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> pc.tutorial_min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+\n+It\u2019s working. Now we must correct the limits to get the corrected\n+interval. To do that we have to do some research on \n+``pyarrow.StructScalar``. In ``test_scalar.py`` under the\n+``test_struct_duplicate_fields`` we can see an example of how the\n+``StructScalar`` is created. We could again run the Python console\n+and try creating one ourselves.\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n+   >>> ty = pa.struct([\n+   ...      pa.field('min-', pa.int64()),\n+   ...      pa.field('max+', pa.int64()),\n+   ...    ])\n+   >>> pa.scalar([('min-', 3), ('max+', 9)], type=ty)\n+   <pyarrow.StructScalar: [('min-', 3), ('max+', 9)]>\n+\n+With the new gained knowledge about ``StructScalar`` and additional\n+options for the ``pc.min_max`` function we can finish the work.\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+\n+      \"\"\"\n+      Compute the minimum-1 and maximum+1 values of a numeric array.\n+      Null values are ignored by default. This can be changed through\n+      ScalarAggregateOptions.\n\nReview comment:\n       ScalarAggregationOptions seems to be internal here. Maybe delete this sentence and add the `skip_null` parameter to the `Parameters` section?\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger for 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n+do some research:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> data\n+   [4, 5, 6, None, 1]\n+   >>> pc.min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+   >>> pc.min_max(data, skip_nulls=False)\n+   <pyarrow.StructScalar: [('min', None), ('max', None)]>\n+\n+We will call our new feature ``pc.tutorial_min_max``. We want the\n+result from our function, that takes the same input data, to be\n+``[('min-', 0), ('max+', 7)]``. If we specify that the null value should be\n+included, the result should be equal to ``pc.min_max`` that is\n+``[('min', None), ('max', None)]``.\n+\n+Lets add the first trial code into ``arrow/python/pyarrow/compute.py``\n+where we first test the call to the \"min_max\" function from C++:\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+       \"\"\"\n+       Add docstings\n+\n+       Parameters\n+       ----------\n+       values : Array\n+\n+       Returns\n+       -------\n+       result : TODO\n+\n+       Examples\n+       --------\n+       >>> import pyarrow.compute as pc\n+       >>> data = [4, 5, 6, None, 1]\n+       >>> pc.tutorial_min_max(data)\n+       <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+       \"\"\"\n+\n+       options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+       return call_function(\"min_max\", [values], options)\n+\n+To see if this works we will need to import ``pyarrow.compute``\n+again and try:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> pc.tutorial_min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+\n+It\u2019s working. Now we must correct the limits to get the corrected\n+interval. To do that we have to do some research on \n+``pyarrow.StructScalar``. In ``test_scalar.py`` under the\n+``test_struct_duplicate_fields`` we can see an example of how the\n+``StructScalar`` is created. We could again run the Python console\n+and try creating one ourselves.\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n+   >>> ty = pa.struct([\n+   ...      pa.field('min-', pa.int64()),\n+   ...      pa.field('max+', pa.int64()),\n+   ...    ])\n+   >>> pa.scalar([('min-', 3), ('max+', 9)], type=ty)\n+   <pyarrow.StructScalar: [('min-', 3), ('max+', 9)]>\n+\n+With the new gained knowledge about ``StructScalar`` and additional\n+options for the ``pc.min_max`` function we can finish the work.\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+\n+      \"\"\"\n+      Compute the minimum-1 and maximum+1 values of a numeric array.\n+      Null values are ignored by default. This can be changed through\n+      ScalarAggregateOptions.\n+      This is a made-up feature for the tutorial purposes.\n+      Parameters\n+      ----------\n+      values : Array\n+      Returns\n+      -------\n+      result : StructScalar of min-1 and max+1\n+      Examples\n+      --------\n+      >>> import pyarrow.compute as pc\n+      >>> data = [4, 5, 6, None, 1]\n+      >>> pc.tutorial_min_max(data)\n+      <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+      \"\"\"\n+\n+      options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+      min_max = call_function(\"min_max\", [values], options)\n+\n+      if min_max[0].as_py() is not None:\n+        min_t = min_max[0].as_py()-1\n+        max_t = min_max[1].as_py()+1\n+      else:\n+        min_t = min_max[0].as_py()\n+        max_t = min_max[1].as_py()\n+\n+      ty = pa.struct([\n+        pa.field('min-', pa.int64()),\n+        pa.field('max+', pa.int64()),\n+      ])\n+      return pa.scalar([('min-', min_t), ('max+', max_t)], type=ty)\n+\n+.. TODO seealso\n+   .. For more information about the Arrow codebase visit \n+   .. :ref:``. (link to working on the Arrow codebase section)\n+\n+Adding a test\n+-------------\n+\n+Now we should add a unit test to ``python/pyarrow/tests/test_compute.py``\n+and run the pytest.\n+\n+.. code-block:: python\n+\n+   def test_tutorial_min_max():\n+    arr = [4, 5, 6, None, 1]\n+    l1 = {'min-': 0, 'max+': 7}\n\nReview comment:\n       nit: indentation is only 1 space in function. Shouldn't that be 4?\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger for 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n+do some research:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> data\n+   [4, 5, 6, None, 1]\n+   >>> pc.min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+   >>> pc.min_max(data, skip_nulls=False)\n+   <pyarrow.StructScalar: [('min', None), ('max', None)]>\n+\n+We will call our new feature ``pc.tutorial_min_max``. We want the\n+result from our function, that takes the same input data, to be\n+``[('min-', 0), ('max+', 7)]``. If we specify that the null value should be\n+included, the result should be equal to ``pc.min_max`` that is\n+``[('min', None), ('max', None)]``.\n+\n+Lets add the first trial code into ``arrow/python/pyarrow/compute.py``\n+where we first test the call to the \"min_max\" function from C++:\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+       \"\"\"\n+       Add docstings\n+\n+       Parameters\n+       ----------\n+       values : Array\n+\n+       Returns\n+       -------\n+       result : TODO\n+\n+       Examples\n+       --------\n+       >>> import pyarrow.compute as pc\n+       >>> data = [4, 5, 6, None, 1]\n+       >>> pc.tutorial_min_max(data)\n+       <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+       \"\"\"\n+\n+       options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+       return call_function(\"min_max\", [values], options)\n+\n+To see if this works we will need to import ``pyarrow.compute``\n+again and try:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> pc.tutorial_min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+\n+It\u2019s working. Now we must correct the limits to get the corrected\n+interval. To do that we have to do some research on \n+``pyarrow.StructScalar``. In ``test_scalar.py`` under the\n+``test_struct_duplicate_fields`` we can see an example of how the\n+``StructScalar`` is created. We could again run the Python console\n+and try creating one ourselves.\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n+   >>> ty = pa.struct([\n+   ...      pa.field('min-', pa.int64()),\n+   ...      pa.field('max+', pa.int64()),\n+   ...    ])\n+   >>> pa.scalar([('min-', 3), ('max+', 9)], type=ty)\n+   <pyarrow.StructScalar: [('min-', 3), ('max+', 9)]>\n+\n+With the new gained knowledge about ``StructScalar`` and additional\n+options for the ``pc.min_max`` function we can finish the work.\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+\n+      \"\"\"\n+      Compute the minimum-1 and maximum+1 values of a numeric array.\n+      Null values are ignored by default. This can be changed through\n+      ScalarAggregateOptions.\n+      This is a made-up feature for the tutorial purposes.\n+      Parameters\n+      ----------\n+      values : Array\n+      Returns\n+      -------\n+      result : StructScalar of min-1 and max+1\n+      Examples\n+      --------\n+      >>> import pyarrow.compute as pc\n+      >>> data = [4, 5, 6, None, 1]\n+      >>> pc.tutorial_min_max(data)\n+      <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+      \"\"\"\n+\n+      options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+      min_max = call_function(\"min_max\", [values], options)\n+\n+      if min_max[0].as_py() is not None:\n+        min_t = min_max[0].as_py()-1\n+        max_t = min_max[1].as_py()+1\n+      else:\n+        min_t = min_max[0].as_py()\n+        max_t = min_max[1].as_py()\n+\n+      ty = pa.struct([\n+        pa.field('min-', pa.int64()),\n+        pa.field('max+', pa.int64()),\n+      ])\n+      return pa.scalar([('min-', min_t), ('max+', max_t)], type=ty)\n+\n+.. TODO seealso\n+   .. For more information about the Arrow codebase visit \n+   .. :ref:``. (link to working on the Arrow codebase section)\n+\n+Adding a test\n+-------------\n+\n+Now we should add a unit test to ``python/pyarrow/tests/test_compute.py``\n+and run the pytest.\n+\n+.. code-block:: python\n+\n+   def test_tutorial_min_max():\n+    arr = [4, 5, 6, None, 1]\n+    l1 = {'min-': 0, 'max+': 7}\n+    l2 = {'min-': None, 'max+': None}\n+    assert pc.tutorial_min_max(arr).as_py() == l1\n+    assert pc.tutorial_min_max(arr,\n+                               skip_nulls=False).as_py() == l2\n+\n+With the unit test added we can run the pytest from the shell.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python -m pytest pyarrow/tests/test_compute.py -k test_tutorial_min_max                    \n+   ======================== test session starts ==========================\n+   platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\n+   rootdir: /Users/alenkafrim/repos/arrow/python, configfile: setup.cfg\n+   plugins: hypothesis-6.24.1, lazy-fixture-0.6.3\n+   collected 204 items / 203 deselected / 1 selected                                                                                   \n+\n+   pyarrow/tests/test_compute.py .                                  [100%]\n+\n+   ======================== 1 passed, 203 deselected in 0.16s ============\n+   \n+\n+   $ python -m pytest pyarrow/tests/test_compute.py                       \n+   ======================== test session starts ===========================\n+   platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\n+   rootdir: /Users/alenkafrim/repos/arrow/python, configfile: setup.cfg\n+   plugins: hypothesis-6.24.1, lazy-fixture-0.6.3\n+   collected 204 items                                                                                                                 \n+\n+   pyarrow/tests/test_compute.py ................................... [ 46%]\n+   .................................................                 [100%]\n+\n+   ========================= 204 passed in 0.49s ==========================\n+\n+.. seealso::\n+\n+   For more information about testing see :ref:`testing` section.\n+\n+Check styling\n+-------------\n+\n+At the end we also need to check the styling. In Arrow we use a\n+utility called `Archery <https://arrow.apache.org/docs/developers/archery.html>`_\n+to check if code is in line with PEP 8 style guide.\n+\n+.. code:: console\n+   \n+   $ archery lint --python --fix\n+   INFO:archery:Running Python formatter (autopep8)\n+   INFO:archery:Running Python linter (flake8)\n+   /Users/alenkafrim/repos/arrow/python/pyarrow/tests/test_compute.py:2288:80: E501 line too long (88 > 79 characters)\n+\n+We get a warning that one line is too long. Lets\n+make the necessary corrections and run it again.\n+\n+.. code:: console\n+\n+   $ archery lint --python --fix\n+   INFO:archery:Running Python formatter (autopep8)\n+   INFO:archery:Running Python linter (flake8)\n+\n+Done. Now lets make the Pull Request!\n+\n+Creating a Pull Request\n+-----------------------\n+\n+First lets check again the changes made to the local copy\n+of the Arrow library in the shell.\n\nReview comment:\n       ```suggestion\r\n   First let's review our changes to Arrow in the shell using `git diff`.\r\n   ```\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger for 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n+do some research:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> data\n+   [4, 5, 6, None, 1]\n+   >>> pc.min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+   >>> pc.min_max(data, skip_nulls=False)\n+   <pyarrow.StructScalar: [('min', None), ('max', None)]>\n+\n+We will call our new feature ``pc.tutorial_min_max``. We want the\n+result from our function, that takes the same input data, to be\n+``[('min-', 0), ('max+', 7)]``. If we specify that the null value should be\n+included, the result should be equal to ``pc.min_max`` that is\n+``[('min', None), ('max', None)]``.\n+\n+Lets add the first trial code into ``arrow/python/pyarrow/compute.py``\n+where we first test the call to the \"min_max\" function from C++:\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+       \"\"\"\n+       Add docstings\n+\n+       Parameters\n+       ----------\n+       values : Array\n+\n+       Returns\n+       -------\n+       result : TODO\n+\n+       Examples\n+       --------\n+       >>> import pyarrow.compute as pc\n+       >>> data = [4, 5, 6, None, 1]\n+       >>> pc.tutorial_min_max(data)\n+       <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+       \"\"\"\n+\n+       options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+       return call_function(\"min_max\", [values], options)\n+\n+To see if this works we will need to import ``pyarrow.compute``\n+again and try:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> pc.tutorial_min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+\n+It\u2019s working. Now we must correct the limits to get the corrected\n+interval. To do that we have to do some research on \n+``pyarrow.StructScalar``. In ``test_scalar.py`` under the\n+``test_struct_duplicate_fields`` we can see an example of how the\n+``StructScalar`` is created. We could again run the Python console\n+and try creating one ourselves.\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n+   >>> ty = pa.struct([\n+   ...      pa.field('min-', pa.int64()),\n+   ...      pa.field('max+', pa.int64()),\n+   ...    ])\n+   >>> pa.scalar([('min-', 3), ('max+', 9)], type=ty)\n+   <pyarrow.StructScalar: [('min-', 3), ('max+', 9)]>\n+\n+With the new gained knowledge about ``StructScalar`` and additional\n+options for the ``pc.min_max`` function we can finish the work.\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+\n+      \"\"\"\n+      Compute the minimum-1 and maximum+1 values of a numeric array.\n+      Null values are ignored by default. This can be changed through\n+      ScalarAggregateOptions.\n+      This is a made-up feature for the tutorial purposes.\n+      Parameters\n+      ----------\n+      values : Array\n+      Returns\n+      -------\n+      result : StructScalar of min-1 and max+1\n+      Examples\n+      --------\n+      >>> import pyarrow.compute as pc\n+      >>> data = [4, 5, 6, None, 1]\n+      >>> pc.tutorial_min_max(data)\n+      <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+      \"\"\"\n+\n+      options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+      min_max = call_function(\"min_max\", [values], options)\n+\n+      if min_max[0].as_py() is not None:\n+        min_t = min_max[0].as_py()-1\n+        max_t = min_max[1].as_py()+1\n+      else:\n+        min_t = min_max[0].as_py()\n+        max_t = min_max[1].as_py()\n+\n+      ty = pa.struct([\n+        pa.field('min-', pa.int64()),\n+        pa.field('max+', pa.int64()),\n+      ])\n+      return pa.scalar([('min-', min_t), ('max+', max_t)], type=ty)\n+\n+.. TODO seealso\n+   .. For more information about the Arrow codebase visit \n+   .. :ref:``. (link to working on the Arrow codebase section)\n+\n+Adding a test\n+-------------\n+\n+Now we should add a unit test to ``python/pyarrow/tests/test_compute.py``\n+and run the pytest.\n+\n+.. code-block:: python\n+\n+   def test_tutorial_min_max():\n+    arr = [4, 5, 6, None, 1]\n+    l1 = {'min-': 0, 'max+': 7}\n+    l2 = {'min-': None, 'max+': None}\n+    assert pc.tutorial_min_max(arr).as_py() == l1\n+    assert pc.tutorial_min_max(arr,\n+                               skip_nulls=False).as_py() == l2\n+\n+With the unit test added we can run the pytest from the shell.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python -m pytest pyarrow/tests/test_compute.py -k test_tutorial_min_max                    \n+   ======================== test session starts ==========================\n+   platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\n+   rootdir: /Users/alenkafrim/repos/arrow/python, configfile: setup.cfg\n+   plugins: hypothesis-6.24.1, lazy-fixture-0.6.3\n+   collected 204 items / 203 deselected / 1 selected                                                                                   \n+\n+   pyarrow/tests/test_compute.py .                                  [100%]\n+\n+   ======================== 1 passed, 203 deselected in 0.16s ============\n+   \n+\n+   $ python -m pytest pyarrow/tests/test_compute.py                       \n+   ======================== test session starts ===========================\n+   platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\n+   rootdir: /Users/alenkafrim/repos/arrow/python, configfile: setup.cfg\n+   plugins: hypothesis-6.24.1, lazy-fixture-0.6.3\n+   collected 204 items                                                                                                                 \n+\n+   pyarrow/tests/test_compute.py ................................... [ 46%]\n+   .................................................                 [100%]\n+\n+   ========================= 204 passed in 0.49s ==========================\n+\n+.. seealso::\n+\n+   For more information about testing see :ref:`testing` section.\n+\n+Check styling\n+-------------\n+\n+At the end we also need to check the styling. In Arrow we use a\n+utility called `Archery <https://arrow.apache.org/docs/developers/archery.html>`_\n+to check if code is in line with PEP 8 style guide.\n+\n+.. code:: console\n+   \n+   $ archery lint --python --fix\n+   INFO:archery:Running Python formatter (autopep8)\n+   INFO:archery:Running Python linter (flake8)\n+   /Users/alenkafrim/repos/arrow/python/pyarrow/tests/test_compute.py:2288:80: E501 line too long (88 > 79 characters)\n+\n+We get a warning that one line is too long. Lets\n+make the necessary corrections and run it again.\n+\n+.. code:: console\n+\n+   $ archery lint --python --fix\n+   INFO:archery:Running Python formatter (autopep8)\n+   INFO:archery:Running Python linter (flake8)\n+\n+Done. Now lets make the Pull Request!\n+\n+Creating a Pull Request\n+-----------------------\n+\n+First lets check again the changes made to the local copy\n+of the Arrow library in the shell.\n\nReview comment:\n       Do you also want to mention why we do this step?\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger for 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n+do some research:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> data\n+   [4, 5, 6, None, 1]\n+   >>> pc.min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+   >>> pc.min_max(data, skip_nulls=False)\n+   <pyarrow.StructScalar: [('min', None), ('max', None)]>\n+\n+We will call our new feature ``pc.tutorial_min_max``. We want the\n+result from our function, that takes the same input data, to be\n+``[('min-', 0), ('max+', 7)]``. If we specify that the null value should be\n+included, the result should be equal to ``pc.min_max`` that is\n+``[('min', None), ('max', None)]``.\n+\n+Lets add the first trial code into ``arrow/python/pyarrow/compute.py``\n+where we first test the call to the \"min_max\" function from C++:\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+       \"\"\"\n+       Add docstings\n+\n+       Parameters\n+       ----------\n+       values : Array\n+\n+       Returns\n+       -------\n+       result : TODO\n+\n+       Examples\n+       --------\n+       >>> import pyarrow.compute as pc\n+       >>> data = [4, 5, 6, None, 1]\n+       >>> pc.tutorial_min_max(data)\n+       <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+       \"\"\"\n+\n+       options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+       return call_function(\"min_max\", [values], options)\n+\n+To see if this works we will need to import ``pyarrow.compute``\n+again and try:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> pc.tutorial_min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+\n+It\u2019s working. Now we must correct the limits to get the corrected\n+interval. To do that we have to do some research on \n+``pyarrow.StructScalar``. In ``test_scalar.py`` under the\n+``test_struct_duplicate_fields`` we can see an example of how the\n+``StructScalar`` is created. We could again run the Python console\n+and try creating one ourselves.\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n+   >>> ty = pa.struct([\n+   ...      pa.field('min-', pa.int64()),\n+   ...      pa.field('max+', pa.int64()),\n+   ...    ])\n+   >>> pa.scalar([('min-', 3), ('max+', 9)], type=ty)\n+   <pyarrow.StructScalar: [('min-', 3), ('max+', 9)]>\n+\n+With the new gained knowledge about ``StructScalar`` and additional\n+options for the ``pc.min_max`` function we can finish the work.\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+\n+      \"\"\"\n+      Compute the minimum-1 and maximum+1 values of a numeric array.\n+      Null values are ignored by default. This can be changed through\n+      ScalarAggregateOptions.\n+      This is a made-up feature for the tutorial purposes.\n+      Parameters\n+      ----------\n+      values : Array\n+      Returns\n+      -------\n+      result : StructScalar of min-1 and max+1\n+      Examples\n+      --------\n+      >>> import pyarrow.compute as pc\n+      >>> data = [4, 5, 6, None, 1]\n+      >>> pc.tutorial_min_max(data)\n+      <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+      \"\"\"\n+\n+      options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+      min_max = call_function(\"min_max\", [values], options)\n+\n+      if min_max[0].as_py() is not None:\n+        min_t = min_max[0].as_py()-1\n+        max_t = min_max[1].as_py()+1\n+      else:\n+        min_t = min_max[0].as_py()\n+        max_t = min_max[1].as_py()\n+\n+      ty = pa.struct([\n+        pa.field('min-', pa.int64()),\n+        pa.field('max+', pa.int64()),\n+      ])\n+      return pa.scalar([('min-', min_t), ('max+', max_t)], type=ty)\n+\n+.. TODO seealso\n+   .. For more information about the Arrow codebase visit \n+   .. :ref:``. (link to working on the Arrow codebase section)\n+\n+Adding a test\n+-------------\n+\n+Now we should add a unit test to ``python/pyarrow/tests/test_compute.py``\n+and run the pytest.\n+\n+.. code-block:: python\n+\n+   def test_tutorial_min_max():\n+    arr = [4, 5, 6, None, 1]\n+    l1 = {'min-': 0, 'max+': 7}\n+    l2 = {'min-': None, 'max+': None}\n+    assert pc.tutorial_min_max(arr).as_py() == l1\n+    assert pc.tutorial_min_max(arr,\n+                               skip_nulls=False).as_py() == l2\n+\n+With the unit test added we can run the pytest from the shell.\n\nReview comment:\n       Nice! I didn't know about the `-k` parameter. Maybe you should write advice explicitly? Something like \"To run a specific unit test, pass in the test name to the ``-k`` parameter.\"\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger for 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n+do some research:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> data\n+   [4, 5, 6, None, 1]\n+   >>> pc.min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+   >>> pc.min_max(data, skip_nulls=False)\n+   <pyarrow.StructScalar: [('min', None), ('max', None)]>\n+\n+We will call our new feature ``pc.tutorial_min_max``. We want the\n+result from our function, that takes the same input data, to be\n+``[('min-', 0), ('max+', 7)]``. If we specify that the null value should be\n+included, the result should be equal to ``pc.min_max`` that is\n+``[('min', None), ('max', None)]``.\n+\n+Lets add the first trial code into ``arrow/python/pyarrow/compute.py``\n+where we first test the call to the \"min_max\" function from C++:\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+       \"\"\"\n+       Add docstings\n+\n+       Parameters\n+       ----------\n+       values : Array\n+\n+       Returns\n+       -------\n+       result : TODO\n+\n+       Examples\n+       --------\n+       >>> import pyarrow.compute as pc\n+       >>> data = [4, 5, 6, None, 1]\n+       >>> pc.tutorial_min_max(data)\n+       <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+       \"\"\"\n+\n+       options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+       return call_function(\"min_max\", [values], options)\n+\n+To see if this works we will need to import ``pyarrow.compute``\n+again and try:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> pc.tutorial_min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+\n+It\u2019s working. Now we must correct the limits to get the corrected\n+interval. To do that we have to do some research on \n+``pyarrow.StructScalar``. In ``test_scalar.py`` under the\n+``test_struct_duplicate_fields`` we can see an example of how the\n+``StructScalar`` is created. We could again run the Python console\n+and try creating one ourselves.\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n+   >>> ty = pa.struct([\n+   ...      pa.field('min-', pa.int64()),\n+   ...      pa.field('max+', pa.int64()),\n+   ...    ])\n+   >>> pa.scalar([('min-', 3), ('max+', 9)], type=ty)\n+   <pyarrow.StructScalar: [('min-', 3), ('max+', 9)]>\n+\n+With the new gained knowledge about ``StructScalar`` and additional\n+options for the ``pc.min_max`` function we can finish the work.\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+\n+      \"\"\"\n+      Compute the minimum-1 and maximum+1 values of a numeric array.\n+      Null values are ignored by default. This can be changed through\n+      ScalarAggregateOptions.\n+      This is a made-up feature for the tutorial purposes.\n+      Parameters\n+      ----------\n+      values : Array\n+      Returns\n+      -------\n+      result : StructScalar of min-1 and max+1\n+      Examples\n+      --------\n+      >>> import pyarrow.compute as pc\n+      >>> data = [4, 5, 6, None, 1]\n+      >>> pc.tutorial_min_max(data)\n+      <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+      \"\"\"\n+\n+      options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+      min_max = call_function(\"min_max\", [values], options)\n+\n+      if min_max[0].as_py() is not None:\n+        min_t = min_max[0].as_py()-1\n+        max_t = min_max[1].as_py()+1\n+      else:\n+        min_t = min_max[0].as_py()\n+        max_t = min_max[1].as_py()\n+\n+      ty = pa.struct([\n+        pa.field('min-', pa.int64()),\n+        pa.field('max+', pa.int64()),\n+      ])\n+      return pa.scalar([('min-', min_t), ('max+', max_t)], type=ty)\n+\n+.. TODO seealso\n+   .. For more information about the Arrow codebase visit \n+   .. :ref:``. (link to working on the Arrow codebase section)\n+\n+Adding a test\n+-------------\n+\n+Now we should add a unit test to ``python/pyarrow/tests/test_compute.py``\n+and run the pytest.\n+\n+.. code-block:: python\n+\n+   def test_tutorial_min_max():\n+    arr = [4, 5, 6, None, 1]\n+    l1 = {'min-': 0, 'max+': 7}\n+    l2 = {'min-': None, 'max+': None}\n+    assert pc.tutorial_min_max(arr).as_py() == l1\n+    assert pc.tutorial_min_max(arr,\n+                               skip_nulls=False).as_py() == l2\n+\n+With the unit test added we can run the pytest from the shell.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python -m pytest pyarrow/tests/test_compute.py -k test_tutorial_min_max                    \n+   ======================== test session starts ==========================\n+   platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\n+   rootdir: /Users/alenkafrim/repos/arrow/python, configfile: setup.cfg\n+   plugins: hypothesis-6.24.1, lazy-fixture-0.6.3\n+   collected 204 items / 203 deselected / 1 selected                                                                                   \n+\n+   pyarrow/tests/test_compute.py .                                  [100%]\n+\n+   ======================== 1 passed, 203 deselected in 0.16s ============\n+   \n+\n+   $ python -m pytest pyarrow/tests/test_compute.py                       \n+   ======================== test session starts ===========================\n+   platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\n+   rootdir: /Users/alenkafrim/repos/arrow/python, configfile: setup.cfg\n+   plugins: hypothesis-6.24.1, lazy-fixture-0.6.3\n+   collected 204 items                                                                                                                 \n+\n+   pyarrow/tests/test_compute.py ................................... [ 46%]\n+   .................................................                 [100%]\n+\n+   ========================= 204 passed in 0.49s ==========================\n+\n+.. seealso::\n+\n+   For more information about testing see :ref:`testing` section.\n+\n+Check styling\n+-------------\n+\n+At the end we also need to check the styling. In Arrow we use a\n+utility called `Archery <https://arrow.apache.org/docs/developers/archery.html>`_\n+to check if code is in line with PEP 8 style guide.\n+\n+.. code:: console\n+   \n+   $ archery lint --python --fix\n+   INFO:archery:Running Python formatter (autopep8)\n+   INFO:archery:Running Python linter (flake8)\n+   /Users/alenkafrim/repos/arrow/python/pyarrow/tests/test_compute.py:2288:80: E501 line too long (88 > 79 characters)\n+\n+We get a warning that one line is too long. Lets\n+make the necessary corrections and run it again.\n+\n+.. code:: console\n+\n+   $ archery lint --python --fix\n+   INFO:archery:Running Python formatter (autopep8)\n+   INFO:archery:Running Python linter (flake8)\n+\n+Done. Now lets make the Pull Request!\n+\n+Creating a Pull Request\n+-----------------------\n+\n+First lets check again the changes made to the local copy\n+of the Arrow library in the shell.\n+\n+.. code:: console\n+\n+   $ git status\n+   On branch ARROW-14977\n+   Changes not staged for commit:\n+     (use \"git add <file>...\" to update what will be committed)\n+     (use \"git restore <file>...\" to discard changes in working directory)\n+      modified:   python/pyarrow/compute.py\n+      modified:   python/pyarrow/tests/test_compute.py\n+\n+   no changes added to commit (use \"git add\" and/or \"git commit -a\")\n+   \n+   $ git diff\n+   diff --git a/python/pyarrow/compute.py b/python/pyarrow/compute.py\n+   index 9dac606c3..e8fc775d8 100644\n+   --- a/python/pyarrow/compute.py\n+   +++ b/python/pyarrow/compute.py\n+   @@ -774,3 +774,45 @@ def bottom_k_unstable(values, k, sort_keys=None, *, memory_pool=None):\n+            sort_keys = map(lambda key_name: (key_name, \"ascending\"), sort_keys)\n+        options = SelectKOptions(k, sort_keys)\n+        return call_function(\"select_k_unstable\", [values], options, memory_pool)\n+   +\n+   +\n+   +def tutorial_min_max(values, skip_nulls=True):\n+   +    \"\"\"\n+   +    Compute the minimum-1 and maximum-1 values of a numeric array.\n+   +\n+   +    Null values are ignored by default. This can be changed through\n+   +    ScalarAggregateOptions.\n+   +\n+   +    This is a made-up feature for the tutorial purposes.\n+   +\n+   +    Parameters\n+   +    ----------\n+   +    values : Array\n+   +\n+   +    Returns\n+   +    -------\n+   +    result : StructScalar of min-1 and max+1\n+   +\n+   +    Examples\n+   +    --------\n+   +    >>> import pyarrow.compute as pc\n+   +    >>> data = [4, 5, 6, None, 1]\n+   +    >>> pc.tutorial_min_max(data)\n+   +    <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+   +    \"\"\"\n+   +\n+   +    options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+   +    min_max = call_function(\"min_max\", [values], options)\n+   +\n+   ...\n+\n+Everything looks OK. Now we can make the commit (save our changes\n+to the branch history):\n+\n+.. code:: console\n+\n+   $ git commit -am \"Adding a new compute feature for tutorial purposes\"\n+   [ARROW-14977 170ef85be] Adding a new compute feature for tutorial purposes\n+    2 files changed, 51 insertions(+)\n+   \n+\n+check the history of commits\n+\n+.. code:: console\n+\n+   $ git log\n+   commit 170ef85beb8ee629be651e3f93bcc4a69e29cfb8 (HEAD -> ARROW-14977)\n+   Author: Alenka Frim <frim.alenka@gmail.com>\n+   Date:   Tue Dec 7 13:45:06 2021 +0100\n+\n+       Adding a new compute feature for tutorial purposes\n+\n+   commit 8cebc4948ab5c5792c20a3f463e2043e01c49828 (master)\n+   Author: Sutou Kouhei <kou@clear-code.com>\n+   Date:   Sun Dec 5 15:19:46 2021 +0900\n+\n+       ARROW-14981: [CI][Docs] Upload built documents\n+       \n+       We can use this in release process instead of building on release\n+       manager's local environment.\n+       \n+       Closes #11856 from kou/ci-docs-upload\n+       \n+       Authored-by: Sutou Kouhei <kou@clear-code.com>\n+       Signed-off-by: Sutou Kouhei <kou@clear-code.com>\n+   ...\n+\n+if necessary we should rebase to upstream master:\n\nReview comment:\n       We should probably say when necessary:\r\n   \r\n   ```suggestion\r\n   If you started the branch some time ago, you may need to rebase to upstream master to make sure there are no merge conflicts:\r\n   ```\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger for 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n+do some research:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> data\n+   [4, 5, 6, None, 1]\n+   >>> pc.min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+   >>> pc.min_max(data, skip_nulls=False)\n+   <pyarrow.StructScalar: [('min', None), ('max', None)]>\n+\n+We will call our new feature ``pc.tutorial_min_max``. We want the\n+result from our function, that takes the same input data, to be\n+``[('min-', 0), ('max+', 7)]``. If we specify that the null value should be\n+included, the result should be equal to ``pc.min_max`` that is\n+``[('min', None), ('max', None)]``.\n+\n+Lets add the first trial code into ``arrow/python/pyarrow/compute.py``\n+where we first test the call to the \"min_max\" function from C++:\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+       \"\"\"\n+       Add docstings\n+\n+       Parameters\n+       ----------\n+       values : Array\n+\n+       Returns\n+       -------\n+       result : TODO\n+\n+       Examples\n+       --------\n+       >>> import pyarrow.compute as pc\n+       >>> data = [4, 5, 6, None, 1]\n+       >>> pc.tutorial_min_max(data)\n+       <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+       \"\"\"\n+\n+       options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+       return call_function(\"min_max\", [values], options)\n+\n+To see if this works we will need to import ``pyarrow.compute``\n+again and try:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> pc.tutorial_min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+\n+It\u2019s working. Now we must correct the limits to get the corrected\n+interval. To do that we have to do some research on \n+``pyarrow.StructScalar``. In ``test_scalar.py`` under the\n+``test_struct_duplicate_fields`` we can see an example of how the\n+``StructScalar`` is created. We could again run the Python console\n+and try creating one ourselves.\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n+   >>> ty = pa.struct([\n+   ...      pa.field('min-', pa.int64()),\n+   ...      pa.field('max+', pa.int64()),\n+   ...    ])\n+   >>> pa.scalar([('min-', 3), ('max+', 9)], type=ty)\n+   <pyarrow.StructScalar: [('min-', 3), ('max+', 9)]>\n+\n+With the new gained knowledge about ``StructScalar`` and additional\n+options for the ``pc.min_max`` function we can finish the work.\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+\n+      \"\"\"\n+      Compute the minimum-1 and maximum+1 values of a numeric array.\n+      Null values are ignored by default. This can be changed through\n+      ScalarAggregateOptions.\n+      This is a made-up feature for the tutorial purposes.\n+      Parameters\n+      ----------\n+      values : Array\n+      Returns\n+      -------\n+      result : StructScalar of min-1 and max+1\n+      Examples\n+      --------\n+      >>> import pyarrow.compute as pc\n+      >>> data = [4, 5, 6, None, 1]\n+      >>> pc.tutorial_min_max(data)\n+      <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+      \"\"\"\n+\n+      options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+      min_max = call_function(\"min_max\", [values], options)\n+\n+      if min_max[0].as_py() is not None:\n+        min_t = min_max[0].as_py()-1\n+        max_t = min_max[1].as_py()+1\n+      else:\n+        min_t = min_max[0].as_py()\n+        max_t = min_max[1].as_py()\n+\n+      ty = pa.struct([\n+        pa.field('min-', pa.int64()),\n+        pa.field('max+', pa.int64()),\n+      ])\n+      return pa.scalar([('min-', min_t), ('max+', max_t)], type=ty)\n+\n+.. TODO seealso\n+   .. For more information about the Arrow codebase visit \n+   .. :ref:``. (link to working on the Arrow codebase section)\n+\n+Adding a test\n+-------------\n+\n+Now we should add a unit test to ``python/pyarrow/tests/test_compute.py``\n+and run the pytest.\n+\n+.. code-block:: python\n+\n+   def test_tutorial_min_max():\n+    arr = [4, 5, 6, None, 1]\n+    l1 = {'min-': 0, 'max+': 7}\n+    l2 = {'min-': None, 'max+': None}\n+    assert pc.tutorial_min_max(arr).as_py() == l1\n+    assert pc.tutorial_min_max(arr,\n+                               skip_nulls=False).as_py() == l2\n+\n+With the unit test added we can run the pytest from the shell.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python -m pytest pyarrow/tests/test_compute.py -k test_tutorial_min_max                    \n+   ======================== test session starts ==========================\n+   platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\n+   rootdir: /Users/alenkafrim/repos/arrow/python, configfile: setup.cfg\n+   plugins: hypothesis-6.24.1, lazy-fixture-0.6.3\n+   collected 204 items / 203 deselected / 1 selected                                                                                   \n+\n+   pyarrow/tests/test_compute.py .                                  [100%]\n+\n+   ======================== 1 passed, 203 deselected in 0.16s ============\n+   \n+\n+   $ python -m pytest pyarrow/tests/test_compute.py                       \n+   ======================== test session starts ===========================\n+   platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\n+   rootdir: /Users/alenkafrim/repos/arrow/python, configfile: setup.cfg\n+   plugins: hypothesis-6.24.1, lazy-fixture-0.6.3\n+   collected 204 items                                                                                                                 \n+\n+   pyarrow/tests/test_compute.py ................................... [ 46%]\n+   .................................................                 [100%]\n+\n+   ========================= 204 passed in 0.49s ==========================\n+\n+.. seealso::\n+\n+   For more information about testing see :ref:`testing` section.\n+\n+Check styling\n+-------------\n+\n+At the end we also need to check the styling. In Arrow we use a\n+utility called `Archery <https://arrow.apache.org/docs/developers/archery.html>`_\n+to check if code is in line with PEP 8 style guide.\n+\n+.. code:: console\n+   \n+   $ archery lint --python --fix\n+   INFO:archery:Running Python formatter (autopep8)\n+   INFO:archery:Running Python linter (flake8)\n+   /Users/alenkafrim/repos/arrow/python/pyarrow/tests/test_compute.py:2288:80: E501 line too long (88 > 79 characters)\n+\n+We get a warning that one line is too long. Lets\n+make the necessary corrections and run it again.\n+\n+.. code:: console\n+\n+   $ archery lint --python --fix\n+   INFO:archery:Running Python formatter (autopep8)\n+   INFO:archery:Running Python linter (flake8)\n+\n+Done. Now lets make the Pull Request!\n+\n+Creating a Pull Request\n+-----------------------\n+\n+First lets check again the changes made to the local copy\n+of the Arrow library in the shell.\n+\n+.. code:: console\n+\n+   $ git status\n+   On branch ARROW-14977\n+   Changes not staged for commit:\n+     (use \"git add <file>...\" to update what will be committed)\n+     (use \"git restore <file>...\" to discard changes in working directory)\n+      modified:   python/pyarrow/compute.py\n+      modified:   python/pyarrow/tests/test_compute.py\n+\n+   no changes added to commit (use \"git add\" and/or \"git commit -a\")\n+   \n+   $ git diff\n+   diff --git a/python/pyarrow/compute.py b/python/pyarrow/compute.py\n+   index 9dac606c3..e8fc775d8 100644\n+   --- a/python/pyarrow/compute.py\n+   +++ b/python/pyarrow/compute.py\n+   @@ -774,3 +774,45 @@ def bottom_k_unstable(values, k, sort_keys=None, *, memory_pool=None):\n+            sort_keys = map(lambda key_name: (key_name, \"ascending\"), sort_keys)\n+        options = SelectKOptions(k, sort_keys)\n+        return call_function(\"select_k_unstable\", [values], options, memory_pool)\n+   +\n+   +\n+   +def tutorial_min_max(values, skip_nulls=True):\n+   +    \"\"\"\n+   +    Compute the minimum-1 and maximum-1 values of a numeric array.\n+   +\n+   +    Null values are ignored by default. This can be changed through\n+   +    ScalarAggregateOptions.\n+   +\n+   +    This is a made-up feature for the tutorial purposes.\n+   +\n+   +    Parameters\n+   +    ----------\n+   +    values : Array\n+   +\n+   +    Returns\n+   +    -------\n+   +    result : StructScalar of min-1 and max+1\n+   +\n+   +    Examples\n+   +    --------\n+   +    >>> import pyarrow.compute as pc\n+   +    >>> data = [4, 5, 6, None, 1]\n+   +    >>> pc.tutorial_min_max(data)\n+   +    <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+   +    \"\"\"\n+   +\n+   +    options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+   +    min_max = call_function(\"min_max\", [values], options)\n+   +\n+   ...\n+\n+Everything looks OK. Now we can make the commit (save our changes\n+to the branch history):\n+\n+.. code:: console\n+\n+   $ git commit -am \"Adding a new compute feature for tutorial purposes\"\n+   [ARROW-14977 170ef85be] Adding a new compute feature for tutorial purposes\n+    2 files changed, 51 insertions(+)\n+   \n+\n+check the history of commits\n\nReview comment:\n       ```suggestion\r\n   You can use `git log` to check the history of commits:\r\n   ```\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger for 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n+do some research:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> data\n+   [4, 5, 6, None, 1]\n+   >>> pc.min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+   >>> pc.min_max(data, skip_nulls=False)\n+   <pyarrow.StructScalar: [('min', None), ('max', None)]>\n+\n+We will call our new feature ``pc.tutorial_min_max``. We want the\n+result from our function, that takes the same input data, to be\n+``[('min-', 0), ('max+', 7)]``. If we specify that the null value should be\n+included, the result should be equal to ``pc.min_max`` that is\n+``[('min', None), ('max', None)]``.\n+\n+Lets add the first trial code into ``arrow/python/pyarrow/compute.py``\n+where we first test the call to the \"min_max\" function from C++:\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+       \"\"\"\n+       Add docstings\n+\n+       Parameters\n+       ----------\n+       values : Array\n+\n+       Returns\n+       -------\n+       result : TODO\n+\n+       Examples\n+       --------\n+       >>> import pyarrow.compute as pc\n+       >>> data = [4, 5, 6, None, 1]\n+       >>> pc.tutorial_min_max(data)\n+       <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+       \"\"\"\n+\n+       options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+       return call_function(\"min_max\", [values], options)\n+\n+To see if this works we will need to import ``pyarrow.compute``\n+again and try:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> pc.tutorial_min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+\n+It\u2019s working. Now we must correct the limits to get the corrected\n+interval. To do that we have to do some research on \n+``pyarrow.StructScalar``. In ``test_scalar.py`` under the\n+``test_struct_duplicate_fields`` we can see an example of how the\n+``StructScalar`` is created. We could again run the Python console\n+and try creating one ourselves.\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n+   >>> ty = pa.struct([\n+   ...      pa.field('min-', pa.int64()),\n+   ...      pa.field('max+', pa.int64()),\n+   ...    ])\n+   >>> pa.scalar([('min-', 3), ('max+', 9)], type=ty)\n+   <pyarrow.StructScalar: [('min-', 3), ('max+', 9)]>\n+\n+With the new gained knowledge about ``StructScalar`` and additional\n+options for the ``pc.min_max`` function we can finish the work.\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+\n+      \"\"\"\n+      Compute the minimum-1 and maximum+1 values of a numeric array.\n+      Null values are ignored by default. This can be changed through\n+      ScalarAggregateOptions.\n+      This is a made-up feature for the tutorial purposes.\n+      Parameters\n+      ----------\n+      values : Array\n+      Returns\n+      -------\n+      result : StructScalar of min-1 and max+1\n+      Examples\n+      --------\n+      >>> import pyarrow.compute as pc\n+      >>> data = [4, 5, 6, None, 1]\n+      >>> pc.tutorial_min_max(data)\n+      <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+      \"\"\"\n+\n+      options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+      min_max = call_function(\"min_max\", [values], options)\n+\n+      if min_max[0].as_py() is not None:\n+        min_t = min_max[0].as_py()-1\n+        max_t = min_max[1].as_py()+1\n+      else:\n+        min_t = min_max[0].as_py()\n+        max_t = min_max[1].as_py()\n+\n+      ty = pa.struct([\n+        pa.field('min-', pa.int64()),\n+        pa.field('max+', pa.int64()),\n+      ])\n+      return pa.scalar([('min-', min_t), ('max+', max_t)], type=ty)\n+\n+.. TODO seealso\n+   .. For more information about the Arrow codebase visit \n+   .. :ref:``. (link to working on the Arrow codebase section)\n+\n+Adding a test\n+-------------\n+\n+Now we should add a unit test to ``python/pyarrow/tests/test_compute.py``\n+and run the pytest.\n+\n+.. code-block:: python\n+\n+   def test_tutorial_min_max():\n+    arr = [4, 5, 6, None, 1]\n+    l1 = {'min-': 0, 'max+': 7}\n+    l2 = {'min-': None, 'max+': None}\n+    assert pc.tutorial_min_max(arr).as_py() == l1\n+    assert pc.tutorial_min_max(arr,\n+                               skip_nulls=False).as_py() == l2\n+\n+With the unit test added we can run the pytest from the shell.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python -m pytest pyarrow/tests/test_compute.py -k test_tutorial_min_max                    \n+   ======================== test session starts ==========================\n+   platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\n+   rootdir: /Users/alenkafrim/repos/arrow/python, configfile: setup.cfg\n+   plugins: hypothesis-6.24.1, lazy-fixture-0.6.3\n+   collected 204 items / 203 deselected / 1 selected                                                                                   \n+\n+   pyarrow/tests/test_compute.py .                                  [100%]\n+\n+   ======================== 1 passed, 203 deselected in 0.16s ============\n+   \n+\n+   $ python -m pytest pyarrow/tests/test_compute.py                       \n+   ======================== test session starts ===========================\n+   platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\n+   rootdir: /Users/alenkafrim/repos/arrow/python, configfile: setup.cfg\n+   plugins: hypothesis-6.24.1, lazy-fixture-0.6.3\n+   collected 204 items                                                                                                                 \n+\n+   pyarrow/tests/test_compute.py ................................... [ 46%]\n+   .................................................                 [100%]\n+\n+   ========================= 204 passed in 0.49s ==========================\n+\n+.. seealso::\n+\n+   For more information about testing see :ref:`testing` section.\n+\n+Check styling\n+-------------\n+\n+At the end we also need to check the styling. In Arrow we use a\n+utility called `Archery <https://arrow.apache.org/docs/developers/archery.html>`_\n+to check if code is in line with PEP 8 style guide.\n+\n+.. code:: console\n+   \n+   $ archery lint --python --fix\n+   INFO:archery:Running Python formatter (autopep8)\n+   INFO:archery:Running Python linter (flake8)\n+   /Users/alenkafrim/repos/arrow/python/pyarrow/tests/test_compute.py:2288:80: E501 line too long (88 > 79 characters)\n+\n+We get a warning that one line is too long. Lets\n+make the necessary corrections and run it again.\n\nReview comment:\n       Something to note for the reader: the `--fix` command means it will attempt to fix any style issues, but some issues like line length can't be fixed automatically.\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger for 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n+do some research:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> data\n+   [4, 5, 6, None, 1]\n+   >>> pc.min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+   >>> pc.min_max(data, skip_nulls=False)\n+   <pyarrow.StructScalar: [('min', None), ('max', None)]>\n+\n+We will call our new feature ``pc.tutorial_min_max``. We want the\n+result from our function, that takes the same input data, to be\n+``[('min-', 0), ('max+', 7)]``. If we specify that the null value should be\n+included, the result should be equal to ``pc.min_max`` that is\n+``[('min', None), ('max', None)]``.\n+\n+Lets add the first trial code into ``arrow/python/pyarrow/compute.py``\n+where we first test the call to the \"min_max\" function from C++:\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+       \"\"\"\n+       Add docstings\n+\n+       Parameters\n+       ----------\n+       values : Array\n+\n+       Returns\n+       -------\n+       result : TODO\n+\n+       Examples\n+       --------\n+       >>> import pyarrow.compute as pc\n+       >>> data = [4, 5, 6, None, 1]\n+       >>> pc.tutorial_min_max(data)\n+       <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+       \"\"\"\n+\n+       options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+       return call_function(\"min_max\", [values], options)\n+\n+To see if this works we will need to import ``pyarrow.compute``\n+again and try:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> pc.tutorial_min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+\n+It\u2019s working. Now we must correct the limits to get the corrected\n+interval. To do that we have to do some research on \n+``pyarrow.StructScalar``. In ``test_scalar.py`` under the\n+``test_struct_duplicate_fields`` we can see an example of how the\n+``StructScalar`` is created. We could again run the Python console\n\nReview comment:\n       Might be worth adding a permalink to the code: \r\n   \r\n   ```https://github.com/apache/arrow/blob/994074d2e7ff073301e0959dbc5bb595a1e2a41b/python/pyarrow/tests/test_scalars.py#L548-L552```\r\n   \r\n   Also:\r\n   \r\n   ```suggestion\r\n   ``pyarrow.StructScalar``. In ``test_scalars.py`` under the\r\n   ``test_struct_duplicate_fields`` we can see an example of how the\r\n   ``StructScalar`` is created. We could again run the Python console\r\n   ```\r\n   \r\n   \r\n   \r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-14T21:10:28.378+0000",
                    "updated": "2021-12-14T21:10:28.378+0000",
                    "started": "2021-12-14T21:10:28.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696154",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/696412",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913#discussion_r769329962\n\n\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n\nReview comment:\n       That is correct. I do not think Arrow is a project where ppl will go and learn things in this way but I can make it more explicit if needed. Step by step guide is added in the New Contributors Guide section and this Tutorial is more of a practical view of the contributing process.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T07:34:23.774+0000",
                    "updated": "2021-12-15T07:34:23.774+0000",
                    "started": "2021-12-15T07:34:23.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696412",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/696415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913#discussion_r769332431\n\n\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger for 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n+do some research:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> data\n+   [4, 5, 6, None, 1]\n+   >>> pc.min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+   >>> pc.min_max(data, skip_nulls=False)\n+   <pyarrow.StructScalar: [('min', None), ('max', None)]>\n+\n+We will call our new feature ``pc.tutorial_min_max``. We want the\n+result from our function, that takes the same input data, to be\n+``[('min-', 0), ('max+', 7)]``. If we specify that the null value should be\n+included, the result should be equal to ``pc.min_max`` that is\n+``[('min', None), ('max', None)]``.\n+\n+Lets add the first trial code into ``arrow/python/pyarrow/compute.py``\n+where we first test the call to the \"min_max\" function from C++:\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+       \"\"\"\n+       Add docstings\n+\n+       Parameters\n+       ----------\n+       values : Array\n+\n+       Returns\n+       -------\n+       result : TODO\n+\n+       Examples\n+       --------\n+       >>> import pyarrow.compute as pc\n+       >>> data = [4, 5, 6, None, 1]\n+       >>> pc.tutorial_min_max(data)\n+       <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+       \"\"\"\n+\n+       options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+       return call_function(\"min_max\", [values], options)\n+\n+To see if this works we will need to import ``pyarrow.compute``\n+again and try:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> pc.tutorial_min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+\n+It\u2019s working. Now we must correct the limits to get the corrected\n+interval. To do that we have to do some research on \n+``pyarrow.StructScalar``. In ``test_scalar.py`` under the\n+``test_struct_duplicate_fields`` we can see an example of how the\n+``StructScalar`` is created. We could again run the Python console\n+and try creating one ourselves.\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n+   >>> ty = pa.struct([\n+   ...      pa.field('min-', pa.int64()),\n+   ...      pa.field('max+', pa.int64()),\n+   ...    ])\n+   >>> pa.scalar([('min-', 3), ('max+', 9)], type=ty)\n+   <pyarrow.StructScalar: [('min-', 3), ('max+', 9)]>\n+\n+With the new gained knowledge about ``StructScalar`` and additional\n+options for the ``pc.min_max`` function we can finish the work.\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+\n+      \"\"\"\n+      Compute the minimum-1 and maximum+1 values of a numeric array.\n+      Null values are ignored by default. This can be changed through\n+      ScalarAggregateOptions.\n+      This is a made-up feature for the tutorial purposes.\n+      Parameters\n+      ----------\n+      values : Array\n+      Returns\n+      -------\n+      result : StructScalar of min-1 and max+1\n+      Examples\n+      --------\n+      >>> import pyarrow.compute as pc\n+      >>> data = [4, 5, 6, None, 1]\n+      >>> pc.tutorial_min_max(data)\n+      <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+      \"\"\"\n+\n+      options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+      min_max = call_function(\"min_max\", [values], options)\n+\n+      if min_max[0].as_py() is not None:\n+        min_t = min_max[0].as_py()-1\n+        max_t = min_max[1].as_py()+1\n+      else:\n+        min_t = min_max[0].as_py()\n+        max_t = min_max[1].as_py()\n+\n+      ty = pa.struct([\n+        pa.field('min-', pa.int64()),\n+        pa.field('max+', pa.int64()),\n+      ])\n+      return pa.scalar([('min-', min_t), ('max+', max_t)], type=ty)\n+\n+.. TODO seealso\n+   .. For more information about the Arrow codebase visit \n+   .. :ref:``. (link to working on the Arrow codebase section)\n+\n+Adding a test\n+-------------\n+\n+Now we should add a unit test to ``python/pyarrow/tests/test_compute.py``\n+and run the pytest.\n+\n+.. code-block:: python\n+\n+   def test_tutorial_min_max():\n+    arr = [4, 5, 6, None, 1]\n+    l1 = {'min-': 0, 'max+': 7}\n+    l2 = {'min-': None, 'max+': None}\n+    assert pc.tutorial_min_max(arr).as_py() == l1\n+    assert pc.tutorial_min_max(arr,\n+                               skip_nulls=False).as_py() == l2\n+\n+With the unit test added we can run the pytest from the shell.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python -m pytest pyarrow/tests/test_compute.py -k test_tutorial_min_max                    \n+   ======================== test session starts ==========================\n+   platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\n+   rootdir: /Users/alenkafrim/repos/arrow/python, configfile: setup.cfg\n+   plugins: hypothesis-6.24.1, lazy-fixture-0.6.3\n+   collected 204 items / 203 deselected / 1 selected                                                                                   \n+\n+   pyarrow/tests/test_compute.py .                                  [100%]\n+\n+   ======================== 1 passed, 203 deselected in 0.16s ============\n+   \n+\n+   $ python -m pytest pyarrow/tests/test_compute.py                       \n+   ======================== test session starts ===========================\n+   platform darwin -- Python 3.9.7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\n+   rootdir: /Users/alenkafrim/repos/arrow/python, configfile: setup.cfg\n+   plugins: hypothesis-6.24.1, lazy-fixture-0.6.3\n+   collected 204 items                                                                                                                 \n+\n+   pyarrow/tests/test_compute.py ................................... [ 46%]\n+   .................................................                 [100%]\n+\n+   ========================= 204 passed in 0.49s ==========================\n+\n+.. seealso::\n+\n+   For more information about testing see :ref:`testing` section.\n+\n+Check styling\n+-------------\n+\n+At the end we also need to check the styling. In Arrow we use a\n+utility called `Archery <https://arrow.apache.org/docs/developers/archery.html>`_\n+to check if code is in line with PEP 8 style guide.\n+\n+.. code:: console\n+   \n+   $ archery lint --python --fix\n+   INFO:archery:Running Python formatter (autopep8)\n+   INFO:archery:Running Python linter (flake8)\n+   /Users/alenkafrim/repos/arrow/python/pyarrow/tests/test_compute.py:2288:80: E501 line too long (88 > 79 characters)\n+\n+We get a warning that one line is too long. Lets\n+make the necessary corrections and run it again.\n\nReview comment:\n       I will have to add a section on styling to the guide and will also add this info there.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T07:36:55.351+0000",
                    "updated": "2021-12-15T07:36:55.351+0000",
                    "started": "2021-12-15T07:36:55.351+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696415",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/696420",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913#discussion_r769339028\n\n\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n\nReview comment:\n       That is right. This two ways of working are both valid I think. But would keep it as it is so it is in line with the docs written if you agree?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T07:43:47.434+0000",
                    "updated": "2021-12-15T07:43:47.434+0000",
                    "started": "2021-12-15T07:43:47.434+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696420",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/696784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on a change in pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913#discussion_r769859806\n\n\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n\nReview comment:\n       Yeah feel free to do that however you want it \ud83d\ude04  Just wanted to share that.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T17:54:27.121+0000",
                    "updated": "2021-12-15T17:54:27.121+0000",
                    "started": "2021-12-15T17:54:27.121+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696784",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/696805",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on a change in pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913#discussion_r769866631\n\n\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,532 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n\nReview comment:\n       ```suggestion\r\n   Let's setup the Arrow repository. We presume here that Git is\r\n   ```\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,532 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger by 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n\nReview comment:\n       This is done in the screenshot, but I think worth calling out to the reader: \"Make sure you assign yourself to the issue to let others know you are working on it.\"\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,513 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n\nReview comment:\n       ```suggestion\r\n   will be working on a specific case. This tutorial is not meant\r\n   as a step-by-step guide.\r\n   ```\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,532 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger by 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n+do some research:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> data\n+   [4, 5, 6, None, 1]\n+   >>> pc.min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+   >>> pc.min_max(data, skip_nulls=False)\n+   <pyarrow.StructScalar: [('min', None), ('max', None)]>\n+\n+We will call our new feature ``pc.tutorial_min_max``. We want the\n+result from our function, that takes the same input data, to be\n+``[('min-', 0), ('max+', 7)]``. If we specify that the null value should be\n+included, the result should be equal to ``pc.min_max`` that is\n+``[('min', None), ('max', None)]``.\n+\n+Lets add the first trial code into ``arrow/python/pyarrow/compute.py``\n+where we first test the call to the \"min_max\" function from C++:\n+\n+.. code-block:: python\n+\n+   def tutorial_min_max(values, skip_nulls=True):\n+       \"\"\"\n+       Add docstrings\n+\n+       Parameters\n+       ----------\n+       values : Array\n+\n+       Returns\n+       -------\n+       result : TODO\n+\n+       Examples\n+       --------\n+       >>> import pyarrow.compute as pc\n+       >>> data = [4, 5, 6, None, 1]\n+       >>> pc.tutorial_min_max(data)\n+       <pyarrow.StructScalar: [('min-', 0), ('max+', 7)]>\n+       \"\"\"\n+\n+       options = ScalarAggregateOptions(skip_nulls=skip_nulls)\n+       return call_function(\"min_max\", [values], options)\n+\n+To see if this works we will need to import ``pyarrow.compute``\n+again and try:\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow.compute as pc\n+   >>> data = [4, 5, 6, None, 1]\n+   >>> pc.tutorial_min_max(data)\n+   <pyarrow.StructScalar: [('min', 1), ('max', 6)]>\n+\n+It\u2019s working. Now we must correct the limits to get the corrected\n+interval. To do that we have to do some research on ``pyarrow.StructScalar``.\n+In `test_scalars.py <https://github.com/apache/arrow/blob/994074d2e7ff073301e0959dbc5bb595a1e2a41b/python/pyarrow/tests/test_scalars.py#L547-L553>`_\n+under the ``test_struct_duplicate_fields`` we can see an example\n+of how the ``StructScalar`` is created. We could again run the\n+Python console and try creating one ourselves.\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n+   >>> ty = pa.struct([\n+   ...      pa.field('min-', pa.int64()),\n+   ...      pa.field('max+', pa.int64()),\n+   ...    ])\n+   >>> pa.scalar([('min-', 3), ('max+', 9)], type=ty)\n+   <pyarrow.StructScalar: [('min-', 3), ('max+', 9)]>\n+\n+.. note::\n+\n+   In cases where we don't yet have good documentation, unit tests\n+   can be a good place to look for code examples\n\nReview comment:\n       ```suggestion\r\n      can be a good place to look for code examples.\r\n   ```\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,532 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger by 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n+We will define the new feature at the end of the ``compute.py`` file. \n+\n+Lets run some code in the Python console from ``arrow/python``\n+directory in order to learn more about ``pc.min_max``.\n+\n+.. code:: console\n+\n+   $ cd python\n+   $ python\n+\n+   Python 3.9.7 (default, Oct 22 2021, 13:24:00) \n+   [Clang 13.0.0 (clang-1300.0.29.3)] on darwin\n+   Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n+   \n+We have entered into Python console from the shell and we can\n\nReview comment:\n       ```suggestion\r\n   We have entered into the Python console from the shell and we can\r\n   ```\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,532 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger by 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n\nReview comment:\n       It's either pyx or pyd, right?\r\n   ```suggestion\r\n   with ``_compute.pyx`` the functions from C++ get wrapped into Python.\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T18:44:35.572+0000",
                    "updated": "2021-12-15T18:44:35.572+0000",
                    "started": "2021-12-15T18:44:35.572+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696805",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/697110",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913#discussion_r770275428\n\n\n\n##########\nFile path: docs/source/developers/guide/tutorials/python_tutorial.rst\n##########\n@@ -25,3 +25,532 @@\n ***************\n Python tutorial\n ***************\n+\n+In this tutorial we will make an actual feature contribution to\n+Arrow following the steps specified by :ref:`quick-ref-guide`\n+section of the guide and a more detailed :ref:`step_by_step`\n+section. Navigate there whenever there is some information\n+you may find is missing here.\n+\n+The feature contribution will be added to the compute module\n+in PyArrow. But you can also follow the steps in case you are\n+correcting a bug or adding a binding.\n+\n+This tutorial is different from the :ref:`step_by_step` as we\n+will be working on a specific case. This tutorial is not meant\n+as a step by step guide.\n+\n+**Lets start!**\n+\n+Set up\n+------\n+\n+Lets setup the Arrow repository. We presume here that Git is\n+already installed. Otherwise please see the :ref:`set-up` section.\n+\n+Once the `Apache Arrow repository <https://github.com/apache/arrow>`_\n+is forked we will clone it and add the link of the main repository\n+to our upstream.\n+\n+.. code:: console\n+\n+   $ git clone https://github.com/<your username>/arrow.git\n+   $ cd arrow\n+   $ git remote add upstream https://github.com/apache/arrow\n+\n+Building PyArrow\n+----------------\n+\n+Script for building PyArrow differs depending on the Operating\n+System you are using. For this reason we will only refer to\n+the instructions for the building process in this tutorial.\n+\n+.. seealso::\n+\n+   For the **introduction** to the building process refer to the\n+   :ref:`build-arrow-guide` section.\n+\n+   For the **instructions** on how to build PyArrow refer to the\n+   :ref:`build_pyarrow` section.\n+\n+Create a JIRA issue for the new feature\n+---------------------------------------\n+\n+We will add a new feature that imitates an existing function\n+``min_max`` from the ``arrow.compute`` module but makes the\n+interval bigger by 1 in both directions. Note that this is a\n+made-up function for the purpose of this guide.\n+\n+See the example of the ``pc.min_max`` in\n+`this link <https://arrow.apache.org/cookbook/py/data.html#computing-mean-min-max-values-of-an-array>`_.\n+\n+First we need to create a JIRA issue as it doesn't exist yet.\n+With a JIRA account created we will navigate to the\n+`Apache Arrow JIRA dashboard <https://issues.apache.org/jira/projects/ARROW>`_\n+and click on the **Create** button.\n+\n+.. figure:: python_tutorial_jira_title.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a new issue.\n+\n+   Creating a JIRA issue, adding title (summary) and components.\n+\n+.. figure:: python_tutorial_jira_description.jpeg\n+   :scale: 70 %\n+   :alt: JIRA dashboard with a window for creating a\n+         description for the new issue.\n+\n+   Creating a JIRA issue, adding a description.\n+\n+We will also add some comments to start a conversation.\n+\n+.. figure:: python_tutorial_jira_comment.jpeg\n+   :scale: 50 %\n+   :alt: JIRA issue page where comment is being added.\n+\n+   Adding a comment to the JIRA ticket we created.\n+\n+We have successfully created a new JIRA issue with index ARROW-14977.\n+\n+.. figure:: python_tutorial_jira_issue.jpeg\n+   :scale: 50 %\n+   :alt: JIRA page of the issue just created.\n+\n+   Our JIRA issue. Yay!\n+\n+To see the issue in JIRA follow\n+`this link <https://issues.apache.org/jira/browse/ARROW-14977>`_.\n+\n+.. seealso::\n+\n+   To get more information on JIRA issues go to\n+   :ref:`finding-issues` part of the guide.\n+\n+Start the work on a new branch\n+------------------------------\n+\n+Before we start working on adding the feature we should\n+create a new branch from updated master.\n+\n+.. code:: console\n+\n+   $ git checkout master\n+   $ git fetch upstream\n+   $ git pull --ff-only upstream master\n+   $ git checkout -b ARROW-14977\n+\n+Lets research the Arrow library to see where the ``pc.min_max``\n+function is defined/connected with the C++ and get an idea\n+where we could implement the new feature.\n+\n+.. figure:: python_tutorial_github_search.jpeg\n+   :scale: 50 %\n+   :alt: Apache Arrow GitHub repository dashboard where we are\n+         searching for a pc.min_max function reference.\n+\n+   We could try to search for the function reference in a\n+   GitHub Apache Arrow repository.\n+\n+.. figure:: python_tutorial_github_find_in_file.jpeg\n+   :scale: 50 %\n+   :alt: In the GitHub repository we are searching through the\n+         test_compute.py file for the pc.min_max function.\n+\n+   And search through the ``test_compute.py`` file in ``pyarrow``\n+   folder.\n+\n+From the search we can see that the function is tested in the\n+``python/pyarrow/tests/test_compute.py`` file that would mean the\n+function is defined in the ``compute.py`` file.\n+\n+After examining the ``compute.py`` file we can see that together\n+with ``_compute.py`` the functions from C++ get wrapped into Python.\n\nReview comment:\n       Oops, thanks!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T07:15:45.763+0000",
                    "updated": "2021-12-16T07:15:45.763+0000",
                    "started": "2021-12-16T07:15:45.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697110",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/697353",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913#issuecomment-995994998\n\n\n   > Awesome! Looks great to me.\r\n   > \r\n   > Maybe @thisisnic will want to look at it too.\r\n   \r\n   Given you've made quite a few suggestions on this PR already @wjones127 , unless there's anything specific you'd like me to look at, then if you and @AlenkaF are happy with it, I have every faith it's all good!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T16:49:48.701+0000",
                    "updated": "2021-12-16T16:49:48.701+0000",
                    "started": "2021-12-16T16:49:48.701+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697353",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/699281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic closed pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-21T09:56:05.144+0000",
                    "updated": "2021-12-21T09:56:05.144+0000",
                    "started": "2021-12-21T09:56:05.143+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699281",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/699284",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913#issuecomment-998638149\n\n\n   Benchmark runs are scheduled for baseline = 02e9464c506ed46883b17fd9b1576ff547b09c18 and contender = f165370c919da5d84faed1cf36ad1a137ddcfaf0. f165370c919da5d84faed1cf36ad1a137ddcfaf0 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/fb76270cca444a65a84c75dddb58eb3d...48837a9c59a64447b9b716ed8aabe9a2/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/2a8580aa3a234e3aac0c8f6b4f153f0e...80ae7d445a724da58a3cdcbaf173cce0/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/99b4a136a4bf4ad084f608bd185cd6e2...9b16365fb1584bbb8dba6757c378628e/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-21T10:01:06.582+0000",
                    "updated": "2021-12-21T10:01:06.582+0000",
                    "started": "2021-12-21T10:01:06.582+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699284",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/699288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913#issuecomment-998638149\n\n\n   Benchmark runs are scheduled for baseline = 02e9464c506ed46883b17fd9b1576ff547b09c18 and contender = f165370c919da5d84faed1cf36ad1a137ddcfaf0. f165370c919da5d84faed1cf36ad1a137ddcfaf0 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/fb76270cca444a65a84c75dddb58eb3d...48837a9c59a64447b9b716ed8aabe9a2/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/2a8580aa3a234e3aac0c8f6b4f153f0e...80ae7d445a724da58a3cdcbaf173cce0/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/99b4a136a4bf4ad084f608bd185cd6e2...9b16365fb1584bbb8dba6757c378628e/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-21T10:11:20.624+0000",
                    "updated": "2021-12-21T10:11:20.624+0000",
                    "started": "2021-12-21T10:11:20.624+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699288",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/699317",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913#issuecomment-998638149\n\n\n   Benchmark runs are scheduled for baseline = 02e9464c506ed46883b17fd9b1576ff547b09c18 and contender = f165370c919da5d84faed1cf36ad1a137ddcfaf0. f165370c919da5d84faed1cf36ad1a137ddcfaf0 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/fb76270cca444a65a84c75dddb58eb3d...48837a9c59a64447b9b716ed8aabe9a2/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/2a8580aa3a234e3aac0c8f6b4f153f0e...80ae7d445a724da58a3cdcbaf173cce0/)\n   [Finished :arrow_down:0.27% :arrow_up:0.04%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/99b4a136a4bf4ad084f608bd185cd6e2...9b16365fb1584bbb8dba6757c378628e/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-21T11:51:20.170+0000",
                    "updated": "2021-12-21T11:51:20.170+0000",
                    "started": "2021-12-21T11:51:20.169+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699317",
                    "issueId": "13410201"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/worklog/699467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11913:\nURL: https://github.com/apache/arrow/pull/11913#issuecomment-998638149\n\n\n   Benchmark runs are scheduled for baseline = 02e9464c506ed46883b17fd9b1576ff547b09c18 and contender = f165370c919da5d84faed1cf36ad1a137ddcfaf0. f165370c919da5d84faed1cf36ad1a137ddcfaf0 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/fb76270cca444a65a84c75dddb58eb3d...48837a9c59a64447b9b716ed8aabe9a2/)\n   [Failed :arrow_down:1.79% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/2a8580aa3a234e3aac0c8f6b4f153f0e...80ae7d445a724da58a3cdcbaf173cce0/)\n   [Finished :arrow_down:0.27% :arrow_up:0.04%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/99b4a136a4bf4ad084f608bd185cd6e2...9b16365fb1584bbb8dba6757c378628e/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-21T15:51:43.740+0000",
                    "updated": "2021-12-21T15:51:43.740+0000",
                    "started": "2021-12-21T15:51:43.740+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "699467",
                    "issueId": "13410201"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6736a12d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f730b53[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@719fd462[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@16517091[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79afab50[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4b5897eb[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@446b6626[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@592343c2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d52869d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@523aa513[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d7fb324[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@e81c41a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Dec 21 09:56:02 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-12-21T09:56:02.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14602/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-11-05T08:51:30.000+0000",
        "updated": "2021-12-23T12:39:49.000+0000",
        "timeoriginalestimate": null,
        "description": "Make a simple tutorial of adding a unit test PR.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Doc] Tutorial - Python feature PR",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410201/comment/17463096",
                    "id": "17463096",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
                        "name": "thisisnic",
                        "key": "thisisnic",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
                        },
                        "displayName": "Nicola Crane",
                        "active": true,
                        "timeZone": "Africa/Casablanca"
                    },
                    "body": "Issue resolved by pull request 11913\n[https://github.com/apache/arrow/pull/11913]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
                        "name": "thisisnic",
                        "key": "thisisnic",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
                        },
                        "displayName": "Nicola Crane",
                        "active": true,
                        "timeZone": "Africa/Casablanca"
                    },
                    "created": "2021-12-21T09:56:02.592+0000",
                    "updated": "2021-12-21T09:56:02.592+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0wgw8:",
        "customfield_12314139": null
    }
}