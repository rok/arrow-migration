{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13217994",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994",
    "key": "ARROW-4679",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12554927",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12554927",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "outwardIssue": {
                    "id": "13216248",
                    "key": "ARROW-4603",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216248",
                    "fields": {
                        "summary": "[Rust] [DataFusion] Execution context should allow in-memory data sources to be registered",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4679/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/204047",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion [WIP]\nURL: https://github.com/apache/arrow/pull/3754\n \n \n   This is a work in progress to add a new data source for in-memory data, and refactors the existing data source code so that the traits are defined separately from the existing CSV implementation.\r\n   \r\n   My goals for this are:\r\n   - Use the in-memory data source for benchmarks to remove disk I/O from the equation\r\n   - Have the ability to load other data sources into memory and then be able to query them \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T03:35:07.565+0000",
                    "updated": "2019-02-26T03:35:07.565+0000",
                    "started": "2019-02-26T03:35:07.564+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204047",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/204096",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#issuecomment-467302348\n \n \n   @sunchao @paddyhoran @kszucs Would appreciate a review when you get a chance\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T05:37:42.929+0000",
                    "updated": "2019-02-26T05:37:42.929+0000",
                    "started": "2019-02-26T05:37:42.928+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204096",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/205582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#discussion_r261023927\n \n \n\n ##########\n File path: rust/datafusion/src/datasource/memory.rs\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! In-memory data source for presenting a Vec<RecordBatch> as a data source that can be\n+//! queried by DataFusion. This allows data to be pre-loaded into memory and then repeatedly\n+//! queried without incurring additional file I/O overhead.\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::datasource::{RecordBatchIterator, Table};\n+use crate::execution::error::Result;\n+\n+pub struct MemTable {\n+    schema: Arc<Schema>,\n+    batches: Vec<RecordBatch>,\n+}\n+\n+impl MemTable {\n+    pub fn new(schema: Arc<Schema>, batches: Vec<RecordBatch>) -> Self {\n+        Self { schema, batches }\n+    }\n+\n+    /// Create a mem table by reading from another data source\n+    pub fn load(t: &Table) -> Self {\n+        let schema = t.schema();\n+        let it = t.scan(&None, 1024 * 1024);\n+        let mut it_mut = it.borrow_mut();\n+\n+        let mut data: Vec<RecordBatch> = vec![];\n+\n+        while let Ok(Some(batch)) = it_mut.next() {\n+            data.push(batch);\n+        }\n+        MemTable::new(schema.clone(), data)\n+    }\n+}\n+\n+impl Table for MemTable {\n+    fn schema(&self) -> &Arc<Schema> {\n+        &self.schema\n+    }\n+\n+    fn scan(\n+        &self,\n+        projection: &Option<Vec<usize>>,\n+        _batch_size: usize,\n+    ) -> Rc<RefCell<RecordBatchIterator>> {\n+        let columns: Vec<usize> = match projection {\n+            Some(p) => p.clone(),\n+            None => {\n+                let l = self.schema.fields().len();\n+                let mut v = Vec::with_capacity(l);\n+                for i in 0..l {\n+                    v.push(i);\n+                }\n+                v\n+            }\n+        };\n+\n+        let projected_schema = Arc::new(Schema::new(\n+            columns\n+                .iter()\n+                .map(|i| self.schema.field(*i).clone())\n+                .collect(),\n+        ));\n+\n+        Rc::new(RefCell::new(MemBatchIterator {\n+            schema: projected_schema.clone(),\n+            index: 0,\n+            batches: self\n+                .batches\n+                .iter()\n+                .map(|batch| {\n+                    RecordBatch::new(\n+                        projected_schema.clone(),\n+                        columns.iter().map(|i| batch.column(*i).clone()).collect(),\n+                    )\n+                })\n+                .collect(),\n+        }))\n+    }\n+}\n+\n+pub struct MemBatchIterator {\n+    schema: Arc<Schema>,\n+    index: usize,\n+    batches: Vec<RecordBatch>,\n+}\n+\n+impl RecordBatchIterator for MemBatchIterator {\n+    fn schema(&self) -> &Arc<Schema> {\n+        &self.schema\n+    }\n+\n+    fn next(&mut self) -> Result<Option<RecordBatch>> {\n+        if self.index < self.batches.len() {\n+            self.index += 1;\n+            Ok(Some(self.batches[self.index - 1].clone()))\n+        } else {\n+            Ok(None)\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use arrow::array::Int32Array;\n+    use arrow::datatypes::{DataType, Field, Schema};\n+\n+    #[test]\n+    fn test1() {\n \n Review comment:\n   I think this test name could be more descriptive than `test1`, maybe even split this into 2 tests, no projection and with projection?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T02:20:41.833+0000",
                    "updated": "2019-02-28T02:20:41.833+0000",
                    "started": "2019-02-28T02:20:41.832+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205582",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#discussion_r261480992\n \n \n\n ##########\n File path: rust/datafusion/src/datasource/memory.rs\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! In-memory data source for presenting a Vec<RecordBatch> as a data source that can be\n+//! queried by DataFusion. This allows data to be pre-loaded into memory and then repeatedly\n+//! queried without incurring additional file I/O overhead.\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::datasource::{RecordBatchIterator, Table};\n+use crate::execution::error::Result;\n+\n+pub struct MemTable {\n+    schema: Arc<Schema>,\n+    batches: Vec<RecordBatch>,\n+}\n+\n+impl MemTable {\n+    pub fn new(schema: Arc<Schema>, batches: Vec<RecordBatch>) -> Self {\n \n Review comment:\n   In cpp parlace it's common to check if the batches align with the provided schema. Do you think it'd be useful to do here? https://github.com/apache/arrow/blob/master/cpp/src/arrow/table.cc#L408\r\n   \r\n   I suppose for datasources which are read by Arrow from disk, this won't be an issue, but someone could provide mismatching in-memory data.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T05:14:39.473+0000",
                    "updated": "2019-03-01T05:14:39.473+0000",
                    "started": "2019-03-01T05:14:39.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206236",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206237",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#discussion_r261481498\n \n \n\n ##########\n File path: rust/datafusion/src/datasource/datasource.rs\n ##########\n @@ -0,0 +1,46 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Data source traits\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::execution::error::Result;\n+\n+/// Source table\n+pub trait Table {\n+    /// Get a reference to the schema for this table\n+    fn schema(&self) -> &Arc<Schema>;\n+\n+    /// Perform a scan of a table and return an iterator over the data\n+    fn scan(\n+        &self,\n+        projection: &Option<Vec<usize>>,\n+        batch_size: usize,\n+    ) -> Rc<RefCell<RecordBatchIterator>>;\n+}\n+\n+/// Iterator for reading a series of record batches with a known schema\n+pub trait RecordBatchIterator {\n \n Review comment:\n   @liurenjie1024 might this be a good starting place for [ARROW-3706](https://issues.apache.org/jira/browse/ARROW-3706)?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T05:14:39.638+0000",
                    "updated": "2019-03-01T05:14:39.638+0000",
                    "started": "2019-03-01T05:14:39.637+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206237",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#discussion_r261480992\n \n \n\n ##########\n File path: rust/datafusion/src/datasource/memory.rs\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! In-memory data source for presenting a Vec<RecordBatch> as a data source that can be\n+//! queried by DataFusion. This allows data to be pre-loaded into memory and then repeatedly\n+//! queried without incurring additional file I/O overhead.\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::datasource::{RecordBatchIterator, Table};\n+use crate::execution::error::Result;\n+\n+pub struct MemTable {\n+    schema: Arc<Schema>,\n+    batches: Vec<RecordBatch>,\n+}\n+\n+impl MemTable {\n+    pub fn new(schema: Arc<Schema>, batches: Vec<RecordBatch>) -> Self {\n \n Review comment:\n   In cpp there is a check if the batches align with the provided schema. Do you think it'd be useful to do here? https://github.com/apache/arrow/blob/master/cpp/src/arrow/table.cc#L408\r\n   \r\n   I suppose for datasources which are read by Arrow from disk, this won't be an issue, but someone could provide mismatching in-memory data.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T09:45:39.443+0000",
                    "updated": "2019-03-01T09:45:39.443+0000",
                    "started": "2019-03-01T09:45:39.442+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206334",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#discussion_r261653219\n \n \n\n ##########\n File path: rust/datafusion/src/datasource/memory.rs\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! In-memory data source for presenting a Vec<RecordBatch> as a data source that can be\n+//! queried by DataFusion. This allows data to be pre-loaded into memory and then repeatedly\n+//! queried without incurring additional file I/O overhead.\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::datasource::{RecordBatchIterator, Table};\n+use crate::execution::error::Result;\n+\n+pub struct MemTable {\n+    schema: Arc<Schema>,\n+    batches: Vec<RecordBatch>,\n+}\n+\n+impl MemTable {\n+    pub fn new(schema: Arc<Schema>, batches: Vec<RecordBatch>) -> Self {\n \n Review comment:\n   Also, I filed https://issues.apache.org/jira/browse/ARROW-4727\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T15:47:14.894+0000",
                    "updated": "2019-03-01T15:47:14.894+0000",
                    "started": "2019-03-01T15:47:14.894+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206481",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#discussion_r261658932\n \n \n\n ##########\n File path: rust/datafusion/src/datasource/datasource.rs\n ##########\n @@ -0,0 +1,46 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Data source traits\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::execution::error::Result;\n+\n+/// Source table\n+pub trait Table {\n+    /// Get a reference to the schema for this table\n+    fn schema(&self) -> &Arc<Schema>;\n+\n+    /// Perform a scan of a table and return an iterator over the data\n+    fn scan(\n+        &self,\n+        projection: &Option<Vec<usize>>,\n+        batch_size: usize,\n+    ) -> Rc<RefCell<RecordBatchIterator>>;\n+}\n+\n+/// Iterator for reading a series of record batches with a known schema\n+pub trait RecordBatchIterator {\n \n Review comment:\n   Yes.  I would suggest it extends Iterator<Item=Result<RecordBatch>> to be rust idomic.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:01:32.459+0000",
                    "updated": "2019-03-01T16:01:32.459+0000",
                    "started": "2019-03-01T16:01:32.459+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206488",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#discussion_r261658932\n \n \n\n ##########\n File path: rust/datafusion/src/datasource/datasource.rs\n ##########\n @@ -0,0 +1,46 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Data source traits\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::execution::error::Result;\n+\n+/// Source table\n+pub trait Table {\n+    /// Get a reference to the schema for this table\n+    fn schema(&self) -> &Arc<Schema>;\n+\n+    /// Perform a scan of a table and return an iterator over the data\n+    fn scan(\n+        &self,\n+        projection: &Option<Vec<usize>>,\n+        batch_size: usize,\n+    ) -> Rc<RefCell<RecordBatchIterator>>;\n+}\n+\n+/// Iterator for reading a series of record batches with a known schema\n+pub trait RecordBatchIterator {\n \n Review comment:\n   Yes.  I would suggest it extends `Iterator<Item=Result<RecordBatch>>` to be rust idomic.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:01:55.226+0000",
                    "updated": "2019-03-01T16:01:55.226+0000",
                    "started": "2019-03-01T16:01:55.222+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206489",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#discussion_r261668637\n \n \n\n ##########\n File path: rust/datafusion/src/datasource/memory.rs\n ##########\n @@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! In-memory data source for presenting a Vec<RecordBatch> as a data source that can be\n+//! queried by DataFusion. This allows data to be pre-loaded into memory and then repeatedly\n+//! queried without incurring additional file I/O overhead.\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::datasource::{RecordBatchIterator, Table};\n+use crate::execution::error::{ExecutionError, Result};\n+\n+/// In-memory table\n+pub struct MemTable {\n+    schema: Arc<Schema>,\n+    batches: Vec<RecordBatch>,\n+}\n+\n+impl MemTable {\n+    /// Create a new in-memory table from the provided schema and record batches\n+    pub fn new(schema: Arc<Schema>, batches: Vec<RecordBatch>) -> Result<Self> {\n+        if batches\n+            .iter()\n+            .all(|batch| batch.num_columns() == schema.fields().len())\n \n Review comment:\n   Should we do more schema check here? Only compare number of fields may not be enough\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:26:31.705+0000",
                    "updated": "2019-03-01T16:26:31.705+0000",
                    "started": "2019-03-01T16:26:31.705+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206500",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#discussion_r261669671\n \n \n\n ##########\n File path: rust/datafusion/src/datasource/memory.rs\n ##########\n @@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! In-memory data source for presenting a Vec<RecordBatch> as a data source that can be\n+//! queried by DataFusion. This allows data to be pre-loaded into memory and then repeatedly\n+//! queried without incurring additional file I/O overhead.\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::datasource::{RecordBatchIterator, Table};\n+use crate::execution::error::{ExecutionError, Result};\n+\n+/// In-memory table\n+pub struct MemTable {\n+    schema: Arc<Schema>,\n+    batches: Vec<RecordBatch>,\n+}\n+\n+impl MemTable {\n+    /// Create a new in-memory table from the provided schema and record batches\n+    pub fn new(schema: Arc<Schema>, batches: Vec<RecordBatch>) -> Result<Self> {\n+        if batches\n+            .iter()\n+            .all(|batch| batch.num_columns() == schema.fields().len())\n+        {\n+            Ok(Self { schema, batches })\n+        } else {\n+            Err(ExecutionError::General(\n+                \"Mismatch between schema and batch column count\".to_string(),\n+            ))\n+        }\n+    }\n+\n+    /// Create a mem table by reading from another data source\n+    pub fn load(t: &Table) -> Result<Self> {\n+        let schema = t.schema();\n+        let it = t.scan(&None, 1024 * 1024);\n+        let mut it_mut = it.borrow_mut();\n+\n+        let mut data: Vec<RecordBatch> = vec![];\n+\n+        while let Ok(Some(batch)) = it_mut.next() {\n+            data.push(batch);\n+        }\n+        MemTable::new(schema.clone(), data)\n+    }\n+}\n+\n+impl Table for MemTable {\n+    fn schema(&self) -> &Arc<Schema> {\n+        &self.schema\n+    }\n+\n+    fn scan(\n+        &self,\n+        projection: &Option<Vec<usize>>,\n+        _batch_size: usize,\n+    ) -> Rc<RefCell<RecordBatchIterator>> {\n \n Review comment:\n   The return value would better be `Result<Rc<RefCell<RecordBatchIterator>>>>`. And since `Rc<RefCell<RecordBatchIterator>>>` is kind of too long, maybe it's better to do type alias.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:29:11.471+0000",
                    "updated": "2019-03-01T16:29:11.471+0000",
                    "started": "2019-03-01T16:29:11.470+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206504",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#discussion_r261670000\n \n \n\n ##########\n File path: rust/datafusion/src/datasource/memory.rs\n ##########\n @@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! In-memory data source for presenting a Vec<RecordBatch> as a data source that can be\n+//! queried by DataFusion. This allows data to be pre-loaded into memory and then repeatedly\n+//! queried without incurring additional file I/O overhead.\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::datasource::{RecordBatchIterator, Table};\n+use crate::execution::error::{ExecutionError, Result};\n+\n+/// In-memory table\n+pub struct MemTable {\n+    schema: Arc<Schema>,\n+    batches: Vec<RecordBatch>,\n+}\n+\n+impl MemTable {\n+    /// Create a new in-memory table from the provided schema and record batches\n+    pub fn new(schema: Arc<Schema>, batches: Vec<RecordBatch>) -> Result<Self> {\n+        if batches\n+            .iter()\n+            .all(|batch| batch.num_columns() == schema.fields().len())\n+        {\n+            Ok(Self { schema, batches })\n+        } else {\n+            Err(ExecutionError::General(\n+                \"Mismatch between schema and batch column count\".to_string(),\n+            ))\n+        }\n+    }\n+\n+    /// Create a mem table by reading from another data source\n+    pub fn load(t: &Table) -> Result<Self> {\n+        let schema = t.schema();\n+        let it = t.scan(&None, 1024 * 1024);\n+        let mut it_mut = it.borrow_mut();\n+\n+        let mut data: Vec<RecordBatch> = vec![];\n+\n+        while let Ok(Some(batch)) = it_mut.next() {\n+            data.push(batch);\n+        }\n+        MemTable::new(schema.clone(), data)\n+    }\n+}\n+\n+impl Table for MemTable {\n+    fn schema(&self) -> &Arc<Schema> {\n+        &self.schema\n+    }\n+\n+    fn scan(\n+        &self,\n+        projection: &Option<Vec<usize>>,\n+        _batch_size: usize,\n+    ) -> Rc<RefCell<RecordBatchIterator>> {\n+        let columns: Vec<usize> = match projection {\n+            Some(p) => p.clone(),\n+            None => {\n+                let l = self.schema.fields().len();\n+                let mut v = Vec::with_capacity(l);\n+                for i in 0..l {\n+                    v.push(i);\n+                }\n+                v\n+            }\n+        };\n+\n+        let projected_schema = Arc::new(Schema::new(\n+            columns\n+                .iter()\n+                .map(|i| self.schema.field(*i).clone())\n \n Review comment:\n   This may crash program with wrong arguments?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-01T16:30:05.021+0000",
                    "updated": "2019-03-01T16:30:05.021+0000",
                    "started": "2019-03-01T16:30:05.021+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206505",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206738",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#discussion_r261830678\n \n \n\n ##########\n File path: rust/datafusion/src/datasource/datasource.rs\n ##########\n @@ -0,0 +1,46 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Data source traits\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::execution::error::Result;\n+\n+/// Source table\n+pub trait Table {\n+    /// Get a reference to the schema for this table\n+    fn schema(&self) -> &Arc<Schema>;\n+\n+    /// Perform a scan of a table and return an iterator over the data\n+    fn scan(\n+        &self,\n+        projection: &Option<Vec<usize>>,\n+        batch_size: usize,\n+    ) -> Rc<RefCell<RecordBatchIterator>>;\n+}\n+\n+/// Iterator for reading a series of record batches with a known schema\n+pub trait RecordBatchIterator {\n \n Review comment:\n   I have started experimenting with support for parallel execution with threads and we are going to have to revisit some of the design to support this so i think it would be good to work together on this. I was thinking about creating a PR to show some ideas (separate from the rest of the project). I hope to get to that in the next week or two.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-02T15:27:29.890+0000",
                    "updated": "2019-03-02T15:27:29.890+0000",
                    "started": "2019-03-02T15:27:29.889+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206738",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206739",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#discussion_r261830687\n \n \n\n ##########\n File path: rust/datafusion/src/datasource/memory.rs\n ##########\n @@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! In-memory data source for presenting a Vec<RecordBatch> as a data source that can be\n+//! queried by DataFusion. This allows data to be pre-loaded into memory and then repeatedly\n+//! queried without incurring additional file I/O overhead.\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::datasource::{RecordBatchIterator, Table};\n+use crate::execution::error::{ExecutionError, Result};\n+\n+/// In-memory table\n+pub struct MemTable {\n+    schema: Arc<Schema>,\n+    batches: Vec<RecordBatch>,\n+}\n+\n+impl MemTable {\n+    /// Create a new in-memory table from the provided schema and record batches\n+    pub fn new(schema: Arc<Schema>, batches: Vec<RecordBatch>) -> Result<Self> {\n+        if batches\n+            .iter()\n+            .all(|batch| batch.num_columns() == schema.fields().len())\n \n Review comment:\n   Updated to check for full schema equivalence\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-02T15:27:51.302+0000",
                    "updated": "2019-03-02T15:27:51.302+0000",
                    "started": "2019-03-02T15:27:51.301+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206739",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#discussion_r261831114\n \n \n\n ##########\n File path: rust/datafusion/src/datasource/memory.rs\n ##########\n @@ -0,0 +1,194 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! In-memory data source for presenting a Vec<RecordBatch> as a data source that can be\n+//! queried by DataFusion. This allows data to be pre-loaded into memory and then repeatedly\n+//! queried without incurring additional file I/O overhead.\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::datasource::{RecordBatchIterator, Table};\n+use crate::execution::error::{ExecutionError, Result};\n+\n+/// In-memory table\n+pub struct MemTable {\n+    schema: Arc<Schema>,\n+    batches: Vec<RecordBatch>,\n+}\n+\n+impl MemTable {\n+    /// Create a new in-memory table from the provided schema and record batches\n+    pub fn new(schema: Arc<Schema>, batches: Vec<RecordBatch>) -> Result<Self> {\n+        if batches\n+            .iter()\n+            .all(|batch| batch.num_columns() == schema.fields().len())\n+        {\n+            Ok(Self { schema, batches })\n+        } else {\n+            Err(ExecutionError::General(\n+                \"Mismatch between schema and batch column count\".to_string(),\n+            ))\n+        }\n+    }\n+\n+    /// Create a mem table by reading from another data source\n+    pub fn load(t: &Table) -> Result<Self> {\n+        let schema = t.schema();\n+        let it = t.scan(&None, 1024 * 1024);\n+        let mut it_mut = it.borrow_mut();\n+\n+        let mut data: Vec<RecordBatch> = vec![];\n+\n+        while let Ok(Some(batch)) = it_mut.next() {\n+            data.push(batch);\n+        }\n+        MemTable::new(schema.clone(), data)\n+    }\n+}\n+\n+impl Table for MemTable {\n+    fn schema(&self) -> &Arc<Schema> {\n+        &self.schema\n+    }\n+\n+    fn scan(\n+        &self,\n+        projection: &Option<Vec<usize>>,\n+        _batch_size: usize,\n+    ) -> Rc<RefCell<RecordBatchIterator>> {\n+        let columns: Vec<usize> = match projection {\n+            Some(p) => p.clone(),\n+            None => {\n+                let l = self.schema.fields().len();\n+                let mut v = Vec::with_capacity(l);\n+                for i in 0..l {\n+                    v.push(i);\n+                }\n+                v\n+            }\n+        };\n+\n+        let projected_schema = Arc::new(Schema::new(\n+            columns\n+                .iter()\n+                .map(|i| self.schema.field(*i).clone())\n \n Review comment:\n   Good catch. Fixed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-02T15:41:06.719+0000",
                    "updated": "2019-03-02T15:41:06.719+0000",
                    "started": "2019-03-02T15:41:06.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206741",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754#issuecomment-469032617\n \n \n   Hi @paddyhoran this is ready for re-review now. Thanks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-03T15:16:52.731+0000",
                    "updated": "2019-03-03T15:16:52.731+0000",
                    "started": "2019-03-03T15:16:52.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206910",
                    "issueId": "13217994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/worklog/206991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #3754: ARROW-4679: [Rust] Implement in-memory data source for DataFusion\nURL: https://github.com/apache/arrow/pull/3754\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-04T04:17:44.972+0000",
                    "updated": "2019-03-04T04:17:44.972+0000",
                    "started": "2019-03-04T04:17:44.971+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "206991",
                    "issueId": "13217994"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@79e564c2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40a57b41[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20205688[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4b345ebe[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@731ba8fc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@e2cc358[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c9a5003[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@45b22a80[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b403682[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@39e1eb1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7dfa4c89[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@29c88f9c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Mar 04 04:17:31 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-03-04T04:17:31.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4679/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-02-26T03:16:04.000+0000",
        "updated": "2019-03-04T04:17:44.000+0000",
        "timeoriginalestimate": null,
        "description": "Implement a new in-memory data source so that DataFusion can execute queries against data that is already loaded into memory.\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Implement in-memory DataSource",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13217994/comment/16782946",
                    "id": "16782946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 3754\n[https://github.com/apache/arrow/pull/3754]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2019-03-04T04:17:31.511+0000",
                    "updated": "2019-03-04T04:17:31.511+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z002v4:",
        "customfield_12314139": null
    }
}