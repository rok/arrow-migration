{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13479763",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763",
    "key": "ARROW-17599",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "good-second-issue",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12649922",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12649922",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13487311",
                    "key": "ARROW-18113",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13487311",
                    "fields": {
                        "summary": "Implement a read range process without caching",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12646944",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12646944",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13479577",
                    "key": "ARROW-17590",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479577",
                    "fields": {
                        "summary": "Lower memory usage with filters",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
            "name": "aucahuasi",
            "key": "aucahuasi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
            },
            "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17599/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/811783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi opened a new pull request, #14226:\nURL: https://github.com/apache/arrow/pull/14226\n\n   Jira ticket: https://issues.apache.org/jira/browse/ARROW-17599\r\n   Given that the API of `ReadRangeCache::read` [is retaining the buffer handlers until the end of the file reader](https://issues.apache.org/jira/browse/ARROW-17599?focusedCommentId=17607252&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17607252), we need to change the way how the parquet reader reads buffered data, this is a potential solution [to avoid loading all the row groups in memory](https://issues.apache.org/jira/browse/ARROW-17590).\r\n   There are historical reasons for the current design of `ReadRangeCache::read`, this PR will not change that API, instead, this PR will change the way how we are using the pre buffering process for reading parquet files (there will be a similar PR later to change the behavior of the IPC reader as well)\n\n\n",
                    "created": "2022-09-24T02:45:18.757+0000",
                    "updated": "2022-09-24T02:45:18.757+0000",
                    "started": "2022-09-24T02:45:18.756+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811783",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/811784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#issuecomment-1256840058\n\n   https://issues.apache.org/jira/browse/ARROW-17599\n\n\n",
                    "created": "2022-09-24T02:45:37.778+0000",
                    "updated": "2022-09-24T02:45:37.778+0000",
                    "started": "2022-09-24T02:45:37.778+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811784",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/812356",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#discussion_r980781470\n\n\n##########\ncpp/src/parquet/arrow/reader.cc:\n##########\n@@ -1168,19 +1168,26 @@ FileReaderImpl::GetRecordBatchGenerator(std::shared_ptr<FileReader> reader,\n   if (rows_to_readahead < 0) {\n     return Status::Invalid(\"rows_to_readahead must be > 0\");\n   }\n-  if (reader_properties_.pre_buffer()) {\n-    BEGIN_PARQUET_CATCH_EXCEPTIONS\n-    reader_->PreBuffer(row_group_indices, column_indices, reader_properties_.io_context(),\n-                       reader_properties_.cache_options());\n-    END_PARQUET_CATCH_EXCEPTIONS\n-  }\n-  ::arrow::AsyncGenerator<RowGroupGenerator::RecordBatchGenerator> row_group_generator =\n-      RowGroupGenerator(::arrow::internal::checked_pointer_cast<FileReaderImpl>(reader),\n-                        cpu_executor, row_group_indices, column_indices,\n-                        rows_to_readahead);\n+  std::vector<::arrow::AsyncGenerator<std::shared_ptr<::arrow::RecordBatch>>> vec;\n+  for (const int& row_group_index: row_group_indices) {\n+    if (reader_properties_.pre_buffer()) {\n\nReview Comment:\n   Here we are calling `PreBuffer` multiple times.  Each time we call it we haven't yet finished reading from the time before.  Will this work?\n\n\n\n##########\ncpp/src/parquet/arrow/arrow_reader_writer_test.cc:\n##########\n@@ -2407,6 +2407,66 @@ TEST(TestArrowReadWrite, GetRecordBatchReaderNoColumns) {\n   ASSERT_EQ(actual_batch->num_rows(), num_rows);\n }\n \n+TEST(TestArrowReadWrite, GetRecordBatchGenerator2) {\n\nReview Comment:\n   Do you have a test case where we measure that we don't actually keep the RAM when reading the entire file?\n\n\n\n##########\ncpp/src/parquet/arrow/reader.cc:\n##########\n@@ -1168,19 +1168,26 @@ FileReaderImpl::GetRecordBatchGenerator(std::shared_ptr<FileReader> reader,\n   if (rows_to_readahead < 0) {\n     return Status::Invalid(\"rows_to_readahead must be > 0\");\n   }\n-  if (reader_properties_.pre_buffer()) {\n-    BEGIN_PARQUET_CATCH_EXCEPTIONS\n-    reader_->PreBuffer(row_group_indices, column_indices, reader_properties_.io_context(),\n-                       reader_properties_.cache_options());\n-    END_PARQUET_CATCH_EXCEPTIONS\n-  }\n-  ::arrow::AsyncGenerator<RowGroupGenerator::RecordBatchGenerator> row_group_generator =\n-      RowGroupGenerator(::arrow::internal::checked_pointer_cast<FileReaderImpl>(reader),\n-                        cpu_executor, row_group_indices, column_indices,\n-                        rows_to_readahead);\n+  std::vector<::arrow::AsyncGenerator<std::shared_ptr<::arrow::RecordBatch>>> vec;\n+  for (const int& row_group_index: row_group_indices) {\n+    if (reader_properties_.pre_buffer()) {\n+      BEGIN_PARQUET_CATCH_EXCEPTIONS\n+          reader_->PreBuffer({row_group_index}, column_indices, reader_properties_.io_context(),\n+                         reader_properties_.cache_options());\n+      END_PARQUET_CATCH_EXCEPTIONS\n+    }\n+    ::arrow::AsyncGenerator<RowGroupGenerator::RecordBatchGenerator> row_group_generator =\n+        RowGroupGenerator(::arrow::internal::checked_pointer_cast<FileReaderImpl>(reader),\n+                          cpu_executor, {row_group_index}, column_indices,\n+                          rows_to_readahead);\n+    ::arrow::AsyncGenerator<std::shared_ptr<::arrow::RecordBatch>> concatenated =\n+        ::arrow::MakeConcatenatedGenerator(std::move(row_group_generator));\n+    WRAP_ASYNC_GENERATOR(std::move(concatenated));\n+    vec.push_back(std::move(concatenated));\n+  }\n+  auto vec_gen = ::arrow::MakeVectorGenerator(std::move(vec));\n   ::arrow::AsyncGenerator<std::shared_ptr<::arrow::RecordBatch>> concatenated =\n-      ::arrow::MakeConcatenatedGenerator(std::move(row_group_generator));\n-  WRAP_ASYNC_GENERATOR(std::move(concatenated));\n+      ::arrow::MakeConcatenatedGenerator(std::move(vec_gen));\n\nReview Comment:\n   This seems a bit over-complicated.  Can we push the extra calls to `PreBuffer` down a layer into the `RowGroupGenerator` itself?\n\n\n\n",
                    "created": "2022-09-27T06:01:25.655+0000",
                    "updated": "2022-09-27T06:01:25.655+0000",
                    "started": "2022-09-27T06:01:25.654+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "812356",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/814100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on code in PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#discussion_r985922268\n\n\n##########\ncpp/src/parquet/arrow/arrow_reader_writer_test.cc:\n##########\n@@ -2407,6 +2407,66 @@ TEST(TestArrowReadWrite, GetRecordBatchReaderNoColumns) {\n   ASSERT_EQ(actual_batch->num_rows(), num_rows);\n }\n \n+TEST(TestArrowReadWrite, GetRecordBatchGenerator2) {\n\nReview Comment:\n   Thanks Weston, do you have an idea about how to make such test? I think we will still need to keep data in RAM right? given that `ReadRangeCache::read` is retaining the contents of the buffered data until the reader expires.\r\n   Do you think is a good idea to use `TestArrowReadWrite.GetRecordBatchGenerator` as base for writing the new test you are requesting?\n\n\n\n",
                    "created": "2022-10-05T20:06:41.856+0000",
                    "updated": "2022-10-05T20:06:41.856+0000",
                    "started": "2022-10-05T20:06:41.856+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "814100",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/814151",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on code in PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#discussion_r986068140\n\n\n##########\ncpp/src/parquet/arrow/arrow_reader_writer_test.cc:\n##########\n@@ -2407,6 +2407,66 @@ TEST(TestArrowReadWrite, GetRecordBatchReaderNoColumns) {\n   ASSERT_EQ(actual_batch->num_rows(), num_rows);\n }\n \n+TEST(TestArrowReadWrite, GetRecordBatchGenerator2) {\n\nReview Comment:\n   disregard this please, I'll try to use the memory pool for getting the memory stats.\n\n\n\n",
                    "created": "2022-10-05T20:09:33.901+0000",
                    "updated": "2022-10-05T20:09:33.901+0000",
                    "started": "2022-10-05T20:09:33.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "814151",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/816918",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on code in PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#discussion_r995510455\n\n\n##########\ncpp/src/parquet/arrow/reader.cc:\n##########\n@@ -1168,19 +1168,26 @@ FileReaderImpl::GetRecordBatchGenerator(std::shared_ptr<FileReader> reader,\n   if (rows_to_readahead < 0) {\n     return Status::Invalid(\"rows_to_readahead must be > 0\");\n   }\n-  if (reader_properties_.pre_buffer()) {\n-    BEGIN_PARQUET_CATCH_EXCEPTIONS\n-    reader_->PreBuffer(row_group_indices, column_indices, reader_properties_.io_context(),\n-                       reader_properties_.cache_options());\n-    END_PARQUET_CATCH_EXCEPTIONS\n-  }\n-  ::arrow::AsyncGenerator<RowGroupGenerator::RecordBatchGenerator> row_group_generator =\n-      RowGroupGenerator(::arrow::internal::checked_pointer_cast<FileReaderImpl>(reader),\n-                        cpu_executor, row_group_indices, column_indices,\n-                        rows_to_readahead);\n+  std::vector<::arrow::AsyncGenerator<std::shared_ptr<::arrow::RecordBatch>>> vec;\n+  for (const int& row_group_index: row_group_indices) {\n+    if (reader_properties_.pre_buffer()) {\n+      BEGIN_PARQUET_CATCH_EXCEPTIONS\n+          reader_->PreBuffer({row_group_index}, column_indices, reader_properties_.io_context(),\n+                         reader_properties_.cache_options());\n+      END_PARQUET_CATCH_EXCEPTIONS\n+    }\n+    ::arrow::AsyncGenerator<RowGroupGenerator::RecordBatchGenerator> row_group_generator =\n+        RowGroupGenerator(::arrow::internal::checked_pointer_cast<FileReaderImpl>(reader),\n+                          cpu_executor, {row_group_index}, column_indices,\n+                          rows_to_readahead);\n+    ::arrow::AsyncGenerator<std::shared_ptr<::arrow::RecordBatch>> concatenated =\n+        ::arrow::MakeConcatenatedGenerator(std::move(row_group_generator));\n+    WRAP_ASYNC_GENERATOR(std::move(concatenated));\n+    vec.push_back(std::move(concatenated));\n+  }\n+  auto vec_gen = ::arrow::MakeVectorGenerator(std::move(vec));\n   ::arrow::AsyncGenerator<std::shared_ptr<::arrow::RecordBatch>> concatenated =\n-      ::arrow::MakeConcatenatedGenerator(std::move(row_group_generator));\n-  WRAP_ASYNC_GENERATOR(std::move(concatenated));\n+      ::arrow::MakeConcatenatedGenerator(std::move(vec_gen));\n\nReview Comment:\n   done!\n\n\n\n",
                    "created": "2022-10-14T08:45:24.072+0000",
                    "updated": "2022-10-14T08:45:24.072+0000",
                    "started": "2022-10-14T08:45:24.072+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816918",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/816919",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on code in PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#discussion_r995511724\n\n\n##########\ncpp/src/parquet/arrow/arrow_reader_writer_test.cc:\n##########\n@@ -2407,6 +2407,66 @@ TEST(TestArrowReadWrite, GetRecordBatchReaderNoColumns) {\n   ASSERT_EQ(actual_batch->num_rows(), num_rows);\n }\n \n+TEST(TestArrowReadWrite, GetRecordBatchGenerator2) {\n\nReview Comment:\n   I added a new test called `TestArrowReadWrite.ReadShouldNotRetainRam`\n\n\n\n",
                    "created": "2022-10-14T08:46:39.193+0000",
                    "updated": "2022-10-14T08:46:39.193+0000",
                    "started": "2022-10-14T08:46:39.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816919",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/816920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on code in PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#discussion_r995516045\n\n\n##########\ncpp/src/parquet/arrow/reader.cc:\n##########\n@@ -1168,19 +1168,26 @@ FileReaderImpl::GetRecordBatchGenerator(std::shared_ptr<FileReader> reader,\n   if (rows_to_readahead < 0) {\n     return Status::Invalid(\"rows_to_readahead must be > 0\");\n   }\n-  if (reader_properties_.pre_buffer()) {\n-    BEGIN_PARQUET_CATCH_EXCEPTIONS\n-    reader_->PreBuffer(row_group_indices, column_indices, reader_properties_.io_context(),\n-                       reader_properties_.cache_options());\n-    END_PARQUET_CATCH_EXCEPTIONS\n-  }\n-  ::arrow::AsyncGenerator<RowGroupGenerator::RecordBatchGenerator> row_group_generator =\n-      RowGroupGenerator(::arrow::internal::checked_pointer_cast<FileReaderImpl>(reader),\n-                        cpu_executor, row_group_indices, column_indices,\n-                        rows_to_readahead);\n+  std::vector<::arrow::AsyncGenerator<std::shared_ptr<::arrow::RecordBatch>>> vec;\n+  for (const int& row_group_index: row_group_indices) {\n+    if (reader_properties_.pre_buffer()) {\n\nReview Comment:\n   You are right Weston, doesn't work.\r\n   It seems we need to wait to finish the prebuffering process (for each parquet row group) before we read each row group; I sent new changes, the relevant part about this is in `RowGroupGenerator::FetchNext` (there is a future::wait there)\n\n\n\n",
                    "created": "2022-10-14T08:50:54.557+0000",
                    "updated": "2022-10-14T08:50:54.557+0000",
                    "started": "2022-10-14T08:50:54.557+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816920",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/816921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#issuecomment-1278714058\n\n   I also experimented with the python script provided in this related/duplicated Jira ticket: https://issues.apache.org/jira/browse/ARROW-17590\r\n   I ran 3 times the python script using this PR and I notice that we are using less memory for reading prebuffered files now, here are the details:\r\n   \r\n   ================================\r\n   Arrow version: master\r\n   pre_buffer=True\r\n   ```python\r\n   0 rss:  88.390625 MB\r\n   1 rss:  1374.640625 MB\r\n   pa.total_allocated_bytes 43.61480712890625 MB dt.nbytes 0.0014410018920898438 MB\r\n          c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27  ...  c572  c573  c574  c575  c576  c577  c578  c579  c580  c581  c582  c583  c584  c585  c586  c587  c588  c589  c590  c591  c592  c593  c594  c595  c596  c597  c598  c599\r\n   0  125000                                                                                                     ...  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None\r\n   \r\n   [1 rows x 600 columns]\r\n   <class 'pandas.core.frame.DataFrame'>\r\n   RangeIndex: 1 entries, 0 to 0\r\n   Columns: 600 entries, c0 to c599\r\n   dtypes: object(600)\r\n   memory usage: 23.9 KB\r\n   2 rss:  1294.765625 MB\r\n   3 rss:  1294.765625 MB\r\n   pyarrow 10.0.0.dev4070+gfb087669a.d20221013 pandas 1.5.0 numpy 1.23.3\r\n   ```\r\n   ================================\r\n   Arrow version: this PR\r\n   pre_buffer=True\r\n   1st run\r\n   ```python\r\n   0 rss:  87.5 MB\r\n   1 rss:  728.921875 MB\r\n   pa.total_allocated_bytes 9.8636474609375 MB dt.nbytes 0.0014410018920898438 MB\r\n          c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27  ...  c572  c573  c574  c575  c576  c577  c578  c579  c580  c581  c582  c583  c584  c585  c586  c587  c588  c589  c590  c591  c592  c593  c594  c595  c596  c597  c598  c599\r\n   0  125000                                                                                                     ...  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None\r\n   \r\n   [1 rows x 600 columns]\r\n   <class 'pandas.core.frame.DataFrame'>\r\n   RangeIndex: 1 entries, 0 to 0\r\n   Columns: 600 entries, c0 to c599\r\n   dtypes: object(600)\r\n   memory usage: 23.9 KB\r\n   2 rss:  731.375 MB\r\n   3 rss:  731.375 MB\r\n   pyarrow 10.0.0.dev4070+gfb087669a.d20221013 pandas 1.5.0 numpy 1.23.3\r\n   ```\r\n   ================================\r\n   Arrow version: this PR\r\n   pre_buffer=True\r\n   2nd run\r\n   ```python\r\n   0 rss:  87.703125 MB\r\n   1 rss:  729.5 MB\r\n   pa.total_allocated_bytes 9.8636474609375 MB dt.nbytes 0.0014410018920898438 MB\r\n          c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27  ...  c572  c573  c574  c575  c576  c577  c578  c579  c580  c581  c582  c583  c584  c585  c586  c587  c588  c589  c590  c591  c592  c593  c594  c595  c596  c597  c598  c599\r\n   0  125000                                                                                                     ...  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None\r\n   \r\n   [1 rows x 600 columns]\r\n   <class 'pandas.core.frame.DataFrame'>\r\n   RangeIndex: 1 entries, 0 to 0\r\n   Columns: 600 entries, c0 to c599\r\n   dtypes: object(600)\r\n   memory usage: 23.9 KB\r\n   2 rss:  610.328125 MB\r\n   3 rss:  610.328125 MB\r\n   pyarrow 10.0.0.dev4070+gfb087669a.d20221013 pandas 1.5.0 numpy 1.23.3\r\n   ```\r\n   ================================\r\n   Arrow version: this PR\r\n   pre_buffer=True\r\n   3rd run\r\n   ```python\r\n   0 rss:  87.484375 MB\r\n   1 rss:  729.859375 MB\r\n   pa.total_allocated_bytes 9.8636474609375 MB dt.nbytes 0.0014410018920898438 MB\r\n          c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27  ...  c572  c573  c574  c575  c576  c577  c578  c579  c580  c581  c582  c583  c584  c585  c586  c587  c588  c589  c590  c591  c592  c593  c594  c595  c596  c597  c598  c599\r\n   0  125000                                                                                                     ...  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None\r\n   \r\n   [1 rows x 600 columns]\r\n   <class 'pandas.core.frame.DataFrame'>\r\n   RangeIndex: 1 entries, 0 to 0\r\n   Columns: 600 entries, c0 to c599\r\n   dtypes: object(600)\r\n   memory usage: 23.9 KB\r\n   2 rss:  732.34375 MB\r\n   3 rss:  732.34375 MB\r\n   pyarrow 10.0.0.dev4072+gc32f988f5.d20221014 pandas 1.5.0 numpy 1.23.3\r\n   ```\r\n   ================================\r\n   Arrow version: master\r\n   pre_buffer=False\r\n   ```python\r\n   0 rss:  87.828125 MB\r\n   1 rss:  1385.734375 MB\r\n   pa.total_allocated_bytes 9.7957763671875 MB dt.nbytes 0.0014410018920898438 MB\r\n          c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27  ...  c572  c573  c574  c575  c576  c577  c578  c579  c580  c581  c582  c583  c584  c585  c586  c587  c588  c589  c590  c591  c592  c593  c594  c595  c596  c597  c598  c599\r\n   0  125000                                                                                                     ...  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None\r\n   \r\n   [1 rows x 600 columns]\r\n   <class 'pandas.core.frame.DataFrame'>\r\n   RangeIndex: 1 entries, 0 to 0\r\n   Columns: 600 entries, c0 to c599\r\n   dtypes: object(600)\r\n   memory usage: 23.9 KB\r\n   2 rss:  1538.9375 MB\r\n   3 rss:  1546.4375 MB\r\n   pyarrow 10.0.0.dev4070+gfb087669a.d20221013 pandas 1.5.0 numpy 1.23.3\r\n   ```\r\n   ================================\r\n   Arrow version: this PR\r\n   pre_buffer=False\r\n   ```python\r\n   0 rss:  87.8125 MB\r\n   1 rss:  1431.546875 MB\r\n   pa.total_allocated_bytes 9.7957763671875 MB dt.nbytes 0.0014410018920898438 MB\r\n          c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24 c25 c26 c27  ...  c572  c573  c574  c575  c576  c577  c578  c579  c580  c581  c582  c583  c584  c585  c586  c587  c588  c589  c590  c591  c592  c593  c594  c595  c596  c597  c598  c599\r\n   0  125000                                                                                                     ...  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None  None\r\n   \r\n   [1 rows x 600 columns]\r\n   <class 'pandas.core.frame.DataFrame'>\r\n   RangeIndex: 1 entries, 0 to 0\r\n   Columns: 600 entries, c0 to c599\r\n   dtypes: object(600)\r\n   memory usage: 23.9 KB\r\n   2 rss:  1570.390625 MB\r\n   3 rss:  1573.8125 MB\r\n   pyarrow 10.0.0.dev4070+gfb087669a.d20221013 pandas 1.5.0 numpy 1.23.3\r\n   ```\n\n\n",
                    "created": "2022-10-14T09:07:13.495+0000",
                    "updated": "2022-10-14T09:07:13.495+0000",
                    "started": "2022-10-14T09:07:13.494+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816921",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/817206",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#issuecomment-1279546140\n\n   Follow up ticket for the IPC file reader:\r\n   https://issues.apache.org/jira/browse/ARROW-18065\n\n\n",
                    "created": "2022-10-14T22:36:57.447+0000",
                    "updated": "2022-10-14T22:36:57.447+0000",
                    "started": "2022-10-14T22:36:57.446+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817206",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/817278",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#discussion_r996309024\n\n\n##########\ncpp/src/parquet/arrow/reader.cc:\n##########\n@@ -1107,8 +1112,13 @@ class RowGroupGenerator {\n     if (!reader->properties().pre_buffer()) {\n       row_group_read = SubmitRead(cpu_executor_, reader, row_group, column_indices);\n     } else {\n+      reader->parquet_reader()->PreBuffer({row_group}, column_indices_,\n+                                          reader_properties_.io_context(),\n+                                          reader_properties_.cache_options());\n       auto ready = reader->parquet_reader()->WhenBuffered({row_group}, column_indices);\n       if (cpu_executor_) ready = cpu_executor_->TransferAlways(ready);\n+      // wait for buffering the rowgroup before read it\n+      ready.Wait();\n\nReview Comment:\n   Hmm, why are we synchronously blocking, then attaching a callback to the future in the next step? Something seems off here\n\n\n\n",
                    "created": "2022-10-15T13:49:52.712+0000",
                    "updated": "2022-10-15T13:49:52.712+0000",
                    "started": "2022-10-15T13:49:52.712+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817278",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/817362",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on code in PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#discussion_r996424739\n\n\n##########\ncpp/src/parquet/arrow/reader.cc:\n##########\n@@ -1107,8 +1112,13 @@ class RowGroupGenerator {\n     if (!reader->properties().pre_buffer()) {\n       row_group_read = SubmitRead(cpu_executor_, reader, row_group, column_indices);\n     } else {\n+      reader->parquet_reader()->PreBuffer({row_group}, column_indices_,\n+                                          reader_properties_.io_context(),\n+                                          reader_properties_.cache_options());\n       auto ready = reader->parquet_reader()->WhenBuffered({row_group}, column_indices);\n       if (cpu_executor_) ready = cpu_executor_->TransferAlways(ready);\n+      // wait for buffering the rowgroup before read it\n+      ready.Wait();\n\nReview Comment:\n   Thanks David, I got this error when I don't use wait:\r\n   `ReadRangeCache did not find matching cache entry`\r\n   It's like the `parquet_reader()->WhenBuffered` call is not really waiting to have the buffer ready before read the rowgroup.\r\n   I'll investigate more what could be the issue here.\n\n\n\n",
                    "created": "2022-10-16T10:43:46.162+0000",
                    "updated": "2022-10-16T10:43:46.162+0000",
                    "started": "2022-10-16T10:43:46.162+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817362",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/817367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on code in PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#discussion_r996432256\n\n\n##########\ncpp/src/parquet/arrow/reader.cc:\n##########\n@@ -1107,8 +1112,13 @@ class RowGroupGenerator {\n     if (!reader->properties().pre_buffer()) {\n       row_group_read = SubmitRead(cpu_executor_, reader, row_group, column_indices);\n     } else {\n+      reader->parquet_reader()->PreBuffer({row_group}, column_indices_,\n+                                          reader_properties_.io_context(),\n+                                          reader_properties_.cache_options());\n       auto ready = reader->parquet_reader()->WhenBuffered({row_group}, column_indices);\n       if (cpu_executor_) ready = cpu_executor_->TransferAlways(ready);\n+      // wait for buffering the rowgroup before read it\n+      ready.Wait();\n\nReview Comment:\n   It seems -somehow- the next rowgroup triggers `ReadOneRowGroup` and it starts reading, but the cache entries are empty (because it didn't call `PreBuffer` before)\r\n   I did a simple change: when we don't transfer the future using\r\n   `if (cpu_executor_) ready = cpu_executor_->TransferAlways(ready);`\r\n   it works without wait.\n\n\n\n",
                    "created": "2022-10-16T11:51:02.722+0000",
                    "updated": "2022-10-16T11:51:02.722+0000",
                    "started": "2022-10-16T11:51:02.721+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817367",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/817368",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on code in PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#discussion_r996432256\n\n\n##########\ncpp/src/parquet/arrow/reader.cc:\n##########\n@@ -1107,8 +1112,13 @@ class RowGroupGenerator {\n     if (!reader->properties().pre_buffer()) {\n       row_group_read = SubmitRead(cpu_executor_, reader, row_group, column_indices);\n     } else {\n+      reader->parquet_reader()->PreBuffer({row_group}, column_indices_,\n+                                          reader_properties_.io_context(),\n+                                          reader_properties_.cache_options());\n       auto ready = reader->parquet_reader()->WhenBuffered({row_group}, column_indices);\n       if (cpu_executor_) ready = cpu_executor_->TransferAlways(ready);\n+      // wait for buffering the rowgroup before read it\n+      ready.Wait();\n\nReview Comment:\n   It seems -somehow- when for the same rowgroup we trigger `ReadOneRowGroup` and it starts reading, the cache entries are empty (even when I could confirm that it called `PreBuffer` before)\r\n   I did a simple change: when we don't transfer the future using\r\n   `if (cpu_executor_) ready = cpu_executor_->TransferAlways(ready);`\r\n   it works without wait.\n\n\n\n",
                    "created": "2022-10-16T11:53:43.053+0000",
                    "updated": "2022-10-16T11:53:43.053+0000",
                    "started": "2022-10-16T11:53:43.053+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817368",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/817369",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on code in PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#discussion_r996434037\n\n\n##########\ncpp/src/parquet/arrow/reader.cc:\n##########\n@@ -1107,8 +1112,13 @@ class RowGroupGenerator {\n     if (!reader->properties().pre_buffer()) {\n       row_group_read = SubmitRead(cpu_executor_, reader, row_group, column_indices);\n     } else {\n+      reader->parquet_reader()->PreBuffer({row_group}, column_indices_,\n+                                          reader_properties_.io_context(),\n+                                          reader_properties_.cache_options());\n       auto ready = reader->parquet_reader()->WhenBuffered({row_group}, column_indices);\n       if (cpu_executor_) ready = cpu_executor_->TransferAlways(ready);\n+      // wait for buffering the rowgroup before read it\n+      ready.Wait();\n\nReview Comment:\n   I think that when we transfer the future, the `PreBuffer` that it's running now (in a different thread) cannot finish before the future triggers `ReadOneRowGroup` (because the future was already transferred into a different thread)\r\n   So perhaps we just  need a way to make sure `PreBuffer` gets called before in the same thread of the future.\n\n\n\n",
                    "created": "2022-10-16T12:06:18.848+0000",
                    "updated": "2022-10-16T12:06:18.848+0000",
                    "started": "2022-10-16T12:06:18.848+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817369",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/817575",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on code in PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#discussion_r996944475\n\n\n##########\ncpp/src/parquet/arrow/reader.cc:\n##########\n@@ -1107,8 +1112,13 @@ class RowGroupGenerator {\n     if (!reader->properties().pre_buffer()) {\n       row_group_read = SubmitRead(cpu_executor_, reader, row_group, column_indices);\n     } else {\n+      reader->parquet_reader()->PreBuffer({row_group}, column_indices_,\n+                                          reader_properties_.io_context(),\n+                                          reader_properties_.cache_options());\n       auto ready = reader->parquet_reader()->WhenBuffered({row_group}, column_indices);\n       if (cpu_executor_) ready = cpu_executor_->TransferAlways(ready);\n+      // wait for buffering the rowgroup before read it\n+      ready.Wait();\n\nReview Comment:\n   I sent [new changes](https://github.com/apache/arrow/pull/14226/files#diff-6a73dc8ee650cf7b5b8a51f7d4f9f0197823416155c0de7de400294fea588f11R1118) to avoid the use of `Future::Wait` and to run the prebuffering and read operations together in the same thread context (one after the other).\n\n\n\n",
                    "created": "2022-10-17T11:29:06.457+0000",
                    "updated": "2022-10-17T11:29:06.457+0000",
                    "started": "2022-10-17T11:29:06.457+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817575",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/817580",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on code in PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#discussion_r996944475\n\n\n##########\ncpp/src/parquet/arrow/reader.cc:\n##########\n@@ -1107,8 +1112,13 @@ class RowGroupGenerator {\n     if (!reader->properties().pre_buffer()) {\n       row_group_read = SubmitRead(cpu_executor_, reader, row_group, column_indices);\n     } else {\n+      reader->parquet_reader()->PreBuffer({row_group}, column_indices_,\n+                                          reader_properties_.io_context(),\n+                                          reader_properties_.cache_options());\n       auto ready = reader->parquet_reader()->WhenBuffered({row_group}, column_indices);\n       if (cpu_executor_) ready = cpu_executor_->TransferAlways(ready);\n+      // wait for buffering the rowgroup before read it\n+      ready.Wait();\n\nReview Comment:\n   I sent [new changes](https://github.com/apache/arrow/pull/14226/files#diff-6a73dc8ee650cf7b5b8a51f7d4f9f0197823416155c0de7de400294fea588f11R1115) to avoid the use of `Future::Wait` (in the main thread) and to run the prebuffering and read operations together in the same thread context (one after the other).\n\n\n\n",
                    "created": "2022-10-17T11:55:59.053+0000",
                    "updated": "2022-10-17T11:55:59.053+0000",
                    "started": "2022-10-17T11:55:59.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817580",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/817825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#issuecomment-1281501236\n\n   There are some CI errors that seems unrelated and also [the CI job for macOS 11 was canceled](https://github.com/apache/arrow/actions/runs/3264889672/jobs/5366242033#step:5:137) (not sure why).\r\n   I built this branch on windows 10 (msys2-mingw64) and was able to run some tests without problems:\r\n   ```cpp\r\n   debug/arrow-dataset-file-parquet-test.exe\r\n   [----------] Global test environment tear-down\r\n   [==========] 44 tests from 3 test suites ran. (3093 ms total)\r\n   [  PASSED  ] 44 tests.\r\n   \r\n   debug/parquet-reader-test.exe\r\n   [----------] Global test environment tear-down\r\n   [==========] 76 tests from 26 test suites ran. (518 ms total)\r\n   [  PASSED  ] 71 tests.\r\n   [  SKIPPED ] 1 test, listed below:\r\n   [  SKIPPED ] TestDumpWithLocalFile.DumpOutput\r\n   [  FAILED  ] 4 tests, listed below:\r\n   [  FAILED  ] TestBooleanRLE.TestBooleanScanner\r\n   [  FAILED  ] TestBooleanRLE.TestBatchRead\r\n   [  FAILED  ] TestTextDeltaLengthByteArray.TestTextScanner\r\n   [  FAILED  ] TestTextDeltaLengthByteArray.TestBatchRead\r\n    4 FAILED TESTS\r\n   \r\n   debug/parquet-arrow-internals-test.exe\r\n   [----------] Global test environment tear-down\r\n   [==========] 78 tests from 2 test suites ran. (76 ms total)\r\n   [  PASSED  ] 78 tests.\r\n   \r\n   debug/arrow-io-buffered-test.exe\r\n   [----------] Global test environment tear-down\r\n   [==========] 22 tests from 3 test suites ran. (137 ms total)\r\n   [  PASSED  ] 22 tests.\r\n   ```\n\n\n",
                    "created": "2022-10-17T21:12:38.419+0000",
                    "updated": "2022-10-17T21:12:38.419+0000",
                    "started": "2022-10-17T21:12:38.419+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817825",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/817838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#issuecomment-1281542720\n\n   I sent a minor change and I noticed again that it seems [the CI job for windows msys2-mingw64 is not stable enough](https://github.com/apache/arrow/actions/runs/3268754040/jobs/5375525762#step:5:88) (it could not even start building):\r\n   `error: failed retrieving file 'mingw-w64-x86_64-grpc-1.50.0-1-any.pkg.tar.zst' from mirror.msys2.org : Operation too slow. Less than 1 bytes/sec transferred the last 10 seconds`\n\n\n",
                    "created": "2022-10-17T21:55:13.753+0000",
                    "updated": "2022-10-17T21:55:13.753+0000",
                    "started": "2022-10-17T21:55:13.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817838",
                    "issueId": "13479763"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/worklog/817852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on PR #14226:\nURL: https://github.com/apache/arrow/pull/14226#issuecomment-1281654733\n\n   I built on windows again, this time using msys2-mingw32 toolchain and I was able to run the unit tests without issues.\n\n\n",
                    "created": "2022-10-18T00:19:02.747+0000",
                    "updated": "2022-10-18T00:19:02.747+0000",
                    "started": "2022-10-18T00:19:02.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817852",
                    "issueId": "13479763"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@921dde9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13f68d71[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@620f8286[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@453516b3[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d582955[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3ee70df9[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20e2a311[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4d0fa930[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61313345[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@67bf725f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5270af92[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6206cac5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Oct 20 21:04:13 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17599/watchers",
            "watchCount": 7,
            "isWatching": false
        },
        "created": "2022-09-02T02:28:51.000+0000",
        "updated": "2022-10-20T21:04:13.000+0000",
        "timeoriginalestimate": null,
        "description": "I've added a unit test of the issue here: https://github.com/westonpace/arrow/tree/experiment/read-range-cache-retention\r\n\r\nWe use the ReadRangeCache for pre-buffering IPC and parquet files.  Sometimes those files are quite large (gigabytes).  The usage is roughly:\r\n\r\nfor X in num_row_groups:\r\n  CacheAllThePiecesWeNeedForRowGroupX\r\n  WaitForPiecesToArriveForRowGroupX\r\n  ReadThePiecesWeNeedForRowGroupX\r\n\r\nHowever, once we've read in row group X and passed it on to Acero, etc. we do not release the data for row group X.  The read range cache's entries vector still holds a pointer to the buffer.  The data is not released until the file reader itself is destroyed which only happens when we have finished processing an entire file.\r\n\r\nThis leads to excessive memory usage when pre-buffering is enabled.\r\n\r\nThis could potentially be a little difficult to implement because a single read range's cache entry could be shared by multiple ranges so we will need some kind of reference counting to know when we have fully finished with an entry and can release it.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] ReadRangeCache should not retain data after read",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/comment/17599444",
                    "id": "17599444",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "You could perhaps store each entry as a custom Buffer subclass (which delegates to the actual buffer) and hand out shared pointers of that.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-09-02T11:27:55.331+0000",
                    "updated": "2022-09-02T11:27:55.331+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/comment/17602893",
                    "id": "17602893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Should [ReadRangeCache::read|https://github.com/westonpace/arrow/blob/5cf0deaf82f090718350fd3d8d0ee5c4795df7a0/cpp/src/arrow/io/caching.cc#L193] remove the cache entry after performing the read?\r\n\r\nFrom the documentation, is not clear if that method should remove the cache entry; I did a simple experiment (removing the range) and the [unit test|https://github.com/westonpace/arrow/blob/5cf0deaf82f090718350fd3d8d0ee5c4795df7a0/cpp/src/arrow/io/memory_test.cc#L772] provided by [~westonpace] is passing:\r\n\r\n\u00a0\r\n{code:java}\r\nif (it != entries.end() && it->range.Contains(range)) {\r\n\u00a0 ...\r\n\u00a0 this->entries.erase(it);\r\n\u00a0 \u00a0...\r\n}\r\n{code}\r\n\u00a0\r\n\r\nThis is just an experiment to understand better the issue.\r\n\r\nAlso, I tried to explore [~lidavidm]'s idea, but I think I need more hints about how we can store each cache entry as a custom buffer; so far what I understand is that the data is being wrapped/eaten by the RandomAccessFile and that is the reason why the release won't happen until the file reader is destroyed (there is no way to access to the internal data buffer held by RandomAccessFile)\u00a0\r\n\r\nWeston, it would be great to know full use case you were running; right now I'm using the unit test, but it would help to replicate the issue with the full use case locally (maybe the use case needs an override method for ReadRangeCache::read that can delete the range at the end)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-09-11T17:53:53.019+0000",
                    "updated": "2022-09-11T17:53:53.019+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/comment/17603200",
                    "id": "17603200",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "> Should ReadRangeCache::read remove the cache entry after performing the read?\r\n\r\nYes.  I don't think this is mentioned in the documentation.  It may not have been a concern at the time.  I think we should also update the documentation so that we are very clear that this happens.\r\n\r\n> Also, I tried to explore David Li's idea, but I think I need more hints about how we can store each cache entry as a custom buffer; so far what I understand is that the data is being wrapped/eaten by the RandomAccessFile and that is the reason why the release won't happen until the file reader is destroyed (there is no way to access to the internal data buffer held by RandomAccessFile) \r\n\r\nThe FileReader owns a single instance of ReadRangeCache.  That instance won't be deleted until the FileReader is deleted.\r\nThe ReadRangeCache has a vector of RangeCacheEntry.  Currently, nothing removes items from that vector.  A RangeCacheEntry has a {{Future<std::shared_ptr<Buffer>>}}.  Once that future has been filled it will hold the result (in case callbacks are added later) and so this will keep the buffer alive (because there is still a shared_ptr referencing it).\r\n\r\n> Weston, it would be great to know full use case you were running; right now I'm using the unit test, but it would help to replicate the issue with the full use case locally (maybe the use case needs an override method for ReadRangeCache::read that can delete the range at the end)\r\n\r\nThe use case is described in more detail in https://issues.apache.org/jira/browse/ARROW-17590 (which has a reproducing script) but a slightly more involved test would be:\r\n\r\nCreate a 4GiB parquet file with 20 row groups.  Each row group should be about 200MiB.  Scan the file with pyarrow to_batches (just count the rows or something).  The scanner should only read at most 2 row groups in at a time.  So I'd expect to see around 0.5GiB peak RAM.  However, in practice, you will see 4GiB peak RAM.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-09-12T17:05:40.807+0000",
                    "updated": "2022-09-12T17:05:40.807+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/comment/17607252",
                    "id": "17607252",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks Weston,\r\n\r\n>> Should ReadRangeCache::read remove the cache entry after performing the read?\r\n\r\n>Yes. I don't think this is mentioned in the documentation. It may not have been a concern at the time. I think we should also update the documentation so that we are very clear that this happens.\r\n\r\nIt seems that [ParquetFileReader::PreBuffer|https://github.com/apache/arrow/blob/40ec95646962cccdcd62032c80e8506d4c275bc6/cpp/src/parquet/file_reader.h#L156] was implemented under a different assumption, from the API docs:\r\n\r\n_\"After calling this, creating readers for row groups/column indices that were not buffered may fail. {*}Creating multiple readers for the a subset of the buffered regions is acceptable{*}. This may be called again to buffer a different set of row groups/columns.\"_\r\n\r\nI did run the script provided in ARROW-17590 and was able to reproduce the issue.\r\nAlso, I was able to check that we are reading multiple times the same cache entry and observe that removing the entry after ReadRangeCache::read is breaking the contract required by ParquetFileReader::PreBuffer.\r\n\r\nI'll keep investigating, any other ideas are more than welcome!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-09-20T14:56:01.485+0000",
                    "updated": "2022-09-20T14:56:01.485+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/comment/17607287",
                    "id": "17607287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Ack.  I was not really aware that was how the parquet reader operated.  That comment is very helpful.  Hmm, in that case maybe a better fix is to improve how we scan parquet files.  Currently we get an async generator from a parquet reader for the entire file.  The code for it is [here|https://github.com/apache/arrow/blob/master/cpp/src/parquet/arrow/reader.cc#L1162].\r\n\r\nThis prebuffers the entire range of row groups before we even start reading.  In practice I think we only want to prebuffer a row group right before we're ready to actually read that row group.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-09-20T16:10:46.125+0000",
                    "updated": "2022-09-20T16:10:46.125+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/comment/17607293",
                    "id": "17607293",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Although the more I think about it the less I'm sure that parquet reader API makes sense.  Why would someone want to prebuffer a chunk of data and then read from it multiple times?\r\n\r\n[~lidavidm] any thoughts on which approach we should take?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-09-20T16:24:43.050+0000",
                    "updated": "2022-09-20T16:24:43.050+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/comment/17607297",
                    "id": "17607297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think a lot of this was just because of how it was historically added: originally, the cache was added without adding an iterator interface, so the cache would necessarily have to preserve the input data. I think now that we're changing things here, we should perhaps consider adding an explicit cache-based, iterator/generator-based API so that the API contract is clear.\r\n\r\nHowever, I think we still do want to pre-buffer all row groups, because that way the read coalescing can do the best job possible. That said it probably needs benchmarking to determine what makes sense. It could work to only start reads for a row group when we read it (with the understanding that some I/O may 'spill over' into the next row group for optimal I/O patterns)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-09-20T16:34:51.640+0000",
                    "updated": "2022-09-20T16:34:51.640+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/comment/17617987",
                    "id": "17617987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Follow up ticket:\r\n\r\nhttps://issues.apache.org/jira/browse/ARROW-18065",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-10-14T22:41:31.802+0000",
                    "updated": "2022-10-14T22:41:31.802+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13479763/comment/17621368",
                    "id": "17621368",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Another follow up/related ticket:\r\n\r\nhttps://issues.apache.org/jira/browse/ARROW-18113",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-10-20T21:04:13.860+0000",
                    "updated": "2022-10-20T21:04:13.860+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|z189bk:",
        "customfield_12314139": null
    }
}