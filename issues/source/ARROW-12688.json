{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13377290",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290",
    "key": "ARROW-12688",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12620092",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12620092",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13392185",
                    "key": "ARROW-13465",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392185",
                    "fields": {
                        "summary": "[R] to_arrow() from duckdb",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12620091",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12620091",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13392230",
                    "key": "ARROW-13472",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392230",
                    "fields": {
                        "summary": "[R] Remove .engine = \"duckdb\" argument",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                            "name": "Critical",
                            "id": "2"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12615216",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615216",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13377291",
                    "key": "ARROW-12689",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377291",
                    "fields": {
                        "summary": "[R] Implement ArrowArrayStream C interface",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12616633",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616633",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13381788",
                    "key": "ARROW-12940",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381788",
                    "fields": {
                        "summary": "[R] Expose C interface as R6 methods",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12615217",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615217",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13377289",
                    "key": "ARROW-12687",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377289",
                    "fields": {
                        "summary": "[C++][Python][Dataset] Support C Data Interface with Scanner",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
            "name": "jonkeane",
            "key": "jonkeane",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
            },
            "displayName": "Jonathan Keane",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12688/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 35,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626740",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane opened a new pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780\n\n\n   A proposed interface for using DuckDB + Arrow together.\r\n   \r\n   I've added two methods:\r\n     * The proposed `summarise(..., .engine = \"duckdb\")` method which is (probably) the method that people want to use\r\n     * A lower-level method of specifying exactly when the transfer takes place. I've called this `alchemize_*` for now, though we might consider wedging it into `collect()` or `compute()` (or something like `collect_to_duckdb()` to be super explicit[1]).\r\n     * I've made a proof-of-concept that the `alchemize_*` can also work with Python \u2014 this is basically a renaming/wrapping of `r_to_py` / `py_to_r`. If we do peruse exposing `alchemize_*` or the like, I will fill out the rest of these (we should keep both around, though r_to_py isn't currently documented so probably isn't getting much use).\r\n     \r\n     [1] I've tried both a more magical `alchemize(x, to = c(\"arrow\", \"duckdb\", \"python))` the changes behavior / output based on the `to` argument, which we can go back to if we want that simplicity, but I found it harder to reason about what I was getting out. Where as with `alchemize_to_duckdb()` the function says exactly what's going on.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T15:20:14.743+0000",
                    "updated": "2021-07-22T15:20:14.743+0000",
                    "started": "2021-07-22T15:20:14.742+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626740",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#issuecomment-884999100\n\n\n   https://issues.apache.org/jira/browse/ARROW-12688\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T15:20:38.753+0000",
                    "updated": "2021-07-22T15:20:38.753+0000",
                    "started": "2021-07-22T15:20:38.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626741",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626753",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r674925488\n\n\n\n##########\nFile path: r/R/duckdb.R\n##########\n@@ -0,0 +1,91 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+arrow_duck_connection <- function() {\n+  con <- getOption(\"arrow_duck_con\")\n+  if (is.null(con) || !DBI::dbIsValid(con)) {\n+    con <- DBI::dbConnect(duckdb::duckdb())\n+    # Use the same CPU count that the arrow library is set to\n+    DBI::dbExecute(con, paste0(\"PRAGMA threads=\", cpu_count()))\n+    options(arrow_duck_con = con)\n+  }\n+  con\n+}\n+\n+# TODO: note that this is copied from dbplyr\n+unique_arrow_tablename <- function () {\n+  i <- getOption(\"arrow_table_name\", 0) + 1\n+  options(arrow_table_name = i)\n+  sprintf(\"arrow_%03i\", i)\n+}\n+\n+.alchemize_to_duckdb <- function(x, ...) {\n+  rb_to_duckdb(x, groups = x$group, ...)\n+}\n+\n+rb_to_duckdb <- function(x, con = arrow_duck_connection(), groups = NULL, auto_disconnect = TRUE) {\n+  table_name <- unique_arrow_tablename()\n+  duckdb::duckdb_register_arrow(con, table_name, x)\n+\n+  tbl <- tbl(con, table_name)\n+  if (length(groups) > 0 && !is.null(groups)) {\n+    tbl <- dplyr::group_by(tbl, !!rlang::sym(groups))\n+  }\n+\n+  if (auto_disconnect) {\n+    # this will add the correct connection disconnection when the tbl is gced.\n+    # we should probably confirm that this use of src$disco is kosher.\n+    tbl$src$disco <- duckdb_disconnector(con, table_name)\n\nReview comment:\n       This setups up a specific cleanup step for how we register the table. This [is very similar to what dbplyr does](https://github.com/tidyverse/dbplyr/blob/47e53ce30402d41ae4b38c803de12e63d64a9b6c/R/src_dbi.R#L113) but might be reaching into the internals a bit too much (though works very very well in a way that deleting the table in `collect()` doesn't). If we go this route, I'll open an issue with dbplyr to ask if this is ok / if this is something that they want a PR to expose more for packages like ours.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T15:35:50.068+0000",
                    "updated": "2021-07-22T15:35:50.068+0000",
                    "started": "2021-07-22T15:35:50.068+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626753",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r674976571\n\n\n\n##########\nFile path: r/tests/testthat/test-duckdb.R\n##########\n@@ -0,0 +1,192 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+skip_if_not_installed(\"duckdb\")\n+library(duckdb)\n+library(dplyr)\n+\n+con <- dbConnect(duckdb::duckdb())\n+# we always want to test in parallel\n+dbExecute(con, \"PRAGMA threads=2\")\n+\n+test_that(\"basic integration\", {\n\nReview comment:\n       Isn't this testing only functions in `duckdb`, not `arrow`?\n\n##########\nFile path: r/R/alchemize.R\n##########\n@@ -0,0 +1,81 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' Transform a data structure from one engine to another\n+#'\n+#' The `alchemize_*` family of functions take data in one context (e.g. Arrow\n+#' data in an R session, Arrow data in a Python session) and transform it into a\n+#' form usable by another context: (e.g. Arrow data in a Python session, a\n+#' (virtual) table in a DuckDB session). All of these functions use Arrow's\n+#' C-interface and data is not serialized or moved when it is alchemized,\n+#' instead it is made available for a subprocess of the new context (e.g. Python\n+#' through reticulate or the DuckDB engine).\n+#'\n+#' The return value is for each function in the family based on what is at the\n+#' end of the function name:\n+#'\n+#' * `alchemize_to_duckdb` - returns a dbplyr-based `tbl` with the Arrow data\n+#' registered as a (virtual) table in DuckDB. The `tbl` can be used in dplyr\n+#' pipelines, or you can write DuckDB queries using the table name (by default\n+#' `\"arrow_\"` with numbers following it) given in the `tbl`. If you would like\n+#' to use a specific, pre-existent connection to DuckDB use the `con` argument\n+#' to pass the connection to use. By default, these tables are automatically\n+#' cleaned up when the `tbl` is removed from the session (and garbage collection\n+#' occurs on that), to disable this, pass `auto_disconnect = FALSE`. *\n+#' `alchemize_to_python` - returns a reticulate-based python object. This is the\n+#' same as the interface using the `r_to_py` functions.\n+#'\n+#' @param x the object to alchemize\n+#' @param ... arguments passed to other functions\n+#'\n+#' @return An object with a reference to the the alchemized data\n+#'\n+#' @keywords internal\n+#' @name alchemize\n+NULL\n+\n+#' @rdname alchemize\n+#' @export\n+alchemize_to_duckdb <- function(x, ...) {\n+  UseMethod(\"alchemize_to_duckdb\")\n+}\n+\n+#' @rdname alchemize\n+#' @export\n+alchemize_to_python <- function(x, ...) {\n+  UseMethod(\"alchemize_to_python\")\n+}\n+\n+#' @include python.R\n+#' @rdname alchemize\n+#' @export\n+alchemize_to_python.Dataset <- alchemize_to_python.arrow_dplyr_query <- function(x, ...) {\n\nReview comment:\n       You could define `r_to_py.Dataset` and `py_to_r.Dataset` like this, going through the RecordBatchReader (if/when that were useful, which it doesn't seem like it is for this issue).\n\n##########\nFile path: r/R/alchemize.R\n##########\n@@ -0,0 +1,81 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' Transform a data structure from one engine to another\n\nReview comment:\n       I see what you're trying to do here but I'm not convinced that we need it (yet, at least). \r\n   \r\n   What if instead we defined `tbl.arrow_dplyr_query` et al.-- it is a generic in `dplyr`--so the tests would look like:\r\n   \r\n   ```r\r\n   ds %>%\r\n     select(int, lgl) %>%\r\n     tbl(.engine = \"duckdb\") %>%\r\n     summarize(...)\r\n   ```\r\n   \n\n##########\nFile path: r/R/python.R\n##########\n@@ -15,6 +15,19 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+#' Transfer an Arrow memory structure to Python\n+#'\n+#' @param x the R-based Arrow object to export to Python\n+#' @param ... arguments passed to the methods\n+#'\n+#' @retuen a reticulate-based Python object\n+#'\n+#' @keywords internal\n+#' @export\n+r_to_py <- function(x, ...) {\n\nReview comment:\n       I'm not sure this is a good idea because the `r_to_py` generic is in `reticulate`\n\n##########\nFile path: r/R/duckdb.R\n##########\n@@ -0,0 +1,91 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+arrow_duck_connection <- function() {\n+  con <- getOption(\"arrow_duck_con\")\n+  if (is.null(con) || !DBI::dbIsValid(con)) {\n+    con <- DBI::dbConnect(duckdb::duckdb())\n+    # Use the same CPU count that the arrow library is set to\n+    DBI::dbExecute(con, paste0(\"PRAGMA threads=\", cpu_count()))\n+    options(arrow_duck_con = con)\n+  }\n+  con\n+}\n+\n+# TODO: note that this is copied from dbplyr\n\nReview comment:\n       I wouldn't say \"copy\" since this is clearly adapted, but do add a link to the inspiration\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T17:10:12.330+0000",
                    "updated": "2021-07-22T17:10:12.330+0000",
                    "started": "2021-07-22T17:10:12.329+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626789",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675010485\n\n\n\n##########\nFile path: r/R/python.R\n##########\n@@ -15,6 +15,19 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+#' Transfer an Arrow memory structure to Python\n+#'\n+#' @param x the R-based Arrow object to export to Python\n+#' @param ... arguments passed to the methods\n+#'\n+#' @retuen a reticulate-based Python object\n+#'\n+#' @keywords internal\n+#' @export\n+r_to_py <- function(x, ...) {\n\nReview comment:\n       Ah, I didn't realize that was coming from reticulate \u2014 I think that would solve the error though that will be irrelevant if we take out `alchemize_to_python`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T17:28:42.797+0000",
                    "updated": "2021-07-22T17:28:42.797+0000",
                    "started": "2021-07-22T17:28:42.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626799",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675011947\n\n\n\n##########\nFile path: r/R/duckdb.R\n##########\n@@ -0,0 +1,91 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+arrow_duck_connection <- function() {\n+  con <- getOption(\"arrow_duck_con\")\n+  if (is.null(con) || !DBI::dbIsValid(con)) {\n+    con <- DBI::dbConnect(duckdb::duckdb())\n+    # Use the same CPU count that the arrow library is set to\n+    DBI::dbExecute(con, paste0(\"PRAGMA threads=\", cpu_count()))\n+    options(arrow_duck_con = con)\n+  }\n+  con\n+}\n+\n+# TODO: note that this is copied from dbplyr\n\nReview comment:\n       _nods_ we also should include info about this in LICENSE.txt too, or is it changed enough to not also need that?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T17:29:58.745+0000",
                    "updated": "2021-07-22T17:29:58.745+0000",
                    "started": "2021-07-22T17:29:58.745+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626800",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675013509\n\n\n\n##########\nFile path: r/tests/testthat/test-duckdb.R\n##########\n@@ -0,0 +1,192 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+skip_if_not_installed(\"duckdb\")\n+library(duckdb)\n+library(dplyr)\n+\n+con <- dbConnect(duckdb::duckdb())\n+# we always want to test in parallel\n+dbExecute(con, \"PRAGMA threads=2\")\n+\n+test_that(\"basic integration\", {\n\nReview comment:\n       Yes, I'll take it out\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T17:31:33.806+0000",
                    "updated": "2021-07-22T17:31:33.806+0000",
                    "started": "2021-07-22T17:31:33.806+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626801",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675054938\n\n\n\n##########\nFile path: r/R/alchemize.R\n##########\n@@ -0,0 +1,81 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' Transform a data structure from one engine to another\n\nReview comment:\n       Oh, yeah that's not too far off of what `tbl()` is used for elsewhere both `collect()` and `compute()` imply that there's a data processing/change step, where as `tbl()` doesn't have that same baggage. `tbl()` is a bit funny as it stands: [with `tbl.src_dbi()`](https://github.com/tidyverse/dbplyr/blob/47e53ce30402d41ae4b38c803de12e63d64a9b6c/R/src_dbi.R#L83-L86) takes a `src` (connection), and `from` a character of the table name versus the standard `tbl` from dplyr where the `src` argument is the thing you want to create a `tbl` from. Which would make our `tbl.*()` funny in that it has arguments: `src` - the Arrow object, `con` - the db connection to use, and `name` (or something like it, or maybe we embed that inside the function...) \u2013 the name of the view to create. \r\n   \r\n   I think for now this is fine (though I will try and make sure that the docs explain the funny bit where _for arrow -> duckdb_ the `src` in `tbl` is *not* the duckdb dbi connection like one might expect (and instead there's a con argument for that)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T18:11:21.486+0000",
                    "updated": "2021-07-22T18:11:21.486+0000",
                    "started": "2021-07-22T18:11:21.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626819",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626828",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675075896\n\n\n\n##########\nFile path: r/DESCRIPTION\n##########\n@@ -40,9 +40,11 @@ Roxygen: list(markdown = TRUE, r6 = FALSE, load = \"source\")\n RoxygenNote: 7.1.1.9001\n VignetteBuilder: knitr\n Suggests:\n+    DBI,\n     decor,\n     distro,\n     dplyr,\n+    duckdb (> 0.2.7),\n\nReview comment:\n       Do we need to suggest dbplyr too?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T18:43:17.017+0000",
                    "updated": "2021-07-22T18:43:17.017+0000",
                    "started": "2021-07-22T18:43:17.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626828",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675077531\n\n\n\n##########\nFile path: r/R/duckdb.R\n##########\n@@ -0,0 +1,91 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+arrow_duck_connection <- function() {\n+  con <- getOption(\"arrow_duck_con\")\n+  if (is.null(con) || !DBI::dbIsValid(con)) {\n+    con <- DBI::dbConnect(duckdb::duckdb())\n+    # Use the same CPU count that the arrow library is set to\n+    DBI::dbExecute(con, paste0(\"PRAGMA threads=\", cpu_count()))\n+    options(arrow_duck_con = con)\n+  }\n+  con\n+}\n+\n+# TODO: note that this is copied from dbplyr\n\nReview comment:\n       I don't think this needs LICENSE addition but you could also paraphrase it more so that it's less literally similar.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T18:45:51.800+0000",
                    "updated": "2021-07-22T18:45:51.800+0000",
                    "started": "2021-07-22T18:45:51.799+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626829",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675077691\n\n\n\n##########\nFile path: r/DESCRIPTION\n##########\n@@ -40,9 +40,11 @@ Roxygen: list(markdown = TRUE, r6 = FALSE, load = \"source\")\n RoxygenNote: 7.1.1.9001\n VignetteBuilder: knitr\n Suggests:\n+    DBI,\n     decor,\n     distro,\n     dplyr,\n+    duckdb (> 0.2.7),\n\nReview comment:\n       For the tests to run, yes. For now I added it as a step in the CI setup, since these tests _are_ pretty peripheral and for ~anyone installing any of the packages for real I'm certain they will already have dbplyr installed. But we can add it to suggests if we don't think that's too heavy.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T18:46:05.283+0000",
                    "updated": "2021-07-22T18:46:05.283+0000",
                    "started": "2021-07-22T18:46:05.283+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626830",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675078920\n\n\n\n##########\nFile path: r/R/alchemize.R\n##########\n@@ -0,0 +1,81 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' Transform a data structure from one engine to another\n\nReview comment:\n       If `tbl()` doesn't seem quite right we don't need to force it. Easy enough to define a `to_duckdb(.data, con = arrow_duck_con(), ...)` function that behaves like we want.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T18:47:54.667+0000",
                    "updated": "2021-07-22T18:47:54.667+0000",
                    "started": "2021-07-22T18:47:54.666+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626832",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626840",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675084799\n\n\n\n##########\nFile path: r/R/alchemize.R\n##########\n@@ -0,0 +1,81 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' Transform a data structure from one engine to another\n\nReview comment:\n       \ud83e\udd14 I'm working on this right now and I'm torn. I like the idea of having one function / family of them that clearly do this kind of transformation (right now it's relatively limited, but we've got 2 already!).\r\n   \r\n   `tbl` works pretty well, though right now I'm trying to figure out what the right answer is for `tbl(..., .engine = \"arrow\")`. In an ideal world(?) duckdb would also expose a C-interface for us to get Arrow data out of, such that one could pull data back in to Arrow without needing to route via R which this would be exactly that (though AFAICT that doesn't currently exist).\r\n   \r\n   I have right now (with the comment in the middle not totally sure what to do)\r\n   ```\r\n   tbl.arrow_dplyr_query <- function(src, ..., .engine = c(\"arrow\", \"duckdb\")) {\r\n     engine <- match.arg(.engine)\r\n   \r\n     if (engine == \"arrow\") {\r\n       # What should we do here? Possibilities:\r\n       # stop(\"not yet implemented\")?\r\n       # return(src) # no-op + maybe a warning that we did nothing\r\n       # return(arrow_dplyr_query(src)) # this is the most tbl like thing for an Arrow object\r\n     } else if (engine == \"duckdb\") {\r\n       .alchemize_to_duckdb(src = src, ...)\r\n     }\r\n   }\r\n   ```\r\n   \r\n   So maybe it is worth waiting until some of those other features exist (or the next hand-over integration comes up) before we come up with a grand scheme that unifies these kinds of hand offs. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T18:57:05.808+0000",
                    "updated": "2021-07-22T18:57:05.808+0000",
                    "started": "2021-07-22T18:57:05.808+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626840",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626883",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675127116\n\n\n\n##########\nFile path: r/R/duckdb.R\n##########\n@@ -0,0 +1,117 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' Create a (virtual) DuckDB table from an Arrow object\n+#'\n+#' This will do the necessary configuration to create a (virtual) table in DuckDB\n+#' that is backed by the Arrow object given. No data is copied or modified until\n+#' `collect()` or `compute()` are called or a query is run against the table.\n+#'\n+#' The result is a dbplyr-compatible object that can be used in d(b)plyr pipelines.\n+#'\n+#' @param src the Arrow object (e.g. Dataset, Table) to use for the DuckDB table\n+#' @param con a DuckDB connection to use (default will create one and store it\n+#' in `options(\"arrow_duck_con\")`)\n+#' @param table_name a name to use in DuckDB for this object. The default is a\n+#' unique string `\"arrow_\"` followed by numbers.\n+#' @param auto_disconnect should the table be automatically cleaned up when the\n+#' resulting object is removed (and garbage collected)? Default: `TRUE`\n+#'\n+#' @return A tbl of the new table in DuckDB\n+#'\n+#' @keywords internal\n+#' @name to_duckdb\n+NULL\n+\n+arrow_duck_connection <- function() {\n+  con <- getOption(\"arrow_duck_con\")\n+  if (is.null(con) || !DBI::dbIsValid(con)) {\n+    con <- DBI::dbConnect(duckdb::duckdb())\n+    # Use the same CPU count that the arrow library is set to\n+    DBI::dbExecute(con, paste0(\"PRAGMA threads=\", cpu_count()))\n+    options(arrow_duck_con = con)\n+  }\n+  con\n+}\n+\n+# Adapted from dbplyr\n+unique_arrow_tablename <- function () {\n+  i <- getOption(\"arrow_table_name\", 0) + 1\n+  options(arrow_table_name = i)\n+  sprintf(\"arrow_%03i\", i)\n+}\n+\n+.alchemize_to_duckdb <- function(\n\nReview comment:\n       I'd just do this, attach the rd doclets directly here, and drop the S3 method business below, I don't think it gives you anything useful\r\n   \r\n   ```suggestion\r\n   to_duckdb <- function(\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T20:07:23.936+0000",
                    "updated": "2021-07-22T20:07:23.936+0000",
                    "started": "2021-07-22T20:07:23.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626883",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626884",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675127935\n\n\n\n##########\nFile path: r/R/duckdb.R\n##########\n@@ -0,0 +1,117 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' Create a (virtual) DuckDB table from an Arrow object\n+#'\n+#' This will do the necessary configuration to create a (virtual) table in DuckDB\n+#' that is backed by the Arrow object given. No data is copied or modified until\n+#' `collect()` or `compute()` are called or a query is run against the table.\n+#'\n+#' The result is a dbplyr-compatible object that can be used in d(b)plyr pipelines.\n+#'\n+#' @param src the Arrow object (e.g. Dataset, Table) to use for the DuckDB table\n+#' @param con a DuckDB connection to use (default will create one and store it\n+#' in `options(\"arrow_duck_con\")`)\n+#' @param table_name a name to use in DuckDB for this object. The default is a\n+#' unique string `\"arrow_\"` followed by numbers.\n+#' @param auto_disconnect should the table be automatically cleaned up when the\n+#' resulting object is removed (and garbage collected)? Default: `TRUE`\n+#'\n+#' @return A tbl of the new table in DuckDB\n+#'\n+#' @keywords internal\n+#' @name to_duckdb\n+NULL\n+\n+arrow_duck_connection <- function() {\n+  con <- getOption(\"arrow_duck_con\")\n+  if (is.null(con) || !DBI::dbIsValid(con)) {\n+    con <- DBI::dbConnect(duckdb::duckdb())\n+    # Use the same CPU count that the arrow library is set to\n+    DBI::dbExecute(con, paste0(\"PRAGMA threads=\", cpu_count()))\n+    options(arrow_duck_con = con)\n+  }\n+  con\n+}\n+\n+# Adapted from dbplyr\n+unique_arrow_tablename <- function () {\n+  i <- getOption(\"arrow_table_name\", 0) + 1\n+  options(arrow_table_name = i)\n+  sprintf(\"arrow_%03i\", i)\n+}\n+\n+.alchemize_to_duckdb <- function(\n+  src,\n+  con = arrow_duck_connection(),\n+  table_name =  unique_arrow_tablename(),\n+  auto_disconnect = TRUE) {\n+  duckdb::duckdb_register_arrow(con, table_name, src)\n+\n+  tbl <- tbl(con, table_name)\n+  groups <- src$group\n+  if (length(groups) > 0 && !is.null(groups)) {\n+    tbl <- dplyr::group_by(tbl, !!rlang::sym(groups))\n+  }\n+\n+  if (auto_disconnect) {\n+    # this will add the correct connection disconnection when the tbl is gced.\n+    # we should probably confirm that this use of src$disco is kosher.\n+    tbl$src$disco <- duckdb_disconnector(con, table_name)\n+  }\n+\n+  tbl\n+}\n+\n+#' @rdname to_duckdb\n+#' @export\n+to_duckdb <- function(src, con, table_name, auto_disconnect) UseMethod(\"to_duckdb\", src)\n+\n+#' @rdname to_duckdb\n+#' @export\n+to_duckdb.Dataset <- .alchemize_to_duckdb\n+\n+#' @rdname to_duckdb\n+#' @export\n+to_duckdb.Table <- .alchemize_to_duckdb\n+\n+#' @rdname to_duckdb\n+#' @export\n+to_duckdb.arrow_dplyr_query <- .alchemize_to_duckdb\n+\n+summarise_duck <- function(.data, ...) {\n\nReview comment:\n       If this is all that summarize_duck does, we can just inline it in summarize.arrow_dplyr_query\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T20:08:38.732+0000",
                    "updated": "2021-07-22T20:08:38.732+0000",
                    "started": "2021-07-22T20:08:38.732+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626884",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626885",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675128474\n\n\n\n##########\nFile path: r/R/duckdb.R\n##########\n@@ -0,0 +1,117 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' Create a (virtual) DuckDB table from an Arrow object\n+#'\n+#' This will do the necessary configuration to create a (virtual) table in DuckDB\n+#' that is backed by the Arrow object given. No data is copied or modified until\n+#' `collect()` or `compute()` are called or a query is run against the table.\n+#'\n+#' The result is a dbplyr-compatible object that can be used in d(b)plyr pipelines.\n+#'\n+#' @param src the Arrow object (e.g. Dataset, Table) to use for the DuckDB table\n+#' @param con a DuckDB connection to use (default will create one and store it\n+#' in `options(\"arrow_duck_con\")`)\n+#' @param table_name a name to use in DuckDB for this object. The default is a\n+#' unique string `\"arrow_\"` followed by numbers.\n+#' @param auto_disconnect should the table be automatically cleaned up when the\n+#' resulting object is removed (and garbage collected)? Default: `TRUE`\n+#'\n+#' @return A tbl of the new table in DuckDB\n+#'\n+#' @keywords internal\n+#' @name to_duckdb\n+NULL\n+\n+arrow_duck_connection <- function() {\n+  con <- getOption(\"arrow_duck_con\")\n+  if (is.null(con) || !DBI::dbIsValid(con)) {\n+    con <- DBI::dbConnect(duckdb::duckdb())\n+    # Use the same CPU count that the arrow library is set to\n+    DBI::dbExecute(con, paste0(\"PRAGMA threads=\", cpu_count()))\n+    options(arrow_duck_con = con)\n+  }\n+  con\n+}\n+\n+# Adapted from dbplyr\n+unique_arrow_tablename <- function () {\n+  i <- getOption(\"arrow_table_name\", 0) + 1\n+  options(arrow_table_name = i)\n+  sprintf(\"arrow_%03i\", i)\n+}\n+\n+.alchemize_to_duckdb <- function(\n+  src,\n+  con = arrow_duck_connection(),\n+  table_name =  unique_arrow_tablename(),\n+  auto_disconnect = TRUE) {\n+  duckdb::duckdb_register_arrow(con, table_name, src)\n+\n+  tbl <- tbl(con, table_name)\n+  groups <- src$group\n+  if (length(groups) > 0 && !is.null(groups)) {\n+    tbl <- dplyr::group_by(tbl, !!rlang::sym(groups))\n+  }\n+\n+  if (auto_disconnect) {\n+    # this will add the correct connection disconnection when the tbl is gced.\n+    # we should probably confirm that this use of src$disco is kosher.\n+    tbl$src$disco <- duckdb_disconnector(con, table_name)\n+  }\n+\n+  tbl\n+}\n+\n+#' @rdname to_duckdb\n+#' @export\n+to_duckdb <- function(src, con, table_name, auto_disconnect) UseMethod(\"to_duckdb\", src)\n+\n+#' @rdname to_duckdb\n+#' @export\n+to_duckdb.Dataset <- .alchemize_to_duckdb\n+\n+#' @rdname to_duckdb\n+#' @export\n+to_duckdb.Table <- .alchemize_to_duckdb\n+\n+#' @rdname to_duckdb\n+#' @export\n+to_duckdb.arrow_dplyr_query <- .alchemize_to_duckdb\n+\n+summarise_duck <- function(.data, ...) {\n+  # TODO: pass a connection?\n\nReview comment:\n       I don't think so--if the user wants more control over the duckdb connection, they can call `to_duckdb()` explicitly rather than implicitly here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T20:09:32.262+0000",
                    "updated": "2021-07-22T20:09:32.262+0000",
                    "started": "2021-07-22T20:09:32.262+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626885",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626887",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675129884\n\n\n\n##########\nFile path: r/tests/testthat/test-duckdb.R\n##########\n@@ -0,0 +1,189 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+skip_if_not_installed(\"duckdb\", minimum_version = \"0.2.8\")\n+skip_if_not_installed(\"dbplyr\")\n+library(duckdb)\n+library(dplyr)\n+\n+con <- dbConnect(duckdb::duckdb())\n+# we always want to test in parallel\n+dbExecute(con, \"PRAGMA threads=2\")\n+\n+# write one table to the connection so it is kept open\n+DBI::dbWriteTable(con, \"mtcars\", mtcars)\n+\n+test_that(\"to_duckdb\", {\n+  ds <- InMemoryDataset$create(example_data)\n+\n+  expect_identical(\n+    ds %>%\n+      to_duckdb() %>%\n+      collect() %>%\n+      # factors don't roundtrip\n+      select(!fct),\n+    select(example_data, !fct)\n+  )\n+\n+  expect_identical(\n+    ds %>%\n+      select(int, lgl, dbl) %>%\n+      to_duckdb() %>%\n+      group_by(lgl) %>%\n+      summarise(mean_int = mean(int, na.rm = TRUE), mean_dbl = mean(dbl, na.rm = TRUE)) %>%\n+      collect(),\n+    tibble::tibble(\n+      lgl = c(TRUE, NA, FALSE),\n+      mean_int = c(3, 6.25, 8.5),\n+      mean_dbl = c(3.1, 6.35, 6.1)\n+    )\n+  )\n+\n+  # can group_by before the to_duckdb\n+  expect_identical(\n+    ds %>%\n+      select(int, lgl, dbl) %>%\n+      group_by(lgl) %>%\n+      to_duckdb() %>%\n+      summarise(mean_int = mean(int, na.rm = TRUE), mean_dbl = mean(dbl, na.rm = TRUE)) %>%\n+      collect(),\n+    tibble::tibble(\n+      lgl = c(TRUE, NA, FALSE),\n+      mean_int = c(3, 6.25, 8.5),\n+      mean_dbl = c(3.1, 6.35, 6.1)\n+    )\n+  )\n+})\n+\n+test_that(\"summarise(..., .engine)\", {\n+  ds <- InMemoryDataset$create(example_data)\n+  expect_identical(\n+    ds %>%\n+      select(int, lgl, dbl) %>%\n+      group_by(lgl) %>%\n+      summarise(\n+        mean_int = mean(int, na.rm = TRUE),\n+        mean_dbl = mean(dbl, na.rm = TRUE),\n+        .engine = \"duckdb\"\n+      ) %>%\n+      collect(),\n+    tibble::tibble(\n+      lgl = c(TRUE, NA, FALSE),\n+      mean_int = c(3, 6.25, 8.5),\n+      mean_dbl = c(3.1, 6.35, 6.1)\n+    )\n+  )\n+})\n+\n+test_that(\"Joining, auto-cleanup\", {\n+  ds <- InMemoryDataset$create(example_data)\n+\n+  # we always want to test in parallel\n+  dbExecute(con, \"PRAGMA threads=2\")\n+\n+  table_one <- to_duckdb(ds, con = con)\n+  table_one_name <- as.character(table_one$ops$x)\n\nReview comment:\n       Thinking about the UX we want to advertise, would it be better to do something like this?\r\n   \r\n   ```suggestion\r\n     table_one_name <- \"table_one\"\r\n     table_one <- to_duckdb(ds, con = con, name = table_one_name)\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T20:11:50.257+0000",
                    "updated": "2021-07-22T20:11:50.257+0000",
                    "started": "2021-07-22T20:11:50.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626887",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675131832\n\n\n\n##########\nFile path: r/tests/testthat/test-duckdb.R\n##########\n@@ -0,0 +1,189 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+skip_if_not_installed(\"duckdb\", minimum_version = \"0.2.8\")\n+skip_if_not_installed(\"dbplyr\")\n+library(duckdb)\n+library(dplyr)\n+\n+con <- dbConnect(duckdb::duckdb())\n+# we always want to test in parallel\n+dbExecute(con, \"PRAGMA threads=2\")\n+\n+# write one table to the connection so it is kept open\n+DBI::dbWriteTable(con, \"mtcars\", mtcars)\n+\n+test_that(\"to_duckdb\", {\n+  ds <- InMemoryDataset$create(example_data)\n+\n+  expect_identical(\n+    ds %>%\n+      to_duckdb() %>%\n+      collect() %>%\n+      # factors don't roundtrip\n+      select(!fct),\n+    select(example_data, !fct)\n+  )\n+\n+  expect_identical(\n+    ds %>%\n+      select(int, lgl, dbl) %>%\n+      to_duckdb() %>%\n+      group_by(lgl) %>%\n+      summarise(mean_int = mean(int, na.rm = TRUE), mean_dbl = mean(dbl, na.rm = TRUE)) %>%\n+      collect(),\n+    tibble::tibble(\n+      lgl = c(TRUE, NA, FALSE),\n+      mean_int = c(3, 6.25, 8.5),\n+      mean_dbl = c(3.1, 6.35, 6.1)\n+    )\n+  )\n+\n+  # can group_by before the to_duckdb\n+  expect_identical(\n+    ds %>%\n+      select(int, lgl, dbl) %>%\n+      group_by(lgl) %>%\n+      to_duckdb() %>%\n+      summarise(mean_int = mean(int, na.rm = TRUE), mean_dbl = mean(dbl, na.rm = TRUE)) %>%\n+      collect(),\n+    tibble::tibble(\n+      lgl = c(TRUE, NA, FALSE),\n+      mean_int = c(3, 6.25, 8.5),\n+      mean_dbl = c(3.1, 6.35, 6.1)\n+    )\n+  )\n+})\n+\n+test_that(\"summarise(..., .engine)\", {\n+  ds <- InMemoryDataset$create(example_data)\n+  expect_identical(\n+    ds %>%\n+      select(int, lgl, dbl) %>%\n+      group_by(lgl) %>%\n+      summarise(\n+        mean_int = mean(int, na.rm = TRUE),\n+        mean_dbl = mean(dbl, na.rm = TRUE),\n+        .engine = \"duckdb\"\n+      ) %>%\n+      collect(),\n+    tibble::tibble(\n+      lgl = c(TRUE, NA, FALSE),\n+      mean_int = c(3, 6.25, 8.5),\n+      mean_dbl = c(3.1, 6.35, 6.1)\n+    )\n+  )\n+})\n+\n+test_that(\"Joining, auto-cleanup\", {\n+  ds <- InMemoryDataset$create(example_data)\n+\n+  # we always want to test in parallel\n+  dbExecute(con, \"PRAGMA threads=2\")\n+\n+  table_one <- to_duckdb(ds, con = con)\n+  table_one_name <- as.character(table_one$ops$x)\n\nReview comment:\n       I also wonder if there's an S3 method or something to add to duckdb so that `tbl(duckdb::duckdb(), ds)` can do the right thing for an arrow dataset\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T20:15:08.554+0000",
                    "updated": "2021-07-22T20:15:08.554+0000",
                    "started": "2021-07-22T20:15:08.554+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626888",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/626891",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675138094\n\n\n\n##########\nFile path: r/tests/testthat/test-duckdb.R\n##########\n@@ -0,0 +1,189 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+skip_if_not_installed(\"duckdb\", minimum_version = \"0.2.8\")\n+skip_if_not_installed(\"dbplyr\")\n+library(duckdb)\n+library(dplyr)\n+\n+con <- dbConnect(duckdb::duckdb())\n+# we always want to test in parallel\n+dbExecute(con, \"PRAGMA threads=2\")\n+\n+# write one table to the connection so it is kept open\n+DBI::dbWriteTable(con, \"mtcars\", mtcars)\n+\n+test_that(\"to_duckdb\", {\n+  ds <- InMemoryDataset$create(example_data)\n+\n+  expect_identical(\n+    ds %>%\n+      to_duckdb() %>%\n+      collect() %>%\n+      # factors don't roundtrip\n+      select(!fct),\n+    select(example_data, !fct)\n+  )\n+\n+  expect_identical(\n+    ds %>%\n+      select(int, lgl, dbl) %>%\n+      to_duckdb() %>%\n+      group_by(lgl) %>%\n+      summarise(mean_int = mean(int, na.rm = TRUE), mean_dbl = mean(dbl, na.rm = TRUE)) %>%\n+      collect(),\n+    tibble::tibble(\n+      lgl = c(TRUE, NA, FALSE),\n+      mean_int = c(3, 6.25, 8.5),\n+      mean_dbl = c(3.1, 6.35, 6.1)\n+    )\n+  )\n+\n+  # can group_by before the to_duckdb\n+  expect_identical(\n+    ds %>%\n+      select(int, lgl, dbl) %>%\n+      group_by(lgl) %>%\n+      to_duckdb() %>%\n+      summarise(mean_int = mean(int, na.rm = TRUE), mean_dbl = mean(dbl, na.rm = TRUE)) %>%\n+      collect(),\n+    tibble::tibble(\n+      lgl = c(TRUE, NA, FALSE),\n+      mean_int = c(3, 6.25, 8.5),\n+      mean_dbl = c(3.1, 6.35, 6.1)\n+    )\n+  )\n+})\n+\n+test_that(\"summarise(..., .engine)\", {\n+  ds <- InMemoryDataset$create(example_data)\n+  expect_identical(\n+    ds %>%\n+      select(int, lgl, dbl) %>%\n+      group_by(lgl) %>%\n+      summarise(\n+        mean_int = mean(int, na.rm = TRUE),\n+        mean_dbl = mean(dbl, na.rm = TRUE),\n+        .engine = \"duckdb\"\n+      ) %>%\n+      collect(),\n+    tibble::tibble(\n+      lgl = c(TRUE, NA, FALSE),\n+      mean_int = c(3, 6.25, 8.5),\n+      mean_dbl = c(3.1, 6.35, 6.1)\n+    )\n+  )\n+})\n+\n+test_that(\"Joining, auto-cleanup\", {\n+  ds <- InMemoryDataset$create(example_data)\n+\n+  # we always want to test in parallel\n+  dbExecute(con, \"PRAGMA threads=2\")\n+\n+  table_one <- to_duckdb(ds, con = con)\n+  table_one_name <- as.character(table_one$ops$x)\n\nReview comment:\n       That's part of the confusion with `tbl` there, with (most?) sql backends, that's not how `tbl` is intended to work, it's really \"just\" for selecting a table (see below). We might extend it to do that, but that wouldn't match other backends.\r\n   \r\n   We might want to write a method for `DBI::CreateTable(duckdb::duckdb(), name = \"name\", value = ds)` (and possibly the older `WriteTable`, though that's supposed to be deprecated). Though that might be confusing if the data is being written in some way. Then again, that's basically `duckdb:: duckdb_register_arrow()` does \r\n   \r\n   ``` r\r\n   library(duckdb)\r\n   #> Loading required package: DBI\r\n   library(dplyr)\r\n   #> \r\n   #> Attaching package: 'dplyr'\r\n   #> The following objects are masked from 'package:stats':\r\n   #> \r\n   #>     filter, lag\r\n   #> The following objects are masked from 'package:base':\r\n   #> \r\n   #>     intersect, setdiff, setequal, union\r\n   \r\n   con <- DBI::dbConnect(duckdb::duckdb())\r\n   \r\n   tbl(con, mtcars)\r\n   #> Error in UseMethod(\"as.sql\"): no applicable method for 'as.sql' applied to an object of class \"data.frame\"\r\n   \r\n   \r\n   sqlite_con <- DBI::dbConnect(RSQLite::SQLite())\r\n   \r\n   tbl(sqlite_con, mtcars)\r\n   #> Error in UseMethod(\"as.sql\"): no applicable method for 'as.sql' applied to an object of class \"data.frame\"\r\n   ```\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-22T20:25:17.946+0000",
                    "updated": "2021-07-22T20:25:17.946+0000",
                    "started": "2021-07-22T20:25:17.946+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626891",
                    "issueId": "13377290"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/worklog/627194",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10780:\nURL: https://github.com/apache/arrow/pull/10780#discussion_r675581123\n\n\n\n##########\nFile path: r/R/duckdb.R\n##########\n@@ -0,0 +1,117 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' Create a (virtual) DuckDB table from an Arrow object\n+#'\n+#' This will do the necessary configuration to create a (virtual) table in DuckDB\n+#' that is backed by the Arrow object given. No data is copied or modified until\n+#' `collect()` or `compute()` are called or a query is run against the table.\n+#'\n+#' The result is a dbplyr-compatible object that can be used in d(b)plyr pipelines.\n+#'\n+#' @param src the Arrow object (e.g. Dataset, Table) to use for the DuckDB table\n+#' @param con a DuckDB connection to use (default will create one and store it\n+#' in `options(\"arrow_duck_con\")`)\n+#' @param table_name a name to use in DuckDB for this object. The default is a\n+#' unique string `\"arrow_\"` followed by numbers.\n+#' @param auto_disconnect should the table be automatically cleaned up when the\n+#' resulting object is removed (and garbage collected)? Default: `TRUE`\n+#'\n+#' @return A tbl of the new table in DuckDB\n+#'\n+#' @keywords internal\n+#' @name to_duckdb\n+NULL\n+\n+arrow_duck_connection <- function() {\n+  con <- getOption(\"arrow_duck_con\")\n+  if (is.null(con) || !DBI::dbIsValid(con)) {\n+    con <- DBI::dbConnect(duckdb::duckdb())\n+    # Use the same CPU count that the arrow library is set to\n+    DBI::dbExecute(con, paste0(\"PRAGMA threads=\", cpu_count()))\n+    options(arrow_duck_con = con)\n+  }\n+  con\n+}\n+\n+# Adapted from dbplyr\n+unique_arrow_tablename <- function () {\n+  i <- getOption(\"arrow_table_name\", 0) + 1\n+  options(arrow_table_name = i)\n+  sprintf(\"arrow_%03i\", i)\n+}\n+\n+.alchemize_to_duckdb <- function(\n\nReview comment:\n       \ud83d\udc4d \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-23T13:51:34.826+0000",
                    "updated": "2021-07-23T13:51:34.826+0000",
                    "started": "2021-07-23T13:51:34.825+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "627194",
                    "issueId": "13377290"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 21000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5504f15f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20d8fda3[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2aa25e63[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4df09b71[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f7a4be2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@519bb981[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6972a497[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@201081db[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d18eb60[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1c31cf3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7de95640[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@59d31e7f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jul 28 01:12:26 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-07-26T20:25:40.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12688/watchers",
            "watchCount": 6,
            "isWatching": false
        },
        "created": "2021-05-07T17:04:05.000+0000",
        "updated": "2022-07-12T19:31:35.000+0000",
        "timeoriginalestimate": null,
        "description": "DuckDB can read data from an Arrow C-interface stream. Once we can provide that struct from R, presumably DuckDB could query on that stream. \r\n\r\nA first step is just connecting the pieces. A second step would be to handle parts of the DuckDB query and push down filtering/projection to Arrow. \r\n\r\nWe need a function something like this:\r\n\r\n{code}\r\n#' Run a DuckDB query on Arrow data\r\n#'\r\n#' @param .data An `arrow` data object: `Dataset`, `Table`, `RecordBatch`, or \r\n#' an `arrow_dplyr_query` containing filter/mutate/etc. expressions\r\n#' @return A `duckdb::duckdb_connection`\r\nto_duckdb <- function(.data) {\r\n  # ARROW-12687: [C++][Python][Dataset] Convert Scanner into a RecordBatchReader \r\n  reader <- Scanner$create(.data)$ToRecordBatchReader()\r\n\r\n  # ARROW-12689: [R] Implement ArrowArrayStream C interface\r\n  stream_ptr <- allocate_arrow_array_stream()\r\n  on.exit(delete_arrow_array_stream(stream_ptr))\r\n  ExportRecordBatchReader(x, stream_ptr)\r\n\r\n  # TODO: DuckDB method to create table/connection from ArrowArrayStream ptr\r\n  duckdb::duck_connection_from_arrow_stream(stream_ptr)\r\n}\r\n{code}\r\n\r\nAssuming this existed, we could do something like (a variation of https://arrow.apache.org/docs/r/articles/dataset.html):\r\n\r\n{code}\r\nds <- open_dataset(\"nyc-taxi\", partitioning = c(\"year\", \"month\"))\r\nds %>%\r\n  filter(total_amount > 100, year == 2015) %>%\r\n  select(tip_amount, total_amount, passenger_count) %>%\r\n  mutate(tip_pct = 100 * tip_amount / total_amount) %>%\r\n  to_duckdb() %>%\r\n  group_by(passenger_count) %>%\r\n  summarise(\r\n    median_tip_pct = median(tip_pct),\r\n    n = n()\r\n  )\r\n{code}\r\n\r\nand duckdb would do the aggregation while the data reading, predicate pushdown, filtering, and projection would happen in Arrow. Or you could do {{dbGetQuery(ds, \"SOME SQL\")}} and that would evaluate on arrow data. ",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Use DuckDB to query an Arrow Dataset",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/comment/17381539",
                    "id": "17381539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Building from the code at https://github.com/pdet/duckdb-benchmark/blob/master/arrow/group_by_with_duckdb.R, I've worked up a slightly different interface, something we could add to the arrow package (adding duckdb and DBI to Suggests):\r\n\r\n{code}\r\n\r\nsummarise.arrow_dplyr_query <- function(.data, ..., .engine = c(\"arrow\", \"duckdb\")) {\r\n  if (match.arg(.engine) == \"duckdb\") {\r\n    summarize_duck(.data, ...)\r\n  } else {\r\n    # Continue with the current contents of summarise.arrow_dplyr_query\r\n    # ...\r\n  }\r\n}\r\n\r\nsummarise_duck <- function(.data, ...) {\r\n  # TODO better translation of aggregate functions, parse tree traversal\r\n  aggregates <- vapply(enquos(...), rlang::quo_name, \"character\")\r\n  tbl_name <- paste0(replicate(10, sample(LETTERS, 1, TRUE)), collapse = \"\")\r\n\r\n  con <- arrow_duck_connection()\r\n  duckdb::duckdb_register_arrow(con, tbl_name, .data$data)\r\n  on.exit(duckdb::duckdb_unregister_arrow(con, tbl_name))\r\n\r\n  groups_str <- paste(.data$groups, collapse = \", \")\r\n  aggr_str <- paste(aggregates, collapse = \", \")\r\n  # TODO use relational API instead of SQL string construction\r\n  DBI::dbGetQuery(con, sprintf(\"SELECT %s, %s FROM %s GROUP BY %s\", \r\n    groups_str, aggr_str, tbl_name, groups_str ))\r\n}\r\n\r\narrow_duck_connection <- function() {\r\n  con <- getOption(\"arrow_duck_con\")\r\n  if (is.null(con)) {\r\n    con <- dbConnect(duckdb::duckdb())\r\n    # Use the same CPU count that the arrow library is set to\r\n    DBI::dbExecute(con, paste0(\"PRAGMA threads=\", cpu_count()))\r\n    options(arrow_duck_con = con)\r\n  }\r\n  con\r\n}\r\n{code}\r\n\r\nThoughts?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-07-15T18:38:17.323+0000",
                    "updated": "2021-07-15T18:39:10.574+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/comment/17381546",
                    "id": "17381546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Hmm, I wonder if we (also?) want a `collect(..., .to = c(\"arrow\", \"duckdb\")` that returns either a dataframe/arrowtable or a duckdb based `tbl` reference respectively such that pipelines like the following work:\r\n\r\n{code}\r\nds %>%\r\n  select(...) %>%\r\n  filter(...) %>%\r\n  mutate(...) %>% \r\n  collect(.to = \"duckdb\") %>% \r\n  group_by(...) %>% \r\n  summarise(...) %>% \r\n  collect()\r\n{code}\r\n\r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-07-15T18:52:15.014+0000",
                    "updated": "2021-07-15T18:52:15.014+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/comment/17381548",
                    "id": "17381548",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Or probably `compute()` would be better for this (c.f. ARROW-11754 and ARROW-12282)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-07-15T18:56:44.111+0000",
                    "updated": "2021-07-15T18:56:44.111+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/comment/17387612",
                    "id": "17387612",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 10780\n[https://github.com/apache/arrow/pull/10780]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-07-26T20:25:40.418+0000",
                    "updated": "2021-07-26T20:25:40.418+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377290/comment/17388385",
                    "id": "17388385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "See\u00a0ARROW-13472 for reconsideration of the user interaction design for querying with the DuckDB engine.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-07-28T01:12:26.784+0000",
                    "updated": "2021-07-28T01:12:26.784+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z0qu1k:",
        "customfield_12314139": null
    }
}