{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13341934",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934",
    "key": "ARROW-10679",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10679/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934/worklog/515293",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove opened a new pull request #8740:\nURL: https://github.com/apache/arrow/pull/8740\n\n\n   We need to support CASE WHEN ... THEN .. ELSE .. END for many of the TPC-H queries.\r\n   \r\n   I'll be working on this over the next few days most likely.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-22T18:06:08.478+0000",
                    "updated": "2020-11-22T18:06:08.478+0000",
                    "started": "2020-11-22T18:06:08.477+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515293",
                    "issueId": "13341934"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934/worklog/515298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8740:\nURL: https://github.com/apache/arrow/pull/8740#issuecomment-731805071\n\n\n   https://issues.apache.org/jira/browse/ARROW-10679\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-22T18:24:24.871+0000",
                    "updated": "2020-11-22T18:24:24.871+0000",
                    "started": "2020-11-22T18:24:24.871+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515298",
                    "issueId": "13341934"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934/worklog/515309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8740:\nURL: https://github.com/apache/arrow/pull/8740#issuecomment-731841856\n\n\n   @jorgecarleitao @alamb I could use some advice on the best way to make this new code support all array types. In the past, I have gone with macros because I know how to do that, but perhaps I should be trying to use generics here?\r\n   \r\n   There may also be some patterns in here that we want to extract and implement as kernels in the arrow crate. In particular, I would like an `if` primitive so that I can do something like:\r\n   \r\n   ```rust\r\n   let new_array = boolean_array.ifThenElse(array1, array2);\r\n   ```\r\n   \r\n   If I had this it would simply this code quite a lot.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-22T20:25:52.251+0000",
                    "updated": "2020-11-22T20:25:52.251+0000",
                    "started": "2020-11-22T20:25:52.251+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515309",
                    "issueId": "13341934"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934/worklog/515310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove edited a comment on pull request #8740:\nURL: https://github.com/apache/arrow/pull/8740#issuecomment-731841856\n\n\n   @jorgecarleitao @alamb I could use some advice on the best way to make this new code support all array types. In the past, I have gone with macros because I know how to do that, but perhaps I should be trying to use generics here?\r\n   \r\n   There may also be some patterns in here that we want to extract and implement as kernels in the arrow crate. In particular, I would like an `if` primitive so that I can do something like:\r\n   \r\n   ```rust\r\n   let new_array = boolean_array.if_then_else(array1, array2);\r\n   ```\r\n   \r\n   If I had this it would simply this code quite a lot.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-22T20:31:45.649+0000",
                    "updated": "2020-11-22T20:31:45.649+0000",
                    "started": "2020-11-22T20:31:45.649+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515310",
                    "issueId": "13341934"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934/worklog/515313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8740:\nURL: https://github.com/apache/arrow/pull/8740#issuecomment-731845713\n\n\n   Cool!\r\n   \r\n   IMO we want to \"take\" from different arrays depending on a set of boolean conditions. My recommendation is to use  `MutableDataArray` API that we also use in the Join and that was though through exactly for this use-case.\r\n   \r\n   Something like \r\n   \r\n   ```rust\r\n   let boolean_conditions: Vec<BooleanArray> = <args>\r\n   let first_non_null: Vec<usize> = first_true(boolean_conditions)  // index from 0 to boolean_conditions.len() (inclusive, last represents the \"else\")\r\n   \r\n   let capacity = boolean_conditions[0].len();\r\n   let mutable = MutableDataArray::new(arrays.iter().map(|array| array.data_ref()).collect::<Vec<_>>(), capacity);\r\n   \r\n   for row in boolean_conditions[0].len() {\r\n       for index in first_non_null {\r\n           if index == boolean_conditions.len() {\r\n               // the else case\r\n               mutable.extend_null(index); // this function is still not available in master, but I have a branch with it\r\n           } else {\r\n               // take the slice `[row,row+1[` from array \"index\".\r\n               mutable.extend_from_slice(index, row, row + 1);\r\n           }\r\n       }\r\n   }\r\n   \r\n   return make_array(Arc::new(mutable.freeze()));\r\n   ```\r\n   \r\n   the advantage of this is that it works for all types except struct.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-22T20:55:13.961+0000",
                    "updated": "2020-11-22T20:55:13.961+0000",
                    "started": "2020-11-22T20:55:13.961+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515313",
                    "issueId": "13341934"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934/worklog/515314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao edited a comment on pull request #8740:\nURL: https://github.com/apache/arrow/pull/8740#issuecomment-731845713\n\n\n   Cool!\r\n   \r\n   IMO we want to \"take\" from different arrays depending on a set of boolean conditions. My recommendation is to use  `MutableDataArray` API that we also use in the Join and that was though through exactly for this use-case.\r\n   \r\n   Something like \r\n   \r\n   ```rust\r\n   let boolean_conditions: Vec<BooleanArray> = <args>\r\n   let first_non_null: Vec<usize> = first_true(boolean_conditions)  // index from 0 to boolean_conditions.len() (inclusive, last represents the \"else\")\r\n   \r\n   let capacity = boolean_conditions[0].len();\r\n   let arrays_data = arrays.iter().map(|array| array.data_ref()).collect::<Vec<_>>();\r\n   let mutable = MutableDataArray::new(&arrays_data, capacity);\r\n   \r\n   for row in boolean_conditions[0].len() {\r\n       for index in first_non_null {\r\n           if index == boolean_conditions.len() {\r\n               // the else case\r\n               mutable.extend_null(index); // this function is still not available in master, but I have a branch with it\r\n           } else {\r\n               // take the slice `[row,row+1[` from array \"index\".\r\n               mutable.extend_from_slice(index, row, row + 1);\r\n           }\r\n       }\r\n   }\r\n   \r\n   return make_array(Arc::new(mutable.freeze()));\r\n   ```\r\n   \r\n   the advantage of this is that it works for all types except struct.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-22T20:56:27.149+0000",
                    "updated": "2020-11-22T20:56:27.149+0000",
                    "started": "2020-11-22T20:56:27.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515314",
                    "issueId": "13341934"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934/worklog/515319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao edited a comment on pull request #8740:\nURL: https://github.com/apache/arrow/pull/8740#issuecomment-731845713\n\n\n   Cool!\r\n   \r\n   IMO we want to \"take\" from different arrays depending on a set of boolean conditions. My recommendation is to use  `MutableDataArray` API that we also use in the Join and that was though through exactly for this use-case.\r\n   \r\n   Something like \r\n   \r\n   ```rust\r\n   let boolean_conditions: Vec<BooleanArray> = <args>\r\n   let first_non_null: Vec<usize> = first_true(boolean_conditions)  // index from 0 to boolean_conditions.len() (inclusive, last represents the \"else\")\r\n   \r\n   let capacity = boolean_conditions[0].len();\r\n   let arrays_data = arrays.iter().map(|array| array.data_ref()).collect::<Vec<_>>();\r\n   let mutable = MutableDataArray::new(&arrays_data, capacity);\r\n   \r\n   for row in boolean_conditions[0].len() {\r\n       let index = first_non_null[row];\r\n       if index == boolean_conditions.len() {\r\n           // the else case\r\n           mutable.extend_null(index); // this function is still not available in master, but I have a branch with it\r\n       } else {\r\n           // take the slice `[row,row+1[` from array \"index\".\r\n           mutable.extend_from_slice(index, row, row + 1);\r\n       }\r\n   }\r\n   \r\n   return make_array(Arc::new(mutable.freeze()));\r\n   ```\r\n   \r\n   the advantage of this is that it works for all types except struct.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-22T21:39:20.627+0000",
                    "updated": "2020-11-22T21:39:20.627+0000",
                    "started": "2020-11-22T21:39:20.627+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515319",
                    "issueId": "13341934"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934/worklog/515329",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8740:\nURL: https://github.com/apache/arrow/pull/8740#issuecomment-731869217\n\n\n   @jorgecarleitao I went ahead and fully implemented this the inefficient way for now. It will take me some time to get familiar with the MutableArrayData approach so I would like to follow up with a separate PR to optimize this once it is plumbed through and fully tested.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-22T23:57:46.807+0000",
                    "updated": "2020-11-22T23:57:46.807+0000",
                    "started": "2020-11-22T23:57:46.807+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515329",
                    "issueId": "13341934"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934/worklog/515660",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8740:\nURL: https://github.com/apache/arrow/pull/8740#discussion_r528860991\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -126,10 +126,10 @@ impl ColumnarValue {\n         }\n     }\n \n-    fn into_array(self, batch: &RecordBatch) -> ArrayRef {\n+    fn into_array(self, num_rows: usize) -> ArrayRef {\n\nReview comment:\n       good. I had the same concern when reviewing this the other day.\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -1697,6 +1700,409 @@ pub fn is_not_null(arg: Arc<dyn PhysicalExpr>) -> Result<Arc<dyn PhysicalExpr>>\n     Ok(Arc::new(IsNotNullExpr::new(arg)))\n }\n \n+/// The CASE expression is similar to a series of nested if/else and there are two forms that\n+/// can be used. The first form consists of a series of boolean \"when\" expressions with\n+/// corresponding \"then\" expressions, and an optional \"else\" expression.\n+///\n+/// CASE WHEN condition THEN result\n+///      [WHEN ...]\n+///      [ELSE result]\n+/// END\n+///\n+/// The second form uses a base expression and then a series of \"when\" clauses that match on a\n+/// literal value.\n+///\n+/// CASE expression\n+///     WHEN value THEN result\n+///     [WHEN ...]\n+///     [ELSE result]\n+/// END\n+#[derive(Debug)]\n+struct CaseExpr {\n+    /// Optional base expression that can be compared to literal values in the \"when\" expressions\n+    expr: Option<Arc<dyn PhysicalExpr>>,\n+    /// One or more when/then expressions\n+    when_then_expr: Vec<(Arc<dyn PhysicalExpr>, Arc<dyn PhysicalExpr>)>,\n+    /// Optional \"else\" expression\n+    else_expr: Option<Arc<dyn PhysicalExpr>>,\n+}\n+\n+impl fmt::Display for CaseExpr {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"CASE \")?;\n+        if let Some(e) = &self.expr {\n+            write!(f, \"{} \", e)?;\n+        }\n+        for (w, t) in &self.when_then_expr {\n+            write!(f, \"WHEN {} THEN {} \", w, t)?;\n+        }\n+        if let Some(e) = &self.else_expr {\n+            write!(f, \"ELSE {} \", e)?;\n+        }\n+        write!(f, \"END\")\n+    }\n+}\n+\n+impl CaseExpr {\n+    pub fn try_new(\n+        expr: Option<Arc<dyn PhysicalExpr>>,\n+        when_then_expr: &[(Arc<dyn PhysicalExpr>, Arc<dyn PhysicalExpr>)],\n+        else_expr: Option<Arc<dyn PhysicalExpr>>,\n+    ) -> Result<Self> {\n+        if when_then_expr.len() == 0 {\n+            Err(DataFusionError::Execution(\n+                \"There must be at least one WHEN clause\".to_string(),\n+            ))\n+        } else {\n+            Ok(Self {\n+                expr,\n+                when_then_expr: when_then_expr.to_vec(),\n+                else_expr,\n+            })\n+        }\n+    }\n+}\n+\n+/// Create a CASE expression\n+pub fn case(\n+    expr: Option<Arc<dyn PhysicalExpr>>,\n+    when_thens: &[(Arc<dyn PhysicalExpr>, Arc<dyn PhysicalExpr>)],\n+    else_expr: Option<Arc<dyn PhysicalExpr>>,\n+) -> Result<Arc<dyn PhysicalExpr>> {\n+    Ok(Arc::new(CaseExpr::try_new(expr, when_thens, else_expr)?))\n+}\n+\n+macro_rules! if_then_else {\n+    ($BUILDER_TYPE:ty, $ARRAY_TYPE:ty, $BOOLS:expr, $TRUE:expr, $FALSE:expr) => {{\n+        let true_values = $TRUE\n+            .as_ref()\n+            .as_any()\n+            .downcast_ref::<$ARRAY_TYPE>()\n+            .expect(\"true_values downcast failed\");\n+\n+        let false_values = $FALSE\n+            .as_ref()\n+            .as_any()\n+            .downcast_ref::<$ARRAY_TYPE>()\n+            .expect(\"false_values downcast failed\");\n+\n+        let mut builder = <$BUILDER_TYPE>::new($BOOLS.len());\n+        for i in 0..$BOOLS.len() {\n+            if $BOOLS.is_null(i) {\n+                builder.append_null()?;\n+            } else if $BOOLS.value(i) {\n+                if true_values.is_null(i) {\n+                    builder.append_null()?;\n+                } else {\n+                    builder.append_value(true_values.value(i))?;\n+                }\n+            } else {\n+                if false_values.is_null(i) {\n+                    builder.append_null()?;\n+                } else {\n+                    builder.append_value(false_values.value(i))?;\n+                }\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+fn if_then_else(\n+    bools: &BooleanArray,\n+    true_values: ArrayRef,\n+    false_values: ArrayRef,\n+    data_type: &DataType,\n+) -> Result<ArrayRef> {\n+    match data_type {\n+        DataType::UInt8 => if_then_else!(\n+            array::UInt8Builder,\n+            array::UInt8Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::UInt16 => if_then_else!(\n+            array::UInt16Builder,\n+            array::UInt16Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::UInt32 => if_then_else!(\n+            array::UInt32Builder,\n+            array::UInt32Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::UInt64 => if_then_else!(\n+            array::UInt64Builder,\n+            array::UInt64Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Int8 => if_then_else!(\n+            array::Int8Builder,\n+            array::Int8Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Int16 => if_then_else!(\n+            array::Int16Builder,\n+            array::Int16Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Int32 => if_then_else!(\n+            array::Int32Builder,\n+            array::Int32Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Int64 => if_then_else!(\n+            array::Int64Builder,\n+            array::Int64Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Float32 => if_then_else!(\n+            array::Float32Builder,\n+            array::Float32Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Float64 => if_then_else!(\n+            array::Float64Builder,\n+            array::Float64Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Utf8 => if_then_else!(\n+            array::StringBuilder,\n+            array::StringArray,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        other => Err(DataFusionError::Execution(format!(\n+            \"CASE does not support '{:?}'\",\n+            other\n+        ))),\n+    }\n+}\n+\n+macro_rules! make_null_array {\n+    ($TY:ty, $N:expr) => {{\n+        let mut builder = <$TY>::new($N);\n+        for _ in 0..$N {\n+            builder.append_null()?;\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+fn build_null_array(data_type: &DataType, num_rows: usize) -> Result<ArrayRef> {\n+    match data_type {\n+        DataType::UInt8 => make_null_array!(array::UInt8Builder, num_rows),\n+        DataType::UInt16 => make_null_array!(array::UInt16Builder, num_rows),\n+        DataType::UInt32 => make_null_array!(array::UInt32Builder, num_rows),\n+        DataType::UInt64 => make_null_array!(array::UInt64Builder, num_rows),\n+        DataType::Int8 => make_null_array!(array::Int8Builder, num_rows),\n+        DataType::Int16 => make_null_array!(array::Int16Builder, num_rows),\n+        DataType::Int32 => make_null_array!(array::Int32Builder, num_rows),\n+        DataType::Int64 => make_null_array!(array::Int64Builder, num_rows),\n+        DataType::Float32 => make_null_array!(array::Float32Builder, num_rows),\n+        DataType::Float64 => make_null_array!(array::Float64Builder, num_rows),\n+        DataType::Utf8 => make_null_array!(array::StringBuilder, num_rows),\n+        other => Err(DataFusionError::Execution(format!(\n+            \"CASE does not support '{:?}'\",\n+            other\n+        ))),\n+    }\n+}\n+\n+macro_rules! array_equals {\n+    ($TY:ty, $L:expr, $R:expr) => {{\n+        let when_value = $L\n+            .as_ref()\n+            .as_any()\n+            .downcast_ref::<$TY>()\n+            .expect(\"array_equals downcast failed\");\n+\n+        let base_value = $R\n+            .as_ref()\n+            .as_any()\n+            .downcast_ref::<$TY>()\n+            .expect(\"array_equals downcast failed\");\n+\n+        let mut builder = BooleanBuilder::new(when_value.len());\n+        for row in 0..when_value.len() {\n+            if when_value.is_valid(row) && base_value.is_valid(row) {\n+                builder.append_value(when_value.value(row) == base_value.value(row))?;\n+            } else {\n+                builder.append_null()?;\n+            }\n+        }\n+        Ok(builder.finish())\n+    }};\n+}\n\nReview comment:\n       Doesn't this exist as `arrow::compute::kernels::comparison::eq`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-23T17:09:44.975+0000",
                    "updated": "2020-11-23T17:09:44.975+0000",
                    "started": "2020-11-23T17:09:44.975+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515660",
                    "issueId": "13341934"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934/worklog/515699",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8740:\nURL: https://github.com/apache/arrow/pull/8740#discussion_r528899049\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -1697,6 +1700,409 @@ pub fn is_not_null(arg: Arc<dyn PhysicalExpr>) -> Result<Arc<dyn PhysicalExpr>>\n     Ok(Arc::new(IsNotNullExpr::new(arg)))\n }\n \n+/// The CASE expression is similar to a series of nested if/else and there are two forms that\n+/// can be used. The first form consists of a series of boolean \"when\" expressions with\n+/// corresponding \"then\" expressions, and an optional \"else\" expression.\n+///\n+/// CASE WHEN condition THEN result\n+///      [WHEN ...]\n+///      [ELSE result]\n+/// END\n+///\n+/// The second form uses a base expression and then a series of \"when\" clauses that match on a\n+/// literal value.\n+///\n+/// CASE expression\n+///     WHEN value THEN result\n+///     [WHEN ...]\n+///     [ELSE result]\n+/// END\n+#[derive(Debug)]\n+struct CaseExpr {\n+    /// Optional base expression that can be compared to literal values in the \"when\" expressions\n+    expr: Option<Arc<dyn PhysicalExpr>>,\n+    /// One or more when/then expressions\n+    when_then_expr: Vec<(Arc<dyn PhysicalExpr>, Arc<dyn PhysicalExpr>)>,\n+    /// Optional \"else\" expression\n+    else_expr: Option<Arc<dyn PhysicalExpr>>,\n+}\n+\n+impl fmt::Display for CaseExpr {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"CASE \")?;\n+        if let Some(e) = &self.expr {\n+            write!(f, \"{} \", e)?;\n+        }\n+        for (w, t) in &self.when_then_expr {\n+            write!(f, \"WHEN {} THEN {} \", w, t)?;\n+        }\n+        if let Some(e) = &self.else_expr {\n+            write!(f, \"ELSE {} \", e)?;\n+        }\n+        write!(f, \"END\")\n+    }\n+}\n+\n+impl CaseExpr {\n+    pub fn try_new(\n+        expr: Option<Arc<dyn PhysicalExpr>>,\n+        when_then_expr: &[(Arc<dyn PhysicalExpr>, Arc<dyn PhysicalExpr>)],\n+        else_expr: Option<Arc<dyn PhysicalExpr>>,\n+    ) -> Result<Self> {\n+        if when_then_expr.len() == 0 {\n+            Err(DataFusionError::Execution(\n+                \"There must be at least one WHEN clause\".to_string(),\n+            ))\n+        } else {\n+            Ok(Self {\n+                expr,\n+                when_then_expr: when_then_expr.to_vec(),\n+                else_expr,\n+            })\n+        }\n+    }\n+}\n+\n+/// Create a CASE expression\n+pub fn case(\n+    expr: Option<Arc<dyn PhysicalExpr>>,\n+    when_thens: &[(Arc<dyn PhysicalExpr>, Arc<dyn PhysicalExpr>)],\n+    else_expr: Option<Arc<dyn PhysicalExpr>>,\n+) -> Result<Arc<dyn PhysicalExpr>> {\n+    Ok(Arc::new(CaseExpr::try_new(expr, when_thens, else_expr)?))\n+}\n+\n+macro_rules! if_then_else {\n+    ($BUILDER_TYPE:ty, $ARRAY_TYPE:ty, $BOOLS:expr, $TRUE:expr, $FALSE:expr) => {{\n+        let true_values = $TRUE\n+            .as_ref()\n+            .as_any()\n+            .downcast_ref::<$ARRAY_TYPE>()\n+            .expect(\"true_values downcast failed\");\n+\n+        let false_values = $FALSE\n+            .as_ref()\n+            .as_any()\n+            .downcast_ref::<$ARRAY_TYPE>()\n+            .expect(\"false_values downcast failed\");\n+\n+        let mut builder = <$BUILDER_TYPE>::new($BOOLS.len());\n+        for i in 0..$BOOLS.len() {\n+            if $BOOLS.is_null(i) {\n+                builder.append_null()?;\n+            } else if $BOOLS.value(i) {\n+                if true_values.is_null(i) {\n+                    builder.append_null()?;\n+                } else {\n+                    builder.append_value(true_values.value(i))?;\n+                }\n+            } else {\n+                if false_values.is_null(i) {\n+                    builder.append_null()?;\n+                } else {\n+                    builder.append_value(false_values.value(i))?;\n+                }\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+fn if_then_else(\n+    bools: &BooleanArray,\n+    true_values: ArrayRef,\n+    false_values: ArrayRef,\n+    data_type: &DataType,\n+) -> Result<ArrayRef> {\n+    match data_type {\n+        DataType::UInt8 => if_then_else!(\n+            array::UInt8Builder,\n+            array::UInt8Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::UInt16 => if_then_else!(\n+            array::UInt16Builder,\n+            array::UInt16Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::UInt32 => if_then_else!(\n+            array::UInt32Builder,\n+            array::UInt32Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::UInt64 => if_then_else!(\n+            array::UInt64Builder,\n+            array::UInt64Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Int8 => if_then_else!(\n+            array::Int8Builder,\n+            array::Int8Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Int16 => if_then_else!(\n+            array::Int16Builder,\n+            array::Int16Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Int32 => if_then_else!(\n+            array::Int32Builder,\n+            array::Int32Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Int64 => if_then_else!(\n+            array::Int64Builder,\n+            array::Int64Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Float32 => if_then_else!(\n+            array::Float32Builder,\n+            array::Float32Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Float64 => if_then_else!(\n+            array::Float64Builder,\n+            array::Float64Array,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        DataType::Utf8 => if_then_else!(\n+            array::StringBuilder,\n+            array::StringArray,\n+            bools,\n+            true_values,\n+            false_values\n+        ),\n+        other => Err(DataFusionError::Execution(format!(\n+            \"CASE does not support '{:?}'\",\n+            other\n+        ))),\n+    }\n+}\n+\n+macro_rules! make_null_array {\n+    ($TY:ty, $N:expr) => {{\n+        let mut builder = <$TY>::new($N);\n+        for _ in 0..$N {\n+            builder.append_null()?;\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+fn build_null_array(data_type: &DataType, num_rows: usize) -> Result<ArrayRef> {\n+    match data_type {\n+        DataType::UInt8 => make_null_array!(array::UInt8Builder, num_rows),\n+        DataType::UInt16 => make_null_array!(array::UInt16Builder, num_rows),\n+        DataType::UInt32 => make_null_array!(array::UInt32Builder, num_rows),\n+        DataType::UInt64 => make_null_array!(array::UInt64Builder, num_rows),\n+        DataType::Int8 => make_null_array!(array::Int8Builder, num_rows),\n+        DataType::Int16 => make_null_array!(array::Int16Builder, num_rows),\n+        DataType::Int32 => make_null_array!(array::Int32Builder, num_rows),\n+        DataType::Int64 => make_null_array!(array::Int64Builder, num_rows),\n+        DataType::Float32 => make_null_array!(array::Float32Builder, num_rows),\n+        DataType::Float64 => make_null_array!(array::Float64Builder, num_rows),\n+        DataType::Utf8 => make_null_array!(array::StringBuilder, num_rows),\n+        other => Err(DataFusionError::Execution(format!(\n+            \"CASE does not support '{:?}'\",\n+            other\n+        ))),\n+    }\n+}\n+\n+macro_rules! array_equals {\n+    ($TY:ty, $L:expr, $R:expr) => {{\n+        let when_value = $L\n+            .as_ref()\n+            .as_any()\n+            .downcast_ref::<$TY>()\n+            .expect(\"array_equals downcast failed\");\n+\n+        let base_value = $R\n+            .as_ref()\n+            .as_any()\n+            .downcast_ref::<$TY>()\n+            .expect(\"array_equals downcast failed\");\n+\n+        let mut builder = BooleanBuilder::new(when_value.len());\n+        for row in 0..when_value.len() {\n+            if when_value.is_valid(row) && base_value.is_valid(row) {\n+                builder.append_value(when_value.value(row) == base_value.value(row))?;\n+            } else {\n+                builder.append_null()?;\n+            }\n+        }\n+        Ok(builder.finish())\n+    }};\n+}\n\nReview comment:\n       I did try and use that and ran into an issue. I will merge this and then create a follow-up PR so we can discuss that. I may need some help. I am on vacation this week by the way, hence I have some time to focus on this. My goal is to have the complete TPC-H suite working from SQL this week without any shortcuts.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-23T18:06:19.105+0000",
                    "updated": "2020-11-23T18:06:19.105+0000",
                    "started": "2020-11-23T18:06:19.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515699",
                    "issueId": "13341934"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934/worklog/515700",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #8740:\nURL: https://github.com/apache/arrow/pull/8740\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-23T18:06:55.585+0000",
                    "updated": "2020-11-23T18:06:55.585+0000",
                    "started": "2020-11-23T18:06:55.584+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515700",
                    "issueId": "13341934"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934/worklog/515808",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8740:\nURL: https://github.com/apache/arrow/pull/8740#discussion_r529045971\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -126,10 +126,10 @@ impl ColumnarValue {\n         }\n     }\n \n-    fn into_array(self, batch: &RecordBatch) -> ArrayRef {\n+    fn into_array(self, num_rows: usize) -> ArrayRef {\n\nReview comment:\n       yeah this is a nice change\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-23T22:55:19.317+0000",
                    "updated": "2020-11-23T22:55:19.317+0000",
                    "started": "2020-11-23T22:55:19.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515808",
                    "issueId": "13341934"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@37b2a464[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@989ceba[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7cd6a282[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3bed5fbc[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@658eeb37[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@16fdbb74[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f76d99b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@e376d76[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c72f8d4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@672fc635[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@efc714a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3b95f13e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Nov 23 18:06:42 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-23T18:06:42.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10679/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-11-21T19:28:05.000+0000",
        "updated": "2020-11-23T22:55:20.000+0000",
        "timeoriginalestimate": null,
        "description": "Implement SQL CASE WHEN expression so that we can support TPC-H query 12 fully.\r\n\r\n\u00a0\r\n\r\nPostgres: [https://www.postgresqltutorial.com/postgresql-case/]\r\n\r\nSpark: [http://spark.apache.org/docs/latest/sql-ref-syntax-qry-select-case.html]\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Implement SQL CASE WHEN physical expression",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341934/comment/17237564",
                    "id": "17237564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 8740\n[https://github.com/apache/arrow/pull/8740]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-11-23T18:06:42.797+0000",
                    "updated": "2020-11-23T18:06:42.797+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ktcg:",
        "customfield_12314139": null
    }
}