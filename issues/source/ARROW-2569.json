{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13158526",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13158526",
    "key": "ARROW-2569",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2569/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 3,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13158526/worklog/100752",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2026: ARROW-2569: [C++] Improve thread pool size heuristic\nURL: https://github.com/apache/arrow/pull/2026\n \n \n   The heuristic goes this way:\r\n   - if the OMP_NUM_THREADS environment variable exists, it defines the baseline\r\n     number of available threads\r\n   - otherwise, the baseline is the value returned by std::thread::harware_concurrency()\r\n   - the OMP_THREAD_LIMIT environment variable, if it exists, defined the upper bound\r\n     for the final value, i.e. we return min(baseline, limit), otherwise we just\r\n     return the baseline.\r\n   \r\n   This is the heuristic used by other packages such as the GNU \"nproc\" utility.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-10T18:36:32.669+0000",
                    "updated": "2018-05-10T18:36:32.669+0000",
                    "started": "2018-05-10T18:36:32.668+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "100752",
                    "issueId": "13158526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13158526/worklog/100894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2026: ARROW-2569: [C++] Improve thread pool size heuristic\nURL: https://github.com/apache/arrow/pull/2026#issuecomment-388213107\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2026?src=pr&el=h1) Report\n   > Merging [#2026](https://codecov.io/gh/apache/arrow/pull/2026?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/2093f6ec5c628ef983194a3fb3d0a621dd58c600?src=pr&el=desc) will **increase** coverage by `0.06%`.\n   > The diff coverage is `88.88%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2026/graphs/tree.svg?token=LpTCFbqVT1&src=pr&width=650&height=150)](https://codecov.io/gh/apache/arrow/pull/2026?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2026      +/-   ##\n   ==========================================\n   + Coverage   87.41%   87.47%   +0.06%     \n   ==========================================\n     Files         189      178      -11     \n     Lines       29256    28584     -672     \n   ==========================================\n   - Hits        25573    25003     -570     \n   + Misses       3683     3581     -102\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2026?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/util/thread-pool.h](https://codecov.io/gh/apache/arrow/pull/2026/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLmg=) | `92.3% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/io-util.h](https://codecov.io/gh/apache/arrow/pull/2026/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2lvLXV0aWwuaA==) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/thread-pool-test.cc](https://codecov.io/gh/apache/arrow/pull/2026/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLXRlc3QuY2M=) | `98.87% <100%> (+0.25%)` | :arrow_up: |\n   | [cpp/src/arrow/util/io-util.cc](https://codecov.io/gh/apache/arrow/pull/2026/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2lvLXV0aWwuY2M=) | `82.83% <63.15%> (-3.26%)` | :arrow_down: |\n   | [cpp/src/arrow/util/thread-pool.cc](https://codecov.io/gh/apache/arrow/pull/2026/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLmNj) | `93.63% <95%> (+1.08%)` | :arrow_up: |\n   | [cpp/src/plasma/test/client\\_tests.cc](https://codecov.io/gh/apache/arrow/pull/2026/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGVzdC9jbGllbnRfdGVzdHMuY2M=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [rust/src/builder.rs](https://codecov.io/gh/apache/arrow/pull/2026/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYnVpbGRlci5ycw==) | | |\n   | [rust/src/datatypes.rs](https://codecov.io/gh/apache/arrow/pull/2026/diff?src=pr&el=tree#diff-cnVzdC9zcmMvZGF0YXR5cGVzLnJz) | | |\n   | [rust/src/list.rs](https://codecov.io/gh/apache/arrow/pull/2026/diff?src=pr&el=tree#diff-cnVzdC9zcmMvbGlzdC5ycw==) | | |\n   | [rust/src/buffer.rs](https://codecov.io/gh/apache/arrow/pull/2026/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYnVmZmVyLnJz) | | |\n   | ... and [9 more](https://codecov.io/gh/apache/arrow/pull/2026/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2026?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2026?src=pr&el=footer). Last update [2093f6e...5572b07](https://codecov.io/gh/apache/arrow/pull/2026?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-10T23:13:59.147+0000",
                    "updated": "2018-05-10T23:13:59.147+0000",
                    "started": "2018-05-10T23:13:59.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "100894",
                    "issueId": "13158526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13158526/worklog/101539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #2026: ARROW-2569: [C++] Improve thread pool size heuristic\nURL: https://github.com/apache/arrow/pull/2026\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/util/io-util.cc b/cpp/src/arrow/util/io-util.cc\nindex ce989f4a7b..207144619f 100644\n--- a/cpp/src/arrow/util/io-util.cc\n+++ b/cpp/src/arrow/util/io-util.cc\n@@ -29,6 +29,7 @@\n #include <sstream>\n \n #include <fcntl.h>\n+#include <stdlib.h>\n #include <string.h>\n #include <sys/stat.h>\n #include <sys/types.h>  // IWYU pragma: keep\n@@ -427,5 +428,75 @@ Status FileTruncate(int fd, const int64_t size) {\n   return Status::OK();\n }\n \n+//\n+// Environment variables\n+//\n+\n+Status GetEnvVar(const char* name, std::string* out) {\n+#ifdef _WIN32\n+  // On Windows, getenv() reads an early copy of the process' environment\n+  // which doesn't get updated when SetEnvironmentVariable() is called.\n+  constexpr int32_t bufsize = 2000;\n+  char c_str[bufsize];\n+  auto res = GetEnvironmentVariableA(name, c_str, bufsize);\n+  if (res >= bufsize) {\n+    return Status::CapacityError(\"environment variable value too long\");\n+  } else if (res == 0) {\n+    return Status::KeyError(\"environment variable undefined\");\n+  }\n+  *out = std::string(c_str);\n+  return Status::OK();\n+#else\n+  char* c_str = getenv(name);\n+  if (c_str == nullptr) {\n+    return Status::KeyError(\"environment variable undefined\");\n+  }\n+  *out = std::string(c_str);\n+  return Status::OK();\n+#endif\n+}\n+\n+Status GetEnvVar(const std::string& name, std::string* out) {\n+  return GetEnvVar(name.c_str(), out);\n+}\n+\n+Status SetEnvVar(const char* name, const char* value) {\n+#ifdef _WIN32\n+  if (SetEnvironmentVariableA(name, value)) {\n+    return Status::OK();\n+  } else {\n+    return Status::Invalid(\"failed setting environment variable\");\n+  }\n+#else\n+  if (setenv(name, value, 1) == 0) {\n+    return Status::OK();\n+  } else {\n+    return Status::Invalid(\"failed setting environment variable\");\n+  }\n+#endif\n+}\n+\n+Status SetEnvVar(const std::string& name, const std::string& value) {\n+  return SetEnvVar(name.c_str(), value.c_str());\n+}\n+\n+Status DelEnvVar(const char* name) {\n+#ifdef _WIN32\n+  if (SetEnvironmentVariableA(name, nullptr)) {\n+    return Status::OK();\n+  } else {\n+    return Status::Invalid(\"failed deleting environment variable\");\n+  }\n+#else\n+  if (unsetenv(name) == 0) {\n+    return Status::OK();\n+  } else {\n+    return Status::Invalid(\"failed deleting environment variable\");\n+  }\n+#endif\n+}\n+\n+Status DelEnvVar(const std::string& name) { return DelEnvVar(name.c_str()); }\n+\n }  // namespace internal\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/io-util.h b/cpp/src/arrow/util/io-util.h\nindex a0c66e94d5..28197e0dce 100644\n--- a/cpp/src/arrow/util/io-util.h\n+++ b/cpp/src/arrow/util/io-util.h\n@@ -163,6 +163,13 @@ Status FileClose(int fd);\n \n Status CreatePipe(int fd[2]);\n \n+Status GetEnvVar(const char* name, std::string* out);\n+Status GetEnvVar(const std::string& name, std::string* out);\n+Status SetEnvVar(const char* name, const char* value);\n+Status SetEnvVar(const std::string& name, const std::string& value);\n+Status DelEnvVar(const char* name);\n+Status DelEnvVar(const std::string& name);\n+\n }  // namespace internal\n }  // namespace arrow\n \ndiff --git a/cpp/src/arrow/util/thread-pool-test.cc b/cpp/src/arrow/util/thread-pool-test.cc\nindex 9e21b4544f..42bbe6ea66 100644\n--- a/cpp/src/arrow/util/thread-pool-test.cc\n+++ b/cpp/src/arrow/util/thread-pool-test.cc\n@@ -22,6 +22,7 @@\n #include <vector>\n \n #include \"arrow/test-util.h\"\n+#include \"arrow/util/io-util.h\"\n #include \"arrow/util/macros.h\"\n #include \"arrow/util/thread-pool.h\"\n \n@@ -271,5 +272,48 @@ TEST_F(TestThreadPool, Submit) {\n   }\n }\n \n+TEST(TestGlobalThreadPool, Capacity) {\n+  // Sanity check\n+  auto pool = CPUThreadPool();\n+  size_t capacity = pool->GetCapacity();\n+  ASSERT_GT(capacity, 0);\n+\n+  // Exercise default capacity heuristic\n+  ASSERT_OK(DelEnvVar(\"OMP_NUM_THREADS\"));\n+  ASSERT_OK(DelEnvVar(\"OMP_THREAD_LIMIT\"));\n+  size_t hw_capacity = std::thread::hardware_concurrency();\n+  ASSERT_EQ(ThreadPool::DefaultCapacity(), hw_capacity);\n+  ASSERT_OK(SetEnvVar(\"OMP_NUM_THREADS\", \"13\"));\n+  ASSERT_EQ(ThreadPool::DefaultCapacity(), 13);\n+  ASSERT_OK(SetEnvVar(\"OMP_NUM_THREADS\", \"7,5,13\"));\n+  ASSERT_EQ(ThreadPool::DefaultCapacity(), 7);\n+  ASSERT_OK(DelEnvVar(\"OMP_NUM_THREADS\"));\n+\n+  ASSERT_OK(SetEnvVar(\"OMP_THREAD_LIMIT\", \"1\"));\n+  ASSERT_EQ(ThreadPool::DefaultCapacity(), 1);\n+  ASSERT_OK(SetEnvVar(\"OMP_THREAD_LIMIT\", \"999\"));\n+  if (hw_capacity <= 999) {\n+    ASSERT_EQ(ThreadPool::DefaultCapacity(), hw_capacity);\n+  }\n+  ASSERT_OK(SetEnvVar(\"OMP_NUM_THREADS\", \"6,5,13\"));\n+  ASSERT_EQ(ThreadPool::DefaultCapacity(), 6);\n+  ASSERT_OK(SetEnvVar(\"OMP_THREAD_LIMIT\", \"2\"));\n+  ASSERT_EQ(ThreadPool::DefaultCapacity(), 2);\n+\n+  // Invalid env values\n+  ASSERT_OK(SetEnvVar(\"OMP_NUM_THREADS\", \"0\"));\n+  ASSERT_OK(SetEnvVar(\"OMP_THREAD_LIMIT\", \"0\"));\n+  ASSERT_EQ(ThreadPool::DefaultCapacity(), hw_capacity);\n+  ASSERT_OK(SetEnvVar(\"OMP_NUM_THREADS\", \"zzz\"));\n+  ASSERT_OK(SetEnvVar(\"OMP_THREAD_LIMIT\", \"x\"));\n+  ASSERT_EQ(ThreadPool::DefaultCapacity(), hw_capacity);\n+  ASSERT_OK(SetEnvVar(\"OMP_THREAD_LIMIT\", \"-1\"));\n+  ASSERT_OK(SetEnvVar(\"OMP_NUM_THREADS\", \"99999999999999999999999999\"));\n+  ASSERT_EQ(ThreadPool::DefaultCapacity(), hw_capacity);\n+\n+  ASSERT_OK(DelEnvVar(\"OMP_NUM_THREADS\"));\n+  ASSERT_OK(DelEnvVar(\"OMP_THREAD_LIMIT\"));\n+}\n+\n }  // namespace internal\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/thread-pool.cc b/cpp/src/arrow/util/thread-pool.cc\nindex 26ff51c3ca..0e264f3e0e 100644\n--- a/cpp/src/arrow/util/thread-pool.cc\n+++ b/cpp/src/arrow/util/thread-pool.cc\n@@ -16,8 +16,12 @@\n // under the License.\n \n #include \"arrow/util/thread-pool.h\"\n+#include \"arrow/util/io-util.h\"\n #include \"arrow/util/logging.h\"\n \n+#include <algorithm>\n+#include <string>\n+\n namespace arrow {\n namespace internal {\n \n@@ -162,8 +166,34 @@ Status ThreadPool::Make(size_t threads, std::shared_ptr<ThreadPool>* out) {\n // ----------------------------------------------------------------------\n // Global thread pool\n \n-static size_t DefaultCapacity() {\n-  size_t capacity = std::thread::hardware_concurrency();\n+static size_t ParseOMPEnvVar(const char* name) {\n+  // OMP_NUM_THREADS is a comma-separated list of positive integers.\n+  // We are only interested in the first (top-level) number.\n+  std::string str;\n+  if (!GetEnvVar(name, &str).ok()) {\n+    return 0;\n+  }\n+  auto first_comma = str.find_first_of(',');\n+  if (first_comma != std::string::npos) {\n+    str = str.substr(0, first_comma);\n+  }\n+  try {\n+    return static_cast<size_t>(std::max(0LL, std::stoll(str)));\n+  } catch (...) {\n+    return 0;\n+  }\n+}\n+\n+size_t ThreadPool::DefaultCapacity() {\n+  size_t capacity, limit;\n+  capacity = ParseOMPEnvVar(\"OMP_NUM_THREADS\");\n+  if (capacity == 0) {\n+    capacity = std::thread::hardware_concurrency();\n+  }\n+  limit = ParseOMPEnvVar(\"OMP_THREAD_LIMIT\");\n+  if (limit > 0) {\n+    capacity = std::min(limit, capacity);\n+  }\n   if (capacity == 0) {\n     ARROW_LOG(WARNING) << \"Failed to determine the number of available threads, \"\n                           \"using a hardcoded arbitrary value\";\n@@ -175,7 +205,7 @@ static size_t DefaultCapacity() {\n // Helper for the singleton pattern\n static std::shared_ptr<ThreadPool> MakePoolWithDefaultCapacity() {\n   std::shared_ptr<ThreadPool> pool;\n-  DCHECK_OK(ThreadPool::Make(DefaultCapacity(), &pool));\n+  DCHECK_OK(ThreadPool::Make(ThreadPool::DefaultCapacity(), &pool));\n   return pool;\n }\n \n@@ -184,9 +214,10 @@ ThreadPool* CPUThreadPool() {\n   return singleton.get();\n }\n \n+}  // namespace internal\n+\n Status SetCPUThreadPoolCapacity(size_t threads) {\n-  return CPUThreadPool()->SetCapacity(threads);\n+  return internal::CPUThreadPool()->SetCapacity(threads);\n }\n \n-}  // namespace internal\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/thread-pool.h b/cpp/src/arrow/util/thread-pool.h\nindex d5913cfc66..d426cbbe0b 100644\n--- a/cpp/src/arrow/util/thread-pool.h\n+++ b/cpp/src/arrow/util/thread-pool.h\n@@ -72,6 +72,10 @@ class ThreadPool {\n   // thread count is fully adjusted.\n   Status SetCapacity(size_t threads);\n \n+  // Heuristic for the default capacity of a thread pool for CPU-bound tasks.\n+  // This is exposed as a static method to help with testing.\n+  static size_t DefaultCapacity();\n+\n   // Shutdown the pool.  Once the pool starts shutting down, new tasks\n   // cannot be submitted anymore.\n   // If \"wait\" is true, shutdown waits for all pending tasks to be finished.\n@@ -109,6 +113,7 @@ class ThreadPool {\n \n  protected:\n   FRIEND_TEST(TestThreadPool, SetCapacity);\n+  FRIEND_TEST(TestGlobalThreadPool, Capacity);\n \n   ThreadPool();\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-13T15:18:15.027+0000",
                    "updated": "2018-05-13T15:18:15.027+0000",
                    "started": "2018-05-13T15:18:15.027+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "101539",
                    "issueId": "13158526"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 1800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@55f7f9fc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f00f258[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3711b092[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5feb061a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e1c512e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6fc82340[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55679b0b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@523b9c6b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ee23223[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@301ed09c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59c8ba57[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@571ebdc1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1800,
        "customfield_12312520": null,
        "customfield_12312521": "Sun May 13 15:18:09 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-05-13T15:18:09.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2569/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-05-10T17:17:42.000+0000",
        "updated": "2018-05-13T15:18:15.000+0000",
        "timeoriginalestimate": null,
        "description": "We currently use the number of available HW threads as the default thread pool size for CPU-bound tasks. We should also examine well-known environment variables such as {{OMP_NUM_THREADS}}. Some discussion here: https://bugs.python.org/issue32986",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "0.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Improve thread pool size heuristic",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13158526/comment/16473521",
                    "id": "16473521",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 2026\n[https://github.com/apache/arrow/pull/2026]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-05-13T15:18:09.849+0000",
                    "updated": "2018-05-13T15:18:09.849+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3tksv:",
        "customfield_12314139": null
    }
}