{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13218582",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582",
    "key": "ARROW-4714",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Yurui+Zhou",
            "name": "Yurui Zhou",
            "key": "yurui zhou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Yurui Zhou",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Yurui+Zhou",
            "name": "Yurui Zhou",
            "key": "yurui zhou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Yurui Zhou",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [
            {
                "id": "13237684",
                "key": "ARROW-5515",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13237684",
                "fields": {
                    "summary": "[Java] Ensure JVM has sufficient capacity for large number of local reference",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                        "description": "The issue is open and ready for the assignee to start work on it.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                        "name": "Open",
                        "id": "1",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                            "id": 2,
                            "key": "new",
                            "colorName": "blue-gray",
                            "name": "To Do"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            }
        ],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Yurui+Zhou",
            "name": "Yurui Zhou",
            "key": "yurui zhou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Yurui Zhou",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 71400,
            "total": 71400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 71400,
            "total": 71400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4714/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 135,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/244862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yuruiz commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348\n \n \n   - setup necessary dev environment for JNI development on JAVA and C++ codebase\r\n   - implemented JNI interface to enable reading arrow record batch from ORC files\r\n   - implemented a naive arrow buffer reference manager to ensure c++ memory release\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-20T07:36:19.332+0000",
                    "updated": "2019-05-20T07:36:19.332+0000",
                    "started": "2019-05-20T07:36:19.331+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "244862",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/244948",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285498022\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\n ##########\n @@ -196,6 +196,10 @@ void release(final BufferLedger ledger) {\n     }\n   }\n \n+  public void releaseMemory() {\n \n Review comment:\n   is this change required ? I don't think it should be a public API.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-20T09:24:21.875+0000",
                    "updated": "2019-05-20T09:24:21.875+0000",
                    "started": "2019-05-20T09:24:21.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "244948",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/244949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285488807\n \n \n\n ##########\n File path: java/README.md\n ##########\n @@ -45,6 +45,15 @@ mvn install -P gandiva -pl gandiva -am -Dgandiva.cpp.build.dir=../../debug\n This library is still in Alpha stages, and subject to API changes without\n deprecation warnings.\n \n+## Building and running tests for native orc (optional)\n+Arrow Cpp must be built before this step. The cpp build directory must\n+be provided as the value for argument arrow.cpp.build.dir. eg.\n+\n+```\n+cd java\n+mvn install -P native-orc -pl adapter/orc -am -Dgandiva.cpp.build.dir=../../debug\n \n Review comment:\n   orc.cpp.build.dir ? or, maybe, change both to cpp.build.dir ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-20T09:24:21.906+0000",
                    "updated": "2019-05-20T09:24:21.906+0000",
                    "started": "2019-05-20T09:24:21.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "244949",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/244970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "yuruiz commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285514024\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\n ##########\n @@ -196,6 +196,10 @@ void release(final BufferLedger ledger) {\n     }\n   }\n \n+  public void releaseMemory() {\n \n Review comment:\n   my bad, I will revert the changes on AllocationManager.java \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-20T09:59:11.668+0000",
                    "updated": "2019-05-20T09:59:11.668+0000",
                    "started": "2019-05-20T09:59:11.668+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "244970",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245735",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285839898\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/jni/jni_wrapper.cpp\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/adapters/orc/adapter.h>\n+#include <arrow/array.h>\n+#include <arrow/buffer.h>\n+#include <arrow/io/api.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/logging.h>\n+#include <cassert>\n+#include <string>\n+\n+#include \"org_apache_arrow_adapter_orc_OrcMemoryJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcReaderJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcStripeReaderJniWrapper.h\"\n+\n+using ORCFileReader = arrow::adapters::orc::ORCFileReader;\n+using RecordBatchReader = arrow::RecordBatchReader;\n+\n+void ThrowJavaIOException(JNIEnv* env, const std::exception& e) {\n+  jclass ioExceptionClass = env->FindClass(\"java/io/IOException\");\n+  if (ioExceptionClass != nullptr) {\n+    if (env->ThrowNew(ioExceptionClass, e.what())) {\n+      // Failed to new IOException. This means another error has occurred in Java\n+      // We just propagate this error to caller by doing nothing.\n+      ARROW_LOG(ERROR) << \"Error occurred when throwing IOException\";\n+    }\n+  } else {\n+    ARROW_LOG(ERROR) << \"Error occurred when getting IOException class\";\n+  }\n+}\n+\n+void ThrowJavaException(JNIEnv* env, const std::string& message) {\n+  jclass exception = env->FindClass(\"java/lang/Exception\");\n+  if (exception != nullptr) {\n+    env->ThrowNew(exception, message.c_str());\n+  } else {\n+    throw std::runtime_error(\"Can't find java/lang/Exception class\");\n+  }\n+}\n+\n+jfieldID GetFieldId(JNIEnv* env, jclass this_class, const std::string& sig) {\n+  jfieldID ret = env->GetFieldID(this_class, sig.c_str(), \"J\");\n+  if (ret == nullptr) {\n+    ThrowJavaException(env, \"Unable to get java class field: \" + sig);\n+  }\n+\n+  return ret;\n+}\n+\n+std::unique_ptr<ORCFileReader>* GetNativeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj, GetFieldId(env, env->GetObjectClass(this_obj), \"nativeReaderAddress\"));\n+  return reinterpret_cast<std::unique_ptr<ORCFileReader>*>(reader);\n+}\n+\n+std::shared_ptr<RecordBatchReader>* GetStripeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj,\n+      GetFieldId(env, env->GetObjectClass(this_obj), \"nativeStripeReaderAddress\"));\n+  return reinterpret_cast<std::shared_ptr<RecordBatchReader>*>(reader);\n+}\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+JNIEXPORT jboolean JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_open(\n+    JNIEnv* env, jobject this_obj, jstring file_path) {\n+  std::shared_ptr<arrow::io::ReadableFile> in_file;\n+  const char* str = env->GetStringUTFChars(file_path, nullptr);\n+  std::string path(str);\n+  env->ReleaseStringUTFChars(file_path, str);\n+\n+  arrow::Status ret;\n+  if (path.find(\"hdfs://\") == 0) {\n+    return false;\n+  } else {\n+    ret = arrow::io::ReadableFile::Open(path, &in_file);\n+  }\n+\n+  if (ret.ok()) {\n+    auto reader = new std::unique_ptr<ORCFileReader>();\n \n Review comment:\n   see note about memory management below (i.e. use a unique pointer and release it when you are ready to assign it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:50.197+0000",
                    "updated": "2019-05-21T03:47:50.197+0000",
                    "started": "2019-05-21T03:47:50.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245735",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245736",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285838959\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/jni/jni_wrapper.cpp\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/adapters/orc/adapter.h>\n+#include <arrow/array.h>\n+#include <arrow/buffer.h>\n+#include <arrow/io/api.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/logging.h>\n+#include <cassert>\n+#include <string>\n+\n+#include \"org_apache_arrow_adapter_orc_OrcMemoryJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcReaderJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcStripeReaderJniWrapper.h\"\n+\n+using ORCFileReader = arrow::adapters::orc::ORCFileReader;\n+using RecordBatchReader = arrow::RecordBatchReader;\n+\n+void ThrowJavaIOException(JNIEnv* env, const std::exception& e) {\n+  jclass ioExceptionClass = env->FindClass(\"java/io/IOException\");\n+  if (ioExceptionClass != nullptr) {\n+    if (env->ThrowNew(ioExceptionClass, e.what())) {\n+      // Failed to new IOException. This means another error has occurred in Java\n+      // We just propagate this error to caller by doing nothing.\n+      ARROW_LOG(ERROR) << \"Error occurred when throwing IOException\";\n+    }\n+  } else {\n+    ARROW_LOG(ERROR) << \"Error occurred when getting IOException class\";\n+  }\n+}\n+\n+void ThrowJavaException(JNIEnv* env, const std::string& message) {\n+  jclass exception = env->FindClass(\"java/lang/Exception\");\n+  if (exception != nullptr) {\n+    env->ThrowNew(exception, message.c_str());\n+  } else {\n+    throw std::runtime_error(\"Can't find java/lang/Exception class\");\n+  }\n+}\n+\n+jfieldID GetFieldId(JNIEnv* env, jclass this_class, const std::string& sig) {\n+  jfieldID ret = env->GetFieldID(this_class, sig.c_str(), \"J\");\n+  if (ret == nullptr) {\n+    ThrowJavaException(env, \"Unable to get java class field: \" + sig);\n+  }\n+\n+  return ret;\n+}\n+\n+std::unique_ptr<ORCFileReader>* GetNativeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj, GetFieldId(env, env->GetObjectClass(this_obj), \"nativeReaderAddress\"));\n+  return reinterpret_cast<std::unique_ptr<ORCFileReader>*>(reader);\n+}\n+\n+std::shared_ptr<RecordBatchReader>* GetStripeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj,\n+      GetFieldId(env, env->GetObjectClass(this_obj), \"nativeStripeReaderAddress\"));\n+  return reinterpret_cast<std::shared_ptr<RecordBatchReader>*>(reader);\n+}\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+JNIEXPORT jboolean JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_open(\n+    JNIEnv* env, jobject this_obj, jstring file_path) {\n+  std::shared_ptr<arrow::io::ReadableFile> in_file;\n+  const char* str = env->GetStringUTFChars(file_path, nullptr);\n+  std::string path(str);\n+  env->ReleaseStringUTFChars(file_path, str);\n+\n+  arrow::Status ret;\n+  if (path.find(\"hdfs://\") == 0) {\n+    return false;\n+  } else {\n+    ret = arrow::io::ReadableFile::Open(path, &in_file);\n+  }\n+\n+  if (ret.ok()) {\n+    auto reader = new std::unique_ptr<ORCFileReader>();\n+\n+    ret = ORCFileReader::Open(\n+        std::static_pointer_cast<arrow::io::RandomAccessFile>(in_file),\n+        arrow::default_memory_pool(), reader);\n+\n+    if (!ret.ok()) {\n+      delete reader;\n+      ThrowJavaIOException(env, std::invalid_argument(\"Failed open file\" + path));\n+    }\n+\n+    env->SetLongField(\n+        this_obj, GetFieldId(env, env->GetObjectClass(this_obj), \"nativeReaderAddress\"),\n+        reinterpret_cast<long>(reader));\n+  }\n+\n+  return ret.ok();\n+}\n+\n+JNIEXPORT void JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_close(\n+    JNIEnv* env, jobject this_obj) {\n+  delete GetNativeReader(env, this_obj);\n+}\n+\n+JNIEXPORT jboolean JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_seek(\n+    JNIEnv* env, jobject this_obj, jint row_number) {\n+  auto reader = GetNativeReader(env, this_obj);\n+  return (*reader)->Seek(row_number).ok();\n+}\n+\n+JNIEXPORT jint JNICALL\n \n Review comment:\n   jlong?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:50.243+0000",
                    "updated": "2019-05-21T03:47:50.243+0000",
                    "started": "2019-05-21T03:47:50.242+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245736",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245737",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285840500\n \n \n\n ##########\n File path: java/adapter/orc/src/main/java/org/apache/arrow/adapter/orc/OrcReaderJniWrapper.java\n ##########\n @@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.orc;\n+\n+import java.io.IOException;\n+\n+public class OrcReaderJniWrapper {\n+\n+  private long nativeReaderAddress;\n+\n+  static {\n+    try {\n+      OrcJniUtils.loadOrcAdapterLibraryFromJar();\n+    } catch (IOException e) {\n+      throw new ExceptionInInitializerError(e);\n+    }\n+  }\n+\n+  public native boolean open(String fileName);\n \n Review comment:\n   javadoc.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:50.250+0000",
                    "updated": "2019-05-21T03:47:50.250+0000",
                    "started": "2019-05-21T03:47:50.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245737",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245738",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285839260\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/jni/jni_wrapper.cpp\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/adapters/orc/adapter.h>\n+#include <arrow/array.h>\n+#include <arrow/buffer.h>\n+#include <arrow/io/api.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/logging.h>\n+#include <cassert>\n+#include <string>\n+\n+#include \"org_apache_arrow_adapter_orc_OrcMemoryJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcReaderJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcStripeReaderJniWrapper.h\"\n+\n+using ORCFileReader = arrow::adapters::orc::ORCFileReader;\n+using RecordBatchReader = arrow::RecordBatchReader;\n+\n+void ThrowJavaIOException(JNIEnv* env, const std::exception& e) {\n+  jclass ioExceptionClass = env->FindClass(\"java/io/IOException\");\n+  if (ioExceptionClass != nullptr) {\n+    if (env->ThrowNew(ioExceptionClass, e.what())) {\n+      // Failed to new IOException. This means another error has occurred in Java\n+      // We just propagate this error to caller by doing nothing.\n+      ARROW_LOG(ERROR) << \"Error occurred when throwing IOException\";\n+    }\n+  } else {\n+    ARROW_LOG(ERROR) << \"Error occurred when getting IOException class\";\n+  }\n+}\n+\n+void ThrowJavaException(JNIEnv* env, const std::string& message) {\n+  jclass exception = env->FindClass(\"java/lang/Exception\");\n+  if (exception != nullptr) {\n+    env->ThrowNew(exception, message.c_str());\n+  } else {\n+    throw std::runtime_error(\"Can't find java/lang/Exception class\");\n+  }\n+}\n+\n+jfieldID GetFieldId(JNIEnv* env, jclass this_class, const std::string& sig) {\n+  jfieldID ret = env->GetFieldID(this_class, sig.c_str(), \"J\");\n+  if (ret == nullptr) {\n+    ThrowJavaException(env, \"Unable to get java class field: \" + sig);\n+  }\n+\n+  return ret;\n+}\n+\n+std::unique_ptr<ORCFileReader>* GetNativeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj, GetFieldId(env, env->GetObjectClass(this_obj), \"nativeReaderAddress\"));\n+  return reinterpret_cast<std::unique_ptr<ORCFileReader>*>(reader);\n+}\n+\n+std::shared_ptr<RecordBatchReader>* GetStripeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj,\n+      GetFieldId(env, env->GetObjectClass(this_obj), \"nativeStripeReaderAddress\"));\n+  return reinterpret_cast<std::shared_ptr<RecordBatchReader>*>(reader);\n+}\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+JNIEXPORT jboolean JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_open(\n+    JNIEnv* env, jobject this_obj, jstring file_path) {\n+  std::shared_ptr<arrow::io::ReadableFile> in_file;\n+  const char* str = env->GetStringUTFChars(file_path, nullptr);\n+  std::string path(str);\n+  env->ReleaseStringUTFChars(file_path, str);\n+\n+  arrow::Status ret;\n+  if (path.find(\"hdfs://\") == 0) {\n+    return false;\n+  } else {\n+    ret = arrow::io::ReadableFile::Open(path, &in_file);\n+  }\n+\n+  if (ret.ok()) {\n+    auto reader = new std::unique_ptr<ORCFileReader>();\n+\n+    ret = ORCFileReader::Open(\n+        std::static_pointer_cast<arrow::io::RandomAccessFile>(in_file),\n+        arrow::default_memory_pool(), reader);\n+\n+    if (!ret.ok()) {\n+      delete reader;\n+      ThrowJavaIOException(env, std::invalid_argument(\"Failed open file\" + path));\n+    }\n+\n+    env->SetLongField(\n+        this_obj, GetFieldId(env, env->GetObjectClass(this_obj), \"nativeReaderAddress\"),\n+        reinterpret_cast<long>(reader));\n+  }\n+\n+  return ret.ok();\n+}\n+\n+JNIEXPORT void JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_close(\n+    JNIEnv* env, jobject this_obj) {\n+  delete GetNativeReader(env, this_obj);\n+}\n+\n+JNIEXPORT jboolean JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_seek(\n+    JNIEnv* env, jobject this_obj, jint row_number) {\n+  auto reader = GetNativeReader(env, this_obj);\n+  return (*reader)->Seek(row_number).ok();\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_getNumberOfStripes(\n+    JNIEnv* env, jobject this_obj) {\n+  auto reader = GetNativeReader(env, this_obj);\n+  return (*reader)->NumberOfStripes();\n+}\n+\n+JNIEXPORT jobject JNICALL\n+Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_nextStripeReader(JNIEnv* env,\n+                                                                       jobject this_obj,\n+                                                                       jlong batch_size) {\n+  auto reader = GetNativeReader(env, this_obj);\n+  auto stripe_reader = new std::shared_ptr<RecordBatchReader>();\n+  auto status = (*reader)->NextStripeReader(batch_size, stripe_reader);\n+\n+  jobject ret = nullptr;\n+  if (!status.ok()) {\n+    delete stripe_reader;\n \n Review comment:\n   if you wrap the the allocation in a unique_ptr, and then call release on it below, it might be safer then manually deleting\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:50.254+0000",
                    "updated": "2019-05-21T03:47:50.254+0000",
                    "started": "2019-05-21T03:47:50.253+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245738",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245739",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285839513\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/jni/jni_wrapper.cpp\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/adapters/orc/adapter.h>\n+#include <arrow/array.h>\n+#include <arrow/buffer.h>\n+#include <arrow/io/api.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/logging.h>\n+#include <cassert>\n+#include <string>\n+\n+#include \"org_apache_arrow_adapter_orc_OrcMemoryJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcReaderJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcStripeReaderJniWrapper.h\"\n+\n+using ORCFileReader = arrow::adapters::orc::ORCFileReader;\n+using RecordBatchReader = arrow::RecordBatchReader;\n+\n+void ThrowJavaIOException(JNIEnv* env, const std::exception& e) {\n+  jclass ioExceptionClass = env->FindClass(\"java/io/IOException\");\n+  if (ioExceptionClass != nullptr) {\n+    if (env->ThrowNew(ioExceptionClass, e.what())) {\n+      // Failed to new IOException. This means another error has occurred in Java\n+      // We just propagate this error to caller by doing nothing.\n+      ARROW_LOG(ERROR) << \"Error occurred when throwing IOException\";\n+    }\n+  } else {\n+    ARROW_LOG(ERROR) << \"Error occurred when getting IOException class\";\n+  }\n+}\n+\n+void ThrowJavaException(JNIEnv* env, const std::string& message) {\n+  jclass exception = env->FindClass(\"java/lang/Exception\");\n+  if (exception != nullptr) {\n+    env->ThrowNew(exception, message.c_str());\n+  } else {\n+    throw std::runtime_error(\"Can't find java/lang/Exception class\");\n+  }\n+}\n+\n+jfieldID GetFieldId(JNIEnv* env, jclass this_class, const std::string& sig) {\n+  jfieldID ret = env->GetFieldID(this_class, sig.c_str(), \"J\");\n+  if (ret == nullptr) {\n+    ThrowJavaException(env, \"Unable to get java class field: \" + sig);\n+  }\n+\n+  return ret;\n+}\n+\n+std::unique_ptr<ORCFileReader>* GetNativeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj, GetFieldId(env, env->GetObjectClass(this_obj), \"nativeReaderAddress\"));\n+  return reinterpret_cast<std::unique_ptr<ORCFileReader>*>(reader);\n+}\n+\n+std::shared_ptr<RecordBatchReader>* GetStripeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj,\n+      GetFieldId(env, env->GetObjectClass(this_obj), \"nativeStripeReaderAddress\"));\n+  return reinterpret_cast<std::shared_ptr<RecordBatchReader>*>(reader);\n+}\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+JNIEXPORT jboolean JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_open(\n+    JNIEnv* env, jobject this_obj, jstring file_path) {\n+  std::shared_ptr<arrow::io::ReadableFile> in_file;\n+  const char* str = env->GetStringUTFChars(file_path, nullptr);\n+  std::string path(str);\n+  env->ReleaseStringUTFChars(file_path, str);\n+\n+  arrow::Status ret;\n+  if (path.find(\"hdfs://\") == 0) {\n+    return false;\n+  } else {\n+    ret = arrow::io::ReadableFile::Open(path, &in_file);\n+  }\n+\n+  if (ret.ok()) {\n+    auto reader = new std::unique_ptr<ORCFileReader>();\n+\n+    ret = ORCFileReader::Open(\n+        std::static_pointer_cast<arrow::io::RandomAccessFile>(in_file),\n+        arrow::default_memory_pool(), reader);\n+\n+    if (!ret.ok()) {\n+      delete reader;\n+      ThrowJavaIOException(env, std::invalid_argument(\"Failed open file\" + path));\n+    }\n+\n+    env->SetLongField(\n+        this_obj, GetFieldId(env, env->GetObjectClass(this_obj), \"nativeReaderAddress\"),\n+        reinterpret_cast<long>(reader));\n+  }\n+\n+  return ret.ok();\n+}\n+\n+JNIEXPORT void JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_close(\n+    JNIEnv* env, jobject this_obj) {\n+  delete GetNativeReader(env, this_obj);\n+}\n+\n+JNIEXPORT jboolean JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_seek(\n+    JNIEnv* env, jobject this_obj, jint row_number) {\n+  auto reader = GetNativeReader(env, this_obj);\n+  return (*reader)->Seek(row_number).ok();\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_getNumberOfStripes(\n+    JNIEnv* env, jobject this_obj) {\n+  auto reader = GetNativeReader(env, this_obj);\n+  return (*reader)->NumberOfStripes();\n+}\n+\n+JNIEXPORT jobject JNICALL\n+Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_nextStripeReader(JNIEnv* env,\n+                                                                       jobject this_obj,\n+                                                                       jlong batch_size) {\n+  auto reader = GetNativeReader(env, this_obj);\n+  auto stripe_reader = new std::shared_ptr<RecordBatchReader>();\n+  auto status = (*reader)->NextStripeReader(batch_size, stripe_reader);\n+\n+  jobject ret = nullptr;\n+  if (!status.ok()) {\n+    delete stripe_reader;\n+    return ret;\n+  }\n+\n+  jclass cls = env->FindClass(\"/org/apache/arrow/adapter/orc/OrcStripeReaderJniWrapper\");\n+  ret = env->AllocObject(cls);\n+\n+  env->SetLongField(ret, GetFieldId(env, cls, \"nativeStripeReaderAddress\"),\n+                    reinterpret_cast<long>(stripe_reader));\n+\n+  return ret;\n+}\n+\n+JNIEXPORT jbyteArray JNICALL\n+Java_org_apache_arrow_adapter_orc_OrcStripeReaderJniWrapper_getSchema(JNIEnv* env,\n+                                                                      jobject this_obj) {\n+  auto stripe_reader = GetStripeReader(env, this_obj);\n+  auto schema = (*stripe_reader)->schema();\n+\n+  std::shared_ptr<arrow::Buffer> out;\n+  auto status = arrow::ipc::SerializeSchema(*schema, arrow::default_memory_pool(), &out);\n+  if (!status.ok()) {\n+    return nullptr;\n+  }\n+\n+  jbyteArray ret = env->NewByteArray(out->size());\n+  memcpy(env->GetByteArrayElements(ret, nullptr), out->data(), out->size());\n+  return ret;\n+}\n+\n+JNIEXPORT jobject JNICALL\n+Java_org_apache_arrow_adapter_orc_OrcStripeReaderJniWrapper_next(JNIEnv* env,\n+                                                                 jobject this_obj) {\n+  auto stripe_reader = GetStripeReader(env, this_obj);\n+  auto record_batch = new std::shared_ptr<arrow::RecordBatch>();\n+  auto status = (*stripe_reader)->ReadNext(record_batch);\n+  if (!status.ok()) {\n+    delete record_batch;\n+    return nullptr;\n+  }\n+\n+  auto schema = (*stripe_reader)->schema();\n+\n+  // create OrcFieldNode[]\n+  jclass field_class = env->FindClass(\"/org/apache/arrow/adapter/orc/OrcFieldNode\");\n+  jmethodID field_constructor = env->GetMethodID(field_class, \"<init>\", \"(II)V\");\n+  jobjectArray field_array =\n+      env->NewObjectArray(schema->num_fields(), field_class, nullptr);\n+\n+  std::vector<std::shared_ptr<arrow::Buffer>> buffers;\n+  for (int i = 0; i < schema->num_fields(); ++i) {\n \n Review comment:\n   you could resize buffers to at least num_fields here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:50.265+0000",
                    "updated": "2019-05-21T03:47:50.265+0000",
                    "started": "2019-05-21T03:47:50.264+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245739",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285839753\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/jni/jni_wrapper.cpp\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/adapters/orc/adapter.h>\n+#include <arrow/array.h>\n+#include <arrow/buffer.h>\n+#include <arrow/io/api.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/logging.h>\n+#include <cassert>\n+#include <string>\n+\n+#include \"org_apache_arrow_adapter_orc_OrcMemoryJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcReaderJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcStripeReaderJniWrapper.h\"\n+\n+using ORCFileReader = arrow::adapters::orc::ORCFileReader;\n+using RecordBatchReader = arrow::RecordBatchReader;\n+\n+void ThrowJavaIOException(JNIEnv* env, const std::exception& e) {\n+  jclass ioExceptionClass = env->FindClass(\"java/io/IOException\");\n+  if (ioExceptionClass != nullptr) {\n+    if (env->ThrowNew(ioExceptionClass, e.what())) {\n+      // Failed to new IOException. This means another error has occurred in Java\n+      // We just propagate this error to caller by doing nothing.\n+      ARROW_LOG(ERROR) << \"Error occurred when throwing IOException\";\n+    }\n+  } else {\n+    ARROW_LOG(ERROR) << \"Error occurred when getting IOException class\";\n+  }\n+}\n+\n+void ThrowJavaException(JNIEnv* env, const std::string& message) {\n+  jclass exception = env->FindClass(\"java/lang/Exception\");\n+  if (exception != nullptr) {\n+    env->ThrowNew(exception, message.c_str());\n+  } else {\n+    throw std::runtime_error(\"Can't find java/lang/Exception class\");\n+  }\n+}\n+\n+jfieldID GetFieldId(JNIEnv* env, jclass this_class, const std::string& sig) {\n+  jfieldID ret = env->GetFieldID(this_class, sig.c_str(), \"J\");\n+  if (ret == nullptr) {\n+    ThrowJavaException(env, \"Unable to get java class field: \" + sig);\n+  }\n+\n+  return ret;\n+}\n+\n+std::unique_ptr<ORCFileReader>* GetNativeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj, GetFieldId(env, env->GetObjectClass(this_obj), \"nativeReaderAddress\"));\n+  return reinterpret_cast<std::unique_ptr<ORCFileReader>*>(reader);\n+}\n+\n+std::shared_ptr<RecordBatchReader>* GetStripeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj,\n+      GetFieldId(env, env->GetObjectClass(this_obj), \"nativeStripeReaderAddress\"));\n+  return reinterpret_cast<std::shared_ptr<RecordBatchReader>*>(reader);\n+}\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+JNIEXPORT jboolean JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_open(\n+    JNIEnv* env, jobject this_obj, jstring file_path) {\n+  std::shared_ptr<arrow::io::ReadableFile> in_file;\n+  const char* str = env->GetStringUTFChars(file_path, nullptr);\n+  std::string path(str);\n+  env->ReleaseStringUTFChars(file_path, str);\n+\n+  arrow::Status ret;\n+  if (path.find(\"hdfs://\") == 0) {\n+    return false;\n+  } else {\n+    ret = arrow::io::ReadableFile::Open(path, &in_file);\n+  }\n+\n+  if (ret.ok()) {\n+    auto reader = new std::unique_ptr<ORCFileReader>();\n+\n+    ret = ORCFileReader::Open(\n+        std::static_pointer_cast<arrow::io::RandomAccessFile>(in_file),\n+        arrow::default_memory_pool(), reader);\n+\n+    if (!ret.ok()) {\n+      delete reader;\n+      ThrowJavaIOException(env, std::invalid_argument(\"Failed open file\" + path));\n+    }\n+\n+    env->SetLongField(\n+        this_obj, GetFieldId(env, env->GetObjectClass(this_obj), \"nativeReaderAddress\"),\n+        reinterpret_cast<long>(reader));\n+  }\n+\n+  return ret.ok();\n+}\n+\n+JNIEXPORT void JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_close(\n+    JNIEnv* env, jobject this_obj) {\n+  delete GetNativeReader(env, this_obj);\n+}\n+\n+JNIEXPORT jboolean JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_seek(\n+    JNIEnv* env, jobject this_obj, jint row_number) {\n+  auto reader = GetNativeReader(env, this_obj);\n+  return (*reader)->Seek(row_number).ok();\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_getNumberOfStripes(\n+    JNIEnv* env, jobject this_obj) {\n+  auto reader = GetNativeReader(env, this_obj);\n+  return (*reader)->NumberOfStripes();\n+}\n+\n+JNIEXPORT jobject JNICALL\n+Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_nextStripeReader(JNIEnv* env,\n+                                                                       jobject this_obj,\n+                                                                       jlong batch_size) {\n+  auto reader = GetNativeReader(env, this_obj);\n+  auto stripe_reader = new std::shared_ptr<RecordBatchReader>();\n+  auto status = (*reader)->NextStripeReader(batch_size, stripe_reader);\n+\n+  jobject ret = nullptr;\n+  if (!status.ok()) {\n+    delete stripe_reader;\n+    return ret;\n+  }\n+\n+  jclass cls = env->FindClass(\"/org/apache/arrow/adapter/orc/OrcStripeReaderJniWrapper\");\n \n Review comment:\n   do you need to check for nullness here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:50.266+0000",
                    "updated": "2019-05-21T03:47:50.266+0000",
                    "started": "2019-05-21T03:47:50.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245741",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245740",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285840099\n \n \n\n ##########\n File path: java/adapter/orc/src/main/java/org/apache/arrow/adapter/orc/OrcJniUtils.java\n ##########\n @@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.orc;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.StandardCopyOption;\n+import java.util.UUID;\n+\n+public class OrcJniUtils {\n \n Review comment:\n   javadoc.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:50.266+0000",
                    "updated": "2019-05-21T03:47:50.266+0000",
                    "started": "2019-05-21T03:47:50.265+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245740",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285840451\n \n \n\n ##########\n File path: java/adapter/orc/src/main/java/org/apache/arrow/adapter/orc/OrcReader.java\n ##########\n @@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.orc;\n+\n+import java.io.IOException;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+\n+\n+public class OrcReader implements AutoCloseable {\n \n Review comment:\n   is it possible to make this extend ArrowReader instead of iterating over them?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:50.300+0000",
                    "updated": "2019-05-21T03:47:50.300+0000",
                    "started": "2019-05-21T03:47:50.300+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245742",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245743",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285839406\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/jni/jni_wrapper.cpp\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/adapters/orc/adapter.h>\n+#include <arrow/array.h>\n+#include <arrow/buffer.h>\n+#include <arrow/io/api.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/logging.h>\n+#include <cassert>\n+#include <string>\n+\n+#include \"org_apache_arrow_adapter_orc_OrcMemoryJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcReaderJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcStripeReaderJniWrapper.h\"\n+\n+using ORCFileReader = arrow::adapters::orc::ORCFileReader;\n+using RecordBatchReader = arrow::RecordBatchReader;\n+\n+void ThrowJavaIOException(JNIEnv* env, const std::exception& e) {\n+  jclass ioExceptionClass = env->FindClass(\"java/io/IOException\");\n+  if (ioExceptionClass != nullptr) {\n+    if (env->ThrowNew(ioExceptionClass, e.what())) {\n+      // Failed to new IOException. This means another error has occurred in Java\n+      // We just propagate this error to caller by doing nothing.\n+      ARROW_LOG(ERROR) << \"Error occurred when throwing IOException\";\n+    }\n+  } else {\n+    ARROW_LOG(ERROR) << \"Error occurred when getting IOException class\";\n+  }\n+}\n+\n+void ThrowJavaException(JNIEnv* env, const std::string& message) {\n+  jclass exception = env->FindClass(\"java/lang/Exception\");\n+  if (exception != nullptr) {\n+    env->ThrowNew(exception, message.c_str());\n+  } else {\n+    throw std::runtime_error(\"Can't find java/lang/Exception class\");\n+  }\n+}\n+\n+jfieldID GetFieldId(JNIEnv* env, jclass this_class, const std::string& sig) {\n+  jfieldID ret = env->GetFieldID(this_class, sig.c_str(), \"J\");\n+  if (ret == nullptr) {\n+    ThrowJavaException(env, \"Unable to get java class field: \" + sig);\n+  }\n+\n+  return ret;\n+}\n+\n+std::unique_ptr<ORCFileReader>* GetNativeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj, GetFieldId(env, env->GetObjectClass(this_obj), \"nativeReaderAddress\"));\n+  return reinterpret_cast<std::unique_ptr<ORCFileReader>*>(reader);\n+}\n+\n+std::shared_ptr<RecordBatchReader>* GetStripeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj,\n+      GetFieldId(env, env->GetObjectClass(this_obj), \"nativeStripeReaderAddress\"));\n+  return reinterpret_cast<std::shared_ptr<RecordBatchReader>*>(reader);\n+}\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+JNIEXPORT jboolean JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_open(\n+    JNIEnv* env, jobject this_obj, jstring file_path) {\n+  std::shared_ptr<arrow::io::ReadableFile> in_file;\n+  const char* str = env->GetStringUTFChars(file_path, nullptr);\n+  std::string path(str);\n+  env->ReleaseStringUTFChars(file_path, str);\n+\n+  arrow::Status ret;\n+  if (path.find(\"hdfs://\") == 0) {\n+    return false;\n+  } else {\n+    ret = arrow::io::ReadableFile::Open(path, &in_file);\n+  }\n+\n+  if (ret.ok()) {\n+    auto reader = new std::unique_ptr<ORCFileReader>();\n+\n+    ret = ORCFileReader::Open(\n+        std::static_pointer_cast<arrow::io::RandomAccessFile>(in_file),\n+        arrow::default_memory_pool(), reader);\n+\n+    if (!ret.ok()) {\n+      delete reader;\n+      ThrowJavaIOException(env, std::invalid_argument(\"Failed open file\" + path));\n+    }\n+\n+    env->SetLongField(\n+        this_obj, GetFieldId(env, env->GetObjectClass(this_obj), \"nativeReaderAddress\"),\n+        reinterpret_cast<long>(reader));\n+  }\n+\n+  return ret.ok();\n+}\n+\n+JNIEXPORT void JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_close(\n+    JNIEnv* env, jobject this_obj) {\n+  delete GetNativeReader(env, this_obj);\n+}\n+\n+JNIEXPORT jboolean JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_seek(\n+    JNIEnv* env, jobject this_obj, jint row_number) {\n+  auto reader = GetNativeReader(env, this_obj);\n+  return (*reader)->Seek(row_number).ok();\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_getNumberOfStripes(\n+    JNIEnv* env, jobject this_obj) {\n+  auto reader = GetNativeReader(env, this_obj);\n+  return (*reader)->NumberOfStripes();\n+}\n+\n+JNIEXPORT jobject JNICALL\n+Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_nextStripeReader(JNIEnv* env,\n+                                                                       jobject this_obj,\n+                                                                       jlong batch_size) {\n+  auto reader = GetNativeReader(env, this_obj);\n+  auto stripe_reader = new std::shared_ptr<RecordBatchReader>();\n+  auto status = (*reader)->NextStripeReader(batch_size, stripe_reader);\n+\n+  jobject ret = nullptr;\n+  if (!status.ok()) {\n+    delete stripe_reader;\n+    return ret;\n+  }\n+\n+  jclass cls = env->FindClass(\"/org/apache/arrow/adapter/orc/OrcStripeReaderJniWrapper\");\n+  ret = env->AllocObject(cls);\n+\n+  env->SetLongField(ret, GetFieldId(env, cls, \"nativeStripeReaderAddress\"),\n+                    reinterpret_cast<long>(stripe_reader));\n+\n+  return ret;\n+}\n+\n+JNIEXPORT jbyteArray JNICALL\n+Java_org_apache_arrow_adapter_orc_OrcStripeReaderJniWrapper_getSchema(JNIEnv* env,\n+                                                                      jobject this_obj) {\n+  auto stripe_reader = GetStripeReader(env, this_obj);\n+  auto schema = (*stripe_reader)->schema();\n+\n+  std::shared_ptr<arrow::Buffer> out;\n+  auto status = arrow::ipc::SerializeSchema(*schema, arrow::default_memory_pool(), &out);\n \n Review comment:\n   i don't know if it is a good idea to hard-code default here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:50.304+0000",
                    "updated": "2019-05-21T03:47:50.304+0000",
                    "started": "2019-05-21T03:47:50.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245743",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245744",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285840485\n \n \n\n ##########\n File path: java/adapter/orc/src/main/java/org/apache/arrow/adapter/orc/OrcReaderJniWrapper.java\n ##########\n @@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.orc;\n+\n+import java.io.IOException;\n+\n+public class OrcReaderJniWrapper {\n \n Review comment:\n   javadoc.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:50.310+0000",
                    "updated": "2019-05-21T03:47:50.310+0000",
                    "started": "2019-05-21T03:47:50.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245744",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285840158\n \n \n\n ##########\n File path: java/adapter/orc/src/main/java/org/apache/arrow/adapter/orc/OrcReader.java\n ##########\n @@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.orc;\n+\n+import java.io.IOException;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+\n+\n+public class OrcReader implements AutoCloseable {\n \n Review comment:\n   javadoc.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:50.310+0000",
                    "updated": "2019-05-21T03:47:50.310+0000",
                    "started": "2019-05-21T03:47:50.310+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245745",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285840188\n \n \n\n ##########\n File path: java/adapter/orc/src/main/java/org/apache/arrow/adapter/orc/OrcReader.java\n ##########\n @@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.orc;\n+\n+import java.io.IOException;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.ipc.ArrowReader;\n+\n+\n+public class OrcReader implements AutoCloseable {\n+\n+  private static final int DEFAULT_BATCH_SIZE = 1024;\n+\n+  private OrcReaderJniWrapper orcReader;\n+\n+  private BufferAllocator allocator;\n+\n+  public OrcReader(String filePath, BufferAllocator allocator) throws IOException {\n+    this.allocator = allocator;\n+    orcReader = new OrcReaderJniWrapper();\n+    orcReader.open(filePath);\n+  }\n+\n+  public ArrowReader nextStripeReader() {\n \n Review comment:\n   javadoc.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:50.314+0000",
                    "updated": "2019-05-21T03:47:50.314+0000",
                    "started": "2019-05-21T03:47:50.306+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245746",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245747",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285837626\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/jni/jni_wrapper.cpp\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/adapters/orc/adapter.h>\n+#include <arrow/array.h>\n+#include <arrow/buffer.h>\n+#include <arrow/io/api.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/logging.h>\n+#include <cassert>\n+#include <string>\n+\n+#include \"org_apache_arrow_adapter_orc_OrcMemoryJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcReaderJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcStripeReaderJniWrapper.h\"\n+\n+using ORCFileReader = arrow::adapters::orc::ORCFileReader;\n+using RecordBatchReader = arrow::RecordBatchReader;\n+\n+void ThrowJavaIOException(JNIEnv* env, const std::exception& e) {\n+  jclass ioExceptionClass = env->FindClass(\"java/io/IOException\");\n+  if (ioExceptionClass != nullptr) {\n+    if (env->ThrowNew(ioExceptionClass, e.what())) {\n+      // Failed to new IOException. This means another error has occurred in Java\n+      // We just propagate this error to caller by doing nothing.\n+      ARROW_LOG(ERROR) << \"Error occurred when throwing IOException\";\n+    }\n+  } else {\n+    ARROW_LOG(ERROR) << \"Error occurred when getting IOException class\";\n \n Review comment:\n   should this be fatal?  should you try to throw something else?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:54.383+0000",
                    "updated": "2019-05-21T03:47:54.383+0000",
                    "started": "2019-05-21T03:47:54.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245747",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245748",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285838080\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/jni/jni_wrapper.cpp\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/adapters/orc/adapter.h>\n+#include <arrow/array.h>\n+#include <arrow/buffer.h>\n+#include <arrow/io/api.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/logging.h>\n+#include <cassert>\n+#include <string>\n+\n+#include \"org_apache_arrow_adapter_orc_OrcMemoryJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcReaderJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcStripeReaderJniWrapper.h\"\n+\n+using ORCFileReader = arrow::adapters::orc::ORCFileReader;\n+using RecordBatchReader = arrow::RecordBatchReader;\n+\n+void ThrowJavaIOException(JNIEnv* env, const std::exception& e) {\n \n Review comment:\n   it looks like gandiva takes a different approach here and caches the exception classes: https://github.com/apache/arrow/blob/a1a8222f081e4be475dcde96f8c4eeb438d8f094/cpp/src/gandiva/jni/jni_common.cc#L80\r\n   \r\n   would this work for you?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:54.772+0000",
                    "updated": "2019-05-21T03:47:54.772+0000",
                    "started": "2019-05-21T03:47:54.772+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245748",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245749",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285838812\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/jni/jni_wrapper.cpp\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/adapters/orc/adapter.h>\n+#include <arrow/array.h>\n+#include <arrow/buffer.h>\n+#include <arrow/io/api.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/logging.h>\n+#include <cassert>\n+#include <string>\n+\n+#include \"org_apache_arrow_adapter_orc_OrcMemoryJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcReaderJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcStripeReaderJniWrapper.h\"\n+\n+using ORCFileReader = arrow::adapters::orc::ORCFileReader;\n+using RecordBatchReader = arrow::RecordBatchReader;\n+\n+void ThrowJavaIOException(JNIEnv* env, const std::exception& e) {\n+  jclass ioExceptionClass = env->FindClass(\"java/io/IOException\");\n+  if (ioExceptionClass != nullptr) {\n+    if (env->ThrowNew(ioExceptionClass, e.what())) {\n+      // Failed to new IOException. This means another error has occurred in Java\n+      // We just propagate this error to caller by doing nothing.\n+      ARROW_LOG(ERROR) << \"Error occurred when throwing IOException\";\n+    }\n+  } else {\n+    ARROW_LOG(ERROR) << \"Error occurred when getting IOException class\";\n+  }\n+}\n+\n+void ThrowJavaException(JNIEnv* env, const std::string& message) {\n+  jclass exception = env->FindClass(\"java/lang/Exception\");\n+  if (exception != nullptr) {\n+    env->ThrowNew(exception, message.c_str());\n+  } else {\n+    throw std::runtime_error(\"Can't find java/lang/Exception class\");\n+  }\n+}\n+\n+jfieldID GetFieldId(JNIEnv* env, jclass this_class, const std::string& sig) {\n+  jfieldID ret = env->GetFieldID(this_class, sig.c_str(), \"J\");\n+  if (ret == nullptr) {\n+    ThrowJavaException(env, \"Unable to get java class field: \" + sig);\n+  }\n+\n+  return ret;\n+}\n+\n+std::unique_ptr<ORCFileReader>* GetNativeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj, GetFieldId(env, env->GetObjectClass(this_obj), \"nativeReaderAddress\"));\n+  return reinterpret_cast<std::unique_ptr<ORCFileReader>*>(reader);\n+}\n+\n+std::shared_ptr<RecordBatchReader>* GetStripeReader(JNIEnv* env, jobject this_obj) {\n+  jlong reader = env->GetLongField(\n+      this_obj,\n+      GetFieldId(env, env->GetObjectClass(this_obj), \"nativeStripeReaderAddress\"));\n+  return reinterpret_cast<std::shared_ptr<RecordBatchReader>*>(reader);\n+}\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+JNIEXPORT jboolean JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_open(\n+    JNIEnv* env, jobject this_obj, jstring file_path) {\n+  std::shared_ptr<arrow::io::ReadableFile> in_file;\n+  const char* str = env->GetStringUTFChars(file_path, nullptr);\n+  std::string path(str);\n+  env->ReleaseStringUTFChars(file_path, str);\n+\n+  arrow::Status ret;\n+  if (path.find(\"hdfs://\") == 0) {\n+    return false;\n+  } else {\n+    ret = arrow::io::ReadableFile::Open(path, &in_file);\n+  }\n+\n+  if (ret.ok()) {\n+    auto reader = new std::unique_ptr<ORCFileReader>();\n+\n+    ret = ORCFileReader::Open(\n+        std::static_pointer_cast<arrow::io::RandomAccessFile>(in_file),\n+        arrow::default_memory_pool(), reader);\n+\n+    if (!ret.ok()) {\n+      delete reader;\n+      ThrowJavaIOException(env, std::invalid_argument(\"Failed open file\" + path));\n+    }\n+\n+    env->SetLongField(\n+        this_obj, GetFieldId(env, env->GetObjectClass(this_obj), \"nativeReaderAddress\"),\n+        reinterpret_cast<long>(reader));\n+  }\n+\n+  return ret.ok();\n+}\n+\n+JNIEXPORT void JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_close(\n+    JNIEnv* env, jobject this_obj) {\n+  delete GetNativeReader(env, this_obj);\n+}\n+\n+JNIEXPORT jboolean JNICALL Java_org_apache_arrow_adapter_orc_OrcReaderJniWrapper_seek(\n+    JNIEnv* env, jobject this_obj, jint row_number) {\n \n Review comment:\n   not too familiar with JNI but should this be jlong?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:54.796+0000",
                    "updated": "2019-05-21T03:47:54.796+0000",
                    "started": "2019-05-21T03:47:54.796+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245749",
                    "issueId": "13218582"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/worklog/245750",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4348: ARROW-4714:[WIP][C++][JAVA]Providing JNI interface to Read ORC file via Arrow C++\nURL: https://github.com/apache/arrow/pull/4348#discussion_r285838211\n \n \n\n ##########\n File path: cpp/src/arrow/adapters/orc/jni/jni_wrapper.cpp\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/adapters/orc/adapter.h>\n+#include <arrow/array.h>\n+#include <arrow/buffer.h>\n+#include <arrow/io/api.h>\n+#include <arrow/ipc/api.h>\n+#include <arrow/util/logging.h>\n+#include <cassert>\n+#include <string>\n+\n+#include \"org_apache_arrow_adapter_orc_OrcMemoryJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcReaderJniWrapper.h\"\n+#include \"org_apache_arrow_adapter_orc_OrcStripeReaderJniWrapper.h\"\n+\n+using ORCFileReader = arrow::adapters::orc::ORCFileReader;\n+using RecordBatchReader = arrow::RecordBatchReader;\n+\n+void ThrowJavaIOException(JNIEnv* env, const std::exception& e) {\n+  jclass ioExceptionClass = env->FindClass(\"java/io/IOException\");\n+  if (ioExceptionClass != nullptr) {\n+    if (env->ThrowNew(ioExceptionClass, e.what())) {\n+      // Failed to new IOException. This means another error has occurred in Java\n+      // We just propagate this error to caller by doing nothing.\n+      ARROW_LOG(ERROR) << \"Error occurred when throwing IOException\";\n+    }\n+  } else {\n+    ARROW_LOG(ERROR) << \"Error occurred when getting IOException class\";\n+  }\n+}\n+\n+void ThrowJavaException(JNIEnv* env, const std::string& message) {\n+  jclass exception = env->FindClass(\"java/lang/Exception\");\n+  if (exception != nullptr) {\n+    env->ThrowNew(exception, message.c_str());\n+  } else {\n+    throw std::runtime_error(\"Can't find java/lang/Exception class\");\n \n Review comment:\n   generally we try to avoid exceptions in the code base, does this propagate back up to java or does it essentially crash the program.  if it crashes consider using ARROW_LOG(FATAL)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T03:47:54.975+0000",
                    "updated": "2019-05-21T03:47:54.975+0000",
                    "started": "2019-05-21T03:47:54.974+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "245750",
                    "issueId": "13218582"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 71400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@16cedf65[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4cd7d933[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70f26d1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@75637942[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d5994d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@d76b4fc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7331222d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1df6ec60[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6cf83c25[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5491a412[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e4bc4e7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@474a8a2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 71400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jun 06 09:30:55 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-06-06T09:30:55.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4714/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-02-28T09:32:09.000+0000",
        "updated": "2019-06-06T16:38:32.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently if we want to read data from ORC data into Arrow Record Batch in Java runtime, we needs to first use the ORC Java reader to load data into memory then convert it to Arrow RecordBatch.\r\n\r\nHowever, since ORC Java Reader only read orc data into on heap memory, while Arrow Record only support off heap memory on Java, memory copy in unavoidable in conversion process. \u00a0In our internal benchmark, the conversion time can take up to 25% E2E latency when running tpch q1.\r\n\r\nTo workaround this overhead, a method is to enable the Java runtime directly reading data from native ORC c++ reader, which will load data directly into off heap memory and only pointer manipulation and schema ser/de would be involved in the conversion process.\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "19h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 71400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Java] Providing JNI interface to Read ORC file via Arrow C++",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13218582/comment/16857471",
                    "id": "16857471",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 4348\n[https://github.com/apache/arrow/pull/4348]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-06-06T09:30:55.717+0000",
                    "updated": "2019-06-06T09:30:55.717+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z006gw:",
        "customfield_12314139": null
    }
}