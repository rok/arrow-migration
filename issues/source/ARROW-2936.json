{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13175437",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175437",
    "key": "ARROW-2936",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2936/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 3,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175437/worklog/142538",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs opened a new pull request #2530: ARROW-2936: [Python] Implement Table.cast for casting from one schema to another (if possible)\nURL: https://github.com/apache/arrow/pull/2530\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-09T21:00:56.534+0000",
                    "updated": "2018-09-09T21:00:56.534+0000",
                    "started": "2018-09-09T21:00:56.533+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142538",
                    "issueId": "13175437"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175437/worklog/142539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2530: ARROW-2936: [Python] Implement Table.cast for casting from one schema to another (if possible)\nURL: https://github.com/apache/arrow/pull/2530#discussion_r216170047\n \n \n\n ##########\n File path: python/pyarrow/table.pxi\n ##########\n @@ -1078,6 +1079,23 @@ cdef class Table:\n \n         return result\n \n+    def cast(self, Schema target_schema, bint safe=True):\n \n Review comment:\n   Apidoc\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-09T21:02:16.907+0000",
                    "updated": "2018-09-09T21:02:16.907+0000",
                    "started": "2018-09-09T21:02:16.907+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142539",
                    "issueId": "13175437"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175437/worklog/143543",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #2530: ARROW-2936: [Python] Implement Table.cast for casting from one schema to another (if possible)\nURL: https://github.com/apache/arrow/pull/2530\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/compute/compute-test.cc b/cpp/src/arrow/compute/compute-test.cc\nindex a1dfdefef9..233f8a6dd0 100644\n--- a/cpp/src/arrow/compute/compute-test.cc\n+++ b/cpp/src/arrow/compute/compute-test.cc\n@@ -286,20 +286,21 @@ TEST_F(TestCast, ToIntDowncastUnsafe) {\n }\n \n TEST_F(TestCast, FloatingPointToInt) {\n+  // which means allow_float_truncate == false\n   auto options = CastOptions::Safe();\n \n   vector<bool> is_valid = {true, false, true, true, true};\n   vector<bool> all_valid = {true, true, true, true, true};\n \n-  // float32 point to integer\n-  vector<float> v1 = {1.5, 0, 0.5, -1.5, 5.5};\n+  // float32 to int32 no truncation\n+  vector<float> v1 = {1.0, 0, 0.0, -1.0, 5.0};\n   vector<int32_t> e1 = {1, 0, 0, -1, 5};\n   CheckCase<FloatType, float, Int32Type, int32_t>(float32(), v1, is_valid, int32(), e1,\n                                                   options);\n   CheckCase<FloatType, float, Int32Type, int32_t>(float32(), v1, all_valid, int32(), e1,\n                                                   options);\n \n-  // float64 point to integer\n+  // float64 to int32 no truncation\n   vector<double> v2 = {1.0, 0, 0.0, -1.0, 5.0};\n   vector<int32_t> e2 = {1, 0, 0, -1, 5};\n   CheckCase<DoubleType, double, Int32Type, int32_t>(float64(), v2, is_valid, int32(), e2,\n@@ -307,15 +308,40 @@ TEST_F(TestCast, FloatingPointToInt) {\n   CheckCase<DoubleType, double, Int32Type, int32_t>(float64(), v2, all_valid, int32(), e2,\n                                                     options);\n \n-  vector<double> v3 = {1.5, 0, 0.5, -1.5, 5.5};\n-  vector<int32_t> e3 = {1, 0, 0, -1, 5};\n-  CheckFails<DoubleType>(float64(), v3, is_valid, int32(), options);\n-  CheckFails<DoubleType>(float64(), v3, all_valid, int32(), options);\n+  // float64 to int64 no truncation\n+  vector<double> v3 = {1.0, 0, 0.0, -1.0, 5.0};\n+  vector<int64_t> e3 = {1, 0, 0, -1, 5};\n+  CheckCase<DoubleType, double, Int64Type, int64_t>(float64(), v3, is_valid, int64(), e3,\n+                                                    options);\n+  CheckCase<DoubleType, double, Int64Type, int64_t>(float64(), v3, all_valid, int64(), e3,\n+                                                    options);\n+\n+  // float64 to int32 truncate\n+  vector<double> v4 = {1.5, 0, 0.5, -1.5, 5.5};\n+  vector<int32_t> e4 = {1, 0, 0, -1, 5};\n+\n+  options.allow_float_truncate = false;\n+  CheckFails<DoubleType>(float64(), v4, is_valid, int32(), options);\n+  CheckFails<DoubleType>(float64(), v4, all_valid, int32(), options);\n+\n+  options.allow_float_truncate = true;\n+  CheckCase<DoubleType, double, Int32Type, int32_t>(float64(), v4, is_valid, int32(), e4,\n+                                                    options);\n+  CheckCase<DoubleType, double, Int32Type, int32_t>(float64(), v4, all_valid, int32(), e4,\n+                                                    options);\n+\n+  // float64 to int64 truncate\n+  vector<double> v5 = {1.5, 0, 0.5, -1.5, 5.5};\n+  vector<int64_t> e5 = {1, 0, 0, -1, 5};\n+\n+  options.allow_float_truncate = false;\n+  CheckFails<DoubleType>(float64(), v5, is_valid, int64(), options);\n+  CheckFails<DoubleType>(float64(), v5, all_valid, int64(), options);\n \n   options.allow_float_truncate = true;\n-  CheckCase<DoubleType, double, Int32Type, int32_t>(float64(), v3, is_valid, int32(), e3,\n+  CheckCase<DoubleType, double, Int64Type, int64_t>(float64(), v5, is_valid, int64(), e5,\n                                                     options);\n-  CheckCase<DoubleType, double, Int32Type, int32_t>(float64(), v3, all_valid, int32(), e3,\n+  CheckCase<DoubleType, double, Int64Type, int64_t>(float64(), v5, all_valid, int64(), e5,\n                                                     options);\n }\n \ndiff --git a/cpp/src/arrow/compute/kernels/cast.cc b/cpp/src/arrow/compute/kernels/cast.cc\nindex 2a0479d68b..369ebb975c 100644\n--- a/cpp/src/arrow/compute/kernels/cast.cc\n+++ b/cpp/src/arrow/compute/kernels/cast.cc\n@@ -194,20 +194,16 @@ struct is_integer_downcast<\n };\n \n template <typename O, typename I, typename Enable = void>\n-struct is_float_downcast {\n+struct is_float_truncate {\n   static constexpr bool value = false;\n };\n \n template <typename O, typename I>\n-struct is_float_downcast<\n+struct is_float_truncate<\n     O, I,\n-    typename std::enable_if<std::is_base_of<Number, O>::value &&\n+    typename std::enable_if<std::is_base_of<Integer, O>::value &&\n                             std::is_base_of<FloatingPoint, I>::value>::type> {\n-  using O_T = typename O::c_type;\n-  using I_T = typename I::c_type;\n-\n-  // Smaller output size\n-  static constexpr bool value = !std::is_same<O, I>::value && (sizeof(O_T) < sizeof(I_T));\n+  static constexpr bool value = true;\n };\n \n template <typename O, typename I>\n@@ -270,7 +266,7 @@ struct CastFunctor<O, I,\n };\n \n template <typename O, typename I>\n-struct CastFunctor<O, I, typename std::enable_if<is_float_downcast<O, I>::value>::type> {\n+struct CastFunctor<O, I, typename std::enable_if<is_float_truncate<O, I>::value>::type> {\n   void operator()(FunctionContext* ctx, const CastOptions& options,\n                   const ArrayData& input, ArrayData* output) {\n     using in_type = typename I::c_type;\n@@ -316,7 +312,7 @@ struct CastFunctor<O, I, typename std::enable_if<is_float_downcast<O, I>::value>\n template <typename O, typename I>\n struct CastFunctor<O, I,\n                    typename std::enable_if<is_numeric_cast<O, I>::value &&\n-                                           !is_float_downcast<O, I>::value &&\n+                                           !is_float_truncate<O, I>::value &&\n                                            !is_integer_downcast<O, I>::value>::type> {\n   void operator()(FunctionContext* ctx, const CastOptions& options,\n                   const ArrayData& input, ArrayData* output) {\ndiff --git a/python/pyarrow/table.pxi b/python/pyarrow/table.pxi\nindex bbf40e0335..62f6803eb4 100644\n--- a/python/pyarrow/table.pxi\n+++ b/python/pyarrow/table.pxi\n@@ -638,8 +638,8 @@ cdef _schema_from_arrays(arrays, names, dict metadata,\n             raise ValueError('Must pass names when constructing '\n                              'from Array objects')\n         if len(names) != K:\n-            raise ValueError(\"Length of names ({}) does not match \"\n-                             \"length of arrays ({})\".format(len(names), K))\n+            raise ValueError('Length of names ({}) does not match '\n+                             'length of arrays ({})'.format(len(names), K))\n         for i in range(K):\n             val = arrays[i]\n             if isinstance(val, (Array, ChunkedArray)):\n@@ -760,7 +760,7 @@ cdef class RecordBatch:\n \n     def column(self, i):\n         \"\"\"\n-        Select single column from record batcha\n+        Select single column from record batch\n \n         Returns\n         -------\n@@ -1078,6 +1078,37 @@ cdef class Table:\n \n         return result\n \n+    def cast(self, Schema target_schema, bint safe=True):\n+        \"\"\"\n+        Cast table values to another schema\n+\n+        Parameters\n+        ----------\n+        target_schema : Schema\n+            Schema to cast to, the names and order of fields must match\n+        safe : boolean, default True\n+            Check for overflows or other unsafe conversions\n+\n+        Returns\n+        -------\n+        casted : Table\n+        \"\"\"\n+        cdef:\n+            Column column, casted\n+            Field field\n+            list newcols = []\n+\n+        if self.schema.names != target_schema.names:\n+            raise ValueError(\"Target schema's field names are not matching \"\n+                             \"the table's field names: {!r}, {!r}\"\n+                             .format(self.schema.names, target_schema.names))\n+\n+        for column, field in zip(self.itercolumns(), target_schema):\n+            casted = column.cast(field.type, safe=safe)\n+            newcols.append(casted)\n+\n+        return Table.from_arrays(newcols, schema=target_schema)\n+\n     @classmethod\n     def from_pandas(cls, df, Schema schema=None, bint preserve_index=True,\n                     nthreads=None, columns=None, bint safe=True):\ndiff --git a/python/pyarrow/tests/test_array.py b/python/pyarrow/tests/test_array.py\nindex d4b582e06c..0002dce1ea 100644\n--- a/python/pyarrow/tests/test_array.py\n+++ b/python/pyarrow/tests/test_array.py\n@@ -549,6 +549,38 @@ def test_cast_integers_unsafe():\n         _check_cast_case(case, safe=False)\n \n \n+def test_floating_point_truncate_safe():\n+    safe_cases = [\n+        (np.array([1.0, 2.0, 3.0], dtype='float32'), 'float32',\n+         np.array([1, 2, 3], dtype='i4'), pa.int32()),\n+        (np.array([1.0, 2.0, 3.0], dtype='float64'), 'float64',\n+         np.array([1, 2, 3], dtype='i4'), pa.int32()),\n+        (np.array([-10.0, 20.0, -30.0], dtype='float64'), 'float64',\n+         np.array([-10, 20, -30], dtype='i4'), pa.int32()),\n+    ]\n+    for case in safe_cases:\n+        _check_cast_case(case, safe=True)\n+\n+\n+def test_floating_point_truncate_unsafe():\n+    unsafe_cases = [\n+        (np.array([1.1, 2.2, 3.3], dtype='float32'), 'float32',\n+         np.array([1, 2, 3], dtype='i4'), pa.int32()),\n+        (np.array([1.1, 2.2, 3.3], dtype='float64'), 'float64',\n+         np.array([1, 2, 3], dtype='i4'), pa.int32()),\n+        (np.array([-10.1, 20.2, -30.3], dtype='float64'), 'float64',\n+         np.array([-10, 20, -30], dtype='i4'), pa.int32()),\n+    ]\n+    for case in unsafe_cases:\n+        # test safe casting raises\n+        with pytest.raises(pa.ArrowInvalid,\n+                           match='Floating point value truncated'):\n+            _check_cast_case(case, safe=True)\n+\n+        # test unsafe casting truncates\n+        _check_cast_case(case, safe=False)\n+\n+\n def test_cast_timestamp_unit():\n     # ARROW-1680\n     val = datetime.datetime.now()\ndiff --git a/python/pyarrow/tests/test_table.py b/python/pyarrow/tests/test_table.py\nindex 14609ad1b4..f45e9180d9 100644\n--- a/python/pyarrow/tests/test_table.py\n+++ b/python/pyarrow/tests/test_table.py\n@@ -749,3 +749,85 @@ def test_table_negative_indexing():\n \n     with pytest.raises(IndexError):\n         table[4]\n+\n+\n+def test_table_cast_to_incompatible_schema():\n+    data = [\n+        pa.array(range(5)),\n+        pa.array([-10, -5, 0, 5, 10]),\n+    ]\n+    table = pa.Table.from_arrays(data, names=tuple('ab'))\n+\n+    target_schema1 = pa.schema([\n+        pa.field('A', pa.int32()),\n+        pa.field('b', pa.int16()),\n+    ])\n+    target_schema2 = pa.schema([\n+        pa.field('a', pa.int32()),\n+    ])\n+    message = (\"Target schema's field names are not matching the table's \"\n+               \"field names:.*\")\n+    with pytest.raises(ValueError, match=message):\n+        table.cast(target_schema1)\n+    with pytest.raises(ValueError, match=message):\n+        table.cast(target_schema2)\n+\n+\n+def test_table_safe_casting():\n+    data = [\n+        pa.array(range(5), type=pa.int64()),\n+        pa.array([-10, -5, 0, 5, 10], type=pa.int32()),\n+        pa.array([1.0, 2.0, 3.0], type=pa.float64()),\n+        pa.array(['ab', 'bc', 'cd'], type=pa.string())\n+    ]\n+    table = pa.Table.from_arrays(data, names=tuple('abcd'))\n+\n+    expected_data = [\n+        pa.array(range(5), type=pa.int32()),\n+        pa.array([-10, -5, 0, 5, 10], type=pa.int16()),\n+        pa.array([1, 2, 3], type=pa.int64()),\n+        pa.array(['ab', 'bc', 'cd'], type=pa.string())\n+    ]\n+    expected_table = pa.Table.from_arrays(expected_data, names=tuple('abcd'))\n+\n+    target_schema = pa.schema([\n+        pa.field('a', pa.int32()),\n+        pa.field('b', pa.int16()),\n+        pa.field('c', pa.int64()),\n+        pa.field('d', pa.string())\n+    ])\n+    casted_table = table.cast(target_schema)\n+\n+    assert casted_table.equals(expected_table)\n+\n+\n+def test_table_unsafe_casting():\n+    data = [\n+        pa.array(range(5), type=pa.int64()),\n+        pa.array([-10, -5, 0, 5, 10], type=pa.int32()),\n+        pa.array([1.1, 2.2, 3.3], type=pa.float64()),\n+        pa.array(['ab', 'bc', 'cd'], type=pa.string())\n+    ]\n+    table = pa.Table.from_arrays(data, names=tuple('abcd'))\n+\n+    expected_data = [\n+        pa.array(range(5), type=pa.int32()),\n+        pa.array([-10, -5, 0, 5, 10], type=pa.int16()),\n+        pa.array([1, 2, 3], type=pa.int64()),\n+        pa.array(['ab', 'bc', 'cd'], type=pa.string())\n+    ]\n+    expected_table = pa.Table.from_arrays(expected_data, names=tuple('abcd'))\n+\n+    target_schema = pa.schema([\n+        pa.field('a', pa.int32()),\n+        pa.field('b', pa.int16()),\n+        pa.field('c', pa.int64()),\n+        pa.field('d', pa.string())\n+    ])\n+\n+    with pytest.raises(pa.ArrowInvalid,\n+                       match='Floating point value truncated'):\n+        table.cast(target_schema)\n+\n+    casted_table = table.cast(target_schema, safe=False)\n+    assert casted_table.equals(expected_table)\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-12T14:34:06.895+0000",
                    "updated": "2018-09-12T14:34:06.895+0000",
                    "started": "2018-09-12T14:34:06.894+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143543",
                    "issueId": "13175437"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 1800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@46f2ae2a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@585cc0c5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7deceb81[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@43884611[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ce194ed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@60b2e70[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c217dd3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1d181888[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d9ea13a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2b96c57[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15e15636[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@48e0d05a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 12 14:33:58 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-12T14:33:58.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2936/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-07-29T23:24:06.000+0000",
        "updated": "2018-09-12T14:34:06.000+0000",
        "timeoriginalestimate": null,
        "description": "This is an API convenience that would be very useful. See example use case in ARROW-2926",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "0.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Implement Table.cast for casting from one schema to another (if possible)",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13175437/comment/16612226",
                    "id": "16612226",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 2530\n[https://github.com/apache/arrow/pull/2530]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-09-12T14:33:58.783+0000",
                    "updated": "2018-09-12T14:33:58.783+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3wgc7:",
        "customfield_12314139": null
    }
}