{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13345557",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557",
    "key": "ARROW-10885",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Dandandan",
            "name": "Dandandan",
            "key": "dandandan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Dani\u00ebl Heres",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Dandandan",
            "name": "Dandandan",
            "key": "dandandan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Dani\u00ebl Heres",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Dandandan",
            "name": "Dandandan",
            "key": "dandandan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Dani\u00ebl Heres",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 26400,
            "total": 26400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 26400,
            "total": 26400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10885/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 44,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/525982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan opened a new pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961\n\n\n   This PR uses the `num_rows` statistics to implement a common optimization to use the smallest table for the build phase.\r\n   This is a good heuristic, as there are less items to insert to the hash table and the size of tables can be very imbalanced.\r\n   \r\n   Some notes:\r\n   \r\n   * The optimization works on the `LogicalPlan` by swapping left and right, the join type and the key order. This seems currently the easiest place to add it, as there is no cost based optimizer and/or optimizers on the physical plan yet. The optimization rule assumes that the left part of the join will be used for the build phase and the right part for the probe phase.\r\n   * It requires the number of rows to be exactly known, so it will not work whenever there is a transformation changing the number of rows, except for `limit`. The idea here is that in other cases, it is very hard to estimate the number of resulting rows.\r\n   * The impact currently is negative, as the hash join implementation seems to currently be slower when the right side of the join is bigger. That seems to strange and unexpected, but it seems better to disable this optimization until that is \"fixed\".\r\n   \r\n    FYI @andygrove @jorgecarleitao \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T13:37:51.094+0000",
                    "updated": "2020-12-18T13:37:51.094+0000",
                    "started": "2020-12-18T13:37:51.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "525982",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/525986",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#issuecomment-748094818\n\n\n   https://issues.apache.org/jira/browse/ARROW-10885\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T13:51:34.726+0000",
                    "updated": "2020-12-18T13:51:34.726+0000",
                    "started": "2020-12-18T13:51:34.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "525986",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/525993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#issuecomment-748106185\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8961?src=pr&el=h1) Report\n   > Merging [#8961](https://codecov.io/gh/apache/arrow/pull/8961?src=pr&el=desc) (7b7e1b8) into [master](https://codecov.io/gh/apache/arrow/commit/d65ba4ec5daeb93ca5031f883d08d559b68753b2?el=desc) (d65ba4e) will **decrease** coverage by `0.02%`.\n   > The diff coverage is `53.52%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8961/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8961?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #8961      +/-   ##\n   ==========================================\n   - Coverage   83.25%   83.23%   -0.03%     \n   ==========================================\n     Files         196      197       +1     \n     Lines       48116    48201      +85     \n   ==========================================\n   + Hits        40059    40119      +60     \n   - Misses       8057     8082      +25     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8961?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/logical\\_plan/plan.rs](https://codecov.io/gh/apache/arrow/pull/8961/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vcGxhbi5ycw==) | `87.93% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/physical\\_plan/planner.rs](https://codecov.io/gh/apache/arrow/pull/8961/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3BsYW5uZXIucnM=) | `80.54% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/sql/parser.rs](https://codecov.io/gh/apache/arrow/pull/8961/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9zcWwvcGFyc2VyLnJz) | `86.87% <\u00f8> (\u00f8)` | |\n   | [...datafusion/src/optimizer/hash\\_build\\_probe\\_order.rs](https://codecov.io/gh/apache/arrow/pull/8961/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvaGFzaF9idWlsZF9wcm9iZV9vcmRlci5ycw==) | `52.17% <52.17%> (\u00f8)` | |\n   | [rust/datafusion/src/execution/context.rs](https://codecov.io/gh/apache/arrow/pull/8961/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vY29udGV4dC5ycw==) | `89.97% <100.00%> (+0.01%)` | :arrow_up: |\n   | [rust/datafusion/src/sql/planner.rs](https://codecov.io/gh/apache/arrow/pull/8961/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9zcWwvcGxhbm5lci5ycw==) | `81.72% <100.00%> (\u00f8)` | |\n   | [rust/parquet/src/encodings/encoding.rs](https://codecov.io/gh/apache/arrow/pull/8961/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9lbmNvZGluZ3MvZW5jb2RpbmcucnM=) | `95.24% <0.00%> (-0.20%)` | :arrow_down: |\n   | [rust/parquet/src/file/statistics.rs](https://codecov.io/gh/apache/arrow/pull/8961/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9maWxlL3N0YXRpc3RpY3MucnM=) | `93.80% <0.00%> (\u00f8)` | |\n   | [rust/parquet/src/arrow/arrow\\_reader.rs](https://codecov.io/gh/apache/arrow/pull/8961/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9hcnJvd19yZWFkZXIucnM=) | `90.69% <0.00%> (+0.10%)` | :arrow_up: |\n   | ... and [6 more](https://codecov.io/gh/apache/arrow/pull/8961/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8961?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8961?src=pr&el=footer). Last update [d65ba4e...7b7e1b8](https://codecov.io/gh/apache/arrow/pull/8961?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T14:15:29.068+0000",
                    "updated": "2020-12-18T14:15:29.068+0000",
                    "started": "2020-12-18T14:15:29.068+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "525993",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526003",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545873082\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n+    match logical_plan {\n+        LogicalPlan::Projection { input, .. } => get_num_rows(input),\n+        LogicalPlan::Sort { input, .. } => get_num_rows(input),\n+        LogicalPlan::TableScan { source, .. } => source.statistics().num_rows,\n+        LogicalPlan::EmptyRelation {\n\nReview comment:\n       Not sure if this is relevant, where this is used?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T14:42:15.106+0000",
                    "updated": "2020-12-18T14:42:15.106+0000",
                    "started": "2020-12-18T14:42:15.106+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526003",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526015",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545899919\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n+    match logical_plan {\n\nReview comment:\n       We should also cover `Join` here too? Since we only support inner joins for now, the output row count will at most be the number of rows of the smaller input.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T15:14:05.312+0000",
                    "updated": "2020-12-18T15:14:05.312+0000",
                    "started": "2020-12-18T15:14:05.311+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526015",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526018",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545901341\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n+    match logical_plan {\n+        LogicalPlan::Projection { input, .. } => get_num_rows(input),\n+        LogicalPlan::Sort { input, .. } => get_num_rows(input),\n+        LogicalPlan::TableScan { source, .. } => source.statistics().num_rows,\n+        LogicalPlan::EmptyRelation {\n+            produce_one_row, ..\n+        } => {\n+            if *produce_one_row {\n+                Some(1)\n+            } else {\n+                Some(0)\n+            }\n+        }\n+        LogicalPlan::Limit { n: limit, input } => {\n+            let num_rows_input = get_num_rows(input);\n+            num_rows_input.map(|rows| std::cmp::min(*limit, rows))\n+        }\n+        _ => None,\n+    }\n+}\n+\n+// Finds out whether to swap left vs right order based on statistics\n+fn should_swap_join_order(left: &LogicalPlan, right: &LogicalPlan) -> bool {\n+    let left_rows = get_num_rows(left);\n+    let right_rows = get_num_rows(right);\n+\n+    match (left_rows, right_rows) {\n+        (Some(l), Some(r)) => l > r,\n+        _ => false,\n+    }\n+}\n+\n+impl OptimizerRule for HashBuildProbeOrder {\n+    fn name(&self) -> &str {\n+        \"hash_build_probe_order\"\n+    }\n+\n+    fn optimize(&mut self, plan: &LogicalPlan) -> Result<LogicalPlan> {\n+        match plan {\n+            // Main optimization rule, swaps order of left and right\n+            // based on number of rows in each table\n+            LogicalPlan::Join {\n+                left,\n+                right,\n+                on,\n+                join_type,\n+                schema,\n+            } => {\n+                if should_swap_join_order(left, right) {\n+                    // Swap left and right, change join type and (equi-)join key order\n+                    Ok(LogicalPlan::Join {\n+                        left: right.clone(),\n+                        right: left.clone(),\n+                        on: on\n+                            .iter()\n+                            .map(|(l, r)| (r.to_string(), l.to_string()))\n\nReview comment:\n       in theory, this is unnecessary since there are no restrictions in SQL on order of join conditions. However, it is possible we do make some assumptions so if you ean into that it would be good to file an issue for it.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T15:16:30.129+0000",
                    "updated": "2020-12-18T15:16:30.129+0000",
                    "started": "2020-12-18T15:16:30.129+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526018",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526019",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545899919\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n+    match logical_plan {\n\nReview comment:\n       ~We should also cover `Join` here too? Since we only support inner joins for now, the output row count will at most be the number of rows of the smaller input.~\r\n   \r\n   I should learn to not do these reviews before my first cup of coffee. This is complete nonsense of course.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T15:17:48.546+0000",
                    "updated": "2020-12-18T15:17:48.546+0000",
                    "started": "2020-12-18T15:17:48.545+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526019",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526020",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545902311\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n+    match logical_plan {\n+        LogicalPlan::Projection { input, .. } => get_num_rows(input),\n+        LogicalPlan::Sort { input, .. } => get_num_rows(input),\n+        LogicalPlan::TableScan { source, .. } => source.statistics().num_rows,\n+        LogicalPlan::EmptyRelation {\n+            produce_one_row, ..\n+        } => {\n+            if *produce_one_row {\n+                Some(1)\n+            } else {\n+                Some(0)\n+            }\n+        }\n+        LogicalPlan::Limit { n: limit, input } => {\n+            let num_rows_input = get_num_rows(input);\n+            num_rows_input.map(|rows| std::cmp::min(*limit, rows))\n+        }\n+        _ => None,\n+    }\n+}\n+\n+// Finds out whether to swap left vs right order based on statistics\n+fn should_swap_join_order(left: &LogicalPlan, right: &LogicalPlan) -> bool {\n+    let left_rows = get_num_rows(left);\n+    let right_rows = get_num_rows(right);\n+\n+    match (left_rows, right_rows) {\n+        (Some(l), Some(r)) => l > r,\n+        _ => false,\n+    }\n+}\n+\n+impl OptimizerRule for HashBuildProbeOrder {\n+    fn name(&self) -> &str {\n+        \"hash_build_probe_order\"\n+    }\n+\n+    fn optimize(&mut self, plan: &LogicalPlan) -> Result<LogicalPlan> {\n+        match plan {\n+            // Main optimization rule, swaps order of left and right\n+            // based on number of rows in each table\n+            LogicalPlan::Join {\n+                left,\n+                right,\n+                on,\n+                join_type,\n+                schema,\n+            } => {\n+                if should_swap_join_order(left, right) {\n+                    // Swap left and right, change join type and (equi-)join key order\n+                    Ok(LogicalPlan::Join {\n+                        left: right.clone(),\n+                        right: left.clone(),\n+                        on: on\n+                            .iter()\n+                            .map(|(l, r)| (r.to_string(), l.to_string()))\n\nReview comment:\n       Makes sense, was surprised by it that I had to. Currently it fails when you change the order (e.g. in a query already)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T15:18:01.460+0000",
                    "updated": "2020-12-18T15:18:01.460+0000",
                    "started": "2020-12-18T15:18:01.460+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526020",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526022",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545903205\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n+    match logical_plan {\n+        LogicalPlan::Projection { input, .. } => get_num_rows(input),\n+        LogicalPlan::Sort { input, .. } => get_num_rows(input),\n+        LogicalPlan::TableScan { source, .. } => source.statistics().num_rows,\n+        LogicalPlan::EmptyRelation {\n+            produce_one_row, ..\n+        } => {\n+            if *produce_one_row {\n+                Some(1)\n+            } else {\n+                Some(0)\n+            }\n+        }\n+        LogicalPlan::Limit { n: limit, input } => {\n+            let num_rows_input = get_num_rows(input);\n+            num_rows_input.map(|rows| std::cmp::min(*limit, rows))\n+        }\n+        _ => None,\n+    }\n+}\n+\n+// Finds out whether to swap left vs right order based on statistics\n+fn should_swap_join_order(left: &LogicalPlan, right: &LogicalPlan) -> bool {\n+    let left_rows = get_num_rows(left);\n+    let right_rows = get_num_rows(right);\n+\n+    match (left_rows, right_rows) {\n+        (Some(l), Some(r)) => l > r,\n+        _ => false,\n+    }\n+}\n+\n+impl OptimizerRule for HashBuildProbeOrder {\n+    fn name(&self) -> &str {\n+        \"hash_build_probe_order\"\n+    }\n+\n+    fn optimize(&mut self, plan: &LogicalPlan) -> Result<LogicalPlan> {\n+        match plan {\n+            // Main optimization rule, swaps order of left and right\n+            // based on number of rows in each table\n+            LogicalPlan::Join {\n+                left,\n+                right,\n+                on,\n+                join_type,\n+                schema,\n+            } => {\n+                if should_swap_join_order(left, right) {\n+                    // Swap left and right, change join type and (equi-)join key order\n+                    Ok(LogicalPlan::Join {\n\nReview comment:\n       I'm not sure if it is relevant, but when I have done this in other projects, I have wrapped the swapped join in a projection to preserve the column ordering of the output. This would be less surprising to a user.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T15:19:37.849+0000",
                    "updated": "2020-12-18T15:19:37.849+0000",
                    "started": "2020-12-18T15:19:37.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526022",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526023",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545903205\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n+    match logical_plan {\n+        LogicalPlan::Projection { input, .. } => get_num_rows(input),\n+        LogicalPlan::Sort { input, .. } => get_num_rows(input),\n+        LogicalPlan::TableScan { source, .. } => source.statistics().num_rows,\n+        LogicalPlan::EmptyRelation {\n+            produce_one_row, ..\n+        } => {\n+            if *produce_one_row {\n+                Some(1)\n+            } else {\n+                Some(0)\n+            }\n+        }\n+        LogicalPlan::Limit { n: limit, input } => {\n+            let num_rows_input = get_num_rows(input);\n+            num_rows_input.map(|rows| std::cmp::min(*limit, rows))\n+        }\n+        _ => None,\n+    }\n+}\n+\n+// Finds out whether to swap left vs right order based on statistics\n+fn should_swap_join_order(left: &LogicalPlan, right: &LogicalPlan) -> bool {\n+    let left_rows = get_num_rows(left);\n+    let right_rows = get_num_rows(right);\n+\n+    match (left_rows, right_rows) {\n+        (Some(l), Some(r)) => l > r,\n+        _ => false,\n+    }\n+}\n+\n+impl OptimizerRule for HashBuildProbeOrder {\n+    fn name(&self) -> &str {\n+        \"hash_build_probe_order\"\n+    }\n+\n+    fn optimize(&mut self, plan: &LogicalPlan) -> Result<LogicalPlan> {\n+        match plan {\n+            // Main optimization rule, swaps order of left and right\n+            // based on number of rows in each table\n+            LogicalPlan::Join {\n+                left,\n+                right,\n+                on,\n+                join_type,\n+                schema,\n+            } => {\n+                if should_swap_join_order(left, right) {\n+                    // Swap left and right, change join type and (equi-)join key order\n+                    Ok(LogicalPlan::Join {\n\nReview comment:\n       I'm not sure if it is relevant, but when I have done this in other projects, I have wrapped the swapped join in a projection to preserve the column ordering of the output. This would be less surprising to a user if for some reason there is no final projection.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T15:19:50.735+0000",
                    "updated": "2020-12-18T15:19:50.735+0000",
                    "started": "2020-12-18T15:19:50.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526023",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526024",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#issuecomment-748151628\n\n\n   Thanks @Dandandan this is looking great :rocket: \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T15:20:33.995+0000",
                    "updated": "2020-12-18T15:20:33.995+0000",
                    "started": "2020-12-18T15:20:33.995+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526024",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526025",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545902311\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n+    match logical_plan {\n+        LogicalPlan::Projection { input, .. } => get_num_rows(input),\n+        LogicalPlan::Sort { input, .. } => get_num_rows(input),\n+        LogicalPlan::TableScan { source, .. } => source.statistics().num_rows,\n+        LogicalPlan::EmptyRelation {\n+            produce_one_row, ..\n+        } => {\n+            if *produce_one_row {\n+                Some(1)\n+            } else {\n+                Some(0)\n+            }\n+        }\n+        LogicalPlan::Limit { n: limit, input } => {\n+            let num_rows_input = get_num_rows(input);\n+            num_rows_input.map(|rows| std::cmp::min(*limit, rows))\n+        }\n+        _ => None,\n+    }\n+}\n+\n+// Finds out whether to swap left vs right order based on statistics\n+fn should_swap_join_order(left: &LogicalPlan, right: &LogicalPlan) -> bool {\n+    let left_rows = get_num_rows(left);\n+    let right_rows = get_num_rows(right);\n+\n+    match (left_rows, right_rows) {\n+        (Some(l), Some(r)) => l > r,\n+        _ => false,\n+    }\n+}\n+\n+impl OptimizerRule for HashBuildProbeOrder {\n+    fn name(&self) -> &str {\n+        \"hash_build_probe_order\"\n+    }\n+\n+    fn optimize(&mut self, plan: &LogicalPlan) -> Result<LogicalPlan> {\n+        match plan {\n+            // Main optimization rule, swaps order of left and right\n+            // based on number of rows in each table\n+            LogicalPlan::Join {\n+                left,\n+                right,\n+                on,\n+                join_type,\n+                schema,\n+            } => {\n+                if should_swap_join_order(left, right) {\n+                    // Swap left and right, change join type and (equi-)join key order\n+                    Ok(LogicalPlan::Join {\n+                        left: right.clone(),\n+                        right: left.clone(),\n+                        on: on\n+                            .iter()\n+                            .map(|(l, r)| (r.to_string(), l.to_string()))\n\nReview comment:\n       Makes sense, was surprised by it that I had to. Currently it fails when you change the order (e.g. in a query already) without changing the key order.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T15:26:25.939+0000",
                    "updated": "2020-12-18T15:26:25.939+0000",
                    "started": "2020-12-18T15:26:25.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526025",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545920907\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n+    match logical_plan {\n+        LogicalPlan::Projection { input, .. } => get_num_rows(input),\n+        LogicalPlan::Sort { input, .. } => get_num_rows(input),\n+        LogicalPlan::TableScan { source, .. } => source.statistics().num_rows,\n+        LogicalPlan::EmptyRelation {\n+            produce_one_row, ..\n+        } => {\n+            if *produce_one_row {\n+                Some(1)\n+            } else {\n+                Some(0)\n+            }\n+        }\n+        LogicalPlan::Limit { n: limit, input } => {\n+            let num_rows_input = get_num_rows(input);\n+            num_rows_input.map(|rows| std::cmp::min(*limit, rows))\n+        }\n+        _ => None,\n+    }\n+}\n+\n+// Finds out whether to swap left vs right order based on statistics\n+fn should_swap_join_order(left: &LogicalPlan, right: &LogicalPlan) -> bool {\n+    let left_rows = get_num_rows(left);\n+    let right_rows = get_num_rows(right);\n+\n+    match (left_rows, right_rows) {\n+        (Some(l), Some(r)) => l > r,\n+        _ => false,\n+    }\n+}\n+\n+impl OptimizerRule for HashBuildProbeOrder {\n+    fn name(&self) -> &str {\n+        \"hash_build_probe_order\"\n+    }\n+\n+    fn optimize(&mut self, plan: &LogicalPlan) -> Result<LogicalPlan> {\n+        match plan {\n+            // Main optimization rule, swaps order of left and right\n+            // based on number of rows in each table\n+            LogicalPlan::Join {\n+                left,\n+                right,\n+                on,\n+                join_type,\n+                schema,\n+            } => {\n+                if should_swap_join_order(left, right) {\n+                    // Swap left and right, change join type and (equi-)join key order\n+                    Ok(LogicalPlan::Join {\n\nReview comment:\n       Isn't the order explicit in the `schema` (which is the same) or will it be changed based on swapping left and right?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T15:47:29.454+0000",
                    "updated": "2020-12-18T15:47:29.454+0000",
                    "started": "2020-12-18T15:47:29.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526029",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526030",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545926999\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n+    match logical_plan {\n\nReview comment:\n       :+1: \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T15:57:16.665+0000",
                    "updated": "2020-12-18T15:57:16.665+0000",
                    "started": "2020-12-18T15:57:16.664+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526030",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545946880\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n+    match logical_plan {\n+        LogicalPlan::Projection { input, .. } => get_num_rows(input),\n+        LogicalPlan::Sort { input, .. } => get_num_rows(input),\n+        LogicalPlan::TableScan { source, .. } => source.statistics().num_rows,\n+        LogicalPlan::EmptyRelation {\n+            produce_one_row, ..\n+        } => {\n+            if *produce_one_row {\n+                Some(1)\n+            } else {\n+                Some(0)\n+            }\n+        }\n+        LogicalPlan::Limit { n: limit, input } => {\n+            let num_rows_input = get_num_rows(input);\n+            num_rows_input.map(|rows| std::cmp::min(*limit, rows))\n+        }\n+        _ => None,\n+    }\n+}\n+\n+// Finds out whether to swap left vs right order based on statistics\n+fn should_swap_join_order(left: &LogicalPlan, right: &LogicalPlan) -> bool {\n+    let left_rows = get_num_rows(left);\n+    let right_rows = get_num_rows(right);\n+\n+    match (left_rows, right_rows) {\n+        (Some(l), Some(r)) => l > r,\n+        _ => false,\n+    }\n+}\n+\n+impl OptimizerRule for HashBuildProbeOrder {\n+    fn name(&self) -> &str {\n+        \"hash_build_probe_order\"\n+    }\n+\n+    fn optimize(&mut self, plan: &LogicalPlan) -> Result<LogicalPlan> {\n+        match plan {\n+            // Main optimization rule, swaps order of left and right\n+            // based on number of rows in each table\n+            LogicalPlan::Join {\n+                left,\n+                right,\n+                on,\n+                join_type,\n+                schema,\n+            } => {\n+                if should_swap_join_order(left, right) {\n+                    // Swap left and right, change join type and (equi-)join key order\n+                    Ok(LogicalPlan::Join {\n\nReview comment:\n       We should add a unit test for this so that we know the answer to that question, I think.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T16:31:06.976+0000",
                    "updated": "2020-12-18T16:31:06.976+0000",
                    "started": "2020-12-18T16:31:06.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526041",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526042",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545948711\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,219 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n\nReview comment:\n       I have been thinking about what we can do to estimate the number of rows coming out of joins so that we can extend this optimization to nested joins. We can't do anything accurate with the current statistics in this case but I feel that we should try and do something rather than just pick the left side as the build side.\r\n   \r\n   One idea is to assume that all joins produce a cartesian product (left row count * right row count). This would at least help in the case where two small tables are joined, and then joined with a huge table, or the other way around.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T16:34:04.730+0000",
                    "updated": "2020-12-18T16:34:04.730+0000",
                    "started": "2020-12-18T16:34:04.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526042",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545959888\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n+    match logical_plan {\n+        LogicalPlan::Projection { input, .. } => get_num_rows(input),\n+        LogicalPlan::Sort { input, .. } => get_num_rows(input),\n+        LogicalPlan::TableScan { source, .. } => source.statistics().num_rows,\n+        LogicalPlan::EmptyRelation {\n\nReview comment:\n       This looks good. This is used for projections without an input, such as `SELECT 1`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T16:53:01.862+0000",
                    "updated": "2020-12-18T16:53:01.862+0000",
                    "started": "2020-12-18T16:53:01.862+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526050",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545960387\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,219 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n\nReview comment:\n       Indeed I think that could be very beneficial but estimating it before executing can be really hard / impossible.\r\n   \r\n   Also, if using the left as build side wrong, at this moment, the order could be changed by the user by changing the query itself.\r\n   \r\n   I think ideally you should be able to know more about the table size when the query is executing (a la Spark 3 adaptive query execution) so you don't do the wrong thing. BigQuery also has a nice strategy / explanation for this https://cloud.google.com/bigquery/query-plan-explanation This probably requires quite a bit of changes on the execution / planning side, but this would bring much more available statistics to each step during execution to be able to change optimize the plan further.\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T16:53:45.781+0000",
                    "updated": "2020-12-18T16:53:45.781+0000",
                    "started": "2020-12-18T16:53:45.781+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526051",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526052",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545960387\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,219 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n\nReview comment:\n       Indeed I think that could be very beneficial but estimating it before executing can be really hard / impossible I think?\r\n   \r\n   Also, if using the left as build side wrong, at this moment, the order could be changed by the user by changing the query itself.\r\n   \r\n   I think ideally you should be able to know more about the table size when the query is executing (a la Spark 3 adaptive query execution) so you don't do the wrong thing. BigQuery also has a nice strategy / explanation for this https://cloud.google.com/bigquery/query-plan-explanation This probably requires quite a bit of changes on the execution / planning side, but this would bring much more available statistics to each step during execution to be able to change optimize the plan further.\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T16:53:58.687+0000",
                    "updated": "2020-12-18T16:53:58.687+0000",
                    "started": "2020-12-18T16:53:58.686+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526052",
                    "issueId": "13345557"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/worklog/526053",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8961:\nURL: https://github.com/apache/arrow/pull/8961#discussion_r545960387\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/hash_build_probe_order.rs\n##########\n@@ -0,0 +1,219 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License\n+\n+//! Optimizer rule to switch build and probe order of hash join\n+//! based on statistics of a `TableProvider`. If the number of\n+//! rows of both sources is known, the order can be switched\n+//! for a faster hash join.\n+\n+use crate::logical_plan::LogicalPlan;\n+use crate::optimizer::optimizer::OptimizerRule;\n+use crate::{error::Result, prelude::JoinType};\n+\n+use super::utils;\n+\n+/// BuildProbeOrder reorders the build and probe phase of\n+/// hash joins. This uses the amount of rows that a datasource has.\n+/// The rule optimizes the order such that the left (build) side of the join\n+/// is the smallest.\n+/// If the information is not available, the order stays the same,\n+/// so that it could be optimized manually in a query.\n+pub struct HashBuildProbeOrder {}\n+\n+// Gets exact number of rows, if known by the statistics of the underlying\n+fn get_num_rows(logical_plan: &LogicalPlan) -> Option<usize> {\n\nReview comment:\n       Indeed I think that could be very beneficial but estimating it before executing might be really hard / impossible?\r\n   \r\n   Also, if using the left as build side wrong, at this moment, the order could be changed by the user by changing the query itself.\r\n   \r\n   I think ideally you should be able to know more about the table size when the query is executing (a la Spark 3 adaptive query execution) so you don't do the wrong thing. BigQuery also has a nice strategy / explanation for this https://cloud.google.com/bigquery/query-plan-explanation This probably requires quite a bit of changes on the execution / planning side, but this would bring much more available statistics to each step during execution to be able to change optimize the plan further.\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T16:54:21.747+0000",
                    "updated": "2020-12-18T16:54:21.747+0000",
                    "started": "2020-12-18T16:54:21.746+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526053",
                    "issueId": "13345557"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 26400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@14c28214[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55728f5e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32c3e0ba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@738a81c3[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c8004c0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@69d52e8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2bf6a4b1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@cd5ac95[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@304f0fcb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5ca91138[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4264f530[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@637458ed[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 26400,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Dec 20 20:43:03 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-20T20:43:03.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10885/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-12-11T16:42:36.000+0000",
        "updated": "2020-12-20T20:43:16.000+0000",
        "timeoriginalestimate": null,
        "description": "Based on number of rows in a datasource we can optimize which table should be part of the build phase and which part of the probe phase in a hash join. We should make the (approximately) smallest datasource. This can have a large effect on performance if one of the two tables is much bigger than the other, as we can skip building a large lookup table.\r\n\r\nRecently we are adding statistics to data sources in DataFusion, so this seems something we can add relatively easily.\u00a0We can approximate the number of rows based on underlying statistics in datasources, but it should at least work for simple cases first.\r\nWhen swapping the order a left join has to be changed to a right join and vice versa, inner joins remain the same. Probably it is easier to start with inner joins and then add left / right joins.\r\n\r\nMaybe we should also rename some internals to make clear that e.g. the left part is part of the build and the right part of the probe.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 26400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust][DataFusion] Optimize join build vs probe based on statistics on row number",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345557/comment/17252517",
                    "id": "17252517",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 8961\n[https://github.com/apache/arrow/pull/8961]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-12-20T20:43:03.589+0000",
                    "updated": "2020-12-20T20:43:03.589+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0lfn4:",
        "customfield_12314139": null
    }
}