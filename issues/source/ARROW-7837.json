{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13284737",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737",
    "key": "ARROW-7837",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=eyalfa",
            "name": "eyalfa",
            "key": "eyalfa",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Eyal Farago",
            "active": true,
            "timeZone": "Asia/Jerusalem"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=eyalfa",
            "name": "eyalfa",
            "key": "eyalfa",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Eyal Farago",
            "active": true,
            "timeZone": "Asia/Jerusalem"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=eyalfa",
            "name": "eyalfa",
            "key": "eyalfa",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Eyal Farago",
            "active": true,
            "timeZone": "Asia/Jerusalem"
        },
        "aggregateprogress": {
            "progress": 24000,
            "total": 24000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 24000,
            "total": 24000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7837/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 41,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/389854",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eyalfa commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461\n \n \n   this fixes [ARROW-7837](https://issues.apache.org/jira/browse/ARROW-7837).\r\n   * introduces a small test case showing how `copyFromSafe` fails on index-out-of-bounds when skipping some indices when adding values to a `VarCharVector` (probably happens to `VarBinaryVector` as well).\r\n   * root cause is a bug in `handleSafe` which loads a stale write index resulting with a failure to identify the need to resize the value buffer.\r\n   * fixed `handleSafe` to consult with the last-set index in order to properly calculate the future end offset of writing requested length to the buffer.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-20T09:11:34.095+0000",
                    "updated": "2020-02-20T09:11:34.095+0000",
                    "started": "2020-02-20T09:11:34.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389854",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/389859",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#issuecomment-588823785\n \n \n   https://issues.apache.org/jira/browse/ARROW-7837\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-20T09:16:51.521+0000",
                    "updated": "2020-02-20T09:16:51.521+0000",
                    "started": "2020-02-20T09:16:51.521+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389859",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/389943",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r382008892\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   @eyalfa Thank you for taking time to fix this problem. \r\n   \r\n   I think this solution solves your problem. However, maybe it does not solve the problem completely. \r\n   \r\n   The fundamental problem is that the offset buffer is in an inconsistent state. This causes the `handleSafe` method to fail. \r\n   \r\n   The solution here tries to work around it, and the failure goes away, but the problem remains unsolved. To see this, please note that when returning to the `copySafe` method, we update the `lastSet` member without fixing the inconsistent state of the offset buffer, so the offset values in the range [lastSet, thisIndex) remains inconsistent, and we no longer have a chance to fix it. \r\n   \r\n   IMO, to fix the problem, we need to fix the problem of inconsistent state of the offset buffer. This can be achieved by calling `fillHoles` method. (Maybe there are other ways, but the point is that the problem must be solved, not bypassed)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-20T13:49:38.472+0000",
                    "updated": "2020-02-20T13:49:38.472+0000",
                    "started": "2020-02-20T13:49:38.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389943",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/389952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eyalfa commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r382017804\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   copyFromSafe calls fillHoles immediately after handleSafe, so at least this aspect of the fix holds.\r\n   I'd need soe more time to analyse all of the handleSafe call sites but the first thing I've noticed is that it's protected hence its usage is limited to library code, more specifically library code which is aware of the safety aspects of handling variable width vectors.\r\n   even if the handleSafe method called fillHoles there will still be potential use-cases where the offsets array can be compromised beyond repair, i.e. code that explicitly calls allocateNew, then some unsafe operations followed by 'safe' operations - the safe operation may fill the last hole but not one preceding the last set offset.\r\n   \r\n   having that said, I can change my fix to invoke fillHoles but I'm not sure what does it do to the method's contract as it'd start modifying the visible state of the vector.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-20T14:04:39.460+0000",
                    "updated": "2020-02-20T14:04:39.460+0000",
                    "started": "2020-02-20T14:04:39.458+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389952",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/390464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r382423487\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   > copyFromSafe calls fillHoles immediately after handleSafe, so at least this aspect of the fix holds.\r\n   \r\n   You are right. Method fillHoles is called in copyFromSafe (sorry I ignored this at first). So I think your solution solves the problem for this scenario.\r\n    \r\n   > I'd need soe more time to analyse all of the handleSafe call sites but the first thing I've noticed is that it's protected hence its usage is limited to library code, more specifically library code which is aware of the safety aspects of handling variable width vectors.\r\n   even if the handleSafe method called fillHoles there will still be potential use-cases where the offsets array can be compromised beyond repair, i.e. code that explicitly calls allocateNew, then some unsafe operations followed by 'safe' operations - the safe operation may fill the last hole but not one preceding the last set offset.\r\n   \r\n   Please go ahead with your analysis, and please note that we cannot make sure the offset buffer is in a consistent state for all scenarios. We should try our best to do so, but if we cannot, we only need to support vectors which go through the life cycle in the right order (https://github.com/apache/arrow/blob/master/docs/source/java/vector.rst).\r\n   \r\n   > having that said, I can change my fix to invoke fillHoles but I'm not sure what does it do to the method's contract as it'd start modifying the visible state of the vector.\r\n   \r\n   I think there is no need to change it until we reach a consensus in the discussion. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T06:58:24.082+0000",
                    "updated": "2020-02-21T06:58:24.082+0000",
                    "started": "2020-02-21T06:58:24.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390464",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/390465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r382423721\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   Small nit: since `lastSet ` can only be -1, the tertiary operation is not necessary. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T06:59:22.300+0000",
                    "updated": "2020-02-21T06:59:22.300+0000",
                    "started": "2020-02-21T06:59:22.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390465",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/390539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eyalfa commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r382484421\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   > Small nit: since `lastSet ` can only be -1, the tertiary operation is not necessary.\r\n   \r\n   not sure I understand why? if is't still at -1 I'm not allowed to read the length at offset 0.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T09:41:01.322+0000",
                    "updated": "2020-02-21T09:41:01.322+0000",
                    "started": "2020-02-21T09:41:01.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390539",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/390545",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r382493335\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   when lastSet == -1, getStartOffset(lastSet + 1) amounts to getStartOffset(0), which is legal\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T09:59:20.186+0000",
                    "updated": "2020-02-21T09:59:20.186+0000",
                    "started": "2020-02-21T09:59:20.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390545",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/390550",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eyalfa commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r382496619\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   > > copyFromSafe calls fillHoles immediately after handleSafe, so at least this aspect of the fix holds.\r\n   > \r\n   > You are right. Method fillHoles is called in copyFromSafe (sorry I ignored this at first). So I think your solution solves the problem for this scenario.\r\n   > \r\n   > > I'd need soe more time to analyse all of the handleSafe call sites but the first thing I've noticed is that it's protected hence its usage is limited to library code, more specifically library code which is aware of the safety aspects of handling variable width vectors.\r\n   > > even if the handleSafe method called fillHoles there will still be potential use-cases where the offsets array can be compromised beyond repair, i.e. code that explicitly calls allocateNew, then some unsafe operations followed by 'safe' operations - the safe operation may fill the last hole but not one preceding the last set offset.\r\n   > \r\n   > Please go ahead with your analysis, and please note that we cannot make sure the offset buffer is in a consistent state for all scenarios. We should try our best to do so, but if we cannot, we only need to support vectors which go through the life cycle in the right order (https://github.com/apache/arrow/blob/master/docs/source/java/vector.rst).\r\n   > \r\n   > > having that said, I can change my fix to invoke fillHoles but I'm not sure what does it do to the method's contract as it'd start modifying the visible state of the vector.\r\n   > \r\n   > I think there is no need to change it until we reach a consensus in the discussion.\r\n   \r\n   Took a a tour of the code (courtesy of Idea's find references).\r\n   seems like `handleSafe` is called by `fillEmpties` and various implementations of `setSafe` (across three classes).\r\n   It seems all `setSafe` overloads calls `fillEmpties` followed by `handleSafe` which means they actually invoke `handleSafe` twice, not sure if this is intentional but it effectively eliminates the bug the PR is trying to fix, paying a performance hit while doing so. I suggest leaving my fix in place, in addition remove the redundant `handleSafe` invocations (where following `fillEmpties`). \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T10:06:05.077+0000",
                    "updated": "2020-02-21T10:06:05.077+0000",
                    "started": "2020-02-21T10:06:05.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390550",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/390552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eyalfa commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r382499450\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   > when lastSet == -1, getStartOffset(lastSet + 1) amounts to getStartOffset(0), which is legal\r\n   \r\n   hmm, unless `index < 0` as in this case the index array may still be the empty buffer. BTW index is not asserted to be non-negative in the `handleSafe` method and in at least two of the call sites (`fillEmpties` and `copyFromSafe`).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T10:12:13.244+0000",
                    "updated": "2020-02-21T10:12:13.244+0000",
                    "started": "2020-02-21T10:12:13.243+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390552",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/391098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r382910792\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   > It seems all setSafe overloads calls fillEmpties followed by handleSafe which means they actually invoke handleSafe twice, not sure if this is intentional but it effectively eliminates the bug the PR is trying to fix, paying a performance hit while doing so. I suggest leaving my fix in place, in addition remove the redundant handleSafe invocations (where following fillEmpties).\r\n   \r\n   Thank you for the investigation. \r\n   So the effective call sequence is handleSafe + fillHoles + handleSafe. The first handleSafe call ensures enough capacity for the offset buffer, the second fillHoles call makes the content of the offset buffer valid, and the last handleSafe call ensures enough capacity for the data buffer. So the bug is hidden. \r\n   \r\n   Anyway, the bug in handleSafe must be fixed, and by fixing it, the second handleSafe call can be removed to improve performance (as you have suggested).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-22T12:55:35.371+0000",
                    "updated": "2020-02-22T12:55:35.371+0000",
                    "started": "2020-02-22T12:55:35.371+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391098",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/391099",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r382910961\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\n ##########\n @@ -1069,4 +1070,27 @@ public void testCopyFromWithNulls14() {\n       }\n     }\n   }\n+\n+  @Test //https://issues.apache.org/jira/browse/ARROW-7837\n+  public void testCopySafeArrow7837() {\n \n Review comment:\n   nit: a more descriptive name can be better? (Maybe adding some descriptive comments )\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-22T12:58:24.844+0000",
                    "updated": "2020-02-22T12:58:24.844+0000",
                    "started": "2020-02-22T12:58:24.844+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391099",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/391100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r382911045\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   Would you please also fix the setSafe overloads?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-22T12:59:51.997+0000",
                    "updated": "2020-02-22T12:59:51.997+0000",
                    "started": "2020-02-22T12:59:51.996+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391100",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/391102",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r382911045\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   Sorry. Can we remove one of the handleSafe call? \r\n   If we remove the first one, we cannot make sure of enough offset buffer capacity, and the call to fillHoles may fail. \r\n   If we remove the second one, we cannot ensure enough data buffer capacity, and adding data to the data buffer may fail. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-22T13:07:49.250+0000",
                    "updated": "2020-02-22T13:07:49.250+0000",
                    "started": "2020-02-22T13:07:49.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391102",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/391122",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eyalfa commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r382915699\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   I definitely intend to fix the `setSafe` overloads.\r\n   please notice my fix actually addresses your concern since one call will both ensure offsets buffer and value buffer has enough capacity for the intended update.\r\n   \r\n   please notice the reason we've encountered this in `copyFromSafe` is because this method calls `handleSafe` just once.\r\n   \r\n   I hope I'll be able to push a commit later today addressing the setSafe call sites. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-22T14:18:27.417+0000",
                    "updated": "2020-02-22T14:18:27.417+0000",
                    "started": "2020-02-22T14:18:27.415+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391122",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/391473",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r383067965\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   > I definitely intend to fix the `setSafe` overloads.\r\n   > please notice my fix actually addresses your concern since one call will both ensure offsets buffer and value buffer has enough capacity for the intended update.\r\n   > \r\n   > please notice the reason we've encountered this in `copyFromSafe` is because this method calls `handleSafe` just once.\r\n   > \r\n   > I hope I'll be able to push a commit later today addressing the setSafe call sites.\r\n   \r\n   Sounds good. \r\n   So maybe we need to replace fillEmpties with explicit calls to handleSafe and fillHoles. \r\n   Please go ahead with your changes. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T02:33:42.257+0000",
                    "updated": "2020-02-24T02:33:42.257+0000",
                    "started": "2020-02-24T02:33:42.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391473",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/391478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r383068679\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n ##########\n @@ -1245,7 +1245,7 @@ protected final void handleSafe(int index, int dataLength) {\n     while (index >= getValueCapacity()) {\n       reallocValidityAndOffsetBuffers();\n     }\n-    final int startOffset = getStartOffset(index);\n+    final int startOffset = lastSet < 0 ? 0 : getStartOffset(lastSet + 1);\n \n Review comment:\n   > > when lastSet == -1, getStartOffset(lastSet + 1) amounts to getStartOffset(0), which is legal\r\n   > \r\n   > hmm, unless `index < 0` as in this case the index array may still be the empty buffer. BTW index is not asserted to be non-negative in the `handleSafe` method and in at least two of the call sites (`fillEmpties` and `copyFromSafe`).\r\n   \r\n   IMO, this should not be the case. However, I think it is sufficient for this fix. Maybe we can discuss it in a separate issue. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T02:40:08.202+0000",
                    "updated": "2020-02-24T02:40:08.202+0000",
                    "started": "2020-02-24T02:40:08.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391478",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/391543",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eyalfa commented on issue #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#issuecomment-590188983\n \n \n   @liyafan82 ,\r\n   I see lots of code duplication, i.e.  in class `VarBinaryVector` `public void setSafe(int index, NullableVarBinaryHolder holder)` reimplements `public void set(int index, NullableVarBinaryHolder holder)` which in turn has a lot of common code with `public void set(int index, VarBinaryHolder holder)`...\r\n   is this intentional? I think `public void setSafe(int index, NullableVarBinaryHolder holder)` can easily be implemented in terms of another method, i.e. `org.apache.arrow.vector.BaseVariableWidthVector#setSafe(int, int, int, int, io.netty.buffer.ArrowBuf)` , will this kind of refactoring be acceptable?\r\n   \r\n   another thing I've noticed, calling `fillEmpties' followed by actually setting data is insufficient as `fillEmpties' isn't aware of the length of the data about to be written so when calling `handleSafe` it passes 0 which leaves us with a potential for the same bug I'm trying to solve here, so one has to extract the data-length and call `handleSafe` followed by `fillHoles`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T06:57:45.165+0000",
                    "updated": "2020-02-24T06:57:45.165+0000",
                    "started": "2020-02-24T06:57:45.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391543",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/391556",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#issuecomment-590206379\n \n \n   > @liyafan82 ,\r\n   > I see lots of code duplication, i.e. in class `VarBinaryVector` `public void setSafe(int index, NullableVarBinaryHolder holder)` reimplements `public void set(int index, NullableVarBinaryHolder holder)` which in turn has a lot of common code with `public void set(int index, VarBinaryHolder holder)`...\r\n   > is this intentional? I think `public void setSafe(int index, NullableVarBinaryHolder holder)` can easily be implemented in terms of another method, i.e. `org.apache.arrow.vector.BaseVariableWidthVector#setSafe(int, int, int, int, io.netty.buffer.ArrowBuf)` , will this kind of refactoring be acceptable?\r\n   \r\n   You are right. There is lots of code duplication, especially in the core library. IMO, it is intentional (for the sake of performance). \r\n   \r\n   > another thing I've noticed, calling `fillEmpties' followed by actually setting data is insufficient as `fillEmpties' isn't aware of the length of the data about to be written so when calling `handleSafe` it passes 0 which leaves us with a potential for the same bug I'm trying to solve here, so one has to extract the data-length and call `handleSafe` followed by `fillHoles`\r\n   \r\n   Agreed with you. We need to replace`fillEmpties` with explicit calls to `handleSafe` and `fillHoles`, so we can pass in the data length. \r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T08:11:21.903+0000",
                    "updated": "2020-02-24T08:11:21.903+0000",
                    "started": "2020-02-24T08:11:21.902+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391556",
                    "issueId": "13284737"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/worklog/391607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6461: ARROW-7837 [JAVA] copyFromSafe fails due to a bug in handleSafe\nURL: https://github.com/apache/arrow/pull/6461#discussion_r383170210\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/VarBinaryVector.java\n ##########\n @@ -225,18 +225,17 @@ public void set(int index, NullableVarBinaryHolder holder) {\n    */\n   public void setSafe(int index, NullableVarBinaryHolder holder) {\n     assert index >= 0;\n-    fillEmpties(index);\n-    BitVectorHelper.setValidityBit(validityBuffer, index, holder.isSet);\n-    final int startOffset = getStartOffset(index);\n     if (holder.isSet != 0) {\n       final int dataLength = holder.end - holder.start;\n       handleSafe(index, dataLength);\n+      fillHoles(index);\n+      final int startOffset = getStartOffset(index);\n       offsetBuffer.setInt((index + 1) * OFFSET_WIDTH, startOffset + dataLength);\n       valueBuffer.setBytes(startOffset, holder.buffer, holder.start, dataLength);\n     } else {\n-      handleSafe(index, 0);\n-      offsetBuffer.setInt((index + 1) * OFFSET_WIDTH, startOffset);\n+      fillEmpties(index + 1);\n     }\n+    BitVectorHelper.setValidityBit(validityBuffer, index, holder.isSet);\n \n Review comment:\n   Is there any special reason for moving this line?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T10:00:56.757+0000",
                    "updated": "2020-02-24T10:00:56.757+0000",
                    "started": "2020-02-24T10:00:56.756+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391607",
                    "issueId": "13284737"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 24000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@65cb66c8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a60ada1[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e52ebd2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1b04e1c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56d17f80[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@fc8efbe[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@763d99ee[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@75fee99b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@280ea5db[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@60f30a7b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a1b1d62[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@78ab918b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 24000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Mar 06 04:51:59 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-03-06T04:51:59.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7837/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2020-02-12T07:14:59.000+0000",
        "updated": "2020-03-06T04:52:19.000+0000",
        "timeoriginalestimate": null,
        "description": "There's a subtle bug in the copySafe method of\u00a0BaseVariableWidthVector that results with an index out of bounds exception.\r\n\r\nThe issue is somewhere between the safeCopy and handleSafe methods,\r\n\r\ncopySafe calls handleSafe in order to assure underlying buffers capacity before appending a value to the vector, however the handleSafe method falsely assumes all 'holes' have been field when checking the next write offset. as a result it reads a stale offset (I believe it's 0 for freshly allocated buffers but may be un-guaranteed when reusing a buffer) and fails to identify the need to resize the values buffer.\r\n\r\n\u00a0\r\n\r\nthe following (scala) test demonstrates the issue (by artificially shrinking the values buffer). it was written after we've hit this in production:\r\n{code:java}\r\ntest(\"try to reproduce Arrow issue\"){\r\n    val charVector = new VarCharVector(\"stam\", Allocator.get)\r\n\r\n    val srcCharVector = new VarCharVector(\"src\", Allocator.get)\r\n    srcCharVector.setSafe(0, Array.tabulate(20)(_.toByte))\r\n    srcCharVector.setValueCount(2)\r\n\r\n    for( i <- 0 until 4){\r\n      charVector.copyFromSafe(0, i, srcCharVector)\r\n      charVector.setValueCount(i + 1)\r\n    }\r\n\r\n    val valBuff = charVector.getBuffers(false)(2)\r\n    valBuff.capacity(90)\r\n\r\n    charVector.copyFromSafe(0, 14, srcCharVector)\r\n\r\n    srcCharVector.close()\r\n    charVector.close()\r\n  }\r\n{code}\r\n\u00a0this test fails with the following exception:\r\n\r\n\u00a0\r\n{code:java}\r\nindex: 80, length: 20 (expected: range(0, 90))\r\njava.lang.IndexOutOfBoundsException: index: 80, length: 20 (expected: range(0, 90))\r\n\tat io.netty.buffer.ArrowBuf.getBytes(ArrowBuf.java:929)\r\n\tat org.apache.arrow.vector.BaseVariableWidthVector.copyFromSafe(BaseVariableWidthVector.java:1345)\r\n\tat com.datorama.pluto.arrow.ArroStreamSerializationTest.$anonfun$new$33(ArroStreamSerializationTest.scala:454)\r\n\tat com.datorama.pluto.arrow.ArroStreamSerializationTest$$Lambda$129.00000000F78CFE20.apply$mcV$sp(Unknown Source)\r\n\tat scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)\r\n\tat org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)\r\n\tat org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)\r\n\tat org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)\r\n\tat org.scalatest.Transformer.apply(Transformer.scala:22)\r\n\tat org.scalatest.Transformer.apply(Transformer.scala:20)\r\n\tat org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:186)\r\n\tat org.scalatest.TestSuite.withFixture(TestSuite.scala:196)\r\n\tat org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)\r\n\tat org.scalatest.FunSuite.withFixture(FunSuite.scala:1560)\r\n\tat org.scalatest.FunSuiteLike.invokeWithFixture$1(FunSuiteLike.scala:184)\r\n\tat org.scalatest.FunSuiteLike.$anonfun$runTest$1(FunSuiteLike.scala:196)\r\n\tat org.scalatest.FunSuiteLike$$Lambda$367.00000000001B9220.apply(Unknown Source)\r\n\tat org.scalatest.SuperEngine.runTestImpl(Engine.scala:289)\r\n\tat org.scalatest.FunSuiteLike.runTest(FunSuiteLike.scala:196)\r\n\tat org.scalatest.FunSuiteLike.runTest$(FunSuiteLike.scala:178)\r\n\tat com.datorama.pluto.arrow.ArroStreamSerializationTest.org$scalatest$BeforeAndAfterEachTestData$$super$runTest(ArroStreamSerializationTest.scala:32)\r\n\tat org.scalatest.BeforeAndAfterEachTestData.runTest(BeforeAndAfterEachTestData.scala:194)\r\n\tat org.scalatest.BeforeAndAfterEachTestData.runTest$(BeforeAndAfterEachTestData.scala:187)\r\n\tat com.datorama.pluto.arrow.ArroStreamSerializationTest.runTest(ArroStreamSerializationTest.scala:32)\r\n\tat org.scalatest.FunSuiteLike.$anonfun$runTests$1(FunSuiteLike.scala:229)\r\n\tat org.scalatest.FunSuiteLike$$Lambda$358.000000001AAC0020.apply(Unknown Source)\r\n\tat org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:396)\r\n\tat org.scalatest.SuperEngine$$Lambda$359.000000001AAC0820.apply(Unknown Source)\r\n\tat scala.collection.immutable.List.foreach(List.scala:388)\r\n\tat org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:384)\r\n\tat org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:379)\r\n\tat org.scalatest.SuperEngine.runTestsImpl(Engine.scala:461)\r\n\tat org.scalatest.FunSuiteLike.runTests(FunSuiteLike.scala:229)\r\n\tat org.scalatest.FunSuiteLike.runTests$(FunSuiteLike.scala:228)\r\n\tat org.scalatest.FunSuite.runTests(FunSuite.scala:1560)\r\n\tat org.scalatest.Suite.run(Suite.scala:1147)\r\n\tat org.scalatest.Suite.run$(Suite.scala:1129)\r\n\tat org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1560)\r\n\tat org.scalatest.FunSuiteLike.$anonfun$run$1(FunSuiteLike.scala:233)\r\n\tat org.scalatest.FunSuiteLike$$Lambda$352.0000000019149C20.apply(Unknown Source)\r\n\tat org.scalatest.SuperEngine.runImpl(Engine.scala:521)\r\n\tat org.scalatest.FunSuiteLike.run(FunSuiteLike.scala:233)\r\n\tat org.scalatest.FunSuiteLike.run$(FunSuiteLike.scala:232)\r\n\tat com.datorama.pluto.arrow.ArroStreamSerializationTest.org$scalatest$BeforeAndAfterAll$$super$run(ArroStreamSerializationTest.scala:32)\r\n\tat org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)\r\n\tat org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)\r\n\tat org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)\r\n\tat com.datorama.pluto.arrow.ArroStreamSerializationTest.run(ArroStreamSerializationTest.scala:32)\r\n\tat org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:45)\r\n\tat org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13(Runner.scala:1346)\r\n\tat org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13$adapted(Runner.scala:1340)\r\n\tat org.scalatest.tools.Runner$$$Lambda$164.0000000017957020.apply(Unknown Source)\r\n\tat scala.collection.immutable.List.foreach(List.scala:388)\r\n\tat org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:1340)\r\n\tat org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24(Runner.scala:1031)\r\n\tat org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24$adapted(Runner.scala:1010)\r\n\tat org.scalatest.tools.Runner$$$Lambda$78.000000001B0D5820.apply(Unknown Source)\r\n\tat org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:1506)\r\n\tat org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:1010)\r\n\tat org.scalatest.tools.Runner$.run(Runner.scala:850)\r\n\tat org.scalatest.tools.Runner.run(Runner.scala)\r\n\tat org.jetbrains.plugins.scala.testingSupport.scalaTest.ScalaTestRunner.runScalaTest2(ScalaTestRunner.java:133)\r\n\tat org.jetbrains.plugins.scala.testingSupport.scalaTest.ScalaTestRunner.main(ScalaTestRunner.java:27)\r\n{code}\r\n\r\nI believe the root cause for this bugs is in [this line|https://github.com/apache/arrow/blob/apache-arrow-0.15.0/java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java#L1237] in the handleSafe method:\r\n\r\n{code:java}\r\nfinal int startOffset = getStartOffset(index);\r\n{code}\r\n\r\nwe've encountered this bug in dremio's HashJoinOperator, where a loop has two cases: in one case it appends to one vector and in the other case it appends to another, when there are 'holes' in this loop it ends up calling copySafe with an index which is several slots away from the last update, in most cases this goes well but it occasionally (quite rare, but happens) misses the need to resize the values buffer.\r\n\r\nwill you be willing to accept a pull request fixing this issue?",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 24000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] bug in BaseVariableWidthVector.copyFromSafe results with an index out of bounds exception",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/comment/17037836",
                    "id": "17037836",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=odagan%40dalesforce.com",
                        "name": "odagan@dalesforce.com",
                        "key": "odagan@dalesforce.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Ori Dagan",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~npr]\u00a0- This should be a bug (might have been open as Improvement by mistake)\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=odagan%40dalesforce.com",
                        "name": "odagan@dalesforce.com",
                        "key": "odagan@dalesforce.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Ori Dagan",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-02-16T13:42:55.027+0000",
                    "updated": "2020-02-16T13:42:55.027+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/comment/17038334",
                    "id": "17038334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "[~eyalfa] Thanks a lot for reporting this issue. I think it is a real bug, which can be triggered when the target vector is not written in consecutive slots. \r\n\r\nIt should be resolved by calling the {{fillHoles}} method in the {{copySafe}} method. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2020-02-17T13:02:39.516+0000",
                    "updated": "2020-02-17T13:02:39.516+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/comment/17038338",
                    "id": "17038338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eyalfa",
                        "name": "eyalfa",
                        "key": "eyalfa",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Eyal Farago",
                        "active": true,
                        "timeZone": "Asia/Jerusalem"
                    },
                    "body": "[~fan_li_ya], yes it is a real bug, we've hit this in production.\r\none way toy solve this might be calling fillHoles, another might be considering the lastIndexSet member, read the corresponding offset and use that to decide if the current write requires a resize of the values buffer.\r\n\r\nbtw, what do you mean by non-consecutive slots? in out use-case the code populating the vector simply skipped null slots instead of explicitly setting them to nulls (probably relying on fillHoles) - is this what you mean?\r\n\r\nanother thing, the handleSafe method is used by several other 'safe' methods so I think it should be fixed (not copySafe which is just one of the call sites).\r\n\r\nasking again,\r\nwill you accept a pull request with a fix?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eyalfa",
                        "name": "eyalfa",
                        "key": "eyalfa",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Eyal Farago",
                        "active": true,
                        "timeZone": "Asia/Jerusalem"
                    },
                    "created": "2020-02-17T13:10:27.653+0000",
                    "updated": "2020-02-17T13:27:56.705+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/comment/17038355",
                    "id": "17038355",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "> btw, what do you mean by non-consecutive slots? in out use-case the code populating the vector simply skipped null slots instead of explicitly setting them to nulls (probably relying on fillHoles) - is this what you mean?\r\n\r\nYes, this is what I mean.\r\n\r\n> the handleSafe method is used by several other 'safe' methods so I think it should be fixed (not copySafe which is just one of the call sites).\r\n\r\nMaybe we should prepare a unit test for each case, and discuss it case by case.\r\n\r\n> will you accept a pull request with a fix?\r\n\r\nSure. A PR with a fix would be great. \r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2020-02-17T13:36:23.163+0000",
                    "updated": "2020-02-17T13:36:23.163+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13284737/comment/17053021",
                    "id": "17053021",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 6461\n[https://github.com/apache/arrow/pull/6461]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-03-06T04:51:59.297+0000",
                    "updated": "2020-03-06T04:51:59.297+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z0beds:",
        "customfield_12314139": null
    }
}