{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13116585",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116585",
    "key": "ARROW-1775",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=swangster",
            "name": "swangster",
            "key": "swangster",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Stephanie Wang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332956",
                "id": "12332956",
                "name": "C++ - Plasma"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=swangster",
            "name": "swangster",
            "key": "swangster",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Stephanie Wang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=swangster",
            "name": "swangster",
            "key": "swangster",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Stephanie Wang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1775/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6bf7f11a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47abd5a5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b12df3a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@428d2f00[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b0af08a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@28f773bd[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@65d18296[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4e8f5403[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@723d63f8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@61448c99[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8686715[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3cf30557[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Nov 08 22:14:11 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-11-08T22:14:11.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1775/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-11-07T06:07:19.000+0000",
        "updated": "2017-11-15T15:52:59.000+0000",
        "timeoriginalestimate": null,
        "description": "It would be useful to allow a Plasma client to abort an object that it created but hasn't yet sealed. After the abort, it should appear as if the object was never created all. The logic is similar to the delete case, except that the client must release the object atomically with the removal of the object from the cache and store.\r\n\r\nIn Ray, for example, we need this for the distributed version of the Plasma store, where many Plasma clients transfer objects to each other. If a sending Plasma client fails during a transfer, we want to make sure that the receiving client can abort the transfer, so that we can later recreate the object successfully. Otherwise, we will fail with an error that the object already exists.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "Ability to abort created but unsealed Plasma objects",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116585/comment/16241568",
                    "id": "16241568",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "stephanie-wang opened a new pull request #1289: ARROW-1775: Ability to abort created but unsealed Plasma objects\nURL: https://github.com/apache/arrow/pull/1289\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T06:21:14.483+0000",
                    "updated": "2017-11-07T06:21:14.483+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116585/comment/16242191",
                    "id": "16242191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on issue #1289: ARROW-1775: Ability to abort created but unsealed Plasma objects\nURL: https://github.com/apache/arrow/pull/1289#issuecomment-342518983\n \n \n   +1 LGTM Will leave this open a bit longer in case there are more comments.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T15:31:05.908+0000",
                    "updated": "2017-11-07T15:31:05.908+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116585/comment/16242965",
                    "id": "16242965",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1289: ARROW-1775: Ability to abort created but unsealed Plasma objects\nURL: https://github.com/apache/arrow/pull/1289#discussion_r149512244\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -278,6 +278,43 @@ Status PlasmaClient::Get(const ObjectID* object_ids, int64_t num_objects,\n   return Status::OK();\n }\n \n+/// This is a helper method for unmapping objects for which all references have\n+/// gone out of scope, either by calling Release or Abort.\n+///\n+/// @param object_id The object ID whose data we should unmap.\n \n Review comment:\n   This comment may go better in the header file\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T21:45:43.846+0000",
                    "updated": "2017-11-07T21:45:43.846+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116585/comment/16242966",
                    "id": "16242966",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1289: ARROW-1775: Ability to abort created but unsealed Plasma objects\nURL: https://github.com/apache/arrow/pull/1289#discussion_r149512465\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -278,6 +278,43 @@ Status PlasmaClient::Get(const ObjectID* object_ids, int64_t num_objects,\n   return Status::OK();\n }\n \n+/// This is a helper method for unmapping objects for which all references have\n+/// gone out of scope, either by calling Release or Abort.\n+///\n+/// @param object_id The object ID whose data we should unmap.\n+Status PlasmaClient::UnmapObject(const ObjectID& object_id) {\n+  auto object_entry = objects_in_use_.find(object_id);\n+  ARROW_CHECK(object_entry != objects_in_use_.end());\n+  ARROW_CHECK(object_entry->second->count == 0);\n+\n+  // Decrement the count of the number of objects in this memory-mapped file\n+  // that the client is using. The corresponding increment should have\n+  // happened in plasma_get.\n+  int fd = object_entry->second->object.handle.store_fd;\n+  auto entry = mmap_table_.find(fd);\n+  ARROW_CHECK(entry != mmap_table_.end());\n+  ARROW_CHECK(entry->second.count >= 1);\n+  if (entry->second.count == 1) {\n+    // If no other objects are being used, then unmap the file.\n+    int err = munmap(entry->second.pointer, entry->second.length);\n+    if (err == -1) {\n+      return Status::IOError(\"Error during munmap\");\n+    }\n+    // Remove the corresponding entry from the hash table.\n+    mmap_table_.erase(fd);\n \n Review comment:\n   If munmap fails, what should happen to this `fd`? I guess it would be an esoteric failure\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T21:45:43.882+0000",
                    "updated": "2017-11-07T21:45:43.882+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116585/comment/16242967",
                    "id": "16242967",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1289: ARROW-1775: Ability to abort created but unsealed Plasma objects\nURL: https://github.com/apache/arrow/pull/1289#discussion_r149513238\n \n \n\n ##########\n File path: cpp/src/plasma/store.h\n ##########\n @@ -73,6 +73,8 @@ class PlasmaStore {\n   int create_object(const ObjectID& object_id, int64_t data_size, int64_t metadata_size,\n                     Client* client, PlasmaObject* result);\n \n+  void abort_object(const ObjectID& object_id);\n \n Review comment:\n   We should note to `PascalCase` these methods sometime soon\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T21:45:43.985+0000",
                    "updated": "2017-11-07T21:45:43.985+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116585/comment/16244614",
                    "id": "16244614",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "stephanie-wang commented on a change in pull request #1289: ARROW-1775: Ability to abort created but unsealed Plasma objects\nURL: https://github.com/apache/arrow/pull/1289#discussion_r149776740\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -278,6 +278,43 @@ Status PlasmaClient::Get(const ObjectID* object_ids, int64_t num_objects,\n   return Status::OK();\n }\n \n+/// This is a helper method for unmapping objects for which all references have\n+/// gone out of scope, either by calling Release or Abort.\n+///\n+/// @param object_id The object ID whose data we should unmap.\n+Status PlasmaClient::UnmapObject(const ObjectID& object_id) {\n+  auto object_entry = objects_in_use_.find(object_id);\n+  ARROW_CHECK(object_entry != objects_in_use_.end());\n+  ARROW_CHECK(object_entry->second->count == 0);\n+\n+  // Decrement the count of the number of objects in this memory-mapped file\n+  // that the client is using. The corresponding increment should have\n+  // happened in plasma_get.\n+  int fd = object_entry->second->object.handle.store_fd;\n+  auto entry = mmap_table_.find(fd);\n+  ARROW_CHECK(entry != mmap_table_.end());\n+  ARROW_CHECK(entry->second.count >= 1);\n+  if (entry->second.count == 1) {\n+    // If no other objects are being used, then unmap the file.\n+    int err = munmap(entry->second.pointer, entry->second.length);\n+    if (err == -1) {\n+      return Status::IOError(\"Error during munmap\");\n+    }\n+    // Remove the corresponding entry from the hash table.\n+    mmap_table_.erase(fd);\n \n Review comment:\n   Yeah, I wasn't sure what to do with `fd` either. Currently, the entry just stays in the `mmap_table_`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-08T19:44:52.483+0000",
                    "updated": "2017-11-08T19:44:52.483+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116585/comment/16244804",
                    "id": "16244804",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on issue #1289: ARROW-1775: Ability to abort created but unsealed Plasma objects\nURL: https://github.com/apache/arrow/pull/1289#issuecomment-342976390\n \n \n   +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-08T22:05:15.272+0000",
                    "updated": "2017-11-08T22:05:15.272+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116585/comment/16244827",
                    "id": "16244827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz closed pull request #1289: ARROW-1775: Ability to abort created but unsealed Plasma objects\nURL: https://github.com/apache/arrow/pull/1289\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/plasma/client.cc b/cpp/src/plasma/client.cc\nindex e57a2a6f3..dd32bdc81 100644\n--- a/cpp/src/plasma/client.cc\n+++ b/cpp/src/plasma/client.cc\n@@ -278,6 +278,39 @@ Status PlasmaClient::Get(const ObjectID* object_ids, int64_t num_objects,\n   return Status::OK();\n }\n \n+Status PlasmaClient::UnmapObject(const ObjectID& object_id) {\n+  auto object_entry = objects_in_use_.find(object_id);\n+  ARROW_CHECK(object_entry != objects_in_use_.end());\n+  ARROW_CHECK(object_entry->second->count == 0);\n+\n+  // Decrement the count of the number of objects in this memory-mapped file\n+  // that the client is using. The corresponding increment should have\n+  // happened in plasma_get.\n+  int fd = object_entry->second->object.handle.store_fd;\n+  auto entry = mmap_table_.find(fd);\n+  ARROW_CHECK(entry != mmap_table_.end());\n+  ARROW_CHECK(entry->second.count >= 1);\n+  if (entry->second.count == 1) {\n+    // If no other objects are being used, then unmap the file.\n+    int err = munmap(entry->second.pointer, entry->second.length);\n+    if (err == -1) {\n+      return Status::IOError(\"Error during munmap\");\n+    }\n+    // Remove the corresponding entry from the hash table.\n+    mmap_table_.erase(fd);\n+  } else {\n+    // If there are other objects being used, decrement the reference count.\n+    entry->second.count -= 1;\n+  }\n+  // Update the in_use_object_bytes_.\n+  in_use_object_bytes_ -= (object_entry->second->object.data_size +\n+                           object_entry->second->object.metadata_size);\n+  DCHECK_GE(in_use_object_bytes_, 0);\n+  // Remove the entry from the hash table of objects currently in use.\n+  objects_in_use_.erase(object_id);\n+  return Status::OK();\n+}\n+\n /// This is a helper method for implementing plasma_release. We maintain a\n /// buffer\n /// of release calls and only perform them once the buffer becomes full (as\n@@ -297,28 +330,9 @@ Status PlasmaClient::PerformRelease(const ObjectID& object_id) {\n   ARROW_CHECK(object_entry->second->count >= 0);\n   // Check if the client is no longer using this object.\n   if (object_entry->second->count == 0) {\n-    // Decrement the count of the number of objects in this memory-mapped file\n-    // that the client is using. The corresponding increment should have\n-    // happened in plasma_get.\n-    int fd = object_entry->second->object.handle.store_fd;\n-    auto entry = mmap_table_.find(fd);\n-    ARROW_CHECK(entry != mmap_table_.end());\n-    entry->second.count -= 1;\n-    ARROW_CHECK(entry->second.count >= 0);\n-    // If none are being used then unmap the file.\n-    if (entry->second.count == 0) {\n-      munmap(entry->second.pointer, entry->second.length);\n-      // Remove the corresponding entry from the hash table.\n-      mmap_table_.erase(fd);\n-    }\n     // Tell the store that the client no longer needs the object.\n+    RETURN_NOT_OK(UnmapObject(object_id));\n     RETURN_NOT_OK(SendReleaseRequest(store_conn_, object_id));\n-    // Update the in_use_object_bytes_.\n-    in_use_object_bytes_ -= (object_entry->second->object.data_size +\n-                             object_entry->second->object.metadata_size);\n-    DCHECK_GE(in_use_object_bytes_, 0);\n-    // Remove the entry from the hash table of objects currently in use.\n-    objects_in_use_.erase(object_id);\n   }\n   return Status::OK();\n }\n@@ -344,6 +358,20 @@ Status PlasmaClient::Release(const ObjectID& object_id) {\n   return Status::OK();\n }\n \n+Status PlasmaClient::FlushReleaseHistory() {\n+  // If the client is already disconnected, ignore the flush.\n+  if (store_conn_ < 0) {\n+    return Status::OK();\n+  }\n+  while (release_history_.size() > 0) {\n+    // Perform a release for the object ID for the first pending release.\n+    RETURN_NOT_OK(PerformRelease(release_history_.back()));\n+    // Remove the last entry from the release history.\n+    release_history_.pop_back();\n+  }\n+  return Status::OK();\n+}\n+\n // This method is used to query whether the plasma store contains an object.\n Status PlasmaClient::Contains(const ObjectID& object_id, bool* has_object) {\n   // Check if we already have a reference to the object.\n@@ -443,6 +471,35 @@ Status PlasmaClient::Seal(const ObjectID& object_id) {\n   return Release(object_id);\n }\n \n+Status PlasmaClient::Abort(const ObjectID& object_id) {\n+  auto object_entry = objects_in_use_.find(object_id);\n+  ARROW_CHECK(object_entry != objects_in_use_.end())\n+      << \"Plasma client called abort on an object without a reference to it\";\n+  ARROW_CHECK(!object_entry->second->is_sealed)\n+      << \"Plasma client called abort on a sealed object\";\n+\n+  // Flush the release history.\n+  RETURN_NOT_OK(FlushReleaseHistory());\n+  // Make sure that the Plasma client only has one reference to the object. If\n+  // it has more, then the client needs to release the buffer before calling\n+  // abort.\n+  if (object_entry->second->count > 1) {\n+    return Status::Invalid(\"Plasma client cannot have a reference to the buffer.\");\n+  }\n+\n+  // Send the abort request.\n+  RETURN_NOT_OK(SendAbortRequest(store_conn_, object_id));\n+  // Decrease the reference count to zero, then remove the object.\n+  object_entry->second->count--;\n+  RETURN_NOT_OK(UnmapObject(object_id));\n+\n+  std::vector<uint8_t> buffer;\n+  ObjectID id;\n+  int64_t type;\n+  RETURN_NOT_OK(ReadMessage(store_conn_, &type, &buffer));\n+  return ReadAbortReply(buffer.data(), buffer.size(), &id);\n+}\n+\n Status PlasmaClient::Delete(const ObjectID& object_id) {\n   // TODO(rkn): In the future, we can use this method to give hints to the\n   // eviction policy about when an object will no longer be needed.\ndiff --git a/cpp/src/plasma/client.h b/cpp/src/plasma/client.h\nindex 145942441..89df2b0b0 100644\n--- a/cpp/src/plasma/client.h\n+++ b/cpp/src/plasma/client.h\n@@ -152,6 +152,15 @@ class ARROW_EXPORT PlasmaClient {\n   /// \\return The return status.\n   Status Contains(const ObjectID& object_id, bool* has_object);\n \n+  /// Abort an unsealed object in the object store. If the abort succeeds, then\n+  /// it will be as if the object was never created at all. The unsealed object\n+  /// must have only a single reference (the one that would have been removed by\n+  /// calling Seal).\n+  ///\n+  /// \\param object_id The ID of the object to abort.\n+  /// \\return The return status.\n+  Status Abort(const ObjectID& object_id);\n+\n   /// Seal an object in the object store. The object will be immutable after\n   /// this\n   /// call.\n@@ -307,6 +316,16 @@ class ARROW_EXPORT PlasmaClient {\n   int get_manager_fd();\n \n  private:\n+  /// This is a helper method for unmapping objects for which all references have\n+  /// gone out of scope, either by calling Release or Abort.\n+  ///\n+  /// @param object_id The object ID whose data we should unmap.\n+  Status UnmapObject(const ObjectID& object_id);\n+\n+  /// This is a helper method that flushes all pending release calls to the\n+  /// store.\n+  Status FlushReleaseHistory();\n+\n   Status PerformRelease(const ObjectID& object_id);\n \n   uint8_t* lookup_or_mmap(int fd, int store_fd_val, int64_t map_size);\ndiff --git a/cpp/src/plasma/format/plasma.fbs b/cpp/src/plasma/format/plasma.fbs\nindex 23782ade5..b6d03b8a3 100644\n--- a/cpp/src/plasma/format/plasma.fbs\n+++ b/cpp/src/plasma/format/plasma.fbs\n@@ -21,6 +21,8 @@ enum MessageType:int {\n   // Create a new object.\n   PlasmaCreateRequest = 1,\n   PlasmaCreateReply,\n+  PlasmaAbortRequest,\n+  PlasmaAbortReply,\n   // Seal an object.\n   PlasmaSealRequest,\n   PlasmaSealReply,\n@@ -113,6 +115,16 @@ table PlasmaCreateReply {\n   error: PlasmaError;\n }\n \n+table PlasmaAbortRequest {\n+  // ID of the object to be aborted.\n+  object_id: string;\n+}\n+\n+table PlasmaAbortReply {\n+  // ID of the object that was aborted.\n+  object_id: string;\n+}\n+\n table PlasmaSealRequest {\n   // ID of the object to be sealed.\n   object_id: string;\ndiff --git a/cpp/src/plasma/protocol.cc b/cpp/src/plasma/protocol.cc\nindex 2261b6a62..c0ebb88fe 100644\n--- a/cpp/src/plasma/protocol.cc\n+++ b/cpp/src/plasma/protocol.cc\n@@ -100,6 +100,34 @@ Status ReadCreateReply(uint8_t* data, size_t size, ObjectID* object_id,\n   return plasma_error_status(message->error());\n }\n \n+Status SendAbortRequest(int sock, ObjectID object_id) {\n+  flatbuffers::FlatBufferBuilder fbb;\n+  auto message = CreatePlasmaAbortRequest(fbb, fbb.CreateString(object_id.binary()));\n+  return PlasmaSend(sock, MessageType_PlasmaAbortRequest, &fbb, message);\n+}\n+\n+Status ReadAbortRequest(uint8_t* data, size_t size, ObjectID* object_id) {\n+  DCHECK(data);\n+  auto message = flatbuffers::GetRoot<PlasmaAbortRequest>(data);\n+  DCHECK(verify_flatbuffer(message, data, size));\n+  *object_id = ObjectID::from_binary(message->object_id()->str());\n+  return Status::OK();\n+}\n+\n+Status SendAbortReply(int sock, ObjectID object_id) {\n+  flatbuffers::FlatBufferBuilder fbb;\n+  auto message = CreatePlasmaAbortReply(fbb, fbb.CreateString(object_id.binary()));\n+  return PlasmaSend(sock, MessageType_PlasmaAbortReply, &fbb, message);\n+}\n+\n+Status ReadAbortReply(uint8_t* data, size_t size, ObjectID* object_id) {\n+  DCHECK(data);\n+  auto message = flatbuffers::GetRoot<PlasmaAbortReply>(data);\n+  DCHECK(verify_flatbuffer(message, data, size));\n+  *object_id = ObjectID::from_binary(message->object_id()->str());\n+  return Status::OK();\n+}\n+\n // Seal messages.\n \n Status SendSealRequest(int sock, ObjectID object_id, unsigned char* digest) {\ndiff --git a/cpp/src/plasma/protocol.h b/cpp/src/plasma/protocol.h\nindex af4b13978..e8c334f91 100644\n--- a/cpp/src/plasma/protocol.h\n+++ b/cpp/src/plasma/protocol.h\n@@ -51,6 +51,14 @@ Status SendCreateReply(int sock, ObjectID object_id, PlasmaObject* object, int e\n Status ReadCreateReply(uint8_t* data, size_t size, ObjectID* object_id,\n                        PlasmaObject* object);\n \n+Status SendAbortRequest(int sock, ObjectID object_id);\n+\n+Status ReadAbortRequest(uint8_t* data, size_t size, ObjectID* object_id);\n+\n+Status SendAbortReply(int sock, ObjectID object_id);\n+\n+Status ReadAbortReply(uint8_t* data, size_t size, ObjectID* object_id);\n+\n /* Plasma Seal message functions. */\n \n Status SendSealRequest(int sock, ObjectID object_id, unsigned char* digest);\ndiff --git a/cpp/src/plasma/store.cc b/cpp/src/plasma/store.cc\nindex 210cce162..5dbdebc23 100644\n--- a/cpp/src/plasma/store.cc\n+++ b/cpp/src/plasma/store.cc\n@@ -393,6 +393,18 @@ void PlasmaStore::seal_object(const ObjectID& object_id, unsigned char digest[])\n   update_object_get_requests(object_id);\n }\n \n+void PlasmaStore::abort_object(const ObjectID& object_id) {\n+  auto entry = get_object_table_entry(&store_info_, object_id);\n+  ARROW_CHECK(entry != NULL) << \"To abort an object it must be in the object table.\";\n+  ARROW_CHECK(entry->state != PLASMA_SEALED)\n+      << \"To abort an object it must not have been sealed.\";\n+  ARROW_CHECK(entry->clients.size() == 1)\n+      << \"To abort an object, the only client currently using it is the creator.\";\n+\n+  dlfree(entry->pointer);\n+  store_info_.objects.erase(object_id);\n+}\n+\n void PlasmaStore::delete_objects(const std::vector<ObjectID>& object_ids) {\n   for (const auto& object_id : object_ids) {\n     ARROW_LOG(DEBUG) << \"deleting object \" << object_id.hex();\n@@ -443,7 +455,11 @@ void PlasmaStore::disconnect_client(int client_fd) {\n   // If this client was using any objects, remove it from the appropriate\n   // lists.\n   for (const auto& entry : store_info_.objects) {\n-    remove_client_from_object_clients(entry.second.get(), it->second.get());\n+    if (entry.second->state == PLASMA_SEALED) {\n+      remove_client_from_object_clients(entry.second.get(), it->second.get());\n+    } else {\n+      abort_object(entry.first);\n+    }\n   }\n \n   // Note, the store may still attempt to send a message to the disconnected\n@@ -582,6 +598,11 @@ Status PlasmaStore::process_message(Client* client) {\n         warn_if_sigpipe(send_fd(client->fd, object.handle.store_fd), client->fd);\n       }\n     } break;\n+    case MessageType_PlasmaAbortRequest: {\n+      RETURN_NOT_OK(ReadAbortRequest(input, input_size, &object_id));\n+      abort_object(object_id);\n+      HANDLE_SIGPIPE(SendAbortReply(client->fd, object_id), client->fd);\n+    } break;\n     case MessageType_PlasmaGetRequest: {\n       std::vector<ObjectID> object_ids_to_get;\n       int64_t timeout_ms;\ndiff --git a/cpp/src/plasma/store.h b/cpp/src/plasma/store.h\nindex d03d11f4e..0d08d8a67 100644\n--- a/cpp/src/plasma/store.h\n+++ b/cpp/src/plasma/store.h\n@@ -48,6 +48,7 @@ struct Client {\n \n class PlasmaStore {\n  public:\n+  // TODO: PascalCase PlasmaStore methods.\n   PlasmaStore(EventLoop* loop, int64_t system_memory, std::string directory,\n               bool hugetlbfs_enabled);\n \n@@ -73,6 +74,8 @@ class PlasmaStore {\n   int create_object(const ObjectID& object_id, int64_t data_size, int64_t metadata_size,\n                     Client* client, PlasmaObject* result);\n \n+  void abort_object(const ObjectID& object_id);\n+\n   /// Delete objects that have been created in the hash table. This should only\n   /// be called on objects that are returned by the eviction policy to evict.\n   ///\ndiff --git a/cpp/src/plasma/test/client_tests.cc b/cpp/src/plasma/test/client_tests.cc\nindex 02b383214..0b5d0f911 100644\n--- a/cpp/src/plasma/test/client_tests.cc\n+++ b/cpp/src/plasma/test/client_tests.cc\n@@ -127,6 +127,50 @@ TEST_F(TestPlasmaStore, MultipleGetTest) {\n   ASSERT_EQ(object_buffer[1].data[0], 2);\n }\n \n+TEST_F(TestPlasmaStore, AbortTest) {\n+  ObjectID object_id = ObjectID::from_random();\n+  ObjectBuffer object_buffer;\n+\n+  // Test for object non-existence.\n+  ARROW_CHECK_OK(client_.Get(&object_id, 1, 0, &object_buffer));\n+  ASSERT_EQ(object_buffer.data_size, -1);\n+\n+  // Test object abort.\n+  // First create object.\n+  int64_t data_size = 4;\n+  uint8_t metadata[] = {5};\n+  int64_t metadata_size = sizeof(metadata);\n+  uint8_t* data;\n+  ARROW_CHECK_OK(client_.Create(object_id, data_size, metadata, metadata_size, &data));\n+  // Write some data.\n+  for (int64_t i = 0; i < data_size / 2; i++) {\n+    data[i] = static_cast<uint8_t>(i % 4);\n+  }\n+  // Attempt to abort. Test that this fails before the first release.\n+  Status status = client_.Abort(object_id);\n+  ASSERT_TRUE(status.IsInvalid());\n+  // Release, then abort.\n+  ARROW_CHECK_OK(client_.Release(object_id));\n+  ARROW_CHECK_OK(client_.Abort(object_id));\n+\n+  // Test for object non-existence after the abort.\n+  ARROW_CHECK_OK(client_.Get(&object_id, 1, 0, &object_buffer));\n+  ASSERT_EQ(object_buffer.data_size, -1);\n+\n+  // Create the object successfully this time.\n+  ARROW_CHECK_OK(client_.Create(object_id, data_size, metadata, metadata_size, &data));\n+  for (int64_t i = 0; i < data_size; i++) {\n+    data[i] = static_cast<uint8_t>(i % 4);\n+  }\n+  ARROW_CHECK_OK(client_.Seal(object_id));\n+\n+  // Test that we can get the object.\n+  ARROW_CHECK_OK(client_.Get(&object_id, 1, -1, &object_buffer));\n+  for (int64_t i = 0; i < data_size; i++) {\n+    ASSERT_EQ(data[i], object_buffer.data[i]);\n+  }\n+}\n+\n }  // namespace plasma\n \n int main(int argc, char** argv) {\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-08T22:13:35.840+0000",
                    "updated": "2017-11-08T22:13:35.840+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116585/comment/16244830",
                    "id": "16244830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 1289\n[https://github.com/apache/arrow/pull/1289]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-08T22:14:11.706+0000",
                    "updated": "2017-11-08T22:14:11.706+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|i3mh5b:",
        "customfield_12314139": null
    }
}