{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13266211",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211",
    "key": "ARROW-7061",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7061/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 34,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/341937",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5811: ARROW-7061: [C++][Dataset] Ignore file patterns in FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811\n \n \n   - Until FileFormat can detect the file type, this allows the user to   ignore files by providing prefixes.\r\n   - Move configurations into a struct instead of parameters.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T14:18:02.999+0000",
                    "updated": "2019-11-12T14:18:02.999+0000",
                    "started": "2019-11-12T14:18:02.999+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341937",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/341945",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5811: ARROW-7061: [C++][Dataset] Ignore file patterns in FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#issuecomment-552917583\n \n \n   https://issues.apache.org/jira/browse/ARROW-7061\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T14:30:40.974+0000",
                    "updated": "2019-11-12T14:30:40.974+0000",
                    "started": "2019-11-12T14:30:40.974+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341945",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/341955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5811: ARROW-7061: [C++][Dataset] Ignore file patterns in FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r345251094\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery.cc\n ##########\n @@ -28,43 +28,74 @@\n #include \"arrow/dataset/partition.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/filesystem/path_tree.h\"\n+#include \"arrow/filesystem/path_util.h\"\n #include \"arrow/status.h\"\n \n namespace arrow {\n namespace dataset {\n \n FileSystemDataSourceDiscovery::FileSystemDataSourceDiscovery(\n-    fs::FileSystem* filesystem, std::string base_dir, std::vector<fs::FileStats> files,\n-    std::shared_ptr<FileFormat> format)\n+    fs::FileSystem* filesystem, std::vector<fs::FileStats> files,\n+    std::shared_ptr<FileFormat> format, FileSystemDiscoveryOptions options)\n     : fs_(filesystem),\n-      base_dir_(std::move(base_dir)),\n       files_(std::move(files)),\n-      format_(std::move(format)) {}\n+      format_(std::move(format)),\n+      options_(std::move(options)) {}\n+\n+std::vector<fs::FileStats> FilterFilesByPrefix(const std::vector<std::string>& prefixes,\n+                                               std::vector<fs::FileStats> files) {\n+  std::vector<fs::FileStats> filtered;\n+  auto matches_prefix = [&prefixes](const fs::FileStats& file) -> bool {\n+    // Ignore non-file.\n+    if (!file.IsFile()) return true;\n+\n+    auto dir_base = fs::internal::GetAbstractPathParent(file.path());\n+    util::string_view basename{dir_base.second};\n+\n+    auto has_prefix = [&basename](const std::string& prefix) -> bool {\n+      return !prefix.empty() && basename.starts_with(prefix);\n+    };\n+\n+    return !std::any_of(prefixes.cbegin(), prefixes.cend(), has_prefix);\n \n Review comment:\n   ```suggestion\r\n       return std::none_of(prefixes.cbegin(), prefixes.cend(), has_prefix);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T15:06:39.849+0000",
                    "updated": "2019-11-12T15:06:39.849+0000",
                    "started": "2019-11-12T15:06:39.848+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341955",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/341956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5811: ARROW-7061: [C++][Dataset] Ignore file patterns in FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r345255169\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery_test.cc\n ##########\n @@ -31,30 +31,34 @@ class FileSystemDataSourceDiscoveryTest : public TestFileSystemBasedDataSource {\n  public:\n   void MakeDiscovery(const std::vector<fs::FileStats>& files) {\n     MakeFileSystem(files);\n-    ASSERT_OK(\n-        FileSystemDataSourceDiscovery::Make(fs_.get(), selector_, format_, &discovery_));\n+    ASSERT_OK(FileSystemDataSourceDiscovery::Make(fs_.get(), selector_, format_,\n+                                                  fs_options_, &discovery_));\n+  }\n+\n+  void AssertFinishWithPaths(std::vector<std::string> paths) {\n+    ASSERT_OK(discovery_->Finish(&source_));\n+    AssertFragmentsAreFromPath(source_->GetFragments(options_), paths);\n   }\n \n  protected:\n   fs::Selector selector_;\n+  FileSystemDiscoveryOptions fs_options_;\n \n Review comment:\n   nit:\r\n   ```suggestion\r\n     FileSystemDiscoveryOptions discovery_options_;\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T15:06:39.852+0000",
                    "updated": "2019-11-12T15:06:39.852+0000",
                    "started": "2019-11-12T15:06:39.852+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341956",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/341957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5811: ARROW-7061: [C++][Dataset] Ignore file patterns in FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r345258543\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery.cc\n ##########\n @@ -28,43 +28,74 @@\n #include \"arrow/dataset/partition.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/filesystem/path_tree.h\"\n+#include \"arrow/filesystem/path_util.h\"\n #include \"arrow/status.h\"\n \n namespace arrow {\n namespace dataset {\n \n FileSystemDataSourceDiscovery::FileSystemDataSourceDiscovery(\n-    fs::FileSystem* filesystem, std::string base_dir, std::vector<fs::FileStats> files,\n-    std::shared_ptr<FileFormat> format)\n+    fs::FileSystem* filesystem, std::vector<fs::FileStats> files,\n+    std::shared_ptr<FileFormat> format, FileSystemDiscoveryOptions options)\n     : fs_(filesystem),\n-      base_dir_(std::move(base_dir)),\n       files_(std::move(files)),\n-      format_(std::move(format)) {}\n+      format_(std::move(format)),\n+      options_(std::move(options)) {}\n+\n+std::vector<fs::FileStats> FilterFilesByPrefix(const std::vector<std::string>& prefixes,\n+                                               std::vector<fs::FileStats> files) {\n+  std::vector<fs::FileStats> filtered;\n+  auto matches_prefix = [&prefixes](const fs::FileStats& file) -> bool {\n+    // Ignore non-file.\n+    if (!file.IsFile()) return true;\n+\n+    auto dir_base = fs::internal::GetAbstractPathParent(file.path());\n+    util::string_view basename{dir_base.second};\n+\n+    auto has_prefix = [&basename](const std::string& prefix) -> bool {\n \n Review comment:\n   ```suggestion\r\n       auto matches_prefix = [&basename](const std::string& prefix) -> bool {\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T15:06:39.902+0000",
                    "updated": "2019-11-12T15:06:39.902+0000",
                    "started": "2019-11-12T15:06:39.902+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341957",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/341958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5811: ARROW-7061: [C++][Dataset] Ignore file patterns in FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r345258346\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery.cc\n ##########\n @@ -28,43 +28,74 @@\n #include \"arrow/dataset/partition.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/filesystem/path_tree.h\"\n+#include \"arrow/filesystem/path_util.h\"\n #include \"arrow/status.h\"\n \n namespace arrow {\n namespace dataset {\n \n FileSystemDataSourceDiscovery::FileSystemDataSourceDiscovery(\n-    fs::FileSystem* filesystem, std::string base_dir, std::vector<fs::FileStats> files,\n-    std::shared_ptr<FileFormat> format)\n+    fs::FileSystem* filesystem, std::vector<fs::FileStats> files,\n+    std::shared_ptr<FileFormat> format, FileSystemDiscoveryOptions options)\n     : fs_(filesystem),\n-      base_dir_(std::move(base_dir)),\n       files_(std::move(files)),\n-      format_(std::move(format)) {}\n+      format_(std::move(format)),\n+      options_(std::move(options)) {}\n+\n+std::vector<fs::FileStats> FilterFilesByPrefix(const std::vector<std::string>& prefixes,\n+                                               std::vector<fs::FileStats> files) {\n+  std::vector<fs::FileStats> filtered;\n+  auto matches_prefix = [&prefixes](const fs::FileStats& file) -> bool {\n \n Review comment:\n   ```suggestion\r\n     auto matches_any_prefix = [&prefixes](const fs::FileStats& file) -> bool {\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T15:06:39.914+0000",
                    "updated": "2019-11-12T15:06:39.914+0000",
                    "started": "2019-11-12T15:06:39.914+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341958",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/341959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5811: ARROW-7061: [C++][Dataset] Ignore file patterns in FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r345254166\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery.h\n ##########\n @@ -85,35 +85,94 @@ class ARROW_DS_EXPORT DataSourceDiscovery {\n   std::shared_ptr<Expression> root_partition_;\n };\n \n-/// \\brief FileSystemDataSourceFactory creates a DataSource from a vector\n-/// of fs::FileStats or a fs::Selector.\n+struct FileSystemDiscoveryOptions {\n+  // For the purposes of applying the partition scheme, files will be stripped\n+  // of the partition_base_dir. Files not matching the partition_base_dir\n+  // prefix will be skipped for partition discovery. The ignored files will still\n+  // be part of the DataSource, but will not have partition information.\n+  //\n+  // Example:\n+  // partition_base_dir = \"/dataset\";\n+  //\n+  // - \"/dataset/US/sales.csv\" -> \"US/sales.csv\" will be given to the partition\n+  //                              scheme\n+  //\n+  // - \"/home/john/late_sales.csv\" -> Will be ignored for partition discovery.\n+  //\n+  // This is useful for partition schemes which parses directory when ordering\n+  // is important, e.g. SchemaPartitionScheme.\n+  std::string partition_base_dir;\n+\n+  // Files matching one of the following prefix will be ignored by the\n+  // discovery process. This is matched to the basename of a path.\n+  //\n+  // Example:\n+  // ignore_prefixes = {\"_\", \".DS_STORE\" };\n+  //\n+  // - \"/dataset/data.csv\" -> not ignored\n+  // - \"/dataset/_metadata\" -> ignored\n+  // - \"/dataset/.DS_STORE\" -> ignored\n+  std::vector<std::string> ignore_prefixes = {\n+      \".\",\n+      \"_\",\n+      // HDFS stamp files. A full match is also a valid prefix match.\n+      \"_$folder$\",\n+      \"_SUCCESS\",\n \n Review comment:\n   Aren't these already accounted for by \"_\"?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T15:06:39.983+0000",
                    "updated": "2019-11-12T15:06:39.983+0000",
                    "started": "2019-11-12T15:06:39.983+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341959",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/341960",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5811: ARROW-7061: [C++][Dataset] Ignore file patterns in FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r345252965\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery.h\n ##########\n @@ -85,35 +85,94 @@ class ARROW_DS_EXPORT DataSourceDiscovery {\n   std::shared_ptr<Expression> root_partition_;\n };\n \n-/// \\brief FileSystemDataSourceFactory creates a DataSource from a vector\n-/// of fs::FileStats or a fs::Selector.\n+struct FileSystemDiscoveryOptions {\n+  // For the purposes of applying the partition scheme, files will be stripped\n \n Review comment:\n   ```suggestion\r\n     // For the purposes of applying the partition scheme, paths will be stripped\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T15:06:40.006+0000",
                    "updated": "2019-11-12T15:06:40.006+0000",
                    "started": "2019-11-12T15:06:40.006+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341960",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/341961",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5811: ARROW-7061: [C++][Dataset] Ignore file patterns in FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r345259346\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery.cc\n ##########\n @@ -28,43 +28,74 @@\n #include \"arrow/dataset/partition.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/filesystem/path_tree.h\"\n+#include \"arrow/filesystem/path_util.h\"\n #include \"arrow/status.h\"\n \n namespace arrow {\n namespace dataset {\n \n FileSystemDataSourceDiscovery::FileSystemDataSourceDiscovery(\n-    fs::FileSystem* filesystem, std::string base_dir, std::vector<fs::FileStats> files,\n-    std::shared_ptr<FileFormat> format)\n+    fs::FileSystem* filesystem, std::vector<fs::FileStats> files,\n+    std::shared_ptr<FileFormat> format, FileSystemDiscoveryOptions options)\n     : fs_(filesystem),\n-      base_dir_(std::move(base_dir)),\n       files_(std::move(files)),\n-      format_(std::move(format)) {}\n+      format_(std::move(format)),\n+      options_(std::move(options)) {}\n+\n+std::vector<fs::FileStats> FilterFilesByPrefix(const std::vector<std::string>& prefixes,\n+                                               std::vector<fs::FileStats> files) {\n+  std::vector<fs::FileStats> filtered;\n+  auto matches_prefix = [&prefixes](const fs::FileStats& file) -> bool {\n+    // Ignore non-file.\n+    if (!file.IsFile()) return true;\n+\n+    auto dir_base = fs::internal::GetAbstractPathParent(file.path());\n+    util::string_view basename{dir_base.second};\n+\n+    auto has_prefix = [&basename](const std::string& prefix) -> bool {\n+      return !prefix.empty() && basename.starts_with(prefix);\n+    };\n+\n+    return !std::any_of(prefixes.cbegin(), prefixes.cend(), has_prefix);\n+  };\n+\n+  for (const auto& stat : files) {\n+    if (matches_prefix(stat)) {\n+      filtered.push_back(stat);\n+    }\n+  }\n \n-Status FileSystemDataSourceDiscovery::Make(fs::FileSystem* filesystem,\n-                                           std::string base_dir,\n-                                           std::vector<fs::FileStats> files,\n-                                           std::shared_ptr<FileFormat> format,\n-                                           std::shared_ptr<DataSourceDiscovery>* out) {\n-  out->reset(\n-      new FileSystemDataSourceDiscovery(filesystem, std::move(base_dir), files, format));\n-  return Status::OK();\n+  return filtered;\n }\n \n Status FileSystemDataSourceDiscovery::Make(fs::FileSystem* filesystem,\n                                            std::vector<fs::FileStats> files,\n                                            std::shared_ptr<FileFormat> format,\n+                                           FileSystemDiscoveryOptions options,\n                                            std::shared_ptr<DataSourceDiscovery>* out) {\n-  return Make(filesystem, \"\", std::move(files), std::move(format), out);\n+  const auto& prefixes = options.ignore_prefixes;\n+  std::vector<fs::FileStats> filtered =\n+      prefixes.empty() ? std::move(files) : FilterFilesByPrefix(prefixes, files);\n+\n+  out->reset(new FileSystemDataSourceDiscovery(filesystem, std::move(filtered),\n+                                               std::move(format), std::move(options)));\n \n Review comment:\n   The doccomment for this method indicates that ignored files will be part of the resulting datasource, but wouldn't that require that you also include the files which match ignored prefixes in this construction somehow? I think the best thing for now would be to amend the doccomment to state that files matching any ignored prefix will be dropped.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T15:06:40.094+0000",
                    "updated": "2019-11-12T15:06:40.094+0000",
                    "started": "2019-11-12T15:06:40.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341961",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/343390",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5811: ARROW-7061: [C++][Dataset] Ignore file patterns in FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r346305509\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery.cc\n ##########\n @@ -28,43 +28,74 @@\n #include \"arrow/dataset/partition.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/filesystem/path_tree.h\"\n+#include \"arrow/filesystem/path_util.h\"\n #include \"arrow/status.h\"\n \n namespace arrow {\n namespace dataset {\n \n FileSystemDataSourceDiscovery::FileSystemDataSourceDiscovery(\n-    fs::FileSystem* filesystem, std::string base_dir, std::vector<fs::FileStats> files,\n-    std::shared_ptr<FileFormat> format)\n+    fs::FileSystem* filesystem, std::vector<fs::FileStats> files,\n+    std::shared_ptr<FileFormat> format, FileSystemDiscoveryOptions options)\n     : fs_(filesystem),\n-      base_dir_(std::move(base_dir)),\n       files_(std::move(files)),\n-      format_(std::move(format)) {}\n+      format_(std::move(format)),\n+      options_(std::move(options)) {}\n+\n+std::vector<fs::FileStats> FilterFilesByPrefix(const std::vector<std::string>& prefixes,\n+                                               std::vector<fs::FileStats> files) {\n+  std::vector<fs::FileStats> filtered;\n+  auto matches_prefix = [&prefixes](const fs::FileStats& file) -> bool {\n+    // Ignore non-file.\n+    if (!file.IsFile()) return true;\n+\n+    auto dir_base = fs::internal::GetAbstractPathParent(file.path());\n+    util::string_view basename{dir_base.second};\n+\n+    auto has_prefix = [&basename](const std::string& prefix) -> bool {\n+      return !prefix.empty() && basename.starts_with(prefix);\n+    };\n+\n+    return !std::any_of(prefixes.cbegin(), prefixes.cend(), has_prefix);\n+  };\n+\n+  for (const auto& stat : files) {\n+    if (matches_prefix(stat)) {\n+      filtered.push_back(stat);\n+    }\n+  }\n \n-Status FileSystemDataSourceDiscovery::Make(fs::FileSystem* filesystem,\n-                                           std::string base_dir,\n-                                           std::vector<fs::FileStats> files,\n-                                           std::shared_ptr<FileFormat> format,\n-                                           std::shared_ptr<DataSourceDiscovery>* out) {\n-  out->reset(\n-      new FileSystemDataSourceDiscovery(filesystem, std::move(base_dir), files, format));\n-  return Status::OK();\n+  return filtered;\n }\n \n Status FileSystemDataSourceDiscovery::Make(fs::FileSystem* filesystem,\n                                            std::vector<fs::FileStats> files,\n                                            std::shared_ptr<FileFormat> format,\n+                                           FileSystemDiscoveryOptions options,\n                                            std::shared_ptr<DataSourceDiscovery>* out) {\n-  return Make(filesystem, \"\", std::move(files), std::move(format), out);\n+  const auto& prefixes = options.ignore_prefixes;\n+  std::vector<fs::FileStats> filtered =\n+      prefixes.empty() ? std::move(files) : FilterFilesByPrefix(prefixes, files);\n+\n+  out->reset(new FileSystemDataSourceDiscovery(filesystem, std::move(filtered),\n+                                               std::move(format), std::move(options)));\n \n Review comment:\n   Which one?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T13:20:13.305+0000",
                    "updated": "2019-11-14T13:20:13.305+0000",
                    "started": "2019-11-14T13:20:13.304+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343390",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/343391",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5811: ARROW-7061: [C++][Dataset] Ignore file patterns in FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r346305894\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery.h\n ##########\n @@ -85,35 +85,94 @@ class ARROW_DS_EXPORT DataSourceDiscovery {\n   std::shared_ptr<Expression> root_partition_;\n };\n \n-/// \\brief FileSystemDataSourceFactory creates a DataSource from a vector\n-/// of fs::FileStats or a fs::Selector.\n+struct FileSystemDiscoveryOptions {\n+  // For the purposes of applying the partition scheme, files will be stripped\n+  // of the partition_base_dir. Files not matching the partition_base_dir\n+  // prefix will be skipped for partition discovery. The ignored files will still\n+  // be part of the DataSource, but will not have partition information.\n+  //\n+  // Example:\n+  // partition_base_dir = \"/dataset\";\n+  //\n+  // - \"/dataset/US/sales.csv\" -> \"US/sales.csv\" will be given to the partition\n+  //                              scheme\n+  //\n+  // - \"/home/john/late_sales.csv\" -> Will be ignored for partition discovery.\n+  //\n+  // This is useful for partition schemes which parses directory when ordering\n+  // is important, e.g. SchemaPartitionScheme.\n+  std::string partition_base_dir;\n+\n+  // Files matching one of the following prefix will be ignored by the\n+  // discovery process. This is matched to the basename of a path.\n+  //\n+  // Example:\n+  // ignore_prefixes = {\"_\", \".DS_STORE\" };\n+  //\n+  // - \"/dataset/data.csv\" -> not ignored\n+  // - \"/dataset/_metadata\" -> ignored\n+  // - \"/dataset/.DS_STORE\" -> ignored\n+  std::vector<std::string> ignore_prefixes = {\n+      \".\",\n+      \"_\",\n+      // HDFS stamp files. A full match is also a valid prefix match.\n+      \"_$folder$\",\n+      \"_SUCCESS\",\n \n Review comment:\n   Indeed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T13:20:56.899+0000",
                    "updated": "2019-11-14T13:20:56.899+0000",
                    "started": "2019-11-14T13:20:56.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343391",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/343458",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #5811: ARROW-7061: [C++][Dataset] Add ignore file options to FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#issuecomment-553924798\n \n \n   @bkietz I updated the proposal significantly. @nealrichardson please comment if this aligns with what you had in mind.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T14:58:53.564+0000",
                    "updated": "2019-11-14T14:58:53.564+0000",
                    "started": "2019-11-14T14:58:53.563+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343458",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/343484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5811: ARROW-7061: [C++][Dataset] Add ignore file options to FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r346389838\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery.cc\n ##########\n @@ -28,43 +28,74 @@\n #include \"arrow/dataset/partition.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/filesystem/path_tree.h\"\n+#include \"arrow/filesystem/path_util.h\"\n #include \"arrow/status.h\"\n \n namespace arrow {\n namespace dataset {\n \n FileSystemDataSourceDiscovery::FileSystemDataSourceDiscovery(\n-    fs::FileSystem* filesystem, std::string base_dir, std::vector<fs::FileStats> files,\n-    std::shared_ptr<FileFormat> format)\n+    fs::FileSystem* filesystem, std::vector<fs::FileStats> files,\n+    std::shared_ptr<FileFormat> format, FileSystemDiscoveryOptions options)\n     : fs_(filesystem),\n-      base_dir_(std::move(base_dir)),\n       files_(std::move(files)),\n-      format_(std::move(format)) {}\n+      format_(std::move(format)),\n+      options_(std::move(options)) {}\n+\n+std::vector<fs::FileStats> FilterFilesByPrefix(const std::vector<std::string>& prefixes,\n+                                               std::vector<fs::FileStats> files) {\n+  std::vector<fs::FileStats> filtered;\n+  auto matches_prefix = [&prefixes](const fs::FileStats& file) -> bool {\n+    // Ignore non-file.\n+    if (!file.IsFile()) return true;\n+\n+    auto dir_base = fs::internal::GetAbstractPathParent(file.path());\n+    util::string_view basename{dir_base.second};\n+\n+    auto has_prefix = [&basename](const std::string& prefix) -> bool {\n+      return !prefix.empty() && basename.starts_with(prefix);\n+    };\n+\n+    return !std::any_of(prefixes.cbegin(), prefixes.cend(), has_prefix);\n+  };\n+\n+  for (const auto& stat : files) {\n+    if (matches_prefix(stat)) {\n+      filtered.push_back(stat);\n+    }\n+  }\n \n-Status FileSystemDataSourceDiscovery::Make(fs::FileSystem* filesystem,\n-                                           std::string base_dir,\n-                                           std::vector<fs::FileStats> files,\n-                                           std::shared_ptr<FileFormat> format,\n-                                           std::shared_ptr<DataSourceDiscovery>* out) {\n-  out->reset(\n-      new FileSystemDataSourceDiscovery(filesystem, std::move(base_dir), files, format));\n-  return Status::OK();\n+  return filtered;\n }\n \n Status FileSystemDataSourceDiscovery::Make(fs::FileSystem* filesystem,\n                                            std::vector<fs::FileStats> files,\n                                            std::shared_ptr<FileFormat> format,\n+                                           FileSystemDiscoveryOptions options,\n                                            std::shared_ptr<DataSourceDiscovery>* out) {\n-  return Make(filesystem, \"\", std::move(files), std::move(format), out);\n+  const auto& prefixes = options.ignore_prefixes;\n+  std::vector<fs::FileStats> filtered =\n+      prefixes.empty() ? std::move(files) : FilterFilesByPrefix(prefixes, files);\n+\n+  out->reset(new FileSystemDataSourceDiscovery(filesystem, std::move(filtered),\n+                                               std::move(format), std::move(options)));\n \n Review comment:\n   https://github.com/apache/arrow/pull/5811/files#diff-91c3d3ad9e9a52dd2886621a692bcf6eR91-R92 \"The ignored files will still be part of the DataSource, but will not have partition information.\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T15:46:02.555+0000",
                    "updated": "2019-11-14T15:46:02.555+0000",
                    "started": "2019-11-14T15:46:02.555+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343484",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/343496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5811: ARROW-7061: [C++][Dataset] Add ignore file options to FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r346397269\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery.cc\n ##########\n @@ -28,43 +28,74 @@\n #include \"arrow/dataset/partition.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/filesystem/path_tree.h\"\n+#include \"arrow/filesystem/path_util.h\"\n #include \"arrow/status.h\"\n \n namespace arrow {\n namespace dataset {\n \n FileSystemDataSourceDiscovery::FileSystemDataSourceDiscovery(\n-    fs::FileSystem* filesystem, std::string base_dir, std::vector<fs::FileStats> files,\n-    std::shared_ptr<FileFormat> format)\n+    fs::FileSystem* filesystem, std::vector<fs::FileStats> files,\n+    std::shared_ptr<FileFormat> format, FileSystemDiscoveryOptions options)\n     : fs_(filesystem),\n-      base_dir_(std::move(base_dir)),\n       files_(std::move(files)),\n-      format_(std::move(format)) {}\n+      format_(std::move(format)),\n+      options_(std::move(options)) {}\n+\n+std::vector<fs::FileStats> FilterFilesByPrefix(const std::vector<std::string>& prefixes,\n+                                               std::vector<fs::FileStats> files) {\n+  std::vector<fs::FileStats> filtered;\n+  auto matches_prefix = [&prefixes](const fs::FileStats& file) -> bool {\n+    // Ignore non-file.\n+    if (!file.IsFile()) return true;\n+\n+    auto dir_base = fs::internal::GetAbstractPathParent(file.path());\n+    util::string_view basename{dir_base.second};\n+\n+    auto has_prefix = [&basename](const std::string& prefix) -> bool {\n+      return !prefix.empty() && basename.starts_with(prefix);\n+    };\n+\n+    return !std::any_of(prefixes.cbegin(), prefixes.cend(), has_prefix);\n+  };\n+\n+  for (const auto& stat : files) {\n+    if (matches_prefix(stat)) {\n+      filtered.push_back(stat);\n+    }\n+  }\n \n-Status FileSystemDataSourceDiscovery::Make(fs::FileSystem* filesystem,\n-                                           std::string base_dir,\n-                                           std::vector<fs::FileStats> files,\n-                                           std::shared_ptr<FileFormat> format,\n-                                           std::shared_ptr<DataSourceDiscovery>* out) {\n-  out->reset(\n-      new FileSystemDataSourceDiscovery(filesystem, std::move(base_dir), files, format));\n-  return Status::OK();\n+  return filtered;\n }\n \n Status FileSystemDataSourceDiscovery::Make(fs::FileSystem* filesystem,\n                                            std::vector<fs::FileStats> files,\n                                            std::shared_ptr<FileFormat> format,\n+                                           FileSystemDiscoveryOptions options,\n                                            std::shared_ptr<DataSourceDiscovery>* out) {\n-  return Make(filesystem, \"\", std::move(files), std::move(format), out);\n+  const auto& prefixes = options.ignore_prefixes;\n+  std::vector<fs::FileStats> filtered =\n+      prefixes.empty() ? std::move(files) : FilterFilesByPrefix(prefixes, files);\n+\n+  out->reset(new FileSystemDataSourceDiscovery(filesystem, std::move(filtered),\n+                                               std::move(format), std::move(options)));\n \n Review comment:\n   > For the purpose of applying the partition scheme\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T15:57:56.213+0000",
                    "updated": "2019-11-14T15:57:56.213+0000",
                    "started": "2019-11-14T15:57:56.212+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343496",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/343502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5811: ARROW-7061: [C++][Dataset] Add ignore file options to FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r346392071\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery.h\n ##########\n @@ -85,35 +85,96 @@ class ARROW_DS_EXPORT DataSourceDiscovery {\n   std::shared_ptr<Expression> root_partition_;\n };\n \n-/// \\brief FileSystemDataSourceFactory creates a DataSource from a vector\n-/// of fs::FileStats or a fs::Selector.\n+struct FileSystemDiscoveryOptions {\n+  // For the purposes of applying the partition scheme, paths will be stripped\n+  // of the partition_base_dir. Files not matching the partition_base_dir\n+  // prefix will be skipped for partition discovery. The ignored files will still\n+  // be part of the DataSource, but will not have partition information.\n+  //\n+  // Example:\n+  // partition_base_dir = \"/dataset\";\n+  //\n+  // - \"/dataset/US/sales.csv\" -> \"US/sales.csv\" will be given to the partition\n+  //                              scheme\n+  //\n+  // - \"/home/john/late_sales.csv\" -> Will be ignored for partition discovery.\n+  //\n+  // This is useful for partition schemes which parses directory when ordering\n+  // is important, e.g. SchemaPartitionScheme.\n+  std::string partition_base_dir;\n+\n+  // Files given (via selector or explicitly) will be filtered via the\n+  // FileFormat::IsSupported method.  This will incur IO for each files in a\n+  // serial and single threaded fashion. Disabling this feature will skip the\n+  // IO, but bubble failure later down the chain.\n \n Review comment:\n   ```suggestion\r\n     // IO, but unsupported files may be present in the resulting DataSource (resulting in an error at scan time).\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T16:12:32.122+0000",
                    "updated": "2019-11-14T16:12:32.122+0000",
                    "started": "2019-11-14T16:12:32.122+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343502",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/343503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5811: ARROW-7061: [C++][Dataset] Add ignore file options to FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r346404839\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -237,6 +237,29 @@ class ParquetScanTaskIterator {\n   std::shared_ptr<parquet::arrow::FileReader> reader_;\n };\n \n+Status ParquetFileFormat::IsSupported(const FileSource& source, bool* supported) const {\n+  auto pool = default_memory_pool();\n+\n+  *supported = false;\n+\n+  std::unique_ptr<parquet::ParquetFileReader> reader;\n+  auto status = OpenReader(source, pool, &reader);\n \n Review comment:\n   This seems like a fragile approach. I'd prefer `class ParquetInvalidFooterException : public ParquetException` which can be separately caught by `OpenReader`:\r\n   ```suggestion\r\n     bool invalid_footer = false;\r\n     auto status = OpenReader(source, pool, &reader, &invalid_footer);\r\n     if (invalid_footer) {\r\n       // likely not a parquet file; ignore it\r\n       return Status::OK();\r\n     }\r\n     RETURN_NOT_OK(status);\r\n     *supported = true;\r\n     return Status::OK();\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T16:12:32.126+0000",
                    "updated": "2019-11-14T16:12:32.126+0000",
                    "started": "2019-11-14T16:12:32.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343503",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/343504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5811: ARROW-7061: [C++][Dataset] Add ignore file options to FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r346405682\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery_test.cc\n ##########\n @@ -31,30 +31,34 @@ class FileSystemDataSourceDiscoveryTest : public TestFileSystemBasedDataSource {\n  public:\n   void MakeDiscovery(const std::vector<fs::FileStats>& files) {\n     MakeFileSystem(files);\n-    ASSERT_OK(\n-        FileSystemDataSourceDiscovery::Make(fs_.get(), selector_, format_, &discovery_));\n+    ASSERT_OK(FileSystemDataSourceDiscovery::Make(fs_.get(), selector_, format_,\n+                                                  discovery_options_, &discovery_));\n+  }\n+\n+  void AssertFinishWithPaths(std::vector<std::string> paths) {\n+    ASSERT_OK(discovery_->Finish(&source_));\n+    AssertFragmentsAreFromPath(source_->GetFragments(options_), paths);\n   }\n \n  protected:\n   fs::Selector selector_;\n+  FileSystemDiscoveryOptions discovery_options_;\n   std::shared_ptr<DataSourceDiscovery> discovery_;\n   std::shared_ptr<FileFormat> format_ = std::make_shared<DummyFileFormat>();\n };\n \n TEST_F(FileSystemDataSourceDiscoveryTest, Basic) {\n   MakeDiscovery({fs::File(\"a\"), fs::File(\"b\")});\n \n-  ASSERT_OK(discovery_->Finish(&source_));\n-  AssertFragmentsAreFromPath(source_->GetFragments(options_), {\"a\", \"b\"});\n+  AssertFinishWithPaths({\"a\", \"b\"});\n }\n \n TEST_F(FileSystemDataSourceDiscoveryTest, Selector) {\n   selector_.base_dir = \"A\";\n   MakeDiscovery({fs::File(\"0\"), fs::File(\"A/a\")});\n \n-  ASSERT_OK(discovery_->Finish(&source_));\n   // \"0\" doesn't match selector, so it has been dropped:\n-  AssertFragmentsAreFromPath(source_->GetFragments(options_), {\"A/a\"});\n+  AssertFinishWithPaths({\"A/a\"});\n \n Review comment:\n   Please also add a test with `partition_base_dir` which is distinct from selector base_dir\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T16:12:32.176+0000",
                    "updated": "2019-11-14T16:12:32.176+0000",
                    "started": "2019-11-14T16:12:32.175+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343504",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/343505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5811: ARROW-7061: [C++][Dataset] Add ignore file options to FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r346397222\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery.cc\n ##########\n @@ -28,43 +28,88 @@\n #include \"arrow/dataset/partition.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/filesystem/path_tree.h\"\n+#include \"arrow/filesystem/path_util.h\"\n #include \"arrow/status.h\"\n \n namespace arrow {\n namespace dataset {\n \n FileSystemDataSourceDiscovery::FileSystemDataSourceDiscovery(\n-    fs::FileSystem* filesystem, std::string base_dir, std::vector<fs::FileStats> files,\n-    std::shared_ptr<FileFormat> format)\n+    fs::FileSystem* filesystem, std::vector<fs::FileStats> files,\n+    std::shared_ptr<FileFormat> format, FileSystemDiscoveryOptions options)\n     : fs_(filesystem),\n-      base_dir_(std::move(base_dir)),\n       files_(std::move(files)),\n-      format_(std::move(format)) {}\n+      format_(std::move(format)),\n+      options_(std::move(options)) {}\n \n-Status FileSystemDataSourceDiscovery::Make(fs::FileSystem* filesystem,\n-                                           std::string base_dir,\n-                                           std::vector<fs::FileStats> files,\n-                                           std::shared_ptr<FileFormat> format,\n-                                           std::shared_ptr<DataSourceDiscovery>* out) {\n-  out->reset(\n-      new FileSystemDataSourceDiscovery(filesystem, std::move(base_dir), files, format));\n-  return Status::OK();\n+bool FilterFileByPrefix(const std::vector<std::string>& prefixes,\n+                        const fs::FileStats& file) {\n+  if (!file.IsFile()) return true;\n+\n+  auto dir_base = fs::internal::GetAbstractPathParent(file.path());\n+  util::string_view basename{dir_base.second};\n+\n+  auto matches_prefix = [&basename](const std::string& prefix) -> bool {\n+    return !prefix.empty() && basename.starts_with(prefix);\n+  };\n+\n+  return std::none_of(prefixes.cbegin(), prefixes.cend(), matches_prefix);\n+}\n+\n+Result<bool> FilterFileBySupportedFormat(const FileFormat& format,\n+                                         const fs::FileStats& file, fs::FileSystem* fs) {\n+  if (!file.IsFile()) return true;\n+\n+  bool supported = false;\n+  RETURN_NOT_OK(format.IsSupported(FileSource(file.path(), fs), &supported));\n+\n+  return supported;\n }\n \n Status FileSystemDataSourceDiscovery::Make(fs::FileSystem* filesystem,\n                                            std::vector<fs::FileStats> files,\n                                            std::shared_ptr<FileFormat> format,\n+                                           FileSystemDiscoveryOptions options,\n                                            std::shared_ptr<DataSourceDiscovery>* out) {\n-  return Make(filesystem, \"\", std::move(files), std::move(format), out);\n+  DCHECK_NE(format, nullptr);\n+\n+  bool has_prefixes = !options.ignore_prefixes.empty();\n+  std::vector<fs::FileStats> filtered;\n+  for (const auto& stat : files) {\n+    if (has_prefixes && !FilterFileByPrefix(options.ignore_prefixes, stat)) continue;\n \n Review comment:\n   nit: I'd prefer the `file.IsFile()` checks be moved here to the top of the loop body, then rename `FilterFileByPrefix(vector<string>, FileStat) -> StartsWithAnyOf(vector<string>, string)` and inline `FilterFileBySupportedFormat`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T16:12:32.256+0000",
                    "updated": "2019-11-14T16:12:32.256+0000",
                    "started": "2019-11-14T16:12:32.255+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343505",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/343506",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5811: ARROW-7061: [C++][Dataset] Add ignore file options to FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r346406203\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -237,6 +237,29 @@ class ParquetScanTaskIterator {\n   std::shared_ptr<parquet::arrow::FileReader> reader_;\n };\n \n+Status ParquetFileFormat::IsSupported(const FileSource& source, bool* supported) const {\n+  auto pool = default_memory_pool();\n+\n+  *supported = false;\n+\n+  std::unique_ptr<parquet::ParquetFileReader> reader;\n+  auto status = OpenReader(source, pool, &reader);\n \n Review comment:\n   Alternatively, extract `parquet::HasValidFooter`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T16:13:20.539+0000",
                    "updated": "2019-11-14T16:13:20.539+0000",
                    "started": "2019-11-14T16:13:20.538+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343506",
                    "issueId": "13266211"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/worklog/343509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5811: ARROW-7061: [C++][Dataset] Add ignore file options to FileSystemDataSourceDiscovery\nURL: https://github.com/apache/arrow/pull/5811#discussion_r346411400\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/discovery.cc\n ##########\n @@ -28,43 +28,74 @@\n #include \"arrow/dataset/partition.h\"\n #include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/filesystem/path_tree.h\"\n+#include \"arrow/filesystem/path_util.h\"\n #include \"arrow/status.h\"\n \n namespace arrow {\n namespace dataset {\n \n FileSystemDataSourceDiscovery::FileSystemDataSourceDiscovery(\n-    fs::FileSystem* filesystem, std::string base_dir, std::vector<fs::FileStats> files,\n-    std::shared_ptr<FileFormat> format)\n+    fs::FileSystem* filesystem, std::vector<fs::FileStats> files,\n+    std::shared_ptr<FileFormat> format, FileSystemDiscoveryOptions options)\n     : fs_(filesystem),\n-      base_dir_(std::move(base_dir)),\n       files_(std::move(files)),\n-      format_(std::move(format)) {}\n+      format_(std::move(format)),\n+      options_(std::move(options)) {}\n+\n+std::vector<fs::FileStats> FilterFilesByPrefix(const std::vector<std::string>& prefixes,\n+                                               std::vector<fs::FileStats> files) {\n+  std::vector<fs::FileStats> filtered;\n+  auto matches_prefix = [&prefixes](const fs::FileStats& file) -> bool {\n+    // Ignore non-file.\n+    if (!file.IsFile()) return true;\n+\n+    auto dir_base = fs::internal::GetAbstractPathParent(file.path());\n+    util::string_view basename{dir_base.second};\n+\n+    auto has_prefix = [&basename](const std::string& prefix) -> bool {\n+      return !prefix.empty() && basename.starts_with(prefix);\n+    };\n+\n+    return !std::any_of(prefixes.cbegin(), prefixes.cend(), has_prefix);\n+  };\n+\n+  for (const auto& stat : files) {\n+    if (matches_prefix(stat)) {\n+      filtered.push_back(stat);\n+    }\n+  }\n \n-Status FileSystemDataSourceDiscovery::Make(fs::FileSystem* filesystem,\n-                                           std::string base_dir,\n-                                           std::vector<fs::FileStats> files,\n-                                           std::shared_ptr<FileFormat> format,\n-                                           std::shared_ptr<DataSourceDiscovery>* out) {\n-  out->reset(\n-      new FileSystemDataSourceDiscovery(filesystem, std::move(base_dir), files, format));\n-  return Status::OK();\n+  return filtered;\n }\n \n Status FileSystemDataSourceDiscovery::Make(fs::FileSystem* filesystem,\n                                            std::vector<fs::FileStats> files,\n                                            std::shared_ptr<FileFormat> format,\n+                                           FileSystemDiscoveryOptions options,\n                                            std::shared_ptr<DataSourceDiscovery>* out) {\n-  return Make(filesystem, \"\", std::move(files), std::move(format), out);\n+  const auto& prefixes = options.ignore_prefixes;\n+  std::vector<fs::FileStats> filtered =\n+      prefixes.empty() ? std::move(files) : FilterFilesByPrefix(prefixes, files);\n+\n+  out->reset(new FileSystemDataSourceDiscovery(filesystem, std::move(filtered),\n+                                               std::move(format), std::move(options)));\n \n Review comment:\n   Do you want me to clarify the comment? This is now part of options and only scoped to the partition_base_dir.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-14T16:22:08.584+0000",
                    "updated": "2019-11-14T16:22:08.584+0000",
                    "started": "2019-11-14T16:22:08.584+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "343509",
                    "issueId": "13266211"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 17400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@301398b6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36b84c2c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@100a1c9e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6427fb9f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@699b6c0f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@52fc38a7[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12d2308a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4972da4c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b3b2c79[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@48b11ab9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4be43545[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@141b36cf[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 17400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 15 20:08:38 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-11-15T20:08:38.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7061/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2019-11-04T23:11:54.000+0000",
        "updated": "2020-04-10T15:32:33.000+0000",
        "timeoriginalestimate": null,
        "description": "I got {{Invalid parquet file. Corrupt footer.}} trying to read real data. Turned out it was because I had opened the directory in macOS Finder and it had added the junk .DS_Store files. Once I deleted them, the Dataset created fine. \r\n\r\nIf we're creating a DataSource with Parquet files, we should ignore any non-Parquet files we encounter when scanning.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 17400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] FileSystemDiscovery with ParquetFileFormat should ignore files that aren't Parquet",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/comment/16967516",
                    "id": "16967516",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I started adding features to fs::Selector, notably max depth recursion,\u00a0 I intended to add a filter function option to the selector but [~apitrou]\u00a0objected lightly, arguing that if this is desired, the user could filter the explicit list of FileStats returned by the selector. My intention was that `fs::Selector` could mimick the powerful and ubiquitious [find(1)|[http://man7.org/linux/man-pages/man1/find.1.html]]\u00a0selection interface.\r\n\r\nHence, this is why FileSystemDataSourceDiscovery supports both option (an explicit list of FileStats or a Selector).\r\n\r\nIdeally, we want the \"it-just-works\" feeling, some suggestions:\r\n * Detect failures early, e.g. in `FileSystemBasedDataSource::Make` should we scan all files and detect if they can be parsed by the format driver? How should we propagate the failure, ignore file and warn, or abort via failure? The failure to parse the file is implicitly done by `Inspect` call.\r\n * Should we filter by file extension by default (if the user is passing a Selector and not an explicit list of FileStats). At first it seems very convenient, but it can lead to situation of silently ignoring important files just because of implicit naming convention.\r\n * Should we settle that the `Selector` constructor is the it-just-works route, and the explicit vector<FileStats> is the power user route?\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-11-05T13:10:49.741+0000",
                    "updated": "2019-11-05T13:12:28.079+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/comment/16967584",
                    "id": "16967584",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I'm not necessarily sure this needs to be about the Selector class's functionality. My current problem can be solved without filtering by file extension--for Parquet, doesn't the file start with a magic byte/number? When inspecting Parquet files, ignore files that aren't Parquet. \r\n\r\nSure, it gets tricker when you add CSV, and maybe then you want to filter by file extension. \r\n\r\nStepping back, if using Selector doesn't just-work in some form, if the only way I can guarantee that the discovery class won't choke is to walk the file system myself first and verify that all files are Parquet files, then there's no reason to ever use it--I'd always send an explicit list of files. So I think the Selector path needs to be a bit smarter. But whether or not that requires adding features to fs::Selector, I don't have an opinion on that.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-11-05T14:56:52.298+0000",
                    "updated": "2019-11-05T14:56:52.298+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/comment/16967716",
                    "id": "16967716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "See \r\n\r\nhttps://github.com/apache/arrow/blob/master/python/pyarrow/parquet.py#L863\r\n\r\nI think you should automatically exclude files starting with \".\" or \"_\" from consideration by default",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-11-05T17:44:55.631+0000",
                    "updated": "2019-11-05T17:44:55.631+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266211/comment/16975372",
                    "id": "16975372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5811\n[https://github.com/apache/arrow/pull/5811]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-11-15T20:08:38.468+0000",
                    "updated": "2019-11-15T20:08:38.468+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0892w:",
        "customfield_12314139": null
    }
}