{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13407982",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982",
    "key": "ARROW-14441",
    "fields": {
        "parent": {
            "id": "13390911",
            "key": "ARROW-13407",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13390911",
            "fields": {
                "summary": "[Documentation] Documentation Improvements",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
            "name": "thisisnic",
            "key": "thisisnic",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
            },
            "displayName": "Nicola Crane",
            "active": true,
            "timeZone": "Africa/Casablanca"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
            "name": "jonkeane",
            "key": "jonkeane",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
            },
            "displayName": "Jonathan Keane",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
            "name": "jonkeane",
            "key": "jonkeane",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
            },
            "displayName": "Jonathan Keane",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14441/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/681560",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#issuecomment-968999058\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-15T15:04:27.113+0000",
                    "updated": "2021-11-15T15:04:27.113+0000",
                    "started": "2021-11-15T15:04:27.113+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "681560",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/682722",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r751394439\n\n\n\n##########\nFile path: r/vignettes/developing.Rmd\n##########\n@@ -38,567 +38,31 @@ set -e\n set -x\n ```\n \n-If you're looking to contribute to arrow, this vignette can help you set up a development environment that will enable you to write code and run tests locally. It outlines:\n+If you're interested in contributing to arrow, this vignette explains our approach, \n+at a high-level.  If you're looking for more detailed content, you may want to \n+look at one of the following links:\n \n-* how to build the components that make up the Arrow project and R package\n-* workflows that developers use\n-* some common troubleshooting steps and solutions\n+* [setting up a development environment and building the components that make up the Arrow project and R package](https://arrow.apache.org/docs/r/articles/developers/setup.html)\n+* [common Arrow dev workflow tasks](https://arrow.apache.org/docs/r/articles/developers/workflow.html)\n+* [running R with the C++ debugger attached](https://arrow.apache.org/docs/r/articles/developers/debugging.html)\n \n-This document is intended only for **developers** of Apache Arrow or the Arrow R package. R package users do not need to do any of this setup. If you're looking for how to install Arrow, see [the instructions in the readme](https://arrow.apache.org/docs/r/#installation).\n+# Approach to implementing functionality\n \n-This document is a work in progress and will grow and change as the Apache Arrow project grows and changes. We have tried to make these steps as robust as possible (in fact, we even test exactly these instructions on our nightly CI to ensure they don't become stale!), but custom configurations might conflict with these instructions and there are differences of opinion across developers about how to set up development environments like this.\n+Our general philosophy when implementing functionality is to match to existing \n+R function signatures which may be familiar to users, whilst exposing any \n+additional functionality available via Arrow.  The intention is to allow users \n+to be able to use their existing code with minimal changes, or new code or \n+approaches to learn.\n \n-We welcome any feedback you have about things that are confusing or additions you would like to see here - please [report an issue](https://issues.apache.org/jira/projects/ARROW/issues) if you have any suggestions or requests.\n+There are a number of ways in which we do this:\n \n-# Developer environment setup\n+* when implementing a function with an R equivalent, support the arguments \n+available in R version as much as possible - use the original parameter names \n+and translate to the arrow parameter name inside the function\n \n-## R-only {.tabset}\n+* if there are arrow parameters which do not exist in the R function, allow the\n+user to pass in those options through too\n \n-Windows and macOS users who wish to contribute to the R package and\n-don't need to alter libarrow (Arrow's C++ library) may be able to obtain a\n-recent version of the library without building from source.\n-\n-### Linux\n-\n-On Linux, you can download a .zip file containing libarrow from the\n-nightly repository.\n-\n-To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n-\n-```\n-nightly <- s3_bucket(\"arrow-r-nightly\")\n-nightly$ls(\"libarrow/bin\")\n-```\n-Version numbers in that repository correspond to dates.\n-\n-You'll need to create a `libarrow` directory inside the R package directory and unzip the zip file containing the compiled libarrow binary files into it.\n-\n-### macOS\n-On macOS, you can install libarrow using [Homebrew](https://brew.sh/):\n-\n-```bash\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n-\n-### Windows\n-\n-On Windows, you can download a .zip file containing libarrow from the nightly repository.\n-\n-To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n-\n-```\n-nightly <- s3_bucket(\"arrow-r-nightly\")\n-nightly$ls(\"libarrow/bin\")\n-```\n-Version numbers in that repository correspond to dates.\n-\n-You can set the `RWINLIB_LOCAL` environment variable to point to the zip file containing libarrow before installing the arrow R package.\n-\n-\n-## R and C++\n-\n-If you need to alter both libarrow and the R package code, or if you can't get a binary version of the latest libarrow elsewhere, you'll need to build it from source. This section discusses how to set up a C++ libarrow build configured to work with the R package. For more general resources, see the [Arrow C++ developer guide](https://arrow.apache.org/docs/developers/cpp/building.html).\n-\n-There are five major steps to the process.\n-\n-### Step 1 - Install dependencies {.tabset}\n-\n-When building libarrow, by default, system dependencies will be used if suitable versions are found.  If system dependencies are not present, libarrow will build them during its own build process. The only dependencies that you need to install _outside_ of the build process are [cmake](https://cmake.org/) (for configuring the build) and [openssl](https://www.openssl.org/) if you are building with S3 support.\n-\n-For a faster build, you may choose to pre-install more C++ library dependencies (such as [lz4](http://lz4.github.io/lz4/), [zstd](https://facebook.github.io/zstd/), etc.) on the system  so that they don't need to be built from source in the libarrow build.\n-\n-#### Ubuntu\n-```{bash, save=run & ubuntu}\n-sudo apt install -y cmake libcurl4-openssl-dev libssl-dev\n-```\n-\n-#### macOS\n-```{bash, save=run & macos}\n-brew install cmake openssl\n-```\n-\n-#### Windows\n-\n-Currently, the R package cannot be made to work with a local libarrow build. This will be resolved in a future release.\n-\n-### Step 2 - Configure the libarrow build\n-\n-We recommend that you configure libarrow to be built to a user-level directory rather than a system directory for your development work.  This is so that the development version you are using doesn't overwrite a released version of libarrow you may already have installed, and so that you are also able work with more than one version of libarrow (by using different `ARROW_HOME` directories for the different versions).\n-\n-In the example below, libarrow is installed to a directory called `dist` that has the same parent directory as the `arrow` checkout.  Your installation of the Arrow R package can point to any directory with any name, though we recommend *not* placing it inside of the `arrow` git checkout directory as unwanted changes could stop it working properly.\n-\n-```{bash, save=run & !sys_install}\n-export ARROW_HOME=$(pwd)/dist\n-mkdir $ARROW_HOME\n-```\n-\n-_Special instructions on Linux:_ You will need to set `LD_LIBRARY_PATH` to the `lib` directory that is under where you set `$ARROW_HOME`, before launching R and using arrow. One way to do this is to add it to your profile (we use `~/.bash_profile` here, but you might need to put this in a different file depending on your setup, e.g. if you use a shell other than `bash`). On macOS you do not need to do this because the macOS shared library paths are hardcoded to their locations during build time.\n-\n-```{bash, save=run & ubuntu & !sys_install}\n-export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\n-echo \"export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\" >> ~/.bash_profile\n-```\n-\n-Start by navigating in a terminal to the `arrow` repository. You will need to create a directory into which the C++ build will put its contents. We recommend that you make a `build` directory inside of the `cpp` directory of the Arrow git repository (it is git-ignored, so you won't accidentally check it in). Next, change directories to be inside `cpp/build`:\n-\n-```{bash, save=run & !sys_install}\n-pushd arrow\n-mkdir -p cpp/build\n-pushd cpp/build\n-```\n-\n-You'll first call `cmake` to configure the build and then `make install`. For the R package, you'll need to enable several features in libarrow using `-D` flags:\n-\n-```{bash, save=run & !sys_install}\n-cmake \\\n-  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n-  -DCMAKE_INSTALL_LIBDIR=lib \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  ..\n-```\n-\n-`..` refers to the C++ source directory: you're in `cpp/build` and the source is in `cpp`.\n-\n-#### Enabling more Arrow features\n-\n-To enable optional features including: S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags to your call to `cmake` (the trailing `\\` makes them easier to paste into a bash shell on a new line):\n-\n-```bash\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_S3=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n-\n-Other flags that may be useful:\n-\n-* `-DBoost_SOURCE=BUNDLED` and `-DThrift_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n-\n-* `-DCMAKE_BUILD_TYPE=debug` or `-DCMAKE_BUILD_TYPE=relwithdebinfo` can be useful for debugging. You probably don't want to do this generally because a debug build is much slower at runtime than the default `release` build.\n-\n-_Note_ `cmake` is particularly sensitive to whitespacing, if you see errors, check that you don't have any errant whitespace.\n-\n-### Step 3 - Building libarrow\n-\n-You can add `-j#` between `make` and `install` here too to speed up compilation by running in parallel (where `#` is the number of cores you have available).\n-\n-```{bash, save=run & !(sys_install & ubuntu)}\n-make -j8 install\n-```\n-\n-### Step 4 - Build the Arrow R package\n-\n-Once you've built libarrow, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n-\n-```{bash, save=run}\n-popd # To go back to the root directory of the project, from cpp/build\n-pushd r\n-R -e 'install.packages(\"remotes\"); remotes::install_deps(dependencies = TRUE)'\n-R CMD INSTALL .\n-```\n-\n-#### Compilation flags\n-\n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n-\n-```bash\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n-```\n-\n-#### Recompiling the C++ code\n-\n-With the setup described here, you should not need to rebuild the Arrow library or even the C++ source in the R package as you iterate and work on the R package. The only time those should need to be rebuilt is if you have changed the C++ in the R package (and even then, `R CMD INSTALL .` should only need to recompile the files that have changed) _or_ if the libarrow C++ has changed and there is a mismatch between libarrow and the R package. If you find yourself rebuilding either or both each time you install the package or run tests, something is probably wrong with your set up.\n-\n-<details>\n-<summary>For a full build: a `cmake` command with all of the R-relevant optional dependencies turned on. Development with other languages might require different flags as well. For example, to develop Python, you would need to also add `-DARROW_PYTHON=ON` (though all of the other flags used for Python are already included here).</summary>\n-<p>\n-\n-```bash\n-cmake \\\n-  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n-  -DCMAKE_INSTALL_LIBDIR=lib \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DARROW_S3=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-  ..\n-```\n-</p>\n-</details>\n-\n-## Installing a version of the R package with a specific git reference\n-\n-If you need an arrow installation from a specific repository or git reference, on most platforms except Windows, you can run:\n-\n-```{r}\n-remotes::install_github(\"apache/arrow/r\", build = FALSE)\n-```\n-\n-The `build = FALSE` argument is important so that the installation can access the\n-C++ source in the `cpp/` directory in `apache/arrow`.\n-\n-As with other installation methods, setting the environment variables `LIBARROW_MINIMAL=false` and `ARROW_R_DEV=true` will provide a more full-featured version of Arrow and provide more verbose output, respectively.\n-\n-For example, to install from the (fictional) branch `bugfix` from `apache/arrow` you could run:\n-\n-```r\n-Sys.setenv(LIBARROW_MINIMAL=\"false\")\n-remotes::install_github(\"apache/arrow/r@bugfix\", build = FALSE)\n-```\n-\n-Developers may wish to use this method of installing a specific commit\n-separate from another Arrow development environment or system installation\n-(e.g. we use this in [arrowbench](https://github.com/ursacomputing/arrowbench)\n-to install development versions of libarrow isolated from the system install). If\n-you already have libarrow installed system-wide, you may need to set\n-some additional variables in order to isolate this build from your system libraries:\n-\n-* Setting the environment variable `FORCE_BUNDLED_BUILD` to `true` will skip the `pkg-config` search for libarrow and attempt to build from the same source at the repository+ref given.\n-\n-* You may also need to set the Makevars `CPPFLAGS` and `LDFLAGS` to `\"\"` in order to prevent the installation process from attempting to link to already installed system versions of libarrow. One way to do this temporarily is wrapping your `remotes::install_github()` call like so:\n-```{r}\n-withr::with_makevars(list(CPPFLAGS = \"\", LDFLAGS = \"\"), remotes::install_github(...))\n-```\n-\n-# Common developer workflow tasks\n-\n-The `arrow/r` directory contains a `Makefile` to help with some common tasks from the command line (e.g. `make test`, `make doc`, `make clean`, etc.).\n-\n-## Loading arrow\n-\n-You can load the R package via `devtools::load_all()`.\n-\n-## Rebuilding the documentation\n-\n-The R documentation uses the [`@examplesIf`](https://roxygen2.r-lib.org/articles/rd.html#functions) tag introduced in `roxygen2` version 7.1.1.9001, which hasn't yet been released on CRAN at the time of writing.  If you are making changes which require updating the documentation, please install the development version of `roxygen2` from GitHub.\n-\n-```{r}\n-remotes::install_github(\"r-lib/roxygen2\")\n-```\n-\n-You can use `devtools::document()` and `pkgdown::build_site()` to rebuild the documentation and preview the results.\n-\n-```r\n-# Update roxygen documentation\n-devtools::document()\n-\n-# To preview the documentation website\n-pkgdown::build_site(preview=TRUE)\n-```\n-\n-## Styling and linting\n-\n-### R code\n-\n-The R code in the package follows [the tidyverse style](https://style.tidyverse.org/). On PR submission (and on pushes) our CI will run linting and will flag possible errors on the pull request with annotations.\n-\n-To run the [lintr](https://github.com/jimhester/lintr) locally, install the lintr package (note, we currently use a fork that includes fixes not yet accepted upstream, see how lintr is being installed in the file `ci/docker/linux-apt-lint.dockerfile` for the current status) and then run\n-\n-```{r}\n-lintr::lint_package(\"arrow/r\")\n-```\n-\n-You can automatically change the formatting of the code in the package using the [styler](https://styler.r-lib.org/) package. There are two ways to do this:\n-\n-1. Use the comment bot to do this automatically with the command `@github-actions autotune` on a PR, and commit it back to the branch.\n-\n-2. Run the styler locally either via Makefile commands:\n-\n-```bash\n-make style # (for only the files changed)\n-make style-all # (for all files)\n-```\n-\n-or in R:\n-\n-```{r}\n-# note the two excluded files which should not be styled\n-styler::style_pkg(exclude_files = c(\"tests/testthat/latin1.R\", \"data-raw/codegen.R\"))\n-```\n-\n-The styler package will fix many styling errors, thought not all lintr errors are automatically fixable with styler. The list of files we intentionally do not style is in `r/.styler_excludes.R`.\n-\n-### C++ code\n-\n-The arrow package uses some customized tools on top of [cpp11](https://cpp11.r-lib.org/) to prepare its\n-C++ code in `src/`. This is because there are some features that are only enabled\n-and built conditionally during build time. If you change C++ code in the R\n-package, you will need to set the `ARROW_R_DEV` environment variable to `true`\n-(optionally, add it to your `~/.Renviron` file to persist across sessions) so\n-that the `data-raw/codegen.R` file is used for code generation. The `Makefile`\n-commands also handles this automatically.\n-\n-We use Google C++ style in our C++ code. The easiest way to accomplish this is\n-use an editors/IDE that formats your code for you. Many popular editors/IDEs\n-have support for running `clang-format` on C++ files when you save them.\n-Installing/enabling the appropriate plugin may save you much frustration.\n-\n-Check for style errors with\n-\n-```bash\n-./lint.sh\n-```\n-\n-Fix any style issues before committing with\n-\n-```bash\n-./lint.sh --fix\n-```\n-\n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn't found, you can explicitly provide the path to it like:\n-\n-```bash\n-CLANG_FORMAT=$(which clang-format-8) ./lint.sh\n-```\n-\n-On macOS, you can get this by installing LLVM via Homebrew and running the script as:\n-```bash\n-CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh\n-```\n-\n-_Note_ that the lint script requires Python 3 and the Python dependencies\n-(note that `cmake_format is pinned to a specific version):\n-\n-* autopep8\n-* flake8\n-* cmake_format==0.5.2\n-\n-## Running tests\n-\n-Tests can be run either using `devtools::test()` or the Makefile alternative.\n-\n-```r\n-# Run the test suite, optionally filtering file names\n-devtools::test(filter=\"^regexp$\")\n-\n-# or the Makefile alternative from the arrow/r directory in a shell:\n-make test file=regexp\n-```\n-\n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n-\n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=true`\n-\n-* Some tests are disabled unless `ARROW_R_DEV=true`\n-\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=true`\n-\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n-\n-## Running checks\n-\n-You can run package checks by using `devtools::check()` and check test coverage\n-with `covr::package_coverage()`.\n-\n-```r\n-# All package checks\n-devtools::check()\n-\n-# See test coverage statistics\n-covr::report()\n-covr::package_coverage()\n-```\n-\n-For full package validation, you can run the following commands from a terminal.\n-\n-```\n-R CMD build .\n-R CMD check arrow_*.tar.gz --as-cran\n-```\n-\n-\n-## Running additional CI checks\n-\n-On a pull request, there are some actions you can trigger by commenting on the\n-PR. We have additional CI checks that run nightly and can be requested on demand\n-using an internal tool called\n-[crossbow](https://arrow.apache.org/docs/developers/crossbow.html).\n-A few important GitHub comment commands are shown below.\n-\n-#### Run all extended R CI tasks\n-```\n-@github-actions crossbow submit -g r\n-```\n-\n-This runs each of the R-related CI tasks.\n-\n-#### Run a specific task\n-```\n-@github-actions crossbow submit {task-name}\n-```\n-\n-See the `r:` group definition near the beginning of the [crossbow configuration](https://github.com/apache/arrow/blob/master/dev/tasks/tasks.yml)\n-for a list of glob expression patterns that match names of items in the `tasks:`\n-list below it.\n-\n-#### Run linting and documentation building tasks\n-\n-```\n-@github-actions autotune\n-```\n-\n-This will run and fix lint C++ linting errors, run R documentation (among other\n-cleanup tasks), run styler on any changed R code, and commit the resulting\n-updates to the branch.\n-\n-# Summary of environment variables\n-\n-* See the user-facing [Install vignette](install.html) for a large number of\n-  environment variables that determine how the build works and what features\n-  get built.\n-* `TEST_OFFLINE_BUILD`: When set to `true`, the build script will not download\n-  prebuilt the C++ library binary.\n-  It will turn off any features that require a download, unless they're available\n-  in the `tools/cpp/thirdparty/download/` subfolder of the tar.gz file.\n-  `create_package_with_all_dependencies()` creates that subfolder.\n-  Regardless of this flag's value, `cmake` will be downloaded if it's unavailable.\n-* `TEST_R_WITHOUT_LIBARROW`: When set to `true`, skip tests that would require\n-  the C++ Arrow library (that is, almost everything).\n-\n-# Troubleshooting\n-\n-Note that after any change to libarrow, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to libarrow source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n-\n-## Arrow library - R package mismatches\n-\n-If libarrow and the R package have diverged, you will see errors like:\n-\n-```\n-Error: package or namespace load failed for \u2018arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n- unable to load shared object '/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so, 6): Symbol not found: __ZN5arrow2io16RandomAccessFile9ReadAsyncERKNS0_9IOContextExx\n-  Referenced from: /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so\n-  Expected in: flat namespace\n- in /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so\n-Error: loading failed\n-Execution halted\n-ERROR: loading failed\n-```\n-\n-To resolve this, try [rebuilding the Arrow library](#step-3-building-arrow).\n-\n-## Multiple versions of libarrow\n-\n-If you are installing from a user-level directory, and you already have a\n-previous installation of libarrow in a system directory, you get you may get\n-errors like the following when you install the R package:\n-\n-```\n-Error: package or namespace load failed for \u2018arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n- unable to load shared object '/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: /usr/local/lib/libarrow.400.dylib\n-  Referenced from: /usr/local/lib/libparquet.400.dylib\n-  Reason: image not found\n-```\n-\n-If this happens, you need to make sure that you don't let R link to your system\n-library when building arrow. You can do this a number of different ways:\n-\n-* Setting the `MAKEFLAGS` environment variable to `\"LDFLAGS=\"` (see below for an example) this is the recommended way to accomplish this\n-* Using {withr}'s `with_makevars(list(LDFLAGS = \"\"), ...)`\n-* adding `LDFLAGS=` to your `~/.R/Makevars` file (the least recommended way, though it is a common debugging approach suggested online)\n-\n-```{bash, save=run & !sys_install & macos, hide=TRUE}\n-# Setup troubleshooting section\n-# install a system-level arrow on macOS\n-brew install apache-arrow\n-```\n-\n-\n-```{bash, save=run & !sys_install & ubuntu, hide=TRUE}\n-# Setup troubleshooting section\n-# install a system-level arrow on Ubuntu\n-sudo apt update\n-sudo apt install -y -V ca-certificates lsb-release wget\n-wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb\n-sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb\n-sudo apt update\n-sudo apt install -y -V libarrow-dev\n-```\n-\n-```{bash, save=run & !sys_install & macos}\n-MAKEFLAGS=\"LDFLAGS=\" R CMD INSTALL .\n-```\n-\n-\n-## `rpath` issues\n-\n-If the package fails to install/load with an error like this:\n-\n-```\n-  ** testing if installed package can be loaded from temporary location\n-  Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-  unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-```\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternatively, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g. `export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n-\n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you've previously installed the\n-libraries and want to upgrade the R package, you'll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html).\n-\n-## Other installation issues\n-\n-There are a number of scripts that are triggered when the arrow R package is installed. For package users who are not interacting with the underlying code, these should all just work without configuration and pull in the most complete pieces (e.g. official binaries that we host). However, knowing about these scripts can help package developers troubleshoot if things go wrong in them or things go wrong in an install.  See [the installation vignette](./install.html#how-dependencies-are-resolved) for more information.\n+* where necessary add extra arguments to the function signature for features \n+that don't exist in R but do in Arrow (e.g. passing in a schema when reading a\n+CSV dataset)\n\nReview comment:\n       I think this vignette needs more after here but I don't know exactly what.  Maybe something on writing bindings between compute kernels and R functions? Or is that a bit too specific?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-17T16:07:58.431+0000",
                    "updated": "2021-11-17T16:07:58.431+0000",
                    "started": "2021-11-17T16:07:58.431+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "682722",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/682951",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r751653354\n\n\n\n##########\nFile path: r/vignettes/developing.Rmd\n##########\n@@ -38,567 +38,31 @@ set -e\n set -x\n ```\n \n-If you're looking to contribute to arrow, this vignette can help you set up a development environment that will enable you to write code and run tests locally. It outlines:\n+If you're interested in contributing to arrow, this vignette explains our approach, \n+at a high-level.  If you're looking for more detailed content, you may want to \n+look at one of the following links:\n \n-* how to build the components that make up the Arrow project and R package\n-* workflows that developers use\n-* some common troubleshooting steps and solutions\n+* [setting up a development environment and building the components that make up the Arrow project and R package](https://arrow.apache.org/docs/r/articles/developers/setup.html)\n+* [common Arrow dev workflow tasks](https://arrow.apache.org/docs/r/articles/developers/workflow.html)\n+* [running R with the C++ debugger attached](https://arrow.apache.org/docs/r/articles/developers/debugging.html)\n\nReview comment:\n       I think these could be relative links:\r\n   ```suggestion\r\n   * [setting up a development environment and building the components that make up the Arrow project and R package](developers/setup.html)\r\n   * [common Arrow dev workflow tasks](developers/workflow.html)\r\n   * [running R with the C++ debugger attached](developers/debugging.html)\r\n   ```\n\n##########\nFile path: r/vignettes/developing.Rmd\n##########\n@@ -38,567 +38,31 @@ set -e\n set -x\n ```\n \n-If you're looking to contribute to arrow, this vignette can help you set up a development environment that will enable you to write code and run tests locally. It outlines:\n+If you're interested in contributing to arrow, this vignette explains our approach, \n+at a high-level.  If you're looking for more detailed content, you may want to \n+look at one of the following links:\n \n-* how to build the components that make up the Arrow project and R package\n-* workflows that developers use\n-* some common troubleshooting steps and solutions\n+* [setting up a development environment and building the components that make up the Arrow project and R package](https://arrow.apache.org/docs/r/articles/developers/setup.html)\n+* [common Arrow dev workflow tasks](https://arrow.apache.org/docs/r/articles/developers/workflow.html)\n+* [running R with the C++ debugger attached](https://arrow.apache.org/docs/r/articles/developers/debugging.html)\n \n-This document is intended only for **developers** of Apache Arrow or the Arrow R package. R package users do not need to do any of this setup. If you're looking for how to install Arrow, see [the instructions in the readme](https://arrow.apache.org/docs/r/#installation).\n+# Approach to implementing functionality\n \n-This document is a work in progress and will grow and change as the Apache Arrow project grows and changes. We have tried to make these steps as robust as possible (in fact, we even test exactly these instructions on our nightly CI to ensure they don't become stale!), but custom configurations might conflict with these instructions and there are differences of opinion across developers about how to set up development environments like this.\n+Our general philosophy when implementing functionality is to match to existing \n+R function signatures which may be familiar to users, whilst exposing any \n+additional functionality available via Arrow.  The intention is to allow users \n+to be able to use their existing code with minimal changes, or new code or \n+approaches to learn.\n \n-We welcome any feedback you have about things that are confusing or additions you would like to see here - please [report an issue](https://issues.apache.org/jira/projects/ARROW/issues) if you have any suggestions or requests.\n+There are a number of ways in which we do this:\n \n-# Developer environment setup\n+* when implementing a function with an R equivalent, support the arguments \n+available in R version as much as possible - use the original parameter names \n+and translate to the arrow parameter name inside the function\n \n-## R-only {.tabset}\n+* if there are arrow parameters which do not exist in the R function, allow the\n+user to pass in those options through too\n \n-Windows and macOS users who wish to contribute to the R package and\n-don't need to alter libarrow (Arrow's C++ library) may be able to obtain a\n-recent version of the library without building from source.\n-\n-### Linux\n-\n-On Linux, you can download a .zip file containing libarrow from the\n-nightly repository.\n-\n-To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n-\n-```\n-nightly <- s3_bucket(\"arrow-r-nightly\")\n-nightly$ls(\"libarrow/bin\")\n-```\n-Version numbers in that repository correspond to dates.\n-\n-You'll need to create a `libarrow` directory inside the R package directory and unzip the zip file containing the compiled libarrow binary files into it.\n-\n-### macOS\n-On macOS, you can install libarrow using [Homebrew](https://brew.sh/):\n-\n-```bash\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n-\n-### Windows\n-\n-On Windows, you can download a .zip file containing libarrow from the nightly repository.\n-\n-To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n-\n-```\n-nightly <- s3_bucket(\"arrow-r-nightly\")\n-nightly$ls(\"libarrow/bin\")\n-```\n-Version numbers in that repository correspond to dates.\n-\n-You can set the `RWINLIB_LOCAL` environment variable to point to the zip file containing libarrow before installing the arrow R package.\n-\n-\n-## R and C++\n-\n-If you need to alter both libarrow and the R package code, or if you can't get a binary version of the latest libarrow elsewhere, you'll need to build it from source. This section discusses how to set up a C++ libarrow build configured to work with the R package. For more general resources, see the [Arrow C++ developer guide](https://arrow.apache.org/docs/developers/cpp/building.html).\n-\n-There are five major steps to the process.\n-\n-### Step 1 - Install dependencies {.tabset}\n-\n-When building libarrow, by default, system dependencies will be used if suitable versions are found.  If system dependencies are not present, libarrow will build them during its own build process. The only dependencies that you need to install _outside_ of the build process are [cmake](https://cmake.org/) (for configuring the build) and [openssl](https://www.openssl.org/) if you are building with S3 support.\n-\n-For a faster build, you may choose to pre-install more C++ library dependencies (such as [lz4](http://lz4.github.io/lz4/), [zstd](https://facebook.github.io/zstd/), etc.) on the system  so that they don't need to be built from source in the libarrow build.\n-\n-#### Ubuntu\n-```{bash, save=run & ubuntu}\n-sudo apt install -y cmake libcurl4-openssl-dev libssl-dev\n-```\n-\n-#### macOS\n-```{bash, save=run & macos}\n-brew install cmake openssl\n-```\n-\n-#### Windows\n-\n-Currently, the R package cannot be made to work with a local libarrow build. This will be resolved in a future release.\n-\n-### Step 2 - Configure the libarrow build\n-\n-We recommend that you configure libarrow to be built to a user-level directory rather than a system directory for your development work.  This is so that the development version you are using doesn't overwrite a released version of libarrow you may already have installed, and so that you are also able work with more than one version of libarrow (by using different `ARROW_HOME` directories for the different versions).\n-\n-In the example below, libarrow is installed to a directory called `dist` that has the same parent directory as the `arrow` checkout.  Your installation of the Arrow R package can point to any directory with any name, though we recommend *not* placing it inside of the `arrow` git checkout directory as unwanted changes could stop it working properly.\n-\n-```{bash, save=run & !sys_install}\n-export ARROW_HOME=$(pwd)/dist\n-mkdir $ARROW_HOME\n-```\n-\n-_Special instructions on Linux:_ You will need to set `LD_LIBRARY_PATH` to the `lib` directory that is under where you set `$ARROW_HOME`, before launching R and using arrow. One way to do this is to add it to your profile (we use `~/.bash_profile` here, but you might need to put this in a different file depending on your setup, e.g. if you use a shell other than `bash`). On macOS you do not need to do this because the macOS shared library paths are hardcoded to their locations during build time.\n-\n-```{bash, save=run & ubuntu & !sys_install}\n-export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\n-echo \"export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\" >> ~/.bash_profile\n-```\n-\n-Start by navigating in a terminal to the `arrow` repository. You will need to create a directory into which the C++ build will put its contents. We recommend that you make a `build` directory inside of the `cpp` directory of the Arrow git repository (it is git-ignored, so you won't accidentally check it in). Next, change directories to be inside `cpp/build`:\n-\n-```{bash, save=run & !sys_install}\n-pushd arrow\n-mkdir -p cpp/build\n-pushd cpp/build\n-```\n-\n-You'll first call `cmake` to configure the build and then `make install`. For the R package, you'll need to enable several features in libarrow using `-D` flags:\n-\n-```{bash, save=run & !sys_install}\n-cmake \\\n-  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n-  -DCMAKE_INSTALL_LIBDIR=lib \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  ..\n-```\n-\n-`..` refers to the C++ source directory: you're in `cpp/build` and the source is in `cpp`.\n-\n-#### Enabling more Arrow features\n-\n-To enable optional features including: S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags to your call to `cmake` (the trailing `\\` makes them easier to paste into a bash shell on a new line):\n-\n-```bash\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_S3=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n-\n-Other flags that may be useful:\n-\n-* `-DBoost_SOURCE=BUNDLED` and `-DThrift_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n-\n-* `-DCMAKE_BUILD_TYPE=debug` or `-DCMAKE_BUILD_TYPE=relwithdebinfo` can be useful for debugging. You probably don't want to do this generally because a debug build is much slower at runtime than the default `release` build.\n-\n-_Note_ `cmake` is particularly sensitive to whitespacing, if you see errors, check that you don't have any errant whitespace.\n-\n-### Step 3 - Building libarrow\n-\n-You can add `-j#` between `make` and `install` here too to speed up compilation by running in parallel (where `#` is the number of cores you have available).\n-\n-```{bash, save=run & !(sys_install & ubuntu)}\n-make -j8 install\n-```\n-\n-### Step 4 - Build the Arrow R package\n-\n-Once you've built libarrow, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n-\n-```{bash, save=run}\n-popd # To go back to the root directory of the project, from cpp/build\n-pushd r\n-R -e 'install.packages(\"remotes\"); remotes::install_deps(dependencies = TRUE)'\n-R CMD INSTALL .\n-```\n-\n-#### Compilation flags\n-\n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n-\n-```bash\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n-```\n-\n-#### Recompiling the C++ code\n-\n-With the setup described here, you should not need to rebuild the Arrow library or even the C++ source in the R package as you iterate and work on the R package. The only time those should need to be rebuilt is if you have changed the C++ in the R package (and even then, `R CMD INSTALL .` should only need to recompile the files that have changed) _or_ if the libarrow C++ has changed and there is a mismatch between libarrow and the R package. If you find yourself rebuilding either or both each time you install the package or run tests, something is probably wrong with your set up.\n-\n-<details>\n-<summary>For a full build: a `cmake` command with all of the R-relevant optional dependencies turned on. Development with other languages might require different flags as well. For example, to develop Python, you would need to also add `-DARROW_PYTHON=ON` (though all of the other flags used for Python are already included here).</summary>\n-<p>\n-\n-```bash\n-cmake \\\n-  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n-  -DCMAKE_INSTALL_LIBDIR=lib \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DARROW_S3=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-  ..\n-```\n-</p>\n-</details>\n-\n-## Installing a version of the R package with a specific git reference\n-\n-If you need an arrow installation from a specific repository or git reference, on most platforms except Windows, you can run:\n-\n-```{r}\n-remotes::install_github(\"apache/arrow/r\", build = FALSE)\n-```\n-\n-The `build = FALSE` argument is important so that the installation can access the\n-C++ source in the `cpp/` directory in `apache/arrow`.\n-\n-As with other installation methods, setting the environment variables `LIBARROW_MINIMAL=false` and `ARROW_R_DEV=true` will provide a more full-featured version of Arrow and provide more verbose output, respectively.\n-\n-For example, to install from the (fictional) branch `bugfix` from `apache/arrow` you could run:\n-\n-```r\n-Sys.setenv(LIBARROW_MINIMAL=\"false\")\n-remotes::install_github(\"apache/arrow/r@bugfix\", build = FALSE)\n-```\n-\n-Developers may wish to use this method of installing a specific commit\n-separate from another Arrow development environment or system installation\n-(e.g. we use this in [arrowbench](https://github.com/ursacomputing/arrowbench)\n-to install development versions of libarrow isolated from the system install). If\n-you already have libarrow installed system-wide, you may need to set\n-some additional variables in order to isolate this build from your system libraries:\n-\n-* Setting the environment variable `FORCE_BUNDLED_BUILD` to `true` will skip the `pkg-config` search for libarrow and attempt to build from the same source at the repository+ref given.\n-\n-* You may also need to set the Makevars `CPPFLAGS` and `LDFLAGS` to `\"\"` in order to prevent the installation process from attempting to link to already installed system versions of libarrow. One way to do this temporarily is wrapping your `remotes::install_github()` call like so:\n-```{r}\n-withr::with_makevars(list(CPPFLAGS = \"\", LDFLAGS = \"\"), remotes::install_github(...))\n-```\n-\n-# Common developer workflow tasks\n-\n-The `arrow/r` directory contains a `Makefile` to help with some common tasks from the command line (e.g. `make test`, `make doc`, `make clean`, etc.).\n-\n-## Loading arrow\n-\n-You can load the R package via `devtools::load_all()`.\n-\n-## Rebuilding the documentation\n-\n-The R documentation uses the [`@examplesIf`](https://roxygen2.r-lib.org/articles/rd.html#functions) tag introduced in `roxygen2` version 7.1.1.9001, which hasn't yet been released on CRAN at the time of writing.  If you are making changes which require updating the documentation, please install the development version of `roxygen2` from GitHub.\n-\n-```{r}\n-remotes::install_github(\"r-lib/roxygen2\")\n-```\n-\n-You can use `devtools::document()` and `pkgdown::build_site()` to rebuild the documentation and preview the results.\n-\n-```r\n-# Update roxygen documentation\n-devtools::document()\n-\n-# To preview the documentation website\n-pkgdown::build_site(preview=TRUE)\n-```\n-\n-## Styling and linting\n-\n-### R code\n-\n-The R code in the package follows [the tidyverse style](https://style.tidyverse.org/). On PR submission (and on pushes) our CI will run linting and will flag possible errors on the pull request with annotations.\n-\n-To run the [lintr](https://github.com/jimhester/lintr) locally, install the lintr package (note, we currently use a fork that includes fixes not yet accepted upstream, see how lintr is being installed in the file `ci/docker/linux-apt-lint.dockerfile` for the current status) and then run\n-\n-```{r}\n-lintr::lint_package(\"arrow/r\")\n-```\n-\n-You can automatically change the formatting of the code in the package using the [styler](https://styler.r-lib.org/) package. There are two ways to do this:\n-\n-1. Use the comment bot to do this automatically with the command `@github-actions autotune` on a PR, and commit it back to the branch.\n-\n-2. Run the styler locally either via Makefile commands:\n-\n-```bash\n-make style # (for only the files changed)\n-make style-all # (for all files)\n-```\n-\n-or in R:\n-\n-```{r}\n-# note the two excluded files which should not be styled\n-styler::style_pkg(exclude_files = c(\"tests/testthat/latin1.R\", \"data-raw/codegen.R\"))\n-```\n-\n-The styler package will fix many styling errors, thought not all lintr errors are automatically fixable with styler. The list of files we intentionally do not style is in `r/.styler_excludes.R`.\n-\n-### C++ code\n-\n-The arrow package uses some customized tools on top of [cpp11](https://cpp11.r-lib.org/) to prepare its\n-C++ code in `src/`. This is because there are some features that are only enabled\n-and built conditionally during build time. If you change C++ code in the R\n-package, you will need to set the `ARROW_R_DEV` environment variable to `true`\n-(optionally, add it to your `~/.Renviron` file to persist across sessions) so\n-that the `data-raw/codegen.R` file is used for code generation. The `Makefile`\n-commands also handles this automatically.\n-\n-We use Google C++ style in our C++ code. The easiest way to accomplish this is\n-use an editors/IDE that formats your code for you. Many popular editors/IDEs\n-have support for running `clang-format` on C++ files when you save them.\n-Installing/enabling the appropriate plugin may save you much frustration.\n-\n-Check for style errors with\n-\n-```bash\n-./lint.sh\n-```\n-\n-Fix any style issues before committing with\n-\n-```bash\n-./lint.sh --fix\n-```\n-\n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn't found, you can explicitly provide the path to it like:\n-\n-```bash\n-CLANG_FORMAT=$(which clang-format-8) ./lint.sh\n-```\n-\n-On macOS, you can get this by installing LLVM via Homebrew and running the script as:\n-```bash\n-CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh\n-```\n-\n-_Note_ that the lint script requires Python 3 and the Python dependencies\n-(note that `cmake_format is pinned to a specific version):\n-\n-* autopep8\n-* flake8\n-* cmake_format==0.5.2\n-\n-## Running tests\n-\n-Tests can be run either using `devtools::test()` or the Makefile alternative.\n-\n-```r\n-# Run the test suite, optionally filtering file names\n-devtools::test(filter=\"^regexp$\")\n-\n-# or the Makefile alternative from the arrow/r directory in a shell:\n-make test file=regexp\n-```\n-\n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n-\n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=true`\n-\n-* Some tests are disabled unless `ARROW_R_DEV=true`\n-\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=true`\n-\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n-\n-## Running checks\n-\n-You can run package checks by using `devtools::check()` and check test coverage\n-with `covr::package_coverage()`.\n-\n-```r\n-# All package checks\n-devtools::check()\n-\n-# See test coverage statistics\n-covr::report()\n-covr::package_coverage()\n-```\n-\n-For full package validation, you can run the following commands from a terminal.\n-\n-```\n-R CMD build .\n-R CMD check arrow_*.tar.gz --as-cran\n-```\n-\n-\n-## Running additional CI checks\n-\n-On a pull request, there are some actions you can trigger by commenting on the\n-PR. We have additional CI checks that run nightly and can be requested on demand\n-using an internal tool called\n-[crossbow](https://arrow.apache.org/docs/developers/crossbow.html).\n-A few important GitHub comment commands are shown below.\n-\n-#### Run all extended R CI tasks\n-```\n-@github-actions crossbow submit -g r\n-```\n-\n-This runs each of the R-related CI tasks.\n-\n-#### Run a specific task\n-```\n-@github-actions crossbow submit {task-name}\n-```\n-\n-See the `r:` group definition near the beginning of the [crossbow configuration](https://github.com/apache/arrow/blob/master/dev/tasks/tasks.yml)\n-for a list of glob expression patterns that match names of items in the `tasks:`\n-list below it.\n-\n-#### Run linting and documentation building tasks\n-\n-```\n-@github-actions autotune\n-```\n-\n-This will run and fix lint C++ linting errors, run R documentation (among other\n-cleanup tasks), run styler on any changed R code, and commit the resulting\n-updates to the branch.\n-\n-# Summary of environment variables\n-\n-* See the user-facing [Install vignette](install.html) for a large number of\n-  environment variables that determine how the build works and what features\n-  get built.\n-* `TEST_OFFLINE_BUILD`: When set to `true`, the build script will not download\n-  prebuilt the C++ library binary.\n-  It will turn off any features that require a download, unless they're available\n-  in the `tools/cpp/thirdparty/download/` subfolder of the tar.gz file.\n-  `create_package_with_all_dependencies()` creates that subfolder.\n-  Regardless of this flag's value, `cmake` will be downloaded if it's unavailable.\n-* `TEST_R_WITHOUT_LIBARROW`: When set to `true`, skip tests that would require\n-  the C++ Arrow library (that is, almost everything).\n-\n-# Troubleshooting\n-\n-Note that after any change to libarrow, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to libarrow source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n-\n-## Arrow library - R package mismatches\n-\n-If libarrow and the R package have diverged, you will see errors like:\n-\n-```\n-Error: package or namespace load failed for \u2018arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n- unable to load shared object '/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so, 6): Symbol not found: __ZN5arrow2io16RandomAccessFile9ReadAsyncERKNS0_9IOContextExx\n-  Referenced from: /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so\n-  Expected in: flat namespace\n- in /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so\n-Error: loading failed\n-Execution halted\n-ERROR: loading failed\n-```\n-\n-To resolve this, try [rebuilding the Arrow library](#step-3-building-arrow).\n-\n-## Multiple versions of libarrow\n-\n-If you are installing from a user-level directory, and you already have a\n-previous installation of libarrow in a system directory, you get you may get\n-errors like the following when you install the R package:\n-\n-```\n-Error: package or namespace load failed for \u2018arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n- unable to load shared object '/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: /usr/local/lib/libarrow.400.dylib\n-  Referenced from: /usr/local/lib/libparquet.400.dylib\n-  Reason: image not found\n-```\n-\n-If this happens, you need to make sure that you don't let R link to your system\n-library when building arrow. You can do this a number of different ways:\n-\n-* Setting the `MAKEFLAGS` environment variable to `\"LDFLAGS=\"` (see below for an example) this is the recommended way to accomplish this\n-* Using {withr}'s `with_makevars(list(LDFLAGS = \"\"), ...)`\n-* adding `LDFLAGS=` to your `~/.R/Makevars` file (the least recommended way, though it is a common debugging approach suggested online)\n-\n-```{bash, save=run & !sys_install & macos, hide=TRUE}\n-# Setup troubleshooting section\n-# install a system-level arrow on macOS\n-brew install apache-arrow\n-```\n-\n-\n-```{bash, save=run & !sys_install & ubuntu, hide=TRUE}\n-# Setup troubleshooting section\n-# install a system-level arrow on Ubuntu\n-sudo apt update\n-sudo apt install -y -V ca-certificates lsb-release wget\n-wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb\n-sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb\n-sudo apt update\n-sudo apt install -y -V libarrow-dev\n-```\n-\n-```{bash, save=run & !sys_install & macos}\n-MAKEFLAGS=\"LDFLAGS=\" R CMD INSTALL .\n-```\n-\n-\n-## `rpath` issues\n-\n-If the package fails to install/load with an error like this:\n-\n-```\n-  ** testing if installed package can be loaded from temporary location\n-  Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-  unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-```\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternatively, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g. `export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n-\n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you've previously installed the\n-libraries and want to upgrade the R package, you'll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html).\n-\n-## Other installation issues\n-\n-There are a number of scripts that are triggered when the arrow R package is installed. For package users who are not interacting with the underlying code, these should all just work without configuration and pull in the most complete pieces (e.g. official binaries that we host). However, knowing about these scripts can help package developers troubleshoot if things go wrong in them or things go wrong in an install.  See [the installation vignette](./install.html#how-dependencies-are-resolved) for more information.\n+* where necessary add extra arguments to the function signature for features \n+that don't exist in R but do in Arrow (e.g. passing in a schema when reading a\n+CSV dataset)\n\nReview comment:\n       I think an example of a compute kernel binding would be good. We could use that as an example to further explain the above points.\r\n   \r\n   I'd also suggest linking to recent PRs that may serve an examples. I find a reference PR particularly helpful in reminding me which files I might need to modify.\n\n##########\nFile path: r/vignettes/developing.Rmd\n##########\n@@ -38,567 +38,31 @@ set -e\n set -x\n ```\n \n-If you're looking to contribute to arrow, this vignette can help you set up a development environment that will enable you to write code and run tests locally. It outlines:\n+If you're interested in contributing to arrow, this vignette explains our approach, \n+at a high-level.  If you're looking for more detailed content, you may want to \n+look at one of the following links:\n \n-* how to build the components that make up the Arrow project and R package\n-* workflows that developers use\n-* some common troubleshooting steps and solutions\n+* [setting up a development environment and building the components that make up the Arrow project and R package](https://arrow.apache.org/docs/r/articles/developers/setup.html)\n+* [common Arrow dev workflow tasks](https://arrow.apache.org/docs/r/articles/developers/workflow.html)\n+* [running R with the C++ debugger attached](https://arrow.apache.org/docs/r/articles/developers/debugging.html)\n \n-This document is intended only for **developers** of Apache Arrow or the Arrow R package. R package users do not need to do any of this setup. If you're looking for how to install Arrow, see [the instructions in the readme](https://arrow.apache.org/docs/r/#installation).\n+# Approach to implementing functionality\n \n-This document is a work in progress and will grow and change as the Apache Arrow project grows and changes. We have tried to make these steps as robust as possible (in fact, we even test exactly these instructions on our nightly CI to ensure they don't become stale!), but custom configurations might conflict with these instructions and there are differences of opinion across developers about how to set up development environments like this.\n+Our general philosophy when implementing functionality is to match to existing \n+R function signatures which may be familiar to users, whilst exposing any \n+additional functionality available via Arrow.  The intention is to allow users \n+to be able to use their existing code with minimal changes, or new code or \n+approaches to learn.\n\nReview comment:\n       ```suggestion\r\n   additional functionality available via Arrow.  The intention is to allow users \r\n   to be able to use their existing code with minimal changes, or write new code\r\n   without learning a whole new API.\r\n   ```\n\n##########\nFile path: r/vignettes/developers/setup.Rmd\n##########\n@@ -0,0 +1,410 @@\n+# Developer environment setup\n+\n+```{r setup-options, include=FALSE}\n+knitr::opts_chunk$set(error = TRUE, eval = FALSE)\n+# Get environment variables describing what to evaluate\n+run <- tolower(Sys.getenv(\"RUN_DEVDOCS\", \"false\")) == \"true\"\n+macos <- tolower(Sys.getenv(\"DEVDOCS_MACOS\", \"false\")) == \"true\"\n+ubuntu <- tolower(Sys.getenv(\"DEVDOCS_UBUNTU\", \"false\")) == \"true\"\n+sys_install <- tolower(Sys.getenv(\"DEVDOCS_SYSTEM_INSTALL\", \"false\")) == \"true\"\n+# Update the source knit_hook to save the chunk (if it is marked to be saved)\n+knit_hooks_source <- knitr::knit_hooks$get(\"source\")\n+knitr::knit_hooks$set(source = function(x, options) {\n+  # Extra paranoia about when this will write the chunks to the script, we will\n+  # only save when:\n+  #   * CI is true\n+  #   * RUN_DEVDOCS is true\n+  #   * options$save is TRUE (and a check that not NULL won't crash it)\n+  if (as.logical(Sys.getenv(\"CI\", FALSE)) && run && !is.null(options$save) && options$save)\n+    cat(x, file = \"script.sh\", append = TRUE, sep = \"\\n\")\n+  # but hide the blocks we want hidden:\n+  if (!is.null(options$hide) && options$hide) {\n+    return(NULL)\n+  }\n+  knit_hooks_source(x, options)\n+})\n+```\n+\n+```{bash, save=run, hide=TRUE}\n+# Stop on failure, echo input as we go\n+set -e\n+set -x\n+```\n+\n+This document is intended only for **developers** of Apache Arrow or \n+the Arrow R package. R package users do not need to do any of this setup. \n+If you're looking for how to install Arrow, see \n+[the instructions in the readme](https://arrow.apache.org/docs/r/#installation).\n+\n+This document is a work in progress and will grow and change as the Apache Arrow\n+project grows and changes. We have tried to make these steps as robust as \n+possible (in fact, we even test exactly these instructions on our nightly CI to \n+ensure they don't become stale!), but custom configurations might conflict with \n+these instructions and there are differences of opinion across developers about \n+how to set up development environments like this.\n+\n+We welcome any feedback you have about things that are confusing or additions \n+you would like to see here - please \n+[report an issue](https://issues.apache.org/jira/projects/ARROW/issues) if you \n+have any suggestions or requests.\n+\n+\n+## R-only {.tabset}\n+\n+Windows and macOS users who wish to contribute to the R package and\n+don't need to alter libarrow (Arrow's C++ library) may be able to obtain a\n+recent version of the library without building from source.\n+\n+### Linux\n+\n+On Linux, you can download a .zip file containing libarrow from the\n+nightly repository.\n+\n+To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n+\n+```\n+nightly <- s3_bucket(\"arrow-r-nightly\")\n+nightly$ls(\"libarrow/bin\")\n+```\n+Version numbers in that repository correspond to dates.\n+\n+You'll need to create a `libarrow` directory inside the R package directory and unzip the zip file containing the compiled libarrow binary files into it.\n+\n+### macOS\n+On macOS, you can install libarrow using [Homebrew](https://brew.sh/):\n+\n+```bash\n+# For the released version:\n+brew install apache-arrow\n+# Or for a development version, you can try:\n+brew install apache-arrow --HEAD\n+```\n+\n+### Windows\n+\n+On Windows, you can download a .zip file containing libarrow from the nightly repository.\n+\n+To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n+\n+```\n+nightly <- s3_bucket(\"arrow-r-nightly\")\n+nightly$ls(\"libarrow/bin\")\n+```\n+Version numbers in that repository correspond to dates.\n+\n+You can set the `RWINLIB_LOCAL` environment variable to point to the zip file containing libarrow before installing the arrow R package.\n+\n+\n+## R and C++\n+\n+If you need to alter both libarrow and the R package code, or if you can't get a binary version of the latest libarrow elsewhere, you'll need to build it from source. This section discusses how to set up a C++ libarrow build configured to work with the R package. For more general resources, see the [Arrow C++ developer guide](https://arrow.apache.org/docs/developers/cpp/building.html).\n+\n+There are five major steps to the process.\n+\n+### Step 1 - Install dependencies {.tabset}\n+\n+When building libarrow, by default, system dependencies will be used if suitable versions are found.  If system dependencies are not present, libarrow will build them during its own build process. The only dependencies that you need to install _outside_ of the build process are [cmake](https://cmake.org/) (for configuring the build) and [openssl](https://www.openssl.org/) if you are building with S3 support.\n+\n+For a faster build, you may choose to pre-install more C++ library dependencies (such as [lz4](http://lz4.github.io/lz4/), [zstd](https://facebook.github.io/zstd/), etc.) on the system  so that they don't need to be built from source in the libarrow build.\n+\n+#### Ubuntu\n+```{bash, save=run & ubuntu}\n+sudo apt install -y cmake libcurl4-openssl-dev libssl-dev\n+```\n+\n+#### macOS\n+```{bash, save=run & macos}\n+brew install cmake openssl\n+```\n+\n+#### Windows\n+\n+Currently, the R package cannot be made to work with a local libarrow build. This will be resolved in a future release.\n+\n+### Step 2 - Configure the libarrow build\n+\n+We recommend that you configure libarrow to be built to a user-level directory rather than a system directory for your development work.  This is so that the development version you are using doesn't overwrite a released version of libarrow you may already have installed, and so that you are also able work with more than one version of libarrow (by using different `ARROW_HOME` directories for the different versions).\n+\n+In the example below, libarrow is installed to a directory called `dist` that has the same parent directory as the `arrow` checkout.  Your installation of the Arrow R package can point to any directory with any name, though we recommend *not* placing it inside of the `arrow` git checkout directory as unwanted changes could stop it working properly.\n+\n+```{bash, save=run & !sys_install}\n+export ARROW_HOME=$(pwd)/dist\n+mkdir $ARROW_HOME\n+```\n+\n+_Special instructions on Linux:_ You will need to set `LD_LIBRARY_PATH` to the `lib` directory that is under where you set `$ARROW_HOME`, before launching R and using arrow. One way to do this is to add it to your profile (we use `~/.bash_profile` here, but you might need to put this in a different file depending on your setup, e.g. if you use a shell other than `bash`). On macOS you do not need to do this because the macOS shared library paths are hardcoded to their locations during build time.\n+\n+```{bash, save=run & ubuntu & !sys_install}\n+export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\n+echo \"export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\" >> ~/.bash_profile\n+```\n+\n+Start by navigating in a terminal to the `arrow` repository. You will need to create a directory into which the C++ build will put its contents. We recommend that you make a `build` directory inside of the `cpp` directory of the Arrow git repository (it is git-ignored, so you won't accidentally check it in). Next, change directories to be inside `cpp/build`:\n+\n+```{bash, save=run & !sys_install}\n+pushd arrow\n+mkdir -p cpp/build\n+pushd cpp/build\n+```\n+\n+You'll first call `cmake` to configure the build and then `make install`. For the R package, you'll need to enable several features in libarrow using `-D` flags:\n+\n+```{bash, save=run & !sys_install}\n+cmake \\\n+  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n+  -DCMAKE_INSTALL_LIBDIR=lib \\\n+  -DARROW_COMPUTE=ON \\\n+  -DARROW_CSV=ON \\\n+  -DARROW_DATASET=ON \\\n+  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n+  -DARROW_FILESYSTEM=ON \\\n+  -DARROW_INSTALL_NAME_RPATH=OFF \\\n+  -DARROW_JEMALLOC=ON \\\n+  -DARROW_JSON=ON \\\n+  -DARROW_PARQUET=ON \\\n+  -DARROW_WITH_SNAPPY=ON \\\n+  -DARROW_WITH_ZLIB=ON \\\n+  ..\n+```\n+\n+`..` refers to the C++ source directory: you're in `cpp/build` and the source is in `cpp`.\n+\n+#### Enabling more Arrow features\n+\n+To enable optional features including: S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags to your call to `cmake` (the trailing `\\` makes them easier to paste into a bash shell on a new line):\n+\n+```bash\n+  -DARROW_MIMALLOC=ON \\\n+  -DARROW_S3=ON \\\n+  -DARROW_WITH_BROTLI=ON \\\n+  -DARROW_WITH_BZ2=ON \\\n+  -DARROW_WITH_LZ4=ON \\\n+  -DARROW_WITH_SNAPPY=ON \\\n+  -DARROW_WITH_ZSTD=ON \\\n+```\n+\n+Other flags that may be useful:\n+\n+* `-DBoost_SOURCE=BUNDLED` and `-DThrift_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+\n+* `-DCMAKE_BUILD_TYPE=debug` or `-DCMAKE_BUILD_TYPE=relwithdebinfo` can be useful for debugging. You probably don't want to do this generally because a debug build is much slower at runtime than the default `release` build.\n+\n+_Note_ `cmake` is particularly sensitive to whitespacing, if you see errors, check that you don't have any errant whitespace.\n+\n+### Step 3 - Building libarrow\n+\n+You can add `-j#` between `make` and `install` here too to speed up compilation by running in parallel (where `#` is the number of cores you have available).\n+\n+```{bash, save=run & !(sys_install & ubuntu)}\n+make -j8 install\n+```\n+\n+### Step 4 - Build the Arrow R package\n+\n+Once you've built libarrow, you can install the R package and its\n+dependencies, along with additional dev dependencies, from the git\n+checkout:\n+\n+```{bash, save=run}\n+popd # To go back to the root directory of the project, from cpp/build\n+pushd r\n+R -e 'install.packages(\"remotes\"); remotes::install_deps(dependencies = TRUE)'\n+R CMD INSTALL .\n+```\n+\n+#### Compilation flags\n+\n+If you need to set any compilation flags while building the C++\n+extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n+example, if you are using `perf` to profile the R extensions, you may\n+need to set\n+\n+```bash\n+export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+```\n+\n+#### Recompiling the C++ code\n+\n+With the setup described here, you should not need to rebuild the Arrow library or even the C++ source in the R package as you iterate and work on the R package. The only time those should need to be rebuilt is if you have changed the C++ in the R package (and even then, `R CMD INSTALL .` should only need to recompile the files that have changed) _or_ if the libarrow C++ has changed and there is a mismatch between libarrow and the R package. If you find yourself rebuilding either or both each time you install the package or run tests, something is probably wrong with your set up.\n+\n+<details>\n+<summary>For a full build: a `cmake` command with all of the R-relevant optional dependencies turned on. Development with other languages might require different flags as well. For example, to develop Python, you would need to also add `-DARROW_PYTHON=ON` (though all of the other flags used for Python are already included here).</summary>\n+<p>\n+\n+```bash\n+cmake \\\n+  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n+  -DCMAKE_INSTALL_LIBDIR=lib \\\n+  -DARROW_COMPUTE=ON \\\n+  -DARROW_CSV=ON \\\n+  -DARROW_DATASET=ON \\\n+  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n+  -DARROW_FILESYSTEM=ON \\\n+  -DARROW_INSTALL_NAME_RPATH=OFF \\\n+  -DARROW_JEMALLOC=ON \\\n+  -DARROW_JSON=ON \\\n+  -DARROW_MIMALLOC=ON \\\n+  -DARROW_PARQUET=ON \\\n+  -DARROW_S3=ON \\\n+  -DARROW_WITH_BROTLI=ON \\\n+  -DARROW_WITH_BZ2=ON \\\n+  -DARROW_WITH_LZ4=ON \\\n+  -DARROW_WITH_SNAPPY=ON \\\n+  -DARROW_WITH_ZLIB=ON \\\n+  -DARROW_WITH_ZSTD=ON \\\n+  ..\n+```\n+</p>\n+</details>\n+\n+## Installing a version of the R package with a specific git reference\n+\n+If you need an arrow installation from a specific repository or git reference, on most platforms except Windows, you can run:\n+\n+```{r}\n+remotes::install_github(\"apache/arrow/r\", build = FALSE)\n+```\n+\n+The `build = FALSE` argument is important so that the installation can access the\n+C++ source in the `cpp/` directory in `apache/arrow`.\n+\n+As with other installation methods, setting the environment variables `LIBARROW_MINIMAL=false` and `ARROW_R_DEV=true` will provide a more full-featured version of Arrow and provide more verbose output, respectively.\n+\n+For example, to install from the (fictional) branch `bugfix` from `apache/arrow` you could run:\n+\n+```r\n+Sys.setenv(LIBARROW_MINIMAL=\"false\")\n+remotes::install_github(\"apache/arrow/r@bugfix\", build = FALSE)\n+```\n+\n+Developers may wish to use this method of installing a specific commit\n+separate from another Arrow development environment or system installation\n+(e.g. we use this in [arrowbench](https://github.com/ursacomputing/arrowbench)\n+to install development versions of libarrow isolated from the system install). If\n+you already have libarrow installed system-wide, you may need to set\n+some additional variables in order to isolate this build from your system libraries:\n+\n+* Setting the environment variable `FORCE_BUNDLED_BUILD` to `true` will skip the `pkg-config` search for libarrow and attempt to build from the same source at the repository+ref given.\n+\n+* You may also need to set the Makevars `CPPFLAGS` and `LDFLAGS` to `\"\"` in order to prevent the installation process from attempting to link to already installed system versions of libarrow. One way to do this temporarily is wrapping your `remotes::install_github()` call like so:\n+```{r}\n+withr::with_makevars(list(CPPFLAGS = \"\", LDFLAGS = \"\"), remotes::install_github(...))\n+```\n+\n+\n+## Summary of environment variables\n+\n+* See the user-facing [Install vignette](install.html) for a large number of\n\nReview comment:\n       ```suggestion\r\n   * See the user-facing [Install vignette](../install.html) for a large number of\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-17T22:04:26.314+0000",
                    "updated": "2021-11-17T22:04:26.314+0000",
                    "started": "2021-11-17T22:04:26.313+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "682951",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/683139",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r751988969\n\n\n\n##########\nFile path: r/vignettes/developing.Rmd\n##########\n@@ -38,567 +38,31 @@ set -e\n set -x\n ```\n \n-If you're looking to contribute to arrow, this vignette can help you set up a development environment that will enable you to write code and run tests locally. It outlines:\n+If you're interested in contributing to arrow, this vignette explains our approach, \n+at a high-level.  If you're looking for more detailed content, you may want to \n+look at one of the following links:\n \n-* how to build the components that make up the Arrow project and R package\n-* workflows that developers use\n-* some common troubleshooting steps and solutions\n+* [setting up a development environment and building the components that make up the Arrow project and R package](https://arrow.apache.org/docs/r/articles/developers/setup.html)\n+* [common Arrow dev workflow tasks](https://arrow.apache.org/docs/r/articles/developers/workflow.html)\n+* [running R with the C++ debugger attached](https://arrow.apache.org/docs/r/articles/developers/debugging.html)\n\nReview comment:\n       Unfortunately not - when the package is built, everything in the `vignettes` directory is distributed with the package as a HTML document, whereas everything in any subdirectories is only displayed on the `pkgdown` site.  This means that the relative links wouldn't work for anyone viewing this vignette locally.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-18T08:05:51.047+0000",
                    "updated": "2021-11-18T08:05:51.047+0000",
                    "started": "2021-11-18T08:05:51.047+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "683139",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/683142",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r751990024\n\n\n\n##########\nFile path: r/vignettes/developers/setup.Rmd\n##########\n@@ -0,0 +1,410 @@\n+# Developer environment setup\n+\n+```{r setup-options, include=FALSE}\n+knitr::opts_chunk$set(error = TRUE, eval = FALSE)\n+# Get environment variables describing what to evaluate\n+run <- tolower(Sys.getenv(\"RUN_DEVDOCS\", \"false\")) == \"true\"\n+macos <- tolower(Sys.getenv(\"DEVDOCS_MACOS\", \"false\")) == \"true\"\n+ubuntu <- tolower(Sys.getenv(\"DEVDOCS_UBUNTU\", \"false\")) == \"true\"\n+sys_install <- tolower(Sys.getenv(\"DEVDOCS_SYSTEM_INSTALL\", \"false\")) == \"true\"\n+# Update the source knit_hook to save the chunk (if it is marked to be saved)\n+knit_hooks_source <- knitr::knit_hooks$get(\"source\")\n+knitr::knit_hooks$set(source = function(x, options) {\n+  # Extra paranoia about when this will write the chunks to the script, we will\n+  # only save when:\n+  #   * CI is true\n+  #   * RUN_DEVDOCS is true\n+  #   * options$save is TRUE (and a check that not NULL won't crash it)\n+  if (as.logical(Sys.getenv(\"CI\", FALSE)) && run && !is.null(options$save) && options$save)\n+    cat(x, file = \"script.sh\", append = TRUE, sep = \"\\n\")\n+  # but hide the blocks we want hidden:\n+  if (!is.null(options$hide) && options$hide) {\n+    return(NULL)\n+  }\n+  knit_hooks_source(x, options)\n+})\n+```\n+\n+```{bash, save=run, hide=TRUE}\n+# Stop on failure, echo input as we go\n+set -e\n+set -x\n+```\n+\n+This document is intended only for **developers** of Apache Arrow or \n+the Arrow R package. R package users do not need to do any of this setup. \n+If you're looking for how to install Arrow, see \n+[the instructions in the readme](https://arrow.apache.org/docs/r/#installation).\n+\n+This document is a work in progress and will grow and change as the Apache Arrow\n+project grows and changes. We have tried to make these steps as robust as \n+possible (in fact, we even test exactly these instructions on our nightly CI to \n+ensure they don't become stale!), but custom configurations might conflict with \n+these instructions and there are differences of opinion across developers about \n+how to set up development environments like this.\n+\n+We welcome any feedback you have about things that are confusing or additions \n+you would like to see here - please \n+[report an issue](https://issues.apache.org/jira/projects/ARROW/issues) if you \n+have any suggestions or requests.\n+\n+\n+## R-only {.tabset}\n+\n+Windows and macOS users who wish to contribute to the R package and\n+don't need to alter libarrow (Arrow's C++ library) may be able to obtain a\n+recent version of the library without building from source.\n+\n+### Linux\n+\n+On Linux, you can download a .zip file containing libarrow from the\n+nightly repository.\n+\n+To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n+\n+```\n+nightly <- s3_bucket(\"arrow-r-nightly\")\n+nightly$ls(\"libarrow/bin\")\n+```\n+Version numbers in that repository correspond to dates.\n+\n+You'll need to create a `libarrow` directory inside the R package directory and unzip the zip file containing the compiled libarrow binary files into it.\n+\n+### macOS\n+On macOS, you can install libarrow using [Homebrew](https://brew.sh/):\n+\n+```bash\n+# For the released version:\n+brew install apache-arrow\n+# Or for a development version, you can try:\n+brew install apache-arrow --HEAD\n+```\n+\n+### Windows\n+\n+On Windows, you can download a .zip file containing libarrow from the nightly repository.\n+\n+To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n+\n+```\n+nightly <- s3_bucket(\"arrow-r-nightly\")\n+nightly$ls(\"libarrow/bin\")\n+```\n+Version numbers in that repository correspond to dates.\n+\n+You can set the `RWINLIB_LOCAL` environment variable to point to the zip file containing libarrow before installing the arrow R package.\n+\n+\n+## R and C++\n+\n+If you need to alter both libarrow and the R package code, or if you can't get a binary version of the latest libarrow elsewhere, you'll need to build it from source. This section discusses how to set up a C++ libarrow build configured to work with the R package. For more general resources, see the [Arrow C++ developer guide](https://arrow.apache.org/docs/developers/cpp/building.html).\n+\n+There are five major steps to the process.\n+\n+### Step 1 - Install dependencies {.tabset}\n+\n+When building libarrow, by default, system dependencies will be used if suitable versions are found.  If system dependencies are not present, libarrow will build them during its own build process. The only dependencies that you need to install _outside_ of the build process are [cmake](https://cmake.org/) (for configuring the build) and [openssl](https://www.openssl.org/) if you are building with S3 support.\n+\n+For a faster build, you may choose to pre-install more C++ library dependencies (such as [lz4](http://lz4.github.io/lz4/), [zstd](https://facebook.github.io/zstd/), etc.) on the system  so that they don't need to be built from source in the libarrow build.\n+\n+#### Ubuntu\n+```{bash, save=run & ubuntu}\n+sudo apt install -y cmake libcurl4-openssl-dev libssl-dev\n+```\n+\n+#### macOS\n+```{bash, save=run & macos}\n+brew install cmake openssl\n+```\n+\n+#### Windows\n+\n+Currently, the R package cannot be made to work with a local libarrow build. This will be resolved in a future release.\n+\n+### Step 2 - Configure the libarrow build\n+\n+We recommend that you configure libarrow to be built to a user-level directory rather than a system directory for your development work.  This is so that the development version you are using doesn't overwrite a released version of libarrow you may already have installed, and so that you are also able work with more than one version of libarrow (by using different `ARROW_HOME` directories for the different versions).\n+\n+In the example below, libarrow is installed to a directory called `dist` that has the same parent directory as the `arrow` checkout.  Your installation of the Arrow R package can point to any directory with any name, though we recommend *not* placing it inside of the `arrow` git checkout directory as unwanted changes could stop it working properly.\n+\n+```{bash, save=run & !sys_install}\n+export ARROW_HOME=$(pwd)/dist\n+mkdir $ARROW_HOME\n+```\n+\n+_Special instructions on Linux:_ You will need to set `LD_LIBRARY_PATH` to the `lib` directory that is under where you set `$ARROW_HOME`, before launching R and using arrow. One way to do this is to add it to your profile (we use `~/.bash_profile` here, but you might need to put this in a different file depending on your setup, e.g. if you use a shell other than `bash`). On macOS you do not need to do this because the macOS shared library paths are hardcoded to their locations during build time.\n+\n+```{bash, save=run & ubuntu & !sys_install}\n+export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\n+echo \"export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\" >> ~/.bash_profile\n+```\n+\n+Start by navigating in a terminal to the `arrow` repository. You will need to create a directory into which the C++ build will put its contents. We recommend that you make a `build` directory inside of the `cpp` directory of the Arrow git repository (it is git-ignored, so you won't accidentally check it in). Next, change directories to be inside `cpp/build`:\n+\n+```{bash, save=run & !sys_install}\n+pushd arrow\n+mkdir -p cpp/build\n+pushd cpp/build\n+```\n+\n+You'll first call `cmake` to configure the build and then `make install`. For the R package, you'll need to enable several features in libarrow using `-D` flags:\n+\n+```{bash, save=run & !sys_install}\n+cmake \\\n+  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n+  -DCMAKE_INSTALL_LIBDIR=lib \\\n+  -DARROW_COMPUTE=ON \\\n+  -DARROW_CSV=ON \\\n+  -DARROW_DATASET=ON \\\n+  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n+  -DARROW_FILESYSTEM=ON \\\n+  -DARROW_INSTALL_NAME_RPATH=OFF \\\n+  -DARROW_JEMALLOC=ON \\\n+  -DARROW_JSON=ON \\\n+  -DARROW_PARQUET=ON \\\n+  -DARROW_WITH_SNAPPY=ON \\\n+  -DARROW_WITH_ZLIB=ON \\\n+  ..\n+```\n+\n+`..` refers to the C++ source directory: you're in `cpp/build` and the source is in `cpp`.\n+\n+#### Enabling more Arrow features\n+\n+To enable optional features including: S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags to your call to `cmake` (the trailing `\\` makes them easier to paste into a bash shell on a new line):\n+\n+```bash\n+  -DARROW_MIMALLOC=ON \\\n+  -DARROW_S3=ON \\\n+  -DARROW_WITH_BROTLI=ON \\\n+  -DARROW_WITH_BZ2=ON \\\n+  -DARROW_WITH_LZ4=ON \\\n+  -DARROW_WITH_SNAPPY=ON \\\n+  -DARROW_WITH_ZSTD=ON \\\n+```\n+\n+Other flags that may be useful:\n+\n+* `-DBoost_SOURCE=BUNDLED` and `-DThrift_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n+\n+* `-DCMAKE_BUILD_TYPE=debug` or `-DCMAKE_BUILD_TYPE=relwithdebinfo` can be useful for debugging. You probably don't want to do this generally because a debug build is much slower at runtime than the default `release` build.\n+\n+_Note_ `cmake` is particularly sensitive to whitespacing, if you see errors, check that you don't have any errant whitespace.\n+\n+### Step 3 - Building libarrow\n+\n+You can add `-j#` between `make` and `install` here too to speed up compilation by running in parallel (where `#` is the number of cores you have available).\n+\n+```{bash, save=run & !(sys_install & ubuntu)}\n+make -j8 install\n+```\n+\n+### Step 4 - Build the Arrow R package\n+\n+Once you've built libarrow, you can install the R package and its\n+dependencies, along with additional dev dependencies, from the git\n+checkout:\n+\n+```{bash, save=run}\n+popd # To go back to the root directory of the project, from cpp/build\n+pushd r\n+R -e 'install.packages(\"remotes\"); remotes::install_deps(dependencies = TRUE)'\n+R CMD INSTALL .\n+```\n+\n+#### Compilation flags\n+\n+If you need to set any compilation flags while building the C++\n+extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n+example, if you are using `perf` to profile the R extensions, you may\n+need to set\n+\n+```bash\n+export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n+```\n+\n+#### Recompiling the C++ code\n+\n+With the setup described here, you should not need to rebuild the Arrow library or even the C++ source in the R package as you iterate and work on the R package. The only time those should need to be rebuilt is if you have changed the C++ in the R package (and even then, `R CMD INSTALL .` should only need to recompile the files that have changed) _or_ if the libarrow C++ has changed and there is a mismatch between libarrow and the R package. If you find yourself rebuilding either or both each time you install the package or run tests, something is probably wrong with your set up.\n+\n+<details>\n+<summary>For a full build: a `cmake` command with all of the R-relevant optional dependencies turned on. Development with other languages might require different flags as well. For example, to develop Python, you would need to also add `-DARROW_PYTHON=ON` (though all of the other flags used for Python are already included here).</summary>\n+<p>\n+\n+```bash\n+cmake \\\n+  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n+  -DCMAKE_INSTALL_LIBDIR=lib \\\n+  -DARROW_COMPUTE=ON \\\n+  -DARROW_CSV=ON \\\n+  -DARROW_DATASET=ON \\\n+  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n+  -DARROW_FILESYSTEM=ON \\\n+  -DARROW_INSTALL_NAME_RPATH=OFF \\\n+  -DARROW_JEMALLOC=ON \\\n+  -DARROW_JSON=ON \\\n+  -DARROW_MIMALLOC=ON \\\n+  -DARROW_PARQUET=ON \\\n+  -DARROW_S3=ON \\\n+  -DARROW_WITH_BROTLI=ON \\\n+  -DARROW_WITH_BZ2=ON \\\n+  -DARROW_WITH_LZ4=ON \\\n+  -DARROW_WITH_SNAPPY=ON \\\n+  -DARROW_WITH_ZLIB=ON \\\n+  -DARROW_WITH_ZSTD=ON \\\n+  ..\n+```\n+</p>\n+</details>\n+\n+## Installing a version of the R package with a specific git reference\n+\n+If you need an arrow installation from a specific repository or git reference, on most platforms except Windows, you can run:\n+\n+```{r}\n+remotes::install_github(\"apache/arrow/r\", build = FALSE)\n+```\n+\n+The `build = FALSE` argument is important so that the installation can access the\n+C++ source in the `cpp/` directory in `apache/arrow`.\n+\n+As with other installation methods, setting the environment variables `LIBARROW_MINIMAL=false` and `ARROW_R_DEV=true` will provide a more full-featured version of Arrow and provide more verbose output, respectively.\n+\n+For example, to install from the (fictional) branch `bugfix` from `apache/arrow` you could run:\n+\n+```r\n+Sys.setenv(LIBARROW_MINIMAL=\"false\")\n+remotes::install_github(\"apache/arrow/r@bugfix\", build = FALSE)\n+```\n+\n+Developers may wish to use this method of installing a specific commit\n+separate from another Arrow development environment or system installation\n+(e.g. we use this in [arrowbench](https://github.com/ursacomputing/arrowbench)\n+to install development versions of libarrow isolated from the system install). If\n+you already have libarrow installed system-wide, you may need to set\n+some additional variables in order to isolate this build from your system libraries:\n+\n+* Setting the environment variable `FORCE_BUNDLED_BUILD` to `true` will skip the `pkg-config` search for libarrow and attempt to build from the same source at the repository+ref given.\n+\n+* You may also need to set the Makevars `CPPFLAGS` and `LDFLAGS` to `\"\"` in order to prevent the installation process from attempting to link to already installed system versions of libarrow. One way to do this temporarily is wrapping your `remotes::install_github()` call like so:\n+```{r}\n+withr::with_makevars(list(CPPFLAGS = \"\", LDFLAGS = \"\"), remotes::install_github(...))\n+```\n+\n+\n+## Summary of environment variables\n+\n+* See the user-facing [Install vignette](install.html) for a large number of\n\nReview comment:\n       Good catch!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-18T08:07:25.915+0000",
                    "updated": "2021-11-18T08:07:25.915+0000",
                    "started": "2021-11-18T08:07:25.915+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "683142",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/683143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r751990716\n\n\n\n##########\nFile path: r/vignettes/developing.Rmd\n##########\n@@ -38,567 +38,31 @@ set -e\n set -x\n ```\n \n-If you're looking to contribute to arrow, this vignette can help you set up a development environment that will enable you to write code and run tests locally. It outlines:\n+If you're interested in contributing to arrow, this vignette explains our approach, \n+at a high-level.  If you're looking for more detailed content, you may want to \n+look at one of the following links:\n \n-* how to build the components that make up the Arrow project and R package\n-* workflows that developers use\n-* some common troubleshooting steps and solutions\n+* [setting up a development environment and building the components that make up the Arrow project and R package](https://arrow.apache.org/docs/r/articles/developers/setup.html)\n+* [common Arrow dev workflow tasks](https://arrow.apache.org/docs/r/articles/developers/workflow.html)\n+* [running R with the C++ debugger attached](https://arrow.apache.org/docs/r/articles/developers/debugging.html)\n \n-This document is intended only for **developers** of Apache Arrow or the Arrow R package. R package users do not need to do any of this setup. If you're looking for how to install Arrow, see [the instructions in the readme](https://arrow.apache.org/docs/r/#installation).\n+# Approach to implementing functionality\n \n-This document is a work in progress and will grow and change as the Apache Arrow project grows and changes. We have tried to make these steps as robust as possible (in fact, we even test exactly these instructions on our nightly CI to ensure they don't become stale!), but custom configurations might conflict with these instructions and there are differences of opinion across developers about how to set up development environments like this.\n+Our general philosophy when implementing functionality is to match to existing \n+R function signatures which may be familiar to users, whilst exposing any \n+additional functionality available via Arrow.  The intention is to allow users \n+to be able to use their existing code with minimal changes, or new code or \n+approaches to learn.\n\nReview comment:\n       Nice, I like this rephrasing\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-18T08:08:23.059+0000",
                    "updated": "2021-11-18T08:08:23.059+0000",
                    "started": "2021-11-18T08:08:23.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "683143",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/683144",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r751991673\n\n\n\n##########\nFile path: r/vignettes/developing.Rmd\n##########\n@@ -38,567 +38,31 @@ set -e\n set -x\n ```\n \n-If you're looking to contribute to arrow, this vignette can help you set up a development environment that will enable you to write code and run tests locally. It outlines:\n+If you're interested in contributing to arrow, this vignette explains our approach, \n+at a high-level.  If you're looking for more detailed content, you may want to \n+look at one of the following links:\n \n-* how to build the components that make up the Arrow project and R package\n-* workflows that developers use\n-* some common troubleshooting steps and solutions\n+* [setting up a development environment and building the components that make up the Arrow project and R package](https://arrow.apache.org/docs/r/articles/developers/setup.html)\n+* [common Arrow dev workflow tasks](https://arrow.apache.org/docs/r/articles/developers/workflow.html)\n+* [running R with the C++ debugger attached](https://arrow.apache.org/docs/r/articles/developers/debugging.html)\n \n-This document is intended only for **developers** of Apache Arrow or the Arrow R package. R package users do not need to do any of this setup. If you're looking for how to install Arrow, see [the instructions in the readme](https://arrow.apache.org/docs/r/#installation).\n+# Approach to implementing functionality\n \n-This document is a work in progress and will grow and change as the Apache Arrow project grows and changes. We have tried to make these steps as robust as possible (in fact, we even test exactly these instructions on our nightly CI to ensure they don't become stale!), but custom configurations might conflict with these instructions and there are differences of opinion across developers about how to set up development environments like this.\n+Our general philosophy when implementing functionality is to match to existing \n+R function signatures which may be familiar to users, whilst exposing any \n+additional functionality available via Arrow.  The intention is to allow users \n+to be able to use their existing code with minimal changes, or new code or \n+approaches to learn.\n \n-We welcome any feedback you have about things that are confusing or additions you would like to see here - please [report an issue](https://issues.apache.org/jira/projects/ARROW/issues) if you have any suggestions or requests.\n+There are a number of ways in which we do this:\n \n-# Developer environment setup\n+* when implementing a function with an R equivalent, support the arguments \n+available in R version as much as possible - use the original parameter names \n+and translate to the arrow parameter name inside the function\n \n-## R-only {.tabset}\n+* if there are arrow parameters which do not exist in the R function, allow the\n+user to pass in those options through too\n \n-Windows and macOS users who wish to contribute to the R package and\n-don't need to alter libarrow (Arrow's C++ library) may be able to obtain a\n-recent version of the library without building from source.\n-\n-### Linux\n-\n-On Linux, you can download a .zip file containing libarrow from the\n-nightly repository.\n-\n-To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n-\n-```\n-nightly <- s3_bucket(\"arrow-r-nightly\")\n-nightly$ls(\"libarrow/bin\")\n-```\n-Version numbers in that repository correspond to dates.\n-\n-You'll need to create a `libarrow` directory inside the R package directory and unzip the zip file containing the compiled libarrow binary files into it.\n-\n-### macOS\n-On macOS, you can install libarrow using [Homebrew](https://brew.sh/):\n-\n-```bash\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n-\n-### Windows\n-\n-On Windows, you can download a .zip file containing libarrow from the nightly repository.\n-\n-To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n-\n-```\n-nightly <- s3_bucket(\"arrow-r-nightly\")\n-nightly$ls(\"libarrow/bin\")\n-```\n-Version numbers in that repository correspond to dates.\n-\n-You can set the `RWINLIB_LOCAL` environment variable to point to the zip file containing libarrow before installing the arrow R package.\n-\n-\n-## R and C++\n-\n-If you need to alter both libarrow and the R package code, or if you can't get a binary version of the latest libarrow elsewhere, you'll need to build it from source. This section discusses how to set up a C++ libarrow build configured to work with the R package. For more general resources, see the [Arrow C++ developer guide](https://arrow.apache.org/docs/developers/cpp/building.html).\n-\n-There are five major steps to the process.\n-\n-### Step 1 - Install dependencies {.tabset}\n-\n-When building libarrow, by default, system dependencies will be used if suitable versions are found.  If system dependencies are not present, libarrow will build them during its own build process. The only dependencies that you need to install _outside_ of the build process are [cmake](https://cmake.org/) (for configuring the build) and [openssl](https://www.openssl.org/) if you are building with S3 support.\n-\n-For a faster build, you may choose to pre-install more C++ library dependencies (such as [lz4](http://lz4.github.io/lz4/), [zstd](https://facebook.github.io/zstd/), etc.) on the system  so that they don't need to be built from source in the libarrow build.\n-\n-#### Ubuntu\n-```{bash, save=run & ubuntu}\n-sudo apt install -y cmake libcurl4-openssl-dev libssl-dev\n-```\n-\n-#### macOS\n-```{bash, save=run & macos}\n-brew install cmake openssl\n-```\n-\n-#### Windows\n-\n-Currently, the R package cannot be made to work with a local libarrow build. This will be resolved in a future release.\n-\n-### Step 2 - Configure the libarrow build\n-\n-We recommend that you configure libarrow to be built to a user-level directory rather than a system directory for your development work.  This is so that the development version you are using doesn't overwrite a released version of libarrow you may already have installed, and so that you are also able work with more than one version of libarrow (by using different `ARROW_HOME` directories for the different versions).\n-\n-In the example below, libarrow is installed to a directory called `dist` that has the same parent directory as the `arrow` checkout.  Your installation of the Arrow R package can point to any directory with any name, though we recommend *not* placing it inside of the `arrow` git checkout directory as unwanted changes could stop it working properly.\n-\n-```{bash, save=run & !sys_install}\n-export ARROW_HOME=$(pwd)/dist\n-mkdir $ARROW_HOME\n-```\n-\n-_Special instructions on Linux:_ You will need to set `LD_LIBRARY_PATH` to the `lib` directory that is under where you set `$ARROW_HOME`, before launching R and using arrow. One way to do this is to add it to your profile (we use `~/.bash_profile` here, but you might need to put this in a different file depending on your setup, e.g. if you use a shell other than `bash`). On macOS you do not need to do this because the macOS shared library paths are hardcoded to their locations during build time.\n-\n-```{bash, save=run & ubuntu & !sys_install}\n-export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\n-echo \"export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\" >> ~/.bash_profile\n-```\n-\n-Start by navigating in a terminal to the `arrow` repository. You will need to create a directory into which the C++ build will put its contents. We recommend that you make a `build` directory inside of the `cpp` directory of the Arrow git repository (it is git-ignored, so you won't accidentally check it in). Next, change directories to be inside `cpp/build`:\n-\n-```{bash, save=run & !sys_install}\n-pushd arrow\n-mkdir -p cpp/build\n-pushd cpp/build\n-```\n-\n-You'll first call `cmake` to configure the build and then `make install`. For the R package, you'll need to enable several features in libarrow using `-D` flags:\n-\n-```{bash, save=run & !sys_install}\n-cmake \\\n-  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n-  -DCMAKE_INSTALL_LIBDIR=lib \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  ..\n-```\n-\n-`..` refers to the C++ source directory: you're in `cpp/build` and the source is in `cpp`.\n-\n-#### Enabling more Arrow features\n-\n-To enable optional features including: S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags to your call to `cmake` (the trailing `\\` makes them easier to paste into a bash shell on a new line):\n-\n-```bash\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_S3=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n-\n-Other flags that may be useful:\n-\n-* `-DBoost_SOURCE=BUNDLED` and `-DThrift_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n-\n-* `-DCMAKE_BUILD_TYPE=debug` or `-DCMAKE_BUILD_TYPE=relwithdebinfo` can be useful for debugging. You probably don't want to do this generally because a debug build is much slower at runtime than the default `release` build.\n-\n-_Note_ `cmake` is particularly sensitive to whitespacing, if you see errors, check that you don't have any errant whitespace.\n-\n-### Step 3 - Building libarrow\n-\n-You can add `-j#` between `make` and `install` here too to speed up compilation by running in parallel (where `#` is the number of cores you have available).\n-\n-```{bash, save=run & !(sys_install & ubuntu)}\n-make -j8 install\n-```\n-\n-### Step 4 - Build the Arrow R package\n-\n-Once you've built libarrow, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n-\n-```{bash, save=run}\n-popd # To go back to the root directory of the project, from cpp/build\n-pushd r\n-R -e 'install.packages(\"remotes\"); remotes::install_deps(dependencies = TRUE)'\n-R CMD INSTALL .\n-```\n-\n-#### Compilation flags\n-\n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n-\n-```bash\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n-```\n-\n-#### Recompiling the C++ code\n-\n-With the setup described here, you should not need to rebuild the Arrow library or even the C++ source in the R package as you iterate and work on the R package. The only time those should need to be rebuilt is if you have changed the C++ in the R package (and even then, `R CMD INSTALL .` should only need to recompile the files that have changed) _or_ if the libarrow C++ has changed and there is a mismatch between libarrow and the R package. If you find yourself rebuilding either or both each time you install the package or run tests, something is probably wrong with your set up.\n-\n-<details>\n-<summary>For a full build: a `cmake` command with all of the R-relevant optional dependencies turned on. Development with other languages might require different flags as well. For example, to develop Python, you would need to also add `-DARROW_PYTHON=ON` (though all of the other flags used for Python are already included here).</summary>\n-<p>\n-\n-```bash\n-cmake \\\n-  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n-  -DCMAKE_INSTALL_LIBDIR=lib \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DARROW_S3=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-  ..\n-```\n-</p>\n-</details>\n-\n-## Installing a version of the R package with a specific git reference\n-\n-If you need an arrow installation from a specific repository or git reference, on most platforms except Windows, you can run:\n-\n-```{r}\n-remotes::install_github(\"apache/arrow/r\", build = FALSE)\n-```\n-\n-The `build = FALSE` argument is important so that the installation can access the\n-C++ source in the `cpp/` directory in `apache/arrow`.\n-\n-As with other installation methods, setting the environment variables `LIBARROW_MINIMAL=false` and `ARROW_R_DEV=true` will provide a more full-featured version of Arrow and provide more verbose output, respectively.\n-\n-For example, to install from the (fictional) branch `bugfix` from `apache/arrow` you could run:\n-\n-```r\n-Sys.setenv(LIBARROW_MINIMAL=\"false\")\n-remotes::install_github(\"apache/arrow/r@bugfix\", build = FALSE)\n-```\n-\n-Developers may wish to use this method of installing a specific commit\n-separate from another Arrow development environment or system installation\n-(e.g. we use this in [arrowbench](https://github.com/ursacomputing/arrowbench)\n-to install development versions of libarrow isolated from the system install). If\n-you already have libarrow installed system-wide, you may need to set\n-some additional variables in order to isolate this build from your system libraries:\n-\n-* Setting the environment variable `FORCE_BUNDLED_BUILD` to `true` will skip the `pkg-config` search for libarrow and attempt to build from the same source at the repository+ref given.\n-\n-* You may also need to set the Makevars `CPPFLAGS` and `LDFLAGS` to `\"\"` in order to prevent the installation process from attempting to link to already installed system versions of libarrow. One way to do this temporarily is wrapping your `remotes::install_github()` call like so:\n-```{r}\n-withr::with_makevars(list(CPPFLAGS = \"\", LDFLAGS = \"\"), remotes::install_github(...))\n-```\n-\n-# Common developer workflow tasks\n-\n-The `arrow/r` directory contains a `Makefile` to help with some common tasks from the command line (e.g. `make test`, `make doc`, `make clean`, etc.).\n-\n-## Loading arrow\n-\n-You can load the R package via `devtools::load_all()`.\n-\n-## Rebuilding the documentation\n-\n-The R documentation uses the [`@examplesIf`](https://roxygen2.r-lib.org/articles/rd.html#functions) tag introduced in `roxygen2` version 7.1.1.9001, which hasn't yet been released on CRAN at the time of writing.  If you are making changes which require updating the documentation, please install the development version of `roxygen2` from GitHub.\n-\n-```{r}\n-remotes::install_github(\"r-lib/roxygen2\")\n-```\n-\n-You can use `devtools::document()` and `pkgdown::build_site()` to rebuild the documentation and preview the results.\n-\n-```r\n-# Update roxygen documentation\n-devtools::document()\n-\n-# To preview the documentation website\n-pkgdown::build_site(preview=TRUE)\n-```\n-\n-## Styling and linting\n-\n-### R code\n-\n-The R code in the package follows [the tidyverse style](https://style.tidyverse.org/). On PR submission (and on pushes) our CI will run linting and will flag possible errors on the pull request with annotations.\n-\n-To run the [lintr](https://github.com/jimhester/lintr) locally, install the lintr package (note, we currently use a fork that includes fixes not yet accepted upstream, see how lintr is being installed in the file `ci/docker/linux-apt-lint.dockerfile` for the current status) and then run\n-\n-```{r}\n-lintr::lint_package(\"arrow/r\")\n-```\n-\n-You can automatically change the formatting of the code in the package using the [styler](https://styler.r-lib.org/) package. There are two ways to do this:\n-\n-1. Use the comment bot to do this automatically with the command `@github-actions autotune` on a PR, and commit it back to the branch.\n-\n-2. Run the styler locally either via Makefile commands:\n-\n-```bash\n-make style # (for only the files changed)\n-make style-all # (for all files)\n-```\n-\n-or in R:\n-\n-```{r}\n-# note the two excluded files which should not be styled\n-styler::style_pkg(exclude_files = c(\"tests/testthat/latin1.R\", \"data-raw/codegen.R\"))\n-```\n-\n-The styler package will fix many styling errors, thought not all lintr errors are automatically fixable with styler. The list of files we intentionally do not style is in `r/.styler_excludes.R`.\n-\n-### C++ code\n-\n-The arrow package uses some customized tools on top of [cpp11](https://cpp11.r-lib.org/) to prepare its\n-C++ code in `src/`. This is because there are some features that are only enabled\n-and built conditionally during build time. If you change C++ code in the R\n-package, you will need to set the `ARROW_R_DEV` environment variable to `true`\n-(optionally, add it to your `~/.Renviron` file to persist across sessions) so\n-that the `data-raw/codegen.R` file is used for code generation. The `Makefile`\n-commands also handles this automatically.\n-\n-We use Google C++ style in our C++ code. The easiest way to accomplish this is\n-use an editors/IDE that formats your code for you. Many popular editors/IDEs\n-have support for running `clang-format` on C++ files when you save them.\n-Installing/enabling the appropriate plugin may save you much frustration.\n-\n-Check for style errors with\n-\n-```bash\n-./lint.sh\n-```\n-\n-Fix any style issues before committing with\n-\n-```bash\n-./lint.sh --fix\n-```\n-\n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn't found, you can explicitly provide the path to it like:\n-\n-```bash\n-CLANG_FORMAT=$(which clang-format-8) ./lint.sh\n-```\n-\n-On macOS, you can get this by installing LLVM via Homebrew and running the script as:\n-```bash\n-CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh\n-```\n-\n-_Note_ that the lint script requires Python 3 and the Python dependencies\n-(note that `cmake_format is pinned to a specific version):\n-\n-* autopep8\n-* flake8\n-* cmake_format==0.5.2\n-\n-## Running tests\n-\n-Tests can be run either using `devtools::test()` or the Makefile alternative.\n-\n-```r\n-# Run the test suite, optionally filtering file names\n-devtools::test(filter=\"^regexp$\")\n-\n-# or the Makefile alternative from the arrow/r directory in a shell:\n-make test file=regexp\n-```\n-\n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n-\n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=true`\n-\n-* Some tests are disabled unless `ARROW_R_DEV=true`\n-\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=true`\n-\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n-\n-## Running checks\n-\n-You can run package checks by using `devtools::check()` and check test coverage\n-with `covr::package_coverage()`.\n-\n-```r\n-# All package checks\n-devtools::check()\n-\n-# See test coverage statistics\n-covr::report()\n-covr::package_coverage()\n-```\n-\n-For full package validation, you can run the following commands from a terminal.\n-\n-```\n-R CMD build .\n-R CMD check arrow_*.tar.gz --as-cran\n-```\n-\n-\n-## Running additional CI checks\n-\n-On a pull request, there are some actions you can trigger by commenting on the\n-PR. We have additional CI checks that run nightly and can be requested on demand\n-using an internal tool called\n-[crossbow](https://arrow.apache.org/docs/developers/crossbow.html).\n-A few important GitHub comment commands are shown below.\n-\n-#### Run all extended R CI tasks\n-```\n-@github-actions crossbow submit -g r\n-```\n-\n-This runs each of the R-related CI tasks.\n-\n-#### Run a specific task\n-```\n-@github-actions crossbow submit {task-name}\n-```\n-\n-See the `r:` group definition near the beginning of the [crossbow configuration](https://github.com/apache/arrow/blob/master/dev/tasks/tasks.yml)\n-for a list of glob expression patterns that match names of items in the `tasks:`\n-list below it.\n-\n-#### Run linting and documentation building tasks\n-\n-```\n-@github-actions autotune\n-```\n-\n-This will run and fix lint C++ linting errors, run R documentation (among other\n-cleanup tasks), run styler on any changed R code, and commit the resulting\n-updates to the branch.\n-\n-# Summary of environment variables\n-\n-* See the user-facing [Install vignette](install.html) for a large number of\n-  environment variables that determine how the build works and what features\n-  get built.\n-* `TEST_OFFLINE_BUILD`: When set to `true`, the build script will not download\n-  prebuilt the C++ library binary.\n-  It will turn off any features that require a download, unless they're available\n-  in the `tools/cpp/thirdparty/download/` subfolder of the tar.gz file.\n-  `create_package_with_all_dependencies()` creates that subfolder.\n-  Regardless of this flag's value, `cmake` will be downloaded if it's unavailable.\n-* `TEST_R_WITHOUT_LIBARROW`: When set to `true`, skip tests that would require\n-  the C++ Arrow library (that is, almost everything).\n-\n-# Troubleshooting\n-\n-Note that after any change to libarrow, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to libarrow source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n-\n-## Arrow library - R package mismatches\n-\n-If libarrow and the R package have diverged, you will see errors like:\n-\n-```\n-Error: package or namespace load failed for \u2018arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n- unable to load shared object '/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so, 6): Symbol not found: __ZN5arrow2io16RandomAccessFile9ReadAsyncERKNS0_9IOContextExx\n-  Referenced from: /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so\n-  Expected in: flat namespace\n- in /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so\n-Error: loading failed\n-Execution halted\n-ERROR: loading failed\n-```\n-\n-To resolve this, try [rebuilding the Arrow library](#step-3-building-arrow).\n-\n-## Multiple versions of libarrow\n-\n-If you are installing from a user-level directory, and you already have a\n-previous installation of libarrow in a system directory, you get you may get\n-errors like the following when you install the R package:\n-\n-```\n-Error: package or namespace load failed for \u2018arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n- unable to load shared object '/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: /usr/local/lib/libarrow.400.dylib\n-  Referenced from: /usr/local/lib/libparquet.400.dylib\n-  Reason: image not found\n-```\n-\n-If this happens, you need to make sure that you don't let R link to your system\n-library when building arrow. You can do this a number of different ways:\n-\n-* Setting the `MAKEFLAGS` environment variable to `\"LDFLAGS=\"` (see below for an example) this is the recommended way to accomplish this\n-* Using {withr}'s `with_makevars(list(LDFLAGS = \"\"), ...)`\n-* adding `LDFLAGS=` to your `~/.R/Makevars` file (the least recommended way, though it is a common debugging approach suggested online)\n-\n-```{bash, save=run & !sys_install & macos, hide=TRUE}\n-# Setup troubleshooting section\n-# install a system-level arrow on macOS\n-brew install apache-arrow\n-```\n-\n-\n-```{bash, save=run & !sys_install & ubuntu, hide=TRUE}\n-# Setup troubleshooting section\n-# install a system-level arrow on Ubuntu\n-sudo apt update\n-sudo apt install -y -V ca-certificates lsb-release wget\n-wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb\n-sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb\n-sudo apt update\n-sudo apt install -y -V libarrow-dev\n-```\n-\n-```{bash, save=run & !sys_install & macos}\n-MAKEFLAGS=\"LDFLAGS=\" R CMD INSTALL .\n-```\n-\n-\n-## `rpath` issues\n-\n-If the package fails to install/load with an error like this:\n-\n-```\n-  ** testing if installed package can be loaded from temporary location\n-  Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-  unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-```\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternatively, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g. `export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n-\n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you've previously installed the\n-libraries and want to upgrade the R package, you'll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html).\n-\n-## Other installation issues\n-\n-There are a number of scripts that are triggered when the arrow R package is installed. For package users who are not interacting with the underlying code, these should all just work without configuration and pull in the most complete pieces (e.g. official binaries that we host). However, knowing about these scripts can help package developers troubleshoot if things go wrong in them or things go wrong in an install.  See [the installation vignette](./install.html#how-dependencies-are-resolved) for more information.\n+* where necessary add extra arguments to the function signature for features \n+that don't exist in R but do in Arrow (e.g. passing in a schema when reading a\n+CSV dataset)\n\nReview comment:\n       Great point, agreed on the reference PR.  I'm also gonna tag some of the wider R dev team to pitch in on this, as I can't help but feeling there's a bit more to discuss on what docs we distribute with the package vs. what docs we just have on the pkgdown site.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-18T08:09:49.274+0000",
                    "updated": "2021-11-18T08:09:49.274+0000",
                    "started": "2021-11-18T08:09:49.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "683144",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/683145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r751991817\n\n\n\n##########\nFile path: r/vignettes/developing.Rmd\n##########\n@@ -38,567 +38,31 @@ set -e\n set -x\n ```\n \n-If you're looking to contribute to arrow, this vignette can help you set up a development environment that will enable you to write code and run tests locally. It outlines:\n+If you're interested in contributing to arrow, this vignette explains our approach, \n+at a high-level.  If you're looking for more detailed content, you may want to \n+look at one of the following links:\n \n-* how to build the components that make up the Arrow project and R package\n-* workflows that developers use\n-* some common troubleshooting steps and solutions\n+* [setting up a development environment and building the components that make up the Arrow project and R package](https://arrow.apache.org/docs/r/articles/developers/setup.html)\n+* [common Arrow dev workflow tasks](https://arrow.apache.org/docs/r/articles/developers/workflow.html)\n+* [running R with the C++ debugger attached](https://arrow.apache.org/docs/r/articles/developers/debugging.html)\n \n-This document is intended only for **developers** of Apache Arrow or the Arrow R package. R package users do not need to do any of this setup. If you're looking for how to install Arrow, see [the instructions in the readme](https://arrow.apache.org/docs/r/#installation).\n+# Approach to implementing functionality\n \n-This document is a work in progress and will grow and change as the Apache Arrow project grows and changes. We have tried to make these steps as robust as possible (in fact, we even test exactly these instructions on our nightly CI to ensure they don't become stale!), but custom configurations might conflict with these instructions and there are differences of opinion across developers about how to set up development environments like this.\n+Our general philosophy when implementing functionality is to match to existing \n+R function signatures which may be familiar to users, whilst exposing any \n+additional functionality available via Arrow.  The intention is to allow users \n+to be able to use their existing code with minimal changes, or new code or \n+approaches to learn.\n \n-We welcome any feedback you have about things that are confusing or additions you would like to see here - please [report an issue](https://issues.apache.org/jira/projects/ARROW/issues) if you have any suggestions or requests.\n+There are a number of ways in which we do this:\n \n-# Developer environment setup\n+* when implementing a function with an R equivalent, support the arguments \n+available in R version as much as possible - use the original parameter names \n+and translate to the arrow parameter name inside the function\n \n-## R-only {.tabset}\n+* if there are arrow parameters which do not exist in the R function, allow the\n+user to pass in those options through too\n \n-Windows and macOS users who wish to contribute to the R package and\n-don't need to alter libarrow (Arrow's C++ library) may be able to obtain a\n-recent version of the library without building from source.\n-\n-### Linux\n-\n-On Linux, you can download a .zip file containing libarrow from the\n-nightly repository.\n-\n-To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n-\n-```\n-nightly <- s3_bucket(\"arrow-r-nightly\")\n-nightly$ls(\"libarrow/bin\")\n-```\n-Version numbers in that repository correspond to dates.\n-\n-You'll need to create a `libarrow` directory inside the R package directory and unzip the zip file containing the compiled libarrow binary files into it.\n-\n-### macOS\n-On macOS, you can install libarrow using [Homebrew](https://brew.sh/):\n-\n-```bash\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n-\n-### Windows\n-\n-On Windows, you can download a .zip file containing libarrow from the nightly repository.\n-\n-To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n-\n-```\n-nightly <- s3_bucket(\"arrow-r-nightly\")\n-nightly$ls(\"libarrow/bin\")\n-```\n-Version numbers in that repository correspond to dates.\n-\n-You can set the `RWINLIB_LOCAL` environment variable to point to the zip file containing libarrow before installing the arrow R package.\n-\n-\n-## R and C++\n-\n-If you need to alter both libarrow and the R package code, or if you can't get a binary version of the latest libarrow elsewhere, you'll need to build it from source. This section discusses how to set up a C++ libarrow build configured to work with the R package. For more general resources, see the [Arrow C++ developer guide](https://arrow.apache.org/docs/developers/cpp/building.html).\n-\n-There are five major steps to the process.\n-\n-### Step 1 - Install dependencies {.tabset}\n-\n-When building libarrow, by default, system dependencies will be used if suitable versions are found.  If system dependencies are not present, libarrow will build them during its own build process. The only dependencies that you need to install _outside_ of the build process are [cmake](https://cmake.org/) (for configuring the build) and [openssl](https://www.openssl.org/) if you are building with S3 support.\n-\n-For a faster build, you may choose to pre-install more C++ library dependencies (such as [lz4](http://lz4.github.io/lz4/), [zstd](https://facebook.github.io/zstd/), etc.) on the system  so that they don't need to be built from source in the libarrow build.\n-\n-#### Ubuntu\n-```{bash, save=run & ubuntu}\n-sudo apt install -y cmake libcurl4-openssl-dev libssl-dev\n-```\n-\n-#### macOS\n-```{bash, save=run & macos}\n-brew install cmake openssl\n-```\n-\n-#### Windows\n-\n-Currently, the R package cannot be made to work with a local libarrow build. This will be resolved in a future release.\n-\n-### Step 2 - Configure the libarrow build\n-\n-We recommend that you configure libarrow to be built to a user-level directory rather than a system directory for your development work.  This is so that the development version you are using doesn't overwrite a released version of libarrow you may already have installed, and so that you are also able work with more than one version of libarrow (by using different `ARROW_HOME` directories for the different versions).\n-\n-In the example below, libarrow is installed to a directory called `dist` that has the same parent directory as the `arrow` checkout.  Your installation of the Arrow R package can point to any directory with any name, though we recommend *not* placing it inside of the `arrow` git checkout directory as unwanted changes could stop it working properly.\n-\n-```{bash, save=run & !sys_install}\n-export ARROW_HOME=$(pwd)/dist\n-mkdir $ARROW_HOME\n-```\n-\n-_Special instructions on Linux:_ You will need to set `LD_LIBRARY_PATH` to the `lib` directory that is under where you set `$ARROW_HOME`, before launching R and using arrow. One way to do this is to add it to your profile (we use `~/.bash_profile` here, but you might need to put this in a different file depending on your setup, e.g. if you use a shell other than `bash`). On macOS you do not need to do this because the macOS shared library paths are hardcoded to their locations during build time.\n-\n-```{bash, save=run & ubuntu & !sys_install}\n-export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\n-echo \"export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\" >> ~/.bash_profile\n-```\n-\n-Start by navigating in a terminal to the `arrow` repository. You will need to create a directory into which the C++ build will put its contents. We recommend that you make a `build` directory inside of the `cpp` directory of the Arrow git repository (it is git-ignored, so you won't accidentally check it in). Next, change directories to be inside `cpp/build`:\n-\n-```{bash, save=run & !sys_install}\n-pushd arrow\n-mkdir -p cpp/build\n-pushd cpp/build\n-```\n-\n-You'll first call `cmake` to configure the build and then `make install`. For the R package, you'll need to enable several features in libarrow using `-D` flags:\n-\n-```{bash, save=run & !sys_install}\n-cmake \\\n-  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n-  -DCMAKE_INSTALL_LIBDIR=lib \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  ..\n-```\n-\n-`..` refers to the C++ source directory: you're in `cpp/build` and the source is in `cpp`.\n-\n-#### Enabling more Arrow features\n-\n-To enable optional features including: S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags to your call to `cmake` (the trailing `\\` makes them easier to paste into a bash shell on a new line):\n-\n-```bash\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_S3=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n-\n-Other flags that may be useful:\n-\n-* `-DBoost_SOURCE=BUNDLED` and `-DThrift_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n-\n-* `-DCMAKE_BUILD_TYPE=debug` or `-DCMAKE_BUILD_TYPE=relwithdebinfo` can be useful for debugging. You probably don't want to do this generally because a debug build is much slower at runtime than the default `release` build.\n-\n-_Note_ `cmake` is particularly sensitive to whitespacing, if you see errors, check that you don't have any errant whitespace.\n-\n-### Step 3 - Building libarrow\n-\n-You can add `-j#` between `make` and `install` here too to speed up compilation by running in parallel (where `#` is the number of cores you have available).\n-\n-```{bash, save=run & !(sys_install & ubuntu)}\n-make -j8 install\n-```\n-\n-### Step 4 - Build the Arrow R package\n-\n-Once you've built libarrow, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n-\n-```{bash, save=run}\n-popd # To go back to the root directory of the project, from cpp/build\n-pushd r\n-R -e 'install.packages(\"remotes\"); remotes::install_deps(dependencies = TRUE)'\n-R CMD INSTALL .\n-```\n-\n-#### Compilation flags\n-\n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n-\n-```bash\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n-```\n-\n-#### Recompiling the C++ code\n-\n-With the setup described here, you should not need to rebuild the Arrow library or even the C++ source in the R package as you iterate and work on the R package. The only time those should need to be rebuilt is if you have changed the C++ in the R package (and even then, `R CMD INSTALL .` should only need to recompile the files that have changed) _or_ if the libarrow C++ has changed and there is a mismatch between libarrow and the R package. If you find yourself rebuilding either or both each time you install the package or run tests, something is probably wrong with your set up.\n-\n-<details>\n-<summary>For a full build: a `cmake` command with all of the R-relevant optional dependencies turned on. Development with other languages might require different flags as well. For example, to develop Python, you would need to also add `-DARROW_PYTHON=ON` (though all of the other flags used for Python are already included here).</summary>\n-<p>\n-\n-```bash\n-cmake \\\n-  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n-  -DCMAKE_INSTALL_LIBDIR=lib \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DARROW_S3=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-  ..\n-```\n-</p>\n-</details>\n-\n-## Installing a version of the R package with a specific git reference\n-\n-If you need an arrow installation from a specific repository or git reference, on most platforms except Windows, you can run:\n-\n-```{r}\n-remotes::install_github(\"apache/arrow/r\", build = FALSE)\n-```\n-\n-The `build = FALSE` argument is important so that the installation can access the\n-C++ source in the `cpp/` directory in `apache/arrow`.\n-\n-As with other installation methods, setting the environment variables `LIBARROW_MINIMAL=false` and `ARROW_R_DEV=true` will provide a more full-featured version of Arrow and provide more verbose output, respectively.\n-\n-For example, to install from the (fictional) branch `bugfix` from `apache/arrow` you could run:\n-\n-```r\n-Sys.setenv(LIBARROW_MINIMAL=\"false\")\n-remotes::install_github(\"apache/arrow/r@bugfix\", build = FALSE)\n-```\n-\n-Developers may wish to use this method of installing a specific commit\n-separate from another Arrow development environment or system installation\n-(e.g. we use this in [arrowbench](https://github.com/ursacomputing/arrowbench)\n-to install development versions of libarrow isolated from the system install). If\n-you already have libarrow installed system-wide, you may need to set\n-some additional variables in order to isolate this build from your system libraries:\n-\n-* Setting the environment variable `FORCE_BUNDLED_BUILD` to `true` will skip the `pkg-config` search for libarrow and attempt to build from the same source at the repository+ref given.\n-\n-* You may also need to set the Makevars `CPPFLAGS` and `LDFLAGS` to `\"\"` in order to prevent the installation process from attempting to link to already installed system versions of libarrow. One way to do this temporarily is wrapping your `remotes::install_github()` call like so:\n-```{r}\n-withr::with_makevars(list(CPPFLAGS = \"\", LDFLAGS = \"\"), remotes::install_github(...))\n-```\n-\n-# Common developer workflow tasks\n-\n-The `arrow/r` directory contains a `Makefile` to help with some common tasks from the command line (e.g. `make test`, `make doc`, `make clean`, etc.).\n-\n-## Loading arrow\n-\n-You can load the R package via `devtools::load_all()`.\n-\n-## Rebuilding the documentation\n-\n-The R documentation uses the [`@examplesIf`](https://roxygen2.r-lib.org/articles/rd.html#functions) tag introduced in `roxygen2` version 7.1.1.9001, which hasn't yet been released on CRAN at the time of writing.  If you are making changes which require updating the documentation, please install the development version of `roxygen2` from GitHub.\n-\n-```{r}\n-remotes::install_github(\"r-lib/roxygen2\")\n-```\n-\n-You can use `devtools::document()` and `pkgdown::build_site()` to rebuild the documentation and preview the results.\n-\n-```r\n-# Update roxygen documentation\n-devtools::document()\n-\n-# To preview the documentation website\n-pkgdown::build_site(preview=TRUE)\n-```\n-\n-## Styling and linting\n-\n-### R code\n-\n-The R code in the package follows [the tidyverse style](https://style.tidyverse.org/). On PR submission (and on pushes) our CI will run linting and will flag possible errors on the pull request with annotations.\n-\n-To run the [lintr](https://github.com/jimhester/lintr) locally, install the lintr package (note, we currently use a fork that includes fixes not yet accepted upstream, see how lintr is being installed in the file `ci/docker/linux-apt-lint.dockerfile` for the current status) and then run\n-\n-```{r}\n-lintr::lint_package(\"arrow/r\")\n-```\n-\n-You can automatically change the formatting of the code in the package using the [styler](https://styler.r-lib.org/) package. There are two ways to do this:\n-\n-1. Use the comment bot to do this automatically with the command `@github-actions autotune` on a PR, and commit it back to the branch.\n-\n-2. Run the styler locally either via Makefile commands:\n-\n-```bash\n-make style # (for only the files changed)\n-make style-all # (for all files)\n-```\n-\n-or in R:\n-\n-```{r}\n-# note the two excluded files which should not be styled\n-styler::style_pkg(exclude_files = c(\"tests/testthat/latin1.R\", \"data-raw/codegen.R\"))\n-```\n-\n-The styler package will fix many styling errors, thought not all lintr errors are automatically fixable with styler. The list of files we intentionally do not style is in `r/.styler_excludes.R`.\n-\n-### C++ code\n-\n-The arrow package uses some customized tools on top of [cpp11](https://cpp11.r-lib.org/) to prepare its\n-C++ code in `src/`. This is because there are some features that are only enabled\n-and built conditionally during build time. If you change C++ code in the R\n-package, you will need to set the `ARROW_R_DEV` environment variable to `true`\n-(optionally, add it to your `~/.Renviron` file to persist across sessions) so\n-that the `data-raw/codegen.R` file is used for code generation. The `Makefile`\n-commands also handles this automatically.\n-\n-We use Google C++ style in our C++ code. The easiest way to accomplish this is\n-use an editors/IDE that formats your code for you. Many popular editors/IDEs\n-have support for running `clang-format` on C++ files when you save them.\n-Installing/enabling the appropriate plugin may save you much frustration.\n-\n-Check for style errors with\n-\n-```bash\n-./lint.sh\n-```\n-\n-Fix any style issues before committing with\n-\n-```bash\n-./lint.sh --fix\n-```\n-\n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn't found, you can explicitly provide the path to it like:\n-\n-```bash\n-CLANG_FORMAT=$(which clang-format-8) ./lint.sh\n-```\n-\n-On macOS, you can get this by installing LLVM via Homebrew and running the script as:\n-```bash\n-CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh\n-```\n-\n-_Note_ that the lint script requires Python 3 and the Python dependencies\n-(note that `cmake_format is pinned to a specific version):\n-\n-* autopep8\n-* flake8\n-* cmake_format==0.5.2\n-\n-## Running tests\n-\n-Tests can be run either using `devtools::test()` or the Makefile alternative.\n-\n-```r\n-# Run the test suite, optionally filtering file names\n-devtools::test(filter=\"^regexp$\")\n-\n-# or the Makefile alternative from the arrow/r directory in a shell:\n-make test file=regexp\n-```\n-\n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n-\n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=true`\n-\n-* Some tests are disabled unless `ARROW_R_DEV=true`\n-\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=true`\n-\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n-\n-## Running checks\n-\n-You can run package checks by using `devtools::check()` and check test coverage\n-with `covr::package_coverage()`.\n-\n-```r\n-# All package checks\n-devtools::check()\n-\n-# See test coverage statistics\n-covr::report()\n-covr::package_coverage()\n-```\n-\n-For full package validation, you can run the following commands from a terminal.\n-\n-```\n-R CMD build .\n-R CMD check arrow_*.tar.gz --as-cran\n-```\n-\n-\n-## Running additional CI checks\n-\n-On a pull request, there are some actions you can trigger by commenting on the\n-PR. We have additional CI checks that run nightly and can be requested on demand\n-using an internal tool called\n-[crossbow](https://arrow.apache.org/docs/developers/crossbow.html).\n-A few important GitHub comment commands are shown below.\n-\n-#### Run all extended R CI tasks\n-```\n-@github-actions crossbow submit -g r\n-```\n-\n-This runs each of the R-related CI tasks.\n-\n-#### Run a specific task\n-```\n-@github-actions crossbow submit {task-name}\n-```\n-\n-See the `r:` group definition near the beginning of the [crossbow configuration](https://github.com/apache/arrow/blob/master/dev/tasks/tasks.yml)\n-for a list of glob expression patterns that match names of items in the `tasks:`\n-list below it.\n-\n-#### Run linting and documentation building tasks\n-\n-```\n-@github-actions autotune\n-```\n-\n-This will run and fix lint C++ linting errors, run R documentation (among other\n-cleanup tasks), run styler on any changed R code, and commit the resulting\n-updates to the branch.\n-\n-# Summary of environment variables\n-\n-* See the user-facing [Install vignette](install.html) for a large number of\n-  environment variables that determine how the build works and what features\n-  get built.\n-* `TEST_OFFLINE_BUILD`: When set to `true`, the build script will not download\n-  prebuilt the C++ library binary.\n-  It will turn off any features that require a download, unless they're available\n-  in the `tools/cpp/thirdparty/download/` subfolder of the tar.gz file.\n-  `create_package_with_all_dependencies()` creates that subfolder.\n-  Regardless of this flag's value, `cmake` will be downloaded if it's unavailable.\n-* `TEST_R_WITHOUT_LIBARROW`: When set to `true`, skip tests that would require\n-  the C++ Arrow library (that is, almost everything).\n-\n-# Troubleshooting\n-\n-Note that after any change to libarrow, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to libarrow source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n-\n-## Arrow library - R package mismatches\n-\n-If libarrow and the R package have diverged, you will see errors like:\n-\n-```\n-Error: package or namespace load failed for \u2018arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n- unable to load shared object '/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so, 6): Symbol not found: __ZN5arrow2io16RandomAccessFile9ReadAsyncERKNS0_9IOContextExx\n-  Referenced from: /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so\n-  Expected in: flat namespace\n- in /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so\n-Error: loading failed\n-Execution halted\n-ERROR: loading failed\n-```\n-\n-To resolve this, try [rebuilding the Arrow library](#step-3-building-arrow).\n-\n-## Multiple versions of libarrow\n-\n-If you are installing from a user-level directory, and you already have a\n-previous installation of libarrow in a system directory, you get you may get\n-errors like the following when you install the R package:\n-\n-```\n-Error: package or namespace load failed for \u2018arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n- unable to load shared object '/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: /usr/local/lib/libarrow.400.dylib\n-  Referenced from: /usr/local/lib/libparquet.400.dylib\n-  Reason: image not found\n-```\n-\n-If this happens, you need to make sure that you don't let R link to your system\n-library when building arrow. You can do this a number of different ways:\n-\n-* Setting the `MAKEFLAGS` environment variable to `\"LDFLAGS=\"` (see below for an example) this is the recommended way to accomplish this\n-* Using {withr}'s `with_makevars(list(LDFLAGS = \"\"), ...)`\n-* adding `LDFLAGS=` to your `~/.R/Makevars` file (the least recommended way, though it is a common debugging approach suggested online)\n-\n-```{bash, save=run & !sys_install & macos, hide=TRUE}\n-# Setup troubleshooting section\n-# install a system-level arrow on macOS\n-brew install apache-arrow\n-```\n-\n-\n-```{bash, save=run & !sys_install & ubuntu, hide=TRUE}\n-# Setup troubleshooting section\n-# install a system-level arrow on Ubuntu\n-sudo apt update\n-sudo apt install -y -V ca-certificates lsb-release wget\n-wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb\n-sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb\n-sudo apt update\n-sudo apt install -y -V libarrow-dev\n-```\n-\n-```{bash, save=run & !sys_install & macos}\n-MAKEFLAGS=\"LDFLAGS=\" R CMD INSTALL .\n-```\n-\n-\n-## `rpath` issues\n-\n-If the package fails to install/load with an error like this:\n-\n-```\n-  ** testing if installed package can be loaded from temporary location\n-  Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-  unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-```\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternatively, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g. `export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n-\n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you've previously installed the\n-libraries and want to upgrade the R package, you'll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html).\n-\n-## Other installation issues\n-\n-There are a number of scripts that are triggered when the arrow R package is installed. For package users who are not interacting with the underlying code, these should all just work without configuration and pull in the most complete pieces (e.g. official binaries that we host). However, knowing about these scripts can help package developers troubleshoot if things go wrong in them or things go wrong in an install.  See [the installation vignette](./install.html#how-dependencies-are-resolved) for more information.\n+* where necessary add extra arguments to the function signature for features \n+that don't exist in R but do in Arrow (e.g. passing in a schema when reading a\n+CSV dataset)\n\nReview comment:\n       @jonkeane What are your thoughts on this?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-18T08:10:02.235+0000",
                    "updated": "2021-11-18T08:10:02.235+0000",
                    "started": "2021-11-18T08:10:02.235+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "683145",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/683548",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r752512181\n\n\n\n##########\nFile path: r/vignettes/developing.Rmd\n##########\n@@ -38,567 +38,31 @@ set -e\n set -x\n ```\n \n-If you're looking to contribute to arrow, this vignette can help you set up a development environment that will enable you to write code and run tests locally. It outlines:\n+If you're interested in contributing to arrow, this vignette explains our approach, \n+at a high-level.  If you're looking for more detailed content, you may want to \n+look at one of the following links:\n \n-* how to build the components that make up the Arrow project and R package\n-* workflows that developers use\n-* some common troubleshooting steps and solutions\n+* [setting up a development environment and building the components that make up the Arrow project and R package](https://arrow.apache.org/docs/r/articles/developers/setup.html)\n+* [common Arrow dev workflow tasks](https://arrow.apache.org/docs/r/articles/developers/workflow.html)\n+* [running R with the C++ debugger attached](https://arrow.apache.org/docs/r/articles/developers/debugging.html)\n \n-This document is intended only for **developers** of Apache Arrow or the Arrow R package. R package users do not need to do any of this setup. If you're looking for how to install Arrow, see [the instructions in the readme](https://arrow.apache.org/docs/r/#installation).\n+# Approach to implementing functionality\n \n-This document is a work in progress and will grow and change as the Apache Arrow project grows and changes. We have tried to make these steps as robust as possible (in fact, we even test exactly these instructions on our nightly CI to ensure they don't become stale!), but custom configurations might conflict with these instructions and there are differences of opinion across developers about how to set up development environments like this.\n+Our general philosophy when implementing functionality is to match to existing \n+R function signatures which may be familiar to users, whilst exposing any \n+additional functionality available via Arrow.  The intention is to allow users \n+to be able to use their existing code with minimal changes, or new code or \n+approaches to learn.\n \n-We welcome any feedback you have about things that are confusing or additions you would like to see here - please [report an issue](https://issues.apache.org/jira/projects/ARROW/issues) if you have any suggestions or requests.\n+There are a number of ways in which we do this:\n \n-# Developer environment setup\n+* when implementing a function with an R equivalent, support the arguments \n+available in R version as much as possible - use the original parameter names \n+and translate to the arrow parameter name inside the function\n \n-## R-only {.tabset}\n+* if there are arrow parameters which do not exist in the R function, allow the\n+user to pass in those options through too\n \n-Windows and macOS users who wish to contribute to the R package and\n-don't need to alter libarrow (Arrow's C++ library) may be able to obtain a\n-recent version of the library without building from source.\n-\n-### Linux\n-\n-On Linux, you can download a .zip file containing libarrow from the\n-nightly repository.\n-\n-To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n-\n-```\n-nightly <- s3_bucket(\"arrow-r-nightly\")\n-nightly$ls(\"libarrow/bin\")\n-```\n-Version numbers in that repository correspond to dates.\n-\n-You'll need to create a `libarrow` directory inside the R package directory and unzip the zip file containing the compiled libarrow binary files into it.\n-\n-### macOS\n-On macOS, you can install libarrow using [Homebrew](https://brew.sh/):\n-\n-```bash\n-# For the released version:\n-brew install apache-arrow\n-# Or for a development version, you can try:\n-brew install apache-arrow --HEAD\n-```\n-\n-### Windows\n-\n-On Windows, you can download a .zip file containing libarrow from the nightly repository.\n-\n-To see what nightlies are available, you can use arrow's (or any other S3 client's) S3 listing functionality to see what is in the bucket `s3://arrow-r-nightly/libarrow/bin`:\n-\n-```\n-nightly <- s3_bucket(\"arrow-r-nightly\")\n-nightly$ls(\"libarrow/bin\")\n-```\n-Version numbers in that repository correspond to dates.\n-\n-You can set the `RWINLIB_LOCAL` environment variable to point to the zip file containing libarrow before installing the arrow R package.\n-\n-\n-## R and C++\n-\n-If you need to alter both libarrow and the R package code, or if you can't get a binary version of the latest libarrow elsewhere, you'll need to build it from source. This section discusses how to set up a C++ libarrow build configured to work with the R package. For more general resources, see the [Arrow C++ developer guide](https://arrow.apache.org/docs/developers/cpp/building.html).\n-\n-There are five major steps to the process.\n-\n-### Step 1 - Install dependencies {.tabset}\n-\n-When building libarrow, by default, system dependencies will be used if suitable versions are found.  If system dependencies are not present, libarrow will build them during its own build process. The only dependencies that you need to install _outside_ of the build process are [cmake](https://cmake.org/) (for configuring the build) and [openssl](https://www.openssl.org/) if you are building with S3 support.\n-\n-For a faster build, you may choose to pre-install more C++ library dependencies (such as [lz4](http://lz4.github.io/lz4/), [zstd](https://facebook.github.io/zstd/), etc.) on the system  so that they don't need to be built from source in the libarrow build.\n-\n-#### Ubuntu\n-```{bash, save=run & ubuntu}\n-sudo apt install -y cmake libcurl4-openssl-dev libssl-dev\n-```\n-\n-#### macOS\n-```{bash, save=run & macos}\n-brew install cmake openssl\n-```\n-\n-#### Windows\n-\n-Currently, the R package cannot be made to work with a local libarrow build. This will be resolved in a future release.\n-\n-### Step 2 - Configure the libarrow build\n-\n-We recommend that you configure libarrow to be built to a user-level directory rather than a system directory for your development work.  This is so that the development version you are using doesn't overwrite a released version of libarrow you may already have installed, and so that you are also able work with more than one version of libarrow (by using different `ARROW_HOME` directories for the different versions).\n-\n-In the example below, libarrow is installed to a directory called `dist` that has the same parent directory as the `arrow` checkout.  Your installation of the Arrow R package can point to any directory with any name, though we recommend *not* placing it inside of the `arrow` git checkout directory as unwanted changes could stop it working properly.\n-\n-```{bash, save=run & !sys_install}\n-export ARROW_HOME=$(pwd)/dist\n-mkdir $ARROW_HOME\n-```\n-\n-_Special instructions on Linux:_ You will need to set `LD_LIBRARY_PATH` to the `lib` directory that is under where you set `$ARROW_HOME`, before launching R and using arrow. One way to do this is to add it to your profile (we use `~/.bash_profile` here, but you might need to put this in a different file depending on your setup, e.g. if you use a shell other than `bash`). On macOS you do not need to do this because the macOS shared library paths are hardcoded to their locations during build time.\n-\n-```{bash, save=run & ubuntu & !sys_install}\n-export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\n-echo \"export LD_LIBRARY_PATH=$ARROW_HOME/lib:$LD_LIBRARY_PATH\" >> ~/.bash_profile\n-```\n-\n-Start by navigating in a terminal to the `arrow` repository. You will need to create a directory into which the C++ build will put its contents. We recommend that you make a `build` directory inside of the `cpp` directory of the Arrow git repository (it is git-ignored, so you won't accidentally check it in). Next, change directories to be inside `cpp/build`:\n-\n-```{bash, save=run & !sys_install}\n-pushd arrow\n-mkdir -p cpp/build\n-pushd cpp/build\n-```\n-\n-You'll first call `cmake` to configure the build and then `make install`. For the R package, you'll need to enable several features in libarrow using `-D` flags:\n-\n-```{bash, save=run & !sys_install}\n-cmake \\\n-  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n-  -DCMAKE_INSTALL_LIBDIR=lib \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  ..\n-```\n-\n-`..` refers to the C++ source directory: you're in `cpp/build` and the source is in `cpp`.\n-\n-#### Enabling more Arrow features\n-\n-To enable optional features including: S3 support, an alternative memory allocator, and additional compression libraries, add some or all of these flags to your call to `cmake` (the trailing `\\` makes them easier to paste into a bash shell on a new line):\n-\n-```bash\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_S3=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-```\n-\n-Other flags that may be useful:\n-\n-* `-DBoost_SOURCE=BUNDLED` and `-DThrift_SOURCE=BUNDLED`, for example, or any other dependency `*_SOURCE`, if you have a system version of a C++ dependency that doesn't work correctly with Arrow. This tells the build to compile its own version of the dependency from source.\n-\n-* `-DCMAKE_BUILD_TYPE=debug` or `-DCMAKE_BUILD_TYPE=relwithdebinfo` can be useful for debugging. You probably don't want to do this generally because a debug build is much slower at runtime than the default `release` build.\n-\n-_Note_ `cmake` is particularly sensitive to whitespacing, if you see errors, check that you don't have any errant whitespace.\n-\n-### Step 3 - Building libarrow\n-\n-You can add `-j#` between `make` and `install` here too to speed up compilation by running in parallel (where `#` is the number of cores you have available).\n-\n-```{bash, save=run & !(sys_install & ubuntu)}\n-make -j8 install\n-```\n-\n-### Step 4 - Build the Arrow R package\n-\n-Once you've built libarrow, you can install the R package and its\n-dependencies, along with additional dev dependencies, from the git\n-checkout:\n-\n-```{bash, save=run}\n-popd # To go back to the root directory of the project, from cpp/build\n-pushd r\n-R -e 'install.packages(\"remotes\"); remotes::install_deps(dependencies = TRUE)'\n-R CMD INSTALL .\n-```\n-\n-#### Compilation flags\n-\n-If you need to set any compilation flags while building the C++\n-extensions, you can use the `ARROW_R_CXXFLAGS` environment variable. For\n-example, if you are using `perf` to profile the R extensions, you may\n-need to set\n-\n-```bash\n-export ARROW_R_CXXFLAGS=-fno-omit-frame-pointer\n-```\n-\n-#### Recompiling the C++ code\n-\n-With the setup described here, you should not need to rebuild the Arrow library or even the C++ source in the R package as you iterate and work on the R package. The only time those should need to be rebuilt is if you have changed the C++ in the R package (and even then, `R CMD INSTALL .` should only need to recompile the files that have changed) _or_ if the libarrow C++ has changed and there is a mismatch between libarrow and the R package. If you find yourself rebuilding either or both each time you install the package or run tests, something is probably wrong with your set up.\n-\n-<details>\n-<summary>For a full build: a `cmake` command with all of the R-relevant optional dependencies turned on. Development with other languages might require different flags as well. For example, to develop Python, you would need to also add `-DARROW_PYTHON=ON` (though all of the other flags used for Python are already included here).</summary>\n-<p>\n-\n-```bash\n-cmake \\\n-  -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\n-  -DCMAKE_INSTALL_LIBDIR=lib \\\n-  -DARROW_COMPUTE=ON \\\n-  -DARROW_CSV=ON \\\n-  -DARROW_DATASET=ON \\\n-  -DARROW_EXTRA_ERROR_CONTEXT=ON \\\n-  -DARROW_FILESYSTEM=ON \\\n-  -DARROW_INSTALL_NAME_RPATH=OFF \\\n-  -DARROW_JEMALLOC=ON \\\n-  -DARROW_JSON=ON \\\n-  -DARROW_MIMALLOC=ON \\\n-  -DARROW_PARQUET=ON \\\n-  -DARROW_S3=ON \\\n-  -DARROW_WITH_BROTLI=ON \\\n-  -DARROW_WITH_BZ2=ON \\\n-  -DARROW_WITH_LZ4=ON \\\n-  -DARROW_WITH_SNAPPY=ON \\\n-  -DARROW_WITH_ZLIB=ON \\\n-  -DARROW_WITH_ZSTD=ON \\\n-  ..\n-```\n-</p>\n-</details>\n-\n-## Installing a version of the R package with a specific git reference\n-\n-If you need an arrow installation from a specific repository or git reference, on most platforms except Windows, you can run:\n-\n-```{r}\n-remotes::install_github(\"apache/arrow/r\", build = FALSE)\n-```\n-\n-The `build = FALSE` argument is important so that the installation can access the\n-C++ source in the `cpp/` directory in `apache/arrow`.\n-\n-As with other installation methods, setting the environment variables `LIBARROW_MINIMAL=false` and `ARROW_R_DEV=true` will provide a more full-featured version of Arrow and provide more verbose output, respectively.\n-\n-For example, to install from the (fictional) branch `bugfix` from `apache/arrow` you could run:\n-\n-```r\n-Sys.setenv(LIBARROW_MINIMAL=\"false\")\n-remotes::install_github(\"apache/arrow/r@bugfix\", build = FALSE)\n-```\n-\n-Developers may wish to use this method of installing a specific commit\n-separate from another Arrow development environment or system installation\n-(e.g. we use this in [arrowbench](https://github.com/ursacomputing/arrowbench)\n-to install development versions of libarrow isolated from the system install). If\n-you already have libarrow installed system-wide, you may need to set\n-some additional variables in order to isolate this build from your system libraries:\n-\n-* Setting the environment variable `FORCE_BUNDLED_BUILD` to `true` will skip the `pkg-config` search for libarrow and attempt to build from the same source at the repository+ref given.\n-\n-* You may also need to set the Makevars `CPPFLAGS` and `LDFLAGS` to `\"\"` in order to prevent the installation process from attempting to link to already installed system versions of libarrow. One way to do this temporarily is wrapping your `remotes::install_github()` call like so:\n-```{r}\n-withr::with_makevars(list(CPPFLAGS = \"\", LDFLAGS = \"\"), remotes::install_github(...))\n-```\n-\n-# Common developer workflow tasks\n-\n-The `arrow/r` directory contains a `Makefile` to help with some common tasks from the command line (e.g. `make test`, `make doc`, `make clean`, etc.).\n-\n-## Loading arrow\n-\n-You can load the R package via `devtools::load_all()`.\n-\n-## Rebuilding the documentation\n-\n-The R documentation uses the [`@examplesIf`](https://roxygen2.r-lib.org/articles/rd.html#functions) tag introduced in `roxygen2` version 7.1.1.9001, which hasn't yet been released on CRAN at the time of writing.  If you are making changes which require updating the documentation, please install the development version of `roxygen2` from GitHub.\n-\n-```{r}\n-remotes::install_github(\"r-lib/roxygen2\")\n-```\n-\n-You can use `devtools::document()` and `pkgdown::build_site()` to rebuild the documentation and preview the results.\n-\n-```r\n-# Update roxygen documentation\n-devtools::document()\n-\n-# To preview the documentation website\n-pkgdown::build_site(preview=TRUE)\n-```\n-\n-## Styling and linting\n-\n-### R code\n-\n-The R code in the package follows [the tidyverse style](https://style.tidyverse.org/). On PR submission (and on pushes) our CI will run linting and will flag possible errors on the pull request with annotations.\n-\n-To run the [lintr](https://github.com/jimhester/lintr) locally, install the lintr package (note, we currently use a fork that includes fixes not yet accepted upstream, see how lintr is being installed in the file `ci/docker/linux-apt-lint.dockerfile` for the current status) and then run\n-\n-```{r}\n-lintr::lint_package(\"arrow/r\")\n-```\n-\n-You can automatically change the formatting of the code in the package using the [styler](https://styler.r-lib.org/) package. There are two ways to do this:\n-\n-1. Use the comment bot to do this automatically with the command `@github-actions autotune` on a PR, and commit it back to the branch.\n-\n-2. Run the styler locally either via Makefile commands:\n-\n-```bash\n-make style # (for only the files changed)\n-make style-all # (for all files)\n-```\n-\n-or in R:\n-\n-```{r}\n-# note the two excluded files which should not be styled\n-styler::style_pkg(exclude_files = c(\"tests/testthat/latin1.R\", \"data-raw/codegen.R\"))\n-```\n-\n-The styler package will fix many styling errors, thought not all lintr errors are automatically fixable with styler. The list of files we intentionally do not style is in `r/.styler_excludes.R`.\n-\n-### C++ code\n-\n-The arrow package uses some customized tools on top of [cpp11](https://cpp11.r-lib.org/) to prepare its\n-C++ code in `src/`. This is because there are some features that are only enabled\n-and built conditionally during build time. If you change C++ code in the R\n-package, you will need to set the `ARROW_R_DEV` environment variable to `true`\n-(optionally, add it to your `~/.Renviron` file to persist across sessions) so\n-that the `data-raw/codegen.R` file is used for code generation. The `Makefile`\n-commands also handles this automatically.\n-\n-We use Google C++ style in our C++ code. The easiest way to accomplish this is\n-use an editors/IDE that formats your code for you. Many popular editors/IDEs\n-have support for running `clang-format` on C++ files when you save them.\n-Installing/enabling the appropriate plugin may save you much frustration.\n-\n-Check for style errors with\n-\n-```bash\n-./lint.sh\n-```\n-\n-Fix any style issues before committing with\n-\n-```bash\n-./lint.sh --fix\n-```\n-\n-The lint script requires Python 3 and `clang-format-8`. If the command\n-isn't found, you can explicitly provide the path to it like:\n-\n-```bash\n-CLANG_FORMAT=$(which clang-format-8) ./lint.sh\n-```\n-\n-On macOS, you can get this by installing LLVM via Homebrew and running the script as:\n-```bash\n-CLANG_FORMAT=$(brew --prefix llvm@8)/bin/clang-format ./lint.sh\n-```\n-\n-_Note_ that the lint script requires Python 3 and the Python dependencies\n-(note that `cmake_format is pinned to a specific version):\n-\n-* autopep8\n-* flake8\n-* cmake_format==0.5.2\n-\n-## Running tests\n-\n-Tests can be run either using `devtools::test()` or the Makefile alternative.\n-\n-```r\n-# Run the test suite, optionally filtering file names\n-devtools::test(filter=\"^regexp$\")\n-\n-# or the Makefile alternative from the arrow/r directory in a shell:\n-make test file=regexp\n-```\n-\n-Some tests are conditionally enabled based on the availability of certain\n-features in the package build (S3 support, compression libraries, etc.).\n-Others are generally skipped by default but can be enabled with environment\n-variables or other settings:\n-\n-* All tests are skipped on Linux if the package builds without the C++ libarrow.\n-  To make the build fail if libarrow is not available (as in, to test that\n-  the C++ build was successful), set `TEST_R_WITH_ARROW=true`\n-\n-* Some tests are disabled unless `ARROW_R_DEV=true`\n-\n-* Tests that require allocating >2GB of memory to test Large types are disabled\n-  unless `ARROW_LARGE_MEMORY_TESTS=true`\n-\n-* Integration tests against a real S3 bucket are disabled unless credentials\n-  are set in `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`; these are available\n-  on request\n-\n-* S3 tests using [MinIO](https://min.io/) locally are enabled if the\n-  `minio server` process is found running. If you're running MinIO with custom\n-  settings, you can set `MINIO_ACCESS_KEY`, `MINIO_SECRET_KEY`, and\n-  `MINIO_PORT` to override the defaults.\n-\n-## Running checks\n-\n-You can run package checks by using `devtools::check()` and check test coverage\n-with `covr::package_coverage()`.\n-\n-```r\n-# All package checks\n-devtools::check()\n-\n-# See test coverage statistics\n-covr::report()\n-covr::package_coverage()\n-```\n-\n-For full package validation, you can run the following commands from a terminal.\n-\n-```\n-R CMD build .\n-R CMD check arrow_*.tar.gz --as-cran\n-```\n-\n-\n-## Running additional CI checks\n-\n-On a pull request, there are some actions you can trigger by commenting on the\n-PR. We have additional CI checks that run nightly and can be requested on demand\n-using an internal tool called\n-[crossbow](https://arrow.apache.org/docs/developers/crossbow.html).\n-A few important GitHub comment commands are shown below.\n-\n-#### Run all extended R CI tasks\n-```\n-@github-actions crossbow submit -g r\n-```\n-\n-This runs each of the R-related CI tasks.\n-\n-#### Run a specific task\n-```\n-@github-actions crossbow submit {task-name}\n-```\n-\n-See the `r:` group definition near the beginning of the [crossbow configuration](https://github.com/apache/arrow/blob/master/dev/tasks/tasks.yml)\n-for a list of glob expression patterns that match names of items in the `tasks:`\n-list below it.\n-\n-#### Run linting and documentation building tasks\n-\n-```\n-@github-actions autotune\n-```\n-\n-This will run and fix lint C++ linting errors, run R documentation (among other\n-cleanup tasks), run styler on any changed R code, and commit the resulting\n-updates to the branch.\n-\n-# Summary of environment variables\n-\n-* See the user-facing [Install vignette](install.html) for a large number of\n-  environment variables that determine how the build works and what features\n-  get built.\n-* `TEST_OFFLINE_BUILD`: When set to `true`, the build script will not download\n-  prebuilt the C++ library binary.\n-  It will turn off any features that require a download, unless they're available\n-  in the `tools/cpp/thirdparty/download/` subfolder of the tar.gz file.\n-  `create_package_with_all_dependencies()` creates that subfolder.\n-  Regardless of this flag's value, `cmake` will be downloaded if it's unavailable.\n-* `TEST_R_WITHOUT_LIBARROW`: When set to `true`, skip tests that would require\n-  the C++ Arrow library (that is, almost everything).\n-\n-# Troubleshooting\n-\n-Note that after any change to libarrow, you must reinstall it and\n-run `make clean` or `git clean -fdx .` to remove any cached object code\n-in the `r/src/` directory before reinstalling the R package. This is\n-only necessary if you make changes to libarrow source; you do not\n-need to manually purge object files if you are only editing R or C++\n-code inside `r/`.\n-\n-## Arrow library - R package mismatches\n-\n-If libarrow and the R package have diverged, you will see errors like:\n-\n-```\n-Error: package or namespace load failed for \u2018arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n- unable to load shared object '/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so, 6): Symbol not found: __ZN5arrow2io16RandomAccessFile9ReadAsyncERKNS0_9IOContextExx\n-  Referenced from: /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so\n-  Expected in: flat namespace\n- in /Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so\n-Error: loading failed\n-Execution halted\n-ERROR: loading failed\n-```\n-\n-To resolve this, try [rebuilding the Arrow library](#step-3-building-arrow).\n-\n-## Multiple versions of libarrow\n-\n-If you are installing from a user-level directory, and you already have a\n-previous installation of libarrow in a system directory, you get you may get\n-errors like the following when you install the R package:\n-\n-```\n-Error: package or namespace load failed for \u2018arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n- unable to load shared object '/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Library/Frameworks/R.framework/Versions/4.0/Resources/library/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: /usr/local/lib/libarrow.400.dylib\n-  Referenced from: /usr/local/lib/libparquet.400.dylib\n-  Reason: image not found\n-```\n-\n-If this happens, you need to make sure that you don't let R link to your system\n-library when building arrow. You can do this a number of different ways:\n-\n-* Setting the `MAKEFLAGS` environment variable to `\"LDFLAGS=\"` (see below for an example) this is the recommended way to accomplish this\n-* Using {withr}'s `with_makevars(list(LDFLAGS = \"\"), ...)`\n-* adding `LDFLAGS=` to your `~/.R/Makevars` file (the least recommended way, though it is a common debugging approach suggested online)\n-\n-```{bash, save=run & !sys_install & macos, hide=TRUE}\n-# Setup troubleshooting section\n-# install a system-level arrow on macOS\n-brew install apache-arrow\n-```\n-\n-\n-```{bash, save=run & !sys_install & ubuntu, hide=TRUE}\n-# Setup troubleshooting section\n-# install a system-level arrow on Ubuntu\n-sudo apt update\n-sudo apt install -y -V ca-certificates lsb-release wget\n-wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb\n-sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb\n-sudo apt update\n-sudo apt install -y -V libarrow-dev\n-```\n-\n-```{bash, save=run & !sys_install & macos}\n-MAKEFLAGS=\"LDFLAGS=\" R CMD INSTALL .\n-```\n-\n-\n-## `rpath` issues\n-\n-If the package fails to install/load with an error like this:\n-\n-```\n-  ** testing if installed package can be loaded from temporary location\n-  Error: package or namespace load failed for 'arrow' in dyn.load(file, DLLpath = DLLpath, ...):\n-  unable to load shared object '/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so':\n-  dlopen(/Users/you/R/00LOCK-r/00new/arrow/libs/arrow.so, 6): Library not loaded: @rpath/libarrow.14.dylib\n-```\n-\n-ensure that `-DARROW_INSTALL_NAME_RPATH=OFF` was passed (this is important on\n-macOS to prevent problems at link time and is a no-op on other platforms).\n-Alternatively, try setting the environment variable `R_LD_LIBRARY_PATH` to\n-wherever Arrow C++ was put in `make install`, e.g. `export\n-R_LD_LIBRARY_PATH=/usr/local/lib`, and retry installing the R package.\n-\n-When installing from source, if the R and C++ library versions do not\n-match, installation may fail. If you've previously installed the\n-libraries and want to upgrade the R package, you'll need to update the\n-Arrow C++ library first.\n-\n-For any other build/configuration challenges, see the [C++ developer\n-guide](https://arrow.apache.org/docs/developers/cpp/building.html).\n-\n-## Other installation issues\n-\n-There are a number of scripts that are triggered when the arrow R package is installed. For package users who are not interacting with the underlying code, these should all just work without configuration and pull in the most complete pieces (e.g. official binaries that we host). However, knowing about these scripts can help package developers troubleshoot if things go wrong in them or things go wrong in an install.  See [the installation vignette](./install.html#how-dependencies-are-resolved) for more information.\n+* where necessary add extra arguments to the function signature for features \n+that don't exist in R but do in Arrow (e.g. passing in a schema when reading a\n+CSV dataset)\n\nReview comment:\n       Personally, I think of the pkgdown site as *the* canonical documentation, especially for vignettes. So I don't have a strong opinion / I'm not worried about not including it inside of / distributed along side the package.\r\n   \r\n   As for examples: I think that would be great. We can link to PRs (though if the link goes to CRAN it's susceptible to a redirect/rot that will anger CRAN \u2014 we should and do check for that, but just a reminder). Though sometimes when writing examples I find it a little bit easier to make a dedicated example that has lots of extra comments/commentary/possibly even glosses over some of the reality involved with implementing them.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-18T18:25:01.648+0000",
                    "updated": "2021-11-18T18:25:01.648+0000",
                    "started": "2021-11-18T18:25:01.648+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "683548",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/683550",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r752514766\n\n\n\n##########\nFile path: r/vignettes/developers/setup.Rmd\n##########\n@@ -0,0 +1,410 @@\n+# Developer environment setup\n+\n+```{r setup-options, include=FALSE}\n+knitr::opts_chunk$set(error = TRUE, eval = FALSE)\n+# Get environment variables describing what to evaluate\n+run <- tolower(Sys.getenv(\"RUN_DEVDOCS\", \"false\")) == \"true\"\n+macos <- tolower(Sys.getenv(\"DEVDOCS_MACOS\", \"false\")) == \"true\"\n+ubuntu <- tolower(Sys.getenv(\"DEVDOCS_UBUNTU\", \"false\")) == \"true\"\n+sys_install <- tolower(Sys.getenv(\"DEVDOCS_SYSTEM_INSTALL\", \"false\")) == \"true\"\n+# Update the source knit_hook to save the chunk (if it is marked to be saved)\n+knit_hooks_source <- knitr::knit_hooks$get(\"source\")\n+knitr::knit_hooks$set(source = function(x, options) {\n+  # Extra paranoia about when this will write the chunks to the script, we will\n+  # only save when:\n+  #   * CI is true\n+  #   * RUN_DEVDOCS is true\n+  #   * options$save is TRUE (and a check that not NULL won't crash it)\n+  if (as.logical(Sys.getenv(\"CI\", FALSE)) && run && !is.null(options$save) && options$save)\n+    cat(x, file = \"script.sh\", append = TRUE, sep = \"\\n\")\n+  # but hide the blocks we want hidden:\n+  if (!is.null(options$hide) && options$hide) {\n+    return(NULL)\n+  }\n+  knit_hooks_source(x, options)\n+})\n+```\n+\n+```{bash, save=run, hide=TRUE}\n+# Stop on failure, echo input as we go\n+set -e\n+set -x\n+```\n+\n+This document is intended only for **developers** of Apache Arrow or \n+the Arrow R package. R package users do not need to do any of this setup. \n+If you're looking for how to install Arrow, see \n+[the instructions in the readme](https://arrow.apache.org/docs/r/#installation).\n+\n+This document is a work in progress and will grow and change as the Apache Arrow\n+project grows and changes. We have tried to make these steps as robust as \n+possible (in fact, we even test exactly these instructions on our nightly CI to \n+ensure they don't become stale!), but custom configurations might conflict with \n+these instructions and there are differences of opinion across developers about \n+how to set up development environments like this.\n+\n+We welcome any feedback you have about things that are confusing or additions \n+you would like to see here - please \n+[report an issue](https://issues.apache.org/jira/projects/ARROW/issues) if you \n+have any suggestions or requests.\n+\n+\n+## R-only {.tabset}\n+\n+Windows and macOS users who wish to contribute to the R package and\n+don't need to alter libarrow (Arrow's C++ library) may be able to obtain a\n+recent version of the library without building from source.\n\nReview comment:\n       While we're in here, could we fold in the spirit of https://issues.apache.org/jira/browse/ARROW-14371?\r\n   \r\n   Specifically:\r\n   \r\n   * A note that the brew-based method and the build-your-own methods are incompatible (mostly because of ARROW_HOME, but folks using brew shouldn't need to even think about that, so we should be careful how we phrase this)\r\n   * A note about confirming that brew install apache-arrow --HEAD completes successfully and how to confirm it's being picked up in the install process\r\n   * This might be part of the point above, but a description of what the difference/meaning of the following are: *** Using Homebrew ${PKG_BREW_NAME}, *** Arrow C++ libraries found via pkg-config, any mention of autobrew. Specifically, if one is trying to use homebrew for development, only the first one is ok, if someone sees something else that means that something isn't quite right.\r\n   \r\n   If this is too much or you don't want to extend scope, that's totally fine!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-18T18:28:17.695+0000",
                    "updated": "2021-11-18T18:28:17.695+0000",
                    "started": "2021-11-18T18:28:17.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "683550",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/683556",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r752515702\n\n\n\n##########\nFile path: r/vignettes/developers/workflow.Rmd\n##########\n@@ -0,0 +1,198 @@\n+# Common developer workflow tasks\n+\n+```{r setup-options, include=FALSE}\n+knitr::opts_chunk$set(error = TRUE, eval = FALSE)\n+```\n+\n+The `arrow/r` directory contains a `Makefile` to help with some common tasks from the command line (e.g. `make test`, `make doc`, `make clean`, etc.).\n+\n+## Loading arrow\n+\n+You can load the R package via `devtools::load_all()`.\n+\n+## Rebuilding the documentation\n+\n+The R documentation uses the [`@examplesIf`](https://roxygen2.r-lib.org/articles/rd.html#functions) tag introduced in `roxygen2` version 7.1.1.9001, which hasn't yet been released on CRAN at the time of writing.  If you are making changes which require updating the documentation, please install the development version of `roxygen2` from GitHub.\n+\n+```{r, run=FALSE}\n+remotes::install_github(\"r-lib/roxygen2\")\n\nReview comment:\n       Do we still need this? I know we are waiting on a release, but can't remember if roxygen2 has had one recently or not\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-18T18:29:30.373+0000",
                    "updated": "2021-11-18T18:29:30.373+0000",
                    "started": "2021-11-18T18:29:30.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "683556",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/683587",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r752547901\n\n\n\n##########\nFile path: r/vignettes/developers/workflow.Rmd\n##########\n@@ -0,0 +1,198 @@\n+# Common developer workflow tasks\n+\n+```{r setup-options, include=FALSE}\n+knitr::opts_chunk$set(error = TRUE, eval = FALSE)\n+```\n+\n+The `arrow/r` directory contains a `Makefile` to help with some common tasks from the command line (e.g. `make test`, `make doc`, `make clean`, etc.).\n+\n+## Loading arrow\n+\n+You can load the R package via `devtools::load_all()`.\n+\n+## Rebuilding the documentation\n+\n+The R documentation uses the [`@examplesIf`](https://roxygen2.r-lib.org/articles/rd.html#functions) tag introduced in `roxygen2` version 7.1.1.9001, which hasn't yet been released on CRAN at the time of writing.  If you are making changes which require updating the documentation, please install the development version of `roxygen2` from GitHub.\n+\n+```{r, run=FALSE}\n+remotes::install_github(\"r-lib/roxygen2\")\n\nReview comment:\n       Yeah, there's a recent update, I'll update this in once I sort the merge conflict.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-18T19:10:48.916+0000",
                    "updated": "2021-11-18T19:10:48.916+0000",
                    "started": "2021-11-18T19:10:48.916+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "683587",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/683979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r753274673\n\n\n\n##########\nFile path: r/vignettes/developers/setup.Rmd\n##########\n@@ -0,0 +1,410 @@\n+# Developer environment setup\n+\n+```{r setup-options, include=FALSE}\n+knitr::opts_chunk$set(error = TRUE, eval = FALSE)\n+# Get environment variables describing what to evaluate\n+run <- tolower(Sys.getenv(\"RUN_DEVDOCS\", \"false\")) == \"true\"\n+macos <- tolower(Sys.getenv(\"DEVDOCS_MACOS\", \"false\")) == \"true\"\n+ubuntu <- tolower(Sys.getenv(\"DEVDOCS_UBUNTU\", \"false\")) == \"true\"\n+sys_install <- tolower(Sys.getenv(\"DEVDOCS_SYSTEM_INSTALL\", \"false\")) == \"true\"\n+# Update the source knit_hook to save the chunk (if it is marked to be saved)\n+knit_hooks_source <- knitr::knit_hooks$get(\"source\")\n+knitr::knit_hooks$set(source = function(x, options) {\n+  # Extra paranoia about when this will write the chunks to the script, we will\n+  # only save when:\n+  #   * CI is true\n+  #   * RUN_DEVDOCS is true\n+  #   * options$save is TRUE (and a check that not NULL won't crash it)\n+  if (as.logical(Sys.getenv(\"CI\", FALSE)) && run && !is.null(options$save) && options$save)\n+    cat(x, file = \"script.sh\", append = TRUE, sep = \"\\n\")\n+  # but hide the blocks we want hidden:\n+  if (!is.null(options$hide) && options$hide) {\n+    return(NULL)\n+  }\n+  knit_hooks_source(x, options)\n+})\n+```\n+\n+```{bash, save=run, hide=TRUE}\n+# Stop on failure, echo input as we go\n+set -e\n+set -x\n+```\n+\n+This document is intended only for **developers** of Apache Arrow or \n+the Arrow R package. R package users do not need to do any of this setup. \n+If you're looking for how to install Arrow, see \n+[the instructions in the readme](https://arrow.apache.org/docs/r/#installation).\n+\n+This document is a work in progress and will grow and change as the Apache Arrow\n+project grows and changes. We have tried to make these steps as robust as \n+possible (in fact, we even test exactly these instructions on our nightly CI to \n+ensure they don't become stale!), but custom configurations might conflict with \n+these instructions and there are differences of opinion across developers about \n+how to set up development environments like this.\n+\n+We welcome any feedback you have about things that are confusing or additions \n+you would like to see here - please \n+[report an issue](https://issues.apache.org/jira/projects/ARROW/issues) if you \n+have any suggestions or requests.\n+\n+\n+## R-only {.tabset}\n+\n+Windows and macOS users who wish to contribute to the R package and\n+don't need to alter libarrow (Arrow's C++ library) may be able to obtain a\n+recent version of the library without building from source.\n\nReview comment:\n       Will leave this for now as I don't fully understand all of these things, so am leaving it for another PR\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-19T15:08:12.257+0000",
                    "updated": "2021-11-19T15:08:12.257+0000",
                    "started": "2021-11-19T15:08:12.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "683979",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/683982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#issuecomment-974155210\n\n\n   @jonkeane and @wjones127 - just rebased this so now the setup instructions contain the excellent changes made by @wjones127 including all that Windows content.  Just thinking - I am in the process of writing up some content on writing bindings, but it's a bigger piece of work.  Any objections to me doing that in a separate follow-up ticket?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-19T15:12:44.321+0000",
                    "updated": "2021-11-19T15:12:44.321+0000",
                    "started": "2021-11-19T15:12:44.321+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "683982",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/683983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic edited a comment on pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#issuecomment-974155210\n\n\n   @jonkeane and @wjones127 - just rebased this so now the setup instructions contain the excellent changes made by @wjones127 including all that Windows content.  Just thinking - I am in the process of writing up some content on writing bindings, but it's a bigger piece of work.  Any objections to me doing that in a separate follow-up ticket, so we can potentially make other changes to the setup doc without having to rebase again?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-19T15:13:07.064+0000",
                    "updated": "2021-11-19T15:13:07.064+0000",
                    "started": "2021-11-19T15:13:07.064+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "683983",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/684030",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r753389277\n\n\n\n##########\nFile path: r/vignettes/developing.Rmd\n##########\n@@ -38,567 +38,31 @@ set -e\n set -x\n ```\n \n-If you're looking to contribute to arrow, this vignette can help you set up a development environment that will enable you to write code and run tests locally. It outlines:\n+If you're interested in contributing to arrow, this vignette explains our approach, \n+at a high-level.  If you're looking for more detailed content, you may want to \n+look at one of the following links:\n \n-* how to build the components that make up the Arrow project and R package\n-* workflows that developers use\n-* some common troubleshooting steps and solutions\n+* [setting up a development environment and building the components that make up the Arrow project and R package](https://arrow.apache.org/docs/r/articles/developers/setup.html)\n+* [common Arrow dev workflow tasks](https://arrow.apache.org/docs/r/articles/developers/workflow.html)\n+* [running R with the C++ debugger attached](https://arrow.apache.org/docs/r/articles/developers/debugging.html)\n\nReview comment:\n       Ohhh. Does this mean we are making parts of these developer docs not available offline? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-19T17:29:43.016+0000",
                    "updated": "2021-11-19T17:29:43.016+0000",
                    "started": "2021-11-19T17:29:43.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684030",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/684954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#discussion_r754613648\n\n\n\n##########\nFile path: r/vignettes/developing.Rmd\n##########\n@@ -38,567 +38,31 @@ set -e\n set -x\n ```\n \n-If you're looking to contribute to arrow, this vignette can help you set up a development environment that will enable you to write code and run tests locally. It outlines:\n+If you're interested in contributing to arrow, this vignette explains our approach, \n+at a high-level.  If you're looking for more detailed content, you may want to \n+look at one of the following links:\n \n-* how to build the components that make up the Arrow project and R package\n-* workflows that developers use\n-* some common troubleshooting steps and solutions\n+* [setting up a development environment and building the components that make up the Arrow project and R package](https://arrow.apache.org/docs/r/articles/developers/setup.html)\n+* [common Arrow dev workflow tasks](https://arrow.apache.org/docs/r/articles/developers/workflow.html)\n+* [running R with the C++ debugger attached](https://arrow.apache.org/docs/r/articles/developers/debugging.html)\n\nReview comment:\n       Yeah, there's no real need to distribute them with the package given that most people read this content via the pkgdown site anyway.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-22T20:31:41.306+0000",
                    "updated": "2021-11-22T20:31:41.306+0000",
                    "started": "2021-11-22T20:31:41.306+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684954",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/684957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#issuecomment-975901143\n\n\n   I'll cover the bindings stuff in https://issues.apache.org/jira/browse/ARROW-14757\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-22T20:41:44.854+0000",
                    "updated": "2021-11-22T20:41:44.854+0000",
                    "started": "2021-11-22T20:41:44.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684957",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/684976",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#issuecomment-975949309\n\n\n   @github-actions crossbow submit test-r-devdocs\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-22T21:50:07.475+0000",
                    "updated": "2021-11-22T21:50:07.475+0000",
                    "started": "2021-11-22T21:50:07.475+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684976",
                    "issueId": "13407982"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/worklog/684977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11705:\nURL: https://github.com/apache/arrow/pull/11705#issuecomment-975950051\n\n\n   Revision: 1eec3a026ec285bcecd88ea47b111a13b72b6143\n   \n   Submitted crossbow builds: [ursacomputing/crossbow @ actions-1168](https://github.com/ursacomputing/crossbow/branches/all?query=actions-1168)\n   \n   |Task|Status|\n   |----|------|\n   |test-r-devdocs|[![Github Actions](https://github.com/ursacomputing/crossbow/workflows/Crossbow/badge.svg?branch=actions-1168-github-test-r-devdocs)](https://github.com/ursacomputing/crossbow/actions?query=branch:actions-1168-github-test-r-devdocs)|\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-22T21:51:20.484+0000",
                    "updated": "2021-11-22T21:51:20.484+0000",
                    "started": "2021-11-22T21:51:20.484+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684977",
                    "issueId": "13407982"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 16200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@22c2c03d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@325c621a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@dc9de8b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5c54219a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a77934f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1214c942[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@516a600d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2c4fd34b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a44c066[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7e2e4eb5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7cc62375[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2ec1622d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Nov 23 07:35:57 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-11-23T07:35:57.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14441/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-10-22T15:52:55.000+0000",
        "updated": "2021-11-23T13:45:39.000+0000",
        "timeoriginalestimate": null,
        "description": "This isn't necessarily limited to CSVs, but we should have this philosophy in our developing vignette \r\n\r\nThe general approach we've done with CSV things in the past is:\r\n(1) support the readr signature to the best extent we can, translating to the arrow parameter names internally;\r\n(2) allow someone to pass the arrow options (CsvReadOptions etc.) directly, in case they want to do things at a lower level\r\n(3) where necessary add extra args to the readr signature for features that don't exist in R but do in arrow (e.g. schema)\r\nThis is our general philosophy: present things to the R user in a way that is least surprising to them (most follows R conventions) and also provide access to all of Arrow's features (sometimes that's extra args, sometimes it's the arrow_ prefixed functions in dplyr, sometimes it's just the lower-level R6 objects and methods that more closely follow the C++ interface)",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Add our philosophy to the dev vignette",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/comment/17433656",
                    "id": "17433656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
                        "name": "thisisnic",
                        "key": "thisisnic",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
                        },
                        "displayName": "Nicola Crane",
                        "active": true,
                        "timeZone": "Africa/Casablanca"
                    },
                    "body": "I am currently working on a document around writing compute bindings, and this feels like it'd fit alongside that.\u00a0 I'm wondering if, instead of 1 long vignette, we need a series of shorter articles for the pkgdown site, like in this example? [https://pkgdown.r-lib.org/reference/build_articles.html]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
                        "name": "thisisnic",
                        "key": "thisisnic",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
                        },
                        "displayName": "Nicola Crane",
                        "active": true,
                        "timeZone": "Africa/Casablanca"
                    },
                    "created": "2021-10-25T09:44:56.986+0000",
                    "updated": "2021-10-25T09:45:18.071+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/comment/17435034",
                    "id": "17435034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I'm a fan of splitting things like this up and that pkgdown setup looks nice.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-10-27T19:28:25.788+0000",
                    "updated": "2021-10-27T19:28:25.788+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407982/comment/17447814",
                    "id": "17447814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
                        "name": "thisisnic",
                        "key": "thisisnic",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
                        },
                        "displayName": "Nicola Crane",
                        "active": true,
                        "timeZone": "Africa/Casablanca"
                    },
                    "body": "Issue resolved by pull request 11705\n[https://github.com/apache/arrow/pull/11705]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
                        "name": "thisisnic",
                        "key": "thisisnic",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
                        },
                        "displayName": "Nicola Crane",
                        "active": true,
                        "timeZone": "Africa/Casablanca"
                    },
                    "created": "2021-11-23T07:35:57.379+0000",
                    "updated": "2021-11-23T07:35:57.379+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0w37k:",
        "customfield_12314139": null
    }
}