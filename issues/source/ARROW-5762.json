{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13242017",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242017",
    "key": "ARROW-5762",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12564246",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12564246",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "outwardIssue": {
                    "id": "13090214",
                    "key": "ARROW-1277",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13090214",
                    "fields": {
                        "summary": "Completing integration tests for major implemented data types",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/1",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/blocker.svg",
                            "name": "Blocker",
                            "id": "1"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12564248",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12564248",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13242018",
                    "key": "ARROW-5763",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242018",
                    "fields": {
                        "summary": "[JS] enable integration tests for MapVector",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333774",
                "id": "12333774",
                "name": "Integration",
                "description": "Issues related to integration / compatibility tests between implementations"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332552",
                "id": "12332552",
                "name": "JavaScript"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5762/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 5,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242017/worklog/311609",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on pull request #5371: ARROW-5762: [JS] Align Map type impl with the spec\nURL: https://github.com/apache/arrow/pull/5371\n \n \n   This PR closes [ARROW-5762](https://issues.apache.org/jira/browse/ARROW-5762) by aligning the Map implementation with the spec, enabling its inclusion in the integration tests.\r\n   \r\n   Feature-wise, the biggest change is to the `Struct` and `Map` rows. `Row` is now an abstract base class extended by `StructRow` and `MapRow`.\r\n   \r\n   Row implements [JS's native Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) interface (and will pass `row instanceof Map` checks). To align with JS Maps, the `Symbol.iterator` return type changes from `IterableIterator<TValue>` to `IterableIterator<[TKey, TValue]>`.\r\n   \r\n   `Struct` fields are uniform and known in advance, whereas `Map` fields vary by row. The `StructRow` will still take advantage of the `Object.create()` technique to create fast instances using a single `StructRow` instance as its prototype.\r\n   \r\n   However `MapRow` must either be dynamic or have its fields defined on construction, so I've changed `MapRow` to return an ES6 Proxy if available ([supported everywhere except IE11](https://caniuse.com/#search=Proxy)) and fall back to `Object.defineProperties()` if not.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T19:16:36.338+0000",
                    "updated": "2019-09-12T19:16:36.338+0000",
                    "started": "2019-09-12T19:16:36.337+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311609",
                    "issueId": "13242017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242017/worklog/312160",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on pull request #5371: ARROW-5762: [JS] Align Map type impl with the spec\nURL: https://github.com/apache/arrow/pull/5371#discussion_r324267992\n \n \n\n ##########\n File path: js/src/vector/row.ts\n ##########\n @@ -15,106 +15,281 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import { Field } from '../schema';\n-import { MapVector } from '../vector/map';\n-import { DataType } from '../type';\n+import { Vector } from '../vector';\n+import { StructVector } from './struct';\n import { valueToString } from '../util/pretty';\n-import { StructVector } from '../vector/struct';\n+import { DataType, Struct, RowLike } from '../type';\n \n-/** @ignore */ export const kLength = Symbol.for('length');\n-/** @ignore */ export const kParent = Symbol.for('parent');\n-/** @ignore */ export const kRowIndex = Symbol.for('rowIndex');\n-/** @ignore */ const columnDescriptor = { enumerable: true, configurable: false, get: null as any };\n-/** @ignore */ const rowLengthDescriptor = { writable: false, enumerable: false, configurable: false, value: -1 };\n-/** @ignore */ const rowParentDescriptor = { writable: false, enumerable: false, configurable: false, value: null as any };\n+/** @ignore */ const kParent = Symbol.for('parent');\n+/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n+/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\n+/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\n+/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\n \n-/** @ignore */\n-export class Row<T extends { [key: string]: DataType }> implements Iterable<T[keyof T]['TValue']> {\n-    [key: string]: T[keyof T]['TValue'];\n-    // @ts-ignore\n-    public [kParent]: MapVector<T> | StructVector<T>;\n-    // @ts-ignore\n-    public [kRowIndex]: number;\n-    // @ts-ignore\n-    public readonly [kLength]: number;\n-    *[Symbol.iterator]() {\n-        for (let i = -1, n = this[kLength]; ++i < n;) {\n-            yield this[i];\n-        }\n+abstract class Row<K extends PropertyKey = any, V = any> implements Map<K, V> {\n+\n+    public readonly size: number;\n+    public readonly [Symbol.toStringTag]: string;\n+\n+    protected [kRowIndex]: number;\n+    protected [kParent]: Vector<Struct>;\n+    protected [kKeyToIdx]: Map<K, number>;\n+    protected [kIdxToVal]: V[];\n+\n+    constructor(parent: Vector<Struct>, numKeys: number) {\n+        this[kParent] = parent;\n+        this.size = numKeys;\n     }\n-    public get<K extends keyof T>(key: K) {\n-        return (this as any)[key] as T[K]['TValue'];\n+\n+    public abstract keys(): IterableIterator<K>;\n+    public abstract values(): IterableIterator<V>;\n+    public abstract getKey(idx: number): K;\n+    public abstract getIndex(key: K): number;\n+    public abstract getValue(idx: number): V;\n+    public abstract setValue(idx: number, val: V): void;\n+\n+    public entries() { return this[Symbol.iterator](); }\n+\n+    public has(key: K) { return this.get(key) !== undefined; }\n+\n+    public get(key: K) {\n+        let val = undefined;\n+        if (key !== null && key !== undefined) {\n+            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n+            let idx = ktoi.get(key);\n+            if (idx !== undefined) {\n+                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n+                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n+            } else if ((idx = this.getIndex(key)) > -1) {\n+                ktoi.set(key, idx);\n+                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n+                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n+            }\n+        }\n+        return val;\n     }\n-    public toJSON(): any {\n-        return DataType.isStruct(this[kParent].type) ? [...this] :\n-            this[kParent].type.children.reduce((props: any, { name }: Field<T[keyof T]>) => {\n-                return (props[name] = (this as any)[name]) && props || props;\n-            }, {});\n+\n+    public set(key: K, val: V) {\n+        if (key !== null && key !== undefined) {\n+            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n+            let idx = ktoi.get(key);\n+            if (idx === undefined) {\n+                ktoi.set(key, idx = this.getIndex(key));\n+            }\n+            if (idx > -1) {\n+                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n+                itov[idx] = <any> this.setValue(idx, val);\n+            }\n+        }\n+        return this;\n     }\n-    public inspect() { return this.toString(); }\n-    public [Symbol.for('nodejs.util.inspect.custom')]() { return this.toString(); }\n-    public toString() {\n-        return DataType.isStruct(this[kParent].type) ?\n-            `[ ${[...this].map((x) => valueToString(x)).join(', ')} ]` :\n-            `{ ${\n-                this[kParent].type.children.reduce((xs: string[], { name }: Field<T[keyof T]>) => {\n-                    return [...xs, `\"${name}\": ${valueToString((this as any)[name])}`];\n-                }, []).join(', ')\n-            } }`\n-                ;\n+\n+    public clear(): void { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\n+\n+    public delete(_: K): boolean { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\n+\n+    public *[Symbol.iterator](): IterableIterator<[K, V]> {\n+\n+        const ki = this.keys();\n+        const vi = this.values();\n+        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n+        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n+\n+        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n+            !((kr = ki.next()).done || (vr = vi.next()).done);\n+            ++i\n+        ) {\n+            k = kr.value;\n+            v = vr.value;\n+            itov[i] = v;\n+            ktoi.has(k) || ktoi.set(k, i);\n+            yield [k, v];\n+        }\n     }\n-}\n \n-/** @ignore */\n-export class RowProxyGenerator<T extends { [key: string]: DataType }> {\n-    /** @nocollapse */\n-    public static new<T extends { [key: string]: DataType }>(parent: MapVector<T> | StructVector<T>, schemaOrFields: T | Field[], fieldsAreEnumerable = false): RowProxyGenerator<T> {\n-        let schema: T, fields: Field[];\n-        if (Array.isArray(schemaOrFields)) {\n-            fields = schemaOrFields;\n-        } else {\n-            schema = schemaOrFields;\n-            fieldsAreEnumerable = true;\n-            fields = Object.keys(schema).map((x) => new Field(x, schema[x]));\n+    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n+\n+        const ki = this.keys();\n+        const vi = this.values();\n+        const callback = thisArg === undefined ? callbackfn :\n+            (v: V, k: K, m: Map<K, V>) => callbackfn.call(thisArg, v, k, m);\n+        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n+        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n+\n+        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n+            !((kr = ki.next()).done || (vr = vi.next()).done);\n+            ++i\n+        ) {\n+            k = kr.value;\n+            v = vr.value;\n+            itov[i] = v;\n+            ktoi.has(k) || ktoi.set(k, i);\n+            callback(v, k, this);\n         }\n-        return new RowProxyGenerator<T>(parent, fields, fieldsAreEnumerable);\n     }\n \n-    private rowPrototype: Row<T>;\n+    public toArray() { return [...this.values()]; }\n+    public toJSON() {\n+        const obj = {} as any;\n+        this.forEach((val, key) => obj[key] = val);\n+        return obj;\n+    }\n \n-    private constructor(parent: MapVector<T> | StructVector<T>, fields: Field[], fieldsAreEnumerable: boolean) {\n-        const proto = Object.create(Row.prototype);\n+    public inspect() { return this.toString(); }\n+    public [kCustomInspect]() { return this.toString(); }\n+    public toString() {\n+        const str: string[] = [];\n+        this.forEach((val, key) => {\n+            key = valueToString(key);\n+            val = valueToString(val);\n+            str.push(`${key}: ${val}`);\n+        });\n+        return `{ ${str.join(', ')} }`;\n+    }\n \n-        rowParentDescriptor.value = parent;\n-        rowLengthDescriptor.value = fields.length;\n-        Object.defineProperty(proto, kParent, rowParentDescriptor);\n-        Object.defineProperty(proto, kLength, rowLengthDescriptor);\n-        fields.forEach((field, columnIndex) => {\n-            if (!proto.hasOwnProperty(field.name)) {\n-                columnDescriptor.enumerable = fieldsAreEnumerable;\n-                columnDescriptor.get || (columnDescriptor.get = this._bindGetter(columnIndex));\n-                Object.defineProperty(proto, field.name, columnDescriptor);\n-            }\n-            if (!proto.hasOwnProperty(columnIndex)) {\n-                columnDescriptor.enumerable = !fieldsAreEnumerable;\n-                columnDescriptor.get || (columnDescriptor.get = this._bindGetter(columnIndex));\n-                Object.defineProperty(proto, columnIndex, columnDescriptor);\n-            }\n-            columnDescriptor.get = null as any;\n+    protected static [Symbol.toStringTag] = ((proto: Row) => {\n+        Object.defineProperties(proto, {\n+            'size': { writable: true, enumerable: false, configurable: false, value: 0 },\n+            [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n+            [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n         });\n+        return (proto as any)[Symbol.toStringTag] = 'Row';\n+    })(Row.prototype);\n+}\n \n-        this.rowPrototype = proto;\n+export class MapRow<K extends DataType = any, V extends DataType = any> extends Row<K['TValue'], V['TValue'] | null> {\n+    constructor(slice: Vector<Struct<{ key: K, value: V }>>) {\n+        super(slice, slice.length);\n+        return createRowProxy(this);\n+    }\n+    public keys() {\n+        return this[kParent].getChildAt(0)![Symbol.iterator]();\n+    }\n+    public values() {\n+        return this[kParent].getChildAt(1)![Symbol.iterator]();\n+    }\n+    public getKey(idx: number): K['TValue'] {\n+        return this[kParent].getChildAt(0)!.get(idx);\n+    }\n+    public getIndex(key: K['TValue']): number {\n+        return this[kParent].getChildAt(0)!.indexOf(key);\n     }\n+    public getValue(index: number): V['TValue'] | null {\n+        return this[kParent].getChildAt(1)!.get(index);\n+    }\n+    public setValue(index: number, value: V['TValue'] | null): void {\n+        this[kParent].getChildAt(1)!.set(index, value);\n+    }\n+}\n \n-    private _bindGetter(columnIndex: number) {\n-        return function(this: Row<T>) {\n-            const child = this[kParent].getChildAt(columnIndex);\n-            return child ? child.get(this[kRowIndex]) : null;\n-        };\n+export class StructRow<T extends { [key: string]: DataType } = any> extends Row<keyof T, T[keyof T]['TValue'] | null> {\n+    constructor(parent: StructVector<T>) {\n+        super(parent, parent.type.children.length);\n+        return defineRowProxyProperties(this);\n+    }\n+    public *keys() {\n+        for (const field of this[kParent].type.children) {\n+            yield field.name as keyof T;\n+        }\n+    }\n+    public *values() {\n+        for (const field of this[kParent].type.children) {\n+            yield (this as RowLike<T>)[field.name];\n+        }\n+    }\n+    public getKey(idx: number): keyof T {\n+        return this[kParent].type.children[idx].name as keyof T;\n     }\n-    public bind(rowIndex: number) {\n-        const bound: Row<T> = Object.create(this.rowPrototype);\n-        bound[kRowIndex] = rowIndex;\n-        return bound;\n+    public getIndex(key: keyof T): number {\n+        return this[kParent].type.children.findIndex((f) => f.name === key);\n+    }\n+    public getValue(index: number): T[keyof T]['TValue'] | null {\n+        return this[kParent].getChildAt(index)!.get(this[kRowIndex]);\n+    }\n+    public setValue(index: number, value: T[keyof T]['TValue'] | null): void {\n+        return this[kParent].getChildAt(index)!.set(this[kRowIndex], value);\n     }\n }\n+\n+Object.setPrototypeOf(Row.prototype, Map.prototype);\n+\n+/** @ignore */\n+const defineRowProxyProperties = (() => {\n+    const desc = { enumerable: true, configurable: false, get: null as any, set: null as any };\n+    return <T extends Row>(row: T) => {\n+        let idx = -1, ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n+        const getter = (key: any) => function(this: T) { return this.get(key); };\n+        const setter = (key: any) => function(this: T, val: any) { return this.set(key, val); };\n+        for (const key of row.keys()) {\n+            ktoi.set(key, ++idx);\n+            desc.get = getter(key);\n+            desc.set = setter(key);\n+            row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n+            row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n+        }\n+        desc.get = desc.set = null;\n+        return row;\n+    };\n+})();\n+\n \n Review comment:\n   Could you run the performance tests to make sure this change doesn't affect perf for the row proxies? I don't think it would, but doesn't hurt to make sure.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-13T16:31:53.455+0000",
                    "updated": "2019-09-13T16:31:53.455+0000",
                    "started": "2019-09-13T16:31:53.455+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "312160",
                    "issueId": "13242017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242017/worklog/312161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on pull request #5371: ARROW-5762: [JS] Align Map type impl with the spec\nURL: https://github.com/apache/arrow/pull/5371#discussion_r324268758\n \n \n\n ##########\n File path: js/test/generate-test-data.ts\n ##########\n @@ -512,30 +518,43 @@ function generateStruct<T extends Struct>(this: TestDataVectorGenerator, type: T\n     const values = memoize(() => {\n         const values = [] as any[];\n         const childValues = cols.map((x) => x());\n+        const names = type.children.map((f) => f.name);\n         iterateBitmap(length, nullBitmap, (i, valid) => {\n-            values[i] = !valid ? null : childValues.map((col) => col[i]);\n+            values[i] = !valid ? null : childValues.reduce((row, col, j) => ({\n+                ...row, [names[j]]: col[i]\n+            }), {});\n         });\n         return values;\n     });\n     return { values, vector: Vector.new(Data.Struct(type, 0, length, nullCount, nullBitmap, vecs)) };\n }\n \n-function generateMap<T extends Map_>(this: TestDataVectorGenerator, type: T, length = 100, nullCount = length * 0.2 | 0, children = type.children.map((f) => this.visit(f.type, length, nullCount))): GeneratedVector<V<T>> {\n-    const vecs = children.map(({ vector }) => vector);\n-    const cols = children.map(({ values }) => values);\n+function generateMap<T extends Map_>(this: TestDataVectorGenerator,\n \n Review comment:\n   What do you think about adding a simple test for MapVector to vector-tests.ts as well? The generated data tests are nice for completeness, but I like that vector-tests serve as a form of documentation and a sanity check in case anything goes wrong in this test\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-13T16:31:53.712+0000",
                    "updated": "2019-09-13T16:31:53.712+0000",
                    "started": "2019-09-13T16:31:53.711+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "312161",
                    "issueId": "13242017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242017/worklog/312484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5371: ARROW-5762: [JS] Align Map type impl with the spec\nURL: https://github.com/apache/arrow/pull/5371#issuecomment-531442615\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5371?src=pr&el=h1) Report\n   > Merging [#5371](https://codecov.io/gh/apache/arrow/pull/5371?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/6a2a3de8c6f9c2d99860f85d9b010b892051cf44?src=pr&el=desc) will **increase** coverage by `1.98%`.\n   > The diff coverage is `72.85%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5371/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5371?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #5371       +/-   ##\n   ===========================================\n   + Coverage   87.57%   89.56%    +1.98%     \n   ===========================================\n     Files        1041      102      -939     \n     Lines      151814     6603   -145211     \n     Branches     1447     1495       +48     \n   ===========================================\n   - Hits       132958     5914   -127044     \n   + Misses      18492      678    -17814     \n   + Partials      364       11      -353\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5371?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [js/src/Arrow.ts](https://codecov.io/gh/apache/arrow/pull/5371/diff?src=pr&el=tree#diff-anMvc3JjL0Fycm93LnRz) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [js/src/visitor/jsonvectorassembler.ts](https://codecov.io/gh/apache/arrow/pull/5371/diff?src=pr&el=tree#diff-anMvc3JjL3Zpc2l0b3IvanNvbnZlY3RvcmFzc2VtYmxlci50cw==) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [js/src/util/vector.ts](https://codecov.io/gh/apache/arrow/pull/5371/diff?src=pr&el=tree#diff-anMvc3JjL3V0aWwvdmVjdG9yLnRz) | `97.05% <100%> (+1.22%)` | :arrow_up: |\n   | [js/src/data.ts](https://codecov.io/gh/apache/arrow/pull/5371/diff?src=pr&el=tree#diff-anMvc3JjL2RhdGEudHM=) | `91.66% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/vector/base.ts](https://codecov.io/gh/apache/arrow/pull/5371/diff?src=pr&el=tree#diff-anMvc3JjL3ZlY3Rvci9iYXNlLnRz) | `89.13% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/visitor/vectorassembler.ts](https://codecov.io/gh/apache/arrow/pull/5371/diff?src=pr&el=tree#diff-anMvc3JjL3Zpc2l0b3IvdmVjdG9yYXNzZW1ibGVyLnRz) | `82.85% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/ipc/metadata/message.ts](https://codecov.io/gh/apache/arrow/pull/5371/diff?src=pr&el=tree#diff-anMvc3JjL2lwYy9tZXRhZGF0YS9tZXNzYWdlLnRz) | `93.26% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/vector/struct.ts](https://codecov.io/gh/apache/arrow/pull/5371/diff?src=pr&el=tree#diff-anMvc3JjL3ZlY3Rvci9zdHJ1Y3QudHM=) | `100% <100%> (+22.22%)` | :arrow_up: |\n   | [js/src/visitor/get.ts](https://codecov.io/gh/apache/arrow/pull/5371/diff?src=pr&el=tree#diff-anMvc3JjL3Zpc2l0b3IvZ2V0LnRz) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [js/src/visitor/vectorloader.ts](https://codecov.io/gh/apache/arrow/pull/5371/diff?src=pr&el=tree#diff-anMvc3JjL3Zpc2l0b3IvdmVjdG9ybG9hZGVyLnRz) | `98.79% <100%> (\u00f8)` | :arrow_up: |\n   | ... and [950 more](https://codecov.io/gh/apache/arrow/pull/5371/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5371?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5371?src=pr&el=footer). Last update [6a2a3de...3a0eca9](https://codecov.io/gh/apache/arrow/pull/5371?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-14T02:54:14.439+0000",
                    "updated": "2019-09-14T02:54:14.439+0000",
                    "started": "2019-09-14T02:54:14.438+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "312484",
                    "issueId": "13242017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242017/worklog/312679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5371: ARROW-5762: [JS] Align Map type impl with the spec\nURL: https://github.com/apache/arrow/pull/5371\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-15T15:47:59.271+0000",
                    "updated": "2019-09-15T15:47:59.271+0000",
                    "started": "2019-09-15T15:47:59.270+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "312679",
                    "issueId": "13242017"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@14a9bffa[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@134df863[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5459490e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@282b3d06[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e0e0a08[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@70ef3591[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ee013bb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1f52d06c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21b2c7c4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@28f82dde[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46eb8eb1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4fb3f7b0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3000,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Sep 15 17:02:32 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-09-15T17:02:32.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5762/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-06-27T19:27:06.000+0000",
        "updated": "2019-09-15T17:02:32.000+0000",
        "timeoriginalestimate": null,
        "description": "ARROW-1279 enabled integration tests for MapType between Java and C++, but JavaScript had to be disabled for the map case due to an error.  Once this is fixed, {{generate_map_case}} could be moved under {{generate_nested_case}} with the other nested types.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Integration][JS] Integration Tests for Map Type",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242017/comment/16887544",
                    "id": "16887544",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "After reviewing the C++, the JS version of the Map type is not the same (it's essentially a Struct except instead of accessing child fields by field index, they're accessed by name). We should absolutely update the JS Map implementation before the 1.0 release.\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-07-18T01:57:51.379+0000",
                    "updated": "2019-07-18T01:57:51.379+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242017/comment/16930008",
                    "id": "16930008",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5371\n[https://github.com/apache/arrow/pull/5371]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-09-15T17:02:32.682+0000",
                    "updated": "2019-09-15T17:02:32.682+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z046ao:",
        "customfield_12314139": null
    }
}