{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13155910",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910",
    "key": "ARROW-2521",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 25200,
            "total": 25200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 25200,
            "total": 25200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2521/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 44,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/96888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove opened a new pull request #1969: ARROW-2521: [Rust] Refactor Array API to use traits and generics instead of enum [WIP]\nURL: https://github.com/apache/arrow/pull/1969\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-04-30T23:41:22.937+0000",
                    "updated": "2018-04-30T23:41:22.937+0000",
                    "started": "2018-04-30T23:41:22.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "96888",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/96963",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove opened a new pull request #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T05:51:36.812+0000",
                    "updated": "2018-05-01T05:51:36.812+0000",
                    "started": "2018-05-01T05:51:36.811+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "96963",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/96964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #1969: ARROW-2521: [Rust] Refactor Array API to use traits and generics instead of enum [WIP]\nURL: https://github.com/apache/arrow/pull/1969#issuecomment-385604975\n \n \n   Created new PR with fewer commits\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T05:52:06.313+0000",
                    "updated": "2018-05-01T05:52:06.313+0000",
                    "started": "2018-05-01T05:52:06.313+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "96964",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/96965",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #1969: ARROW-2521: [Rust] Refactor Array API to use traits and generics instead of enum [WIP]\nURL: https://github.com/apache/arrow/pull/1969\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/rust/examples/array_from_builder.rs b/rust/examples/array_from_builder.rs\nindex ea1ecec45..75c242a64 100644\n--- a/rust/examples/array_from_builder.rs\n+++ b/rust/examples/array_from_builder.rs\n@@ -39,10 +39,11 @@ fn main() {\n     // create a memory-aligned Arrow from the builder (zero-copy)\n     let array = Array::from(buffer);\n \n-    match array.data() {\n-        &ArrayData::Int32(ref buffer) => {\n-            println!(\"array contents: {:?}\", buffer.iter().collect::<Vec<i32>>());\n+    // demonstrates how to downcast an array to specific type\n+    match array.data().as_any().downcast_ref::<BufferArrayData<i32>>() {\n+        Some(ref buf) => {\n+            println!(\"array contents: {:?}\", buf.iter().collect::<Vec<i32>>());\n         }\n-        _ => {}\n+        _ => panic!(),\n     }\n }\ndiff --git a/rust/examples/array_from_vec.rs b/rust/examples/array_from_vec.rs\nindex 8cb4b268f..3c5b0272d 100644\n--- a/rust/examples/array_from_vec.rs\n+++ b/rust/examples/array_from_vec.rs\n@@ -23,10 +23,11 @@ fn main() {\n     // create a memory-aligned Arrow array from an existing Vec\n     let array = Array::from(vec![1, 2, 3, 4, 5]);\n \n-    match array.data() {\n-        &ArrayData::Int32(ref buffer) => {\n-            println!(\"array contents: {:?}\", buffer.iter().collect::<Vec<i32>>());\n+    // demonstrates how to downcast an array to specific type\n+    match array.data().as_any().downcast_ref::<BufferArrayData<i32>>() {\n+        Some(ref buf) => {\n+            println!(\"array contents: {:?}\", buf.iter().collect::<Vec<i32>>());\n         }\n-        _ => {}\n+        _ => panic!(),\n     }\n }\ndiff --git a/rust/src/array.rs b/rust/src/array.rs\nindex 55881f550..1dd54b6eb 100644\n--- a/rust/src/array.rs\n+++ b/rust/src/array.rs\n@@ -15,6 +15,7 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+use std::any::Any;\n use std::convert::From;\n use std::iter::Iterator;\n use std::rc::Rc;\n@@ -22,131 +23,223 @@ use std::str;\n use std::string::String;\n \n use super::bitmap::Bitmap;\n-use super::buffer::Buffer;\n-use super::list::List;\n-\n-pub enum ArrayData {\n-    Boolean(Buffer<bool>),\n-    Float32(Buffer<f32>),\n-    Float64(Buffer<f64>),\n-    Int8(Buffer<i8>),\n-    Int16(Buffer<i16>),\n-    Int32(Buffer<i32>),\n-    Int64(Buffer<i64>),\n-    UInt8(Buffer<u8>),\n-    UInt16(Buffer<u16>),\n-    UInt32(Buffer<u32>),\n-    UInt64(Buffer<u64>),\n-    Utf8(List<u8>),\n-    Struct(Vec<Rc<Array>>),\n+use super::buffer::*;\n+use super::datatypes::*;\n+use super::list::*;\n+use super::list_builder::*;\n+\n+/// Array data type\n+pub trait ArrayData {\n+    fn len(&self) -> usize;\n+    fn null_count(&self) -> usize;\n+    fn validity_bitmap(&self) -> &Option<Bitmap>;\n+    fn as_any(&self) -> &Any;\n }\n \n-macro_rules! arraydata_from_primitive {\n-    ($DT:ty, $AT:ident) => {\n-        impl From<Vec<$DT>> for ArrayData {\n-            fn from(v: Vec<$DT>) -> Self {\n-                ArrayData::$AT(Buffer::from(v))\n-            }\n-        }\n-        impl From<Buffer<$DT>> for ArrayData {\n-            fn from(v: Buffer<$DT>) -> Self {\n-                ArrayData::$AT(v)\n-            }\n+/// Array of List<T>\n+pub struct ListArrayData<T: ArrowPrimitiveType> {\n+    len: i32,\n+    list: List<T>,\n+    null_count: i32,\n+    validity_bitmap: Option<Bitmap>,\n+}\n+\n+impl<T> ListArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    pub fn get(&self, i: usize) -> &[T] {\n+        self.list.get(i)\n+    }\n+}\n+\n+impl<T> From<List<T>> for ListArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    fn from(list: List<T>) -> Self {\n+        let len = list.len();\n+        ListArrayData {\n+            len,\n+            list,\n+            validity_bitmap: None,\n+            null_count: 0,\n         }\n-    };\n+    }\n }\n \n-arraydata_from_primitive!(bool, Boolean);\n-arraydata_from_primitive!(f32, Float32);\n-arraydata_from_primitive!(f64, Float64);\n-arraydata_from_primitive!(i8, Int8);\n-arraydata_from_primitive!(i16, Int16);\n-arraydata_from_primitive!(i32, Int32);\n-arraydata_from_primitive!(i64, Int64);\n-arraydata_from_primitive!(u8, UInt8);\n-arraydata_from_primitive!(u16, UInt16);\n-arraydata_from_primitive!(u32, UInt32);\n-arraydata_from_primitive!(u64, UInt64);\n+impl<T> ArrayData for ListArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    fn len(&self) -> usize {\n+        self.len as usize\n+    }\n+    fn null_count(&self) -> usize {\n+        self.null_count as usize\n+    }\n+    fn validity_bitmap(&self) -> &Option<Bitmap> {\n+        &self.validity_bitmap\n+    }\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n+}\n \n-pub struct Array {\n-    /// number of elements in the array\n+/// Array of T\n+pub struct BufferArrayData<T: ArrowPrimitiveType> {\n     len: i32,\n-    /// number of null elements in the array\n+    data: Buffer<T>,\n     null_count: i32,\n-    /// If null_count is greater than zero then the validity_bitmap will be Some(Bitmap)\n     validity_bitmap: Option<Bitmap>,\n-    /// The array of elements\n-    data: ArrayData,\n }\n \n-impl Array {\n-    /// Create a new array where there are no null values\n-    pub fn new(len: usize, data: ArrayData) -> Self {\n-        Array {\n-            len: len as i32,\n+impl<T> BufferArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    pub fn new(data: Buffer<T>, null_count: i32, validity_bitmap: Option<Bitmap>) -> Self {\n+        BufferArrayData {\n+            len: data.len() as i32,\n+            data,\n+            null_count,\n+            validity_bitmap,\n+        }\n+    }\n+\n+    pub fn len(&self) -> usize {\n+        self.len as usize\n+    }\n+\n+    pub fn iter(&self) -> BufferIterator<T> {\n+        self.data.iter()\n+    }\n+}\n+\n+impl<T> ArrayData for BufferArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    fn len(&self) -> usize {\n+        self.len as usize\n+    }\n+    fn null_count(&self) -> usize {\n+        self.null_count as usize\n+    }\n+    fn validity_bitmap(&self) -> &Option<Bitmap> {\n+        &self.validity_bitmap\n+    }\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n+}\n+\n+impl<T> From<Buffer<T>> for BufferArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    fn from(data: Buffer<T>) -> Self {\n+        BufferArrayData {\n+            len: data.len() as i32,\n             data,\n             validity_bitmap: None,\n             null_count: 0,\n         }\n     }\n+}\n \n-    /// Get a reference to the array data\n-    pub fn data(&self) -> &ArrayData {\n-        &self.data\n+pub struct StructArrayData {\n+    len: i32,\n+    data: Vec<Rc<ArrayData>>,\n+    null_count: i32,\n+    validity_bitmap: Option<Bitmap>,\n+}\n+\n+impl StructArrayData {\n+    pub fn num_columns(&self) -> usize {\n+        self.data.len()\n+    }\n+    pub fn column(&self, i: usize) -> &Rc<ArrayData> {\n+        &self.data[i]\n     }\n+}\n \n-    /// number of elements in the array\n-    pub fn len(&self) -> usize {\n+impl ArrayData for StructArrayData {\n+    fn len(&self) -> usize {\n         self.len as usize\n     }\n-\n-    /// number of null elements in the array\n-    pub fn null_count(&self) -> usize {\n+    fn null_count(&self) -> usize {\n         self.null_count as usize\n     }\n-\n-    /// If null_count is greater than zero then the validity_bitmap will be Some(Bitmap)\n-    pub fn validity_bitmap(&self) -> &Option<Bitmap> {\n+    fn validity_bitmap(&self) -> &Option<Bitmap> {\n         &self.validity_bitmap\n     }\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n }\n \n-macro_rules! array_from_primitive {\n-    ($DT:ty) => {\n-        impl From<Vec<$DT>> for Array {\n-            fn from(v: Vec<$DT>) -> Self {\n-                Array {\n-                    len: v.len() as i32,\n-                    null_count: 0,\n-                    validity_bitmap: None,\n-                    data: ArrayData::from(v),\n-                }\n-            }\n-        }\n-        impl From<Buffer<$DT>> for Array {\n-            fn from(v: Buffer<$DT>) -> Self {\n-                Array {\n-                    len: v.len() as i32,\n-                    null_count: 0,\n-                    validity_bitmap: None,\n-                    data: ArrayData::from(v),\n-                }\n-            }\n+impl From<Vec<Rc<ArrayData>>> for StructArrayData {\n+    fn from(data: Vec<Rc<ArrayData>>) -> Self {\n+        StructArrayData {\n+            len: data[0].len() as i32,\n+            data,\n+            null_count: 0,\n+            validity_bitmap: None,\n         }\n-    };\n+    }\n+}\n+\n+/// Top level array type, just a holder for a boxed trait for the data it contains\n+pub struct Array {\n+    data: Rc<ArrayData>,\n+}\n+\n+impl Array {\n+    pub fn new(data: Rc<ArrayData>) -> Self {\n+        Array { data: data }\n+    }\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+    pub fn null_count(&self) -> usize {\n+        self.data.null_count()\n+    }\n+    pub fn data(&self) -> &Rc<ArrayData> {\n+        &self.data\n+    }\n+    pub fn validity_bitmap(&self) -> &Option<Bitmap> {\n+        self.data.validity_bitmap()\n+    }\n }\n \n-array_from_primitive!(bool);\n-array_from_primitive!(f32);\n-array_from_primitive!(f64);\n-array_from_primitive!(u8);\n-array_from_primitive!(u16);\n-array_from_primitive!(u32);\n-array_from_primitive!(u64);\n-array_from_primitive!(i8);\n-array_from_primitive!(i16);\n-array_from_primitive!(i32);\n-array_from_primitive!(i64);\n+impl<T> From<Buffer<T>> for Array\n+where\n+    T: ArrowPrimitiveType + 'static,\n+{\n+    fn from(buffer: Buffer<T>) -> Self {\n+        Array::new(Rc::new(BufferArrayData::from(buffer)))\n+    }\n+}\n+\n+impl<T> From<List<T>> for Array\n+where\n+    T: ArrowPrimitiveType + 'static,\n+{\n+    fn from(list: List<T>) -> Self {\n+        Array::new(Rc::new(ListArrayData::from(list)))\n+    }\n+}\n+\n+/// Create an Array from a Vec<T> of primitive values\n+impl<T> From<Vec<T>> for Array\n+where\n+    T: ArrowPrimitiveType + 'static,\n+{\n+    fn from(vec: Vec<T>) -> Self {\n+        Array::new(Rc::new(BufferArrayData::from(Buffer::from(vec))))\n+    }\n+}\n \n macro_rules! array_from_optional_primitive {\n     ($DT:ty, $DEFAULT:expr) => {\n@@ -164,10 +257,8 @@ macro_rules! array_from_optional_primitive {\n                     .map(|x| x.unwrap_or($DEFAULT))\n                     .collect::<Vec<$DT>>();\n                 Array {\n-                    len: values.len() as i32,\n-                    null_count,\n-                    validity_bitmap: Some(validity_bitmap),\n-                    data: ArrayData::from(values),\n+                    data: Rc::new(BufferArrayData::new(\n+                        Buffer::from(values), null_count, Some(validity_bitmap))),\n                 }\n             }\n         }\n@@ -186,76 +277,62 @@ array_from_optional_primitive!(i16, 0_i16);\n array_from_optional_primitive!(i32, 0_i32);\n array_from_optional_primitive!(i64, 0_i64);\n \n-/// This method mostly just used for unit tests\n+///// This method mostly just used for unit tests\n impl From<Vec<&'static str>> for Array {\n     fn from(v: Vec<&'static str>) -> Self {\n-        Array::from(v.iter().map(|s| s.to_string()).collect::<Vec<String>>())\n+        let mut builder: ListBuilder<u8> = ListBuilder::with_capacity(v.len());\n+        for s in v {\n+            builder.push(s.as_bytes())\n+        }\n+        Array::from(builder.finish())\n     }\n }\n \n impl From<Vec<String>> for Array {\n     fn from(v: Vec<String>) -> Self {\n-        Array {\n-            len: v.len() as i32,\n-            null_count: 0,\n-            validity_bitmap: None,\n-            data: ArrayData::Utf8(List::from(v)),\n-        }\n-    }\n-}\n-\n-impl From<Vec<Rc<Array>>> for Array {\n-    fn from(v: Vec<Rc<Array>>) -> Self {\n-        Array {\n-            len: v.len() as i32,\n-            null_count: 0,\n-            validity_bitmap: None,\n-            data: ArrayData::Struct(v.iter().map(|a| a.clone()).collect()),\n+        let mut builder: ListBuilder<u8> = ListBuilder::with_capacity(v.len());\n+        for s in v {\n+            builder.push(s.as_bytes())\n         }\n+        Array::from(builder.finish())\n     }\n }\n \n #[cfg(test)]\n mod tests {\n-    use super::super::datatypes::*;\n     use super::*;\n \n     #[test]\n-    fn test_utf8_offsets() {\n-        let a = Array::from(vec![\"this\", \"is\", \"a\", \"test\"]);\n-        assert_eq!(4, a.len());\n-        match *a.data() {\n-            ArrayData::Utf8(ref list) => {\n-                assert_eq!(11, list.data().len());\n-                assert_eq!(0, *list.offsets().get(0));\n-                assert_eq!(4, *list.offsets().get(1));\n-                assert_eq!(6, *list.offsets().get(2));\n-                assert_eq!(7, *list.offsets().get(3));\n-                assert_eq!(11, *list.offsets().get(4));\n-            }\n-            _ => panic!(),\n-        }\n+    fn array_data_from_list_u8() {\n+        let mut b: ListBuilder<u8> = ListBuilder::new();\n+        b.push(&[1, 2, 3, 4, 5]);\n+        b.push(&[5, 4, 3, 2, 1]);\n+        let array_data = ListArrayData::from(b.finish());\n+        assert_eq!(2, array_data.len());\n     }\n \n     #[test]\n-    fn test_utf8_slices() {\n-        let a = Array::from(vec![\"this\", \"is\", \"a\", \"test\"]);\n-        match *a.data() {\n-            ArrayData::Utf8(ref d) => {\n-                assert_eq!(4, d.len());\n-                assert_eq!(\"this\", str::from_utf8(d.slice(0)).unwrap());\n-                assert_eq!(\"is\", str::from_utf8(d.slice(1)).unwrap());\n-                assert_eq!(\"a\", str::from_utf8(d.slice(2)).unwrap());\n-                assert_eq!(\"test\", str::from_utf8(d.slice(3)).unwrap());\n-            }\n-            _ => panic!(),\n-        }\n+    fn array_from_list_u8() {\n+        let mut b: ListBuilder<u8> = ListBuilder::new();\n+        b.push(\"Hello, \".as_bytes());\n+        b.push(\"World!\".as_bytes());\n+        let array = Array::from(b.finish());\n+        // downcast back to the data\n+        let array_list_u8 = array\n+            .data()\n+            .as_any()\n+            .downcast_ref::<ListArrayData<u8>>()\n+            .unwrap();\n+        assert_eq!(2, array_list_u8.len());\n+        assert_eq!(\"Hello, \", str::from_utf8(array_list_u8.get(0)).unwrap());\n+        assert_eq!(\"World!\", str::from_utf8(array_list_u8.get(1)).unwrap());\n     }\n \n     #[test]\n     fn test_from_bool() {\n         let a = Array::from(vec![false, false, true, false]);\n         assert_eq!(4, a.len());\n+        assert_eq!(0, a.null_count());\n     }\n \n     #[test]\n@@ -268,9 +345,11 @@ mod tests {\n     fn test_from_i32() {\n         let a = Array::from(vec![15, 14, 13, 12, 11]);\n         assert_eq!(5, a.len());\n-        match *a.data() {\n-            ArrayData::Int32(ref b) => {\n-                assert_eq!(vec![15, 14, 13, 12, 11], b.iter().collect::<Vec<i32>>());\n+\n+        match a.data.as_any().downcast_ref::<BufferArrayData<i32>>() {\n+            Some(ref buf) => {\n+                assert_eq!(5, buf.len())\n+                //TODO: assert_eq!(vec![15, 14, 13, 12, 11], buf.iter().collect::<Vec<i32>>());\n             }\n             _ => panic!(),\n         }\n@@ -287,25 +366,30 @@ mod tests {\n     fn test_from_optional_i32() {\n         let a = Array::from(vec![Some(1), None, Some(2), Some(3), None]);\n         assert_eq!(5, a.len());\n+        assert_eq!(2, a.null_count());\n         // 1 == not null\n-        let validity_bitmap = a.validity_bitmap.unwrap();\n-        assert_eq!(true, validity_bitmap.is_set(0));\n-        assert_eq!(false, validity_bitmap.is_set(1));\n-        assert_eq!(true, validity_bitmap.is_set(2));\n-        assert_eq!(true, validity_bitmap.is_set(3));\n-        assert_eq!(false, validity_bitmap.is_set(4));\n+        match a.validity_bitmap() {\n+            &Some(ref validity_bitmap) => {\n+                assert_eq!(true, validity_bitmap.is_set(0));\n+                assert_eq!(false, validity_bitmap.is_set(1));\n+                assert_eq!(true, validity_bitmap.is_set(2));\n+                assert_eq!(true, validity_bitmap.is_set(3));\n+                assert_eq!(false, validity_bitmap.is_set(4));\n+            }\n+            _ => panic!(),\n+        }\n     }\n \n     #[test]\n     fn test_struct() {\n-        let _schema = DataType::Struct(vec![\n-            Field::new(\"a\", DataType::Int32, false),\n-            Field::new(\"b\", DataType::Float32, false),\n-        ]);\n-\n-        let a = Rc::new(Array::from(vec![1, 2, 3, 4, 5]));\n-        let b = Rc::new(Array::from(vec![1.1, 2.2, 3.3, 4.4, 5.5]));\n-        let _ = Rc::new(Array::from(vec![a, b]));\n+        let a: Rc<ArrayData> = Rc::new(BufferArrayData::from(Buffer::from(vec![1, 2, 3, 4, 5])));\n+        let b: Rc<ArrayData> = Rc::new(BufferArrayData::from(Buffer::from(vec![\n+            1.1, 2.2, 3.3, 4.4, 5.5\n+        ])));\n+\n+        let s = StructArrayData::from(vec![a, b]);\n+        assert_eq!(2, s.num_columns());\n+        assert_eq!(0, s.null_count());\n     }\n \n }\ndiff --git a/rust/src/buffer.rs b/rust/src/buffer.rs\nindex cdfbfc995..8ae744065 100644\n--- a/rust/src/buffer.rs\n+++ b/rust/src/buffer.rs\n@@ -20,18 +20,25 @@ use libc;\n use std::mem;\n use std::slice;\n \n+use super::datatypes::*;\n use super::memory::*;\n \n /// Buffer<T> is essentially just a Vec<T> for fixed-width primitive types and the start of the\n /// memory region is aligned at a 64-byte boundary\n-pub struct Buffer<T> {\n+pub struct Buffer<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     /// Contiguous memory region holding instances of primitive T\n     data: *const T,\n     /// Number of elements in the buffer\n     len: i32,\n }\n \n-impl<T> Buffer<T> {\n+impl<T> Buffer<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     pub fn from_raw_parts(data: *const T, len: i32) -> Self {\n         Buffer { data, len }\n     }\n@@ -75,7 +82,10 @@ impl<T> Buffer<T> {\n     }\n }\n \n-impl<T> Drop for Buffer<T> {\n+impl<T> Drop for Buffer<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     fn drop(&mut self) {\n         unsafe {\n             let p = mem::transmute::<*const T, *const u8>(self.data);\n@@ -85,7 +95,10 @@ impl<T> Drop for Buffer<T> {\n }\n \n /// Iterator over the elements of a buffer\n-pub struct BufferIterator<T> {\n+pub struct BufferIterator<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     data: *const T,\n     len: i32,\n     index: isize,\n@@ -93,7 +106,7 @@ pub struct BufferIterator<T> {\n \n impl<T> Iterator for BufferIterator<T>\n where\n-    T: Copy,\n+    T: ArrowPrimitiveType,\n {\n     type Item = T;\n \n@@ -107,43 +120,30 @@ where\n     }\n }\n \n-macro_rules! array_from_primitive {\n-    ($DT:ty) => {\n-        impl From<Vec<$DT>> for Buffer<$DT> {\n-            fn from(v: Vec<$DT>) -> Self {\n-                // allocate aligned memory buffer\n-                let len = v.len();\n-                let sz = mem::size_of::<$DT>();\n-                let buffer = allocate_aligned((len * sz) as i64).unwrap();\n-                Buffer {\n-                    len: len as i32,\n-                    data: unsafe {\n-                        let dst = mem::transmute::<*const u8, *mut libc::c_void>(buffer);\n-                        libc::memcpy(\n-                            dst,\n-                            mem::transmute::<*const $DT, *const libc::c_void>(v.as_ptr()),\n-                            len * sz,\n-                        );\n-                        mem::transmute::<*mut libc::c_void, *const $DT>(dst)\n-                    },\n-                }\n-            }\n+impl<T> From<Vec<T>> for Buffer<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    fn from(v: Vec<T>) -> Self {\n+        // allocate aligned memory buffer\n+        let len = v.len();\n+        let sz = mem::size_of::<T>();\n+        let buffer = allocate_aligned((len * sz) as i64).unwrap();\n+        Buffer {\n+            len: len as i32,\n+            data: unsafe {\n+                let dst = mem::transmute::<*const u8, *mut libc::c_void>(buffer);\n+                libc::memcpy(\n+                    dst,\n+                    mem::transmute::<*const T, *const libc::c_void>(v.as_ptr()),\n+                    len * sz,\n+                );\n+                mem::transmute::<*mut libc::c_void, *const T>(dst)\n+            },\n         }\n-    };\n+    }\n }\n \n-array_from_primitive!(bool);\n-array_from_primitive!(f32);\n-array_from_primitive!(f64);\n-array_from_primitive!(u8);\n-array_from_primitive!(u16);\n-array_from_primitive!(u32);\n-array_from_primitive!(u64);\n-array_from_primitive!(i8);\n-array_from_primitive!(i16);\n-array_from_primitive!(i32);\n-array_from_primitive!(i64);\n-\n impl From<Bytes> for Buffer<u8> {\n     fn from(bytes: Bytes) -> Self {\n         // allocate aligned\ndiff --git a/rust/src/builder.rs b/rust/src/builder.rs\nindex ad0caec9f..45cd8cab6 100644\n--- a/rust/src/builder.rs\n+++ b/rust/src/builder.rs\n@@ -22,16 +22,23 @@ use std::ptr;\n use std::slice;\n \n use super::buffer::*;\n+use super::datatypes::*;\n use super::memory::*;\n \n /// Buffer builder with zero-copy build method\n-pub struct Builder<T> {\n+pub struct Builder<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     data: *mut T,\n     len: usize,\n     capacity: usize,\n }\n \n-impl<T> Builder<T> {\n+impl<T> Builder<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     /// Creates a builder with a default capacity\n     pub fn new() -> Self {\n         Builder::with_capacity(64)\n@@ -136,7 +143,10 @@ impl<T> Builder<T> {\n     }\n }\n \n-impl<T> Drop for Builder<T> {\n+impl<T> Drop for Builder<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     fn drop(&mut self) {\n         if !self.data.is_null() {\n             unsafe {\ndiff --git a/rust/src/datatypes.rs b/rust/src/datatypes.rs\nindex d486ab30c..87808a85f 100644\n--- a/rust/src/datatypes.rs\n+++ b/rust/src/datatypes.rs\n@@ -35,9 +35,33 @@ pub enum DataType {\n     Float32,\n     Float64,\n     Utf8,\n+    List(Box<DataType>),\n     Struct(Vec<Field>),\n }\n \n+/// Arrow struct/schema field\n+#[derive(Debug, Clone, PartialEq)]\n+pub struct Field {\n+    name: String,\n+    data_type: DataType,\n+    nullable: bool,\n+}\n+\n+/// Primitive type (ints, floats, strings)\n+pub trait ArrowPrimitiveType: Copy + 'static {}\n+\n+impl ArrowPrimitiveType for bool {}\n+impl ArrowPrimitiveType for u8 {}\n+impl ArrowPrimitiveType for u16 {}\n+impl ArrowPrimitiveType for u32 {}\n+impl ArrowPrimitiveType for u64 {}\n+impl ArrowPrimitiveType for i8 {}\n+impl ArrowPrimitiveType for i16 {}\n+impl ArrowPrimitiveType for i32 {}\n+impl ArrowPrimitiveType for i64 {}\n+impl ArrowPrimitiveType for f32 {}\n+impl ArrowPrimitiveType for f64 {}\n+\n impl DataType {\n     /// Parse a data type from a JSON representation\n     fn from(json: &Value) -> Result<DataType, ArrowError> {\n@@ -129,18 +153,14 @@ impl DataType {\n                     Value::Array(fields.iter().map(|f| f.to_json()).collect::<Vec<Value>>());\n                 json!({ \"fields\": field_json_array })\n             }\n+            DataType::List(ref t) => {\n+                let child_json = t.to_json();\n+                json!({ \"name\": \"list\", \"children\": child_json })\n+            }\n         }\n     }\n }\n \n-/// Arrow Field\n-#[derive(Debug, Clone, PartialEq)]\n-pub struct Field {\n-    name: String,\n-    data_type: DataType,\n-    nullable: bool,\n-}\n-\n impl Field {\n     pub fn new(name: &str, data_type: DataType, nullable: bool) -> Self {\n         Field {\n@@ -243,8 +263,12 @@ impl Schema {\n         &self.columns\n     }\n \n+    pub fn column(&self, i: usize) -> &Field {\n+        &self.columns[i]\n+    }\n+\n     /// look up a column by name and return a reference to the column along with it's index\n-    pub fn column(&self, name: &str) -> Option<(usize, &Field)> {\n+    pub fn column_with_name(&self, name: &str) -> Option<(usize, &Field)> {\n         self.columns\n             .iter()\n             .enumerate()\ndiff --git a/rust/src/lib.rs b/rust/src/lib.rs\nindex 0ac8155ef..18e50264a 100644\n--- a/rust/src/lib.rs\n+++ b/rust/src/lib.rs\n@@ -32,3 +32,4 @@ pub mod list_builder;\n pub mod memory;\n #[cfg(not(windows))]\n pub mod memory_pool;\n+pub mod record_batch;\ndiff --git a/rust/src/list.rs b/rust/src/list.rs\nindex 8c4da1059..f1e823349 100644\n--- a/rust/src/list.rs\n+++ b/rust/src/list.rs\n@@ -18,18 +18,25 @@\n use std::str;\n \n use super::buffer::Buffer;\n+use super::datatypes::*;\n use super::list_builder::ListBuilder;\n \n /// List<T> is a nested type in which each array slot contains a variable-size sequence of values of\n /// the same type T\n-pub struct List<T> {\n+pub struct List<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     /// Contiguous region of memory holding contents of the lists\n     data: Buffer<T>,\n     /// offsets to start of each array slot\n     offsets: Buffer<i32>,\n }\n \n-impl<T> List<T> {\n+impl<T> List<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     /// Create a List from raw parts\n     pub fn from_raw_parts(data: Buffer<T>, offsets: Buffer<i32>) -> Self {\n         List { data, offsets }\n@@ -51,7 +58,7 @@ impl<T> List<T> {\n     }\n \n     /// Get the contents of a single array slot\n-    pub fn slice(&self, index: usize) -> &[T] {\n+    pub fn get(&self, index: usize) -> &[T] {\n         let start = *self.offsets.get(index) as usize;\n         let end = *self.offsets.get(index + 1) as usize;\n         &self.data.slice(start, end)\n@@ -84,20 +91,20 @@ mod tests {\n     fn test_utf8_slices() {\n         let list = List::from(vec![\"this\", \"is\", \"a\", \"test\"]);\n         assert_eq!(4, list.len());\n-        assert_eq!(\"this\", str::from_utf8(list.slice(0)).unwrap());\n-        assert_eq!(\"is\", str::from_utf8(list.slice(1)).unwrap());\n-        assert_eq!(\"a\", str::from_utf8(list.slice(2)).unwrap());\n-        assert_eq!(\"test\", str::from_utf8(list.slice(3)).unwrap());\n+        assert_eq!(\"this\", str::from_utf8(list.get(0)).unwrap());\n+        assert_eq!(\"is\", str::from_utf8(list.get(1)).unwrap());\n+        assert_eq!(\"a\", str::from_utf8(list.get(2)).unwrap());\n+        assert_eq!(\"test\", str::from_utf8(list.get(3)).unwrap());\n     }\n \n     #[test]\n     fn test_utf8_empty_strings() {\n         let list = List::from(vec![\"\", \"\", \"\", \"\"]);\n         assert_eq!(4, list.len());\n-        assert_eq!(\"\", str::from_utf8(list.slice(0)).unwrap());\n-        assert_eq!(\"\", str::from_utf8(list.slice(1)).unwrap());\n-        assert_eq!(\"\", str::from_utf8(list.slice(2)).unwrap());\n-        assert_eq!(\"\", str::from_utf8(list.slice(3)).unwrap());\n+        assert_eq!(\"\", str::from_utf8(list.get(0)).unwrap());\n+        assert_eq!(\"\", str::from_utf8(list.get(1)).unwrap());\n+        assert_eq!(\"\", str::from_utf8(list.get(2)).unwrap());\n+        assert_eq!(\"\", str::from_utf8(list.get(3)).unwrap());\n     }\n \n }\ndiff --git a/rust/src/list_builder.rs b/rust/src/list_builder.rs\nindex 71547d2f0..627f776c6 100644\n--- a/rust/src/list_builder.rs\n+++ b/rust/src/list_builder.rs\n@@ -16,15 +16,22 @@\n // under the License.\n \n use super::builder::*;\n+use super::datatypes::*;\n use super::list::List;\n \n /// Builder for List<T>\n-pub struct ListBuilder<T> {\n+pub struct ListBuilder<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     data: Builder<T>,\n     offsets: Builder<i32>,\n }\n \n-impl<T> ListBuilder<T> {\n+impl<T> ListBuilder<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     /// Create a ListBuilder with a default capacity\n     pub fn new() -> Self {\n         ListBuilder::with_capacity(64)\n@@ -62,8 +69,8 @@ mod tests {\n         let buffer = b.finish();\n \n         assert_eq!(2, buffer.len());\n-        assert_eq!(\"Hello, \".as_bytes(), buffer.slice(0));\n-        assert_eq!(\"World!\".as_bytes(), buffer.slice(1));\n+        assert_eq!(\"Hello, \".as_bytes(), buffer.get(0));\n+        assert_eq!(\"World!\".as_bytes(), buffer.get(1));\n     }\n \n     #[test]\n@@ -73,8 +80,8 @@ mod tests {\n         b.push(\"World!\".as_bytes());\n         let buffer = b.finish();\n         assert_eq!(2, buffer.len());\n-        assert_eq!(\"Hello, \".as_bytes(), buffer.slice(0));\n-        assert_eq!(\"World!\".as_bytes(), buffer.slice(1));\n+        assert_eq!(\"Hello, \".as_bytes(), buffer.get(0));\n+        assert_eq!(\"World!\".as_bytes(), buffer.get(1));\n     }\n \n     #[test]\n@@ -86,8 +93,8 @@ mod tests {\n         let buffer = b.finish();\n \n         assert_eq!(3, buffer.len());\n-        assert_eq!(\"Hello, \".as_bytes(), buffer.slice(0));\n-        assert_eq!(\"\".as_bytes(), buffer.slice(1));\n-        assert_eq!(\"World!\".as_bytes(), buffer.slice(2));\n+        assert_eq!(\"Hello, \".as_bytes(), buffer.get(0));\n+        assert_eq!(\"\".as_bytes(), buffer.get(1));\n+        assert_eq!(\"World!\".as_bytes(), buffer.get(2));\n     }\n }\ndiff --git a/rust/src/record_batch.rs b/rust/src/record_batch.rs\nnew file mode 100644\nindex 000000000..323cfe60a\n--- /dev/null\n+++ b/rust/src/record_batch.rs\n@@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use super::array::*;\n+use super::datatypes::*;\n+use std::rc::Rc;\n+\n+/// A batch of column-oriented data\n+pub struct RecordBatch {\n+    schema: Rc<Schema>,\n+    columns: Vec<Rc<Array>>,\n+}\n+\n+impl RecordBatch {\n+    pub fn new(schema: Rc<Schema>, columns: Vec<Rc<Array>>) -> Self {\n+        assert!(columns.len() > 0);\n+        RecordBatch { schema, columns }\n+    }\n+\n+    pub fn schema(&self) -> &Rc<Schema> {\n+        &self.schema\n+    }\n+\n+    pub fn num_columns(&self) -> usize {\n+        self.columns.len()\n+    }\n+\n+    pub fn num_rows(&self) -> usize {\n+        self.columns[0].len()\n+    }\n+\n+    pub fn column(&self, i: usize) -> &Rc<Array> {\n+        &self.columns[i]\n+    }\n+\n+    pub fn column_data(&self, i: usize) -> &Rc<ArrayData> {\n+        &self.columns[i].data()\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn create_record_batch() {\n+        let schema = Schema::new(vec![\n+            Field::new(\"a\", DataType::Int32, false),\n+            Field::new(\"b\", DataType::Utf8, false),\n+        ]);\n+\n+        let a = Array::from(vec![1, 2, 3, 4, 5]);\n+        let b = Array::from(vec![\"a\", \"b\", \"c\", \"d\", \"e\"]);\n+\n+        let record_batch = RecordBatch::new(Rc::new(schema), vec![Rc::new(a), Rc::new(b)]);\n+\n+        assert_eq!(5, record_batch.num_rows());\n+        assert_eq!(2, record_batch.num_columns());\n+        assert_eq!(\n+            &DataType::Int32,\n+            record_batch.schema().column(0).data_type()\n+        );\n+        assert_eq!(&DataType::Utf8, record_batch.schema().column(1).data_type());\n+        assert_eq!(5, record_batch.column(0).len());\n+        assert_eq!(5, record_batch.column(1).len());\n+        assert_eq!(5, record_batch.column_data(0).len());\n+        assert_eq!(5, record_batch.column_data(1).len());\n+    }\n+}\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T05:52:07.962+0000",
                    "updated": "2018-05-01T05:52:07.962+0000",
                    "started": "2018-05-01T05:52:07.962+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "96965",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/97001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#discussion_r185185337\n \n \n\n ##########\n File path: rust/src/buffer.rs\n ##########\n @@ -20,18 +20,25 @@ use libc;\n use std::mem;\n use std::slice;\n \n+use super::datatypes::*;\n use super::memory::*;\n \n /// Buffer<T> is essentially just a Vec<T> for fixed-width primitive types and the start of the\n /// memory region is aligned at a 64-byte boundary\n-pub struct Buffer<T> {\n+pub struct Buffer<T>\n \n Review comment:\n   I'm curious about the design choice here. In the C++ world, Arrow buffers are typeless (they just point to spans of bytes), it's arrays that give them their meaning. Do you benefit from giving buffers a specific type?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T08:32:21.642+0000",
                    "updated": "2018-05-01T08:32:21.642+0000",
                    "started": "2018-05-01T08:32:21.642+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97001",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/97002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#discussion_r185185427\n \n \n\n ##########\n File path: rust/src/buffer.rs\n ##########\n @@ -20,18 +20,25 @@ use libc;\n use std::mem;\n use std::slice;\n \n+use super::datatypes::*;\n use super::memory::*;\n \n /// Buffer<T> is essentially just a Vec<T> for fixed-width primitive types and the start of the\n /// memory region is aligned at a 64-byte boundary\n-pub struct Buffer<T> {\n+pub struct Buffer<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     /// Contiguous memory region holding instances of primitive T\n     data: *const T,\n     /// Number of elements in the buffer\n     len: i32,\n \n Review comment:\n   I'm curious why you don't make the length 64-bit?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T08:33:11.046+0000",
                    "updated": "2018-05-01T08:33:11.046+0000",
                    "started": "2018-05-01T08:33:11.045+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97002",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/97063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#discussion_r185220334\n \n \n\n ##########\n File path: rust/src/buffer.rs\n ##########\n @@ -20,18 +20,25 @@ use libc;\n use std::mem;\n use std::slice;\n \n+use super::datatypes::*;\n use super::memory::*;\n \n /// Buffer<T> is essentially just a Vec<T> for fixed-width primitive types and the start of the\n /// memory region is aligned at a 64-byte boundary\n-pub struct Buffer<T> {\n+pub struct Buffer<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     /// Contiguous memory region holding instances of primitive T\n     data: *const T,\n     /// Number of elements in the buffer\n     len: i32,\n \n Review comment:\n   Naturally I would have used `usize` but I understood that Arrow requirs the type `i32` to be used for array lengths?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T13:26:14.304+0000",
                    "updated": "2018-05-01T13:26:14.304+0000",
                    "started": "2018-05-01T13:26:14.304+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97063",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/97066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#discussion_r185221973\n \n \n\n ##########\n File path: rust/src/buffer.rs\n ##########\n @@ -20,18 +20,25 @@ use libc;\n use std::mem;\n use std::slice;\n \n+use super::datatypes::*;\n use super::memory::*;\n \n /// Buffer<T> is essentially just a Vec<T> for fixed-width primitive types and the start of the\n /// memory region is aligned at a 64-byte boundary\n-pub struct Buffer<T> {\n+pub struct Buffer<T>\n \n Review comment:\n   I think I do. I have type-safe Builder<T> where the push() method does not need to do any conversion per value being pushed, so it seems as efficient as possible. Then the memory is passed to the Buffer<T> where looking up values by index also seems as efficient as possible without any calculations on each lookup.\r\n   \r\n   I am spending more time looking at the C++ implementation now to try and learn from it and keep the Rust version consistent. If you think there are arguments for using a Buffer<u8> instead of Buffer<T> I'd like to hear those too.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T13:34:27.398+0000",
                    "updated": "2018-05-01T13:34:27.398+0000",
                    "started": "2018-05-01T13:34:27.398+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97066",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/97068",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#discussion_r185221973\n \n \n\n ##########\n File path: rust/src/buffer.rs\n ##########\n @@ -20,18 +20,25 @@ use libc;\n use std::mem;\n use std::slice;\n \n+use super::datatypes::*;\n use super::memory::*;\n \n /// Buffer<T> is essentially just a Vec<T> for fixed-width primitive types and the start of the\n /// memory region is aligned at a 64-byte boundary\n-pub struct Buffer<T> {\n+pub struct Buffer<T>\n \n Review comment:\n   I think I do. I have type-safe `Builder<T>` where the push() method does not need to do any conversion per value being pushed, so it seems as efficient as possible. Then the memory is passed to the `Buffer<T>` where looking up values by index also seems as efficient as possible without any calculations on each lookup.\r\n   \r\n   I am spending more time looking at the C++ implementation now to try and learn from it and keep the Rust version consistent. If you think there are arguments for using a `Buffer<u8>` instead of `Buffer<T>` I'd like to hear those too.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T13:34:45.803+0000",
                    "updated": "2018-05-01T13:34:45.803+0000",
                    "started": "2018-05-01T13:34:45.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97068",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/97070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#discussion_r185222774\n \n \n\n ##########\n File path: rust/src/buffer.rs\n ##########\n @@ -20,18 +20,25 @@ use libc;\n use std::mem;\n use std::slice;\n \n+use super::datatypes::*;\n use super::memory::*;\n \n /// Buffer<T> is essentially just a Vec<T> for fixed-width primitive types and the start of the\n /// memory region is aligned at a 64-byte boundary\n-pub struct Buffer<T> {\n+pub struct Buffer<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n     /// Contiguous memory region holding instances of primitive T\n     data: *const T,\n     /// Number of elements in the buffer\n     len: i32,\n \n Review comment:\n   The memory layout spec and the C++ implementation seem out of sync in that regard. The C++ implementation uses 64-bit ints for array sizes (it should perhaps use `size_t` or `ssize_t`). What *must* be 32-bit ints is offsets for list / string / binary arrays. @wesm \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-01T13:38:29.498+0000",
                    "updated": "2018-05-01T13:38:29.498+0000",
                    "started": "2018-05-01T13:38:29.498+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97070",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/97344",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#issuecomment-385865662\n \n \n   This needs a rebase\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-02T05:03:02.210+0000",
                    "updated": "2018-05-02T05:03:02.210+0000",
                    "started": "2018-05-02T05:03:02.209+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97344",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/97354",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#issuecomment-385869004\n \n \n   @pitrou I went ahead and changed to use `usize` everywhere (except for list offsets)\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-02T05:31:13.268+0000",
                    "updated": "2018-05-02T05:31:13.268+0000",
                    "started": "2018-05-02T05:31:13.267+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97354",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/98253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#issuecomment-386598738\n \n \n   I wrote a blog post about this design and posted it to Reddit to get feedback. Let's see what people think over this weekend and if there are no objections I'd like to get this merged on Monday or soon after.\r\n   \r\n   https://www.reddit.com/r/rust/comments/8gy45t/refactoring_apache_arrow_to_use_traits_and/\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-04T13:19:00.888+0000",
                    "updated": "2018-05-04T13:19:00.888+0000",
                    "started": "2018-05-04T13:19:00.887+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "98253",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/98891",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "crepererum commented on a change in pull request #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#discussion_r186338692\n \n \n\n ##########\n File path: rust/src/array.rs\n ##########\n @@ -15,247 +15,395 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+use std::any::Any;\n use std::convert::From;\n-use std::iter::Iterator;\n use std::rc::Rc;\n use std::str;\n use std::string::String;\n \n use super::bitmap::Bitmap;\n-use super::buffer::Buffer;\n-use super::list::List;\n-\n-pub enum ArrayData {\n-    Boolean(Buffer<bool>),\n-    Float32(Buffer<f32>),\n-    Float64(Buffer<f64>),\n-    Int8(Buffer<i8>),\n-    Int16(Buffer<i16>),\n-    Int32(Buffer<i32>),\n-    Int64(Buffer<i64>),\n-    UInt8(Buffer<u8>),\n-    UInt16(Buffer<u16>),\n-    UInt32(Buffer<u32>),\n-    UInt64(Buffer<u64>),\n-    Utf8(List<u8>),\n-    Struct(Vec<Rc<Array>>),\n+use super::builder::*;\n+use super::buffer::*;\n+use super::datatypes::*;\n+use super::list::*;\n+use super::list_builder::*;\n+\n+/// Array data type\n+pub trait ArrayData {\n+    fn len(&self) -> usize;\n+    fn null_count(&self) -> usize;\n+    fn validity_bitmap(&self) -> &Option<Bitmap>;\n+    fn as_any(&self) -> &Any;\n }\n \n-macro_rules! arraydata_from_primitive {\n-    ($DT:ty, $AT:ident) => {\n-        impl From<Vec<$DT>> for ArrayData {\n-            fn from(v: Vec<$DT>) -> Self {\n-                ArrayData::$AT(Buffer::from(v))\n-            }\n-        }\n-        impl From<Buffer<$DT>> for ArrayData {\n-            fn from(v: Buffer<$DT>) -> Self {\n-                ArrayData::$AT(v)\n-            }\n-        }\n-    };\n+/// Array of List<T>\n+pub struct ListArrayData<T: ArrowPrimitiveType> {\n+    len: usize,\n+    list: List<T>,\n+    null_count: usize,\n+    validity_bitmap: Option<Bitmap>,\n }\n \n-arraydata_from_primitive!(bool, Boolean);\n-arraydata_from_primitive!(f32, Float32);\n-arraydata_from_primitive!(f64, Float64);\n-arraydata_from_primitive!(i8, Int8);\n-arraydata_from_primitive!(i16, Int16);\n-arraydata_from_primitive!(i32, Int32);\n-arraydata_from_primitive!(i64, Int64);\n-arraydata_from_primitive!(u8, UInt8);\n-arraydata_from_primitive!(u16, UInt16);\n-arraydata_from_primitive!(u32, UInt32);\n-arraydata_from_primitive!(u64, UInt64);\n+impl<T> ListArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    pub fn get(&self, i: usize) -> &[T] {\n+        self.list.get(i)\n+    }\n \n-pub struct Array {\n-    /// number of elements in the array\n-    len: i32,\n-    /// number of null elements in the array\n-    null_count: i32,\n-    /// If null_count is greater than zero then the validity_bitmap will be Some(Bitmap)\n-    validity_bitmap: Option<Bitmap>,\n-    /// The array of elements\n-    data: ArrayData,\n+    pub fn list(&self) -> &List<T> {\n+        &self.list\n+    }\n }\n \n-impl Array {\n-    /// Create a new array where there are no null values\n-    pub fn new(len: usize, data: ArrayData) -> Self {\n-        Array {\n-            len: len as i32,\n-            data,\n+impl<T> From<List<T>> for ListArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    fn from(list: List<T>) -> Self {\n+        let len = list.len();\n+        ListArrayData {\n+            len,\n+            list,\n             validity_bitmap: None,\n             null_count: 0,\n         }\n     }\n+}\n \n-    /// Get a reference to the array data\n-    pub fn data(&self) -> &ArrayData {\n-        &self.data\n+impl<T> ArrayData for ListArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    fn len(&self) -> usize {\n+        self.len\n+    }\n+    fn null_count(&self) -> usize {\n+        self.null_count\n+    }\n+    fn validity_bitmap(&self) -> &Option<Bitmap> {\n+        &self.validity_bitmap\n+    }\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n+}\n+\n+/// Array of T\n \n Review comment:\n   Again, what's the difference to the `Array` type below?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-07T07:07:34.424+0000",
                    "updated": "2018-05-07T07:07:34.424+0000",
                    "started": "2018-05-07T07:07:34.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "98891",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/98892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "crepererum commented on a change in pull request #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#discussion_r186339442\n \n \n\n ##########\n File path: rust/src/record_batch.rs\n ##########\n @@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use super::array::*;\n+use super::datatypes::*;\n+use std::rc::Rc;\n+\n+/// A batch of column-oriented data\n+pub struct RecordBatch {\n+    schema: Rc<Schema>,\n+    columns: Vec<Rc<Array>>,\n+}\n+\n+impl RecordBatch {\n+    pub fn new(schema: Rc<Schema>, columns: Vec<Rc<Array>>) -> Self {\n+        assert!(columns.len() > 0);\n \n Review comment:\n   I think you're missing some sanity checks here. At least, you must ensure that all arrays have the same length, otherwise, neither the container name (\"batch\") nor the implementation of `num_rows` make any sense.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-07T07:07:34.511+0000",
                    "updated": "2018-05-07T07:07:34.511+0000",
                    "started": "2018-05-07T07:07:34.511+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "98892",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/98893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "crepererum commented on a change in pull request #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#discussion_r186338559\n \n \n\n ##########\n File path: rust/src/array.rs\n ##########\n @@ -15,247 +15,395 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+use std::any::Any;\n use std::convert::From;\n-use std::iter::Iterator;\n use std::rc::Rc;\n use std::str;\n use std::string::String;\n \n use super::bitmap::Bitmap;\n-use super::buffer::Buffer;\n-use super::list::List;\n-\n-pub enum ArrayData {\n-    Boolean(Buffer<bool>),\n-    Float32(Buffer<f32>),\n-    Float64(Buffer<f64>),\n-    Int8(Buffer<i8>),\n-    Int16(Buffer<i16>),\n-    Int32(Buffer<i32>),\n-    Int64(Buffer<i64>),\n-    UInt8(Buffer<u8>),\n-    UInt16(Buffer<u16>),\n-    UInt32(Buffer<u32>),\n-    UInt64(Buffer<u64>),\n-    Utf8(List<u8>),\n-    Struct(Vec<Rc<Array>>),\n+use super::builder::*;\n+use super::buffer::*;\n+use super::datatypes::*;\n+use super::list::*;\n+use super::list_builder::*;\n+\n+/// Array data type\n+pub trait ArrayData {\n+    fn len(&self) -> usize;\n \n Review comment:\n   All functions here lack documentation.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-07T07:07:34.525+0000",
                    "updated": "2018-05-07T07:07:34.525+0000",
                    "started": "2018-05-07T07:07:34.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "98893",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/98894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "crepererum commented on a change in pull request #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#discussion_r186338445\n \n \n\n ##########\n File path: rust/src/array.rs\n ##########\n @@ -15,247 +15,395 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+use std::any::Any;\n use std::convert::From;\n-use std::iter::Iterator;\n use std::rc::Rc;\n use std::str;\n use std::string::String;\n \n use super::bitmap::Bitmap;\n-use super::buffer::Buffer;\n-use super::list::List;\n-\n-pub enum ArrayData {\n-    Boolean(Buffer<bool>),\n-    Float32(Buffer<f32>),\n-    Float64(Buffer<f64>),\n-    Int8(Buffer<i8>),\n-    Int16(Buffer<i16>),\n-    Int32(Buffer<i32>),\n-    Int64(Buffer<i64>),\n-    UInt8(Buffer<u8>),\n-    UInt16(Buffer<u16>),\n-    UInt32(Buffer<u32>),\n-    UInt64(Buffer<u64>),\n-    Utf8(List<u8>),\n-    Struct(Vec<Rc<Array>>),\n+use super::builder::*;\n+use super::buffer::*;\n+use super::datatypes::*;\n+use super::list::*;\n+use super::list_builder::*;\n+\n+/// Array data type\n \n Review comment:\n   If `ArrayData` is a \"Array data type\", then what exactly is an `Array`? Or is `ArrayData` the \"data type of an Array\"? This doesn't seem to be right either, because `len`, `null_count`, `validity_bitmap` and `as_any` don't make up a data type.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-07T07:07:34.539+0000",
                    "updated": "2018-05-07T07:07:34.539+0000",
                    "started": "2018-05-07T07:07:34.538+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "98894",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/98895",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "crepererum commented on a change in pull request #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#discussion_r186340426\n \n \n\n ##########\n File path: rust/src/datatypes.rs\n ##########\n @@ -35,9 +35,33 @@ pub enum DataType {\n     Float32,\n     Float64,\n     Utf8,\n+    List(Box<DataType>),\n     Struct(Vec<Field>),\n }\n \n+/// Arrow struct/schema field\n+#[derive(Debug, Clone, PartialEq)]\n+pub struct Field {\n+    name: String,\n+    data_type: DataType,\n+    nullable: bool,\n+}\n+\n+/// Primitive type (ints, floats, strings)\n+pub trait ArrowPrimitiveType: Copy + PartialOrd + 'static {}\n+\n+impl ArrowPrimitiveType for bool {}\n \n Review comment:\n   Your design choice of using a trait instead of an enum has some important implications:\r\n   \r\n   - Users of the library can impl it for their own type and therefore extend the set of valid arrow types. Is this desired? If not, I think we would need to modify the visiblity marker at one point (see https://doc.rust-lang.org/nightly/unstable-book/language-features/crate-visibility-modifier.html once stable)\r\n   - Another indicator that this is indeed not user-extensible is the semantic relation to `DataType`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-07T07:07:34.559+0000",
                    "updated": "2018-05-07T07:07:34.559+0000",
                    "started": "2018-05-07T07:07:34.559+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "98895",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/98896",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "crepererum commented on a change in pull request #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#discussion_r186339016\n \n \n\n ##########\n File path: rust/src/array.rs\n ##########\n @@ -15,247 +15,395 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+use std::any::Any;\n use std::convert::From;\n-use std::iter::Iterator;\n use std::rc::Rc;\n use std::str;\n use std::string::String;\n \n use super::bitmap::Bitmap;\n-use super::buffer::Buffer;\n-use super::list::List;\n-\n-pub enum ArrayData {\n-    Boolean(Buffer<bool>),\n-    Float32(Buffer<f32>),\n-    Float64(Buffer<f64>),\n-    Int8(Buffer<i8>),\n-    Int16(Buffer<i16>),\n-    Int32(Buffer<i32>),\n-    Int64(Buffer<i64>),\n-    UInt8(Buffer<u8>),\n-    UInt16(Buffer<u16>),\n-    UInt32(Buffer<u32>),\n-    UInt64(Buffer<u64>),\n-    Utf8(List<u8>),\n-    Struct(Vec<Rc<Array>>),\n+use super::builder::*;\n+use super::buffer::*;\n+use super::datatypes::*;\n+use super::list::*;\n+use super::list_builder::*;\n+\n+/// Array data type\n+pub trait ArrayData {\n+    fn len(&self) -> usize;\n+    fn null_count(&self) -> usize;\n+    fn validity_bitmap(&self) -> &Option<Bitmap>;\n+    fn as_any(&self) -> &Any;\n }\n \n-macro_rules! arraydata_from_primitive {\n-    ($DT:ty, $AT:ident) => {\n-        impl From<Vec<$DT>> for ArrayData {\n-            fn from(v: Vec<$DT>) -> Self {\n-                ArrayData::$AT(Buffer::from(v))\n-            }\n-        }\n-        impl From<Buffer<$DT>> for ArrayData {\n-            fn from(v: Buffer<$DT>) -> Self {\n-                ArrayData::$AT(v)\n-            }\n-        }\n-    };\n+/// Array of List<T>\n+pub struct ListArrayData<T: ArrowPrimitiveType> {\n+    len: usize,\n+    list: List<T>,\n+    null_count: usize,\n+    validity_bitmap: Option<Bitmap>,\n }\n \n-arraydata_from_primitive!(bool, Boolean);\n-arraydata_from_primitive!(f32, Float32);\n-arraydata_from_primitive!(f64, Float64);\n-arraydata_from_primitive!(i8, Int8);\n-arraydata_from_primitive!(i16, Int16);\n-arraydata_from_primitive!(i32, Int32);\n-arraydata_from_primitive!(i64, Int64);\n-arraydata_from_primitive!(u8, UInt8);\n-arraydata_from_primitive!(u16, UInt16);\n-arraydata_from_primitive!(u32, UInt32);\n-arraydata_from_primitive!(u64, UInt64);\n+impl<T> ListArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    pub fn get(&self, i: usize) -> &[T] {\n+        self.list.get(i)\n+    }\n \n-pub struct Array {\n-    /// number of elements in the array\n-    len: i32,\n-    /// number of null elements in the array\n-    null_count: i32,\n-    /// If null_count is greater than zero then the validity_bitmap will be Some(Bitmap)\n-    validity_bitmap: Option<Bitmap>,\n-    /// The array of elements\n-    data: ArrayData,\n+    pub fn list(&self) -> &List<T> {\n+        &self.list\n+    }\n }\n \n-impl Array {\n-    /// Create a new array where there are no null values\n-    pub fn new(len: usize, data: ArrayData) -> Self {\n-        Array {\n-            len: len as i32,\n-            data,\n+impl<T> From<List<T>> for ListArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    fn from(list: List<T>) -> Self {\n+        let len = list.len();\n+        ListArrayData {\n+            len,\n+            list,\n             validity_bitmap: None,\n             null_count: 0,\n         }\n     }\n+}\n \n-    /// Get a reference to the array data\n-    pub fn data(&self) -> &ArrayData {\n-        &self.data\n+impl<T> ArrayData for ListArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    fn len(&self) -> usize {\n+        self.len\n+    }\n+    fn null_count(&self) -> usize {\n+        self.null_count\n+    }\n+    fn validity_bitmap(&self) -> &Option<Bitmap> {\n+        &self.validity_bitmap\n+    }\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n+}\n+\n+/// Array of T\n+pub struct BufferArrayData<T: ArrowPrimitiveType> {\n+    len: usize,\n+    buffer: Buffer<T>,\n+    null_count: usize,\n+    validity_bitmap: Option<Bitmap>,\n+}\n+\n+impl<T> BufferArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    pub fn new(data: Buffer<T>, null_count: usize, validity_bitmap: Option<Bitmap>) -> Self {\n+        BufferArrayData {\n+            len: data.len(),\n+            buffer: data,\n+            null_count,\n+            validity_bitmap,\n+        }\n     }\n \n-    /// number of elements in the array\n     pub fn len(&self) -> usize {\n-        self.len as usize\n+        self.len\n     }\n \n-    /// number of null elements in the array\n-    pub fn null_count(&self) -> usize {\n-        self.null_count as usize\n+    pub fn iter(&self) -> BufferIterator<T> {\n+        self.buffer.iter()\n     }\n \n-    /// If null_count is greater than zero then the validity_bitmap will be Some(Bitmap)\n-    pub fn validity_bitmap(&self) -> &Option<Bitmap> {\n-        &self.validity_bitmap\n+    pub fn buffer(&self) -> &Buffer<T> {\n+        &self.buffer\n     }\n-}\n \n-macro_rules! array_from_primitive {\n-    ($DT:ty) => {\n-        impl From<Vec<$DT>> for Array {\n-            fn from(v: Vec<$DT>) -> Self {\n-                Array {\n-                    len: v.len() as i32,\n-                    null_count: 0,\n-                    validity_bitmap: None,\n-                    data: ArrayData::from(v),\n+    /// Determine the minimum value in the buffer\n+    pub fn min(&self) -> Option<T> {\n+        let mut n: Option<T> = None;\n+        match &self.validity_bitmap {\n+            &Some(ref bitmap) => for i in 0..self.len {\n+                if bitmap.is_set(i) {\n+                    let mut m = self.buffer.get(i);\n+                    match n {\n+                        None => n = Some(*m),\n+                        Some(nn) => if *m < nn {\n+                            n = Some(*m)\n+                        },\n+                    }\n                 }\n-            }\n-        }\n-        impl From<Buffer<$DT>> for Array {\n-            fn from(v: Buffer<$DT>) -> Self {\n-                Array {\n-                    len: v.len() as i32,\n-                    null_count: 0,\n-                    validity_bitmap: None,\n-                    data: ArrayData::from(v),\n+            },\n+            &None => for i in 0..self.len {\n+                let mut m = self.buffer.get(i);\n+                match n {\n+                    None => n = Some(*m),\n+                    Some(nn) => if *m < nn {\n+                        n = Some(*m)\n+                    },\n                 }\n-            }\n+            },\n         }\n-    };\n-}\n+        n\n+    }\n \n-array_from_primitive!(bool);\n-array_from_primitive!(f32);\n-array_from_primitive!(f64);\n-array_from_primitive!(u8);\n-array_from_primitive!(u16);\n-array_from_primitive!(u32);\n-array_from_primitive!(u64);\n-array_from_primitive!(i8);\n-array_from_primitive!(i16);\n-array_from_primitive!(i32);\n-array_from_primitive!(i64);\n-\n-macro_rules! array_from_optional_primitive {\n-    ($DT:ty, $DEFAULT:expr) => {\n-        impl From<Vec<Option<$DT>>> for Array {\n-            fn from(v: Vec<Option<$DT>>) -> Self {\n-                let mut null_count = 0;\n-                let mut validity_bitmap = Bitmap::new(v.len());\n-                for i in 0..v.len() {\n-                    if v[i].is_none() {\n-                        null_count += 1;\n-                        validity_bitmap.clear(i);\n+    /// Determine the maximum value in the buffer\n+    pub fn max(&self) -> Option<T> {\n+        let mut n: Option<T> = None;\n+        match &self.validity_bitmap {\n+            &Some(ref bitmap) => for i in 0..self.len {\n+                if bitmap.is_set(i) {\n+                    let mut m = self.buffer.get(i);\n+                    match n {\n+                        None => n = Some(*m),\n+                        Some(nn) => if *m > nn {\n+                            n = Some(*m)\n+                        },\n                     }\n                 }\n-                let values = v.iter()\n-                    .map(|x| x.unwrap_or($DEFAULT))\n-                    .collect::<Vec<$DT>>();\n-                Array {\n-                    len: values.len() as i32,\n-                    null_count,\n-                    validity_bitmap: Some(validity_bitmap),\n-                    data: ArrayData::from(values),\n+            },\n+            &None => for i in 0..self.len {\n+                let mut m = self.buffer.get(i);\n+                match n {\n+                    None => n = Some(*m),\n+                    Some(nn) => if *m > nn {\n+                        n = Some(*m)\n+                    },\n                 }\n-            }\n+            },\n         }\n-    };\n+        n\n+    }\n }\n \n-array_from_optional_primitive!(bool, false);\n-array_from_optional_primitive!(f32, 0_f32);\n-array_from_optional_primitive!(f64, 0_f64);\n-array_from_optional_primitive!(u8, 0_u8);\n-array_from_optional_primitive!(u16, 0_u16);\n-array_from_optional_primitive!(u32, 0_u32);\n-array_from_optional_primitive!(u64, 0_u64);\n-array_from_optional_primitive!(i8, 0_i8);\n-array_from_optional_primitive!(i16, 0_i16);\n-array_from_optional_primitive!(i32, 0_i32);\n-array_from_optional_primitive!(i64, 0_i64);\n-\n-/// This method mostly just used for unit tests\n-impl From<Vec<&'static str>> for Array {\n-    fn from(v: Vec<&'static str>) -> Self {\n-        Array::from(v.iter().map(|s| s.to_string()).collect::<Vec<String>>())\n+impl<T> ArrayData for BufferArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    fn len(&self) -> usize {\n+        self.len\n+    }\n+    fn null_count(&self) -> usize {\n+        self.null_count\n+    }\n+    fn validity_bitmap(&self) -> &Option<Bitmap> {\n+        &self.validity_bitmap\n+    }\n+    fn as_any(&self) -> &Any {\n+        self\n     }\n }\n \n-impl From<Vec<String>> for Array {\n-    fn from(v: Vec<String>) -> Self {\n-        Array {\n-            len: v.len() as i32,\n-            null_count: 0,\n+impl<T> From<Buffer<T>> for BufferArrayData<T>\n+where\n+    T: ArrowPrimitiveType,\n+{\n+    fn from(data: Buffer<T>) -> Self {\n+        BufferArrayData {\n+            len: data.len(),\n+            buffer: data,\n             validity_bitmap: None,\n-            data: ArrayData::Utf8(List::from(v)),\n+            null_count: 0,\n         }\n     }\n }\n \n-impl From<Vec<Rc<Array>>> for Array {\n-    fn from(v: Vec<Rc<Array>>) -> Self {\n-        Array {\n-            len: v.len() as i32,\n+pub struct StructArrayData {\n+    len: usize,\n+    columns: Vec<Rc<ArrayData>>,\n+    null_count: usize,\n+    validity_bitmap: Option<Bitmap>,\n+}\n+\n+impl StructArrayData {\n+    pub fn num_columns(&self) -> usize {\n+        self.columns.len()\n+    }\n+    pub fn column(&self, i: usize) -> &Rc<ArrayData> {\n+        &self.columns[i]\n+    }\n+}\n+\n+impl ArrayData for StructArrayData {\n+    fn len(&self) -> usize {\n+        self.len\n+    }\n+    fn null_count(&self) -> usize {\n+        self.null_count\n+    }\n+    fn validity_bitmap(&self) -> &Option<Bitmap> {\n+        &self.validity_bitmap\n+    }\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n+}\n+\n+impl From<Vec<Rc<ArrayData>>> for StructArrayData {\n+    fn from(data: Vec<Rc<ArrayData>>) -> Self {\n+        StructArrayData {\n+            len: data[0].len(),\n+            columns: data,\n             null_count: 0,\n             validity_bitmap: None,\n-            data: ArrayData::Struct(v.iter().map(|a| a.clone()).collect()),\n         }\n     }\n }\n \n+/// Top level array type, just a holder for a boxed trait for the data it contains\n+pub struct Array {\n+    data: Rc<ArrayData>,\n+}\n+\n+impl Array {\n+    pub fn new(data: Rc<ArrayData>) -> Self {\n+        Array { data: data }\n+    }\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+    pub fn null_count(&self) -> usize {\n+        self.data.null_count()\n+    }\n+    pub fn data(&self) -> &Rc<ArrayData> {\n+        &self.data\n+    }\n+    pub fn validity_bitmap(&self) -> &Option<Bitmap> {\n+        self.data.validity_bitmap()\n+    }\n+}\n+\n+impl<T> From<Buffer<T>> for Array\n+where\n+    T: ArrowPrimitiveType + 'static,\n+{\n+    fn from(buffer: Buffer<T>) -> Self {\n+        Array::new(Rc::new(BufferArrayData::from(buffer)))\n+    }\n+}\n+\n+impl<T> From<List<T>> for Array\n+where\n+    T: ArrowPrimitiveType + 'static,\n+{\n+    fn from(list: List<T>) -> Self {\n+        Array::new(Rc::new(ListArrayData::from(list)))\n+    }\n+}\n+\n+/// Create an Array from a BufferArrayData<T> of primitive values\n+impl<T> From<BufferArrayData<T>> for Array\n+where\n+    T: ArrowPrimitiveType + 'static,\n+{\n+    fn from(data: BufferArrayData<T>) -> Self {\n+        Array::new(Rc::new(data))\n+    }\n+}\n+\n+/// Create an Array from a Vec<T> of primitive values\n+impl<T> From<Vec<T>> for Array\n+where\n+    T: ArrowPrimitiveType + 'static,\n+{\n+    fn from(vec: Vec<T>) -> Self {\n+        Array::new(Rc::new(BufferArrayData::from(Buffer::from(vec))))\n+    }\n+}\n+\n+/// Create an Array from a Vec<T> of primitive values\n+impl<T> From<Vec<Option<T>>> for Array\n+where\n+    T: ArrowPrimitiveType + 'static,\n+{\n+    fn from(vec: Vec<Option<T>>) -> Self {\n+        Array::from(BufferArrayData::from(vec))\n+    }\n+}\n+\n+/// Create a BufferArrayData<T> from a Vec<Option<T>> of primitive values\n+impl<T> From<Vec<Option<T>>> for BufferArrayData<T>\n+where\n+    T: ArrowPrimitiveType + 'static,\n+{\n+    fn from(v: Vec<Option<T>>) -> Self {\n+        let mut builder: Builder<T> = Builder::with_capacity(v.len());\n+        builder.set_len(v.len());\n+        let mut null_count = 0;\n+        let mut validity_bitmap = Bitmap::new(v.len());\n+        for i in 0..v.len() {\n+            match v[i] {\n+                Some(value) => builder.set(i, value),\n+                None => {\n+                    null_count += 1;\n+                    validity_bitmap.clear(i);\n+                }\n+            }\n+        }\n+        BufferArrayData::new(builder.finish(), null_count, Some(validity_bitmap))\n+    }\n+}\n+\n+///// This method mostly just used for unit tests\n \n Review comment:\n   That's what you think, but since it's public, people will use it for all kinds of things. So I suggest you just remove this comment altogether.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-07T07:07:34.601+0000",
                    "updated": "2018-05-07T07:07:34.601+0000",
                    "started": "2018-05-07T07:07:34.601+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "98896",
                    "issueId": "13155910"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/worklog/99821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #1971: ARROW-2521: [Rust] Refactor Rust API to use traits and generic to represent Array instead of enum\nURL: https://github.com/apache/arrow/pull/1971#issuecomment-387600432\n \n \n   @crepererum Thanks for reviewing and the great feedback. I'll work to address these points over this coming weekend. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-09T02:25:32.513+0000",
                    "updated": "2018-05-09T02:25:32.513+0000",
                    "started": "2018-05-09T02:25:32.512+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "99821",
                    "issueId": "13155910"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 25200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7a3aa7d8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36f7a5ef[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27067b41[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2c557a93[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a2fb114[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4a2d17eb[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ee5b19c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5963d931[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e136418[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2ca3a87e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5fb98527[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@185465b0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 25200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu May 17 16:16:02 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-05-17T16:16:02.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2521/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-04-28T16:43:27.000+0000",
        "updated": "2018-05-17T16:16:04.000+0000",
        "timeoriginalestimate": null,
        "description": "Early on, [~kszucs] and I worked on two different designs for how to represent Arrow arrays in Rust, each with their pros and cons.\r\n\r\nKrisztian started out with a generics approach e.g. Array<T> which was great until we tried to implement structs, which can contain mixed types so we ended up using enum to represent arrays, which was great until I got to the list types ... I don't think I can implement nested lists with this approach.\r\n\r\nI am reviewing this again now that I am more familiar with Arrow and also my Rust skills have improved greatly since I started working on all of this.\r\n\r\nI will be prototyping in a separate repo, and will update this\u00a0Jira once I have something concrete to share, but I feel it is important to address this before the first official release of the Rust version. Also, if we are going to consider a refactor like this, it is better to do it now while the codebase is tiny.\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 25200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Refactor Rust API to use traits and generics",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/comment/16457742",
                    "id": "16457742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Just took a quick look, I guess the main problem is the List is generic whereas other arrays are enum variants. \r\nHave You considered to put the List variant in the ArrayData? Something like [this|https://github.com/kszucs/arrow/blob/enum/rust/src/e.rs#L66].\r\n\r\nI'll take a more detailed look after this weekend (national holiday).\r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2018-04-28T18:31:26.248+0000",
                    "updated": "2018-04-28T18:31:40.456+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/comment/16457823",
                    "id": "16457823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Here is the branch on my fork where I'm working now: https://github.com/andygrove/arrow/tree/refactor_rust_api",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2018-04-28T22:37:10.324+0000",
                    "updated": "2018-04-28T22:37:10.324+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/comment/16459280",
                    "id": "16459280",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "-OLD PR: [https://github.com/apache/arrow/pull/1969]-\r\n\r\n\u00a0\r\n\r\nNew PR (fewer commits)\u00a0https://github.com/apache/arrow/pull/1971",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2018-04-30T23:41:40.076+0000",
                    "updated": "2018-05-01T05:52:53.423+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155910/comment/16479302",
                    "id": "16479302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1971\n[https://github.com/apache/arrow/pull/1971]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-05-17T16:16:02.265+0000",
                    "updated": "2018-05-17T16:16:02.265+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|i3t533:",
        "customfield_12314139": null
    }
}