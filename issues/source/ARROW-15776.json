{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13430458",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458",
    "key": "ARROW-15776",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12634392",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12634392",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13430460",
                    "key": "ARROW-15777",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430460",
                    "fields": {
                        "summary": "[Python][Flight] Allow passing IpcReadOptions to FlightCallOptions",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=raulcd",
            "name": "raulcd",
            "key": "JIRAUSER287560",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
            },
            "displayName": "Ra\u00fal Cumplido",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15776/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 30,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/752899",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd opened a new pull request, #12800:\nURL: https://github.com/apache/arrow/pull/12800\n\n   This PR intends to expose IpcReadOptions to pyarrow.\n\n\n",
                    "created": "2022-04-05T13:48:26.400+0000",
                    "updated": "2022-04-05T13:48:26.400+0000",
                    "started": "2022-04-05T13:48:26.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752899",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/752900",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#issuecomment-1088726972\n\n   https://issues.apache.org/jira/browse/ARROW-15776\n\n\n",
                    "created": "2022-04-05T13:48:53.107+0000",
                    "updated": "2022-04-05T13:48:53.107+0000",
                    "started": "2022-04-05T13:48:53.107+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752900",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/752901",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#issuecomment-1088727011\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-04-05T13:48:54.902+0000",
                    "updated": "2022-04-05T13:48:54.902+0000",
                    "started": "2022-04-05T13:48:54.901+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752901",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/753442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#issuecomment-1090342901\n\n   @jorisvandenbossche As discussed I think this can start review process. I was going to assign you as reviewer but I don't have permission.\n\n\n",
                    "created": "2022-04-06T14:32:52.155+0000",
                    "updated": "2022-04-06T14:32:52.155+0000",
                    "started": "2022-04-06T14:32:52.155+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753442",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r845140200\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,74 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    memory_pool : MemoryPool, default None\n+        Uses default memory pool if not specified\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None,\n+                 MemoryPool memory_pool=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        self.included_fields = included_fields\n+        self.memory_pool = memory_pool\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        self.c_options.included_fields = value or list()\n\nReview Comment:\n   We could also use None to signal all columns, instead of an empty list? (like `compression` in the IpcWriteOptions uses None to indicate the default which is a nullptr on the C++ side. Or the default vector is a empty one and not a nullptr?)\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,74 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    memory_pool : MemoryPool, default None\n+        Uses default memory pool if not specified\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None,\n+                 MemoryPool memory_pool=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        self.included_fields = included_fields\n+        self.memory_pool = memory_pool\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        self.c_options.included_fields = value or list()\n+\n+    @property\n+    def memory_pool(self):\n+        cdef:\n+            MemoryPool pool = MemoryPool.__new__(MemoryPool)\n+        pool.init(self.c_options.memory_pool)\n+        return pool\n\nReview Comment:\n   Something @raulcd and I were discussing: it is a bit strange to be creating a MemoryPool object here just for the property on the options class. \r\n   But, more in general, almost all other APIs in pyarrow expose a direct `memory_pool` keyword, and not through an options class (eg also the CSV readers have a `memory_pool` keyword _next_ to the different option classes). So it would also be an option here to expose `memory_pool` directly in RecordBatchStraem/FileReader/open_stream/open_file, and not through the IpcReadOptions class?\n\n\n\n",
                    "created": "2022-04-07T13:37:00.901+0000",
                    "updated": "2022-04-07T13:37:00.901+0000",
                    "started": "2022-04-07T13:37:00.901+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754072",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r845179940\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,74 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    memory_pool : MemoryPool, default None\n+        Uses default memory pool if not specified\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None,\n+                 MemoryPool memory_pool=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        self.included_fields = included_fields\n+        self.memory_pool = memory_pool\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        self.c_options.included_fields = value or list()\n\nReview Comment:\n   Hmm vector here isn't nullable so they'd be effectively the same? (We should probably accept both None and empty list though.)\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,74 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    memory_pool : MemoryPool, default None\n+        Uses default memory pool if not specified\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None,\n+                 MemoryPool memory_pool=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        self.included_fields = included_fields\n+        self.memory_pool = memory_pool\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        self.c_options.included_fields = value or list()\n+\n+    @property\n+    def memory_pool(self):\n+        cdef:\n+            MemoryPool pool = MemoryPool.__new__(MemoryPool)\n+        pool.init(self.c_options.memory_pool)\n+        return pool\n\nReview Comment:\n   It certainly seems like for consistency we should keep memory_pool separate, yeah.\n\n\n\n",
                    "created": "2022-04-07T14:12:08.993+0000",
                    "updated": "2022-04-07T14:12:08.993+0000",
                    "started": "2022-04-07T14:12:08.993+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754106",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754122",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r845202997\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,74 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    memory_pool : MemoryPool, default None\n+        Uses default memory pool if not specified\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None,\n+                 MemoryPool memory_pool=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        self.included_fields = included_fields\n+        self.memory_pool = memory_pool\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        self.c_options.included_fields = value or list()\n\nReview Comment:\n   Naively in Python, I would interpret an empty list as not reading any columns at all\n\n\n\n",
                    "created": "2022-04-07T14:29:41.423+0000",
                    "updated": "2022-04-07T14:29:41.423+0000",
                    "started": "2022-04-07T14:29:41.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754122",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754123",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r845204125\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,74 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    memory_pool : MemoryPool, default None\n+        Uses default memory pool if not specified\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None,\n+                 MemoryPool memory_pool=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        self.included_fields = included_fields\n+        self.memory_pool = memory_pool\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        self.c_options.included_fields = value or list()\n\nReview Comment:\n   Right. Actually, I think that's a limitation of our current APIs: it's not possible to specify \"read no columns\"\n\n\n\n",
                    "created": "2022-04-07T14:31:16.576+0000",
                    "updated": "2022-04-07T14:31:16.576+0000",
                    "started": "2022-04-07T14:31:16.575+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754123",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754176",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r845262179\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,74 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    memory_pool : MemoryPool, default None\n+        Uses default memory pool if not specified\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None,\n+                 MemoryPool memory_pool=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        self.included_fields = included_fields\n+        self.memory_pool = memory_pool\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        self.c_options.included_fields = value or list()\n\nReview Comment:\n   I don't have a bunch of experience with cython but from my tests vector doesn't seem to allow nullable:\r\n   ```\r\n   pyarrow/ipc.pxi:157: in pyarrow.lib.IpcReadOptions.included_fields.__set__\r\n       self.c_options.included_fields = None\r\n   stringsource:47: in vector.from_py.__pyx_convert_vector_from_py_int\r\n       ???\r\n   E   TypeError: 'NoneType' object is not iterable\r\n   ```\r\n   I am not sure I understand what would be the proposed change.\n\n\n\n",
                    "created": "2022-04-07T15:19:26.289+0000",
                    "updated": "2022-04-07T15:19:26.289+0000",
                    "started": "2022-04-07T15:19:26.289+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754176",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754177",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r845266094\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,74 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    memory_pool : MemoryPool, default None\n+        Uses default memory pool if not specified\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None,\n+                 MemoryPool memory_pool=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        self.included_fields = included_fields\n+        self.memory_pool = memory_pool\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        self.c_options.included_fields = value or list()\n\nReview Comment:\n   Yes, if we want to use None this way, I think you need to do it like `compression` in the write options, and so do in the init something like:\r\n   \r\n   ```\r\n   if included_fields is not None:\r\n       self.included_fields = included_fields\r\n   ```\r\n   \r\n   (so it uses the C++ default if None was specified)\n\n\n\n",
                    "created": "2022-04-07T15:23:01.664+0000",
                    "updated": "2022-04-07T15:23:01.664+0000",
                    "started": "2022-04-07T15:23:01.664+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754177",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754178",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r845266094\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,74 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    memory_pool : MemoryPool, default None\n+        Uses default memory pool if not specified\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None,\n+                 MemoryPool memory_pool=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        self.included_fields = included_fields\n+        self.memory_pool = memory_pool\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        self.c_options.included_fields = value or list()\n\nReview Comment:\n   Yes, if we want to use None this way, I think you need to do it like `compression` in the write options, and so do in the init something like:\r\n   \r\n   ```\r\n   if included_fields is not None:\r\n       self.included_fields = included_fields\r\n   ```\r\n   \r\n   (so it uses the C++ default if None was specified)\r\n   \r\n   Doing it this way might keep the option open for the future to have `[]` mean to \"read no columns\"\n\n\n\n",
                    "created": "2022-04-07T15:23:42.074+0000",
                    "updated": "2022-04-07T15:23:42.074+0000",
                    "started": "2022-04-07T15:23:42.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754178",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r845287402\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,74 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    memory_pool : MemoryPool, default None\n+        Uses default memory pool if not specified\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None,\n+                 MemoryPool memory_pool=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        self.included_fields = included_fields\n+        self.memory_pool = memory_pool\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        self.c_options.included_fields = value or list()\n\nReview Comment:\n   my test above was incorrect but my question is the same, is it possible to set `included_fields` to null with the current API implementation?\r\n   ```python\r\n       def included_fields(self, list value):\r\n           cdef:\r\n               vector[int] included_fields\r\n           if value is None:\r\n               self.c_options.included_fields = included_fields\r\n           else:\r\n               self.c_options.included_fields = value\r\n   ```\r\n   As this still returns an empty list in the case of `None`.\n\n\n\n",
                    "created": "2022-04-07T15:42:03.716+0000",
                    "updated": "2022-04-07T15:42:03.716+0000",
                    "started": "2022-04-07T15:42:03.715+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754191",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r845379953\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,74 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    memory_pool : MemoryPool, default None\n+        Uses default memory pool if not specified\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None,\n+                 MemoryPool memory_pool=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        self.included_fields = included_fields\n+        self.memory_pool = memory_pool\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        self.c_options.included_fields = value or list()\n\nReview Comment:\n   vector is not nullable so you can never get None, just an empty list. I think that's fine, but it's just nice to be able to set it to None and do the right thing.\n\n\n\n",
                    "created": "2022-04-07T17:05:34.524+0000",
                    "updated": "2022-04-07T17:05:34.524+0000",
                    "started": "2022-04-07T17:05:34.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754238",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r845925279\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,74 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    memory_pool : MemoryPool, default None\n+        Uses default memory pool if not specified\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None,\n+                 MemoryPool memory_pool=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        self.included_fields = included_fields\n+        self.memory_pool = memory_pool\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        self.c_options.included_fields = value or list()\n\nReview Comment:\n   Thanks! I have pushed d813029bdf2f4a424e1e267c564acd246cc9aa9b which maintains the default C++ value for `vector[int]` in the case of None.\n\n\n\n",
                    "created": "2022-04-08T09:30:13.930+0000",
                    "updated": "2022-04-08T09:30:13.930+0000",
                    "started": "2022-04-08T09:30:13.929+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754484",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754517",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r846006032\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,74 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    memory_pool : MemoryPool, default None\n+        Uses default memory pool if not specified\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None,\n+                 MemoryPool memory_pool=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        self.included_fields = included_fields\n+        self.memory_pool = memory_pool\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        self.c_options.included_fields = value or list()\n+\n+    @property\n+    def memory_pool(self):\n+        cdef:\n+            MemoryPool pool = MemoryPool.__new__(MemoryPool)\n+        pool.init(self.c_options.memory_pool)\n+        return pool\n\nReview Comment:\n   As discussed I have removed `MemoryPool` from `IpcReadOptions` and have exposed directly in `RecordBatchStreamReader/RecordBatchFileReader/open_stream/open_file`\n\n\n\n",
                    "created": "2022-04-08T11:13:25.103+0000",
                    "updated": "2022-04-08T11:13:25.103+0000",
                    "started": "2022-04-08T11:13:25.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754517",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754568",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r846080309\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,65 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        if included_fields is not None:\n+            self.included_fields = included_fields\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        cdef:\n+            vector[int] included_fields\n+        if value is None:\n+            self.c_options.included_fields = included_fields\n\nReview Comment:\n   You _should_ be able to just `self.c_options.included_fields.clear()`\n\n\n\n",
                    "created": "2022-04-08T12:53:24.801+0000",
                    "updated": "2022-04-08T12:53:24.801+0000",
                    "started": "2022-04-08T12:53:24.801+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754568",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754569",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#issuecomment-1092829961\n\n   Actually, we should also add it to the docs here: https://github.com/apache/arrow/blob/b8299436c8b1a2d7cd3d6e019a2b750893a3af87/docs/source/python/api/ipc.rst?plain=1#L41\n\n\n",
                    "created": "2022-04-08T12:55:09.987+0000",
                    "updated": "2022-04-08T12:55:09.987+0000",
                    "started": "2022-04-08T12:55:09.987+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754569",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754598",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r846121555\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,65 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        if included_fields is not None:\n+            self.included_fields = included_fields\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        cdef:\n+            vector[int] included_fields\n+        if value is None:\n+            self.c_options.included_fields = included_fields\n\nReview Comment:\n   Done, thanks!\n\n\n\n",
                    "created": "2022-04-08T13:39:08.844+0000",
                    "updated": "2022-04-08T13:39:08.844+0000",
                    "started": "2022-04-08T13:39:08.844+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754598",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754600",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#issuecomment-1092871718\n\n   > Actually, we should also add it to the docs here:\r\n   > \r\n   > https://github.com/apache/arrow/blob/b8299436c8b1a2d7cd3d6e019a2b750893a3af87/docs/source/python/api/ipc.rst?plain=1#L41\r\n   \r\n   Done and validated documentation generated:\r\n   ![image](https://user-images.githubusercontent.com/639755/162447260-307db4bc-0b5e-41ee-ac5a-9a8c7e729a63.png)\r\n   \n\n\n",
                    "created": "2022-04-08T13:39:32.427+0000",
                    "updated": "2022-04-08T13:39:32.427+0000",
                    "started": "2022-04-08T13:39:32.427+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754600",
                    "issueId": "13430458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/worklog/754604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12800:\nURL: https://github.com/apache/arrow/pull/12800#discussion_r846123286\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -100,6 +100,65 @@ cdef _wrap_read_stats(CIpcReadStats c):\n                      c.num_replaced_dictionaries)\n \n \n+cdef class IpcReadOptions(_Weakrefable):\n+    \"\"\"\n+    Serialization options for reading IPC format.\n+\n+    Parameters\n+    ----------\n+    use_threads : bool\n+        Whether to use the global CPU thread pool to parallelize any\n+        computational tasks like decompression.\n+    ensure_native_endian : bool\n+        Whether to convert incoming data to platform-native endianness.\n+        Default is true.\n+    included_fields : list\n+        If empty (the default), return all deserialized fields.\n+        If non-empty, the values are the indices of fields to read on\n+        the top-level schema.\n+    \"\"\"\n+    __slots__ = ()\n+\n+    # cdef block is in lib.pxd\n+\n+    def __init__(self, *, bint ensure_native_endian=True,\n+                 bint use_threads=True, list included_fields=None):\n+        self.c_options = CIpcReadOptions.Defaults()\n+        self.ensure_native_endian = ensure_native_endian\n+        self.use_threads = use_threads\n+        if included_fields is not None:\n+            self.included_fields = included_fields\n+\n+    @property\n+    def ensure_native_endian(self):\n+        return self.c_options.ensure_native_endian\n+\n+    @ensure_native_endian.setter\n+    def ensure_native_endian(self, bint value):\n+        self.c_options.ensure_native_endian = value\n+\n+    @property\n+    def use_threads(self):\n+        return self.c_options.use_threads\n+\n+    @use_threads.setter\n+    def use_threads(self, bint value):\n+        self.c_options.use_threads = value\n+\n+    @property\n+    def included_fields(self):\n+        return self.c_options.included_fields\n+\n+    @included_fields.setter\n+    def included_fields(self, list value):\n+        cdef:\n+            vector[int] included_fields\n+        if value is None:\n+            self.c_options.included_fields = included_fields\n\nReview Comment:\n   I don't see a change here, is there a missing commit?\n\n\n\n",
                    "created": "2022-04-08T13:40:58.995+0000",
                    "updated": "2022-04-08T13:40:58.995+0000",
                    "started": "2022-04-08T13:40:58.995+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754604",
                    "issueId": "13430458"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@a3490ff[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49f30264[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2397de2e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7226181a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2308d152[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7effab6f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63047c30[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@21a05e82[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@444799a5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@47e0e691[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@745f7a1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2432ed85[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Apr 19 13:31:47 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-19T13:31:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15776/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-02-24T14:51:22.000+0000",
        "updated": "2022-04-26T22:03:57.000+0000",
        "timeoriginalestimate": null,
        "description": "{{IpcWriteOptions}} is exposed in Python but {{IpcReadOptions}} is not. The latter is necessary to change endian conversion behaviour.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Expose IpcReadOptions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/comment/17497460",
                    "id": "17497460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "cc [~alenkaf] [~jorisvandenbossche]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-02-24T15:11:53.218+0000",
                    "updated": "2022-02-24T15:11:53.218+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13430458/comment/17524305",
                    "id": "17524305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 12800\n[https://github.com/apache/arrow/pull/12800]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-04-19T13:31:47.314+0000",
                    "updated": "2022-04-19T13:31:47.314+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0zwwg:",
        "customfield_12314139": null
    }
}