{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13329631",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631",
    "key": "ARROW-10111",
    "fields": {
        "parent": {
            "id": "13329630",
            "key": "ARROW-10110",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13329630",
            "fields": {
                "summary": "[Rust] Add support to consume C Data Interface",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10111/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 26,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/491705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-699646874\n\n\n   https://issues.apache.org/jira/browse/ARROW-10111\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-27T15:05:50.854+0000",
                    "updated": "2020-09-27T15:05:50.854+0000",
                    "started": "2020-09-27T15:05:50.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491705",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/491920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#discussion_r495864086\n\n\n\n##########\nFile path: rust/arrow/src/array/ffi.rs\n##########\n@@ -0,0 +1,163 @@\n+use std::sync::Arc;\n+\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// ABI-compatible struct for FFI_ArrowSchema from C Data Interface\n+#[repr(C)]\n+#[derive(Debug, Clone)]\n+pub struct FFI_ArrowSchema {\n+    format: *const ::std::os::raw::c_char,\n+    name: *const ::std::os::raw::c_char,\n+    metadata: *const ::std::os::raw::c_char,\n+    flags: i64,\n+    n_children: i64,\n+    children: *mut *mut FFI_ArrowSchema,\n+    dictionary: *mut FFI_ArrowSchema,\n+    release: ::std::option::Option<unsafe extern \"C\" fn(arg1: *mut FFI_ArrowSchema)>,\n+    private_data: *mut ::std::os::raw::c_void,\n+}\n+\n+impl FFI_ArrowSchema {\n+    /// allocates this struct. Unsafe as the consumer is responsible for owning it.\n+    pub fn allocate() -> *mut Self {\n+        Box::into_raw(Box::new(Self::new()))\n+    }\n+\n+    fn new() -> Self {\n+        Self {\n+            format: std::ptr::null_mut(),\n+            name: std::ptr::null_mut(),\n+            metadata: std::ptr::null_mut(),\n+            flags: 0,\n+            n_children: 0,\n+            children: std::ptr::null_mut(),\n+            dictionary: std::ptr::null_mut(),\n+            release: None,\n+            private_data: std::ptr::null_mut(),\n+        }\n+    }\n+}\n+\n+impl Drop for FFI_ArrowSchema {\n+    fn drop(&mut self) {\n+        match self.release {\n+            None => (),\n+            Some(release) => unsafe { release(self) },\n+        };\n+    }\n+}\n+\n+/// ABI-compatible struct for ArrowArray from C Data Interface\n+#[repr(C)]\n+#[derive(Debug, Clone)]\n+pub struct FFI_ArrowArray {\n+    length: i64,\n+    null_count: i64,\n+    offset: i64,\n+    n_buffers: i64,\n+    n_children: i64,\n+    buffers: *mut *const ::std::os::raw::c_void,\n+    children: *mut *mut FFI_ArrowArray,\n+    dictionary: *mut FFI_ArrowArray,\n+    release: ::std::option::Option<unsafe extern \"C\" fn(arg1: *mut FFI_ArrowArray)>,\n+    private_data: *mut ::std::os::raw::c_void,\n+}\n+\n+impl FFI_ArrowArray {\n+    /// allocates this struct. Unsafe as the consumer is responsible for owning it.\n+    pub fn allocate() -> *mut Self {\n+        Box::into_raw(Box::new(Self::new()))\n+    }\n+\n+    fn new() -> Self {\n+        Self {\n+            length: 0,\n+            null_count: 0,\n+            offset: 0,\n+            n_buffers: 0,\n+            n_children: 0,\n+            buffers: std::ptr::null_mut(),\n+            children: std::ptr::null_mut(),\n+            dictionary: std::ptr::null_mut(),\n+            release: None,\n+            private_data: std::ptr::null_mut(),\n+        }\n+    }\n+}\n+\n+impl Drop for FFI_ArrowArray {\n+    fn drop(&mut self) {\n+        match self.release {\n+            None => (),\n+            Some(release) => unsafe { release(self) },\n+        };\n+    }\n+}\n+\n+/// Struct containing the necessary data and schema to move an Array from and to the C Data Interface.\n+#[derive(Debug, Clone)]\n+pub struct ArrowArray {\n+    array: Arc<FFI_ArrowArray>,\n+    schema: Arc<FFI_ArrowSchema>,\n+}\n+\n+impl ArrowArray {\n+    /// constructs an `ArrowArray` from two raw pointers.\n+    pub fn allocate() -> (*mut FFI_ArrowArray, *mut FFI_ArrowSchema) {\n+        (FFI_ArrowArray::allocate(), FFI_ArrowSchema::allocate())\n+    }\n+\n+    pub unsafe fn from_raw_pointers(\n+        array: *mut FFI_ArrowArray,\n+        schema: *mut FFI_ArrowSchema,\n+    ) -> Self {\n+        ArrowArray {\n+            array: Arc::from_raw(array),\n+            schema: Arc::from_raw(schema),\n\nReview comment:\n       Please excuse my ignorance, but according to https://doc.rust-lang.org/beta/std/sync/struct.Arc.html#method.from_raw , this only works if the pointers come from `to_raw_pointers`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-28T11:17:10.601+0000",
                    "updated": "2020-09-28T11:17:10.601+0000",
                    "started": "2020-09-28T11:17:10.600+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491920",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/492010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-700059236\n\n\n   As a general design suggestion, on the C++ side we have separate structs (classes) for the import (consumer) side and the export (producer) side. Just 2 cents, though.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-28T14:54:26.254+0000",
                    "updated": "2020-09-28T14:54:26.254+0000",
                    "started": "2020-09-28T14:54:26.254+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492010",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/492059",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#discussion_r496089248\n\n\n\n##########\nFile path: rust/arrow/src/array/ffi.rs\n##########\n@@ -0,0 +1,163 @@\n+use std::sync::Arc;\n+\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/// ABI-compatible struct for FFI_ArrowSchema from C Data Interface\n+#[repr(C)]\n+#[derive(Debug, Clone)]\n+pub struct FFI_ArrowSchema {\n+    format: *const ::std::os::raw::c_char,\n+    name: *const ::std::os::raw::c_char,\n+    metadata: *const ::std::os::raw::c_char,\n+    flags: i64,\n+    n_children: i64,\n+    children: *mut *mut FFI_ArrowSchema,\n+    dictionary: *mut FFI_ArrowSchema,\n+    release: ::std::option::Option<unsafe extern \"C\" fn(arg1: *mut FFI_ArrowSchema)>,\n+    private_data: *mut ::std::os::raw::c_void,\n+}\n+\n+impl FFI_ArrowSchema {\n+    /// allocates this struct. Unsafe as the consumer is responsible for owning it.\n+    pub fn allocate() -> *mut Self {\n+        Box::into_raw(Box::new(Self::new()))\n+    }\n+\n+    fn new() -> Self {\n+        Self {\n+            format: std::ptr::null_mut(),\n+            name: std::ptr::null_mut(),\n+            metadata: std::ptr::null_mut(),\n+            flags: 0,\n+            n_children: 0,\n+            children: std::ptr::null_mut(),\n+            dictionary: std::ptr::null_mut(),\n+            release: None,\n+            private_data: std::ptr::null_mut(),\n+        }\n+    }\n+}\n+\n+impl Drop for FFI_ArrowSchema {\n+    fn drop(&mut self) {\n+        match self.release {\n+            None => (),\n+            Some(release) => unsafe { release(self) },\n+        };\n+    }\n+}\n+\n+/// ABI-compatible struct for ArrowArray from C Data Interface\n+#[repr(C)]\n+#[derive(Debug, Clone)]\n+pub struct FFI_ArrowArray {\n+    length: i64,\n+    null_count: i64,\n+    offset: i64,\n+    n_buffers: i64,\n+    n_children: i64,\n+    buffers: *mut *const ::std::os::raw::c_void,\n+    children: *mut *mut FFI_ArrowArray,\n+    dictionary: *mut FFI_ArrowArray,\n+    release: ::std::option::Option<unsafe extern \"C\" fn(arg1: *mut FFI_ArrowArray)>,\n+    private_data: *mut ::std::os::raw::c_void,\n+}\n+\n+impl FFI_ArrowArray {\n+    /// allocates this struct. Unsafe as the consumer is responsible for owning it.\n+    pub fn allocate() -> *mut Self {\n+        Box::into_raw(Box::new(Self::new()))\n+    }\n+\n+    fn new() -> Self {\n+        Self {\n+            length: 0,\n+            null_count: 0,\n+            offset: 0,\n+            n_buffers: 0,\n+            n_children: 0,\n+            buffers: std::ptr::null_mut(),\n+            children: std::ptr::null_mut(),\n+            dictionary: std::ptr::null_mut(),\n+            release: None,\n+            private_data: std::ptr::null_mut(),\n+        }\n+    }\n+}\n+\n+impl Drop for FFI_ArrowArray {\n+    fn drop(&mut self) {\n+        match self.release {\n+            None => (),\n+            Some(release) => unsafe { release(self) },\n+        };\n+    }\n+}\n+\n+/// Struct containing the necessary data and schema to move an Array from and to the C Data Interface.\n+#[derive(Debug, Clone)]\n+pub struct ArrowArray {\n+    array: Arc<FFI_ArrowArray>,\n+    schema: Arc<FFI_ArrowSchema>,\n+}\n+\n+impl ArrowArray {\n+    /// constructs an `ArrowArray` from two raw pointers.\n+    pub fn allocate() -> (*mut FFI_ArrowArray, *mut FFI_ArrowSchema) {\n+        (FFI_ArrowArray::allocate(), FFI_ArrowSchema::allocate())\n+    }\n+\n+    pub unsafe fn from_raw_pointers(\n+        array: *mut FFI_ArrowArray,\n+        schema: *mut FFI_ArrowSchema,\n+    ) -> Self {\n+        ArrowArray {\n+            array: Arc::from_raw(array),\n+            schema: Arc::from_raw(schema),\n\nReview comment:\n       Good catch @pitrou. It was a bug: I wanted to use only `Arc`, no `Box` (as the rest of the code is like that).\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-28T16:42:17.063+0000",
                    "updated": "2020-09-28T16:42:17.063+0000",
                    "started": "2020-09-28T16:42:17.063+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492059",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/492070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-700159555\n\n\n   > As a general design suggestion, on the C++ side we have separate structs (classes) for the import (consumer) side and the export (producer) side. Just 2 cents, though.\r\n   \r\n   Can you explain the rational for the two structs? Is it due to different ownership rules?\r\n   \r\n   The design so far (for consumption) in this PR:\r\n   \r\n   * Have two structs (`FFI_ArrowArray` and `FFI_ArrowSchema`) that have ABI compatibility with `ArrowArray` and `ArrowSchema` struct in the C data interface.\r\n   * Have one struct that owns both `FFI_ArrowSchema` and `FFI_ArrowArray`, that knows how to convert from and to Rust's implementation of an Arrow Array.\r\n   \r\n   I am still a bit lost as to who owns what: when we pass the pointer from C to Rust, does C assume that it should not free the resources if it goes out of scope? I.e. what is the contract between the consumer and the producer with respect to whom should free memory (rust's by calling the \"free\")? Or is the contract: both check for pointer nullability of the `release` and call it accordingly. If so, what about threat safety?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-28T16:59:22.168+0000",
                    "updated": "2020-09-28T16:59:22.168+0000",
                    "started": "2020-09-28T16:59:22.168+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492070",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/492077",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-700170099\n\n\n   Having `FFI_ArrowSchema` and `FFI_ArrowArray` is fine, however they should probably minimally mirror the C struct and nothing else.\r\n   \r\n   In addition to those two low-level structs, you need specific structs for importing and exporting.\r\n   \r\n   **When exporting**, you need an allocated struct that gets stored in the `void* private_data`, and that will store ownership data (for example, a reference count). Your `release` callback will then dereferences the `private_data` pointer and release ownership (for example, by decrementing the reference count).\r\n   \r\n   **When importing**, you need a struct that contains the `FFI_ArrowArray` (if importing an array). That struct needs to be kept alive by the corresponding Rust Arrow Array (for example, in C++ we have a `Buffer` class that can be subclassed for different kinds of buffers: allocated by C++, allocated by Python...) (*). When the struct's Rust destructor is called, it should call the embedded `FFI_ArrowArray`'s `release` callback.\r\n   \r\n   If you choose to manage ownership through buffers, since an array will have several buffers you probably want your importing struct to reference-count the `FFI_ArrowArray` (so that it will be released when all buffers are destroyed). I've found this example that might be useful: https://users.rust-lang.org/t/how-to-safely-deal-with-c-uint8-t-or-char-in-rust/43109/6\r\n   \r\n   You can see the exact C++ equivalent here: https://github.com/apache/arrow/blob/master/cpp/src/arrow/c/bridge.cc#L1144-L1177\r\n   * the `ImportedArrayData` is a simple wrapper struct around `ArrowArray` with an additional destructor that calls the release callback\r\n   * the `ImportedBuffer` has a reference-counted pointer to `ImportedArrayData`, such that the last buffer depending on a `ImportedArrayData` will release it when it disappears\r\n   \r\n   Please tell me if that's clear, or don't hesitate to ask more questions :-)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-28T17:18:24.548+0000",
                    "updated": "2020-09-28T17:18:24.548+0000",
                    "started": "2020-09-28T17:18:24.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492077",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/492082",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-700170099\n\n\n   Having `FFI_ArrowSchema` and `FFI_ArrowArray` is fine, however they should probably minimally mirror the C struct and nothing else.\r\n   \r\n   In addition to those two low-level structs, you need specific structs for importing and exporting.\r\n   \r\n   **When exporting**, you need an allocated struct that gets stored in the `void* private_data`, and that will store ownership data (for example, a reference count). Your `release` callback will then dereferences the `private_data` pointer and release ownership (for example, by decrementing the reference count).\r\n   \r\n   You can see the C++ array release callback here: https://github.com/apache/arrow/blob/master/cpp/src/arrow/c/bridge.cc#L482-L502\r\n   Note the last line:\r\n   ```c++\r\n     delete reinterpret_cast<ExportedArrayPrivateData*>(array->private_data);\r\n   ```\r\n   This is taking the `private_data`, interpreting it as a pointer to the `ExportedArrayPrivateData` struct, and destroying it. The `ExportedArrayPrivateData` contains a reference-counted pointer to `ArrayData`, which is the actual C++ Arrow class containing the data.\r\n   \r\n   **When importing**, you need a struct that contains the `FFI_ArrowArray` (if importing an array). That struct needs to be kept alive by the corresponding Rust Arrow Array (for example, in C++ we have a `Buffer` class that can be subclassed for different kinds of buffers: allocated by C++, allocated by Python...) (*). When the struct's Rust destructor is called, it should call the embedded `FFI_ArrowArray`'s `release` callback.\r\n   \r\n   If you choose to manage ownership through buffers, since an array will have several buffers you probably want your importing struct to reference-count the `FFI_ArrowArray` (so that it will be released when all buffers are destroyed). I've found this example that might be useful: https://users.rust-lang.org/t/how-to-safely-deal-with-c-uint8-t-or-char-in-rust/43109/6\r\n   \r\n   You can see the exact C++ equivalent here: https://github.com/apache/arrow/blob/master/cpp/src/arrow/c/bridge.cc#L1144-L1177\r\n   * the `ImportedArrayData` is a simple wrapper struct around `ArrowArray` with an additional destructor that calls the release callback\r\n   * the `ImportedBuffer` has a reference-counted pointer to `ImportedArrayData`, such that the last buffer depending on a `ImportedArrayData` will release it when it disappears\r\n   \r\n   Please tell me if that's clear, or don't hesitate to ask more questions :-)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-28T17:21:12.801+0000",
                    "updated": "2020-09-28T17:21:12.801+0000",
                    "started": "2020-09-28T17:21:12.800+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492082",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/492083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-700170099\n\n\n   Having `FFI_ArrowSchema` and `FFI_ArrowArray` is fine, however they should probably minimally mirror the C struct and nothing else.\r\n   \r\n   In addition to those two low-level structs, you need specific structs for importing and exporting.\r\n   \r\n   **When exporting**, you need an allocated struct that gets stored in the `void* private_data`, and that will store ownership data (for example, a reference count). Your `release` callback will then dereferences the `private_data` pointer and release ownership (for example, by decrementing the reference count).\r\n   \r\n   You can see the C++ array release callback here: https://github.com/apache/arrow/blob/master/cpp/src/arrow/c/bridge.cc#L482-L502\r\n   Note the last line:\r\n   ```c++\r\n     delete reinterpret_cast<ExportedArrayPrivateData*>(array->private_data);\r\n   ```\r\n   This is taking the `private_data`, interpreting it as a pointer to the `ExportedArrayPrivateData` struct, and destroying it. The `ExportedArrayPrivateData` contains a [reference-counted pointer](https://github.com/apache/arrow/blob/master/cpp/src/arrow/c/bridge.cc#L475) to `ArrayData`, which is the actual C++ Arrow class containing the data.\r\n   \r\n   **When importing**, you need a struct that contains the `FFI_ArrowArray` (if importing an array). That struct needs to be kept alive by the corresponding Rust Arrow Array (for example, in C++ we have a `Buffer` class that can be subclassed for different kinds of buffers: allocated by C++, allocated by Python...) (*). When the struct's Rust destructor is called, it should call the embedded `FFI_ArrowArray`'s `release` callback.\r\n   \r\n   If you choose to manage ownership through buffers, since an array will have several buffers you probably want your importing struct to reference-count the `FFI_ArrowArray` (so that it will be released when all buffers are destroyed). I've found this example that might be useful: https://users.rust-lang.org/t/how-to-safely-deal-with-c-uint8-t-or-char-in-rust/43109/6\r\n   \r\n   You can see the exact C++ equivalent here: https://github.com/apache/arrow/blob/master/cpp/src/arrow/c/bridge.cc#L1144-L1177\r\n   * the `ImportedArrayData` is a simple wrapper struct around `ArrowArray` with an additional destructor that calls the release callback\r\n   * the `ImportedBuffer` has a reference-counted pointer to `ImportedArrayData`, such that the last buffer depending on a `ImportedArrayData` will release it when it disappears\r\n   \r\n   Please tell me if that's clear, or don't hesitate to ask more questions :-)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-28T17:22:56.746+0000",
                    "updated": "2020-09-28T17:22:56.746+0000",
                    "started": "2020-09-28T17:22:56.746+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492083",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/492796",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-701172108\n\n\n   To set expectations right, IMO this is a very difficult task.\r\n   \r\n   IMO rhere are at the moment 3 issues:\r\n   \r\n   ### buffer slices aka buffer `offset` aka `parent_` buffer\r\n   \r\n   Rust and C++ use slightly different approaches to slicing buffers.\r\n   \r\n   * In C++, we assign a `parent_` buffer whenever we slice a buffer.\r\n   * In Rust, the raw data is known as a `BufferData`, and a buffer is composed by a `BufferData` and an offset (into the data)\r\n   \r\n   In both cases, memory management is tricky. If we slice a buffer from C++ and export it, does it knows that it cannot release the content?\r\n   \r\n   Specifically:\r\n   1. create a buffer `A` in C++\r\n   2. slice it into buffer `B` (which now has a `parent -> A`)\r\n   3. export `B` to Rust\r\n   4. Rust calls `B->release`\r\n   5. C++ access the contents (via `A`) on a region that overlaps with `B` (UB?)\r\n   \r\n   I was unable to find any reference to the buffer's `parent` in [bridge.cc](https://github.com/apache/arrow/blob/master/cpp/src/arrow/c/bridge.cc), nor any shared pointer to the sliced region.\r\n   \r\n   I am asking because we have an analogous problem in Rust, but in Rust we use a shared point to memory region (BufferData), which I think protect us from this behavior. Specifically, a Buffer is rust is composed by:\r\n   * an Arc to the actual region\r\n   * an offset of where to start from in that region (non-zero in slicing)\r\n   \r\n   ### Rust's implementation of Dictionary arrays\r\n   \r\n   I think that Rust's implementation of dictionaries is difficult to bridge with C, as it assumes dictionary data is owned by a struct that is not `ArrayData`. I think that we will need to address this first. I raised this in ARROW-10128\r\n   \r\n   ### Threading\r\n   \r\n   How do we handle threads? We mutex the release?\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T05:53:31.295+0000",
                    "updated": "2020-09-30T05:53:31.295+0000",
                    "started": "2020-09-30T05:53:31.295+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492796",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/492861",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-701297302\n\n\n   > If we slice a buffer from C++ and export it, does it knows that it cannot release the content?\r\n   \r\n   Yes, it does. I think you're overestimating the difficulty here, it's actually quite simple. In C++, Buffers (and slices, which are Buffers) are reference-counted (using the [shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr) class). To take your example:\r\n   * A is reference-counted (at the start, the reference count is 1 since C++ holds a reference)\r\n   * B is reference-counted, and also increments A's reference count (through the `parent` pointer)\r\n   * the exported C data increments B's reference count (through the allocated `private_data`)\r\n   * when Rust releases the C data, the `release` callback decrements B's reference count (by destroying the `private_data`)\r\n   * if B's reference count has dropped to 0, it is destroyed, which also decrements A's reference count (through `parent`)\r\n   * as long as C++ has a strong reference to A, its reference count is >= 1, so it isn't destroyed\r\n   \r\n   And anyway, Rust shouldn't worry about what happens on the C++ side. You're getting a `ArrowArray` struct, which may come from C++, but may also come from something else (e.g. [DuckDB](https://github.com/cwida/duckdb) has started supporting the C data interface).\r\n   \r\n   > I think that Rust's implementation of dictionaries is difficult to bridge with C\r\n   \r\n   Ah, that may be a problem. But you can start with non-dictionary arrays. I'd also recommend to start small (only primitive types, for example), check that everything works (especially lifetime handling), then implement more types.\r\n   \r\n   > How do we handle threads? We mutex the release?\r\n   \r\n   You don't have to. `release` should only be called when the consumer is done with the data, so by definition it cannot be called if other threads are accessing data.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T10:11:52.694+0000",
                    "updated": "2020-09-30T10:11:52.694+0000",
                    "started": "2020-09-30T10:11:52.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492861",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/492871",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-701307126\n\n\n   (perhaps there's also a Rust developer that's more familiar with C++ and can help you?)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T10:33:17.310+0000",
                    "updated": "2020-09-30T10:33:17.310+0000",
                    "started": "2020-09-30T10:33:17.310+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492871",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/492872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-701297302\n\n\n   > If we slice a buffer from C++ and export it, does it knows that it cannot release the content?\r\n   \r\n   Yes, it does. I think you're overestimating the difficulty here, it's actually quite simple. In C++, Buffers (and slices, which are Buffers) are reference-counted (using the [shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr) class). To take your example:\r\n   * A is reference-counted (at the start, the reference count is 1 since C++ holds a reference)\r\n   * B is reference-counted, and also increments A's reference count (through the `parent` pointer)\r\n   * the exported C data increments B's reference count (through the allocated `private_data`)\r\n   * when Rust releases the C data, the `release` callback decrements B's reference count (by destroying the `private_data`)\r\n   * if B's reference count has dropped to 0, it is destroyed, which also decrements A's reference count (through `parent`)\r\n   * as long as C++ has a strong reference to A, its reference count is >= 1, so it isn't destroyed\r\n   \r\n   And anyway, Rust shouldn't worry about what happens on the C++ side. You're getting a `ArrowArray` struct, which may come from C++, but may also come from something else (e.g. [DuckDB](https://github.com/cwida/duckdb) has started supporting the C data interface).\r\n   \r\n   > I think that Rust's implementation of dictionaries is difficult to bridge with C\r\n   \r\n   Ah, that may be a problem. But you can start with non-dictionary arrays. I'd also recommend to start small (only primitive types, for example), check that everything works (especially lifetime handling), then implement more types.\r\n   \r\n   > How do we handle threads? We mutex the release?\r\n   \r\n   You don't have to. `release` should only be called when the consumer is done with the data, so by definition it cannot be called if other consumer threads are accessing data (otherwise it's a bug in the consumer).\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T10:34:00.951+0000",
                    "updated": "2020-09-30T10:34:00.951+0000",
                    "started": "2020-09-30T10:34:00.951+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492872",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/492893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-701306159\n\n\n   In Rust, I see that `BufferData` is reference-counted in `Buffer`, so for _exporting_ it should be able to follow the same principles as C++.\r\n   \r\n   I would suggest you start with that: implement only exporting, start with primitive types. Exercise using Python tests to import the data (e.g. `Array._import_from_c`), and check lifetime handling.\r\n   \r\n   For importing, it seems `BufferData` may have to define a custom destructor function, or an optional external owner. I'm not a Rust developer, so I can't advise on that :-)\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T11:35:33.486+0000",
                    "updated": "2020-09-30T11:35:33.486+0000",
                    "started": "2020-09-30T11:35:33.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492893",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/492894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-701306159\n\n\n   In Rust, I see that `BufferData` is reference-counted in `Buffer`, so for _exporting_ it should be able to follow the same principles as C++.\r\n   \r\n   I would suggest you start with that: implement only exporting, start with primitive types. Exercise using Python tests to import the data (e.g. `pyarrow.Array._import_from_c`), and check lifetime handling.\r\n   \r\n   For importing, it seems `BufferData` may have to define a custom destructor function, or an optional external owner. I'm not a Rust developer, so I can't advise on that :-)\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T11:35:48.663+0000",
                    "updated": "2020-09-30T11:35:48.663+0000",
                    "started": "2020-09-30T11:35:48.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492894",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/492895",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-701306159\n\n\n   In Rust, I see that `BufferData` is reference-counted in `Buffer`, so for _exporting_ it should be able to follow the same principles as C++.\r\n   \r\n   I would suggest you start with that: implement only exporting, start with primitive types. Exercise using Python tests to import the data (e.g. `pyarrow.Array._import_from_c`), and check lifetime handling.\r\n   \r\n   For _importing_, it seems `BufferData` may have to define a custom destructor function, or an optional external owner. I'm not a Rust developer, so I can't advise on that :-)\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T11:36:01.777+0000",
                    "updated": "2020-09-30T11:36:01.777+0000",
                    "started": "2020-09-30T11:36:01.777+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492895",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/496036",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-704423199\n\n\n   You're doing it wrong. I suggest again that you try to follow how C++ does things, otherwise you'll get lost.\r\n   \r\n   For example, your `release` callback assumes that buffers have been allocated by Rust. This is trivially wrong if e.g. roundtripping from Python to Rust to Python.\r\n   \r\n   So, what needs to happen is you have something like this (not necessarily working, but you get the idea):\r\n   ```rust\r\n   struct ExportedArrayData {\r\n     buffers: Vec<Buffer> buffers,\r\n     // other stuff perhaps...\r\n   };\r\n   ```\r\n   \r\n   Then your `private_data` must point to an heap-allocated `ExportedArrayData` (perhaps it's a `Pin<Box<ExportedArrayData>>`? I don't know). Your `release` callback will cast back `private_data` to `ExportedArrayData` and destroy it (releasing all the buffers).\r\n   \r\n   And again, I suggest you tackle importing and exporting separately. I cannot help you if you ignore what I tell you.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-06T17:14:03.528+0000",
                    "updated": "2020-10-06T17:14:03.528+0000",
                    "started": "2020-10-06T17:14:03.528+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496036",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/496056",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-704423199\n\n\n   You're doing it wrong. I suggest again that you try to follow how C++ does things, otherwise you'll get lost.\r\n   \r\n   For example, your `release` callback assumes that buffers have been allocated by Rust. This is trivially wrong if e.g. roundtripping from Python to Rust to Python.\r\n   \r\n   So, what needs to happen is you have something like this (not necessarily working, but you get the idea):\r\n   ```rust\r\n   struct ExportedArrayData {\r\n     buffers: Vec<Buffer> buffers,\r\n     // other stuff perhaps...\r\n   };\r\n   ```\r\n   \r\n   Then your `private_data` must point to an heap-allocated `ExportedArrayData`. Your `release` callback will cast back `private_data` to `ExportedArrayData` and destroy it (releasing all the buffers). This can probably be done using:\r\n   * `private_data = Box::new(ExportedArrayData...).into_raw() as *mut c_void` when exporting\r\n   * `Box::from_raw(private_data as *mut ExportedArrayData)` in the release callback\r\n   \r\n   And again, I suggest you tackle importing and exporting separately. I cannot help you if you ignore what I tell you.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-06T17:42:29.773+0000",
                    "updated": "2020-10-06T17:42:29.773+0000",
                    "started": "2020-10-06T17:42:29.772+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496056",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/496058",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-704423199\n\n\n   You're doing it wrong. I suggest again that you try to follow how C++ does things, otherwise you'll get lost.\r\n   \r\n   For example, your `release` callback assumes that buffers have been allocated by Rust. This is trivially wrong if e.g. roundtripping from Python to Rust to Python.\r\n   \r\n   So, what needs to happen is you have something like this (not necessarily working, but you get the idea):\r\n   ```rust\r\n   struct ExportedArrayData {\r\n     buffers: Vec<Buffer> buffers,\r\n     // other stuff perhaps...\r\n   };\r\n   ```\r\n   \r\n   Then your `private_data` must point to an heap-allocated `ExportedArrayData`. Your `release` callback will cast back `private_data` to `ExportedArrayData` and destroy it (releasing all the buffers). This can probably be done using:\r\n   * `private_data = Box::new(ExportedArrayData...).into_raw() as *mut c_void` when exporting\r\n   * `Box::from_raw(private_data as *mut ExportedArrayData)` in the release callback\r\n   \r\n   And again, I suggest you tackle importing and exporting separately.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-06T17:43:06.110+0000",
                    "updated": "2020-10-06T17:43:06.110+0000",
                    "started": "2020-10-06T17:43:06.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496058",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/496161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-704533107\n\n\n   Sorry, I think that did not make myself very clear, and/or that the code is still not very well documented, but I have been working towards exactly that.\r\n   \r\n   I was just a bit unsure about what you store in the private data, to help the release. That cleared it up.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-06T20:25:57.360+0000",
                    "updated": "2020-10-06T20:25:57.360+0000",
                    "started": "2020-10-06T20:25:57.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496161",
                    "issueId": "13329631"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/worklog/496953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8287:\nURL: https://github.com/apache/arrow/pull/8287#issuecomment-705212143\n\n\n   Hey @jorgecarleitao, I'll only be able to look at this either over the weekend or during the coming week\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-07T21:49:25.212+0000",
                    "updated": "2020-10-07T21:49:25.212+0000",
                    "started": "2020-10-07T21:49:25.211+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496953",
                    "issueId": "13329631"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 15600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@29c16cee[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21694c1a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41cf23e3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2aadae5c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71ad5de1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4ef2f669[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@769a046f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@31829bae[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a5b9a2a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@734360b6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@555cabcd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@70a60523[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15600,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Dec 05 08:07:37 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-05T08:07:37.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10111/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-09-27T14:38:27.000+0000",
        "updated": "2020-12-05T08:07:37.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Add basics to test round-trip to consume C Data Interface to a Rust struct",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329631/comment/17244439",
                    "id": "17244439",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Addressed by [1d2b4a5|https://github.com/apache/arrow/commit/1d2b4a55770fa4dbe24959b3b40c745964c3184e]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-12-05T08:07:37.942+0000",
                    "updated": "2020-12-05T08:07:37.942+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0iyfc:",
        "customfield_12314139": null
    }
}