{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13144891",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13144891",
    "key": "ARROW-2307",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bduffield",
            "name": "bduffield",
            "key": "bduffield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Benjamin Duffield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bduffield",
            "name": "bduffield",
            "key": "bduffield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Benjamin Duffield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2307/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3dea6533[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6aa134fe[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@324dd23c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5128164f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a23c6d1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@21a3956c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d236f56[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6ca884d3[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@859c2d9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@35ec3e4b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5353ae7f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7b7536da[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 15 00:50:59 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-03-15T00:50:59.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2307/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-03-13T23:44:23.000+0000",
        "updated": "2018-03-15T00:50:59.000+0000",
        "timeoriginalestimate": null,
        "description": "Using java arrow I'm creating an arrow stream, using the stream writer.\r\n\r\n\u00a0\r\n\r\nSometimes I don't have anything to serialize, and so I\u00a0don't write any record batches. My arrow stream thus consists of just a schema message.\u00a0\r\n{code:java}\r\n<SCHEMA>\r\n<EOS [optional]: int32>\r\n{code}\r\n\r\nI am able to deserialize this arrow stream correctly using the java stream reader, but when reading it with python I instead hit an error\r\n{code}\r\nimport pyarrow as pa\r\n# ...\r\nreader = pa.open_stream(stream)\r\ndf = reader.read_all().to_pandas()\r\n{code}\r\n\r\nproduces\r\n\r\n{code}\r\n  File \"ipc.pxi\", line 307, in pyarrow.lib._RecordBatchReader.read_all\r\n  File \"error.pxi\", line 77, in pyarrow.lib.check_status\r\nArrowInvalid: Must pass at least one record batch\r\n{code}\r\n\r\ni.e. we're hitting the check in https://github.com/apache/arrow/blob/apache-arrow-0.8.0/cpp/src/arrow/table.cc#L284\r\n\r\nThe workaround we're currently using is to always ensure we serialize at least one record batch, even if it's empty. However, I think it would be nice to either support a stream without record batches or explicitly disallow this and then match behaviour in java.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Unable to read arrow stream containing 0 record batches",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13144891/comment/16398813",
                    "id": "16398813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Working on a fix for this",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-14T16:08:36.533+0000",
                    "updated": "2018-03-14T16:08:36.533+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13144891/comment/16399055",
                    "id": "16399055",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm opened a new pull request #1747: ARROW-2307: [Python] Allow reading record batch streams with zero record batches\nURL: https://github.com/apache/arrow/pull/1747\n \n \n   This is a pretty rough edge case -- it would be good to get this fix into 0.9.0.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-14T18:27:08.415+0000",
                    "updated": "2018-03-14T18:27:08.415+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13144891/comment/16399684",
                    "id": "16399684",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1747: ARROW-2307: [Python] Allow reading record batch streams with zero record batches\nURL: https://github.com/apache/arrow/pull/1747#issuecomment-373223120\n \n \n   +1. Appveyor build looking good: https://ci.appveyor.com/project/wesm/arrow/build/1.0.1776\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-15T00:47:54.850+0000",
                    "updated": "2018-03-15T00:47:54.850+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13144891/comment/16399687",
                    "id": "16399687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1747: ARROW-2307: [Python] Allow reading record batch streams with zero record batches\nURL: https://github.com/apache/arrow/pull/1747\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/ci/msvc-build.bat b/ci/msvc-build.bat\nindex beefee6c0..a29ef0bad 100644\n--- a/ci/msvc-build.bat\n+++ b/ci/msvc-build.bat\n@@ -69,7 +69,8 @@ if \"%JOB%\" == \"Build_Debug\" (\n )\n \n conda create -n arrow -q -y python=%PYTHON% ^\n-      six pytest setuptools numpy pandas cython ^\n+      six pytest setuptools numpy pandas ^\n+      cython=0.27.3 ^\n       thrift-cpp=0.11.0\n \n call activate arrow\ndiff --git a/ci/travis_script_python.sh b/ci/travis_script_python.sh\nindex a776c4263..247d10278 100755\n--- a/ci/travis_script_python.sh\n+++ b/ci/travis_script_python.sh\n@@ -41,7 +41,7 @@ conda install -y -q pip \\\n       cloudpickle \\\n       numpy=1.13.1 \\\n       pandas \\\n-      cython\n+      cython=0.27.3\n \n # ARROW-2093: PyTorch increases the size of our conda dependency stack\n # significantly, and so we have disabled these tests in Travis CI for now\ndiff --git a/cpp/src/arrow/table-test.cc b/cpp/src/arrow/table-test.cc\nindex 24c8d5e15..b1cf6e59a 100644\n--- a/cpp/src/arrow/table-test.cc\n+++ b/cpp/src/arrow/table-test.cc\n@@ -374,6 +374,17 @@ TEST_F(TestTable, FromRecordBatches) {\n   ASSERT_RAISES(Invalid, Table::FromRecordBatches({batch1, batch2}, &result));\n }\n \n+TEST_F(TestTable, FromRecordBatchesZeroLength) {\n+  // ARROW-2307\n+  MakeExample1(10);\n+\n+  std::shared_ptr<Table> result;\n+  ASSERT_OK(Table::FromRecordBatches(schema_, {}, &result));\n+\n+  ASSERT_EQ(0, result->num_rows());\n+  ASSERT_TRUE(result->schema()->Equals(*schema_));\n+}\n+\n TEST_F(TestTable, ConcatenateTables) {\n   const int64_t length = 10;\n \ndiff --git a/cpp/src/arrow/table.cc b/cpp/src/arrow/table.cc\nindex ed5858624..f6ac6dd3b 100644\n--- a/cpp/src/arrow/table.cc\n+++ b/cpp/src/arrow/table.cc\n@@ -297,14 +297,9 @@ std::shared_ptr<Table> Table::Make(const std::shared_ptr<Schema>& schema,\n   return std::make_shared<SimpleTable>(schema, arrays, num_rows);\n }\n \n-Status Table::FromRecordBatches(const std::vector<std::shared_ptr<RecordBatch>>& batches,\n+Status Table::FromRecordBatches(const std::shared_ptr<Schema>& schema,\n+                                const std::vector<std::shared_ptr<RecordBatch>>& batches,\n                                 std::shared_ptr<Table>* table) {\n-  if (batches.size() == 0) {\n-    return Status::Invalid(\"Must pass at least one record batch\");\n-  }\n-\n-  std::shared_ptr<Schema> schema = batches[0]->schema();\n-\n   const int nbatches = static_cast<int>(batches.size());\n   const int ncolumns = static_cast<int>(schema->num_fields());\n \n@@ -332,6 +327,15 @@ Status Table::FromRecordBatches(const std::vector<std::shared_ptr<RecordBatch>>&\n   return Status::OK();\n }\n \n+Status Table::FromRecordBatches(const std::vector<std::shared_ptr<RecordBatch>>& batches,\n+                                std::shared_ptr<Table>* table) {\n+  if (batches.size() == 0) {\n+    return Status::Invalid(\"Must pass at least one record batch\");\n+  }\n+\n+  return FromRecordBatches(batches[0]->schema(), batches, table);\n+}\n+\n Status ConcatenateTables(const std::vector<std::shared_ptr<Table>>& tables,\n                          std::shared_ptr<Table>* table) {\n   if (tables.size() == 0) {\ndiff --git a/cpp/src/arrow/table.h b/cpp/src/arrow/table.h\nindex 7274fca4d..20d027d6a 100644\n--- a/cpp/src/arrow/table.h\n+++ b/cpp/src/arrow/table.h\n@@ -169,9 +169,25 @@ class ARROW_EXPORT Table {\n                                      const std::vector<std::shared_ptr<Array>>& arrays,\n                                      int64_t num_rows = -1);\n \n-  // Construct table from RecordBatch, but only if all of the batch schemas are\n-  // equal. Returns Status::Invalid if there is some problem\n+  /// \\brief Construct table from RecordBatches, using schema supplied by the first\n+  /// RecordBatch.\n+  ///\n+  /// \\param[in] batches a std::vector of record batches\n+  /// \\param[out] table the returned table\n+  /// \\return Status Returns Status::Invalid if there is some problem\n+  static Status FromRecordBatches(\n+      const std::vector<std::shared_ptr<RecordBatch>>& batches,\n+      std::shared_ptr<Table>* table);\n+\n+  /// Construct table from RecordBatches, using supplied schema. There may be\n+  /// zero record batches\n+  ///\n+  /// \\param[in] schema the arrow::Schema for each batch\n+  /// \\param[in] batches a std::vector of record batches\n+  /// \\param[out] table the returned table\n+  /// \\return Status\n   static Status FromRecordBatches(\n+      const std::shared_ptr<Schema>& schema,\n       const std::vector<std::shared_ptr<RecordBatch>>& batches,\n       std::shared_ptr<Table>* table);\n \ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 3d0c02b89..01a641896 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -456,6 +456,7 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n \n         @staticmethod\n         CStatus FromRecordBatches(\n+            const shared_ptr[CSchema]& schema,\n             const vector[shared_ptr[CRecordBatch]]& batches,\n             shared_ptr[CTable]* table)\n \ndiff --git a/python/pyarrow/ipc.pxi b/python/pyarrow/ipc.pxi\nindex a30a228ae..f2ba6b692 100644\n--- a/python/pyarrow/ipc.pxi\n+++ b/python/pyarrow/ipc.pxi\n@@ -304,7 +304,8 @@ cdef class _RecordBatchReader:\n                     break\n                 batches.push_back(batch)\n \n-            check_status(CTable.FromRecordBatches(batches, &table))\n+            check_status(CTable.FromRecordBatches(self.schema.sp_schema,\n+                                                  batches, &table))\n \n         return pyarrow_wrap_table(table)\n \n@@ -386,7 +387,8 @@ cdef class _RecordBatchFileReader:\n         with nogil:\n             for i in range(nbatches):\n                 check_status(self.reader.get().ReadRecordBatch(i, &batches[i]))\n-            check_status(CTable.FromRecordBatches(batches, &table))\n+            check_status(CTable.FromRecordBatches(self.schema.sp_schema,\n+                                                  batches, &table))\n \n         return pyarrow_wrap_table(table)\n \ndiff --git a/python/pyarrow/table.pxi b/python/pyarrow/table.pxi\nindex 94041e465..6cfa9873b 100644\n--- a/python/pyarrow/table.pxi\n+++ b/python/pyarrow/table.pxi\n@@ -975,7 +975,7 @@ cdef class Table:\n         columns.reserve(K)\n \n         for i in range(K):\n-            if isinstance(arrays[i], Array):\n+            if isinstance(arrays[i], (Array, list)):\n                 columns.push_back(\n                     make_shared[CColumn](\n                         c_schema.get().field(i),\n@@ -1003,26 +1003,41 @@ cdef class Table:\n         return pyarrow_wrap_table(CTable.Make(c_schema, columns))\n \n     @staticmethod\n-    def from_batches(batches):\n+    def from_batches(batches, Schema schema=None):\n         \"\"\"\n         Construct a Table from a list of Arrow RecordBatches\n \n         Parameters\n         ----------\n-\n         batches: list of RecordBatch\n-            RecordBatch list to be converted, schemas must be equal\n+            RecordBatch list to be converted, all schemas must be equal\n+        schema : Schema, default None\n+            If not passed, will be inferred from the first RecordBatch\n+\n+        Returns\n+        -------\n+        table : Table\n         \"\"\"\n         cdef:\n             vector[shared_ptr[CRecordBatch]] c_batches\n             shared_ptr[CTable] c_table\n+            shared_ptr[CSchema] c_schema\n             RecordBatch batch\n \n         for batch in batches:\n             c_batches.push_back(batch.sp_batch)\n \n+        if schema is None:\n+            if len(batches) == 0:\n+                raise ValueError('Must pass schema, or at least '\n+                                 'one RecordBatch')\n+            c_schema = c_batches[0].get().schema()\n+        else:\n+            c_schema = schema.sp_schema\n+\n         with nogil:\n-            check_status(CTable.FromRecordBatches(c_batches, &c_table))\n+            check_status(CTable.FromRecordBatches(c_schema, c_batches,\n+                                                  &c_table))\n \n         return pyarrow_wrap_table(c_table)\n \ndiff --git a/python/pyarrow/tests/test_ipc.py b/python/pyarrow/tests/test_ipc.py\nindex 9cd5f8076..c31c32251 100644\n--- a/python/pyarrow/tests/test_ipc.py\n+++ b/python/pyarrow/tests/test_ipc.py\n@@ -379,6 +379,24 @@ def test_ipc_zero_copy_numpy():\n     assert_frame_equal(df, rdf)\n \n \n+def test_ipc_stream_no_batches():\n+    # ARROW-2307\n+    table = pa.Table.from_arrays([pa.array([1, 2, 3, 4]),\n+                                  pa.array(['foo', 'bar', 'baz', 'qux'])],\n+                                 names=['a', 'b'])\n+\n+    sink = pa.BufferOutputStream()\n+    writer = pa.RecordBatchStreamWriter(sink, table.schema)\n+    writer.close()\n+\n+    source = sink.get_result()\n+    reader = pa.open_stream(source)\n+    result = reader.read_all()\n+\n+    assert result.schema.equals(table.schema)\n+    assert len(result) == 0\n+\n+\n def test_get_record_batch_size():\n     N = 10\n     itemsize = 8\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-15T00:50:55.370+0000",
                    "updated": "2018-03-15T00:50:55.370+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13144891/comment/16399688",
                    "id": "16399688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1747\n[https://github.com/apache/arrow/pull/1747]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-15T00:50:59.505+0000",
                    "updated": "2018-03-15T00:50:59.505+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|i3r9g7:",
        "customfield_12314139": null
    }
}