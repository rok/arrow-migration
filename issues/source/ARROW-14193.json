{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13404477",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477",
    "key": "ARROW-14193",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=augustoasilva",
            "name": "augustoasilva",
            "key": "augustoasilva",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Augusto Alves Silva",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=augustoasilva",
            "name": "augustoasilva",
            "key": "augustoasilva",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Augusto Alves Silva",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14193/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 36,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/658892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva opened a new pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287\n\n\n   Returns the position of the first occurrence of _substr_ in _str_. Returns null if either of the arguments are null and returns 0 if substr could not be found in str.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-01T11:36:15.854+0000",
                    "updated": "2021-10-01T11:36:15.854+0000",
                    "started": "2021-10-01T11:36:15.853+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658892",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/658894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#issuecomment-932152258\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-01T11:36:41.112+0000",
                    "updated": "2021-10-01T11:36:41.112+0000",
                    "started": "2021-10-01T11:36:41.112+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658894",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/674396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r741632047\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n\nReview comment:\n       If the substring is a literal, you should be able to pre-process the substring to implement this faster. Can you open a separate ticket to handle a literal substring?\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,42 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 6);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 15);\n+\n+  s1 = \"\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n+\n+  s1 = \"open the door\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n\nReview comment:\n       My testing shows that this should return 1\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,42 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 6);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n\nReview comment:\n       Both of these tests match at the end. Can you add tests where the substring is at index 0 (the return value should be 1) and where the substring is somewhere in the middle?\r\n   \r\n   Also, a test case where the string has most of the substring except the last character - for e.g. instr(\"hello world\", \"worldA\") - this will catch off-by-1 errors in the code\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len <= 0 || substring_len <= 0) {\n+    return 0;\n+  }\n+\n+  std::string str(string, string_len);\n\nReview comment:\n       We should avoid using std::string as this does a memcpy. It would also do a malloc, malloc requires a lock impacting performance on multi-threaded machines.\r\n   \r\n   You should write a loop like as follows:\r\n   for(int i = 0; i < (string_len - substring_len); i++) {\r\n     if (string[i] == substring[0]) {\r\n       // check if there is a complete match starting from this index\r\n     }\r\n   }\n\n##########\nFile path: cpp/src/gandiva/tests/projector_test.cc\n##########\n@@ -1606,4 +1606,47 @@ TEST_F(TestProjector, TestCastNullableIntYearInterval) {\n   EXPECT_ARROW_ARRAY_EQUALS(out_int64, outputs.at(1));\n }\n \n+TEST_F(TestProjector, TestInstr) {\n+  // schema for input fields\n+  auto field0 = field(\"f0\", arrow::utf8());\n+  auto field1 = field(\"f2\", arrow::utf8());\n+  auto schema = arrow::schema({field0, field1});\n+\n+  // output fields\n+  auto output_instr = field(\"out_instr\", int32());\n+\n+\n+  // Build expression\n+  auto instr_expr = TreeExprBuilder::MakeExpression(\"instr\",\n+                                                    {field0, field1}, output_instr);\n+\n+\n+  std::shared_ptr<Projector> projector;\n+  auto status =\n+      Projector::Make(schema, {instr_expr}, TestConfiguration(), &projector);\n+  EXPECT_TRUE(status.ok());\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 4;\n+  auto array0 = MakeArrowArrayUtf8(\n+      {\"hello world!\", \"apple, banana, mango\", \"\", \"open the door\"},\n+      {true, true, true, true});\n+  auto array1 = MakeArrowArrayUtf8(\n+      {\"world\", \"mango\", \"mango\", \"\"},\n\nReview comment:\n       What is the expected output if the substr is not null, but the length is 0? Is this matching at index 1 or not matching?\r\n   \r\n   The Hive documentation is not clear on this. Can you test how the Hive function behaves? My testing shows that an empty substring (not-null, but a substring of \"\") returns 1 for the INSTR(column, '')\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-03T05:49:39.635+0000",
                    "updated": "2021-11-03T05:49:39.635+0000",
                    "started": "2021-11-03T05:49:39.635+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674396",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/674397",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r741638784\n\n\n\n##########\nFile path: cpp/src/gandiva/function_registry_string.cc\n##########\n@@ -406,6 +406,10 @@ std::vector<NativeFunction> GetStringFunctionRegistry() {\n \n       NativeFunction(\"split_part\", {}, DataTypeVector{utf8(), utf8(), int32()}, utf8(),\n                      kResultNullIfNull, \"split_part\",\n+                     NativeFunction::kNeedsContext | NativeFunction::kCanReturnErrors),\n+\n+      NativeFunction(\"instr\", {}, DataTypeVector{utf8(), utf8()},  int32(),\n+                     kResultNullIfNull, \"gd_fn_instr_utf8\",\n\nReview comment:\n       Why does this function need context? I also dont see this function return errors\r\n   \r\n   Do we need the kNeedsContext and kCanReturnErrors flags?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-03T06:07:04.192+0000",
                    "updated": "2021-11-03T06:07:04.192+0000",
                    "started": "2021-11-03T06:07:04.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674397",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/675060",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r741632047\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n\nReview comment:\n       If the substring is a literal, you should be able to pre-process the substring to implement this faster. Can you open a separate ticket to handle a literal substring?\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,42 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 6);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 15);\n+\n+  s1 = \"\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n+\n+  s1 = \"open the door\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n\nReview comment:\n       My testing shows that this should return 1\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,42 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 6);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n\nReview comment:\n       Both of these tests match at the end. Can you add tests where the substring is at index 0 (the return value should be 1) and where the substring is somewhere in the middle?\r\n   \r\n   Also, a test case where the string has most of the substring except the last character - for e.g. instr(\"hello world\", \"worldA\") - this will catch off-by-1 errors in the code\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len <= 0 || substring_len <= 0) {\n+    return 0;\n+  }\n+\n+  std::string str(string, string_len);\n\nReview comment:\n       We should avoid using std::string as this does a memcpy. It would also do a malloc, malloc requires a lock impacting performance on multi-threaded machines.\r\n   \r\n   You should write a loop like as follows:\r\n   for(int i = 0; i < (string_len - substring_len); i++) {\r\n     if (string[i] == substring[0]) {\r\n       // check if there is a complete match starting from this index\r\n     }\r\n   }\n\n##########\nFile path: cpp/src/gandiva/tests/projector_test.cc\n##########\n@@ -1606,4 +1606,47 @@ TEST_F(TestProjector, TestCastNullableIntYearInterval) {\n   EXPECT_ARROW_ARRAY_EQUALS(out_int64, outputs.at(1));\n }\n \n+TEST_F(TestProjector, TestInstr) {\n+  // schema for input fields\n+  auto field0 = field(\"f0\", arrow::utf8());\n+  auto field1 = field(\"f2\", arrow::utf8());\n+  auto schema = arrow::schema({field0, field1});\n+\n+  // output fields\n+  auto output_instr = field(\"out_instr\", int32());\n+\n+\n+  // Build expression\n+  auto instr_expr = TreeExprBuilder::MakeExpression(\"instr\",\n+                                                    {field0, field1}, output_instr);\n+\n+\n+  std::shared_ptr<Projector> projector;\n+  auto status =\n+      Projector::Make(schema, {instr_expr}, TestConfiguration(), &projector);\n+  EXPECT_TRUE(status.ok());\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 4;\n+  auto array0 = MakeArrowArrayUtf8(\n+      {\"hello world!\", \"apple, banana, mango\", \"\", \"open the door\"},\n+      {true, true, true, true});\n+  auto array1 = MakeArrowArrayUtf8(\n+      {\"world\", \"mango\", \"mango\", \"\"},\n\nReview comment:\n       What is the expected output if the substr is not null, but the length is 0? Is this matching at index 1 or not matching?\r\n   \r\n   The Hive documentation is not clear on this. Can you test how the Hive function behaves? My testing shows that an empty substring (not-null, but a substring of \"\") returns 1 for the INSTR(column, '')\n\n##########\nFile path: cpp/src/gandiva/function_registry_string.cc\n##########\n@@ -406,6 +406,10 @@ std::vector<NativeFunction> GetStringFunctionRegistry() {\n \n       NativeFunction(\"split_part\", {}, DataTypeVector{utf8(), utf8(), int32()}, utf8(),\n                      kResultNullIfNull, \"split_part\",\n+                     NativeFunction::kNeedsContext | NativeFunction::kCanReturnErrors),\n+\n+      NativeFunction(\"instr\", {}, DataTypeVector{utf8(), utf8()},  int32(),\n+                     kResultNullIfNull, \"gd_fn_instr_utf8\",\n\nReview comment:\n       Why does this function need context? I also dont see this function return errors\r\n   \r\n   Do we need the kNeedsContext and kCanReturnErrors flags?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T00:06:38.536+0000",
                    "updated": "2021-11-04T00:06:38.536+0000",
                    "started": "2021-11-04T00:06:38.536+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "675060",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/675397",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r742446127\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len <= 0 || substring_len <= 0) {\n+    return 0;\n+  }\n+\n+  std::string str(string, string_len);\n\nReview comment:\n       Ok, fixed it\n\n##########\nFile path: cpp/src/gandiva/tests/projector_test.cc\n##########\n@@ -1606,4 +1606,47 @@ TEST_F(TestProjector, TestCastNullableIntYearInterval) {\n   EXPECT_ARROW_ARRAY_EQUALS(out_int64, outputs.at(1));\n }\n \n+TEST_F(TestProjector, TestInstr) {\n+  // schema for input fields\n+  auto field0 = field(\"f0\", arrow::utf8());\n+  auto field1 = field(\"f2\", arrow::utf8());\n+  auto schema = arrow::schema({field0, field1});\n+\n+  // output fields\n+  auto output_instr = field(\"out_instr\", int32());\n+\n+\n+  // Build expression\n+  auto instr_expr = TreeExprBuilder::MakeExpression(\"instr\",\n+                                                    {field0, field1}, output_instr);\n+\n+\n+  std::shared_ptr<Projector> projector;\n+  auto status =\n+      Projector::Make(schema, {instr_expr}, TestConfiguration(), &projector);\n+  EXPECT_TRUE(status.ok());\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 4;\n+  auto array0 = MakeArrowArrayUtf8(\n+      {\"hello world!\", \"apple, banana, mango\", \"\", \"open the door\"},\n+      {true, true, true, true});\n+  auto array1 = MakeArrowArrayUtf8(\n+      {\"world\", \"mango\", \"mango\", \"\"},\n\nReview comment:\n       Yest, I tested it here too, and it now returns 1\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,42 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 6);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 15);\n+\n+  s1 = \"\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n+\n+  s1 = \"open the door\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n\nReview comment:\n       Fixed it\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len <= 0 || substring_len <= 0) {\n+    return 0;\n+  }\n+\n+  std::string str(string, string_len);\n\nReview comment:\n       Ok, fixed it\n\n##########\nFile path: cpp/src/gandiva/tests/projector_test.cc\n##########\n@@ -1606,4 +1606,47 @@ TEST_F(TestProjector, TestCastNullableIntYearInterval) {\n   EXPECT_ARROW_ARRAY_EQUALS(out_int64, outputs.at(1));\n }\n \n+TEST_F(TestProjector, TestInstr) {\n+  // schema for input fields\n+  auto field0 = field(\"f0\", arrow::utf8());\n+  auto field1 = field(\"f2\", arrow::utf8());\n+  auto schema = arrow::schema({field0, field1});\n+\n+  // output fields\n+  auto output_instr = field(\"out_instr\", int32());\n+\n+\n+  // Build expression\n+  auto instr_expr = TreeExprBuilder::MakeExpression(\"instr\",\n+                                                    {field0, field1}, output_instr);\n+\n+\n+  std::shared_ptr<Projector> projector;\n+  auto status =\n+      Projector::Make(schema, {instr_expr}, TestConfiguration(), &projector);\n+  EXPECT_TRUE(status.ok());\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 4;\n+  auto array0 = MakeArrowArrayUtf8(\n+      {\"hello world!\", \"apple, banana, mango\", \"\", \"open the door\"},\n+      {true, true, true, true});\n+  auto array1 = MakeArrowArrayUtf8(\n+      {\"world\", \"mango\", \"mango\", \"\"},\n\nReview comment:\n       Yest, I tested it here too, and it now returns 1\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,42 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 6);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 15);\n+\n+  s1 = \"\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n+\n+  s1 = \"open the door\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n\nReview comment:\n       Fixed it\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,42 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 6);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n\nReview comment:\n       I added this test case, and it passed!\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n\nReview comment:\n       Yes, no problem. Should I open it before or after this one is merged?\n\n##########\nFile path: cpp/src/gandiva/function_registry_string.cc\n##########\n@@ -406,6 +406,10 @@ std::vector<NativeFunction> GetStringFunctionRegistry() {\n \n       NativeFunction(\"split_part\", {}, DataTypeVector{utf8(), utf8(), int32()}, utf8(),\n                      kResultNullIfNull, \"split_part\",\n+                     NativeFunction::kNeedsContext | NativeFunction::kCanReturnErrors),\n+\n+      NativeFunction(\"instr\", {}, DataTypeVector{utf8(), utf8()},  int32(),\n+                     kResultNullIfNull, \"gd_fn_instr_utf8\",\n\nReview comment:\n       This one I was waiting for review, so I just left kNeedsContext, if I remove it the projector test will fail\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T00:47:34.122+0000",
                    "updated": "2021-11-04T00:47:34.122+0000",
                    "started": "2021-11-04T00:47:34.122+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "675397",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/675573",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r741632047\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n\nReview comment:\n       If the substring is a literal, you should be able to pre-process the substring to implement this faster. Can you open a separate ticket to handle a literal substring?\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,42 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 6);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 15);\n+\n+  s1 = \"\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n+\n+  s1 = \"open the door\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n\nReview comment:\n       My testing shows that this should return 1\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,42 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 6);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n\nReview comment:\n       Both of these tests match at the end. Can you add tests where the substring is at index 0 (the return value should be 1) and where the substring is somewhere in the middle?\r\n   \r\n   Also, a test case where the string has most of the substring except the last character - for e.g. instr(\"hello world\", \"worldA\") - this will catch off-by-1 errors in the code\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len <= 0 || substring_len <= 0) {\n+    return 0;\n+  }\n+\n+  std::string str(string, string_len);\n\nReview comment:\n       We should avoid using std::string as this does a memcpy. It would also do a malloc, malloc requires a lock impacting performance on multi-threaded machines.\r\n   \r\n   You should write a loop like as follows:\r\n   for(int i = 0; i < (string_len - substring_len); i++) {\r\n     if (string[i] == substring[0]) {\r\n       // check if there is a complete match starting from this index\r\n     }\r\n   }\n\n##########\nFile path: cpp/src/gandiva/tests/projector_test.cc\n##########\n@@ -1606,4 +1606,47 @@ TEST_F(TestProjector, TestCastNullableIntYearInterval) {\n   EXPECT_ARROW_ARRAY_EQUALS(out_int64, outputs.at(1));\n }\n \n+TEST_F(TestProjector, TestInstr) {\n+  // schema for input fields\n+  auto field0 = field(\"f0\", arrow::utf8());\n+  auto field1 = field(\"f2\", arrow::utf8());\n+  auto schema = arrow::schema({field0, field1});\n+\n+  // output fields\n+  auto output_instr = field(\"out_instr\", int32());\n+\n+\n+  // Build expression\n+  auto instr_expr = TreeExprBuilder::MakeExpression(\"instr\",\n+                                                    {field0, field1}, output_instr);\n+\n+\n+  std::shared_ptr<Projector> projector;\n+  auto status =\n+      Projector::Make(schema, {instr_expr}, TestConfiguration(), &projector);\n+  EXPECT_TRUE(status.ok());\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 4;\n+  auto array0 = MakeArrowArrayUtf8(\n+      {\"hello world!\", \"apple, banana, mango\", \"\", \"open the door\"},\n+      {true, true, true, true});\n+  auto array1 = MakeArrowArrayUtf8(\n+      {\"world\", \"mango\", \"mango\", \"\"},\n\nReview comment:\n       What is the expected output if the substr is not null, but the length is 0? Is this matching at index 1 or not matching?\r\n   \r\n   The Hive documentation is not clear on this. Can you test how the Hive function behaves? My testing shows that an empty substring (not-null, but a substring of \"\") returns 1 for the INSTR(column, '')\n\n##########\nFile path: cpp/src/gandiva/function_registry_string.cc\n##########\n@@ -406,6 +406,10 @@ std::vector<NativeFunction> GetStringFunctionRegistry() {\n \n       NativeFunction(\"split_part\", {}, DataTypeVector{utf8(), utf8(), int32()}, utf8(),\n                      kResultNullIfNull, \"split_part\",\n+                     NativeFunction::kNeedsContext | NativeFunction::kCanReturnErrors),\n+\n+      NativeFunction(\"instr\", {}, DataTypeVector{utf8(), utf8()},  int32(),\n+                     kResultNullIfNull, \"gd_fn_instr_utf8\",\n\nReview comment:\n       Why does this function need context? I also dont see this function return errors\r\n   \r\n   Do we need the kNeedsContext and kCanReturnErrors flags?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T01:03:41.456+0000",
                    "updated": "2021-11-04T01:03:41.456+0000",
                    "started": "2021-11-04T01:03:41.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "675573",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/675979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r741632047\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n\nReview comment:\n       If the substring is a literal, you should be able to pre-process the substring to implement this faster. Can you open a separate ticket to handle a literal substring?\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,42 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 6);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 15);\n+\n+  s1 = \"\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n+\n+  s1 = \"open the door\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n\nReview comment:\n       My testing shows that this should return 1\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,42 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 6);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n\nReview comment:\n       Both of these tests match at the end. Can you add tests where the substring is at index 0 (the return value should be 1) and where the substring is somewhere in the middle?\r\n   \r\n   Also, a test case where the string has most of the substring except the last character - for e.g. instr(\"hello world\", \"worldA\") - this will catch off-by-1 errors in the code\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len <= 0 || substring_len <= 0) {\n+    return 0;\n+  }\n+\n+  std::string str(string, string_len);\n\nReview comment:\n       We should avoid using std::string as this does a memcpy. It would also do a malloc, malloc requires a lock impacting performance on multi-threaded machines.\r\n   \r\n   You should write a loop like as follows:\r\n   for(int i = 0; i < (string_len - substring_len); i++) {\r\n     if (string[i] == substring[0]) {\r\n       // check if there is a complete match starting from this index\r\n     }\r\n   }\n\n##########\nFile path: cpp/src/gandiva/tests/projector_test.cc\n##########\n@@ -1606,4 +1606,47 @@ TEST_F(TestProjector, TestCastNullableIntYearInterval) {\n   EXPECT_ARROW_ARRAY_EQUALS(out_int64, outputs.at(1));\n }\n \n+TEST_F(TestProjector, TestInstr) {\n+  // schema for input fields\n+  auto field0 = field(\"f0\", arrow::utf8());\n+  auto field1 = field(\"f2\", arrow::utf8());\n+  auto schema = arrow::schema({field0, field1});\n+\n+  // output fields\n+  auto output_instr = field(\"out_instr\", int32());\n+\n+\n+  // Build expression\n+  auto instr_expr = TreeExprBuilder::MakeExpression(\"instr\",\n+                                                    {field0, field1}, output_instr);\n+\n+\n+  std::shared_ptr<Projector> projector;\n+  auto status =\n+      Projector::Make(schema, {instr_expr}, TestConfiguration(), &projector);\n+  EXPECT_TRUE(status.ok());\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 4;\n+  auto array0 = MakeArrowArrayUtf8(\n+      {\"hello world!\", \"apple, banana, mango\", \"\", \"open the door\"},\n+      {true, true, true, true});\n+  auto array1 = MakeArrowArrayUtf8(\n+      {\"world\", \"mango\", \"mango\", \"\"},\n\nReview comment:\n       What is the expected output if the substr is not null, but the length is 0? Is this matching at index 1 or not matching?\r\n   \r\n   The Hive documentation is not clear on this. Can you test how the Hive function behaves? My testing shows that an empty substring (not-null, but a substring of \"\") returns 1 for the INSTR(column, '')\n\n##########\nFile path: cpp/src/gandiva/function_registry_string.cc\n##########\n@@ -406,6 +406,10 @@ std::vector<NativeFunction> GetStringFunctionRegistry() {\n \n       NativeFunction(\"split_part\", {}, DataTypeVector{utf8(), utf8(), int32()}, utf8(),\n                      kResultNullIfNull, \"split_part\",\n+                     NativeFunction::kNeedsContext | NativeFunction::kCanReturnErrors),\n+\n+      NativeFunction(\"instr\", {}, DataTypeVector{utf8(), utf8()},  int32(),\n+                     kResultNullIfNull, \"gd_fn_instr_utf8\",\n\nReview comment:\n       Why does this function need context? I also dont see this function return errors\r\n   \r\n   Do we need the kNeedsContext and kCanReturnErrors flags?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T01:46:57.844+0000",
                    "updated": "2021-11-04T01:46:57.844+0000",
                    "started": "2021-11-04T01:46:57.843+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "675979",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/676053",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r742446127\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len <= 0 || substring_len <= 0) {\n+    return 0;\n+  }\n+\n+  std::string str(string, string_len);\n\nReview comment:\n       Ok, fixed it\n\n##########\nFile path: cpp/src/gandiva/tests/projector_test.cc\n##########\n@@ -1606,4 +1606,47 @@ TEST_F(TestProjector, TestCastNullableIntYearInterval) {\n   EXPECT_ARROW_ARRAY_EQUALS(out_int64, outputs.at(1));\n }\n \n+TEST_F(TestProjector, TestInstr) {\n+  // schema for input fields\n+  auto field0 = field(\"f0\", arrow::utf8());\n+  auto field1 = field(\"f2\", arrow::utf8());\n+  auto schema = arrow::schema({field0, field1});\n+\n+  // output fields\n+  auto output_instr = field(\"out_instr\", int32());\n+\n+\n+  // Build expression\n+  auto instr_expr = TreeExprBuilder::MakeExpression(\"instr\",\n+                                                    {field0, field1}, output_instr);\n+\n+\n+  std::shared_ptr<Projector> projector;\n+  auto status =\n+      Projector::Make(schema, {instr_expr}, TestConfiguration(), &projector);\n+  EXPECT_TRUE(status.ok());\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 4;\n+  auto array0 = MakeArrowArrayUtf8(\n+      {\"hello world!\", \"apple, banana, mango\", \"\", \"open the door\"},\n+      {true, true, true, true});\n+  auto array1 = MakeArrowArrayUtf8(\n+      {\"world\", \"mango\", \"mango\", \"\"},\n\nReview comment:\n       Yest, I tested it here too, and it now returns 1\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,42 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 6);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 15);\n+\n+  s1 = \"\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n+\n+  s1 = \"open the door\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 0);\n\nReview comment:\n       Fixed it\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,42 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gd_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 6);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n\nReview comment:\n       I added this test case, and it passed!\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n\nReview comment:\n       Yes, no problem. Should I open it before or after this one is merged?\n\n##########\nFile path: cpp/src/gandiva/function_registry_string.cc\n##########\n@@ -406,6 +406,10 @@ std::vector<NativeFunction> GetStringFunctionRegistry() {\n \n       NativeFunction(\"split_part\", {}, DataTypeVector{utf8(), utf8(), int32()}, utf8(),\n                      kResultNullIfNull, \"split_part\",\n+                     NativeFunction::kNeedsContext | NativeFunction::kCanReturnErrors),\n+\n+      NativeFunction(\"instr\", {}, DataTypeVector{utf8(), utf8()},  int32(),\n+                     kResultNullIfNull, \"gd_fn_instr_utf8\",\n\nReview comment:\n       This one I was waiting for review, so I just left kNeedsContext, if I remove it the projector test will fail\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T01:54:35.021+0000",
                    "updated": "2021-11-04T01:54:35.021+0000",
                    "started": "2021-11-04T01:54:35.020+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676053",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/676891",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r743392841\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n\nReview comment:\n       After this one is merged is fine\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T05:07:03.562+0000",
                    "updated": "2021-11-05T05:07:03.562+0000",
                    "started": "2021-11-05T05:07:03.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676891",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/676892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r743393070\n\n\n\n##########\nFile path: cpp/src/gandiva/function_registry_string.cc\n##########\n@@ -406,6 +406,10 @@ std::vector<NativeFunction> GetStringFunctionRegistry() {\n \n       NativeFunction(\"split_part\", {}, DataTypeVector{utf8(), utf8(), int32()}, utf8(),\n                      kResultNullIfNull, \"split_part\",\n+                     NativeFunction::kNeedsContext | NativeFunction::kCanReturnErrors),\n+\n+      NativeFunction(\"instr\", {}, DataTypeVector{utf8(), utf8()},  int32(),\n+                     kResultNullIfNull, \"gd_fn_instr_utf8\",\n\nReview comment:\n       This is not going to allocate memory. So, I dont understand why it needs context\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T05:07:57.092+0000",
                    "updated": "2021-11-05T05:07:57.092+0000",
                    "started": "2021-11-05T05:07:57.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676892",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/676898",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r743394148\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,39 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gdv_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len == 0 && substring_len == 0) {\n\nReview comment:\n       This code is going to run for all the rows in the table. So, it is important to avoid if-statements in the code.\r\n   \r\n   How about the following:\r\n   if (substring_len == 0) { return 1; } // I see instr('', '') returning 1. So, there is no need to check for string_len\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,39 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gdv_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len == 0 && substring_len == 0) {\n+    return 1;\n+  }\n+\n+  if (substring_len == 0) {\n+    return 1;\n+  }\n+\n+  if (string_len == 0) {\n+    return 0;\n+  }\n+\n+  int32_t match = 0;\n+  int32_t pos = 0;\n+  for (int i = 0; i < string_len; ++i) {\n+    if (string[i] == substring[match]) {\n\nReview comment:\n       This is incorrect - if string = \"Hello World\" and substring = \"HW\", this implementation will return 1\r\n   \r\n   You should change this to:\r\n   for(int i = 0; i < string_len; i++) {\r\n     if (string[i] == substring[0] && stringMatches(string + 1, substring + 1, substring_len - 1)) {\r\n       return (i + 1);\r\n     }\r\n   }\r\n   \r\n   return 0;\r\n   \r\n   stringMatches(const char *string, const char *substring, int substring_len) {\r\n     for(int i = 0; i < substring_len; i++) {\r\n       if (string[i] != substring[i]) {\r\n         return false;\r\n       }\r\n     }\r\n   \r\n     return true;\r\n   }\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T05:19:49.482+0000",
                    "updated": "2021-11-05T05:19:49.482+0000",
                    "started": "2021-11-05T05:19:49.481+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676898",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/677232",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r743392841\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n\nReview comment:\n       After this one is merged is fine\n\n##########\nFile path: cpp/src/gandiva/function_registry_string.cc\n##########\n@@ -406,6 +406,10 @@ std::vector<NativeFunction> GetStringFunctionRegistry() {\n \n       NativeFunction(\"split_part\", {}, DataTypeVector{utf8(), utf8(), int32()}, utf8(),\n                      kResultNullIfNull, \"split_part\",\n+                     NativeFunction::kNeedsContext | NativeFunction::kCanReturnErrors),\n+\n+      NativeFunction(\"instr\", {}, DataTypeVector{utf8(), utf8()},  int32(),\n+                     kResultNullIfNull, \"gd_fn_instr_utf8\",\n\nReview comment:\n       This is not going to allocate memory. So, I dont understand why it needs context\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,39 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gdv_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len == 0 && substring_len == 0) {\n\nReview comment:\n       This code is going to run for all the rows in the table. So, it is important to avoid if-statements in the code.\r\n   \r\n   How about the following:\r\n   if (substring_len == 0) { return 1; } // I see instr('', '') returning 1. So, there is no need to check for string_len\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,39 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gdv_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len == 0 && substring_len == 0) {\n+    return 1;\n+  }\n+\n+  if (substring_len == 0) {\n+    return 1;\n+  }\n+\n+  if (string_len == 0) {\n+    return 0;\n+  }\n+\n+  int32_t match = 0;\n+  int32_t pos = 0;\n+  for (int i = 0; i < string_len; ++i) {\n+    if (string[i] == substring[match]) {\n\nReview comment:\n       This is incorrect - if string = \"Hello World\" and substring = \"HW\", this implementation will return 1\r\n   \r\n   You should change this to:\r\n   for(int i = 0; i < string_len; i++) {\r\n     if (string[i] == substring[0] && stringMatches(string + 1, substring + 1, substring_len - 1)) {\r\n       return (i + 1);\r\n     }\r\n   }\r\n   \r\n   return 0;\r\n   \r\n   stringMatches(const char *string, const char *substring, int substring_len) {\r\n     for(int i = 0; i < substring_len; i++) {\r\n       if (string[i] != substring[i]) {\r\n         return false;\r\n       }\r\n     }\r\n   \r\n     return true;\r\n   }\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T19:25:53.963+0000",
                    "updated": "2021-11-05T19:25:53.963+0000",
                    "started": "2021-11-05T19:25:53.963+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677232",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/677776",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r743392841\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +794,27 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gd_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n\nReview comment:\n       After this one is merged is fine\n\n##########\nFile path: cpp/src/gandiva/function_registry_string.cc\n##########\n@@ -406,6 +406,10 @@ std::vector<NativeFunction> GetStringFunctionRegistry() {\n \n       NativeFunction(\"split_part\", {}, DataTypeVector{utf8(), utf8(), int32()}, utf8(),\n                      kResultNullIfNull, \"split_part\",\n+                     NativeFunction::kNeedsContext | NativeFunction::kCanReturnErrors),\n+\n+      NativeFunction(\"instr\", {}, DataTypeVector{utf8(), utf8()},  int32(),\n+                     kResultNullIfNull, \"gd_fn_instr_utf8\",\n\nReview comment:\n       This is not going to allocate memory. So, I dont understand why it needs context\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,39 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gdv_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len == 0 && substring_len == 0) {\n\nReview comment:\n       This code is going to run for all the rows in the table. So, it is important to avoid if-statements in the code.\r\n   \r\n   How about the following:\r\n   if (substring_len == 0) { return 1; } // I see instr('', '') returning 1. So, there is no need to check for string_len\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,39 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gdv_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len == 0 && substring_len == 0) {\n+    return 1;\n+  }\n+\n+  if (substring_len == 0) {\n+    return 1;\n+  }\n+\n+  if (string_len == 0) {\n+    return 0;\n+  }\n+\n+  int32_t match = 0;\n+  int32_t pos = 0;\n+  for (int i = 0; i < string_len; ++i) {\n+    if (string[i] == substring[match]) {\n\nReview comment:\n       This is incorrect - if string = \"Hello World\" and substring = \"HW\", this implementation will return 1\r\n   \r\n   You should change this to:\r\n   for(int i = 0; i < string_len; i++) {\r\n     if (string[i] == substring[0] && stringMatches(string + 1, substring + 1, substring_len - 1)) {\r\n       return (i + 1);\r\n     }\r\n   }\r\n   \r\n   return 0;\r\n   \r\n   stringMatches(const char *string, const char *substring, int substring_len) {\r\n     for(int i = 0; i < substring_len; i++) {\r\n       if (string[i] != substring[i]) {\r\n         return false;\r\n       }\r\n     }\r\n   \r\n     return true;\r\n   }\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T20:36:53.999+0000",
                    "updated": "2021-11-05T20:36:53.999+0000",
                    "started": "2021-11-05T20:36:53.998+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677776",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/678418",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r744631874\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,39 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gdv_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len == 0 && substring_len == 0) {\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-08T11:23:33.189+0000",
                    "updated": "2021-11-08T11:23:33.189+0000",
                    "started": "2021-11-08T11:23:33.188+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678418",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/678440",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r744675094\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,39 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gdv_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (string_len == 0 && substring_len == 0) {\n+    return 1;\n+  }\n+\n+  if (substring_len == 0) {\n+    return 1;\n+  }\n+\n+  if (string_len == 0) {\n+    return 0;\n+  }\n+\n+  int32_t match = 0;\n+  int32_t pos = 0;\n+  for (int i = 0; i < string_len; ++i) {\n+    if (string[i] == substring[match]) {\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-08T12:26:02.324+0000",
                    "updated": "2021-11-08T12:26:02.324+0000",
                    "started": "2021-11-08T12:26:02.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678440",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/678912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r745310461\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +796,21 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gdv_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (substring_len == 0) {\n+    return 1;\n+  }\n+\n+  for(int i = 0; i < string_len; i++) {\n+    if (string[i] == substring[0] && gandiva::string_matches(string + 1, substring + 1, i, substring_len - 1)) {\n\nReview comment:\n       Please use memcmp instead - https://www.cplusplus.com/reference/cstring/memcmp/\r\n   \r\n   You are essentially comparing the next substring_len - 1 bytes of both the pointers\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,58 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gdv_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 7);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gdv_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n\nReview comment:\n       s2=\"apple\" should return 1\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +796,21 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gdv_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (substring_len == 0) {\n+    return 1;\n+  }\n+\n+  for(int i = 0; i < string_len; i++) {\n\nReview comment:\n       The condition (i < string_len) is incorrect. Note that you are comparing the next N bytes when the first byte matches. If there is a match at the last byte, you will access beyond the end here and cause issues\r\n   \r\n   This should be changed to (i < string_len - substring_len)\n\n##########\nFile path: cpp/src/gandiva/string_utils.cc\n##########\n@@ -0,0 +1,33 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"string_utils.h\"\n+\n+namespace gandiva {\n+GANDIVA_EXPORT\n+bool string_matches(const char *string, const char *substring, int start_idx, int substring_len) {\n\nReview comment:\n       This is not required, please use memcmp() instead\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-09T06:07:13.338+0000",
                    "updated": "2021-11-09T06:07:13.338+0000",
                    "started": "2021-11-09T06:07:13.338+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678912",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/679379",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r746147617\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +796,21 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gdv_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (substring_len == 0) {\n+    return 1;\n+  }\n+\n+  for(int i = 0; i < string_len; i++) {\n\nReview comment:\n       Fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-10T00:13:27.382+0000",
                    "updated": "2021-11-10T00:13:27.382+0000",
                    "started": "2021-11-10T00:13:27.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679379",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/679381",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r746147745\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +796,21 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+int32_t gdv_fn_instr_utf8(int64_t context, const char* string, int32_t string_len,\n+                         const char* substring, int32_t substring_len) {\n+  if (substring_len == 0) {\n+    return 1;\n+  }\n+\n+  for(int i = 0; i < string_len; i++) {\n+    if (string[i] == substring[0] && gandiva::string_matches(string + 1, substring + 1, i, substring_len - 1)) {\n\nReview comment:\n       It is using memcmp now\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-10T00:13:42.722+0000",
                    "updated": "2021-11-10T00:13:42.722+0000",
                    "started": "2021-11-10T00:13:42.722+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679381",
                    "issueId": "13404477"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/worklog/679382",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11287:\nURL: https://github.com/apache/arrow/pull/11287#discussion_r746147819\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,58 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestInstr) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+\n+  std::string s1 = \"hello world!\";\n+  auto s1_len = static_cast<int32_t>(s1.size());\n+  std::string s2 = \"world\";\n+  auto s2_len = static_cast<int32_t>(s2.size());\n+\n+  auto result = gdv_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n+  EXPECT_EQ(result, 7);\n+\n+  s1 = \"apple, banana, mango\";\n+  s1_len = static_cast<int32_t>(s1.size());\n+  s2 = \"mango\";\n+  s2_len = static_cast<int32_t>(s2.size());\n+\n+  result = gdv_fn_instr_utf8(ctx_ptr, s1.c_str(), s1_len, s2.c_str(), s2_len);\n\nReview comment:\n       It returns 1 now\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-10T00:13:55.666+0000",
                    "updated": "2021-11-10T00:13:55.666+0000",
                    "started": "2021-11-10T00:13:55.666+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679382",
                    "issueId": "13404477"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 21600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@495f2fbc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55c4367c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@65709e5f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@11f3235b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@198f3c4a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5f677892[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e848747[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@36e58237[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56e885cd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@32afc46a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@288bd3c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@326518db[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Dec 13 06:14:51 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-12-13T06:14:51.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14193/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-10-01T11:34:34.000+0000",
        "updated": "2021-12-14T23:41:10.000+0000",
        "timeoriginalestimate": null,
        "description": "Returns the position of the first occurrence of {{substr}} in {{str}}. Returns {{null}} if either of the arguments are {{null}} and returns {{0}} if {{substr}} could not be found in {{str}}.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Gandiva] Implement INSTR function",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404477/comment/17458158",
                    "id": "17458158",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "Issue resolved by pull request 11287\n[https://github.com/apache/arrow/pull/11287]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2021-12-13T06:14:51.857+0000",
                    "updated": "2021-12-13T06:14:51.857+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0vhm0:",
        "customfield_12314139": null
    }
}