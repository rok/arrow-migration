{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13237295",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295",
    "key": "ARROW-5494",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "filesystem",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12569956",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12569956",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13247492",
                    "key": "ARROW-6055",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247492",
                    "fields": {
                        "summary": "[C++] Refactor arrow/io/hdfs.h to use common FileSystem API",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 60600,
            "total": 60600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 60600,
            "total": 60600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5494/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 113,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/305526",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-03T10:39:51.451+0000",
                    "updated": "2019-09-03T10:39:51.451+0000",
                    "started": "2019-09-03T10:39:51.451+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305526",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/305599",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320276464\n \n \n\n ##########\n File path: python/pyarrow/_fs.pyx\n ##########\n @@ -0,0 +1,292 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# cython: language_level = 3\n+\n+from pathlib import Path\n+\n+from pyarrow.compat import frombytes, tobytes\n+from pyarrow.includes.common cimport *\n+from pyarrow.includes.libarrow_fs cimport *\n+from pyarrow.lib import _detect_compression\n+from pyarrow.lib cimport (\n+    check_status,\n+    NativeFile,\n+    BufferedOutputStream,\n+    BufferedInputStream,\n+    CompressedInputStream,\n+    CompressedOutputStream\n+)\n+\n+\n+cdef inline c_string _to_string(p):\n+    # supports types: byte, str, pathlib.Path\n+    return tobytes(str(p))\n+\n+\n+cpdef enum FileType:\n+    NonExistent\n+    Uknown\n+    File\n+    Directory\n+\n+\n+cdef class TimePoint:\n+    pass\n+\n+\n+cdef class FileStats:\n+\n+    cdef CFileStats stats\n+\n+    def __init__(self):\n+        raise TypeError('dont initialize me')\n+\n+    @staticmethod\n+    cdef FileStats wrap(CFileStats stats):\n+        cdef FileStats self = FileStats.__new__(FileStats)\n+        self.stats = stats\n+        return self\n+\n+    @property\n+    def type(self):\n+        cdef CFileType ctype = self.stats.type()\n+        if ctype == CFileType_NonExistent:\n+            return FileType.NonExistent\n+        elif ctype == CFileType_Unknown:\n+            return FileType.Uknown\n+        elif ctype == CFileType_File:\n+            return FileType.File\n+        elif ctype == CFileType_Directory:\n+            return FileType.Directory\n+        else:\n+            raise ValueError('Unhandled FileType {}'.format(type))\n+\n+    @property\n+    def path(self):\n+        return Path(frombytes(self.stats.path()))\n+\n+    @property\n+    def base_name(self):\n+        return frombytes(self.stats.base_name())\n+\n+    @property\n+    def size(self):\n+        return self.stats.size()\n+\n+    @property\n+    def extension(self):\n+        return frombytes(self.stats.extension())\n+\n+    # @property\n+    # def mtime(self):\n+    #     return self.stats.mtime()\n \n Review comment:\n   Well, it would be interesting to get this right (meaning, probably return a `datetime`?).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-03T13:38:48.471+0000",
                    "updated": "2019-09-03T13:38:48.471+0000",
                    "started": "2019-09-03T13:38:48.470+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305599",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/305600",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320276960\n \n \n\n ##########\n File path: python/pyarrow/_fs.pyx\n ##########\n @@ -0,0 +1,292 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# cython: language_level = 3\n+\n+from pathlib import Path\n+\n+from pyarrow.compat import frombytes, tobytes\n+from pyarrow.includes.common cimport *\n+from pyarrow.includes.libarrow_fs cimport *\n+from pyarrow.lib import _detect_compression\n+from pyarrow.lib cimport (\n+    check_status,\n+    NativeFile,\n+    BufferedOutputStream,\n+    BufferedInputStream,\n+    CompressedInputStream,\n+    CompressedOutputStream\n+)\n+\n+\n+cdef inline c_string _to_string(p):\n+    # supports types: byte, str, pathlib.Path\n+    return tobytes(str(p))\n \n Review comment:\n   Need a shortcut if `p` is already bytes.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-03T13:39:49.103+0000",
                    "updated": "2019-09-03T13:39:49.103+0000",
                    "started": "2019-09-03T13:39:49.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305600",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/305601",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320277033\n \n \n\n ##########\n File path: python/pyarrow/_fs.pyx\n ##########\n @@ -0,0 +1,292 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# cython: language_level = 3\n+\n+from pathlib import Path\n+\n+from pyarrow.compat import frombytes, tobytes\n+from pyarrow.includes.common cimport *\n+from pyarrow.includes.libarrow_fs cimport *\n+from pyarrow.lib import _detect_compression\n+from pyarrow.lib cimport (\n+    check_status,\n+    NativeFile,\n+    BufferedOutputStream,\n+    BufferedInputStream,\n+    CompressedInputStream,\n+    CompressedOutputStream\n+)\n+\n+\n+cdef inline c_string _to_string(p):\n \n Review comment:\n   `_path_to_bytes`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-03T13:39:58.403+0000",
                    "updated": "2019-09-03T13:39:58.403+0000",
                    "started": "2019-09-03T13:39:58.403+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305601",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/305602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320277228\n \n \n\n ##########\n File path: python/pyarrow/_fs.pyx\n ##########\n @@ -0,0 +1,292 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# cython: language_level = 3\n+\n+from pathlib import Path\n+\n+from pyarrow.compat import frombytes, tobytes\n+from pyarrow.includes.common cimport *\n+from pyarrow.includes.libarrow_fs cimport *\n+from pyarrow.lib import _detect_compression\n+from pyarrow.lib cimport (\n+    check_status,\n+    NativeFile,\n+    BufferedOutputStream,\n+    BufferedInputStream,\n+    CompressedInputStream,\n+    CompressedOutputStream\n+)\n+\n+\n+cdef inline c_string _to_string(p):\n+    # supports types: byte, str, pathlib.Path\n+    return tobytes(str(p))\n+\n+\n+cpdef enum FileType:\n+    NonExistent\n+    Uknown\n+    File\n+    Directory\n+\n+\n+cdef class TimePoint:\n+    pass\n+\n+\n+cdef class FileStats:\n+\n+    cdef CFileStats stats\n+\n+    def __init__(self):\n+        raise TypeError('dont initialize me')\n+\n+    @staticmethod\n+    cdef FileStats wrap(CFileStats stats):\n+        cdef FileStats self = FileStats.__new__(FileStats)\n+        self.stats = stats\n+        return self\n+\n+    @property\n+    def type(self):\n+        cdef CFileType ctype = self.stats.type()\n+        if ctype == CFileType_NonExistent:\n+            return FileType.NonExistent\n+        elif ctype == CFileType_Unknown:\n+            return FileType.Uknown\n+        elif ctype == CFileType_File:\n+            return FileType.File\n+        elif ctype == CFileType_Directory:\n+            return FileType.Directory\n+        else:\n+            raise ValueError('Unhandled FileType {}'.format(type))\n+\n+    @property\n+    def path(self):\n+        return Path(frombytes(self.stats.path()))\n+\n+    @property\n+    def base_name(self):\n+        return frombytes(self.stats.base_name())\n+\n+    @property\n+    def size(self):\n+        return self.stats.size()\n+\n+    @property\n+    def extension(self):\n+        return frombytes(self.stats.extension())\n+\n+    # @property\n+    # def mtime(self):\n+    #     return self.stats.mtime()\n+\n+\n+cdef class Selector:\n+\n+    cdef CSelector selector\n+\n+    def __init__(self, base_dir='', bint allow_non_existent=False,\n+                 bint recursive=False):\n+        self.base_dir = base_dir\n+        self.recursive = recursive\n+        self.allow_non_existent = allow_non_existent\n+\n+    @property\n+    def base_dir(self):\n+        return Path(self.selector.base_dir)\n+\n+    @base_dir.setter\n+    def base_dir(self, base_dir):\n+        self.selector.base_dir = _to_string(base_dir)\n+\n+    @property\n+    def allow_non_existent(self):\n+        return self.selector.allow_non_existent\n+\n+    @allow_non_existent.setter\n+    def allow_non_existent(self, bint allow_non_existent):\n+        self.selector.allow_non_existent = allow_non_existent\n+\n+    @property\n+    def recursive(self):\n+        return self.selector.recursive\n+\n+    @recursive.setter\n+    def recursive(self, bint recursive):\n+        self.selector.recursive = recursive\n+\n+\n+cdef class FileSystem:\n+\n+    cdef:\n+        shared_ptr[CFileSystem] wrapped\n+        CFileSystem* fs\n+\n+    def __init__(self):\n+        raise TypeError('dont initialize me')\n+\n+    cdef init(self, const shared_ptr[CFileSystem]& wrapped):\n+        self.wrapped = wrapped\n+        self.fs = wrapped.get()\n+\n+    def stat(self, paths_or_selector):\n+        cdef:\n+            vector[CFileStats] stats\n+            vector[c_string] paths\n+            CSelector selector\n+\n+        if isinstance(paths_or_selector, Selector):\n+            selector = (<Selector>paths_or_selector).selector\n+            check_status(self.fs.GetTargetStats(selector, &stats))\n+        elif isinstance(paths_or_selector, (list, tuple)):\n+            paths = [_to_string(s) for s in paths_or_selector]\n+            check_status(self.fs.GetTargetStats(paths, &stats))\n+        else:\n+            raise TypeError('Must pass either paths or a Selector')\n+\n+        return [FileStats.wrap(stat) for stat in stats]\n+\n+    def mkdir(self, path, bint recursive=True):\n \n Review comment:\n   I would favor reusing the C++ names (but converted to PEP8).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-03T13:40:22.694+0000",
                    "updated": "2019-09-03T13:40:22.694+0000",
                    "started": "2019-09-03T13:40:22.693+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305602",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/305603",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320278278\n \n \n\n ##########\n File path: python/pyarrow/fs.py\n ##########\n @@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from __future__ import absolute_import\n+\n+from pyarrow._fs import *  # noqa\n \n Review comment:\n   I think it's nicer to list the imports explicitly. There aren't many of them.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-03T13:42:33.183+0000",
                    "updated": "2019-09-03T13:42:33.183+0000",
                    "started": "2019-09-03T13:42:33.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305603",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/305606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320279579\n \n \n\n ##########\n File path: python/pyarrow/tests/test_fs.py\n ##########\n @@ -0,0 +1,266 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+try:\n+    import pathlib\n+except ImportError:\n+    import pathlib2 as pathlib  # py2 compat\n+\n+import pytest\n+\n+from pyarrow import ArrowIOError\n+from pyarrow.fs import (\n+    FileType,\n+    LocalFileSystem,\n+    SubTreeFileSystem,\n+    Selector\n+)\n+from pyarrow.tests.test_io import gzip_compress, gzip_decompress\n+\n+\n+@pytest.fixture(params=[\n+    pytest.param(\n+        lambda tmp: LocalFileSystem(),\n+        id='LocalFileSystem'\n+    ),\n+    pytest.param(\n+        lambda tmp: SubTreeFileSystem(tmp, LocalFileSystem()),\n+        id='SubTreeFileSystem(LocalFileSystem)'\n+    ),\n+    # s3 follows\n+    # pytest.param(\n+    #     lambda tmp: SubTreeFileSystem(tmp, LocalFileSystem()),\n+    #     name='SubTreeFileSystem[LocalFileSystem]'\n+    # ),\n+])\n+def fs(request, tempdir):\n+    return request.param(tempdir)\n+\n+\n+@pytest.fixture(params=[\n+    pytest.param(pathlib.Path, id='Path'),\n+    pytest.param(str, id='str')\n+])\n+def testpath(request, fs, tempdir):\n+    # we always use the tempdir for rewding and writing test artifacts, but\n+    # if the filesystem is wrapped in a SubTreeFileSystem then we don't need\n+    # to prepend the path with the tempdir, we also test the API with both\n+    # pathlib.Path objects and plain python strings\n+    if isinstance(fs, SubTreeFileSystem):\n+        return lambda path: request.param(path)\n+    else:\n+        return lambda path: request.param(tempdir / path)\n+\n+\n+def test_stat_with_paths(fs, tempdir, testpath):\n+    (tempdir / 'a' / 'aa' / 'aaa').mkdir(parents=True)\n+    (tempdir / 'a' / 'bb').touch()\n+    (tempdir / 'c.txt').touch()\n+\n+    aaa_path = testpath('a/aa/aaa')\n+    bb_path = testpath('a/bb')\n+    c_path = testpath('c.txt')\n+\n+    aaa, bb, c = fs.stat([aaa_path, bb_path, c_path])\n+\n+    assert aaa.path == pathlib.Path(aaa_path)\n+    assert aaa.base_name == 'aaa'\n+    assert aaa.extension == ''\n+    assert aaa.type == FileType.Directory\n+\n+    assert bb.path == pathlib.Path(bb_path)\n+    assert bb.base_name == 'bb'\n+    assert bb.extension == ''\n+    assert bb.type == FileType.File\n+\n+    assert c.path == pathlib.Path(c_path)\n+    assert c.base_name == 'c.txt'\n+    assert c.extension == 'txt'\n+    assert c.type == FileType.File\n+\n+    selector = Selector(testpath(''), allow_non_existent=False, recursive=True)\n+    nodes = fs.stat(selector)\n+    assert len(nodes) == 5\n+    assert len(list(n for n in nodes if n.type == FileType.File)) == 2\n+    assert len(list(n for n in nodes if n.type == FileType.Directory)) == 3\n+\n+\n+def test_mkdir(fs, tempdir, testpath):\n+    directory = testpath('directory')\n+    directory_ = tempdir / 'directory'\n+    assert not directory_.exists()\n+    fs.mkdir(directory)\n+    assert directory_.exists()\n+\n+    # recursive\n+    directory = testpath('deeply/nested/directory')\n+    directory_ = tempdir / 'deeply' / 'nested' / 'directory'\n+    assert not directory_.exists()\n+    with pytest.raises(ArrowIOError):\n+        fs.mkdir(directory, recursive=False)\n+    fs.mkdir(directory)\n+    assert directory_.exists()\n+\n+\n+def test_rmdir(fs, tempdir, testpath):\n+    folder = testpath('directory')\n+    nested = testpath('nested/directory')\n+    folder_ = tempdir / 'directory'\n+    nested_ = tempdir / 'nested' / 'directory'\n+\n+    folder_.mkdir()\n+    nested_.mkdir(parents=True)\n+\n+    assert folder_.exists()\n+    fs.rmdir(folder)\n+    assert not folder_.exists()\n \n Review comment:\n   That won't work with non-local filesystems.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-03T13:45:06.987+0000",
                    "updated": "2019-09-03T13:45:06.987+0000",
                    "started": "2019-09-03T13:45:06.986+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305606",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/305630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320315506\n \n \n\n ##########\n File path: python/pyarrow/fs.py\n ##########\n @@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from __future__ import absolute_import\n+\n+from pyarrow._fs import *  # noqa\n \n Review comment:\n   IMO we should move it to `fs.pyx` instead of proxying through another python file.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-03T14:49:48.710+0000",
                    "updated": "2019-09-03T14:49:48.710+0000",
                    "started": "2019-09-03T14:49:48.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305630",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/305631",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320315905\n \n \n\n ##########\n File path: python/pyarrow/tests/test_fs.py\n ##########\n @@ -0,0 +1,266 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+try:\n+    import pathlib\n+except ImportError:\n+    import pathlib2 as pathlib  # py2 compat\n+\n+import pytest\n+\n+from pyarrow import ArrowIOError\n+from pyarrow.fs import (\n+    FileType,\n+    LocalFileSystem,\n+    SubTreeFileSystem,\n+    Selector\n+)\n+from pyarrow.tests.test_io import gzip_compress, gzip_decompress\n+\n+\n+@pytest.fixture(params=[\n+    pytest.param(\n+        lambda tmp: LocalFileSystem(),\n+        id='LocalFileSystem'\n+    ),\n+    pytest.param(\n+        lambda tmp: SubTreeFileSystem(tmp, LocalFileSystem()),\n+        id='SubTreeFileSystem(LocalFileSystem)'\n+    ),\n+    # s3 follows\n+    # pytest.param(\n+    #     lambda tmp: SubTreeFileSystem(tmp, LocalFileSystem()),\n+    #     name='SubTreeFileSystem[LocalFileSystem]'\n+    # ),\n+])\n+def fs(request, tempdir):\n+    return request.param(tempdir)\n+\n+\n+@pytest.fixture(params=[\n+    pytest.param(pathlib.Path, id='Path'),\n+    pytest.param(str, id='str')\n+])\n+def testpath(request, fs, tempdir):\n+    # we always use the tempdir for rewding and writing test artifacts, but\n+    # if the filesystem is wrapped in a SubTreeFileSystem then we don't need\n+    # to prepend the path with the tempdir, we also test the API with both\n+    # pathlib.Path objects and plain python strings\n+    if isinstance(fs, SubTreeFileSystem):\n+        return lambda path: request.param(path)\n+    else:\n+        return lambda path: request.param(tempdir / path)\n+\n+\n+def test_stat_with_paths(fs, tempdir, testpath):\n+    (tempdir / 'a' / 'aa' / 'aaa').mkdir(parents=True)\n+    (tempdir / 'a' / 'bb').touch()\n+    (tempdir / 'c.txt').touch()\n+\n+    aaa_path = testpath('a/aa/aaa')\n+    bb_path = testpath('a/bb')\n+    c_path = testpath('c.txt')\n+\n+    aaa, bb, c = fs.stat([aaa_path, bb_path, c_path])\n+\n+    assert aaa.path == pathlib.Path(aaa_path)\n+    assert aaa.base_name == 'aaa'\n+    assert aaa.extension == ''\n+    assert aaa.type == FileType.Directory\n+\n+    assert bb.path == pathlib.Path(bb_path)\n+    assert bb.base_name == 'bb'\n+    assert bb.extension == ''\n+    assert bb.type == FileType.File\n+\n+    assert c.path == pathlib.Path(c_path)\n+    assert c.base_name == 'c.txt'\n+    assert c.extension == 'txt'\n+    assert c.type == FileType.File\n+\n+    selector = Selector(testpath(''), allow_non_existent=False, recursive=True)\n+    nodes = fs.stat(selector)\n+    assert len(nodes) == 5\n+    assert len(list(n for n in nodes if n.type == FileType.File)) == 2\n+    assert len(list(n for n in nodes if n.type == FileType.Directory)) == 3\n+\n+\n+def test_mkdir(fs, tempdir, testpath):\n+    directory = testpath('directory')\n+    directory_ = tempdir / 'directory'\n+    assert not directory_.exists()\n+    fs.mkdir(directory)\n+    assert directory_.exists()\n+\n+    # recursive\n+    directory = testpath('deeply/nested/directory')\n+    directory_ = tempdir / 'deeply' / 'nested' / 'directory'\n+    assert not directory_.exists()\n+    with pytest.raises(ArrowIOError):\n+        fs.mkdir(directory, recursive=False)\n+    fs.mkdir(directory)\n+    assert directory_.exists()\n+\n+\n+def test_rmdir(fs, tempdir, testpath):\n+    folder = testpath('directory')\n+    nested = testpath('nested/directory')\n+    folder_ = tempdir / 'directory'\n+    nested_ = tempdir / 'nested' / 'directory'\n+\n+    folder_.mkdir()\n+    nested_.mkdir(parents=True)\n+\n+    assert folder_.exists()\n+    fs.rmdir(folder)\n+    assert not folder_.exists()\n \n Review comment:\n   I'll write other test cases than.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-03T14:50:29.443+0000",
                    "updated": "2019-09-03T14:50:29.443+0000",
                    "started": "2019-09-03T14:50:29.442+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305631",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/305632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320315905\n \n \n\n ##########\n File path: python/pyarrow/tests/test_fs.py\n ##########\n @@ -0,0 +1,266 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+try:\n+    import pathlib\n+except ImportError:\n+    import pathlib2 as pathlib  # py2 compat\n+\n+import pytest\n+\n+from pyarrow import ArrowIOError\n+from pyarrow.fs import (\n+    FileType,\n+    LocalFileSystem,\n+    SubTreeFileSystem,\n+    Selector\n+)\n+from pyarrow.tests.test_io import gzip_compress, gzip_decompress\n+\n+\n+@pytest.fixture(params=[\n+    pytest.param(\n+        lambda tmp: LocalFileSystem(),\n+        id='LocalFileSystem'\n+    ),\n+    pytest.param(\n+        lambda tmp: SubTreeFileSystem(tmp, LocalFileSystem()),\n+        id='SubTreeFileSystem(LocalFileSystem)'\n+    ),\n+    # s3 follows\n+    # pytest.param(\n+    #     lambda tmp: SubTreeFileSystem(tmp, LocalFileSystem()),\n+    #     name='SubTreeFileSystem[LocalFileSystem]'\n+    # ),\n+])\n+def fs(request, tempdir):\n+    return request.param(tempdir)\n+\n+\n+@pytest.fixture(params=[\n+    pytest.param(pathlib.Path, id='Path'),\n+    pytest.param(str, id='str')\n+])\n+def testpath(request, fs, tempdir):\n+    # we always use the tempdir for rewding and writing test artifacts, but\n+    # if the filesystem is wrapped in a SubTreeFileSystem then we don't need\n+    # to prepend the path with the tempdir, we also test the API with both\n+    # pathlib.Path objects and plain python strings\n+    if isinstance(fs, SubTreeFileSystem):\n+        return lambda path: request.param(path)\n+    else:\n+        return lambda path: request.param(tempdir / path)\n+\n+\n+def test_stat_with_paths(fs, tempdir, testpath):\n+    (tempdir / 'a' / 'aa' / 'aaa').mkdir(parents=True)\n+    (tempdir / 'a' / 'bb').touch()\n+    (tempdir / 'c.txt').touch()\n+\n+    aaa_path = testpath('a/aa/aaa')\n+    bb_path = testpath('a/bb')\n+    c_path = testpath('c.txt')\n+\n+    aaa, bb, c = fs.stat([aaa_path, bb_path, c_path])\n+\n+    assert aaa.path == pathlib.Path(aaa_path)\n+    assert aaa.base_name == 'aaa'\n+    assert aaa.extension == ''\n+    assert aaa.type == FileType.Directory\n+\n+    assert bb.path == pathlib.Path(bb_path)\n+    assert bb.base_name == 'bb'\n+    assert bb.extension == ''\n+    assert bb.type == FileType.File\n+\n+    assert c.path == pathlib.Path(c_path)\n+    assert c.base_name == 'c.txt'\n+    assert c.extension == 'txt'\n+    assert c.type == FileType.File\n+\n+    selector = Selector(testpath(''), allow_non_existent=False, recursive=True)\n+    nodes = fs.stat(selector)\n+    assert len(nodes) == 5\n+    assert len(list(n for n in nodes if n.type == FileType.File)) == 2\n+    assert len(list(n for n in nodes if n.type == FileType.Directory)) == 3\n+\n+\n+def test_mkdir(fs, tempdir, testpath):\n+    directory = testpath('directory')\n+    directory_ = tempdir / 'directory'\n+    assert not directory_.exists()\n+    fs.mkdir(directory)\n+    assert directory_.exists()\n+\n+    # recursive\n+    directory = testpath('deeply/nested/directory')\n+    directory_ = tempdir / 'deeply' / 'nested' / 'directory'\n+    assert not directory_.exists()\n+    with pytest.raises(ArrowIOError):\n+        fs.mkdir(directory, recursive=False)\n+    fs.mkdir(directory)\n+    assert directory_.exists()\n+\n+\n+def test_rmdir(fs, tempdir, testpath):\n+    folder = testpath('directory')\n+    nested = testpath('nested/directory')\n+    folder_ = tempdir / 'directory'\n+    nested_ = tempdir / 'nested' / 'directory'\n+\n+    folder_.mkdir()\n+    nested_.mkdir(parents=True)\n+\n+    assert folder_.exists()\n+    fs.rmdir(folder)\n+    assert not folder_.exists()\n \n Review comment:\n   I'll write other test cases then.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-03T14:50:36.497+0000",
                    "updated": "2019-09-03T14:50:36.497+0000",
                    "started": "2019-09-03T14:50:36.496+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305632",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/305692",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320371129\n \n \n\n ##########\n File path: python/pyarrow/_fs.pyx\n ##########\n @@ -0,0 +1,292 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# cython: language_level = 3\n+\n+from pathlib import Path\n+\n+from pyarrow.compat import frombytes, tobytes\n+from pyarrow.includes.common cimport *\n+from pyarrow.includes.libarrow_fs cimport *\n+from pyarrow.lib import _detect_compression\n+from pyarrow.lib cimport (\n+    check_status,\n+    NativeFile,\n+    BufferedOutputStream,\n+    BufferedInputStream,\n+    CompressedInputStream,\n+    CompressedOutputStream\n+)\n+\n+\n+cdef inline c_string _to_string(p):\n+    # supports types: byte, str, pathlib.Path\n+    return tobytes(str(p))\n+\n+\n+cpdef enum FileType:\n+    NonExistent\n+    Uknown\n+    File\n+    Directory\n+\n+\n+cdef class TimePoint:\n+    pass\n+\n+\n+cdef class FileStats:\n+\n+    cdef CFileStats stats\n+\n+    def __init__(self):\n+        raise TypeError('dont initialize me')\n+\n+    @staticmethod\n+    cdef FileStats wrap(CFileStats stats):\n+        cdef FileStats self = FileStats.__new__(FileStats)\n+        self.stats = stats\n+        return self\n+\n+    @property\n+    def type(self):\n+        cdef CFileType ctype = self.stats.type()\n+        if ctype == CFileType_NonExistent:\n+            return FileType.NonExistent\n+        elif ctype == CFileType_Unknown:\n+            return FileType.Uknown\n+        elif ctype == CFileType_File:\n+            return FileType.File\n+        elif ctype == CFileType_Directory:\n+            return FileType.Directory\n+        else:\n+            raise ValueError('Unhandled FileType {}'.format(type))\n+\n+    @property\n+    def path(self):\n+        return Path(frombytes(self.stats.path()))\n+\n+    @property\n+    def base_name(self):\n+        return frombytes(self.stats.base_name())\n+\n+    @property\n+    def size(self):\n+        return self.stats.size()\n+\n+    @property\n+    def extension(self):\n+        return frombytes(self.stats.extension())\n+\n+    # @property\n+    # def mtime(self):\n+    #     return self.stats.mtime()\n+\n+\n+cdef class Selector:\n+\n+    cdef CSelector selector\n+\n+    def __init__(self, base_dir='', bint allow_non_existent=False,\n+                 bint recursive=False):\n+        self.base_dir = base_dir\n+        self.recursive = recursive\n+        self.allow_non_existent = allow_non_existent\n+\n+    @property\n+    def base_dir(self):\n+        return Path(self.selector.base_dir)\n+\n+    @base_dir.setter\n+    def base_dir(self, base_dir):\n+        self.selector.base_dir = _to_string(base_dir)\n+\n+    @property\n+    def allow_non_existent(self):\n+        return self.selector.allow_non_existent\n+\n+    @allow_non_existent.setter\n+    def allow_non_existent(self, bint allow_non_existent):\n+        self.selector.allow_non_existent = allow_non_existent\n+\n+    @property\n+    def recursive(self):\n+        return self.selector.recursive\n+\n+    @recursive.setter\n+    def recursive(self, bint recursive):\n+        self.selector.recursive = recursive\n+\n+\n+cdef class FileSystem:\n+\n+    cdef:\n+        shared_ptr[CFileSystem] wrapped\n+        CFileSystem* fs\n+\n+    def __init__(self):\n+        raise TypeError('dont initialize me')\n+\n+    cdef init(self, const shared_ptr[CFileSystem]& wrapped):\n+        self.wrapped = wrapped\n+        self.fs = wrapped.get()\n+\n+    def stat(self, paths_or_selector):\n+        cdef:\n+            vector[CFileStats] stats\n+            vector[c_string] paths\n+            CSelector selector\n+\n+        if isinstance(paths_or_selector, Selector):\n+            selector = (<Selector>paths_or_selector).selector\n+            check_status(self.fs.GetTargetStats(selector, &stats))\n+        elif isinstance(paths_or_selector, (list, tuple)):\n+            paths = [_to_string(s) for s in paths_or_selector]\n+            check_status(self.fs.GetTargetStats(paths, &stats))\n+        else:\n+            raise TypeError('Must pass either paths or a Selector')\n+\n+        return [FileStats.wrap(stat) for stat in stats]\n+\n+    def mkdir(self, path, bint recursive=True):\n \n Review comment:\n   +1\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-03T16:42:34.296+0000",
                    "updated": "2019-09-03T16:42:34.296+0000",
                    "started": "2019-09-03T16:42:34.295+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305692",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/305693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320371329\n \n \n\n ##########\n File path: python/pyarrow/fs.py\n ##########\n @@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from __future__ import absolute_import\n+\n+from pyarrow._fs import *  # noqa\n \n Review comment:\n   I think it's beneficial to have the `_$NAME.pyx` and `$NAME.py` pattern, so that we aren't compiling code we don't need to\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-03T16:43:05.293+0000",
                    "updated": "2019-09-03T16:43:05.293+0000",
                    "started": "2019-09-03T16:43:05.293+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305693",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/306313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320755294\n \n \n\n ##########\n File path: cpp/src/arrow/python/datetime.cc\n ##########\n @@ -233,25 +222,24 @@ static inline Status PyDate_convert_int(int64_t val, const DateUnit unit, int64_\n   return Status::OK();\n }\n \n-static inline Status PyTime_from_int(int64_t val, const TimeUnit::type unit,\n-                                     PyObject** out) {\n+Status PyTime_from_int(int64_t val, const TimeUnit::type unit, PyObject** out) {\n   int64_t hour = 0, minute = 0, second = 0, microsecond = 0;\n   RETURN_NOT_OK(PyTime_convert_int(val, unit, &hour, &minute, &second, &microsecond));\n   *out = PyTime_FromTime(static_cast<int32_t>(hour), static_cast<int32_t>(minute),\n                          static_cast<int32_t>(second), static_cast<int32_t>(microsecond));\n   return Status::OK();\n }\n \n-static inline Status PyDate_from_int(int64_t val, const DateUnit unit, PyObject** out) {\n+Status PyDate_from_int(int64_t val, const DateUnit unit, PyObject** out) {\n   int64_t year = 0, month = 0, day = 0;\n   RETURN_NOT_OK(PyDate_convert_int(val, unit, &year, &month, &day));\n   *out = PyDate_FromDate(static_cast<int32_t>(year), static_cast<int32_t>(month),\n                          static_cast<int32_t>(day));\n   return Status::OK();\n }\n \n-static inline Status PyDateTime_from_int(int64_t val, const TimeUnit::type unit,\n-                                         PyObject** out) {\n+Status PyDateTime_from_int(int64_t val, const TimeUnit::type unit, PyObject** out) {\n+  PyDateTime_IMPORT;\n \n Review comment:\n   @pitrou I'm not exactly sure where should I put this\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-04T13:23:15.235+0000",
                    "updated": "2019-09-04T13:23:15.235+0000",
                    "started": "2019-09-04T13:23:15.235+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "306313",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/306314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320755900\n \n \n\n ##########\n File path: cpp/src/arrow/python/datetime.cc\n ##########\n @@ -233,25 +222,24 @@ static inline Status PyDate_convert_int(int64_t val, const DateUnit unit, int64_\n   return Status::OK();\n }\n \n-static inline Status PyTime_from_int(int64_t val, const TimeUnit::type unit,\n-                                     PyObject** out) {\n+Status PyTime_from_int(int64_t val, const TimeUnit::type unit, PyObject** out) {\n   int64_t hour = 0, minute = 0, second = 0, microsecond = 0;\n   RETURN_NOT_OK(PyTime_convert_int(val, unit, &hour, &minute, &second, &microsecond));\n   *out = PyTime_FromTime(static_cast<int32_t>(hour), static_cast<int32_t>(minute),\n                          static_cast<int32_t>(second), static_cast<int32_t>(microsecond));\n   return Status::OK();\n }\n \n-static inline Status PyDate_from_int(int64_t val, const DateUnit unit, PyObject** out) {\n+Status PyDate_from_int(int64_t val, const DateUnit unit, PyObject** out) {\n   int64_t year = 0, month = 0, day = 0;\n   RETURN_NOT_OK(PyDate_convert_int(val, unit, &year, &month, &day));\n   *out = PyDate_FromDate(static_cast<int32_t>(year), static_cast<int32_t>(month),\n                          static_cast<int32_t>(day));\n   return Status::OK();\n }\n \n-static inline Status PyDateTime_from_int(int64_t val, const TimeUnit::type unit,\n-                                         PyObject** out) {\n+Status PyDateTime_from_int(int64_t val, const TimeUnit::type unit, PyObject** out) {\n+  PyDateTime_IMPORT;\n \n Review comment:\n   You mean the import?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-04T13:24:21.965+0000",
                    "updated": "2019-09-04T13:24:21.965+0000",
                    "started": "2019-09-04T13:24:21.965+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "306314",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/306315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320755926\n \n \n\n ##########\n File path: cpp/src/arrow/python/datetime.h\n ##########\n @@ -0,0 +1,66 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef PYARROW_UTIL_DATETIME_H\n+#define PYARROW_UTIL_DATETIME_H\n+\n+#include <algorithm>\n+#include <chrono>\n+\n+#include \"arrow/python/platform.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace py {\n+\n+int64_t PyTime_to_us(PyObject* pytime);\n \n Review comment:\n   @pitrou apply `ARROW_PYTHON_EXPORT` for all?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-04T13:24:25.468+0000",
                    "updated": "2019-09-04T13:24:25.468+0000",
                    "started": "2019-09-04T13:24:25.467+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "306315",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/306317",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320756123\n \n \n\n ##########\n File path: cpp/src/arrow/python/datetime.h\n ##########\n @@ -0,0 +1,66 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef PYARROW_UTIL_DATETIME_H\n+#define PYARROW_UTIL_DATETIME_H\n+\n+#include <algorithm>\n+#include <chrono>\n+\n+#include \"arrow/python/platform.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace py {\n+\n+int64_t PyTime_to_us(PyObject* pytime);\n+\n+inline int64_t PyTime_to_s(PyObject* pytime) { return PyTime_to_us(pytime) / 1000000; }\n \n Review comment:\n   Does this function naming conforms the convention?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-04T13:24:49.664+0000",
                    "updated": "2019-09-04T13:24:49.664+0000",
                    "started": "2019-09-04T13:24:49.664+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "306317",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/306320",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320762480\n \n \n\n ##########\n File path: cpp/src/arrow/python/datetime.h\n ##########\n @@ -0,0 +1,66 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef PYARROW_UTIL_DATETIME_H\n+#define PYARROW_UTIL_DATETIME_H\n+\n+#include <algorithm>\n+#include <chrono>\n+\n+#include \"arrow/python/platform.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace py {\n+\n+int64_t PyTime_to_us(PyObject* pytime);\n \n Review comment:\n   Well, the functions which were inlined should be kept inline IMO.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-04T13:37:28.935+0000",
                    "updated": "2019-09-04T13:37:28.935+0000",
                    "started": "2019-09-04T13:37:28.935+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "306320",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/306321",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320762725\n \n \n\n ##########\n File path: cpp/src/arrow/python/datetime.h\n ##########\n @@ -0,0 +1,66 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef PYARROW_UTIL_DATETIME_H\n+#define PYARROW_UTIL_DATETIME_H\n+\n+#include <algorithm>\n+#include <chrono>\n+\n+#include \"arrow/python/platform.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace py {\n+\n+int64_t PyTime_to_us(PyObject* pytime);\n+\n+inline int64_t PyTime_to_s(PyObject* pytime) { return PyTime_to_us(pytime) / 1000000; }\n \n Review comment:\n   Since this is internal, it's fine with me.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-04T13:37:57.538+0000",
                    "updated": "2019-09-04T13:37:57.538+0000",
                    "started": "2019-09-04T13:37:57.538+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "306321",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/306327",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320783716\n \n \n\n ##########\n File path: cpp/src/arrow/python/datetime.cc\n ##########\n @@ -233,25 +222,24 @@ static inline Status PyDate_convert_int(int64_t val, const DateUnit unit, int64_\n   return Status::OK();\n }\n \n-static inline Status PyTime_from_int(int64_t val, const TimeUnit::type unit,\n-                                     PyObject** out) {\n+Status PyTime_from_int(int64_t val, const TimeUnit::type unit, PyObject** out) {\n   int64_t hour = 0, minute = 0, second = 0, microsecond = 0;\n   RETURN_NOT_OK(PyTime_convert_int(val, unit, &hour, &minute, &second, &microsecond));\n   *out = PyTime_FromTime(static_cast<int32_t>(hour), static_cast<int32_t>(minute),\n                          static_cast<int32_t>(second), static_cast<int32_t>(microsecond));\n   return Status::OK();\n }\n \n-static inline Status PyDate_from_int(int64_t val, const DateUnit unit, PyObject** out) {\n+Status PyDate_from_int(int64_t val, const DateUnit unit, PyObject** out) {\n   int64_t year = 0, month = 0, day = 0;\n   RETURN_NOT_OK(PyDate_convert_int(val, unit, &year, &month, &day));\n   *out = PyDate_FromDate(static_cast<int32_t>(year), static_cast<int32_t>(month),\n                          static_cast<int32_t>(day));\n   return Status::OK();\n }\n \n-static inline Status PyDateTime_from_int(int64_t val, const TimeUnit::type unit,\n-                                         PyObject** out) {\n+Status PyDateTime_from_int(int64_t val, const TimeUnit::type unit, PyObject** out) {\n+  PyDateTime_IMPORT;\n \n Review comment:\n   Yes.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-04T14:14:42.967+0000",
                    "updated": "2019-09-04T14:14:42.967+0000",
                    "started": "2019-09-04T14:14:42.966+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "306327",
                    "issueId": "13237295"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/worklog/306329",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5258: ARROW-5494: [Python] Create FileSystem bindings\nURL: https://github.com/apache/arrow/pull/5258#discussion_r320784148\n \n \n\n ##########\n File path: cpp/src/arrow/python/datetime.h\n ##########\n @@ -0,0 +1,66 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef PYARROW_UTIL_DATETIME_H\n+#define PYARROW_UTIL_DATETIME_H\n+\n+#include <algorithm>\n+#include <chrono>\n+\n+#include \"arrow/python/platform.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace py {\n+\n+int64_t PyTime_to_us(PyObject* pytime);\n+\n+inline int64_t PyTime_to_s(PyObject* pytime) { return PyTime_to_us(pytime) / 1000000; }\n \n Review comment:\n   @pitrou They are not placed within an `::internal` namespace, should I move them?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-04T14:15:30.492+0000",
                    "updated": "2019-09-04T14:15:30.492+0000",
                    "started": "2019-09-04T14:15:30.492+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "306329",
                    "issueId": "13237295"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 60600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1e3ec780[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@758987a8[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6447ce0c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5d4ab1eb[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@322a0c36[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@56351bc7[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c5898a3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@415a52a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66bc5222[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@18298611[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50fc8837[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@79695bf7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 60600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 17 16:13:41 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-09-17T16:13:41.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5494/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2019-06-03T17:53:16.000+0000",
        "updated": "2019-09-17T16:14:03.000+0000",
        "timeoriginalestimate": null,
        "description": "Now that we have a C++ filesystem API, it should be usable from Python as well.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "16h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 60600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Create FileSystem bindings",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/comment/16913539",
                    "id": "16913539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~jorisvandenbossche] I don't know what your priorities look like currently, but I think this would be a useful thing to tackle, especially as we will soon have a S3 filesystem implementation in C++.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-08-22T17:41:27.931+0000",
                    "updated": "2019-08-22T17:41:27.931+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/comment/16913771",
                    "id": "16913771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I added to 0.15.0 optimistically. Having a minimal binding would be a nice thing, and probably not more than a couple of days' work",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-08-22T22:46:48.229+0000",
                    "updated": "2019-08-22T22:46:48.229+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/comment/16914027",
                    "id": "16914027",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "I would be happy to help here, although I will first need some more days to finish up the extension types work.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2019-08-23T07:48:10.317+0000",
                    "updated": "2019-08-23T07:48:19.173+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/comment/16920953",
                    "id": "16920953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~kszucs] You may be interested too.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-09-02T16:08:13.686+0000",
                    "updated": "2019-09-02T16:08:13.686+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/comment/16920956",
                    "id": "16920956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Yep, I might start to work on it because I'm a bit blocked by the dataset PRs.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2019-09-02T16:17:03.973+0000",
                    "updated": "2019-09-02T16:17:03.973+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237295/comment/16931610",
                    "id": "16931610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 5258\n[https://github.com/apache/arrow/pull/5258]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-09-17T16:13:41.188+0000",
                    "updated": "2019-09-17T16:13:41.188+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|z03d94:",
        "customfield_12314139": null
    }
}