{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13442971",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971",
    "key": "ARROW-16444",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "aggregateprogress": {
            "progress": 96000,
            "total": 96000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 96000,
            "total": 96000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16444/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 160,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/782528",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#issuecomment-1159193559\n\n   https://issues.apache.org/jira/browse/ARROW-16444\n\n\n",
                    "created": "2022-06-17T20:05:48.877+0000",
                    "updated": "2022-06-17T20:05:48.877+0000",
                    "started": "2022-06-17T20:05:48.877+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782528",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/782529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#issuecomment-1159193573\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-06-17T20:05:50.831+0000",
                    "updated": "2022-06-17T20:05:50.831+0000",
                    "started": "2022-06-17T20:05:50.831+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782529",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/782767",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901208762\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,90 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    std::vector<std::shared_ptr<arrow::Array>> array_args;\n+    for (int64_t i = 0; i < span.num_values(); i++) {\n+      const arrow::compute::ExecValue& v = span[i];\n+      if (v.is_array()) {\n+        array_args.push_back(v.array.ToArray());\n+      } else if (v.is_scalar()) {\n+        auto array = ValueOrStop(arrow::MakeArrayFromScalar(*v.scalar, span.length));\n+        array_args.push_back(array);\n+      }\n+    }\n+\n+    auto batch = arrow::RecordBatch::Make(input_types_, span.length, array_args);\n+\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::sexp batch_sexp = cpp11::to_r6<arrow::RecordBatch>(batch);\n+      cpp11::sexp batch_length_sexp = cpp11::as_sexp(span.length);\n+\n+      cpp11::writable::list udf_context = {batch_length_sexp};\n+      udf_context.names() = {\"batch_length\"};\n+\n+      cpp11::sexp fun_result_sexp = fun_(udf_context, batch_sexp);\n+      if (!Rf_inherits(fun_result_sexp, \"Array\")) {\n+        cpp11::stop(\"arrow_scalar_function must return an Array\");\n+      }\n+\n+      return cpp11::as_cpp<std::shared_ptr<arrow::Array>>(fun_result_sexp);\n+    });\n+\n+    if (!fun_result.ok()) {\n+      return fun_result.status();\n+    }\n+\n+    result->value.emplace<std::shared_ptr<arrow::ArrayData>>(\n+        fun_result.ValueUnsafe()->data());\n+    return arrow::Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<arrow::Schema> input_types_;\n+  std::shared_ptr<arrow::DataType> output_type_;\n+  cpp11::function fun_;\n+};\n+\n+// [[arrow::export]]\n+void RegisterScalarUDF(std::string name, cpp11::sexp fun) {\n+  const arrow::compute::FunctionDoc dummy_function_doc{\n+      \"A user-defined R function\", \"returns something\", {\"...\"}};\n+\n+  auto func = std::make_shared<arrow::compute::ScalarFunction>(\n+      name, arrow::compute::Arity::VarArgs(), dummy_function_doc);\n\nReview Comment:\n   Just curious about the function docs, will Users pass the function docs?\n\n\n\n",
                    "created": "2022-06-20T02:29:45.047+0000",
                    "updated": "2022-06-20T02:29:45.047+0000",
                    "started": "2022-06-20T02:29:45.047+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782767",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/782930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901497172\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,90 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    std::vector<std::shared_ptr<arrow::Array>> array_args;\n+    for (int64_t i = 0; i < span.num_values(); i++) {\n+      const arrow::compute::ExecValue& v = span[i];\n+      if (v.is_array()) {\n+        array_args.push_back(v.array.ToArray());\n+      } else if (v.is_scalar()) {\n+        auto array = ValueOrStop(arrow::MakeArrayFromScalar(*v.scalar, span.length));\n+        array_args.push_back(array);\n+      }\n+    }\n+\n+    auto batch = arrow::RecordBatch::Make(input_types_, span.length, array_args);\n+\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::sexp batch_sexp = cpp11::to_r6<arrow::RecordBatch>(batch);\n+      cpp11::sexp batch_length_sexp = cpp11::as_sexp(span.length);\n+\n+      cpp11::writable::list udf_context = {batch_length_sexp};\n+      udf_context.names() = {\"batch_length\"};\n+\n+      cpp11::sexp fun_result_sexp = fun_(udf_context, batch_sexp);\n+      if (!Rf_inherits(fun_result_sexp, \"Array\")) {\n+        cpp11::stop(\"arrow_scalar_function must return an Array\");\n+      }\n+\n+      return cpp11::as_cpp<std::shared_ptr<arrow::Array>>(fun_result_sexp);\n+    });\n+\n+    if (!fun_result.ok()) {\n+      return fun_result.status();\n+    }\n+\n+    result->value.emplace<std::shared_ptr<arrow::ArrayData>>(\n+        fun_result.ValueUnsafe()->data());\n+    return arrow::Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<arrow::Schema> input_types_;\n+  std::shared_ptr<arrow::DataType> output_type_;\n+  cpp11::function fun_;\n+};\n+\n+// [[arrow::export]]\n+void RegisterScalarUDF(std::string name, cpp11::sexp fun) {\n+  const arrow::compute::FunctionDoc dummy_function_doc{\n+      \"A user-defined R function\", \"returns something\", {\"...\"}};\n+\n+  auto func = std::make_shared<arrow::compute::ScalarFunction>(\n+      name, arrow::compute::Arity::VarArgs(), dummy_function_doc);\n\nReview Comment:\n   I'm not aware of any way to access the value of function documentation in the R bindings, so it would be a little weird to document it in the query engine itself (more likely would be that the package registering the function would provide their own R wrapper and document that).\n\n\n\n",
                    "created": "2022-06-20T10:17:20.361+0000",
                    "updated": "2022-06-20T10:17:20.361+0000",
                    "started": "2022-06-20T10:17:20.361+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782930",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/782932",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901502171\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,90 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    std::vector<std::shared_ptr<arrow::Array>> array_args;\n+    for (int64_t i = 0; i < span.num_values(); i++) {\n+      const arrow::compute::ExecValue& v = span[i];\n+      if (v.is_array()) {\n+        array_args.push_back(v.array.ToArray());\n+      } else if (v.is_scalar()) {\n+        auto array = ValueOrStop(arrow::MakeArrayFromScalar(*v.scalar, span.length));\n+        array_args.push_back(array);\n+      }\n+    }\n+\n+    auto batch = arrow::RecordBatch::Make(input_types_, span.length, array_args);\n+\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::sexp batch_sexp = cpp11::to_r6<arrow::RecordBatch>(batch);\n+      cpp11::sexp batch_length_sexp = cpp11::as_sexp(span.length);\n+\n+      cpp11::writable::list udf_context = {batch_length_sexp};\n+      udf_context.names() = {\"batch_length\"};\n+\n+      cpp11::sexp fun_result_sexp = fun_(udf_context, batch_sexp);\n+      if (!Rf_inherits(fun_result_sexp, \"Array\")) {\n+        cpp11::stop(\"arrow_scalar_function must return an Array\");\n+      }\n+\n+      return cpp11::as_cpp<std::shared_ptr<arrow::Array>>(fun_result_sexp);\n+    });\n+\n+    if (!fun_result.ok()) {\n+      return fun_result.status();\n+    }\n+\n+    result->value.emplace<std::shared_ptr<arrow::ArrayData>>(\n+        fun_result.ValueUnsafe()->data());\n+    return arrow::Status::OK();\n\nReview Comment:\n   @vibhatha Running this line causes later code to segfault...I don't *think* that my Array is the problem but I think that I might have the wrong incantation here with respect to how to put the result into the `arrow::compute::ExecResult* result`.\n\n\n\n",
                    "created": "2022-06-20T10:23:15.991+0000",
                    "updated": "2022-06-20T10:23:15.991+0000",
                    "started": "2022-06-20T10:23:15.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782932",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/782995",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901703174\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,90 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    std::vector<std::shared_ptr<arrow::Array>> array_args;\n+    for (int64_t i = 0; i < span.num_values(); i++) {\n+      const arrow::compute::ExecValue& v = span[i];\n+      if (v.is_array()) {\n+        array_args.push_back(v.array.ToArray());\n+      } else if (v.is_scalar()) {\n+        auto array = ValueOrStop(arrow::MakeArrayFromScalar(*v.scalar, span.length));\n+        array_args.push_back(array);\n+      }\n+    }\n+\n+    auto batch = arrow::RecordBatch::Make(input_types_, span.length, array_args);\n+\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::sexp batch_sexp = cpp11::to_r6<arrow::RecordBatch>(batch);\n+      cpp11::sexp batch_length_sexp = cpp11::as_sexp(span.length);\n+\n+      cpp11::writable::list udf_context = {batch_length_sexp};\n+      udf_context.names() = {\"batch_length\"};\n+\n+      cpp11::sexp fun_result_sexp = fun_(udf_context, batch_sexp);\n+      if (!Rf_inherits(fun_result_sexp, \"Array\")) {\n+        cpp11::stop(\"arrow_scalar_function must return an Array\");\n+      }\n+\n+      return cpp11::as_cpp<std::shared_ptr<arrow::Array>>(fun_result_sexp);\n+    });\n+\n+    if (!fun_result.ok()) {\n+      return fun_result.status();\n+    }\n+\n+    result->value.emplace<std::shared_ptr<arrow::ArrayData>>(\n+        fun_result.ValueUnsafe()->data());\n+    return arrow::Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<arrow::Schema> input_types_;\n+  std::shared_ptr<arrow::DataType> output_type_;\n+  cpp11::function fun_;\n+};\n+\n+// [[arrow::export]]\n+void RegisterScalarUDF(std::string name, cpp11::sexp fun) {\n+  const arrow::compute::FunctionDoc dummy_function_doc{\n+      \"A user-defined R function\", \"returns something\", {\"...\"}};\n+\n+  auto func = std::make_shared<arrow::compute::ScalarFunction>(\n+      name, arrow::compute::Arity::VarArgs(), dummy_function_doc);\n\nReview Comment:\n   @paleolimbot I am not quite sure about extracting the function doc in R as well. I was merely referring to a string passed as the function docs explicitly if required. In Python I was looking into the `inspect` API and it can help with this. For Python UDFs, I did a little bit of a check if we can use it to extract all the required values to register a UDF. It seems possible. I was just curious how it is planned to handle such things in R API. \n\n\n\n",
                    "created": "2022-06-20T14:08:46.875+0000",
                    "updated": "2022-06-20T14:08:46.875+0000",
                    "started": "2022-06-20T14:08:46.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782995",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901726142\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,90 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    std::vector<std::shared_ptr<arrow::Array>> array_args;\n+    for (int64_t i = 0; i < span.num_values(); i++) {\n+      const arrow::compute::ExecValue& v = span[i];\n+      if (v.is_array()) {\n+        array_args.push_back(v.array.ToArray());\n+      } else if (v.is_scalar()) {\n+        auto array = ValueOrStop(arrow::MakeArrayFromScalar(*v.scalar, span.length));\n+        array_args.push_back(array);\n+      }\n+    }\n+\n+    auto batch = arrow::RecordBatch::Make(input_types_, span.length, array_args);\n+\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::sexp batch_sexp = cpp11::to_r6<arrow::RecordBatch>(batch);\n+      cpp11::sexp batch_length_sexp = cpp11::as_sexp(span.length);\n+\n+      cpp11::writable::list udf_context = {batch_length_sexp};\n+      udf_context.names() = {\"batch_length\"};\n+\n+      cpp11::sexp fun_result_sexp = fun_(udf_context, batch_sexp);\n+      if (!Rf_inherits(fun_result_sexp, \"Array\")) {\n+        cpp11::stop(\"arrow_scalar_function must return an Array\");\n+      }\n+\n+      return cpp11::as_cpp<std::shared_ptr<arrow::Array>>(fun_result_sexp);\n+    });\n+\n+    if (!fun_result.ok()) {\n+      return fun_result.status();\n+    }\n+\n+    result->value.emplace<std::shared_ptr<arrow::ArrayData>>(\n+        fun_result.ValueUnsafe()->data());\n+    return arrow::Status::OK();\n\nReview Comment:\n   \ud83d\udc40 seems like it is from the new experimental API\n\n\n\n",
                    "created": "2022-06-20T14:24:53.906+0000",
                    "updated": "2022-06-20T14:24:53.906+0000",
                    "started": "2022-06-20T14:24:53.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783001",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901727265\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,90 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    std::vector<std::shared_ptr<arrow::Array>> array_args;\n+    for (int64_t i = 0; i < span.num_values(); i++) {\n+      const arrow::compute::ExecValue& v = span[i];\n+      if (v.is_array()) {\n+        array_args.push_back(v.array.ToArray());\n+      } else if (v.is_scalar()) {\n+        auto array = ValueOrStop(arrow::MakeArrayFromScalar(*v.scalar, span.length));\n+        array_args.push_back(array);\n+      }\n+    }\n+\n+    auto batch = arrow::RecordBatch::Make(input_types_, span.length, array_args);\n+\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::sexp batch_sexp = cpp11::to_r6<arrow::RecordBatch>(batch);\n+      cpp11::sexp batch_length_sexp = cpp11::as_sexp(span.length);\n+\n+      cpp11::writable::list udf_context = {batch_length_sexp};\n+      udf_context.names() = {\"batch_length\"};\n+\n+      cpp11::sexp fun_result_sexp = fun_(udf_context, batch_sexp);\n+      if (!Rf_inherits(fun_result_sexp, \"Array\")) {\n+        cpp11::stop(\"arrow_scalar_function must return an Array\");\n+      }\n+\n+      return cpp11::as_cpp<std::shared_ptr<arrow::Array>>(fun_result_sexp);\n+    });\n+\n+    if (!fun_result.ok()) {\n+      return fun_result.status();\n+    }\n+\n+    result->value.emplace<std::shared_ptr<arrow::ArrayData>>(\n+        fun_result.ValueUnsafe()->data());\n\nReview Comment:\n   ```suggestion\r\n       result->value =  std::move(fun_result->data());\r\n   ```\r\n   \r\n   Could this work?\n\n\n\n",
                    "created": "2022-06-20T14:25:33.920+0000",
                    "updated": "2022-06-20T14:25:33.920+0000",
                    "started": "2022-06-20T14:25:33.919+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783002",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783006",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901738163\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,90 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    std::vector<std::shared_ptr<arrow::Array>> array_args;\n+    for (int64_t i = 0; i < span.num_values(); i++) {\n+      const arrow::compute::ExecValue& v = span[i];\n+      if (v.is_array()) {\n+        array_args.push_back(v.array.ToArray());\n+      } else if (v.is_scalar()) {\n+        auto array = ValueOrStop(arrow::MakeArrayFromScalar(*v.scalar, span.length));\n+        array_args.push_back(array);\n+      }\n+    }\n+\n+    auto batch = arrow::RecordBatch::Make(input_types_, span.length, array_args);\n+\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::sexp batch_sexp = cpp11::to_r6<arrow::RecordBatch>(batch);\n+      cpp11::sexp batch_length_sexp = cpp11::as_sexp(span.length);\n+\n+      cpp11::writable::list udf_context = {batch_length_sexp};\n+      udf_context.names() = {\"batch_length\"};\n+\n+      cpp11::sexp fun_result_sexp = fun_(udf_context, batch_sexp);\n+      if (!Rf_inherits(fun_result_sexp, \"Array\")) {\n+        cpp11::stop(\"arrow_scalar_function must return an Array\");\n+      }\n+\n+      return cpp11::as_cpp<std::shared_ptr<arrow::Array>>(fun_result_sexp);\n+    });\n+\n+    if (!fun_result.ok()) {\n+      return fun_result.status();\n+    }\n+\n+    result->value.emplace<std::shared_ptr<arrow::ArrayData>>(\n+        fun_result.ValueUnsafe()->data());\n+    return arrow::Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<arrow::Schema> input_types_;\n+  std::shared_ptr<arrow::DataType> output_type_;\n+  cpp11::function fun_;\n+};\n+\n+// [[arrow::export]]\n+void RegisterScalarUDF(std::string name, cpp11::sexp fun) {\n+  const arrow::compute::FunctionDoc dummy_function_doc{\n+      \"A user-defined R function\", \"returns something\", {\"...\"}};\n+\n+  auto func = std::make_shared<arrow::compute::ScalarFunction>(\n+      name, arrow::compute::Arity::VarArgs(), dummy_function_doc);\n\nReview Comment:\n   In what circumstance would the function documentation at the query engine level be useful? (Unless there is such a circumstance, I think including it in the R bindings is not necessary).\n\n\n\n",
                    "created": "2022-06-20T14:32:34.767+0000",
                    "updated": "2022-06-20T14:32:34.767+0000",
                    "started": "2022-06-20T14:32:34.767+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783006",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901754257\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,90 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    std::vector<std::shared_ptr<arrow::Array>> array_args;\n+    for (int64_t i = 0; i < span.num_values(); i++) {\n+      const arrow::compute::ExecValue& v = span[i];\n+      if (v.is_array()) {\n+        array_args.push_back(v.array.ToArray());\n+      } else if (v.is_scalar()) {\n+        auto array = ValueOrStop(arrow::MakeArrayFromScalar(*v.scalar, span.length));\n+        array_args.push_back(array);\n+      }\n+    }\n+\n+    auto batch = arrow::RecordBatch::Make(input_types_, span.length, array_args);\n+\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::sexp batch_sexp = cpp11::to_r6<arrow::RecordBatch>(batch);\n+      cpp11::sexp batch_length_sexp = cpp11::as_sexp(span.length);\n+\n+      cpp11::writable::list udf_context = {batch_length_sexp};\n+      udf_context.names() = {\"batch_length\"};\n+\n+      cpp11::sexp fun_result_sexp = fun_(udf_context, batch_sexp);\n+      if (!Rf_inherits(fun_result_sexp, \"Array\")) {\n+        cpp11::stop(\"arrow_scalar_function must return an Array\");\n+      }\n+\n+      return cpp11::as_cpp<std::shared_ptr<arrow::Array>>(fun_result_sexp);\n+    });\n+\n+    if (!fun_result.ok()) {\n+      return fun_result.status();\n+    }\n+\n+    result->value.emplace<std::shared_ptr<arrow::ArrayData>>(\n+        fun_result.ValueUnsafe()->data());\n+    return arrow::Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<arrow::Schema> input_types_;\n+  std::shared_ptr<arrow::DataType> output_type_;\n+  cpp11::function fun_;\n+};\n+\n+// [[arrow::export]]\n+void RegisterScalarUDF(std::string name, cpp11::sexp fun) {\n+  const arrow::compute::FunctionDoc dummy_function_doc{\n+      \"A user-defined R function\", \"returns something\", {\"...\"}};\n+\n+  auto func = std::make_shared<arrow::compute::ScalarFunction>(\n+      name, arrow::compute::Arity::VarArgs(), dummy_function_doc);\n\nReview Comment:\n   In my understanding, the function docs are used at the function registration step. I am not quite sure if the query engine cares much about it. It would be the compute API which is the interested party. For example this is how it is used in [Python UDFs](https://github.com/apache/arrow/blob/207d328565b65b2c916ec17bc57f29b0c6fc8e8f/python/pyarrow/tests/test_udf.py#L44).\n\n\n\n",
                    "created": "2022-06-20T14:45:01.349+0000",
                    "updated": "2022-06-20T14:45:01.349+0000",
                    "started": "2022-06-20T14:45:01.349+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783011",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901756134\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,90 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    std::vector<std::shared_ptr<arrow::Array>> array_args;\n+    for (int64_t i = 0; i < span.num_values(); i++) {\n+      const arrow::compute::ExecValue& v = span[i];\n+      if (v.is_array()) {\n+        array_args.push_back(v.array.ToArray());\n+      } else if (v.is_scalar()) {\n+        auto array = ValueOrStop(arrow::MakeArrayFromScalar(*v.scalar, span.length));\n+        array_args.push_back(array);\n+      }\n+    }\n+\n+    auto batch = arrow::RecordBatch::Make(input_types_, span.length, array_args);\n+\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::sexp batch_sexp = cpp11::to_r6<arrow::RecordBatch>(batch);\n+      cpp11::sexp batch_length_sexp = cpp11::as_sexp(span.length);\n+\n+      cpp11::writable::list udf_context = {batch_length_sexp};\n+      udf_context.names() = {\"batch_length\"};\n+\n+      cpp11::sexp fun_result_sexp = fun_(udf_context, batch_sexp);\n+      if (!Rf_inherits(fun_result_sexp, \"Array\")) {\n+        cpp11::stop(\"arrow_scalar_function must return an Array\");\n+      }\n+\n+      return cpp11::as_cpp<std::shared_ptr<arrow::Array>>(fun_result_sexp);\n+    });\n+\n+    if (!fun_result.ok()) {\n+      return fun_result.status();\n+    }\n+\n+    result->value.emplace<std::shared_ptr<arrow::ArrayData>>(\n+        fun_result.ValueUnsafe()->data());\n+    return arrow::Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<arrow::Schema> input_types_;\n+  std::shared_ptr<arrow::DataType> output_type_;\n+  cpp11::function fun_;\n+};\n+\n+// [[arrow::export]]\n+void RegisterScalarUDF(std::string name, cpp11::sexp fun) {\n+  const arrow::compute::FunctionDoc dummy_function_doc{\n+      \"A user-defined R function\", \"returns something\", {\"...\"}};\n+\n+  auto func = std::make_shared<arrow::compute::ScalarFunction>(\n+      name, arrow::compute::Arity::VarArgs(), dummy_function_doc);\n\nReview Comment:\n   This might be out of scope, but what would should be done when a R user wants to register a custom function. What is the workflow? I am working on the Python UDFs and it would be great to learn a few things from this PR.\n\n\n\n",
                    "created": "2022-06-20T14:46:56.704+0000",
                    "updated": "2022-06-20T14:46:56.704+0000",
                    "started": "2022-06-20T14:46:56.704+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783012",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901797241\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,90 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    std::vector<std::shared_ptr<arrow::Array>> array_args;\n+    for (int64_t i = 0; i < span.num_values(); i++) {\n+      const arrow::compute::ExecValue& v = span[i];\n+      if (v.is_array()) {\n+        array_args.push_back(v.array.ToArray());\n+      } else if (v.is_scalar()) {\n+        auto array = ValueOrStop(arrow::MakeArrayFromScalar(*v.scalar, span.length));\n+        array_args.push_back(array);\n+      }\n+    }\n+\n+    auto batch = arrow::RecordBatch::Make(input_types_, span.length, array_args);\n+\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::sexp batch_sexp = cpp11::to_r6<arrow::RecordBatch>(batch);\n+      cpp11::sexp batch_length_sexp = cpp11::as_sexp(span.length);\n+\n+      cpp11::writable::list udf_context = {batch_length_sexp};\n+      udf_context.names() = {\"batch_length\"};\n+\n+      cpp11::sexp fun_result_sexp = fun_(udf_context, batch_sexp);\n+      if (!Rf_inherits(fun_result_sexp, \"Array\")) {\n+        cpp11::stop(\"arrow_scalar_function must return an Array\");\n+      }\n+\n+      return cpp11::as_cpp<std::shared_ptr<arrow::Array>>(fun_result_sexp);\n+    });\n+\n+    if (!fun_result.ok()) {\n+      return fun_result.status();\n+    }\n+\n+    result->value.emplace<std::shared_ptr<arrow::ArrayData>>(\n+        fun_result.ValueUnsafe()->data());\n\nReview Comment:\n   Seems like this doesn't work. Let me check.\n\n\n\n",
                    "created": "2022-06-20T15:31:46.442+0000",
                    "updated": "2022-06-20T15:31:46.442+0000",
                    "started": "2022-06-20T15:31:46.442+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783032",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901812656\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,89 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    std::vector<std::shared_ptr<arrow::Array>> array_args;\n+    for (int64_t i = 0; i < span.num_values(); i++) {\n+      const arrow::compute::ExecValue& v = span[i];\n+      if (v.is_array()) {\n+        array_args.push_back(v.array.ToArray());\n+      } else if (v.is_scalar()) {\n+        auto array = ValueOrStop(arrow::MakeArrayFromScalar(*v.scalar, span.length));\n+        array_args.push_back(array);\n+      }\n+    }\n+\n+    auto batch = arrow::RecordBatch::Make(input_types_, span.length, array_args);\n+\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::sexp batch_sexp = cpp11::to_r6<arrow::RecordBatch>(batch);\n+      cpp11::sexp batch_length_sexp = cpp11::as_sexp(span.length);\n+\n+      cpp11::writable::list udf_context = {batch_length_sexp};\n+      udf_context.names() = {\"batch_length\"};\n+\n+      cpp11::sexp fun_result_sexp = fun_(udf_context, batch_sexp);\n+      if (!Rf_inherits(fun_result_sexp, \"Array\")) {\n+        cpp11::stop(\"arrow_scalar_function must return an Array\");\n+      }\n+\n+      return cpp11::as_cpp<std::shared_ptr<arrow::Array>>(fun_result_sexp);\n+    });\n+\n+    if (!fun_result.ok()) {\n+      return fun_result.status();\n+    }\n+\n+    result->value =  std::move(fun_result->data());\n\nReview Comment:\n   ```suggestion\r\n       result->value =  std::move(ValueOrStop(fun_result)->data());\r\n   ```\r\n   \r\n   I tried this on my Mac M1 and it compiled fine and test cases passed.\n\n\n\n",
                    "created": "2022-06-20T15:50:13.740+0000",
                    "updated": "2022-06-20T15:50:13.740+0000",
                    "started": "2022-06-20T15:50:13.740+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783040",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901813267\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,89 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    std::vector<std::shared_ptr<arrow::Array>> array_args;\n+    for (int64_t i = 0; i < span.num_values(); i++) {\n+      const arrow::compute::ExecValue& v = span[i];\n+      if (v.is_array()) {\n+        array_args.push_back(v.array.ToArray());\n+      } else if (v.is_scalar()) {\n+        auto array = ValueOrStop(arrow::MakeArrayFromScalar(*v.scalar, span.length));\n+        array_args.push_back(array);\n+      }\n+    }\n+\n+    auto batch = arrow::RecordBatch::Make(input_types_, span.length, array_args);\n+\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::sexp batch_sexp = cpp11::to_r6<arrow::RecordBatch>(batch);\n+      cpp11::sexp batch_length_sexp = cpp11::as_sexp(span.length);\n+\n+      cpp11::writable::list udf_context = {batch_length_sexp};\n+      udf_context.names() = {\"batch_length\"};\n+\n+      cpp11::sexp fun_result_sexp = fun_(udf_context, batch_sexp);\n+      if (!Rf_inherits(fun_result_sexp, \"Array\")) {\n+        cpp11::stop(\"arrow_scalar_function must return an Array\");\n+      }\n+\n+      return cpp11::as_cpp<std::shared_ptr<arrow::Array>>(fun_result_sexp);\n+    });\n+\n+    if (!fun_result.ok()) {\n+      return fun_result.status();\n+    }\n+\n+    result->value =  std::move(fun_result->data());\n\nReview Comment:\n   Can you try this locally and see if it works?\n\n\n\n",
                    "created": "2022-06-20T15:51:03.705+0000",
                    "updated": "2022-06-20T15:51:03.705+0000",
                    "started": "2022-06-20T15:51:03.705+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783041",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783042",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#issuecomment-1160611988\n\n   Another comment on the function registration is that if you try to run the test cases twice, you will get a test failure saying the function is already registered. In R, is there a way to scope the test case such that the changed function registry doesn't affect the following test cases. I guess at some point the function unregistration needs to be handled. Or there is an [interesting discussion going on about it in another PR](https://github.com/apache/arrow/pull/13375#issuecomment-1156905723). \n\n\n",
                    "created": "2022-06-20T15:54:45.565+0000",
                    "updated": "2022-06-20T15:54:45.565+0000",
                    "started": "2022-06-20T15:54:45.565+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783042",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#issuecomment-1160624867\n\n   Experienced this in the interactive session. \n\n\n",
                    "created": "2022-06-20T16:07:09.849+0000",
                    "updated": "2022-06-20T16:07:09.849+0000",
                    "started": "2022-06-20T16:07:09.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783050",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783105",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#issuecomment-1160707504\n\n   All good points and thank you for taking a look! Your edit did the trick, although the segfault may have been due to something about turning a `Scalar` into an `Array`:\r\n   \r\n   ``` r\r\n   # remotes::install_github(\"apache/arrow/r#13397\")\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   fun <- arrow:::arrow_scalar_function(\r\n     int32(),\r\n     int64(),\r\n     function(x, y) {\r\n       y[[1]]$cast(int64())\r\n     }\r\n   )\r\n   \r\n   arrow:::register_scalar_function(\"my_test_scalar_function\", fun)\r\n   \r\n   # works!\r\n   call_function(\"my_test_scalar_function\", Array$create(1L))\r\n   #> Array\r\n   #> <int64>\r\n   #> [\r\n   #>   1\r\n   #> ]\r\n   \r\n   # segfaults!\r\n   # call_function(\"my_test_scalar_function\", Scalar$create(1L))\r\n   ```\r\n   \r\n   <sup>Created on 2022-06-20 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\r\n   \r\n   > you will get a test failure saying the function is already registered\r\n   \r\n   It seems there's no way to unregister a function...if there were, I could unregister it in the test. I changed the `AddFunction()` call to overwrite the existing function for now but that's probably not a good long-term choice.\r\n   \r\n    \n\n\n",
                    "created": "2022-06-20T17:50:44.390+0000",
                    "updated": "2022-06-20T17:50:44.390+0000",
                    "started": "2022-06-20T17:50:44.390+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783105",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#issuecomment-1160708575\n\n   I probably shouldn't be turning Scalar into an Array anyway (i.e., I should probably just do what the Python UDFs do and pass a `list()` of arguments).\n\n\n",
                    "created": "2022-06-20T17:52:15.992+0000",
                    "updated": "2022-06-20T17:52:15.992+0000",
                    "started": "2022-06-20T17:52:15.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783106",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901938320\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,90 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    std::vector<std::shared_ptr<arrow::Array>> array_args;\n+    for (int64_t i = 0; i < span.num_values(); i++) {\n+      const arrow::compute::ExecValue& v = span[i];\n+      if (v.is_array()) {\n+        array_args.push_back(v.array.ToArray());\n+      } else if (v.is_scalar()) {\n+        auto array = ValueOrStop(arrow::MakeArrayFromScalar(*v.scalar, span.length));\n+        array_args.push_back(array);\n+      }\n+    }\n+\n+    auto batch = arrow::RecordBatch::Make(input_types_, span.length, array_args);\n+\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::sexp batch_sexp = cpp11::to_r6<arrow::RecordBatch>(batch);\n+      cpp11::sexp batch_length_sexp = cpp11::as_sexp(span.length);\n+\n+      cpp11::writable::list udf_context = {batch_length_sexp};\n+      udf_context.names() = {\"batch_length\"};\n+\n+      cpp11::sexp fun_result_sexp = fun_(udf_context, batch_sexp);\n+      if (!Rf_inherits(fun_result_sexp, \"Array\")) {\n+        cpp11::stop(\"arrow_scalar_function must return an Array\");\n+      }\n+\n+      return cpp11::as_cpp<std::shared_ptr<arrow::Array>>(fun_result_sexp);\n+    });\n+\n+    if (!fun_result.ok()) {\n+      return fun_result.status();\n+    }\n+\n+    result->value.emplace<std::shared_ptr<arrow::ArrayData>>(\n+        fun_result.ValueUnsafe()->data());\n+    return arrow::Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<arrow::Schema> input_types_;\n+  std::shared_ptr<arrow::DataType> output_type_;\n+  cpp11::function fun_;\n+};\n+\n+// [[arrow::export]]\n+void RegisterScalarUDF(std::string name, cpp11::sexp fun) {\n+  const arrow::compute::FunctionDoc dummy_function_doc{\n+      \"A user-defined R function\", \"returns something\", {\"...\"}};\n+\n+  auto func = std::make_shared<arrow::compute::ScalarFunction>(\n+      name, arrow::compute::Arity::VarArgs(), dummy_function_doc);\n\nReview Comment:\n   I did see that the function docs are a required argument when creating a function and I saw the example in the Python UDFs that creates the documentation object. I think that the function documentation might be helpful for internal functions but for R and Python UDFs I think it unlikely that the documentation will ever be used. Until the feature is requested I'm inclined to leave the dummy function documentation instead of requiring a user to create it.\n   \n   > what would should be done when a R user wants to register a custom function.\n   \n   Give me another day or so to work on this...I'll ping you when I have a better idea!\n\n\n\n",
                    "created": "2022-06-20T18:52:19.746+0000",
                    "updated": "2022-06-20T18:52:19.746+0000",
                    "started": "2022-06-20T18:52:19.745+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783117",
                    "issueId": "13442971"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/worklog/783121",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #13397:\nURL: https://github.com/apache/arrow/pull/13397#discussion_r901950361\n\n\n##########\nr/src/compute.cpp:\n##########\n@@ -574,3 +576,89 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n std::vector<std::string> compute__GetFunctionNames() {\n   return arrow::compute::GetFunctionRegistry()->GetFunctionNames();\n }\n+\n+class RScalarUDFCallable : public arrow::compute::ArrayKernelExec {\n+ public:\n+  RScalarUDFCallable(const std::shared_ptr<arrow::Schema>& input_types,\n+                     const std::shared_ptr<arrow::DataType>& output_type, cpp11::sexp fun)\n+      : input_types_(input_types), output_type_(output_type), fun_(fun) {}\n+\n+  arrow::Status operator()(arrow::compute::KernelContext* context,\n+                           const arrow::compute::ExecSpan& span,\n+                           arrow::compute::ExecResult* result) {\n+    auto fun_result = SafeCallIntoR<std::shared_ptr<arrow::Array>>([&]() {\n+      cpp11::writable::list args_sexp;\n+      args_sexp.reserve(span.num_values());\n+\n+      for (int64_t i = 0; i < span.num_values(); i++) {\n+        const arrow::compute::ExecValue& v = span[i];\n+        if (v.is_array()) {\n+          std::shared_ptr<arrow::Array> array = v.array.ToArray();\n+          args_sexp.push_back(cpp11::to_r6<arrow::Array>(array));\n+        } else if (v.is_scalar()) {\n+          std::shared_ptr<const arrow::Scalar> scalar = v.scalar->shared_from_this();\n+          args_sexp.push_back(cpp11::to_r6<const arrow::Scalar>(scalar));\n\nReview Comment:\n   Something about this is giving me a segfault...is this the proper way to to get a shared pointer to a Scalar from an ExecValue?\n\n\n\n",
                    "created": "2022-06-20T19:18:11.886+0000",
                    "updated": "2022-06-20T19:18:11.886+0000",
                    "started": "2022-06-20T19:18:11.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783121",
                    "issueId": "13442971"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 96000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2adbc992[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7bee5d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1310c2a3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4cc6cf9a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d3e9013[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@52b65212[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4726973d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3d663a5c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64819beb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4c763ab[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@772b9371[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7b13e312[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 96000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jul 22 12:24:47 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-07-22T12:24:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16444/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-05-03T13:43:18.000+0000",
        "updated": "2022-07-23T14:21:23.000+0000",
        "timeoriginalestimate": null,
        "description": "In ARROW-15639, user-defined (scalar) functions were implemented for Python. In ARROW-15841 and ARROW-15168 we developed some tooling and strategies for calling into R from non-R threads, so in theory we should be able to mirror the Python implementation (possibly with the constraint that we have to provide a way to return a {{Table}} instead of a {{RecordBatchReader}} if there are any user-defined functions, otherwise we can't guarantee the existence of an event loop to do the R evaluating?).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "26h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 96000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Implement user-defined scalar functions in R bindings",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442971/comment/17569987",
                    "id": "17569987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "Issue resolved by pull request 13397\n[https://github.com/apache/arrow/pull/13397]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-07-22T12:24:47.827+0000",
                    "updated": "2022-07-22T12:24:47.827+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z120x4:",
        "customfield_12314139": null
    }
}