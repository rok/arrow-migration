{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13247988",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988",
    "key": "ARROW-6077",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12566913",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12566913",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13187263",
                    "key": "ARROW-3325",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187263",
                    "fields": {
                        "summary": "[Python] Support reading Parquet binary/string columns directly as DictionaryArray",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6077/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 31,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/285463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971\n \n \n   Introduces auxiliary internal `SchemaManifest` and `SchemaField` data structures. \r\n   \r\n   This also permits dictionary-encoded subfields in a slightly more principled way (the dictionary type creation is resolved one time, so this removes the `FixSchema` hacks that were there before). I rewrote the nested schema conversion logic to hopefully be slightly easier to follow though it could still use some work. I added comments within to explain the 3 different styles of list encoding\r\n   \r\n   This patch was pretty unpleasant to do -- it removes some hacky functions used to create Arrow fields with leaf nodes trimmed. There is little functional change; it is an attempt to bring a cleaner structure for full-fledged nested data reading\r\n   \r\n   I'm going to get on with seeing through user-facing dictionary-encoding functionality in Python\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T03:01:58.015+0000",
                    "updated": "2019-07-31T03:01:58.015+0000",
                    "started": "2019-07-31T03:01:58.013+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "285463",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#issuecomment-516971951\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=h1) Report\n   > Merging [#4971](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/803dd89463cb6cfdeffb8ae4bb1555b75ca1b544?src=pr&el=desc) will **increase** coverage by `1.6%`.\n   > The diff coverage is `91.34%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4971/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4971      +/-   ##\n   ==========================================\n   + Coverage   87.55%   89.15%    +1.6%     \n   ==========================================\n     Files        1000      723     -277     \n     Lines      142303   101705   -40598     \n     Branches     1418        0    -1418     \n   ==========================================\n   - Hits       124589    90678   -33911     \n   + Misses      17352    11027    -6325     \n   + Partials      362        0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/parquet/arrow/writer.h](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3dyaXRlci5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/arrow/schema.cc](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3NjaGVtYS5jYw==) | `93.21% <\u00f8> (+2.24%)` | :arrow_up: |\n   | [cpp/src/parquet/arrow/reader.h](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3JlYWRlci5o) | `91.66% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/schema.h](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L3NjaGVtYS5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/schema-internal.h](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L3NjaGVtYS1pbnRlcm5hbC5o) | `100% <\u00f8> (+3.44%)` | :arrow_up: |\n   | [r/R/arrowExports.R](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-ci9SL2Fycm93RXhwb3J0cy5S) | `71.12% <100%> (+0.29%)` | :arrow_up: |\n   | [cpp/src/parquet/file\\_writer.cc](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2ZpbGVfd3JpdGVyLmNj) | `81.21% <100%> (-1.02%)` | :arrow_down: |\n   | [r/src/arrowExports.cpp](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-ci9zcmMvYXJyb3dFeHBvcnRzLmNwcA==) | `70.91% <100%> (+0.33%)` | :arrow_up: |\n   | [r/src/parquet.cpp](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-ci9zcmMvcGFycXVldC5jcHA=) | `70.58% <100%> (+7.43%)` | :arrow_up: |\n   | [r/R/parquet.R](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-ci9SL3BhcnF1ZXQuUg==) | `72% <50%> (+5.33%)` | :arrow_up: |\n   | ... and [305 more](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=footer). Last update [803dd89...a5187c2](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T18:42:51.814+0000",
                    "updated": "2019-07-31T18:42:51.814+0000",
                    "started": "2019-07-31T18:42:51.813+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286143",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286144",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#issuecomment-516971951\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=h1) Report\n   > Merging [#4971](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/803dd89463cb6cfdeffb8ae4bb1555b75ca1b544?src=pr&el=desc) will **increase** coverage by `1.6%`.\n   > The diff coverage is `91.34%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4971/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4971      +/-   ##\n   ==========================================\n   + Coverage   87.55%   89.15%    +1.6%     \n   ==========================================\n     Files        1000      723     -277     \n     Lines      142303   101705   -40598     \n     Branches     1418        0    -1418     \n   ==========================================\n   - Hits       124589    90678   -33911     \n   + Misses      17352    11027    -6325     \n   + Partials      362        0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/parquet/arrow/writer.h](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3dyaXRlci5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/arrow/schema.cc](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3NjaGVtYS5jYw==) | `93.21% <\u00f8> (+2.24%)` | :arrow_up: |\n   | [cpp/src/parquet/arrow/reader.h](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3JlYWRlci5o) | `91.66% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/schema.h](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L3NjaGVtYS5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/schema-internal.h](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L3NjaGVtYS1pbnRlcm5hbC5o) | `100% <\u00f8> (+3.44%)` | :arrow_up: |\n   | [r/R/arrowExports.R](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-ci9SL2Fycm93RXhwb3J0cy5S) | `71.12% <100%> (+0.29%)` | :arrow_up: |\n   | [cpp/src/parquet/file\\_writer.cc](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2ZpbGVfd3JpdGVyLmNj) | `81.21% <100%> (-1.02%)` | :arrow_down: |\n   | [r/src/arrowExports.cpp](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-ci9zcmMvYXJyb3dFeHBvcnRzLmNwcA==) | `70.91% <100%> (+0.33%)` | :arrow_up: |\n   | [r/src/parquet.cpp](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-ci9zcmMvcGFycXVldC5jcHA=) | `70.58% <100%> (+7.43%)` | :arrow_up: |\n   | [r/R/parquet.R](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree#diff-ci9SL3BhcnF1ZXQuUg==) | `72% <50%> (+5.33%)` | :arrow_up: |\n   | ... and [305 more](https://codecov.io/gh/apache/arrow/pull/4971/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=footer). Last update [803dd89...a5187c2](https://codecov.io/gh/apache/arrow/pull/4971?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-31T18:43:14.558+0000",
                    "updated": "2019-07-31T18:43:14.558+0000",
                    "started": "2019-07-31T18:43:14.557+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286144",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#issuecomment-517272074\n \n \n   Looks like I have to rebase. Any thoughts about this? I need to stack my patches on top\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T12:47:24.024+0000",
                    "updated": "2019-08-01T12:47:24.024+0000",
                    "started": "2019-08-01T12:47:24.023+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286688",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#issuecomment-517284549\n \n \n   @wesm I have a pending review I started yesterday night, let me complete this morning (lot to review!)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T13:19:22.017+0000",
                    "updated": "2019-08-01T13:19:22.017+0000",
                    "started": "2019-08-01T13:19:22.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286703",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286740",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#issuecomment-517318598\n \n \n   Okay. Quite a bit code has been moved around relatively unmodified so please refrain from commenting on old code. Thanks =) \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T14:44:07.941+0000",
                    "updated": "2019-08-01T14:44:07.941+0000",
                    "started": "2019-08-01T14:44:07.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286740",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286751",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#issuecomment-517322219\n \n \n   I'll try to, github review interface does not make this easy to do :)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T14:52:59.112+0000",
                    "updated": "2019-08-01T14:52:59.112+0000",
                    "started": "2019-08-01T14:52:59.111+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286751",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "hatemhelal commented on issue #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#issuecomment-517354135\n \n \n   I had a read through and looked good to me.  I think this or your previous refactoring PR might have fixed [ARROW-6005](https://issues.apache.org/jira/browse/ARROW-6005).  I'll plan to use that issue to add some unittests for that particular workflow. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T16:09:26.738+0000",
                    "updated": "2019-08-01T16:09:26.738+0000",
                    "started": "2019-08-01T16:09:26.737+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286798",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286802",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "hatemhelal commented on pull request #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#discussion_r309782162\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -178,16 +685,13 @@ std::shared_ptr<ChunkedArray> CastChunksTo(\n }\n \n Status TransferDictionary(RecordReader* reader,\n-                          const std::shared_ptr<DataType>& logical_value_type,\n+                          std::shared_ptr<DataType> logical_value_type,\n \n Review comment:\n   I found this change from passing by const ref to value threw me a bit.  Could warrant a comment?  Or does it make sense to keep the signature as accepting a const ref and move this:\r\n   ```\r\n   ::arrow::dictionary(::arrow::int32(), logical_value_type)\r\n   ``` \r\n   into `TransferDictionary`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T16:14:57.278+0000",
                    "updated": "2019-08-01T16:14:57.278+0000",
                    "started": "2019-08-01T16:14:57.277+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286802",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286803",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "hatemhelal commented on pull request #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#discussion_r309783092\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -55,17 +59,520 @@ using arrow::TimestampArray;\n using arrow::compute::Datum;\n \n using ::arrow::BitUtil::FromBigEndian;\n+using ::arrow::internal::checked_cast;\n using ::arrow::internal::SafeLeftShift;\n using ::arrow::util::SafeLoadAs;\n \n using parquet::internal::RecordReader;\n+using parquet::schema::GroupNode;\n+using parquet::schema::Node;\n+using parquet::schema::PrimitiveNode;\n+using ParquetType = parquet::Type;\n \n namespace parquet {\n namespace arrow {\n \n template <typename ArrowType>\n using ArrayType = typename ::arrow::TypeTraits<ArrowType>::ArrayType;\n \n+// ----------------------------------------------------------------------\n+// Schema logic\n+\n+static Status MakeArrowDecimal(const LogicalType& logical_type,\n+                               std::shared_ptr<DataType>* out) {\n+  const auto& decimal = checked_cast<const DecimalLogicalType&>(logical_type);\n+  *out = ::arrow::decimal(decimal.precision(), decimal.scale());\n+  return Status::OK();\n+}\n+\n+static Status MakeArrowInt(const LogicalType& logical_type,\n+                           std::shared_ptr<DataType>* out) {\n+  const auto& integer = checked_cast<const IntLogicalType&>(logical_type);\n+  switch (integer.bit_width()) {\n+    case 8:\n+      *out = integer.is_signed() ? ::arrow::int8() : ::arrow::uint8();\n+      break;\n+    case 16:\n+      *out = integer.is_signed() ? ::arrow::int16() : ::arrow::uint16();\n+      break;\n+    case 32:\n+      *out = integer.is_signed() ? ::arrow::int32() : ::arrow::uint32();\n+      break;\n+    default:\n+      return Status::TypeError(logical_type.ToString(),\n+                               \" can not annotate physical type Int32\");\n+  }\n+  return Status::OK();\n+}\n+\n+static Status MakeArrowInt64(const LogicalType& logical_type,\n+                             std::shared_ptr<DataType>* out) {\n+  const auto& integer = checked_cast<const IntLogicalType&>(logical_type);\n+  switch (integer.bit_width()) {\n+    case 64:\n+      *out = integer.is_signed() ? ::arrow::int64() : ::arrow::uint64();\n+      break;\n+    default:\n+      return Status::TypeError(logical_type.ToString(),\n+                               \" can not annotate physical type Int64\");\n+  }\n+  return Status::OK();\n+}\n+\n+static Status MakeArrowTime32(const LogicalType& logical_type,\n+                              std::shared_ptr<DataType>* out) {\n+  const auto& time = checked_cast<const TimeLogicalType&>(logical_type);\n+  switch (time.time_unit()) {\n+    case LogicalType::TimeUnit::MILLIS:\n+      *out = ::arrow::time32(::arrow::TimeUnit::MILLI);\n+      break;\n+    default:\n+      return Status::TypeError(logical_type.ToString(),\n+                               \" can not annotate physical type Time32\");\n+  }\n+  return Status::OK();\n+}\n+\n+static Status MakeArrowTime64(const LogicalType& logical_type,\n+                              std::shared_ptr<DataType>* out) {\n+  const auto& time = checked_cast<const TimeLogicalType&>(logical_type);\n+  switch (time.time_unit()) {\n+    case LogicalType::TimeUnit::MICROS:\n+      *out = ::arrow::time64(::arrow::TimeUnit::MICRO);\n+      break;\n+    case LogicalType::TimeUnit::NANOS:\n+      *out = ::arrow::time64(::arrow::TimeUnit::NANO);\n+      break;\n+    default:\n+      return Status::TypeError(logical_type.ToString(),\n+                               \" can not annotate physical type Time64\");\n+  }\n+  return Status::OK();\n+}\n+\n+static Status MakeArrowTimestamp(const LogicalType& logical_type,\n+                                 std::shared_ptr<DataType>* out) {\n+  const auto& timestamp = checked_cast<const TimestampLogicalType&>(logical_type);\n+  const bool utc_normalized =\n+      timestamp.is_from_converted_type() ? false : timestamp.is_adjusted_to_utc();\n+  static const char* utc_timezone = \"UTC\";\n+  switch (timestamp.time_unit()) {\n+    case LogicalType::TimeUnit::MILLIS:\n+      *out = (utc_normalized ? ::arrow::timestamp(::arrow::TimeUnit::MILLI, utc_timezone)\n+                             : ::arrow::timestamp(::arrow::TimeUnit::MILLI));\n+      break;\n+    case LogicalType::TimeUnit::MICROS:\n+      *out = (utc_normalized ? ::arrow::timestamp(::arrow::TimeUnit::MICRO, utc_timezone)\n+                             : ::arrow::timestamp(::arrow::TimeUnit::MICRO));\n+      break;\n+    case LogicalType::TimeUnit::NANOS:\n+      *out = (utc_normalized ? ::arrow::timestamp(::arrow::TimeUnit::NANO, utc_timezone)\n+                             : ::arrow::timestamp(::arrow::TimeUnit::NANO));\n+      break;\n+    default:\n+      return Status::TypeError(\"Unrecognized time unit in timestamp logical_type: \",\n+                               logical_type.ToString());\n+  }\n+  return Status::OK();\n+}\n+\n+static Status FromByteArray(const LogicalType& logical_type,\n+                            std::shared_ptr<DataType>* out) {\n+  switch (logical_type.type()) {\n+    case LogicalType::Type::STRING:\n+      *out = ::arrow::utf8();\n+      break;\n+    case LogicalType::Type::DECIMAL:\n+      RETURN_NOT_OK(MakeArrowDecimal(logical_type, out));\n+      break;\n+    case LogicalType::Type::NONE:\n+    case LogicalType::Type::ENUM:\n+    case LogicalType::Type::JSON:\n+    case LogicalType::Type::BSON:\n+      *out = ::arrow::binary();\n+      break;\n+    default:\n+      return Status::NotImplemented(\"Unhandled logical logical_type \",\n+                                    logical_type.ToString(), \" for binary array\");\n+  }\n+  return Status::OK();\n+}\n+\n+static Status FromFLBA(const LogicalType& logical_type, int32_t physical_length,\n+                       std::shared_ptr<DataType>* out) {\n+  switch (logical_type.type()) {\n+    case LogicalType::Type::DECIMAL:\n+      RETURN_NOT_OK(MakeArrowDecimal(logical_type, out));\n+      break;\n+    case LogicalType::Type::NONE:\n+    case LogicalType::Type::INTERVAL:\n+    case LogicalType::Type::UUID:\n+      *out = ::arrow::fixed_size_binary(physical_length);\n+      break;\n+    default:\n+      return Status::NotImplemented(\"Unhandled logical logical_type \",\n+                                    logical_type.ToString(),\n+                                    \" for fixed-length binary array\");\n+  }\n+\n+  return Status::OK();\n+}\n+\n+static Status FromInt32(const LogicalType& logical_type, std::shared_ptr<DataType>* out) {\n+  switch (logical_type.type()) {\n+    case LogicalType::Type::INT:\n+      RETURN_NOT_OK(MakeArrowInt(logical_type, out));\n+      break;\n+    case LogicalType::Type::DATE:\n+      *out = ::arrow::date32();\n+      break;\n+    case LogicalType::Type::TIME:\n+      RETURN_NOT_OK(MakeArrowTime32(logical_type, out));\n+      break;\n+    case LogicalType::Type::DECIMAL:\n+      RETURN_NOT_OK(MakeArrowDecimal(logical_type, out));\n+      break;\n+    case LogicalType::Type::NONE:\n+      *out = ::arrow::int32();\n+      break;\n+    default:\n+      return Status::NotImplemented(\"Unhandled logical type \", logical_type.ToString(),\n+                                    \" for INT32\");\n+  }\n+  return Status::OK();\n+}\n+\n+static Status FromInt64(const LogicalType& logical_type, std::shared_ptr<DataType>* out) {\n+  switch (logical_type.type()) {\n+    case LogicalType::Type::INT:\n+      RETURN_NOT_OK(MakeArrowInt64(logical_type, out));\n+      break;\n+    case LogicalType::Type::DECIMAL:\n+      RETURN_NOT_OK(MakeArrowDecimal(logical_type, out));\n+      break;\n+    case LogicalType::Type::TIMESTAMP:\n+      RETURN_NOT_OK(MakeArrowTimestamp(logical_type, out));\n+      break;\n+    case LogicalType::Type::TIME:\n+      RETURN_NOT_OK(MakeArrowTime64(logical_type, out));\n+      break;\n+    case LogicalType::Type::NONE:\n+      *out = ::arrow::int64();\n+      break;\n+    default:\n+      return Status::NotImplemented(\"Unhandled logical type \", logical_type.ToString(),\n+                                    \" for INT64\");\n+  }\n+  return Status::OK();\n+}\n+\n+Status GetPrimitiveType(const schema::PrimitiveNode& primitive,\n+                        std::shared_ptr<DataType>* out) {\n+  const std::shared_ptr<const LogicalType>& logical_type = primitive.logical_type();\n+  if (logical_type->is_invalid() || logical_type->is_null()) {\n+    *out = ::arrow::null();\n+    return Status::OK();\n+  }\n+\n+  switch (primitive.physical_type()) {\n+    case ParquetType::BOOLEAN:\n+      *out = ::arrow::boolean();\n+      break;\n+    case ParquetType::INT32:\n+      RETURN_NOT_OK(FromInt32(*logical_type, out));\n+      break;\n+    case ParquetType::INT64:\n+      RETURN_NOT_OK(FromInt64(*logical_type, out));\n+      break;\n+    case ParquetType::INT96:\n+      *out = ::arrow::timestamp(::arrow::TimeUnit::NANO);\n+      break;\n+    case ParquetType::FLOAT:\n+      *out = ::arrow::float32();\n+      break;\n+    case ParquetType::DOUBLE:\n+      *out = ::arrow::float64();\n+      break;\n+    case ParquetType::BYTE_ARRAY:\n+      RETURN_NOT_OK(FromByteArray(*logical_type, out));\n+      break;\n+    case ParquetType::FIXED_LEN_BYTE_ARRAY:\n+      RETURN_NOT_OK(FromFLBA(*logical_type, primitive.type_length(), out));\n+      break;\n+    default: {\n+      // PARQUET-1565: This can occur if the file is corrupt\n+      return Status::IOError(\"Invalid physical column type: \",\n+                             TypeToString(primitive.physical_type()));\n+    }\n+  }\n+  return Status::OK();\n+}\n+\n+struct SchemaTreeContext {\n+  SchemaManifest* manifest;\n+  ArrowReaderProperties properties;\n+  const SchemaDescriptor* schema;\n+\n+  void LinkParent(const SchemaField* child, const SchemaField* parent) {\n+    manifest->child_to_parent[child] = parent;\n+  }\n+\n+  void RecordLeaf(const SchemaField* leaf) {\n+    manifest->column_index_to_field[leaf->column_index] = leaf;\n+  }\n+};\n+\n+Status GetTypeForNode(int column_index, const schema::PrimitiveNode& primitive_node,\n+                      SchemaTreeContext* ctx, std::shared_ptr<DataType>* out) {\n+  std::shared_ptr<DataType> storage_type;\n+  RETURN_NOT_OK(GetPrimitiveType(primitive_node, &storage_type));\n+  if (ctx->properties.read_dictionary(column_index)) {\n+    *out = ::arrow::dictionary(::arrow::int32(), storage_type);\n+  } else {\n+    *out = storage_type;\n+  }\n+  return Status::OK();\n+}\n+\n+Status NodeToSchemaField(const Node& node, int16_t max_def_level, int16_t max_rep_level,\n+                         SchemaTreeContext* ctx, const SchemaField* parent,\n+                         SchemaField* out);\n+\n+Status GroupToSchemaField(const GroupNode& node, int16_t max_def_level,\n+                          int16_t max_rep_level, SchemaTreeContext* ctx,\n+                          const SchemaField* parent, SchemaField* out);\n+\n+Status PopulateLeaf(int column_index, const std::shared_ptr<Field>& field,\n+                    int16_t max_def_level, int16_t max_rep_level, SchemaTreeContext* ctx,\n+                    const SchemaField* parent, SchemaField* out) {\n+  out->field = field;\n+  out->column_index = column_index;\n+  out->max_definition_level = max_def_level;\n+  out->max_repetition_level = max_rep_level;\n+  ctx->RecordLeaf(out);\n+  ctx->LinkParent(out, parent);\n+  return Status::OK();\n+}\n+\n+inline bool EndswithTuple(const std::string& str) {\n \n Review comment:\n   I think this code was moved from elsewhere but you could replace this with `boost::algorithm::ends_with`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T16:17:09.373+0000",
                    "updated": "2019-08-01T16:17:09.373+0000",
                    "started": "2019-08-01T16:17:09.372+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286803",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#discussion_r309809446\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader.cc\n ##########\n @@ -77,124 +77,51 @@ namespace parquet {\n namespace arrow {\n \n class ColumnChunkReaderImpl;\n-class ColumnReaderImpl;\n \n-ArrowReaderProperties default_arrow_reader_properties() {\n-  static ArrowReaderProperties default_reader_props;\n-  return default_reader_props;\n-}\n-\n-// ----------------------------------------------------------------------\n-// Iteration utilities\n-\n-// Abstraction to decouple row group iteration details from the ColumnReader,\n-// so we can read only a single row group if we want\n-class FileColumnIterator {\n+class ColumnReaderImpl : public ColumnReader {\n  public:\n-  explicit FileColumnIterator(int column_index, ParquetFileReader* reader,\n-                              std::vector<int> row_groups)\n-      : column_index_(column_index),\n-        reader_(reader),\n-        schema_(reader->metadata()->schema()),\n-        row_groups_(row_groups.begin(), row_groups.end()) {}\n-\n-  virtual ~FileColumnIterator() {}\n-\n-  std::unique_ptr<::parquet::PageReader> NextChunk() {\n-    if (row_groups_.empty()) {\n-      return nullptr;\n-    }\n-\n-    auto row_group_reader = reader_->RowGroup(row_groups_.front());\n-    row_groups_.pop_front();\n-    return row_group_reader->GetColumnPageReader(column_index_);\n-  }\n-\n-  const SchemaDescriptor* schema() const { return schema_; }\n+  enum ReaderType { PRIMITIVE, LIST, STRUCT };\n \n-  const ColumnDescriptor* descr() const { return schema_->Column(column_index_); }\n-\n-  std::shared_ptr<FileMetaData> metadata() const { return reader_->metadata(); }\n+  virtual Status GetDefLevels(const int16_t** data, int64_t* length) = 0;\n+  virtual Status GetRepLevels(const int16_t** data, int64_t* length) = 0;\n+  virtual const std::shared_ptr<Field> field() = 0;\n \n-  int column_index() const { return column_index_; }\n+  virtual const ColumnDescriptor* descr() const = 0;\n \n- protected:\n-  int column_index_;\n-  ParquetFileReader* reader_;\n-  const SchemaDescriptor* schema_;\n-  std::deque<int> row_groups_;\n+  virtual ReaderType type() const = 0;\n };\n \n-using FileColumnIteratorFactory =\n-    std::function<FileColumnIterator*(int, ParquetFileReader*)>;\n-\n-class RowGroupRecordBatchReader : public ::arrow::RecordBatchReader {\n- public:\n-  explicit RowGroupRecordBatchReader(const std::vector<int>& row_group_indices,\n-                                     const std::vector<int>& column_indices,\n-                                     std::shared_ptr<::arrow::Schema> schema,\n-                                     FileReader* reader, int64_t batch_size)\n-      : column_readers_(),\n-        row_group_indices_(row_group_indices),\n-        column_indices_(column_indices),\n-        schema_(schema),\n-        file_reader_(reader),\n-        batch_size_(batch_size) {}\n-\n-  ~RowGroupRecordBatchReader() override {}\n-\n-  std::shared_ptr<::arrow::Schema> schema() const override { return schema_; }\n-\n-  Status ReadNext(std::shared_ptr<::arrow::RecordBatch>* out) override {\n-    if (column_readers_.empty()) {\n-      // Initialize the column readers\n-      column_readers_.reserve(column_indices_.size());\n-\n-      for (size_t i = 0; i < column_indices_.size(); ++i) {\n-        ColumnReaderPtr tmp;\n-        RETURN_NOT_OK(file_reader_->GetColumn(column_indices_[i], &tmp));\n-        column_readers_.emplace_back(std::move(tmp));\n-      }\n-    }\n-\n-    // TODO (hatemhelal): Consider refactoring this to share logic with ReadTable as this\n-    // does not currently honor the use_threads option.\n-    std::vector<std::shared_ptr<ChunkedArray>> columns(column_indices_.size());\n-\n-    for (size_t i = 0; i < column_indices_.size(); ++i) {\n-      RETURN_NOT_OK(column_readers_[i]->NextBatch(batch_size_, &columns[i]));\n-    }\n-\n-    // Create an intermediate table and use TableBatchReader as an adaptor to a\n-    // RecordBatch\n-    std::shared_ptr<Table> table = Table::Make(schema_, columns);\n-    RETURN_NOT_OK(table->Validate());\n-    ::arrow::TableBatchReader table_batch_reader(*table);\n-    return table_batch_reader.ReadNext(out);\n-  }\n-\n- private:\n-  using ColumnReaderPtr = std::unique_ptr<ColumnReader>;\n-  std::vector<ColumnReaderPtr> column_readers_;\n-  std::vector<int> row_group_indices_;\n-  std::vector<int> column_indices_;\n-  std::shared_ptr<::arrow::Schema> schema_;\n-  FileReader* file_reader_;\n-  int64_t batch_size_;\n-};\n+ArrowReaderProperties default_arrow_reader_properties() {\n+  static ArrowReaderProperties default_reader_props;\n+  return default_reader_props;\n+}\n \n // ----------------------------------------------------------------------\n // FileReaderImpl forward declaration\n \n+std::vector<int> Arange(int length) {\n \n Review comment:\n   ```suggestion\r\n   static std::vector<int> Arange(int length) {\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T19:26:55.887+0000",
                    "updated": "2019-08-01T19:26:55.887+0000",
                    "started": "2019-08-01T19:26:55.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286959",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286960",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#discussion_r309850791\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -612,5 +1121,120 @@ Status TransferColumnData(internal::RecordReader* reader,\n   return Status::OK();\n }\n \n+Status ReconstructNestedList(const std::shared_ptr<Array>& arr,\n+                             std::shared_ptr<Field> field, int16_t max_def_level,\n+                             int16_t max_rep_level, const int16_t* def_levels,\n+                             const int16_t* rep_levels, int64_t total_levels,\n+                             ::arrow::MemoryPool* pool, std::shared_ptr<Array>* out) {\n+  if (field->type()->num_children() > 0 && arr->type_id() == ::arrow::Type::DICTIONARY) {\n+    // XXX(wesm): Handling of nested types and dictionary encoding needs to be\n+    // significantly refactored\n+    return Status::Invalid(\"Cannot have nested types containing dictionary arrays yet\");\n+  }\n+\n+  // Walk downwards to extract nullability\n+  std::vector<bool> nullable;\n+  std::vector<std::shared_ptr<::arrow::Int32Builder>> offset_builders;\n+  std::vector<std::shared_ptr<::arrow::BooleanBuilder>> valid_bits_builders;\n+  nullable.push_back(field->nullable());\n+  while (field->type()->num_children() > 0) {\n+    if (field->type()->num_children() > 1) {\n+      return Status::NotImplemented(\"Fields with more than one child are not supported.\");\n+    } else {\n+      if (field->type()->id() != ::arrow::Type::LIST) {\n+        return Status::NotImplemented(\"Currently only nesting with Lists is supported.\");\n+      }\n+      field = field->type()->child(0);\n+    }\n+    offset_builders.emplace_back(\n+        std::make_shared<::arrow::Int32Builder>(::arrow::int32(), pool));\n+    valid_bits_builders.emplace_back(\n+        std::make_shared<::arrow::BooleanBuilder>(::arrow::boolean(), pool));\n+    nullable.push_back(field->nullable());\n+  }\n+\n+  int64_t list_depth = offset_builders.size();\n+  // This describes the minimal definition that describes a level that\n+  // reflects a value in the primitive values array.\n+  int16_t values_def_level = max_def_level;\n+  if (nullable[nullable.size() - 1]) {\n+    values_def_level--;\n+  }\n+\n+  // The definition levels that are needed so that a list is declared\n+  // as empty and not null.\n+  std::vector<int16_t> empty_def_level(list_depth);\n+  int def_level = 0;\n+  for (int i = 0; i < list_depth; i++) {\n+    if (nullable[i]) {\n+      def_level++;\n+    }\n+    empty_def_level[i] = static_cast<int16_t>(def_level);\n+    def_level++;\n+  }\n+\n+  int32_t values_offset = 0;\n+  std::vector<int64_t> null_counts(list_depth, 0);\n+  for (int64_t i = 0; i < total_levels; i++) {\n+    int16_t rep_level = rep_levels[i];\n+    if (rep_level < max_rep_level) {\n+      for (int64_t j = rep_level; j < list_depth; j++) {\n+        if (j == (list_depth - 1)) {\n+          RETURN_NOT_OK(offset_builders[j]->Append(values_offset));\n+        } else {\n+          RETURN_NOT_OK(offset_builders[j]->Append(\n+              static_cast<int32_t>(offset_builders[j + 1]->length())));\n+        }\n+\n+        if (((empty_def_level[j] - 1) == def_levels[i]) && (nullable[j])) {\n+          RETURN_NOT_OK(valid_bits_builders[j]->Append(false));\n+          null_counts[j]++;\n+          break;\n+        } else {\n \n Review comment:\n   ```suggestion\r\n           }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T19:26:55.892+0000",
                    "updated": "2019-08-01T19:26:55.892+0000",
                    "started": "2019-08-01T19:26:55.891+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286960",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286961",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#discussion_r309811195\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader.cc\n ##########\n @@ -383,10 +293,69 @@ class FileReaderImpl : public FileReader {\n     END_PARQUET_CATCH_EXCEPTIONS\n   }\n \n- private:\n   MemoryPool* pool_;\n   std::unique_ptr<ParquetFileReader> reader_;\n   ArrowReaderProperties reader_properties_;\n+\n+  SchemaManifest manifest_;\n+};\n+\n+class RowGroupRecordBatchReader : public ::arrow::RecordBatchReader {\n+ public:\n+  explicit RowGroupRecordBatchReader(\n \n Review comment:\n   ```suggestion\r\n     RowGroupRecordBatchReader(\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T19:26:55.897+0000",
                    "updated": "2019-08-01T19:26:55.897+0000",
                    "started": "2019-08-01T19:26:55.896+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286961",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#discussion_r309842264\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.h\n ##########\n @@ -40,11 +55,144 @@ class RecordReader;\n \n namespace arrow {\n \n-::arrow::Status TransferColumnData(internal::RecordReader* reader,\n-                                   std::shared_ptr<::arrow::DataType> value_type,\n-                                   const ColumnDescriptor* descr,\n-                                   ::arrow::MemoryPool* pool,\n-                                   std::shared_ptr<::arrow::ChunkedArray>* out);\n+class ArrowReaderProperties;\n+class ColumnReaderImpl;\n+\n+// ----------------------------------------------------------------------\n+// Iteration utilities\n+\n+// Abstraction to decouple row group iteration details from the ColumnReader,\n+// so we can read only a single row group if we want\n+class FileColumnIterator {\n+ public:\n+  explicit FileColumnIterator(int column_index, ParquetFileReader* reader,\n+                              std::vector<int> row_groups)\n+      : column_index_(column_index),\n+        reader_(reader),\n+        schema_(reader->metadata()->schema()),\n+        row_groups_(row_groups.begin(), row_groups.end()) {}\n+\n+  virtual ~FileColumnIterator() {}\n+\n+  std::unique_ptr<::parquet::PageReader> NextChunk() {\n+    if (row_groups_.empty()) {\n+      return nullptr;\n+    }\n+\n+    auto row_group_reader = reader_->RowGroup(row_groups_.front());\n+    row_groups_.pop_front();\n+    return row_group_reader->GetColumnPageReader(column_index_);\n+  }\n+\n+  const SchemaDescriptor* schema() const { return schema_; }\n+\n+  const ColumnDescriptor* descr() const { return schema_->Column(column_index_); }\n+\n+  std::shared_ptr<FileMetaData> metadata() const { return reader_->metadata(); }\n+\n+  int column_index() const { return column_index_; }\n+\n+ protected:\n+  int column_index_;\n+  ParquetFileReader* reader_;\n+  const SchemaDescriptor* schema_;\n+  std::deque<int> row_groups_;\n+};\n+\n+using FileColumnIteratorFactory =\n+    std::function<FileColumnIterator*(int, ParquetFileReader*)>;\n+\n+Status TransferColumnData(::parquet::internal::RecordReader* reader,\n+                          std::shared_ptr<::arrow::DataType> value_type,\n+                          const ColumnDescriptor* descr, ::arrow::MemoryPool* pool,\n+                          std::shared_ptr<::arrow::ChunkedArray>* out);\n+\n+Status ReconstructNestedList(const std::shared_ptr<::arrow::Array>& arr,\n+                             std::shared_ptr<::arrow::Field> field, int16_t max_def_level,\n+                             int16_t max_rep_level, const int16_t* def_levels,\n+                             const int16_t* rep_levels, int64_t total_levels,\n+                             ::arrow::MemoryPool* pool,\n+                             std::shared_ptr<::arrow::Array>* out);\n+\n+struct ReaderContext {\n+  ParquetFileReader* reader;\n+  ::arrow::MemoryPool* pool;\n+  FileColumnIteratorFactory iterator_factory;\n+  bool filter_leaves;\n+  std::unordered_set<int> included_leaves;\n+\n+  bool IncludesLeaf(int leaf_index) const {\n+    return (!this->filter_leaves ||\n+            (included_leaves.find(leaf_index) != included_leaves.end()));\n+  }\n+};\n+\n+struct PARQUET_EXPORT SchemaField {\n+  std::shared_ptr<::arrow::Field> field;\n+  std::vector<SchemaField> children;\n+\n+  // Only set for leaf nodes\n+  int column_index = -1;\n+\n+  int16_t max_definition_level;\n+  int16_t max_repetition_level;\n+\n+  bool is_leaf() const { return column_index != -1; }\n+\n+  Status GetReader(const ReaderContext& context,\n+                   std::unique_ptr<ColumnReaderImpl>* out) const;\n+};\n+\n+struct SchemaManifest {\n+  const SchemaDescriptor* descr;\n+  std::vector<SchemaField> schema_fields;\n+\n+  std::unordered_map<int, const SchemaField*> column_index_to_field;\n+  std::unordered_map<const SchemaField*, const SchemaField*> child_to_parent;\n+\n+  Status GetColumnField(int column_index, const SchemaField** out) const {\n+    auto it = column_index_to_field.find(column_index);\n+    if (it == column_index_to_field.end()) {\n+      return Status::KeyError(\"Column index \", column_index, \"is not a leaf\");\n \n Review comment:\n   This seems like a misleading error message since non-leaf schema fields don't have indices\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T19:26:55.903+0000",
                    "updated": "2019-08-01T19:26:55.903+0000",
                    "started": "2019-08-01T19:26:55.903+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286962",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286963",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#discussion_r309859282\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -612,5 +1121,120 @@ Status TransferColumnData(internal::RecordReader* reader,\n   return Status::OK();\n }\n \n+Status ReconstructNestedList(const std::shared_ptr<Array>& arr,\n+                             std::shared_ptr<Field> field, int16_t max_def_level,\n+                             int16_t max_rep_level, const int16_t* def_levels,\n+                             const int16_t* rep_levels, int64_t total_levels,\n+                             ::arrow::MemoryPool* pool, std::shared_ptr<Array>* out) {\n+  if (field->type()->num_children() > 0 && arr->type_id() == ::arrow::Type::DICTIONARY) {\n+    // XXX(wesm): Handling of nested types and dictionary encoding needs to be\n+    // significantly refactored\n+    return Status::Invalid(\"Cannot have nested types containing dictionary arrays yet\");\n+  }\n+\n+  // Walk downwards to extract nullability\n+  std::vector<bool> nullable;\n+  std::vector<std::shared_ptr<::arrow::Int32Builder>> offset_builders;\n \n Review comment:\n   Might be easier than offset_builders and valid_bits_builders:\r\n   ```\r\n   MakeBuilder(pool, list(list(list(/*...*/null()/*...*/))), &root_builder);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T19:26:56.027+0000",
                    "updated": "2019-08-01T19:26:56.027+0000",
                    "started": "2019-08-01T19:26:56.027+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286963",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#discussion_r309846796\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -612,5 +1121,120 @@ Status TransferColumnData(internal::RecordReader* reader,\n   return Status::OK();\n }\n \n+Status ReconstructNestedList(const std::shared_ptr<Array>& arr,\n+                             std::shared_ptr<Field> field, int16_t max_def_level,\n+                             int16_t max_rep_level, const int16_t* def_levels,\n+                             const int16_t* rep_levels, int64_t total_levels,\n+                             ::arrow::MemoryPool* pool, std::shared_ptr<Array>* out) {\n+  if (field->type()->num_children() > 0 && arr->type_id() == ::arrow::Type::DICTIONARY) {\n+    // XXX(wesm): Handling of nested types and dictionary encoding needs to be\n+    // significantly refactored\n \n Review comment:\n   Could you elaborate? Is this in reference to #4956 ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T19:26:56.029+0000",
                    "updated": "2019-08-01T19:26:56.029+0000",
                    "started": "2019-08-01T19:26:56.028+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286964",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286965",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#discussion_r309852530\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -612,5 +1121,120 @@ Status TransferColumnData(internal::RecordReader* reader,\n   return Status::OK();\n }\n \n+Status ReconstructNestedList(const std::shared_ptr<Array>& arr,\n+                             std::shared_ptr<Field> field, int16_t max_def_level,\n+                             int16_t max_rep_level, const int16_t* def_levels,\n+                             const int16_t* rep_levels, int64_t total_levels,\n+                             ::arrow::MemoryPool* pool, std::shared_ptr<Array>* out) {\n+  if (field->type()->num_children() > 0 && arr->type_id() == ::arrow::Type::DICTIONARY) {\n+    // XXX(wesm): Handling of nested types and dictionary encoding needs to be\n+    // significantly refactored\n+    return Status::Invalid(\"Cannot have nested types containing dictionary arrays yet\");\n+  }\n+\n+  // Walk downwards to extract nullability\n+  std::vector<bool> nullable;\n+  std::vector<std::shared_ptr<::arrow::Int32Builder>> offset_builders;\n+  std::vector<std::shared_ptr<::arrow::BooleanBuilder>> valid_bits_builders;\n+  nullable.push_back(field->nullable());\n+  while (field->type()->num_children() > 0) {\n+    if (field->type()->num_children() > 1) {\n+      return Status::NotImplemented(\"Fields with more than one child are not supported.\");\n+    } else {\n+      if (field->type()->id() != ::arrow::Type::LIST) {\n+        return Status::NotImplemented(\"Currently only nesting with Lists is supported.\");\n+      }\n+      field = field->type()->child(0);\n+    }\n+    offset_builders.emplace_back(\n+        std::make_shared<::arrow::Int32Builder>(::arrow::int32(), pool));\n+    valid_bits_builders.emplace_back(\n+        std::make_shared<::arrow::BooleanBuilder>(::arrow::boolean(), pool));\n+    nullable.push_back(field->nullable());\n+  }\n+\n+  int64_t list_depth = offset_builders.size();\n+  // This describes the minimal definition that describes a level that\n+  // reflects a value in the primitive values array.\n+  int16_t values_def_level = max_def_level;\n+  if (nullable[nullable.size() - 1]) {\n+    values_def_level--;\n+  }\n+\n+  // The definition levels that are needed so that a list is declared\n+  // as empty and not null.\n+  std::vector<int16_t> empty_def_level(list_depth);\n+  int def_level = 0;\n+  for (int i = 0; i < list_depth; i++) {\n+    if (nullable[i]) {\n+      def_level++;\n+    }\n+    empty_def_level[i] = static_cast<int16_t>(def_level);\n+    def_level++;\n+  }\n+\n+  int32_t values_offset = 0;\n+  std::vector<int64_t> null_counts(list_depth, 0);\n+  for (int64_t i = 0; i < total_levels; i++) {\n+    int16_t rep_level = rep_levels[i];\n+    if (rep_level < max_rep_level) {\n+      for (int64_t j = rep_level; j < list_depth; j++) {\n+        if (j == (list_depth - 1)) {\n+          RETURN_NOT_OK(offset_builders[j]->Append(values_offset));\n+        } else {\n+          RETURN_NOT_OK(offset_builders[j]->Append(\n+              static_cast<int32_t>(offset_builders[j + 1]->length())));\n+        }\n+\n+        if (((empty_def_level[j] - 1) == def_levels[i]) && (nullable[j])) {\n \n Review comment:\n   ```suggestion\r\n           if (nullable[j] && empty_def_level[j] - 1 == def_levels[i]) {\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T19:26:56.079+0000",
                    "updated": "2019-08-01T19:26:56.079+0000",
                    "started": "2019-08-01T19:26:56.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286965",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286966",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#discussion_r309860509\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -612,5 +1121,120 @@ Status TransferColumnData(internal::RecordReader* reader,\n   return Status::OK();\n }\n \n+Status ReconstructNestedList(const std::shared_ptr<Array>& arr,\n+                             std::shared_ptr<Field> field, int16_t max_def_level,\n+                             int16_t max_rep_level, const int16_t* def_levels,\n+                             const int16_t* rep_levels, int64_t total_levels,\n+                             ::arrow::MemoryPool* pool, std::shared_ptr<Array>* out) {\n+  if (field->type()->num_children() > 0 && arr->type_id() == ::arrow::Type::DICTIONARY) {\n+    // XXX(wesm): Handling of nested types and dictionary encoding needs to be\n+    // significantly refactored\n \n Review comment:\n   The problem that I'm referencing here is fixed by this patch, I will remove the comment\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T19:28:21.118+0000",
                    "updated": "2019-08-01T19:28:21.118+0000",
                    "started": "2019-08-01T19:28:21.118+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286966",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286967",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#discussion_r309860587\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -612,5 +1121,120 @@ Status TransferColumnData(internal::RecordReader* reader,\n   return Status::OK();\n }\n \n+Status ReconstructNestedList(const std::shared_ptr<Array>& arr,\n+                             std::shared_ptr<Field> field, int16_t max_def_level,\n+                             int16_t max_rep_level, const int16_t* def_levels,\n+                             const int16_t* rep_levels, int64_t total_levels,\n+                             ::arrow::MemoryPool* pool, std::shared_ptr<Array>* out) {\n+  if (field->type()->num_children() > 0 && arr->type_id() == ::arrow::Type::DICTIONARY) {\n+    // XXX(wesm): Handling of nested types and dictionary encoding needs to be\n+    // significantly refactored\n+    return Status::Invalid(\"Cannot have nested types containing dictionary arrays yet\");\n+  }\n+\n+  // Walk downwards to extract nullability\n+  std::vector<bool> nullable;\n+  std::vector<std::shared_ptr<::arrow::Int32Builder>> offset_builders;\n+  std::vector<std::shared_ptr<::arrow::BooleanBuilder>> valid_bits_builders;\n+  nullable.push_back(field->nullable());\n+  while (field->type()->num_children() > 0) {\n+    if (field->type()->num_children() > 1) {\n+      return Status::NotImplemented(\"Fields with more than one child are not supported.\");\n+    } else {\n+      if (field->type()->id() != ::arrow::Type::LIST) {\n+        return Status::NotImplemented(\"Currently only nesting with Lists is supported.\");\n+      }\n+      field = field->type()->child(0);\n+    }\n+    offset_builders.emplace_back(\n+        std::make_shared<::arrow::Int32Builder>(::arrow::int32(), pool));\n+    valid_bits_builders.emplace_back(\n+        std::make_shared<::arrow::BooleanBuilder>(::arrow::boolean(), pool));\n+    nullable.push_back(field->nullable());\n+  }\n+\n+  int64_t list_depth = offset_builders.size();\n+  // This describes the minimal definition that describes a level that\n+  // reflects a value in the primitive values array.\n+  int16_t values_def_level = max_def_level;\n+  if (nullable[nullable.size() - 1]) {\n+    values_def_level--;\n+  }\n+\n+  // The definition levels that are needed so that a list is declared\n+  // as empty and not null.\n+  std::vector<int16_t> empty_def_level(list_depth);\n+  int def_level = 0;\n+  for (int i = 0; i < list_depth; i++) {\n+    if (nullable[i]) {\n+      def_level++;\n+    }\n+    empty_def_level[i] = static_cast<int16_t>(def_level);\n+    def_level++;\n+  }\n+\n+  int32_t values_offset = 0;\n+  std::vector<int64_t> null_counts(list_depth, 0);\n+  for (int64_t i = 0; i < total_levels; i++) {\n+    int16_t rep_level = rep_levels[i];\n+    if (rep_level < max_rep_level) {\n+      for (int64_t j = rep_level; j < list_depth; j++) {\n+        if (j == (list_depth - 1)) {\n+          RETURN_NOT_OK(offset_builders[j]->Append(values_offset));\n+        } else {\n+          RETURN_NOT_OK(offset_builders[j]->Append(\n+              static_cast<int32_t>(offset_builders[j + 1]->length())));\n+        }\n+\n+        if (((empty_def_level[j] - 1) == def_levels[i]) && (nullable[j])) {\n+          RETURN_NOT_OK(valid_bits_builders[j]->Append(false));\n+          null_counts[j]++;\n+          break;\n+        } else {\n \n Review comment:\n   This is old code\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T19:28:34.776+0000",
                    "updated": "2019-08-01T19:28:34.776+0000",
                    "started": "2019-08-01T19:28:34.775+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286967",
                    "issueId": "13247988"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/worklog/286968",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4971: ARROW-6077: [C++][Parquet] Build Arrow \"schema tree\" from Parquet schema to help with nested data implementation\nURL: https://github.com/apache/arrow/pull/4971#discussion_r309860641\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -612,5 +1121,120 @@ Status TransferColumnData(internal::RecordReader* reader,\n   return Status::OK();\n }\n \n+Status ReconstructNestedList(const std::shared_ptr<Array>& arr,\n+                             std::shared_ptr<Field> field, int16_t max_def_level,\n+                             int16_t max_rep_level, const int16_t* def_levels,\n+                             const int16_t* rep_levels, int64_t total_levels,\n+                             ::arrow::MemoryPool* pool, std::shared_ptr<Array>* out) {\n+  if (field->type()->num_children() > 0 && arr->type_id() == ::arrow::Type::DICTIONARY) {\n+    // XXX(wesm): Handling of nested types and dictionary encoding needs to be\n+    // significantly refactored\n+    return Status::Invalid(\"Cannot have nested types containing dictionary arrays yet\");\n+  }\n+\n+  // Walk downwards to extract nullability\n+  std::vector<bool> nullable;\n+  std::vector<std::shared_ptr<::arrow::Int32Builder>> offset_builders;\n \n Review comment:\n   Old code\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-01T19:28:38.578+0000",
                    "updated": "2019-08-01T19:28:38.578+0000",
                    "started": "2019-08-01T19:28:38.578+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "286968",
                    "issueId": "13247988"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 16200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6065d53f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@84a7f7c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c5033ba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@47ba1ed3[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f20b2d5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6bf1ea8b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76a1d9ac[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@617a1d2d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4be6adcd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2f27a388[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57336379[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@66919fc7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Aug 02 01:53:30 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-08-02T01:53:30.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6077/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-07-31T02:53:22.000+0000",
        "updated": "2019-08-02T01:53:35.000+0000",
        "timeoriginalestimate": null,
        "description": "In several places in cpp/src/parquet/arrow, the {{FromParquetSchema}} function is used to construct fields using a filtered \"view\" of the Parquet schema. This is a hack caused by the lack of some kind of a \"schema tree\" which maps Parquet concepts to Arrow {{Field}} objects. \r\n\r\nOne manifestation of this issue is that I was unable to implement dictionary encoded subfields in cases like {{list<string>}}, where you want the inner field to be dictionary-encoded. \r\n\r\nPatch forthcoming",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Parquet] Build logical schema tree mapping Arrow fields to Parquet schema levels",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247988/comment/16898474",
                    "id": "16898474",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 4971\n[https://github.com/apache/arrow/pull/4971]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-08-02T01:53:30.636+0000",
                    "updated": "2019-08-02T01:53:30.636+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z056j4:",
        "customfield_12314139": null
    }
}