{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13402324",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324",
    "key": "ARROW-14047",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351280",
                "id": "12351280",
                "description": "",
                "name": "7.0.2",
                "archived": true,
                "released": false
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "2.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350712",
                "id": "12350712",
                "description": "",
                "name": "6.0.1",
                "archived": false,
                "released": true,
                "releaseDate": "2021-11-18"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12633183",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12633183",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13426409",
                    "key": "ARROW-15550",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426409",
                    "fields": {
                        "summary": "[C++] Add an environment variable to debug memory",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
                            "id": "5",
                            "description": "General wishlist item.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Wish",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
            "name": "willjones127",
            "key": "willjones127",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Will Jones",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rteodorescu",
            "name": "rteodorescu",
            "key": "rteodorescu",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
            },
            "displayName": "Radu Teodorescu",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rteodorescu",
            "name": "rteodorescu",
            "key": "rteodorescu",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
            },
            "displayName": "Radu Teodorescu",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 30600,
            "total": 30600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 30600,
            "total": 30600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14047/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 51,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/712335",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 opened a new pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216\n\n\n   This is just some testing I've done so far. It requires the parquet file attached in the Jira.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-20T20:09:05.775+0000",
                    "updated": "2022-01-20T20:09:05.775+0000",
                    "started": "2022-01-20T20:09:05.775+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "712335",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/712336",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#issuecomment-1017878570\n\n\n   https://issues.apache.org/jira/browse/ARROW-14047\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-20T20:09:18.536+0000",
                    "updated": "2022-01-20T20:09:18.536+0000",
                    "started": "2022-01-20T20:09:18.535+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "712336",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/712363",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#discussion_r789133300\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -3719,6 +3719,77 @@ TEST(TestArrowReaderAdHoc, WriteBatchedNestedNullableStringColumn) {\n   ::arrow::AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n+TEST(TestArrowReaderAdHoc, RepeatReadNullableStructColumnFile) {\n+  // ARROW-14047\n+  auto pool = default_memory_pool();\n+\n+  // Special parquet file; see attachment in Jira\n+  auto file_path = test::get_data_file(\"writeReadRowGroup.parquet\");\n+  PARQUET_ASSIGN_OR_THROW(auto infile, ::arrow::io::ReadableFile::Open(file_path, pool));\n+\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+  ASSERT_OK(OpenFile(infile, pool, &arrow_reader));\n+\n+  std::shared_ptr<::arrow::Table> first_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&first_read));\n+\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  std::shared_ptr<::arrow::Table> second_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read));\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read)); // (Actually third read)\n+\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\n+  // ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n+\n+  // To eliminate possibility of parquet writer oddities, rewrite table to new parquet:\n+  using ::arrow::io::BufferOutputStream;\n+  ASSERT_OK_AND_ASSIGN(auto outs, BufferOutputStream::Create(1 << 10, pool));\n+  auto props = default_writer_properties();\n+  std::unique_ptr<arrow::FileWriter> writer;\n+  ASSERT_OK(\n+      arrow::FileWriter::Open(*first_read->schema().get(), pool, outs, props, &writer));\n+  ASSERT_OK(writer->WriteTable(*first_read.get(), std::numeric_limits<int64_t>::max()));\n+  ASSERT_OK(writer->Close());\n+  ASSERT_OK_AND_ASSIGN(auto buffer, outs->Finish());\n+\n+  // Read from table\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader2;\n+  ASSERT_OK(parquet::arrow::OpenFile(std::make_shared<BufferReader>(buffer), pool, &arrow_reader2));\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&first_read));\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&second_read));\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: \n+  // Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number \n+  // of nulls in array (861)\n+  // ASSERT_OK(second_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n\nReview comment:\n       So this line fails?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-20T20:39:20.402+0000",
                    "updated": "2022-01-20T20:39:20.402+0000",
                    "started": "2022-01-20T20:39:20.402+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "712363",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/712365",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on a change in pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#discussion_r789135683\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -3719,6 +3719,77 @@ TEST(TestArrowReaderAdHoc, WriteBatchedNestedNullableStringColumn) {\n   ::arrow::AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n+TEST(TestArrowReaderAdHoc, RepeatReadNullableStructColumnFile) {\n+  // ARROW-14047\n+  auto pool = default_memory_pool();\n+\n+  // Special parquet file; see attachment in Jira\n+  auto file_path = test::get_data_file(\"writeReadRowGroup.parquet\");\n+  PARQUET_ASSIGN_OR_THROW(auto infile, ::arrow::io::ReadableFile::Open(file_path, pool));\n+\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+  ASSERT_OK(OpenFile(infile, pool, &arrow_reader));\n+\n+  std::shared_ptr<::arrow::Table> first_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&first_read));\n+\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  std::shared_ptr<::arrow::Table> second_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read));\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read)); // (Actually third read)\n+\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\n+  // ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n+\n+  // To eliminate possibility of parquet writer oddities, rewrite table to new parquet:\n+  using ::arrow::io::BufferOutputStream;\n+  ASSERT_OK_AND_ASSIGN(auto outs, BufferOutputStream::Create(1 << 10, pool));\n+  auto props = default_writer_properties();\n+  std::unique_ptr<arrow::FileWriter> writer;\n+  ASSERT_OK(\n+      arrow::FileWriter::Open(*first_read->schema().get(), pool, outs, props, &writer));\n+  ASSERT_OK(writer->WriteTable(*first_read.get(), std::numeric_limits<int64_t>::max()));\n+  ASSERT_OK(writer->Close());\n+  ASSERT_OK_AND_ASSIGN(auto buffer, outs->Finish());\n+\n+  // Read from table\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader2;\n+  ASSERT_OK(parquet::arrow::OpenFile(std::make_shared<BufferReader>(buffer), pool, &arrow_reader2));\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&first_read));\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&second_read));\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: \n+  // Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number \n+  // of nulls in array (861)\n+  // ASSERT_OK(second_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n\nReview comment:\n       Yes, if you comment out line 3739. As is, it will error on line 3763 (ValidateFull). (Sorry that's a little confusing)\r\n   \r\n   Output from error on 3771:\r\n   \r\n   ```\r\n   56: /Users/willjones/Documents/arrows/arrow/cpp/src/arrow/testing/gtest_util.cc:205: Failure\r\n   56: Failed\r\n   56: # chunk 0\r\n   56: \r\n   56: @@ -0, +0 @@\r\n   56: -[{}, {}, {}, {}, {}, {}, {}]\r\n   56: -[{}, {}, {x: 13}, {}, {x: 13.2}, {}, {x: 13.4}, {}]\r\n   56: +[{x: 12.7}, {x: 12.8}, {}, {x: 13}, {x: 13.1}, {x: 13.2}, {x: 13.3}]\r\n   56: +[{x: 12.8}, {}, {x: 13}, {}, {x: 13.2}, {}, {x: 13.4}, {}]\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-20T20:43:16.588+0000",
                    "updated": "2022-01-20T20:43:16.588+0000",
                    "started": "2022-01-20T20:43:16.588+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "712365",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/712366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#discussion_r789136429\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -3719,6 +3719,77 @@ TEST(TestArrowReaderAdHoc, WriteBatchedNestedNullableStringColumn) {\n   ::arrow::AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n+TEST(TestArrowReaderAdHoc, RepeatReadNullableStructColumnFile) {\n+  // ARROW-14047\n+  auto pool = default_memory_pool();\n+\n+  // Special parquet file; see attachment in Jira\n+  auto file_path = test::get_data_file(\"writeReadRowGroup.parquet\");\n+  PARQUET_ASSIGN_OR_THROW(auto infile, ::arrow::io::ReadableFile::Open(file_path, pool));\n+\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+  ASSERT_OK(OpenFile(infile, pool, &arrow_reader));\n+\n+  std::shared_ptr<::arrow::Table> first_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&first_read));\n+\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  std::shared_ptr<::arrow::Table> second_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read));\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read)); // (Actually third read)\n+\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\n+  // ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n+\n+  // To eliminate possibility of parquet writer oddities, rewrite table to new parquet:\n+  using ::arrow::io::BufferOutputStream;\n+  ASSERT_OK_AND_ASSIGN(auto outs, BufferOutputStream::Create(1 << 10, pool));\n+  auto props = default_writer_properties();\n+  std::unique_ptr<arrow::FileWriter> writer;\n+  ASSERT_OK(\n+      arrow::FileWriter::Open(*first_read->schema().get(), pool, outs, props, &writer));\n+  ASSERT_OK(writer->WriteTable(*first_read.get(), std::numeric_limits<int64_t>::max()));\n+  ASSERT_OK(writer->Close());\n+  ASSERT_OK_AND_ASSIGN(auto buffer, outs->Finish());\n+\n+  // Read from table\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader2;\n+  ASSERT_OK(parquet::arrow::OpenFile(std::make_shared<BufferReader>(buffer), pool, &arrow_reader2));\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&first_read));\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&second_read));\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: \n\nReview comment:\n       is this first_read or second read?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-20T20:44:31.222+0000",
                    "updated": "2022-01-20T20:44:31.222+0000",
                    "started": "2022-01-20T20:44:31.222+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "712366",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/712376",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on a change in pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#discussion_r789143572\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -3719,6 +3719,77 @@ TEST(TestArrowReaderAdHoc, WriteBatchedNestedNullableStringColumn) {\n   ::arrow::AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n+TEST(TestArrowReaderAdHoc, RepeatReadNullableStructColumnFile) {\n+  // ARROW-14047\n+  auto pool = default_memory_pool();\n+\n+  // Special parquet file; see attachment in Jira\n+  auto file_path = test::get_data_file(\"writeReadRowGroup.parquet\");\n+  PARQUET_ASSIGN_OR_THROW(auto infile, ::arrow::io::ReadableFile::Open(file_path, pool));\n+\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+  ASSERT_OK(OpenFile(infile, pool, &arrow_reader));\n+\n+  std::shared_ptr<::arrow::Table> first_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&first_read));\n+\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  std::shared_ptr<::arrow::Table> second_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read));\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read)); // (Actually third read)\n+\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\n+  // ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n+\n+  // To eliminate possibility of parquet writer oddities, rewrite table to new parquet:\n+  using ::arrow::io::BufferOutputStream;\n+  ASSERT_OK_AND_ASSIGN(auto outs, BufferOutputStream::Create(1 << 10, pool));\n+  auto props = default_writer_properties();\n+  std::unique_ptr<arrow::FileWriter> writer;\n+  ASSERT_OK(\n+      arrow::FileWriter::Open(*first_read->schema().get(), pool, outs, props, &writer));\n+  ASSERT_OK(writer->WriteTable(*first_read.get(), std::numeric_limits<int64_t>::max()));\n+  ASSERT_OK(writer->Close());\n+  ASSERT_OK_AND_ASSIGN(auto buffer, outs->Finish());\n+\n+  // Read from table\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader2;\n+  ASSERT_OK(parquet::arrow::OpenFile(std::make_shared<BufferReader>(buffer), pool, &arrow_reader2));\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&first_read));\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&second_read));\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: \n\nReview comment:\n       Should be second read for that line below; Just reran with 3769 uncommented. \r\n   \r\n   ```\r\n   56: /Users/willjones/Documents/arrows/arrow/cpp/src/parquet/arrow/arrow_reader_writer_test.cc:3797: Failure\r\n   56: Failed\r\n   56: 'second_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\r\n   56: /Users/willjones/Documents/arrows/arrow/cpp/src/arrow/array/validate.cc:118  ValidateNulls(*data.type)\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-20T20:55:47.462+0000",
                    "updated": "2022-01-20T20:55:47.462+0000",
                    "started": "2022-01-20T20:55:47.462+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "712376",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/712384",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#discussion_r789148107\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -3719,6 +3719,77 @@ TEST(TestArrowReaderAdHoc, WriteBatchedNestedNullableStringColumn) {\n   ::arrow::AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n+TEST(TestArrowReaderAdHoc, RepeatReadNullableStructColumnFile) {\n+  // ARROW-14047\n+  auto pool = default_memory_pool();\n+\n+  // Special parquet file; see attachment in Jira\n+  auto file_path = test::get_data_file(\"writeReadRowGroup.parquet\");\n+  PARQUET_ASSIGN_OR_THROW(auto infile, ::arrow::io::ReadableFile::Open(file_path, pool));\n+\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+  ASSERT_OK(OpenFile(infile, pool, &arrow_reader));\n+\n+  std::shared_ptr<::arrow::Table> first_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&first_read));\n+\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  std::shared_ptr<::arrow::Table> second_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read));\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read)); // (Actually third read)\n+\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\n+  // ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n+\n+  // To eliminate possibility of parquet writer oddities, rewrite table to new parquet:\n+  using ::arrow::io::BufferOutputStream;\n+  ASSERT_OK_AND_ASSIGN(auto outs, BufferOutputStream::Create(1 << 10, pool));\n+  auto props = default_writer_properties();\n+  std::unique_ptr<arrow::FileWriter> writer;\n+  ASSERT_OK(\n+      arrow::FileWriter::Open(*first_read->schema().get(), pool, outs, props, &writer));\n+  ASSERT_OK(writer->WriteTable(*first_read.get(), std::numeric_limits<int64_t>::max()));\n+  ASSERT_OK(writer->Close());\n+  ASSERT_OK_AND_ASSIGN(auto buffer, outs->Finish());\n+\n+  // Read from table\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader2;\n+  ASSERT_OK(parquet::arrow::OpenFile(std::make_shared<BufferReader>(buffer), pool, &arrow_reader2));\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&first_read));\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&second_read));\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: \n+  // Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number \n+  // of nulls in array (861)\n+  // ASSERT_OK(second_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n\nReview comment:\n       So if I read this correctly there is an list<struct<x: double>> arrow schema we are trying to read back?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-20T21:02:55.647+0000",
                    "updated": "2022-01-20T21:02:55.647+0000",
                    "started": "2022-01-20T21:02:55.647+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "712384",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/712386",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on a change in pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#discussion_r789149962\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -3719,6 +3719,77 @@ TEST(TestArrowReaderAdHoc, WriteBatchedNestedNullableStringColumn) {\n   ::arrow::AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n+TEST(TestArrowReaderAdHoc, RepeatReadNullableStructColumnFile) {\n+  // ARROW-14047\n+  auto pool = default_memory_pool();\n+\n+  // Special parquet file; see attachment in Jira\n+  auto file_path = test::get_data_file(\"writeReadRowGroup.parquet\");\n+  PARQUET_ASSIGN_OR_THROW(auto infile, ::arrow::io::ReadableFile::Open(file_path, pool));\n+\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+  ASSERT_OK(OpenFile(infile, pool, &arrow_reader));\n+\n+  std::shared_ptr<::arrow::Table> first_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&first_read));\n+\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  std::shared_ptr<::arrow::Table> second_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read));\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read)); // (Actually third read)\n+\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\n+  // ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n+\n+  // To eliminate possibility of parquet writer oddities, rewrite table to new parquet:\n+  using ::arrow::io::BufferOutputStream;\n+  ASSERT_OK_AND_ASSIGN(auto outs, BufferOutputStream::Create(1 << 10, pool));\n+  auto props = default_writer_properties();\n+  std::unique_ptr<arrow::FileWriter> writer;\n+  ASSERT_OK(\n+      arrow::FileWriter::Open(*first_read->schema().get(), pool, outs, props, &writer));\n+  ASSERT_OK(writer->WriteTable(*first_read.get(), std::numeric_limits<int64_t>::max()));\n+  ASSERT_OK(writer->Close());\n+  ASSERT_OK_AND_ASSIGN(auto buffer, outs->Finish());\n+\n+  // Read from table\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader2;\n+  ASSERT_OK(parquet::arrow::OpenFile(std::make_shared<BufferReader>(buffer), pool, &arrow_reader2));\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&first_read));\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&second_read));\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: \n+  // Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number \n+  // of nulls in array (861)\n+  // ASSERT_OK(second_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n\nReview comment:\n       Yes.\r\n   \r\n   And I just found the resulting array is invalid in every other read starting with the third. That is the following reads (1-indexed) will be invalid: 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29,\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-20T21:06:06.016+0000",
                    "updated": "2022-01-20T21:06:06.016+0000",
                    "started": "2022-01-20T21:06:06.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "712386",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/712389",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#discussion_r789152407\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -3719,6 +3719,77 @@ TEST(TestArrowReaderAdHoc, WriteBatchedNestedNullableStringColumn) {\n   ::arrow::AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n+TEST(TestArrowReaderAdHoc, RepeatReadNullableStructColumnFile) {\n+  // ARROW-14047\n+  auto pool = default_memory_pool();\n+\n+  // Special parquet file; see attachment in Jira\n+  auto file_path = test::get_data_file(\"writeReadRowGroup.parquet\");\n+  PARQUET_ASSIGN_OR_THROW(auto infile, ::arrow::io::ReadableFile::Open(file_path, pool));\n+\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+  ASSERT_OK(OpenFile(infile, pool, &arrow_reader));\n+\n+  std::shared_ptr<::arrow::Table> first_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&first_read));\n+\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  std::shared_ptr<::arrow::Table> second_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read));\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read)); // (Actually third read)\n+\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\n+  // ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n+\n+  // To eliminate possibility of parquet writer oddities, rewrite table to new parquet:\n+  using ::arrow::io::BufferOutputStream;\n+  ASSERT_OK_AND_ASSIGN(auto outs, BufferOutputStream::Create(1 << 10, pool));\n+  auto props = default_writer_properties();\n+  std::unique_ptr<arrow::FileWriter> writer;\n+  ASSERT_OK(\n+      arrow::FileWriter::Open(*first_read->schema().get(), pool, outs, props, &writer));\n+  ASSERT_OK(writer->WriteTable(*first_read.get(), std::numeric_limits<int64_t>::max()));\n+  ASSERT_OK(writer->Close());\n+  ASSERT_OK_AND_ASSIGN(auto buffer, outs->Finish());\n+\n+  // Read from table\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader2;\n+  ASSERT_OK(parquet::arrow::OpenFile(std::make_shared<BufferReader>(buffer), pool, &arrow_reader2));\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&first_read));\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&second_read));\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: \n+  // Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number \n+  // of nulls in array (861)\n+  // ASSERT_OK(second_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n\nReview comment:\n       So reads 0,1,2 and then and all even reads are valid? do they all agree with each other?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-20T21:10:09.929+0000",
                    "updated": "2022-01-20T21:10:09.929+0000",
                    "started": "2022-01-20T21:10:09.929+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "712389",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/712391",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on a change in pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#discussion_r789153383\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -3719,6 +3719,77 @@ TEST(TestArrowReaderAdHoc, WriteBatchedNestedNullableStringColumn) {\n   ::arrow::AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n+TEST(TestArrowReaderAdHoc, RepeatReadNullableStructColumnFile) {\n+  // ARROW-14047\n+  auto pool = default_memory_pool();\n+\n+  // Special parquet file; see attachment in Jira\n+  auto file_path = test::get_data_file(\"writeReadRowGroup.parquet\");\n+  PARQUET_ASSIGN_OR_THROW(auto infile, ::arrow::io::ReadableFile::Open(file_path, pool));\n+\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+  ASSERT_OK(OpenFile(infile, pool, &arrow_reader));\n+\n+  std::shared_ptr<::arrow::Table> first_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&first_read));\n+\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  std::shared_ptr<::arrow::Table> second_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read));\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read)); // (Actually third read)\n+\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\n+  // ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n+\n+  // To eliminate possibility of parquet writer oddities, rewrite table to new parquet:\n+  using ::arrow::io::BufferOutputStream;\n+  ASSERT_OK_AND_ASSIGN(auto outs, BufferOutputStream::Create(1 << 10, pool));\n+  auto props = default_writer_properties();\n+  std::unique_ptr<arrow::FileWriter> writer;\n+  ASSERT_OK(\n+      arrow::FileWriter::Open(*first_read->schema().get(), pool, outs, props, &writer));\n+  ASSERT_OK(writer->WriteTable(*first_read.get(), std::numeric_limits<int64_t>::max()));\n+  ASSERT_OK(writer->Close());\n+  ASSERT_OK_AND_ASSIGN(auto buffer, outs->Finish());\n+\n+  // Read from table\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader2;\n+  ASSERT_OK(parquet::arrow::OpenFile(std::make_shared<BufferReader>(buffer), pool, &arrow_reader2));\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&first_read));\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&second_read));\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: \n+  // Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number \n+  // of nulls in array (861)\n+  // ASSERT_OK(second_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n\nReview comment:\n       That's what I'm seeing so far. And I believe the original test showed the valid ones do, but I will do another check.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-20T21:11:45.021+0000",
                    "updated": "2022-01-20T21:11:45.021+0000",
                    "started": "2022-01-20T21:11:45.021+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "712391",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/712396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on a change in pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#discussion_r789154890\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -3719,6 +3719,77 @@ TEST(TestArrowReaderAdHoc, WriteBatchedNestedNullableStringColumn) {\n   ::arrow::AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n+TEST(TestArrowReaderAdHoc, RepeatReadNullableStructColumnFile) {\n+  // ARROW-14047\n+  auto pool = default_memory_pool();\n+\n+  // Special parquet file; see attachment in Jira\n+  auto file_path = test::get_data_file(\"writeReadRowGroup.parquet\");\n+  PARQUET_ASSIGN_OR_THROW(auto infile, ::arrow::io::ReadableFile::Open(file_path, pool));\n+\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+  ASSERT_OK(OpenFile(infile, pool, &arrow_reader));\n+\n+  std::shared_ptr<::arrow::Table> first_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&first_read));\n+\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  std::shared_ptr<::arrow::Table> second_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read));\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read)); // (Actually third read)\n+\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\n+  // ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n+\n+  // To eliminate possibility of parquet writer oddities, rewrite table to new parquet:\n+  using ::arrow::io::BufferOutputStream;\n+  ASSERT_OK_AND_ASSIGN(auto outs, BufferOutputStream::Create(1 << 10, pool));\n+  auto props = default_writer_properties();\n+  std::unique_ptr<arrow::FileWriter> writer;\n+  ASSERT_OK(\n+      arrow::FileWriter::Open(*first_read->schema().get(), pool, outs, props, &writer));\n+  ASSERT_OK(writer->WriteTable(*first_read.get(), std::numeric_limits<int64_t>::max()));\n+  ASSERT_OK(writer->Close());\n+  ASSERT_OK_AND_ASSIGN(auto buffer, outs->Finish());\n+\n+  // Read from table\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader2;\n+  ASSERT_OK(parquet::arrow::OpenFile(std::make_shared<BufferReader>(buffer), pool, &arrow_reader2));\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&first_read));\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&second_read));\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: \n+  // Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number \n+  // of nulls in array (861)\n+  // ASSERT_OK(second_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n\nReview comment:\n       Yes, all evens are equal.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-20T21:14:13.599+0000",
                    "updated": "2022-01-20T21:14:13.599+0000",
                    "started": "2022-01-20T21:14:13.599+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "712396",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/713282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#discussion_r790222470\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -3719,6 +3719,77 @@ TEST(TestArrowReaderAdHoc, WriteBatchedNestedNullableStringColumn) {\n   ::arrow::AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n+TEST(TestArrowReaderAdHoc, RepeatReadNullableStructColumnFile) {\n+  // ARROW-14047\n+  auto pool = default_memory_pool();\n+\n+  // Special parquet file; see attachment in Jira\n+  auto file_path = test::get_data_file(\"writeReadRowGroup.parquet\");\n+  PARQUET_ASSIGN_OR_THROW(auto infile, ::arrow::io::ReadableFile::Open(file_path, pool));\n+\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+  ASSERT_OK(OpenFile(infile, pool, &arrow_reader));\n+\n+  std::shared_ptr<::arrow::Table> first_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&first_read));\n+\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  std::shared_ptr<::arrow::Table> second_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read));\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read)); // (Actually third read)\n+\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\n+  // ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n+\n+  // To eliminate possibility of parquet writer oddities, rewrite table to new parquet:\n+  using ::arrow::io::BufferOutputStream;\n+  ASSERT_OK_AND_ASSIGN(auto outs, BufferOutputStream::Create(1 << 10, pool));\n+  auto props = default_writer_properties();\n+  std::unique_ptr<arrow::FileWriter> writer;\n+  ASSERT_OK(\n+      arrow::FileWriter::Open(*first_read->schema().get(), pool, outs, props, &writer));\n+  ASSERT_OK(writer->WriteTable(*first_read.get(), std::numeric_limits<int64_t>::max()));\n+  ASSERT_OK(writer->Close());\n+  ASSERT_OK_AND_ASSIGN(auto buffer, outs->Finish());\n+\n+  // Read from table\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader2;\n+  ASSERT_OK(parquet::arrow::OpenFile(std::make_shared<BufferReader>(buffer), pool, &arrow_reader2));\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&first_read));\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&second_read));\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: \n+  // Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number \n+  // of nulls in array (861)\n+  // ASSERT_OK(second_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n\nReview comment:\n       Wow, that is strange.  Also, just to check they also equal after round-tripping or is there data loss?  Most of the state should be constructed by scratch on read, so I can't think of anything off the top of my head that would cause this.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-23T05:21:07.845+0000",
                    "updated": "2022-01-23T05:21:07.845+0000",
                    "started": "2022-01-23T05:21:07.845+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "713282",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/713283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#discussion_r790222470\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -3719,6 +3719,77 @@ TEST(TestArrowReaderAdHoc, WriteBatchedNestedNullableStringColumn) {\n   ::arrow::AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n+TEST(TestArrowReaderAdHoc, RepeatReadNullableStructColumnFile) {\n+  // ARROW-14047\n+  auto pool = default_memory_pool();\n+\n+  // Special parquet file; see attachment in Jira\n+  auto file_path = test::get_data_file(\"writeReadRowGroup.parquet\");\n+  PARQUET_ASSIGN_OR_THROW(auto infile, ::arrow::io::ReadableFile::Open(file_path, pool));\n+\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+  ASSERT_OK(OpenFile(infile, pool, &arrow_reader));\n+\n+  std::shared_ptr<::arrow::Table> first_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&first_read));\n+\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  std::shared_ptr<::arrow::Table> second_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read));\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read)); // (Actually third read)\n+\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\n+  // ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n+\n+  // To eliminate possibility of parquet writer oddities, rewrite table to new parquet:\n+  using ::arrow::io::BufferOutputStream;\n+  ASSERT_OK_AND_ASSIGN(auto outs, BufferOutputStream::Create(1 << 10, pool));\n+  auto props = default_writer_properties();\n+  std::unique_ptr<arrow::FileWriter> writer;\n+  ASSERT_OK(\n+      arrow::FileWriter::Open(*first_read->schema().get(), pool, outs, props, &writer));\n+  ASSERT_OK(writer->WriteTable(*first_read.get(), std::numeric_limits<int64_t>::max()));\n+  ASSERT_OK(writer->Close());\n+  ASSERT_OK_AND_ASSIGN(auto buffer, outs->Finish());\n+\n+  // Read from table\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader2;\n+  ASSERT_OK(parquet::arrow::OpenFile(std::make_shared<BufferReader>(buffer), pool, &arrow_reader2));\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&first_read));\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&second_read));\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: \n+  // Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number \n+  // of nulls in array (861)\n+  // ASSERT_OK(second_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n\nReview comment:\n       Wow, that is strange.  Also, just to check they also equal after round-tripping or is there data loss?  Most of the state should be constructed by scratch on read, so I can't think of anything off the top of my head that would cause this.  Trying to run the test under ASAN or UBSAN maybe could highlight something.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-23T05:21:30.487+0000",
                    "updated": "2022-01-23T05:21:30.487+0000",
                    "started": "2022-01-23T05:21:30.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "713283",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/716004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on a change in pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#discussion_r793041384\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -3719,6 +3719,77 @@ TEST(TestArrowReaderAdHoc, WriteBatchedNestedNullableStringColumn) {\n   ::arrow::AssertTablesEqual(*expected, *actual, /*same_chunk_layout=*/false);\n }\n \n+TEST(TestArrowReaderAdHoc, RepeatReadNullableStructColumnFile) {\n+  // ARROW-14047\n+  auto pool = default_memory_pool();\n+\n+  // Special parquet file; see attachment in Jira\n+  auto file_path = test::get_data_file(\"writeReadRowGroup.parquet\");\n+  PARQUET_ASSIGN_OR_THROW(auto infile, ::arrow::io::ReadableFile::Open(file_path, pool));\n+\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+  ASSERT_OK(OpenFile(infile, pool, &arrow_reader));\n+\n+  std::shared_ptr<::arrow::Table> first_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&first_read));\n+\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  std::shared_ptr<::arrow::Table> second_read;\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read));\n+  ASSERT_OK(arrow_reader->ReadTable(&second_read)); // (Actually third read)\n+\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\n+  // ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n+\n+  // To eliminate possibility of parquet writer oddities, rewrite table to new parquet:\n+  using ::arrow::io::BufferOutputStream;\n+  ASSERT_OK_AND_ASSIGN(auto outs, BufferOutputStream::Create(1 << 10, pool));\n+  auto props = default_writer_properties();\n+  std::unique_ptr<arrow::FileWriter> writer;\n+  ASSERT_OK(\n+      arrow::FileWriter::Open(*first_read->schema().get(), pool, outs, props, &writer));\n+  ASSERT_OK(writer->WriteTable(*first_read.get(), std::numeric_limits<int64_t>::max()));\n+  ASSERT_OK(writer->Close());\n+  ASSERT_OK_AND_ASSIGN(auto buffer, outs->Finish());\n+\n+  // Read from table\n+  std::unique_ptr<parquet::arrow::FileReader> arrow_reader2;\n+  ASSERT_OK(parquet::arrow::OpenFile(std::make_shared<BufferReader>(buffer), pool, &arrow_reader2));\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&first_read));\n+  ASSERT_OK(first_read->column(1)->chunk(0)->ValidateFull()); // So it's in theory valid\n+\n+  ASSERT_OK(arrow_reader2->ReadTable(&second_read));\n+  // 'first_read->column(1)->chunk(0)->ValidateFull()' failed with Invalid: List child array invalid: \n+  // Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number \n+  // of nulls in array (861)\n+  // ASSERT_OK(second_read->column(1)->chunk(0)->ValidateFull()); \n+\n+  ::arrow::AssertTablesEqual(*first_read.get(), *second_read.get());\n\nReview comment:\n       Thanks for looking at it, Micah. I'll try ASAN and UBSAN, as well as see if I can repro with fuzz testing.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-26T20:57:15.854+0000",
                    "updated": "2022-01-26T20:57:15.854+0000",
                    "started": "2022-01-26T20:57:15.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716004",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/716181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#issuecomment-1022834715\n\n\n   @emkornfield I have debugged further and I believe I have narrowed down to the approximate place where the data is being corrupted, though it's very strange. I have added two `ValidateFull()` calls that seem to be before and after this corruption occurs. The one on `parquet/arrow/reader_internal.cc:780` passes, but the one on `parquet/arrow/reader.cc:482` fails. The error I get when I run:\r\n   \r\n   ```\r\n   56: /Users/willjones/Documents/arrows/arrow/cpp/src/parquet/arrow/reader.cc:482:  Check failed: _s.ok() Operation failed: out_->ValidateFull()\r\n   56: Bad status: Invalid: In chunk 0: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\r\n   56: /Users/willjones/Documents/arrows/arrow/cpp/src/arrow/array/validate.cc:118  ValidateNulls(*data.type)\r\n   ```\r\n   \r\n   Problem is between those two points I see nothing that could alter the array. I am running this with `OMP_NUM_THREADS=1` and `OMP_THREAD_LIMIT=1`, and I can confirm that in my debugger I only see 2 threads (1 worker and one worker loop). So I'm very confused as to what could be going on between there.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T04:20:45.953+0000",
                    "updated": "2022-01-27T04:20:45.953+0000",
                    "started": "2022-01-27T04:20:45.952+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716181",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/716189",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 edited a comment on pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#issuecomment-1022834715\n\n\n   @emkornfield I have debugged further and I believe I have narrowed down to the approximate place where the data is being corrupted. I have added two `ValidateFull()` calls that seem to be before and after this corruption occurs. The one on `parquet/arrow/reader_internal.cc:780` passes, but the one on `parquet/arrow/reader.cc:482` fails. The error I get when I run:\r\n   \r\n   ```\r\n   56: /Users/willjones/Documents/arrows/arrow/cpp/src/parquet/arrow/reader.cc:482:  Check failed: _s.ok() Operation failed: out_->ValidateFull()\r\n   56: Bad status: Invalid: In chunk 0: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\r\n   56: /Users/willjones/Documents/arrows/arrow/cpp/src/arrow/array/validate.cc:118  ValidateNulls(*data.type)\r\n   ```\r\n   \r\n   It seems that `LoadBatch()` on the leaf node is reading the correct data, but by the time `MakeArray()` is called the data has been somehow corrupted. I will debug further to try and narrow down where that is from.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T04:52:47.538+0000",
                    "updated": "2022-01-27T04:52:47.538+0000",
                    "started": "2022-01-27T04:52:47.538+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716189",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/716203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#issuecomment-1022869849\n\n\n    > It seems that LoadBatch() on the leaf node is reading the correct data, but by the time MakeArray() is called the data has been somehow corrupted. I will debug further to try and narrow down where that is from.\r\n   \r\n   Note that LoadBatch and MakeArray are called recursively from the List then the Struct and then finally the leaf.  LoadBatch is pretty simply (but i guess there could be some issues there).  Structs and list reconstruction is are more complicated especially lists).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T05:47:44.604+0000",
                    "updated": "2022-01-27T05:47:44.604+0000",
                    "started": "2022-01-27T05:47:44.604+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716203",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/716210",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#issuecomment-1022894186\n\n\n   OK I found one bug.  We don't handle the case when structs have [repeated parents](https://github.com/apache/arrow/blob/master/cpp/src/parquet/arrow/reader.cc#L757).  I thought I had handled this case, but maybe a commit got dropped.  I would have expected [this test](https://github.com/apache/arrow/blob/master/cpp/src/parquet/arrow/reconstruct_internal_test.cc#L1141) to have caught it.  I wonder i re-arranging the data might have caught it or this is just a red-herring.  Let me know if this makes sense and if you want to try to reproduce/fix the issue otherwise I can try to do it.\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T06:39:00.356+0000",
                    "updated": "2022-01-27T06:39:00.356+0000",
                    "started": "2022-01-27T06:39:00.356+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716210",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/716211",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield removed a comment on pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#issuecomment-1022894186\n\n\n   OK I found one bug.  We don't handle the case when structs have [repeated parents](https://github.com/apache/arrow/blob/master/cpp/src/parquet/arrow/reader.cc#L757).  I thought I had handled this case, but maybe a commit got dropped.  I would have expected [this test](https://github.com/apache/arrow/blob/master/cpp/src/parquet/arrow/reconstruct_internal_test.cc#L1141) to have caught it.  I wonder i re-arranging the data might have caught it or this is just a red-herring.  Let me know if this makes sense and if you want to try to reproduce/fix the issue otherwise I can try to do it.\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T06:41:23.821+0000",
                    "updated": "2022-01-27T06:41:23.821+0000",
                    "started": "2022-01-27T06:41:23.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716211",
                    "issueId": "13402324"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/worklog/716212",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #12216:\nURL: https://github.com/apache/arrow/pull/12216#issuecomment-1022895612\n\n\n   Deleted a previous comment.  structs that have a repeated parent but no repeated children should be handled correctly in DefLevelsToBitmap\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T06:42:06.687+0000",
                    "updated": "2022-01-27T06:42:06.687+0000",
                    "started": "2022-01-27T06:42:06.686+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716212",
                    "issueId": "13402324"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 30600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7cf01b3f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3eb322c2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@123a8993[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@35b80c24[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ba4303e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7f2b6806[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@391b1061[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4cb7f24a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6580e22[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@22973db7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@436ea99c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@30383619[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 30600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Feb 09 10:49:22 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-02-09T10:49:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14047/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2021-09-20T22:17:40.000+0000",
        "updated": "2022-02-09T18:32:37.000+0000",
        "timeoriginalestimate": null,
        "description": "We are seeing that for certain data sets when dealing with lists of structs, repeated reads yield different results - I have a file that exhibits this behavior and below is the code for reproducing it:\r\n{code:java}\r\n  filesystem::path filePath = dirPath / \"writeReadRowGroup.parquet\";\r\n  arrow::MemoryPool *pool = arrow::default_memory_pool();  std::shared_ptr<arrow::io::ReadableFile> infile;\r\n  PARQUET_ASSIGN_OR_THROW(infile, arrow::io::ReadableFile::Open(filePath, pool));\r\n  std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\r\n  auto status = parquet::arrow::OpenFile(infile, pool, &arrow_reader);\r\n  CHECK_OK(status);  std::shared_ptr<arrow::Schema> readSchema;\r\n  CHECK_OK(arrow_reader->GetSchema(&readSchema));\r\n  std::shared_ptr<arrow::Table> table;\r\n  std::vector<int> indicesToGet;\r\n  CHECK_OK(arrow_reader->ReadTable(&table));  auto recordListCol1 = arrow::Table::Make(arrow::schema({table->schema()->GetFieldByName(\"recordList\")}),\r\n                                           {table->GetColumnByName(\"recordList\")});  for (int i = 0; i < 20; ++i) {\r\n    cout << \"data reread operation number = \" + std::to_string(i) << endl;\r\n    std::shared_ptr<arrow::Table> table2;\r\n    CHECK_OK(arrow_reader->ReadTable(&table2));\r\n    auto recordListCol2 = arrow::Table::Make(arrow::schema({table2->schema()->GetFieldByName(\"recordList\")}),\r\n                                             {table2->GetColumnByName(\"recordList\")});\r\n    bool equals = recordListCol1->Equals(*recordListCol2);\r\n    if (!equals) {\r\n      cout << recordListCol1->ToString() << endl;\r\n      cout << endl << \"new table\" << endl;\r\n      cout << recordListCol2->ToString() << endl;\r\n      throw std::runtime_error(\"Subsequent re-read failure \");\r\n    }  }\r\n\r\n{code}\r\nApparently, as shown in the attached capture the state machine used to track nulls is broken on subsequent usage\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 30600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/13033931",
                "id": "13033931",
                "filename": "Capture.PNG",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=rteodorescu",
                    "name": "rteodorescu",
                    "key": "rteodorescu",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
                    },
                    "displayName": "Radu Teodorescu",
                    "active": true,
                    "timeZone": "Etc/UTC"
                },
                "created": "2021-09-20T22:16:31.749+0000",
                "size": 59171,
                "mimeType": "image/png",
                "content": "https://issues.apache.org/jira/secure/attachment/13033931/Capture.PNG"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/13033932",
                "id": "13033932",
                "filename": "writeReadRowGroup.parquet",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=rteodorescu",
                    "name": "rteodorescu",
                    "key": "rteodorescu",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
                    },
                    "displayName": "Radu Teodorescu",
                    "active": true,
                    "timeZone": "Etc/UTC"
                },
                "created": "2021-09-20T22:09:30.017+0000",
                "size": 16301,
                "mimeType": "application/octet-stream",
                "content": "https://issues.apache.org/jira/secure/attachment/13033932/writeReadRowGroup.parquet"
            }
        ],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] [Parquet] FileReader returns inconsistent results on repeat reads",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": "Centos 7 gcc 9.2.0",
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/comment/17475812",
                    "id": "17475812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I have yet to be able to reproduce this issue, because I instead am getting segfaults. Unfortunately, these don't seem particularly related to your issue, so I might create separate tickets to look at what I'm encountering and will see if someone else can help me reproduce.\r\n\r\nI tried reproducing the issue in Python (hoping for a quicker repro) with the following snippet:\r\n\r\n{code:python}\r\nimport pyarrow.parquet as pq\r\npath = \"writeReadRowGroup.parquet\"\r\nreader = pq.ParquetFile(path).reader\r\ntables = [reader.read_all() for _ in range(20)]\r\n\r\nall(tables[0].column(\"recordList\") == table.column(\"recordList\") for table in tables)\r\n{code}\r\n\r\nBut that segfaults with the following traceback:\r\n\r\n{code}\r\n_mi_heap_malloc_zero (@_mi_heap_malloc_zero:20)\r\narrow::BaseMemoryPoolImpl<arrow::(anonymous namespace)::MimallocAllocator>::Allocate(long long, unsigned char**) (@arrow::BaseMemoryPoolImpl<arrow::(anonymous namespace)::MimallocAllocator>::Allocate(long long, unsigned char**):22)\r\narrow::PoolBuffer::Reserve(long long) (@arrow::PoolBuffer::Reserve(long long):74)\r\narrow::PoolBuffer::Resize(long long, bool) (@arrow::PoolBuffer::Resize(long long, bool):31)\r\narrow::AllocateResizableBuffer(long long, arrow::MemoryPool*) (@arrow::AllocateResizableBuffer(long long, arrow::MemoryPool*):21)\r\nparquet::arrow::(anonymous namespace)::StructReader::BuildArray(long long, std::__1::shared_ptr<arrow::ChunkedArray>*) (@parquet::arrow::(anonymous namespace)::StructReader::BuildArray(long long, std::__1::shared_ptr<arrow::ChunkedArray>*):88)\r\nparquet::arrow::(anonymous namespace)::ListReader<int>::BuildArray(long long, std::__1::shared_ptr<arrow::ChunkedArray>*) (@parquet::arrow::(anonymous namespace)::ListReader<int>::BuildArray(long long, std::__1::shared_ptr<arrow::ChunkedArray>*):125)\r\nparquet::arrow::ColumnReaderImpl::NextBatch(long long, std::__1::shared_ptr<arrow::ChunkedArray>*) (@parquet::arrow::ColumnReaderImpl::NextBatch(long long, std::__1::shared_ptr<arrow::ChunkedArray>*):30)\r\nparquet::arrow::(anonymous namespace)::FileReaderImpl::ReadColumn(int, std::__1::vector<int, std::__1::allocator<int> > const&, parquet::arrow::ColumnReader*, std::__1::shared_ptr<arrow::ChunkedArray>*) (@parquet::arrow::(anonymous namespace)::FileReaderImpl::ReadColumn(int, std::__1::vector<int, std::__1::allocator<int> > const&, parquet::arrow::ColumnReader*, std::__1::shared_ptr<arrow::ChunkedArray>*):77)\r\nparquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups(std::__1::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, arrow::internal::Executor*)::$_4::operator()(unsigned long, std::__1::shared_ptr<parquet::arrow::ColumnReaderImpl>) const (@parquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups(std::__1::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, arrow::internal::Executor*)::$_4::operator()(unsigned long, std::__1::shared_ptr<parquet::arrow::ColumnReaderImpl>) const:19)\r\narrow::internal::FnOnce<void ()>::FnImpl<std::__1::__bind<arrow::detail::ContinueFuture, arrow::Future<std::__1::shared_ptr<arrow::ChunkedArray> >&, parquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups(std::__1::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, arrow::internal::Executor*)::$_4&, unsigned long&, std::__1::shared_ptr<parquet::arrow::ColumnReaderImpl> > >::invoke() (@arrow::internal::FnOnce<void ()>::FnImpl<std::__1::__bind<arrow::detail::ContinueFuture, arrow::Future<std::__1::shared_ptr<arrow::ChunkedArray> >&, parquet::arrow::(anonymous namespace)::FileReaderImpl::DecodeRowGroups(std::__1::shared_ptr<parquet::arrow::(anonymous namespace)::FileReaderImpl>, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, arrow::internal::Executor*)::$_4&, unsigned long&, std::__1::shared_ptr<parquet::arrow::ColumnReaderImpl> > >::invoke():31)\r\nvoid* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3> >(void*) (@void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, arrow::internal::ThreadPool::LaunchWorkersUnlocked(int)::$_3> >(void*):182)\r\n_pthread_start (@_pthread_start:40)\r\n{code}\r\n\r\nIn C++, having a different problem:\r\n\r\n{code:cpp}\r\n#include<memory>\r\n#include<iostream>\r\n#include<stdexcept>\r\n#include<filesystem>\r\n#include<arrow/api.h>\r\n#include<arrow/io/api.h>\r\n#include<parquet/arrow/reader.h>\r\n\r\nusing namespace std;\r\nusing namespace std::__fs;\r\n\r\narrow::Status inner_main() {\r\n    filesystem::path filePath = \"writeReadRowGroup.parquet\";\r\n    arrow::MemoryPool *pool = arrow::default_memory_pool();\r\n    std::shared_ptr<arrow::io::ReadableFile> infile;\r\n    PARQUET_ASSIGN_OR_THROW(infile, arrow::io::ReadableFile::Open(filePath, pool));\r\n    std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\r\n    auto status = parquet::arrow::OpenFile(infile, pool, &arrow_reader); // segfaults here\r\n    ARROW_RETURN_NOT_OK(status);\r\n    std::shared_ptr<arrow::Schema> readSchema;\r\n    ARROW_RETURN_NOT_OK(arrow_reader->GetSchema(&readSchema));\r\n    std::shared_ptr<arrow::Table> table;\r\n    std::vector<int> indicesToGet;\r\n    ARROW_RETURN_NOT_OK(arrow_reader->ReadTable(&table));\r\n    auto recordListCol1 = arrow::Table::Make(arrow::schema({table->schema()->GetFieldByName(\"recordList\")}),\r\n                                             {table->GetColumnByName(\"recordList\")});\r\n    for (int i = 0; i < 20; ++i)\r\n    {\r\n        cout << \"data reread operation number = \" + std::to_string(i) << endl;\r\n        std::shared_ptr<arrow::Table> table2;\r\n        ARROW_RETURN_NOT_OK(arrow_reader->ReadTable(&table2));\r\n        auto recordListCol2 = arrow::Table::Make(arrow::schema({table2->schema()->GetFieldByName(\"recordList\")}),\r\n                                                 {table2->GetColumnByName(\"recordList\")});\r\n        bool equals = recordListCol1->Equals(*recordListCol2);\r\n        if (!equals)\r\n        {\r\n            cout << recordListCol1->ToString() << endl;\r\n            cout << endl\r\n                 << \"new table\" << endl;\r\n            cout << recordListCol2->ToString() << endl;\r\n            throw std::runtime_error(\"Subsequent re-read failure \");\r\n        }\r\n    }\r\n\r\n    return arrow::Status::OK();\r\n}\r\n\r\nint main()\r\n{\r\n    auto status = inner_main();\r\n    return status.ok() ? 0 : 1;\r\n}\r\n{code}\r\n\r\nCall stack from C++ \r\n\r\n{code}\r\n__pthread_kill (@__pthread_kill:5)\r\npthread_kill (@pthread_kill:75)\r\nabort (@abort:44)\r\nmalloc_vreport (@has_default_zone0:3)\r\nmalloc_report (@malloc_report:19)\r\nfree (@free:128)\r\napache::thrift::transport::TMemoryBuffer::~TMemoryBuffer() (@apache::thrift::transport::TMemoryBuffer::~TMemoryBuffer():14)\r\nvoid parquet::DeserializeThriftUnencryptedMsg<parquet::format::FileMetaData>(unsigned char const*, unsigned int*, parquet::format::FileMetaData*) (@void parquet::DeserializeThriftUnencryptedMsg<parquet::format::FileMetaData>(unsigned char const*, unsigned int*, parquet::format::FileMetaData*):104)\r\nparquet::FileMetaData::FileMetaDataImpl::FileMetaDataImpl(void const*, unsigned int*, std::__1::shared_ptr<parquet::InternalFileDecryptor>) (@parquet::FileMetaData::FileMetaDataImpl::FileMetaDataImpl(void const*, unsigned int*, std::__1::shared_ptr<parquet::InternalFileDecryptor>):100)\r\nparquet::FileMetaData::FileMetaData(void const*, unsigned int*, std::__1::shared_ptr<parquet::InternalFileDecryptor>) (@parquet::FileMetaData::FileMetaData(void const*, unsigned int*, std::__1::shared_ptr<parquet::InternalFileDecryptor>):27)\r\nparquet::FileMetaData::Make(void const*, unsigned int*, std::__1::shared_ptr<parquet::InternalFileDecryptor>) (@parquet::FileMetaData::Make(void const*, unsigned int*, std::__1::shared_ptr<parquet::InternalFileDecryptor>):27)\r\nparquet::SerializedFile::ParseUnencryptedFileMetadata(std::__1::shared_ptr<arrow::Buffer> const&, unsigned int) (@parquet::SerializedFile::ParseUnencryptedFileMetadata(std::__1::shared_ptr<arrow::Buffer> const&, unsigned int):31)\r\nparquet::SerializedFile::ParseMetaData() (@parquet::SerializedFile::ParseMetaData():217)\r\nparquet::ParquetFileReader::Contents::Open(std::__1::shared_ptr<arrow::io::RandomAccessFile>, parquet::ReaderProperties const&, std::__1::shared_ptr<parquet::FileMetaData>) (@parquet::ParquetFileReader::Contents::Open(std::__1::shared_ptr<arrow::io::RandomAccessFile>, parquet::ReaderProperties const&, std::__1::shared_ptr<parquet::FileMetaData>):56)\r\nparquet::ParquetFileReader::Open(std::__1::shared_ptr<arrow::io::RandomAccessFile>, parquet::ReaderProperties const&, std::__1::shared_ptr<parquet::FileMetaData>) (@parquet::ParquetFileReader::Open(std::__1::shared_ptr<arrow::io::RandomAccessFile>, parquet::ReaderProperties const&, std::__1::shared_ptr<parquet::FileMetaData>):18)\r\nparquet::arrow::FileReaderBuilder::Open(std::__1::shared_ptr<arrow::io::RandomAccessFile>, parquet::ReaderProperties const&, std::__1::shared_ptr<parquet::FileMetaData>) (@parquet::arrow::FileReaderBuilder::Open(std::__1::shared_ptr<arrow::io::RandomAccessFile>, parquet::ReaderProperties const&, std::__1::shared_ptr<parquet::FileMetaData>):22)\r\nparquet::arrow::OpenFile(std::__1::shared_ptr<arrow::io::RandomAccessFile>, arrow::MemoryPool*, std::__1::unique_ptr<parquet::arrow::FileReader, std::__1::default_delete<parquet::arrow::FileReader> >*) (@parquet::arrow::OpenFile(std::__1::shared_ptr<arrow::io::RandomAccessFile>, arrow::MemoryPool*, std::__1::unique_ptr<parquet::arrow::FileReader, std::__1::default_delete<parquet::arrow::FileReader> >*):32)\r\ninner_main() (/Users/willjones/Documents/arrow_cpp_example/example.cc:18)\r\nmain (/Users/willjones/Documents/arrow_cpp_example/example.cc:50)\r\nstart (@start:133)\r\n{code}\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-01-13T22:34:53.031+0000",
                    "updated": "2022-01-13T22:34:53.031+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/comment/17476352",
                    "id": "17476352",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Update: I've managed to reproduce this issue in Arrow 6.0.1, so it's likely still a problem. I'm now working on creating a unit test that captures this issue.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-01-14T18:53:41.054+0000",
                    "updated": "2022-01-14T18:53:41.054+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/comment/17478271",
                    "id": "17478271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~rteodorescu] Do you happen to have the code that generated that file? I can reproduce an issue from that particular file, but I haven't been able to figure out how to generate data that has the same issue. All examples I've generated from the same schema are being read consistently, so I think I must be missing something in the structure of the data that's triggering this behavior.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-01-18T23:31:06.523+0000",
                    "updated": "2022-01-18T23:31:06.523+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/comment/17479652",
                    "id": "17479652",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "A couple further notes:\r\n\r\n* \u00a0The issue doesn't seem to be just with the parquet file. I can save a new file with the latest Arrow that has the same read issue.\r\n* \u00a0The issue seems to be related to overall structure rather than any particular row. If I remove any single row (doesn't matter which one) the issue disappears.\r\n* The first read is always good, and the sequence of valid and invalid reads seems to be deterministic, though the pattern isn't obvious.\r\n* An invalid read can be detected with {{ValidateFull()}} on the {{recordList}}  array. Here is the error message it yields:\r\n\r\n{code}\r\nInvalid: List child array invalid: Invalid: Struct child array #0 invalid: Invalid: null_count value (854) doesn't match actual number of nulls in array (861)\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-01-20T20:17:14.460+0000",
                    "updated": "2022-01-20T20:17:14.460+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402324/comment/17489460",
                    "id": "17489460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Patch was incorporated with ARROW-15550.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-02-09T10:49:22.599+0000",
                    "updated": "2022-02-09T10:49:22.599+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z0v4c0:",
        "customfield_12314139": null
    }
}