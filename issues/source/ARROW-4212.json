{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13208580",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580",
    "key": "ARROW-4212",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pearu",
            "name": "pearu",
            "key": "pearu",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pearu&avatarId=35984",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pearu&avatarId=35984",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pearu&avatarId=35984",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pearu&avatarId=35984"
            },
            "displayName": "Pearu Peterson",
            "active": true,
            "timeZone": "Europe/Tallinn"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333104",
                "id": "12333104",
                "name": "GPU"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 72600,
            "total": 72600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 72600,
            "total": 72600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4212/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 93,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pearu commented on pull request #3439: ARROW-4212: [WIP][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439\n \n \n   This PR implements the following new features:\r\n   1. `CudaContext::GetDeviceAddress` method\r\n   2. `pyarrow.cuda.Context.get_device_address` method\r\n   3. `pyarrow.cuda.Context.buffer_from_object` method to create a CudaBuffer view of arbitrary device memory object that implements `__cuda_array_interface__` attribute or that is `CudaBuffer` or `CudaHostBuffer` or numba `MemoryPointer` object.\r\n   4. Tests for `buffer_from_object` method\r\n   \r\n   and the following improvements:\r\n   1. `pyarrow.cuda.Context.foreign_buffer` ensures that the used device memory address is valid for the given context.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-20T20:28:11.270+0000",
                    "updated": "2019-01-20T20:28:11.270+0000",
                    "started": "2019-01-20T20:28:11.270+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187536",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pearu",
                        "name": "pearu",
                        "key": "pearu",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pearu&avatarId=35984",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pearu&avatarId=35984",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pearu&avatarId=35984",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pearu&avatarId=35984"
                        },
                        "displayName": "Pearu Peterson",
                        "active": true,
                        "timeZone": "Europe/Tallinn"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pearu",
                        "name": "pearu",
                        "key": "pearu",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pearu&avatarId=35984",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pearu&avatarId=35984",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pearu&avatarId=35984",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pearu&avatarId=35984"
                        },
                        "displayName": "Pearu Peterson",
                        "active": true,
                        "timeZone": "Europe/Tallinn"
                    },
                    "comment": "",
                    "created": "2019-01-20T20:32:42.098+0000",
                    "updated": "2019-01-20T20:32:42.098+0000",
                    "started": "2019-01-20T20:32:00.000+0000",
                    "timeSpent": "6h",
                    "timeSpentSeconds": 21600,
                    "id": "187537",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pearu commented on issue #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#issuecomment-456000834\n \n \n   @pitrou please review\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T09:16:37.324+0000",
                    "updated": "2019-01-21T09:16:37.324+0000",
                    "started": "2019-01-21T09:16:37.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187642",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187738",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249420652\n \n \n\n ##########\n File path: cpp/src/arrow/gpu/cuda_context.h\n ##########\n @@ -119,6 +119,12 @@ class ARROW_EXPORT CudaContext : public std::enable_shared_from_this<CudaContext\n   /// \\brief Return device number\n   int device_number() const;\n \n+  /// \\brief Get device address for the context\n+  /// \\param[in] addr device address\n+  /// \\param[out] devaddr the device address for the context\n+  /// \\return Status\n+  Status GetDeviceAddress(uintptr_t addr, uintptr_t* devaddr);\n \n Review comment:\n   Why `uintptr_t`? `void*` looks more convenient.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:41.373+0000",
                    "updated": "2019-01-21T12:40:41.373+0000",
                    "started": "2019-01-21T12:40:41.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187738",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187739",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249424935\n \n \n\n ##########\n File path: python/pyarrow/tests/test_cuda_numba_interop.py\n ##########\n @@ -75,6 +75,89 @@ def make_random_buffer(size, target='host', dtype='uint8', ctx=None):\n     raise ValueError('invalid target value')\n \n \n+@pytest.mark.parametrize(\"c\", range(len(context_choice_ids)),\n+                         ids=context_choice_ids)\n+@pytest.mark.parametrize(\"dtype\", dtypes, ids=dtypes)\n+@pytest.mark.parametrize(\"size\", [0, 1, 8, 1000])\n \n Review comment:\n   There is no reason to make tests slower by testing N different lengths. Just test a zero length and a non-zero length.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:41.465+0000",
                    "updated": "2019-01-21T12:40:41.465+0000",
                    "started": "2019-01-21T12:40:41.465+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187739",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187740",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249420814\n \n \n\n ##########\n File path: python/pyarrow/_cuda.pyx\n ##########\n @@ -137,10 +143,38 @@ cdef class Context:\n \n     @property\n     def bytes_allocated(self):\n-        \"\"\" Return the number of allocated bytes.\n+        \"\"\"Return the number of allocated bytes.\n         \"\"\"\n         return self.context.get().bytes_allocated()\n \n+    def get_device_address(self, address):\n+        \"\"\"Return device address for this context\n \n Review comment:\n   Please also update this docstring (see comments above).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:42.005+0000",
                    "updated": "2019-01-21T12:40:42.005+0000",
                    "started": "2019-01-21T12:40:42.005+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187740",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249432170\n \n \n\n ##########\n File path: cpp/src/arrow/gpu/cuda_context.cc\n ##########\n @@ -343,5 +343,12 @@ void* CudaContext::handle() const { return impl_->context_handle(); }\n \n int CudaContext::device_number() const { return impl_->device().device_num; }\n \n+Status CudaContext::GetDeviceAddress(uintptr_t addr, uintptr_t* devaddr) {\n \n Review comment:\n   It would be nice to have at least a minimal test for this API in the C++ tests.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:42.238+0000",
                    "updated": "2019-01-21T12:40:42.238+0000",
                    "started": "2019-01-21T12:40:42.237+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187741",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249431259\n \n \n\n ##########\n File path: python/pyarrow/tests/test_cuda_numba_interop.py\n ##########\n @@ -75,6 +75,89 @@ def make_random_buffer(size, target='host', dtype='uint8', ctx=None):\n     raise ValueError('invalid target value')\n \n \n+@pytest.mark.parametrize(\"c\", range(len(context_choice_ids)),\n+                         ids=context_choice_ids)\n+@pytest.mark.parametrize(\"dtype\", dtypes, ids=dtypes)\n+@pytest.mark.parametrize(\"size\", [0, 1, 8, 1000])\n+def test_from_object(c, dtype, size):\n+    ctx, nb_ctx = context_choices[c]\n+    arr, cbuf = make_random_buffer(size, target='device', dtype=dtype, ctx=ctx)\n+\n+    # Creating device buffer from numba MemoryObject:\n+    mem = cbuf.to_numba()\n+    cbuf2 = ctx.buffer_from_object(mem)\n+    assert cbuf2.size == cbuf.size\n+    arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+    np.testing.assert_equal(arr, arr2)\n+\n+    # Creating device buffer from a device buffer\n+    cbuf2 = ctx.buffer_from_object(cbuf2)\n+    assert cbuf2.size == cbuf.size\n+    arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+    np.testing.assert_equal(arr, arr2)\n+\n+    # Creating device buffer from numba DeviceNDArray:\n+    darr = DeviceNDArray((size,), (np.dtype(dtype).itemsize,), np.dtype(dtype),\n+                         gpu_data=mem)\n+    cbuf2 = ctx.buffer_from_object(darr)\n+    assert cbuf2.size == cbuf.size\n+    arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+    np.testing.assert_equal(arr, arr2)\n+\n+    # Creating device buffer from a slice of numba DeviceNDArray:\n+    if size >= 8:\n+        for s in [slice(size//4, None, None),\n+                  slice(None, -(size//4), None),\n+                  slice(size//4, -(size//4), None),\n+                  slice(None, None, 2),\n+                  slice(size//4, None, 2),\n+                  slice(None, -(size//4), 2),\n+                  slice(size//4, -(size//4), 2),\n+                  slice(None, None, 3),\n+                  slice(size//8, None, 3),\n+                  slice(None, -(size//8), 3),\n+                  slice(size//8, -(size//8), 3)]:\n+            s2 = slice(None, None, s.step)\n+            cbuf2 = ctx.buffer_from_object(darr[s])\n+            arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+            np.testing.assert_equal(arr[s], arr2[s2])\n+\n+    # Creating device buffer from a 2-dimensional numba DeviceNDArray:\n+    if size >= 8:\n+        itemsize = np.dtype(dtype).itemsize\n+        darr = DeviceNDArray((size//4, size//(size//4)),\n \n Review comment:\n   Also, should test a non-contiguous 2d array, and a 2d array with a negative stride.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:43.045+0000",
                    "updated": "2019-01-21T12:40:43.045+0000",
                    "started": "2019-01-21T12:40:43.045+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187742",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187743",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249424432\n \n \n\n ##########\n File path: python/pyarrow/_cuda.pyx\n ##########\n @@ -246,6 +283,73 @@ cdef class Context:\n             result.copy_from_device(buf, position=0, nbytes=size)\n         return result\n \n+    def buffer_from_object(self, obj):\n+        \"\"\"Create device buffer view of arbitray device memory object.\n+\n+        When the object contains a non-contiguous view of device\n+        memory then the returned device buffer will contain contiguous\n+        view of the memory, that is, including the intermediate data\n+        that is otherwise invisible to the input object.\n+\n+        Parameters\n+        ----------\n+        obj : object\n+          Specify object that contains address to device memory or\n+          implements cuda array interface.\n+\n+        Returns\n+        -------\n+        cbuf : CudaBuffer\n+          Device buffer as a view of device memory.\n+\n+        \"\"\"\n+        import numpy as np\n+        if isinstance(obj, HostBuffer):\n+            if not obj.address and obj.size == 0:\n+                return self.new_buffer(0)\n+            return self.foreign_buffer(obj.address, obj.size)\n+        if isinstance(obj, Buffer):\n+            obj = CudaBuffer.from_buffer(obj)\n+        if isinstance(obj, CudaBuffer):\n+            if not obj.address and obj.size == 0:\n+                return self.new_buffer(0)\n+            return self.foreign_buffer(obj.address, obj.size)\n+        elif hasattr(obj, '__cuda_array_interface__'):\n+            desc = obj.__cuda_array_interface__\n+            shape = desc['shape']\n+            strides = desc.get('strides')\n+            dtype = np.dtype(desc['typestr'])\n+            addr = desc['data'][0]\n+            if addr is None:\n+                nbytes = 0\n+            elif not strides:\n+                nbytes = dtype.itemsize * product(shape)\n+            else:\n+                start = 0\n+                end = dtype.itemsize\n+                for i, dim in enumerate(shape):\n+                    if dim == 0:\n+                        start = end = addr\n+                        break\n+                    stride = strides[i]\n+                    if stride > 0:\n+                        end += stride * (dim - 1)\n+                    elif stride < 0:\n+                        start += stride * (dim - 1)\n+                nbytes = end - start\n+            if nbytes:\n+                return self.foreign_buffer(addr + start, nbytes)\n+            else:\n+                return self.new_buffer(0)\n \n Review comment:\n   So... should `foreign_buffer(0, 0)` be supported instead?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:43.389+0000",
                    "updated": "2019-01-21T12:40:43.389+0000",
                    "started": "2019-01-21T12:40:43.389+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187743",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187744",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249420393\n \n \n\n ##########\n File path: cpp/src/arrow/gpu/cuda_context.h\n ##########\n @@ -119,6 +119,12 @@ class ARROW_EXPORT CudaContext : public std::enable_shared_from_this<CudaContext\n   /// \\brief Return device number\n   int device_number() const;\n \n+  /// \\brief Get device address for the context\n \n Review comment:\n   How about \"Return the device address value for the given address. This address is reachable from kernels running in the context\". \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:43.549+0000",
                    "updated": "2019-01-21T12:40:43.549+0000",
                    "started": "2019-01-21T12:40:43.549+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187744",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249433560\n \n \n\n ##########\n File path: python/pyarrow/tests/test_cuda_numba_interop.py\n ##########\n @@ -75,6 +75,89 @@ def make_random_buffer(size, target='host', dtype='uint8', ctx=None):\n     raise ValueError('invalid target value')\n \n \n+@pytest.mark.parametrize(\"c\", range(len(context_choice_ids)),\n+                         ids=context_choice_ids)\n+@pytest.mark.parametrize(\"dtype\", dtypes, ids=dtypes)\n+@pytest.mark.parametrize(\"size\", [0, 1, 8, 1000])\n+def test_from_object(c, dtype, size):\n+    ctx, nb_ctx = context_choices[c]\n+    arr, cbuf = make_random_buffer(size, target='device', dtype=dtype, ctx=ctx)\n+\n+    # Creating device buffer from numba MemoryObject:\n+    mem = cbuf.to_numba()\n+    cbuf2 = ctx.buffer_from_object(mem)\n+    assert cbuf2.size == cbuf.size\n+    arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+    np.testing.assert_equal(arr, arr2)\n+\n+    # Creating device buffer from a device buffer\n+    cbuf2 = ctx.buffer_from_object(cbuf2)\n+    assert cbuf2.size == cbuf.size\n+    arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+    np.testing.assert_equal(arr, arr2)\n+\n+    # Creating device buffer from numba DeviceNDArray:\n+    darr = DeviceNDArray((size,), (np.dtype(dtype).itemsize,), np.dtype(dtype),\n+                         gpu_data=mem)\n+    cbuf2 = ctx.buffer_from_object(darr)\n+    assert cbuf2.size == cbuf.size\n+    arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+    np.testing.assert_equal(arr, arr2)\n+\n+    # Creating device buffer from a slice of numba DeviceNDArray:\n+    if size >= 8:\n+        for s in [slice(size//4, None, None),\n+                  slice(None, -(size//4), None),\n+                  slice(size//4, -(size//4), None),\n+                  slice(None, None, 2),\n+                  slice(size//4, None, 2),\n+                  slice(None, -(size//4), 2),\n+                  slice(size//4, -(size//4), 2),\n+                  slice(None, None, 3),\n+                  slice(size//8, None, 3),\n+                  slice(None, -(size//8), 3),\n+                  slice(size//8, -(size//8), 3)]:\n+            s2 = slice(None, None, s.step)\n+            cbuf2 = ctx.buffer_from_object(darr[s])\n+            arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+            np.testing.assert_equal(arr[s], arr2[s2])\n+\n+    # Creating device buffer from a 2-dimensional numba DeviceNDArray:\n+    if size >= 8:\n+        itemsize = np.dtype(dtype).itemsize\n+        darr = DeviceNDArray((size//4, size//(size//4)),\n+                             (itemsize, itemsize*(size//4)),\n+                             np.dtype(dtype),\n+                             gpu_data=mem)\n+        cbuf2 = ctx.buffer_from_object(darr)\n+        assert cbuf2.size == cbuf.size\n+        arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+        np.testing.assert_equal(arr, arr2)\n+\n+    # Creating device buffer from am object implementing cuda array\n+    # interface:\n+    class MyObj:\n+        def __init__(self, darr):\n+            self.darr = darr\n+\n+        @property\n+        def __cuda_array_interface__(self):\n+            return self.darr.__cuda_array_interface__\n+\n+    cbuf2 = ctx.buffer_from_object(MyObj(darr))\n+    assert cbuf2.size == cbuf.size\n+    arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+    np.testing.assert_equal(arr, arr2)\n+\n+    # Creating device buffer from a CUDA host buffer\n+    hbuf = cuda.new_host_buffer(size * arr.dtype.itemsize)\n+    np.frombuffer(hbuf, dtype=dtype)[:] = arr\n+    cbuf2 = ctx.buffer_from_object(hbuf)\n+    assert cbuf2.size == cbuf.size\n+    arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+    np.testing.assert_equal(arr, arr2)\n \n Review comment:\n   Shouldn't you also test what happens when you pass `buffer_from_object` a non-device pointer? Let's say I call `buffer_from_object(py_buffer(b\"123\"))`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:43.990+0000",
                    "updated": "2019-01-21T12:40:43.990+0000",
                    "started": "2019-01-21T12:40:43.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187745",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249423019\n \n \n\n ##########\n File path: python/pyarrow/_cuda.pyx\n ##########\n @@ -246,6 +283,73 @@ cdef class Context:\n             result.copy_from_device(buf, position=0, nbytes=size)\n         return result\n \n+    def buffer_from_object(self, obj):\n+        \"\"\"Create device buffer view of arbitray device memory object.\n+\n+        When the object contains a non-contiguous view of device\n+        memory then the returned device buffer will contain contiguous\n+        view of the memory, that is, including the intermediate data\n+        that is otherwise invisible to the input object.\n+\n+        Parameters\n+        ----------\n+        obj : object\n+          Specify object that contains address to device memory or\n+          implements cuda array interface.\n+\n+        Returns\n+        -------\n+        cbuf : CudaBuffer\n+          Device buffer as a view of device memory.\n+\n+        \"\"\"\n+        import numpy as np\n \n Review comment:\n   Why import this here? You should only do so in the code path that uses Numpy.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:44.099+0000",
                    "updated": "2019-01-21T12:40:44.099+0000",
                    "started": "2019-01-21T12:40:44.099+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187746",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187747",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249420557\n \n \n\n ##########\n File path: cpp/src/arrow/gpu/cuda_context.h\n ##########\n @@ -119,6 +119,12 @@ class ARROW_EXPORT CudaContext : public std::enable_shared_from_this<CudaContext\n   /// \\brief Return device number\n   int device_number() const;\n \n+  /// \\brief Get device address for the context\n+  /// \\param[in] addr device address\n \n Review comment:\n   According to the `cuPointerGetAttribute` it can be either a host address or device address?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:44.150+0000",
                    "updated": "2019-01-21T12:40:44.150+0000",
                    "started": "2019-01-21T12:40:44.149+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187747",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187748",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249425527\n \n \n\n ##########\n File path: python/pyarrow/tests/test_cuda_numba_interop.py\n ##########\n @@ -75,6 +75,89 @@ def make_random_buffer(size, target='host', dtype='uint8', ctx=None):\n     raise ValueError('invalid target value')\n \n \n+@pytest.mark.parametrize(\"c\", range(len(context_choice_ids)),\n+                         ids=context_choice_ids)\n+@pytest.mark.parametrize(\"dtype\", dtypes, ids=dtypes)\n+@pytest.mark.parametrize(\"size\", [0, 1, 8, 1000])\n+def test_from_object(c, dtype, size):\n+    ctx, nb_ctx = context_choices[c]\n+    arr, cbuf = make_random_buffer(size, target='device', dtype=dtype, ctx=ctx)\n+\n+    # Creating device buffer from numba MemoryObject:\n+    mem = cbuf.to_numba()\n+    cbuf2 = ctx.buffer_from_object(mem)\n+    assert cbuf2.size == cbuf.size\n+    arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+    np.testing.assert_equal(arr, arr2)\n+\n+    # Creating device buffer from a device buffer\n+    cbuf2 = ctx.buffer_from_object(cbuf2)\n+    assert cbuf2.size == cbuf.size\n+    arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+    np.testing.assert_equal(arr, arr2)\n+\n+    # Creating device buffer from numba DeviceNDArray:\n+    darr = DeviceNDArray((size,), (np.dtype(dtype).itemsize,), np.dtype(dtype),\n+                         gpu_data=mem)\n+    cbuf2 = ctx.buffer_from_object(darr)\n+    assert cbuf2.size == cbuf.size\n+    arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+    np.testing.assert_equal(arr, arr2)\n+\n+    # Creating device buffer from a slice of numba DeviceNDArray:\n+    if size >= 8:\n+        for s in [slice(size//4, None, None),\n \n Review comment:\n   It doesn't make much sense to test _all_ those slices. Also, it seems you're not testing a negative stride here. The important additional cases (apart from the nominal case) are: non-contiguous and negative stride (also, both at the same time).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:44.166+0000",
                    "updated": "2019-01-21T12:40:44.166+0000",
                    "started": "2019-01-21T12:40:44.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187748",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187749",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249423442\n \n \n\n ##########\n File path: python/pyarrow/_cuda.pyx\n ##########\n @@ -246,6 +283,73 @@ cdef class Context:\n             result.copy_from_device(buf, position=0, nbytes=size)\n         return result\n \n+    def buffer_from_object(self, obj):\n+        \"\"\"Create device buffer view of arbitray device memory object.\n+\n+        When the object contains a non-contiguous view of device\n+        memory then the returned device buffer will contain contiguous\n+        view of the memory, that is, including the intermediate data\n+        that is otherwise invisible to the input object.\n+\n+        Parameters\n+        ----------\n+        obj : object\n+          Specify object that contains address to device memory or\n+          implements cuda array interface.\n+\n+        Returns\n+        -------\n+        cbuf : CudaBuffer\n+          Device buffer as a view of device memory.\n+\n+        \"\"\"\n+        import numpy as np\n+        if isinstance(obj, HostBuffer):\n+            if not obj.address and obj.size == 0:\n \n Review comment:\n   Hmm... why is this possible?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:44.421+0000",
                    "updated": "2019-01-21T12:40:44.421+0000",
                    "started": "2019-01-21T12:40:44.421+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187749",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187750",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249422692\n \n \n\n ##########\n File path: python/pyarrow/_cuda.pyx\n ##########\n @@ -246,6 +283,73 @@ cdef class Context:\n             result.copy_from_device(buf, position=0, nbytes=size)\n         return result\n \n+    def buffer_from_object(self, obj):\n+        \"\"\"Create device buffer view of arbitray device memory object.\n+\n+        When the object contains a non-contiguous view of device\n+        memory then the returned device buffer will contain contiguous\n+        view of the memory, that is, including the intermediate data\n+        that is otherwise invisible to the input object.\n+\n+        Parameters\n+        ----------\n+        obj : object\n+          Specify object that contains address to device memory or\n \n Review comment:\n   This is difficult to understand. What is an \"object that contains address to device memory\"? Concretely, what can I pass?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:44.477+0000",
                    "updated": "2019-01-21T12:40:44.477+0000",
                    "started": "2019-01-21T12:40:44.477+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187750",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187751",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249424654\n \n \n\n ##########\n File path: python/pyarrow/_cuda.pyx\n ##########\n @@ -246,6 +283,73 @@ cdef class Context:\n             result.copy_from_device(buf, position=0, nbytes=size)\n         return result\n \n+    def buffer_from_object(self, obj):\n+        \"\"\"Create device buffer view of arbitray device memory object.\n+\n+        When the object contains a non-contiguous view of device\n+        memory then the returned device buffer will contain contiguous\n+        view of the memory, that is, including the intermediate data\n+        that is otherwise invisible to the input object.\n+\n+        Parameters\n+        ----------\n+        obj : object\n+          Specify object that contains address to device memory or\n+          implements cuda array interface.\n+\n+        Returns\n+        -------\n+        cbuf : CudaBuffer\n+          Device buffer as a view of device memory.\n+\n+        \"\"\"\n+        import numpy as np\n+        if isinstance(obj, HostBuffer):\n+            if not obj.address and obj.size == 0:\n+                return self.new_buffer(0)\n+            return self.foreign_buffer(obj.address, obj.size)\n+        if isinstance(obj, Buffer):\n+            obj = CudaBuffer.from_buffer(obj)\n+        if isinstance(obj, CudaBuffer):\n+            if not obj.address and obj.size == 0:\n+                return self.new_buffer(0)\n+            return self.foreign_buffer(obj.address, obj.size)\n+        elif hasattr(obj, '__cuda_array_interface__'):\n+            desc = obj.__cuda_array_interface__\n+            shape = desc['shape']\n+            strides = desc.get('strides')\n+            dtype = np.dtype(desc['typestr'])\n+            addr = desc['data'][0]\n+            if addr is None:\n+                nbytes = 0\n+            elif not strides:\n+                nbytes = dtype.itemsize * product(shape)\n+            else:\n+                start = 0\n+                end = dtype.itemsize\n+                for i, dim in enumerate(shape):\n+                    if dim == 0:\n+                        start = end = addr\n+                        break\n+                    stride = strides[i]\n+                    if stride > 0:\n+                        end += stride * (dim - 1)\n+                    elif stride < 0:\n+                        start += stride * (dim - 1)\n+                nbytes = end - start\n+            if nbytes:\n+                return self.foreign_buffer(addr + start, nbytes)\n+            else:\n+                return self.new_buffer(0)\n+        from numba.cuda.cudadrv.driver import MemoryPointer\n \n Review comment:\n   We shouldn't load Numba like that. Instead, first check that `numba.cuda` is in `sys.modules`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:44.500+0000",
                    "updated": "2019-01-21T12:40:44.500+0000",
                    "started": "2019-01-21T12:40:44.500+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187751",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187752",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249421738\n \n \n\n ##########\n File path: python/pyarrow/_cuda.pyx\n ##########\n @@ -246,6 +283,73 @@ cdef class Context:\n             result.copy_from_device(buf, position=0, nbytes=size)\n         return result\n \n+    def buffer_from_object(self, obj):\n+        \"\"\"Create device buffer view of arbitray device memory object.\n \n Review comment:\n   \"arbitrary\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:44.509+0000",
                    "updated": "2019-01-21T12:40:44.509+0000",
                    "started": "2019-01-21T12:40:44.509+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187752",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187753",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249421607\n \n \n\n ##########\n File path: python/pyarrow/_cuda.pyx\n ##########\n @@ -159,26 +193,29 @@ cdef class Context:\n         return pyarrow_wrap_cudabuffer(cudabuf)\n \n     def foreign_buffer(self, address, size):\n-        \"\"\"Create device buffer from device address and size as a view.\n+        \"\"\"Create device buffer from address and size as a view.\n \n         The caller is responsible for allocating and freeing the\n-        memory as well as ensuring that the memory belongs to the\n-        CUDA context that this Context instance holds.\n+        memory.\n \n         Parameters\n         ----------\n         address : int\n-          Specify the starting address of the buffer.\n+          Specify the starting address of the buffer. The address must\n+          be accessible from device after mapping it with\n+          `get_device_address` method.\n         size : int\n           Specify the size of device buffer in bytes.\n \n         Returns\n         -------\n         cbuf : CudaBuffer\n           Device buffer as a view of device memory.\n+\n         \"\"\"\n+        dev_address = self.get_device_address(address)\n         cdef:\n-            intptr_t c_addr = address\n+            uintptr_t c_addr = dev_address\n \n Review comment:\n   I think you can write `uintptr_t c_addr = self.get_device_address(address)`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:44.549+0000",
                    "updated": "2019-01-21T12:40:44.549+0000",
                    "started": "2019-01-21T12:40:44.549+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187753",
                    "issueId": "13208580"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/worklog/187754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3439: ARROW-4212: [REVIEW][C++][Python] CudaBuffer view of arbitrary device memory object\nURL: https://github.com/apache/arrow/pull/3439#discussion_r249431474\n \n \n\n ##########\n File path: python/pyarrow/tests/test_cuda_numba_interop.py\n ##########\n @@ -75,6 +75,89 @@ def make_random_buffer(size, target='host', dtype='uint8', ctx=None):\n     raise ValueError('invalid target value')\n \n \n+@pytest.mark.parametrize(\"c\", range(len(context_choice_ids)),\n+                         ids=context_choice_ids)\n+@pytest.mark.parametrize(\"dtype\", dtypes, ids=dtypes)\n+@pytest.mark.parametrize(\"size\", [0, 1, 8, 1000])\n+def test_from_object(c, dtype, size):\n+    ctx, nb_ctx = context_choices[c]\n+    arr, cbuf = make_random_buffer(size, target='device', dtype=dtype, ctx=ctx)\n+\n+    # Creating device buffer from numba MemoryObject:\n+    mem = cbuf.to_numba()\n+    cbuf2 = ctx.buffer_from_object(mem)\n+    assert cbuf2.size == cbuf.size\n+    arr2 = np.frombuffer(cbuf2.copy_to_host(), dtype=dtype)\n+    np.testing.assert_equal(arr, arr2)\n+\n+    # Creating device buffer from a device buffer\n \n Review comment:\n   Some of these tests do not pertain to Numba interoperability, so they should go in `test_cuda.py` instead.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-21T12:40:44.825+0000",
                    "updated": "2019-01-21T12:40:44.825+0000",
                    "started": "2019-01-21T12:40:44.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187754",
                    "issueId": "13208580"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 72600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@49226039[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@681971e0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@69aa1ebb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4a9ff41f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29768d8c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6105261[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f76dbde[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@a7cff23[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@177b190d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@13fcd2d9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a5d4353[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@77b532dc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 72600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jan 24 13:22:39 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-01-24T13:22:39.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4212/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-01-09T16:49:19.000+0000",
        "updated": "2019-01-24T14:44:52.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently, to create a CUDA buffer from a Numba device array, you have to write:\r\n{code:python}\r\ncuda.CudaBuffer.from_numba(device_arr.gpu_data)\r\n{code}\r\n\r\nIt would be easier if you could just write:\r\n{code}\r\ncuda.CudaBuffer.from_numba(device_arr)\r\n{code}\r\n\r\n(ideally, any object exposing the [CUDA Array Interface|https://numba.pydata.org/numba-doc/latest/cuda/cuda_array_interface.html] would work)",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "20h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 72600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] [CUDA] Creating a CUDA buffer from Numba device array should be easier",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/comment/16738428",
                    "id": "16738428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "cc [~pearu]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-01-09T16:49:33.472+0000",
                    "updated": "2019-01-09T16:49:33.472+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208580/comment/16751119",
                    "id": "16751119",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 3439\n[https://github.com/apache/arrow/pull/3439]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-01-24T13:22:39.143+0000",
                    "updated": "2019-01-24T13:22:39.143+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|u00o9c:",
        "customfield_12314139": null
    }
}