{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13103783",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783",
    "key": "ARROW-1588",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341141",
                "id": "12341141",
                "name": "0.7.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-09-17"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328932",
                "id": "12328932",
                "name": "Format"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1588/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2e49a3ea[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@cc03069[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ac8388c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@578608c4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ca338c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@295ec533[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@324994cc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@55ee7a69[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@306e1513[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6fc62970[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11573fb0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@374c32c1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 25 13:10:48 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-10-25T13:10:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1588/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2017-09-21T00:29:06.000+0000",
        "updated": "2017-10-25T13:10:48.000+0000",
        "timeoriginalestimate": null,
        "description": "We should finalize and harden the decimal format. The remaining issues are officially writing down the choice of making every decimal value 16 bytes and byte order.\n\nFor byte order we'll need to run some benchmarks to compare little endian vs big endian. I plan to work on this over the next week or two.\n\n[~jacques@dremio.com] [~wesmckinn] If there are any additional items you'd like to see addressed here please chime in. ",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++/Format] Harden Decimal Format",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16174984",
                    "id": "16174984",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~nongli], [~jacques@dremio.com] mentioned that you and he discussed why big-endian might be the optimal choice for byte ordering. Do you remember how you determined that to be the case?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-09-21T15:49:18.736+0000",
                    "updated": "2017-09-21T15:49:18.736+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16174993",
                    "id": "16174993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "cc [~henryr] [~tarmstrong]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-09-21T15:54:03.807+0000",
                    "updated": "2017-09-21T15:54:03.807+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16175019",
                    "id": "16175019",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tarmstrong",
                        "name": "tarmstrong",
                        "key": "tarmstrong",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Tim Armstrong",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Thanks for the CC Wes. Is there some additional context here about the goals? Those decisions (16 bytes and big-endian) are not what I'd expect if we were optimising for in-memory processing speed on little-endian architectures. \n\n[~tarasbob] has recently been working on Impala's decimal implementation so may have some thoughts too.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tarmstrong",
                        "name": "tarmstrong",
                        "key": "tarmstrong",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Tim Armstrong",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2017-09-21T16:09:21.667+0000",
                    "updated": "2017-09-21T16:09:21.667+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16175026",
                    "id": "16175026",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tarmstrong",
                        "name": "tarmstrong",
                        "key": "tarmstrong",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Tim Armstrong",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Parquet does encodes some decimals as big-endian values when encoded as FIXED_LEN_BYTE_ARRAY but Impala byte-swaps them when reading. I always found this curious. This was actually a major source of runtime overhead so we ended up with a complicated SIMD byte-swap implementation https://github.com/apache/incubator-impala/blob/2e63752858d71cc745534367a686980e060a8180/be/src/util/bit-util.cc#L210",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tarmstrong",
                        "name": "tarmstrong",
                        "key": "tarmstrong",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Tim Armstrong",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2017-09-21T16:14:19.383+0000",
                    "updated": "2017-09-21T16:14:19.383+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16175056",
                    "id": "16175056",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This seems to support the hypothesis that we should be 16-bytes, little-endian in-memory. It would be helpful to get the historical context on why things are the way the are in Parquet, though",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-09-21T16:31:49.995+0000",
                    "updated": "2017-09-21T16:31:49.995+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16175062",
                    "id": "16175062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~tarmstrong] in the not-too-distant future we will be creating a columnar function kernel library in C++ to process arrays of contiguous decimals in-memory, so we would want operations like {{arr * 2}}, where {{arr}} contains multiple decimal values in a buffer to evaluate as fast as possible. For the moment the only place where Arrow users are doing analytics on Decimals in in Dremio https://github.com/dremio/dremio-oss. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-09-21T16:34:41.217+0000",
                    "updated": "2017-09-21T16:34:56.530+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16175166",
                    "id": "16175166",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tarmstrong",
                        "name": "tarmstrong",
                        "key": "tarmstrong",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Tim Armstrong",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Ah ok, makes sense. I don't know to what extent this applies but our experience is that decimal operations are a lot faster on narrower 4-byte and 8-byte representations. One reason is that the 4 byte and 8 byte decimal values fit in registers and can be manipulated with normal integer operations. A more subtle reason is that implementing some operations correctly (at least in Impala's implementation) requires temporarily promoting to a wider type, e.g. 4 byte -> 8 byte or 8 byte -> 16 bytes. Emulated 128-bit and 256-bit operations are pretty slow.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tarmstrong",
                        "name": "tarmstrong",
                        "key": "tarmstrong",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Tim Armstrong",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2017-09-21T17:34:22.475+0000",
                    "updated": "2017-09-21T17:34:22.475+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16209706",
                    "id": "16209706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Here's the state of the in memory decimal format on the C++ side of things.\r\n\r\nRight now, arrow's in memory decimal format is actually a mixture of both big and little endian (when the platform is little endian, when the platform is big endian it's just big endian).\r\n\r\nThe {{Decimal128}} class that holds the upper and lower 64 bits of a 2's complement 128 bit integer is laid out like this (ignoring methods)\r\n\r\n{code}\r\nclass Decimal128 {\r\n    int64_t upper;\r\n    uint64_t lower;\r\n};\r\n{code}\r\n\r\nWhen we convert this to a C array of bytes we do the following (paraphrasing):\r\n\r\n{code}\r\nconst uint64_t big_bytes[] = {upper, lower};\r\nconst uint8_t* raw_bytes = reinterpret_cast<const uint8_t*>(big_bytes);\r\n{code}\r\n\r\nWhat this means is that groups of 8 bytes are in big-endian order, and within each group of 8 bytes they are platform native.\r\n\r\nThis was an oversight on my part when writing {{ToBytes()}}, that I will rectify. My apologies for not clarifying this earlier.\r\n\r\nThe good news is that:\r\n\r\n# This won't require much effort to fix.\r\n# The work I've already done to make parquet read/write work will only require a one or two line change to make this work regardless of whether we choose big or little endian.\r\n\r\nWe still need to make a choice about which byte order to use.\r\n\r\nSomething to note:\r\n\r\nWhen operating on arrow {{DecimalArray}} bytes, we have to convert each group of 16 bytes to {{Decimal128}} before doing any operations like addition, multiplication, etc. To keep performance snappy we need to spend as little time as possible converting bytes to {{int64_t}}/{{uint64_t}}. If bytes are passed to {{Decimal128}} as little endian then we elide a byteswap operation and simply convert each 8 byte chunk to the respective types of the upper and lower bits. If they're passed as big endian (as in the case of parquet) then we have to do some work to convert them to little endian. For this reason, I think we should choose little endian byte order. Of course, systems that are big endian take a small hit reading arrow decimal arrays.\r\n\r\nIs there someone from the Java side that can clarify what the current in-memory layout for the Java equivalent of C++'s {{DecimalArray}}? Are bytes in little endian order?\r\n\r\ncc [~wesmckinn] [~jnadeau]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-18T17:21:31.083+0000",
                    "updated": "2017-10-18T17:23:11.397+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16209934",
                    "id": "16209934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Java is currently big-endian. See [1] and [2]\r\n[1] https://github.com/apache/arrow/blob/master/java/vector/src/main/java/org/apache/arrow/vector/util/DecimalUtility.java#L144\r\n[2] https://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html#BigInteger(byte[])\r\n\r\nI agree that we should switch to little endian. Arrow should prioritize the cpu friendly format. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2017-10-18T20:05:07.106+0000",
                    "updated": "2017-10-18T20:05:07.106+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16210005",
                    "id": "16210005",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "+1. What do we need to do to effect this change?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-18T20:50:17.378+0000",
                    "updated": "2017-10-18T20:50:17.378+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16210022",
                    "id": "16210022",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I have a patch ready to go on the C++ side, modulo integration tests. I'm in the process of running them now. Is there anything that needs to be done on the Java side?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-18T20:59:37.705+0000",
                    "updated": "2017-10-18T20:59:37.705+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16210038",
                    "id": "16210038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "If Java is assuming big-endian representation then byte-swapping from little-endian, I guess. We also need to document the memory format in the format/ documents. See the TBD section for Decimals in http://arrow.apache.org/docs/metadata.html",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-18T21:05:17.847+0000",
                    "updated": "2017-10-18T21:05:17.847+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16210312",
                    "id": "16210312",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "GitHub user cpcloud opened a pull request:\n\n    https://github.com/apache/arrow/pull/1211\n\n    ARROW-1588: [C++/Format] Harden Decimal Format\n\n    \n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/cpcloud/arrow ARROW-1588\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/arrow/pull/1211.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #1211\n    \n----\ncommit cc2574774e65bcd1d376febf987314c4f2c31581\nAuthor: Phillip Cloud <cpcloud@gmail.com>\nDate:   2017-10-18T22:32:48Z\n\n    ARROW-1588: [C++/Format] Harden Decimal Format\n\n----\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-18T23:42:24.646+0000",
                    "updated": "2017-10-18T23:42:24.646+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16212005",
                    "id": "16212005",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user wesm commented on the issue:\n\n    https://github.com/apache/arrow/pull/1211\n  \n    I'm surprised the integration tests pass. Shouldn't they not?\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-20T01:06:24.343+0000",
                    "updated": "2017-10-20T01:06:24.343+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16212656",
                    "id": "16212656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user cpcloud commented on the issue:\n\n    https://github.com/apache/arrow/pull/1211\n  \n    Yes, I'm not sure why they're passing. I'll take a look and get to the bottom of it\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-20T13:52:17.590+0000",
                    "updated": "2017-10-20T13:52:17.590+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16215966",
                    "id": "16215966",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1211: ARROW-1588: [C++/Format] Harden Decimal Format\nURL: https://github.com/apache/arrow/pull/1211#issuecomment-338815288\n \n \n   @jacques-n could you take a look at this? we still need to figure out what's going on with the integration tests\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T22:28:11.482+0000",
                    "updated": "2017-10-23T22:28:11.482+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16216098",
                    "id": "16216098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1211: ARROW-1588: [C++/Format] Harden Decimal Format\nURL: https://github.com/apache/arrow/pull/1211#issuecomment-338830640\n \n \n   Just to clarify from ARROW-1716 the integration tests pass because the interpretation of decimal bytes isn't being checked in the integration tests, so the bytes compare equal but if we were to print the value as the underlying big integer or int128 in c++ and compare those they would be different.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-24T00:00:15.337+0000",
                    "updated": "2017-10-24T00:00:15.337+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16217865",
                    "id": "16217865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1211: ARROW-1588: [C++/Format] Harden Decimal Format\nURL: https://github.com/apache/arrow/pull/1211#issuecomment-339165470\n \n \n   I think we should merge this and then address the integration test issue and Java fixes in follow up patches. @jacques-n or @siddharthteotia can you please review?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-24T23:20:44.359+0000",
                    "updated": "2017-10-24T23:20:44.359+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16217954",
                    "id": "16217954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "jacques-n commented on issue #1211: ARROW-1588: [C++/Format] Harden Decimal Format\nURL: https://github.com/apache/arrow/pull/1211#issuecomment-339182615\n \n \n   LGTM +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-25T01:11:20.525+0000",
                    "updated": "2017-10-25T01:11:20.525+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16218590",
                    "id": "16218590",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1211\n[https://github.com/apache/arrow/pull/1211]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-25T13:10:46.940+0000",
                    "updated": "2017-10-25T13:10:46.940+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103783/comment/16218591",
                    "id": "16218591",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1211: ARROW-1588: [C++/Format] Harden Decimal Format\nURL: https://github.com/apache/arrow/pull/1211\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/util/CMakeLists.txt b/cpp/src/arrow/util/CMakeLists.txt\nindex 1178c658c..5df5e748f 100644\n--- a/cpp/src/arrow/util/CMakeLists.txt\n+++ b/cpp/src/arrow/util/CMakeLists.txt\n@@ -42,6 +42,7 @@ install(FILES\n   rle-encoding.h\n   sse-util.h\n   stl.h\n+  type_traits.h\n   visibility.h\n   DESTINATION include/arrow/util)\n \ndiff --git a/cpp/src/arrow/util/bit-util-test.cc b/cpp/src/arrow/util/bit-util-test.cc\nindex 5a66d7e85..92bdcb5fc 100644\n--- a/cpp/src/arrow/util/bit-util-test.cc\n+++ b/cpp/src/arrow/util/bit-util-test.cc\n@@ -28,7 +28,6 @@\n \n #include \"arrow/buffer.h\"\n #include \"arrow/memory_pool.h\"\n-#include \"arrow/status.h\"\n #include \"arrow/test-util.h\"\n #include \"arrow/util/bit-stream-utils.h\"\n #include \"arrow/util/bit-util.h\"\n@@ -334,4 +333,36 @@ TEST(BitStreamUtil, ZigZag) {\n   TestZigZag(-std::numeric_limits<int32_t>::max());\n }\n \n+TEST(BitUtil, RoundTripLittleEndianTest) {\n+  uint64_t value = 0xFF;\n+\n+#if ARROW_LITTLE_ENDIAN\n+  uint64_t expected = value;\n+#else\n+  uint64_t expected = std::numeric_limits<uint64_t>::max() << 56;\n+#endif\n+\n+  uint64_t little_endian_result = BitUtil::ToLittleEndian(value);\n+  ASSERT_EQ(expected, little_endian_result);\n+\n+  uint64_t from_little_endian = BitUtil::FromLittleEndian(little_endian_result);\n+  ASSERT_EQ(value, from_little_endian);\n+}\n+\n+TEST(BitUtil, RoundTripBigEndianTest) {\n+  uint64_t value = 0xFF;\n+\n+#if ARROW_LITTLE_ENDIAN\n+  uint64_t expected = std::numeric_limits<uint64_t>::max() << 56;\n+#else\n+  uint64_t expected = value;\n+#endif\n+\n+  uint64_t big_endian_result = BitUtil::ToBigEndian(value);\n+  ASSERT_EQ(expected, big_endian_result);\n+\n+  uint64_t from_big_endian = BitUtil::FromBigEndian(big_endian_result);\n+  ASSERT_EQ(value, from_big_endian);\n+}\n+\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/bit-util.h b/cpp/src/arrow/util/bit-util.h\nindex 2509de21f..8043f90cc 100644\n--- a/cpp/src/arrow/util/bit-util.h\n+++ b/cpp/src/arrow/util/bit-util.h\n@@ -56,6 +56,7 @@\n #include <vector>\n \n #include \"arrow/util/macros.h\"\n+#include \"arrow/util/type_traits.h\"\n #include \"arrow/util/visibility.h\"\n \n #ifdef ARROW_USE_SSE\n@@ -305,7 +306,7 @@ static inline uint32_t ByteSwap(uint32_t value) {\n   return static_cast<uint32_t>(ARROW_BYTE_SWAP32(value));\n }\n static inline int16_t ByteSwap(int16_t value) {\n-  constexpr int16_t m = static_cast<int16_t>(0xff);\n+  constexpr auto m = static_cast<int16_t>(0xff);\n   return static_cast<int16_t>(((value >> 8) & m) | ((value & m) << 8));\n }\n static inline uint16_t ByteSwap(uint16_t value) {\n@@ -331,8 +332,8 @@ static inline void ByteSwap(void* dst, const void* src, int len) {\n       break;\n   }\n \n-  uint8_t* d = reinterpret_cast<uint8_t*>(dst);\n-  const uint8_t* s = reinterpret_cast<const uint8_t*>(src);\n+  auto d = reinterpret_cast<uint8_t*>(dst);\n+  auto s = reinterpret_cast<const uint8_t*>(src);\n   for (int i = 0; i < len; ++i) {\n     d[i] = s[len - i - 1];\n   }\n@@ -341,36 +342,57 @@ static inline void ByteSwap(void* dst, const void* src, int len) {\n /// Converts to big endian format (if not already in big endian) from the\n /// machine's native endian format.\n #if ARROW_LITTLE_ENDIAN\n-static inline int64_t ToBigEndian(int64_t value) { return ByteSwap(value); }\n-static inline uint64_t ToBigEndian(uint64_t value) { return ByteSwap(value); }\n-static inline int32_t ToBigEndian(int32_t value) { return ByteSwap(value); }\n-static inline uint32_t ToBigEndian(uint32_t value) { return ByteSwap(value); }\n-static inline int16_t ToBigEndian(int16_t value) { return ByteSwap(value); }\n-static inline uint16_t ToBigEndian(uint16_t value) { return ByteSwap(value); }\n+template <typename T,\n+          typename =\n+              EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t, int16_t, uint16_t>>\n+static inline T ToBigEndian(T value) {\n+  return ByteSwap(value);\n+}\n+\n+template <typename T,\n+          typename =\n+              EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t, int16_t, uint16_t>>\n+static inline T ToLittleEndian(T value) {\n+  return value;\n+}\n #else\n-static inline int64_t ToBigEndian(int64_t val) { return val; }\n-static inline uint64_t ToBigEndian(uint64_t val) { return val; }\n-static inline int32_t ToBigEndian(int32_t val) { return val; }\n-static inline uint32_t ToBigEndian(uint32_t val) { return val; }\n-static inline int16_t ToBigEndian(int16_t val) { return val; }\n-static inline uint16_t ToBigEndian(uint16_t val) { return val; }\n+template <typename T,\n+          typename =\n+              EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t, int16_t, uint16_t>>\n+static inline T ToBigEndian(T value) {\n+  return value;\n+}\n #endif\n \n /// Converts from big endian format to the machine's native endian format.\n #if ARROW_LITTLE_ENDIAN\n-static inline int64_t FromBigEndian(int64_t value) { return ByteSwap(value); }\n-static inline uint64_t FromBigEndian(uint64_t value) { return ByteSwap(value); }\n-static inline int32_t FromBigEndian(int32_t value) { return ByteSwap(value); }\n-static inline uint32_t FromBigEndian(uint32_t value) { return ByteSwap(value); }\n-static inline int16_t FromBigEndian(int16_t value) { return ByteSwap(value); }\n-static inline uint16_t FromBigEndian(uint16_t value) { return ByteSwap(value); }\n+template <typename T,\n+          typename =\n+              EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t, int16_t, uint16_t>>\n+static inline T FromBigEndian(T value) {\n+  return ByteSwap(value);\n+}\n+\n+template <typename T,\n+          typename =\n+              EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t, int16_t, uint16_t>>\n+static inline T FromLittleEndian(T value) {\n+  return value;\n+}\n #else\n-static inline int64_t FromBigEndian(int64_t val) { return val; }\n-static inline uint64_t FromBigEndian(uint64_t val) { return val; }\n-static inline int32_t FromBigEndian(int32_t val) { return val; }\n-static inline uint32_t FromBigEndian(uint32_t val) { return val; }\n-static inline int16_t FromBigEndian(int16_t val) { return val; }\n-static inline uint16_t FromBigEndian(uint16_t val) { return val; }\n+template <typename T,\n+          typename =\n+              EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t, int16_t, uint16_t>>\n+static inline T FromBigEndian(T value) {\n+  return value;\n+}\n+\n+template <typename T,\n+          typename =\n+              EnableIfIsOneOf<T, int64_t, uint64_t, int32_t, uint32_t, int16_t, uint16_t>>\n+static inline T FromLittleEndian(T value) {\n+  return ByteSwap(value);\n+}\n #endif\n \n // Logical right shift for signed integer types\ndiff --git a/cpp/src/arrow/util/decimal.cc b/cpp/src/arrow/util/decimal.cc\nindex 49d5c0249..7196b252c 100644\n--- a/cpp/src/arrow/util/decimal.cc\n+++ b/cpp/src/arrow/util/decimal.cc\n@@ -27,6 +27,7 @@\n #pragma intrinsic(_BitScanReverse)\n #endif\n \n+#include \"arrow/util/bit-util.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/logging.h\"\n \n@@ -41,11 +42,13 @@ Decimal128::Decimal128(const std::string& str) : Decimal128() {\n }\n \n Decimal128::Decimal128(const uint8_t* bytes)\n-    : Decimal128(reinterpret_cast<const int64_t*>(bytes)[0],\n-                 reinterpret_cast<const uint64_t*>(bytes)[1]) {}\n+    : Decimal128(BitUtil::FromLittleEndian(reinterpret_cast<const int64_t*>(bytes)[1]),\n+                 BitUtil::FromLittleEndian(reinterpret_cast<const uint64_t*>(bytes)[0])) {\n+}\n \n std::array<uint8_t, 16> Decimal128::ToBytes() const {\n-  const uint64_t raw[] = {static_cast<uint64_t>(high_bits_), low_bits_};\n+  const uint64_t raw[] = {BitUtil::ToLittleEndian(low_bits_),\n+                          BitUtil::ToLittleEndian(static_cast<uint64_t>(high_bits_))};\n   const auto* raw_data = reinterpret_cast<const uint8_t*>(raw);\n   std::array<uint8_t, 16> out{{0}};\n   std::copy(raw_data, raw_data + out.size(), out.begin());\ndiff --git a/cpp/src/arrow/util/decimal.h b/cpp/src/arrow/util/decimal.h\nindex 58496a874..ba252bee4 100644\n--- a/cpp/src/arrow/util/decimal.h\n+++ b/cpp/src/arrow/util/decimal.h\n@@ -53,7 +53,8 @@ class ARROW_EXPORT Decimal128 {\n   /// \\brief Parse the number from a base 10 string representation.\n   explicit Decimal128(const std::string& value);\n \n-  /// \\brief Create an Decimal128 from an array of bytes\n+  /// \\brief Create an Decimal128 from an array of bytes. Bytes are assumed to be in\n+  /// little endian byte order.\n   explicit Decimal128(const uint8_t* bytes);\n \n   /// \\brief Negate the current value\n@@ -104,7 +105,7 @@ class ARROW_EXPORT Decimal128 {\n   /// \\brief Get the low bits of the two's complement representation of the number.\n   uint64_t low_bits() const { return low_bits_; }\n \n-  /// \\brief Return the raw bytes of the value.\n+  /// \\brief Return the raw bytes of the value in little-endian byte order.\n   std::array<uint8_t, 16> ToBytes() const;\n \n   /// \\brief Convert the Decimal128 value to a base 10 decimal string with the given\ndiff --git a/cpp/src/arrow/util/type_traits.h b/cpp/src/arrow/util/type_traits.h\nnew file mode 100644\nindex 000000000..c05309af8\n--- /dev/null\n+++ b/cpp/src/arrow/util/type_traits.h\n@@ -0,0 +1,41 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_UTIL_TYPE_TRAITS_H\n+#define ARROW_UTIL_TYPE_TRAITS_H\n+\n+#include <type_traits>\n+\n+namespace arrow {\n+\n+/// \\brief Metafunction to allow checking if a type matches any of another set of types\n+template <typename...>\n+struct IsOneOf : std::false_type {};  /// Base case: nothing has matched\n+\n+template <typename T, typename U, typename... Args>\n+struct IsOneOf<T, U, Args...> {\n+  /// Recursive case: T == U or T matches any other types provided (not including U).\n+  static constexpr bool value = std::is_same<T, U>::value || IsOneOf<T, Args...>::value;\n+};\n+\n+/// \\brief Shorthand for using IsOneOf + std::enable_if\n+template <typename T, typename... Args>\n+using EnableIfIsOneOf = typename std::enable_if<IsOneOf<T, Args...>::value, T>::type;\n+\n+}  // namespace arrow\n+\n+#endif  // ARROW_UTIL_TYPE_TRAITS_H\ndiff --git a/format/Layout.md b/format/Layout.md\nindex 3c21dbc0d..ebf93821a 100644\n--- a/format/Layout.md\n+++ b/format/Layout.md\n@@ -41,9 +41,8 @@ concepts, here is a small glossary to help disambiguate.\n   or a fully-specified nested type. When we say slot we mean a relative type\n   value, not necessarily any physical storage region.\n * Logical type: A data type that is implemented using some relative (physical)\n-  type. For example, a Decimal value stored in 16 bytes could be stored in a\n-  primitive array with slot size 16 bytes. Similarly, strings can be stored as\n-  `List<1-byte>`.\n+  type. For example, Decimal values are stored as 16 bytes in a fixed byte\n+  size array. Similarly, strings can be stored as `List<1-byte>`.\n * Parent and child arrays: names to express relationships between physical\n   value arrays in a nested type structure. For example, a `List<T>`-type parent\n   array has a T-type array as its child (see more on lists below).\ndiff --git a/format/Metadata.md b/format/Metadata.md\nindex 80ca08ae1..893b0a474 100644\n--- a/format/Metadata.md\n+++ b/format/Metadata.md\n@@ -391,7 +391,8 @@ logical type, which have no children) and 3 buffers:\n \n ### Decimal\n \n-TBD\n+Decimals are represented as a 2's complement 128-bit (16 byte) signed integer\n+in little-endian byte order.\n \n ### Timestamp\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-25T13:10:48.564+0000",
                    "updated": "2017-10-25T13:10:48.564+0000"
                }
            ],
            "maxResults": 21,
            "total": 21,
            "startAt": 0
        },
        "customfield_12311820": "0|i3kbun:",
        "customfield_12314139": null
    }
}