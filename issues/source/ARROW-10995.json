{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13347054",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054",
    "key": "ARROW-10995",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12605434",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12605434",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "inwardIssue": {
                    "id": "13347619",
                    "key": "ARROW-11016",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347619",
                    "fields": {
                        "summary": "[Rust] Parquet ArrayReader should allow reading a subset of row groups",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10995/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/528820",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove opened a new pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029\n\n\n   Before this PR, we were launching one thread per Parquet file in ParquetExec. This works well when the number of files is small but does not scale well when there are hundreds of files. This PR respects the context's `max_concurrency` configuration option and uses it to split the files up into lists per partition/thread.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T16:27:41.453+0000",
                    "updated": "2020-12-28T16:27:41.453+0000",
                    "started": "2020-12-28T16:27:41.452+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528820",
                    "issueId": "13347054"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/528826",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029#issuecomment-751789556\n\n\n   https://issues.apache.org/jira/browse/ARROW-10995\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T17:06:10.394+0000",
                    "updated": "2020-12-28T17:06:10.394+0000",
                    "started": "2020-12-28T17:06:10.394+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528826",
                    "issueId": "13347054"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/528838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029#discussion_r549435152\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/parquet.rs\n##########\n@@ -104,35 +105,41 @@ impl ParquetExec {\n         filenames: &[&str],\n         projection: Option<Vec<usize>>,\n         batch_size: usize,\n+        max_concurrency: usize,\n     ) -> Result<Self> {\n         // build a list of Parquet partitions with statistics and gather all unique schemas\n         // used in this data set\n         let mut schemas: Vec<Schema> = vec![];\n-        let mut partitions = Vec::with_capacity(filenames.len());\n-        for filename in filenames {\n-            let file = File::open(filename)?;\n-            let file_reader = Arc::new(SerializedFileReader::new(file)?);\n-            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n-            let meta_data = arrow_reader.get_metadata();\n-            // collect all the unique schemas in this data set\n-            let schema = arrow_reader.get_schema()?;\n-            if schemas.is_empty() || schema != schemas[0] {\n-                schemas.push(schema);\n-            }\n-            let mut num_rows = 0;\n-            let mut total_byte_size = 0;\n-            for i in 0..meta_data.num_row_groups() {\n-                let row_group_meta = meta_data.row_group(i);\n-                num_rows += row_group_meta.num_rows();\n-                total_byte_size += row_group_meta.total_byte_size();\n+        let mut partitions = Vec::with_capacity(max_concurrency);\n+        let filenames: Vec<String> = filenames.iter().map(|s| s.to_string()).collect();\n+        let chunks = split_files(&filenames, max_concurrency);\n\nReview comment:\n       What happens if certain chunks / combination of file names are much bigger than others? I guess then it will not finish as fast as it could if it could use all the threads?\r\n   I don't know much about this part of the code base, so maybe it doesn't make sense, but I think the ideal code would be keeping it finegrained on a file level (or even smaller if possible / beneficial) and having a (configured) runtime divide the work?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T18:04:03.866+0000",
                    "updated": "2020-12-28T18:04:03.866+0000",
                    "started": "2020-12-28T18:04:03.866+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528838",
                    "issueId": "13347054"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/528858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029#discussion_r549456810\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/parquet.rs\n##########\n@@ -104,35 +105,41 @@ impl ParquetExec {\n         filenames: &[&str],\n         projection: Option<Vec<usize>>,\n         batch_size: usize,\n+        max_concurrency: usize,\n     ) -> Result<Self> {\n         // build a list of Parquet partitions with statistics and gather all unique schemas\n         // used in this data set\n         let mut schemas: Vec<Schema> = vec![];\n-        let mut partitions = Vec::with_capacity(filenames.len());\n-        for filename in filenames {\n-            let file = File::open(filename)?;\n-            let file_reader = Arc::new(SerializedFileReader::new(file)?);\n-            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n-            let meta_data = arrow_reader.get_metadata();\n-            // collect all the unique schemas in this data set\n-            let schema = arrow_reader.get_schema()?;\n-            if schemas.is_empty() || schema != schemas[0] {\n-                schemas.push(schema);\n-            }\n-            let mut num_rows = 0;\n-            let mut total_byte_size = 0;\n-            for i in 0..meta_data.num_row_groups() {\n-                let row_group_meta = meta_data.row_group(i);\n-                num_rows += row_group_meta.num_rows();\n-                total_byte_size += row_group_meta.total_byte_size();\n+        let mut partitions = Vec::with_capacity(max_concurrency);\n+        let filenames: Vec<String> = filenames.iter().map(|s| s.to_string()).collect();\n+        let chunks = split_files(&filenames, max_concurrency);\n\nReview comment:\n       It is true, we could sort the list by row count first and distribute the chunks more evenly. I will look at doing that. \r\n   \r\n   Unfortunately we can't use tokio for these tasks (as far as I know) and we have to use threads because the parquet crate does not support async so this is quite heavweight if we launch too many threads. Also, it can be problematic if we try and open thousands of files at the same time since we can hit file handle limits, so it is important to have some limit on concurrency.\r\n   \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T19:11:13.044+0000",
                    "updated": "2020-12-28T19:11:13.044+0000",
                    "started": "2020-12-28T19:11:13.043+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528858",
                    "issueId": "13347054"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/528884",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029#discussion_r549472740\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/parquet.rs\n##########\n@@ -104,35 +105,41 @@ impl ParquetExec {\n         filenames: &[&str],\n         projection: Option<Vec<usize>>,\n         batch_size: usize,\n+        max_concurrency: usize,\n     ) -> Result<Self> {\n         // build a list of Parquet partitions with statistics and gather all unique schemas\n         // used in this data set\n         let mut schemas: Vec<Schema> = vec![];\n-        let mut partitions = Vec::with_capacity(filenames.len());\n-        for filename in filenames {\n-            let file = File::open(filename)?;\n-            let file_reader = Arc::new(SerializedFileReader::new(file)?);\n-            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n-            let meta_data = arrow_reader.get_metadata();\n-            // collect all the unique schemas in this data set\n-            let schema = arrow_reader.get_schema()?;\n-            if schemas.is_empty() || schema != schemas[0] {\n-                schemas.push(schema);\n-            }\n-            let mut num_rows = 0;\n-            let mut total_byte_size = 0;\n-            for i in 0..meta_data.num_row_groups() {\n-                let row_group_meta = meta_data.row_group(i);\n-                num_rows += row_group_meta.num_rows();\n-                total_byte_size += row_group_meta.total_byte_size();\n+        let mut partitions = Vec::with_capacity(max_concurrency);\n+        let filenames: Vec<String> = filenames.iter().map(|s| s.to_string()).collect();\n+        let chunks = split_files(&filenames, max_concurrency);\n\nReview comment:\n       I suggest filing a follow on ticket to try and split work across `ColumnChunks` rather than files -- i think starting with just files is reasonable \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T20:09:30.890+0000",
                    "updated": "2020-12-28T20:09:30.890+0000",
                    "started": "2020-12-28T20:09:30.890+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528884",
                    "issueId": "13347054"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/528886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029#discussion_r549473140\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/parquet.rs\n##########\n@@ -104,35 +105,41 @@ impl ParquetExec {\n         filenames: &[&str],\n         projection: Option<Vec<usize>>,\n         batch_size: usize,\n+        max_concurrency: usize,\n     ) -> Result<Self> {\n         // build a list of Parquet partitions with statistics and gather all unique schemas\n         // used in this data set\n         let mut schemas: Vec<Schema> = vec![];\n-        let mut partitions = Vec::with_capacity(filenames.len());\n-        for filename in filenames {\n-            let file = File::open(filename)?;\n-            let file_reader = Arc::new(SerializedFileReader::new(file)?);\n-            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n-            let meta_data = arrow_reader.get_metadata();\n-            // collect all the unique schemas in this data set\n-            let schema = arrow_reader.get_schema()?;\n-            if schemas.is_empty() || schema != schemas[0] {\n-                schemas.push(schema);\n-            }\n-            let mut num_rows = 0;\n-            let mut total_byte_size = 0;\n-            for i in 0..meta_data.num_row_groups() {\n-                let row_group_meta = meta_data.row_group(i);\n-                num_rows += row_group_meta.num_rows();\n-                total_byte_size += row_group_meta.total_byte_size();\n+        let mut partitions = Vec::with_capacity(max_concurrency);\n+        let filenames: Vec<String> = filenames.iter().map(|s| s.to_string()).collect();\n+        let chunks = split_files(&filenames, max_concurrency);\n+        let mut num_rows = 0;\n+        let mut total_byte_size = 0;\n+        for chunk in chunks {\n\nReview comment:\n       another strategy you might consider that might be less susceptible to long-tail splits would be to put all the filenames into a channel (or other sort of queue) and have each of the threads read from the queue when they were done with the previous work item. In that way you wouldn't have to try and balance the work up front\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-28T20:12:18.036+0000",
                    "updated": "2020-12-28T20:12:18.036+0000",
                    "started": "2020-12-28T20:12:18.036+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528886",
                    "issueId": "13347054"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/528952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029#discussion_r549523454\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/parquet.rs\n##########\n@@ -104,35 +105,41 @@ impl ParquetExec {\n         filenames: &[&str],\n         projection: Option<Vec<usize>>,\n         batch_size: usize,\n+        max_concurrency: usize,\n     ) -> Result<Self> {\n         // build a list of Parquet partitions with statistics and gather all unique schemas\n         // used in this data set\n         let mut schemas: Vec<Schema> = vec![];\n-        let mut partitions = Vec::with_capacity(filenames.len());\n-        for filename in filenames {\n-            let file = File::open(filename)?;\n-            let file_reader = Arc::new(SerializedFileReader::new(file)?);\n-            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n-            let meta_data = arrow_reader.get_metadata();\n-            // collect all the unique schemas in this data set\n-            let schema = arrow_reader.get_schema()?;\n-            if schemas.is_empty() || schema != schemas[0] {\n-                schemas.push(schema);\n-            }\n-            let mut num_rows = 0;\n-            let mut total_byte_size = 0;\n-            for i in 0..meta_data.num_row_groups() {\n-                let row_group_meta = meta_data.row_group(i);\n-                num_rows += row_group_meta.num_rows();\n-                total_byte_size += row_group_meta.total_byte_size();\n+        let mut partitions = Vec::with_capacity(max_concurrency);\n+        let filenames: Vec<String> = filenames.iter().map(|s| s.to_string()).collect();\n+        let chunks = split_files(&filenames, max_concurrency);\n\nReview comment:\n       Thanks. I filed https://issues.apache.org/jira/browse/ARROW-11056 for splitting on row groups. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T00:05:31.356+0000",
                    "updated": "2020-12-29T00:05:31.356+0000",
                    "started": "2020-12-29T00:05:31.356+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528952",
                    "issueId": "13347054"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/528953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029#discussion_r549523560\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/parquet.rs\n##########\n@@ -104,35 +105,41 @@ impl ParquetExec {\n         filenames: &[&str],\n         projection: Option<Vec<usize>>,\n         batch_size: usize,\n+        max_concurrency: usize,\n     ) -> Result<Self> {\n         // build a list of Parquet partitions with statistics and gather all unique schemas\n         // used in this data set\n         let mut schemas: Vec<Schema> = vec![];\n-        let mut partitions = Vec::with_capacity(filenames.len());\n-        for filename in filenames {\n-            let file = File::open(filename)?;\n-            let file_reader = Arc::new(SerializedFileReader::new(file)?);\n-            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n-            let meta_data = arrow_reader.get_metadata();\n-            // collect all the unique schemas in this data set\n-            let schema = arrow_reader.get_schema()?;\n-            if schemas.is_empty() || schema != schemas[0] {\n-                schemas.push(schema);\n-            }\n-            let mut num_rows = 0;\n-            let mut total_byte_size = 0;\n-            for i in 0..meta_data.num_row_groups() {\n-                let row_group_meta = meta_data.row_group(i);\n-                num_rows += row_group_meta.num_rows();\n-                total_byte_size += row_group_meta.total_byte_size();\n+        let mut partitions = Vec::with_capacity(max_concurrency);\n+        let filenames: Vec<String> = filenames.iter().map(|s| s.to_string()).collect();\n+        let chunks = split_files(&filenames, max_concurrency);\n\nReview comment:\n       @Dandandan I started looking at bin packing algorithms but I think it might be better to do this as a follow-up. What do you think?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T00:06:14.275+0000",
                    "updated": "2020-12-29T00:06:14.275+0000",
                    "started": "2020-12-29T00:06:14.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528953",
                    "issueId": "13347054"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/528959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029#discussion_r549526242\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/parquet.rs\n##########\n@@ -104,35 +105,41 @@ impl ParquetExec {\n         filenames: &[&str],\n         projection: Option<Vec<usize>>,\n         batch_size: usize,\n+        max_concurrency: usize,\n     ) -> Result<Self> {\n         // build a list of Parquet partitions with statistics and gather all unique schemas\n         // used in this data set\n         let mut schemas: Vec<Schema> = vec![];\n-        let mut partitions = Vec::with_capacity(filenames.len());\n-        for filename in filenames {\n-            let file = File::open(filename)?;\n-            let file_reader = Arc::new(SerializedFileReader::new(file)?);\n-            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n-            let meta_data = arrow_reader.get_metadata();\n-            // collect all the unique schemas in this data set\n-            let schema = arrow_reader.get_schema()?;\n-            if schemas.is_empty() || schema != schemas[0] {\n-                schemas.push(schema);\n-            }\n-            let mut num_rows = 0;\n-            let mut total_byte_size = 0;\n-            for i in 0..meta_data.num_row_groups() {\n-                let row_group_meta = meta_data.row_group(i);\n-                num_rows += row_group_meta.num_rows();\n-                total_byte_size += row_group_meta.total_byte_size();\n+        let mut partitions = Vec::with_capacity(max_concurrency);\n+        let filenames: Vec<String> = filenames.iter().map(|s| s.to_string()).collect();\n+        let chunks = split_files(&filenames, max_concurrency);\n+        let mut num_rows = 0;\n+        let mut total_byte_size = 0;\n+        for chunk in chunks {\n\nReview comment:\n       I do like that idea. I'll give that some thought.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T00:23:32.111+0000",
                    "updated": "2020-12-29T00:23:32.111+0000",
                    "started": "2020-12-29T00:23:32.111+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528959",
                    "issueId": "13347054"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/529015",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029#discussion_r549561500\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/parquet.rs\n##########\n@@ -104,35 +105,41 @@ impl ParquetExec {\n         filenames: &[&str],\n         projection: Option<Vec<usize>>,\n         batch_size: usize,\n+        max_concurrency: usize,\n     ) -> Result<Self> {\n         // build a list of Parquet partitions with statistics and gather all unique schemas\n         // used in this data set\n         let mut schemas: Vec<Schema> = vec![];\n-        let mut partitions = Vec::with_capacity(filenames.len());\n-        for filename in filenames {\n-            let file = File::open(filename)?;\n-            let file_reader = Arc::new(SerializedFileReader::new(file)?);\n-            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n-            let meta_data = arrow_reader.get_metadata();\n-            // collect all the unique schemas in this data set\n-            let schema = arrow_reader.get_schema()?;\n-            if schemas.is_empty() || schema != schemas[0] {\n-                schemas.push(schema);\n-            }\n-            let mut num_rows = 0;\n-            let mut total_byte_size = 0;\n-            for i in 0..meta_data.num_row_groups() {\n-                let row_group_meta = meta_data.row_group(i);\n-                num_rows += row_group_meta.num_rows();\n-                total_byte_size += row_group_meta.total_byte_size();\n+        let mut partitions = Vec::with_capacity(max_concurrency);\n+        let filenames: Vec<String> = filenames.iter().map(|s| s.to_string()).collect();\n+        let chunks = split_files(&filenames, max_concurrency);\n\nReview comment:\n       Makes sense, the change to limit the nr. of threads is useful. I think the idea of @alamb to send it over a channel makes sense to me.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T04:13:21.984+0000",
                    "updated": "2020-12-29T04:13:21.984+0000",
                    "started": "2020-12-29T04:13:21.984+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529015",
                    "issueId": "13347054"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/529016",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029#discussion_r549561500\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/parquet.rs\n##########\n@@ -104,35 +105,41 @@ impl ParquetExec {\n         filenames: &[&str],\n         projection: Option<Vec<usize>>,\n         batch_size: usize,\n+        max_concurrency: usize,\n     ) -> Result<Self> {\n         // build a list of Parquet partitions with statistics and gather all unique schemas\n         // used in this data set\n         let mut schemas: Vec<Schema> = vec![];\n-        let mut partitions = Vec::with_capacity(filenames.len());\n-        for filename in filenames {\n-            let file = File::open(filename)?;\n-            let file_reader = Arc::new(SerializedFileReader::new(file)?);\n-            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n-            let meta_data = arrow_reader.get_metadata();\n-            // collect all the unique schemas in this data set\n-            let schema = arrow_reader.get_schema()?;\n-            if schemas.is_empty() || schema != schemas[0] {\n-                schemas.push(schema);\n-            }\n-            let mut num_rows = 0;\n-            let mut total_byte_size = 0;\n-            for i in 0..meta_data.num_row_groups() {\n-                let row_group_meta = meta_data.row_group(i);\n-                num_rows += row_group_meta.num_rows();\n-                total_byte_size += row_group_meta.total_byte_size();\n+        let mut partitions = Vec::with_capacity(max_concurrency);\n+        let filenames: Vec<String> = filenames.iter().map(|s| s.to_string()).collect();\n+        let chunks = split_files(&filenames, max_concurrency);\n\nReview comment:\n       Makes sense, the change to limit the nr. of threads is useful already. I think the idea of @alamb to send it over a channel makes sense to me.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T04:13:44.962+0000",
                    "updated": "2020-12-29T04:13:44.962+0000",
                    "started": "2020-12-29T04:13:44.961+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529016",
                    "issueId": "13347054"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/529017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029#discussion_r549561500\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/parquet.rs\n##########\n@@ -104,35 +105,41 @@ impl ParquetExec {\n         filenames: &[&str],\n         projection: Option<Vec<usize>>,\n         batch_size: usize,\n+        max_concurrency: usize,\n     ) -> Result<Self> {\n         // build a list of Parquet partitions with statistics and gather all unique schemas\n         // used in this data set\n         let mut schemas: Vec<Schema> = vec![];\n-        let mut partitions = Vec::with_capacity(filenames.len());\n-        for filename in filenames {\n-            let file = File::open(filename)?;\n-            let file_reader = Arc::new(SerializedFileReader::new(file)?);\n-            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n-            let meta_data = arrow_reader.get_metadata();\n-            // collect all the unique schemas in this data set\n-            let schema = arrow_reader.get_schema()?;\n-            if schemas.is_empty() || schema != schemas[0] {\n-                schemas.push(schema);\n-            }\n-            let mut num_rows = 0;\n-            let mut total_byte_size = 0;\n-            for i in 0..meta_data.num_row_groups() {\n-                let row_group_meta = meta_data.row_group(i);\n-                num_rows += row_group_meta.num_rows();\n-                total_byte_size += row_group_meta.total_byte_size();\n+        let mut partitions = Vec::with_capacity(max_concurrency);\n+        let filenames: Vec<String> = filenames.iter().map(|s| s.to_string()).collect();\n+        let chunks = split_files(&filenames, max_concurrency);\n\nReview comment:\n       Makes sense, the change to limit the nr. of threads is useful already. The idea of @alamb to send it over a channel makes sense to me.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T04:14:07.937+0000",
                    "updated": "2020-12-29T04:14:07.937+0000",
                    "started": "2020-12-29T04:14:07.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529017",
                    "issueId": "13347054"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/529019",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029#discussion_r549561500\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/parquet.rs\n##########\n@@ -104,35 +105,41 @@ impl ParquetExec {\n         filenames: &[&str],\n         projection: Option<Vec<usize>>,\n         batch_size: usize,\n+        max_concurrency: usize,\n     ) -> Result<Self> {\n         // build a list of Parquet partitions with statistics and gather all unique schemas\n         // used in this data set\n         let mut schemas: Vec<Schema> = vec![];\n-        let mut partitions = Vec::with_capacity(filenames.len());\n-        for filename in filenames {\n-            let file = File::open(filename)?;\n-            let file_reader = Arc::new(SerializedFileReader::new(file)?);\n-            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n-            let meta_data = arrow_reader.get_metadata();\n-            // collect all the unique schemas in this data set\n-            let schema = arrow_reader.get_schema()?;\n-            if schemas.is_empty() || schema != schemas[0] {\n-                schemas.push(schema);\n-            }\n-            let mut num_rows = 0;\n-            let mut total_byte_size = 0;\n-            for i in 0..meta_data.num_row_groups() {\n-                let row_group_meta = meta_data.row_group(i);\n-                num_rows += row_group_meta.num_rows();\n-                total_byte_size += row_group_meta.total_byte_size();\n+        let mut partitions = Vec::with_capacity(max_concurrency);\n+        let filenames: Vec<String> = filenames.iter().map(|s| s.to_string()).collect();\n+        let chunks = split_files(&filenames, max_concurrency);\n\nReview comment:\n       Makes sense, the change to limit the nr. of threads is useful already. The idea of @alamb to send the work items over a channel makes sense to me.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T04:14:22.930+0000",
                    "updated": "2020-12-29T04:14:22.930+0000",
                    "started": "2020-12-29T04:14:22.930+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529019",
                    "issueId": "13347054"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/worklog/529180",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #9029:\nURL: https://github.com/apache/arrow/pull/9029\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T16:30:39.015+0000",
                    "updated": "2020-12-29T16:30:39.015+0000",
                    "started": "2020-12-29T16:30:39.014+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529180",
                    "issueId": "13347054"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@23b6bfda[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7eda77de[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a3b942d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@77f27c33[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1fa755bd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7e73e947[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@786f9058[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1c186882[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39b7dc01[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@58ef23a1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c0685b4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@385bace[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Dec 29 16:30:27 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-29T16:30:27.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10995/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-12-20T23:07:10.000+0000",
        "updated": "2020-12-29T16:30:40.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently the unit of parallelism is the number of parquet files being read.\r\n\r\nFor example, if we run a query against a Parquet table that consists of 8 partitions then we will attempt to run 8 async tasks in parallel and if there is a single Parquet file then we will only try and run 1 async task so this does not scale well. Also, if there are hundreds or thousands of Parquet files then we will try and process them all concurrently which also doesn't scale well.\r\n\r\nThese are the options for improving this situation:\r\n\r\n\u00a0\r\n # Use Parquet row groups as the unit of partitioning and divide the number of row groups by the desired level of concurrency (defaulting to number of cores)\r\n # Keep file as the unit of partitions and add a RepartitionExec into the plan if there are fewer partitions (files) than cores and in the case where there are more files than cores, split the files up into lists so that each partition is a list of files rather than a single file. Each partition task will process one file at a time.\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Improve parallelism when reading Parquet files",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347054/comment/17256048",
                    "id": "17256048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 9029\n[https://github.com/apache/arrow/pull/9029]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-12-29T16:30:27.267+0000",
                    "updated": "2020-12-29T16:30:27.267+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0lovs:",
        "customfield_12314139": null
    }
}